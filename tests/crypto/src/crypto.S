// RISC-V Architectural Validation Test AES64KS1I-01
//
//
// Copyright (c) 2021 Imperas Software Ltd., www.imperas.com
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
// either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
//

//
// Specification: K Crypto/Scalar
// Description: Testing instruction 'aes64ks1i'.

#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA(RV64IK)

.section .text.init
.globl main
main:

RVTEST_CODE_BEGIN aes64ks2_01_init aes64ks2_01_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x6,signature_1_0)


aes64ks2_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0xdd99c98a02e6f1ce), rs1:x31(0x10fd3dedadea5195), rs2:x16(0xdf7f3844121bcc23)
    TEST_RR_OP(aes64ks2, x1, x31, x16, 0xdd99c98a02e6f1ce, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x6, 0, x7)

aes64ks2_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0xecf9f8a319544cb9), rs1:x30(0xbd295ce2d2ffbec1), rs2:x15(0xf5adb41aa47d105b)
    TEST_RR_OP(aes64ks2, x2, x30, x15, 0xecf9f8a319544cb9, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x6, 8, x7)

aes64ks2_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0x3be819bab91e6dc5), rs1:x29(0xc9649f05a8e1a8bb), rs2:x14(0x82f6747f707af2c0)
    TEST_RR_OP(aes64ks2, x3, x29, x14, 0x3be819bab91e6dc5, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x6, 16, x7)

aes64ks2_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0xa773fd0fd4dad2db), rs1:x28(0x3541291848c99fcb), rs2:x13(0x73a92fd4e19bfbc3)
    TEST_RR_OP(aes64ks2, x4, x28, x13, 0xa773fd0fd4dad2db, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x6, 24, x7)

aes64ks2_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x164359bb422857ef), rs1:x27(0x10a24740461d524f), rs2:x12(0x546b0e54528a10af)
    TEST_RR_OP(aes64ks2, x5, x27, x12, 0x164359bb422857ef, 0x10a24740461d524f, 0x546b0e54528a10af, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_2_0)


aes64ks2_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x02d41b5b12765c1b), rs1:x26(0x546b0e54528a10af), rs2:x11(0x10a24740461d524f)
    TEST_RR_OP(aes64ks2, x6, x26, x11, 0x02d41b5b12765c1b, 0x546b0e54528a10af, 0x10a24740461d524f, x1, 0, x2)

aes64ks2_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x0e2199073b60b01f), rs1:x25(0x73a92fd4e19bfbc3), rs2:x10(0x3541291848c99fcb)
    TEST_RR_OP(aes64ks2, x7, x25, x10, 0x0e2199073b60b01f, 0x73a92fd4e19bfbc3, 0x3541291848c99fcb, x1, 8, x2)

aes64ks2_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0xe37343c12a17dcc4), rs1:x24(0x82f6747f707af2c0), rs2:x9(0xc9649f05a8e1a8bb)
    TEST_RR_OP(aes64ks2, x8, x24, x9, 0xe37343c12a17dcc4, 0x82f6747f707af2c0, 0xc9649f05a8e1a8bb, x1, 16, x2)

aes64ks2_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0x9a7b563927520adb), rs1:x23(0xf5adb41aa47d105b), rs2:x8(0xbd295ce2d2ffbec1)
    TEST_RR_OP(aes64ks2, x9, x23, x8, 0x9a7b563927520adb, 0xf5adb41aa47d105b, 0xbd295ce2d2ffbec1, x1, 24, x2)

aes64ks2_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0x6268543c729569d1), rs1:x22(0xdf7f3844121bcc23), rs2:x7(0x10fd3dedadea5195)
    TEST_RR_OP(aes64ks2, x10, x22, x7, 0x6268543c729569d1, 0xdf7f3844121bcc23, 0x10fd3dedadea5195, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_3_0)


aes64ks2_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x00000000ffffffff), rs1:x21(0x0000000000000001), rs2:x6(0xffffffffffffffff)
    TEST_RR_OP(aes64ks2, x11, x21, x6, 0x00000000ffffffff, 0x1, 0xffffffffffffffff, x1, 0, x7)

aes64ks2_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x80000000ffffffff), rs1:x20(0x0000000000000002), rs2:x5(0x7fffffffffffffff)
    TEST_RR_OP(aes64ks2, x12, x20, x5, 0x80000000ffffffff, 0x2, 0x7fffffffffffffff, x1, 8, x7)

aes64ks2_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x40000000ffffffff), rs1:x19(0x0000000000000004), rs2:x4(0xbfffffffffffffff)
    TEST_RR_OP(aes64ks2, x13, x19, x4, 0x40000000ffffffff, 0x4, 0xbfffffffffffffff, x1, 16, x7)

aes64ks2_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x20000000ffffffff), rs1:x18(0x0000000000000008), rs2:x3(0xdfffffffffffffff)
    TEST_RR_OP(aes64ks2, x14, x18, x3, 0x20000000ffffffff, 0x8, 0xdfffffffffffffff, x1, 24, x7)

aes64ks2_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x10000000ffffffff), rs1:x17(0x0000000000000010), rs2:x2(0xefffffffffffffff)
    TEST_RR_OP(aes64ks2, x15, x17, x2, 0x10000000ffffffff, 0x10, 0xefffffffffffffff, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x2,signature_4_0)


aes64ks2_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x08000000ffffffff), rs1:x16(0x0000000000000020), rs2:x1(0xf7ffffffffffffff)
    TEST_RR_OP(aes64ks2, x16, x16, x1, 0x08000000ffffffff, 0x20, 0xf7ffffffffffffff, x2, 0, x3)

aes64ks2_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x04000000ffffffff), rs1:x15(0x0000000000000040), rs2:x31(0xfbffffffffffffff)
    TEST_RR_OP(aes64ks2, x17, x15, x31, 0x04000000ffffffff, 0x40, 0xfbffffffffffffff, x2, 8, x3)

aes64ks2_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x02000000ffffffff), rs1:x14(0x0000000000000080), rs2:x30(0xfdffffffffffffff)
    TEST_RR_OP(aes64ks2, x18, x14, x30, 0x02000000ffffffff, 0x80, 0xfdffffffffffffff, x2, 16, x3)

aes64ks2_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x01000000ffffffff), rs1:x13(0x0000000000000100), rs2:x29(0xfeffffffffffffff)
    TEST_RR_OP(aes64ks2, x19, x13, x29, 0x01000000ffffffff, 0x100, 0xfeffffffffffffff, x2, 24, x3)

aes64ks2_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x00800000ffffffff), rs1:x12(0x0000000000000200), rs2:x28(0xff7fffffffffffff)
    TEST_RR_OP(aes64ks2, x20, x12, x28, 0x00800000ffffffff, 0x200, 0xff7fffffffffffff, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_5_0)


aes64ks2_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x00400000ffffffff), rs1:x11(0x0000000000000400), rs2:x27(0xffbfffffffffffff)
    TEST_RR_OP(aes64ks2, x21, x11, x27, 0x00400000ffffffff, 0x400, 0xffbfffffffffffff, x1, 0, x2)

aes64ks2_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x00200000ffffffff), rs1:x10(0x0000000000000800), rs2:x26(0xffdfffffffffffff)
    TEST_RR_OP(aes64ks2, x22, x10, x26, 0x00200000ffffffff, 0x800, 0xffdfffffffffffff, x1, 8, x2)

aes64ks2_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x00100000ffffffff), rs1:x9(0x0000000000001000), rs2:x25(0xffefffffffffffff)
    TEST_RR_OP(aes64ks2, x23, x9, x25, 0x00100000ffffffff, 0x1000, 0xffefffffffffffff, x1, 16, x2)

aes64ks2_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x00080000ffffffff), rs1:x8(0x0000000000002000), rs2:x24(0xfff7ffffffffffff)
    TEST_RR_OP(aes64ks2, x24, x8, x24, 0x00080000ffffffff, 0x2000, 0xfff7ffffffffffff, x1, 24, x2)

aes64ks2_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x00040000ffffffff), rs1:x7(0x0000000000004000), rs2:x23(0xfffbffffffffffff)
    TEST_RR_OP(aes64ks2, x25, x7, x23, 0x00040000ffffffff, 0x4000, 0xfffbffffffffffff, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_6_0)


aes64ks2_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x00020000ffffffff), rs1:x6(0x0000000000008000), rs2:x22(0xfffdffffffffffff)
    TEST_RR_OP(aes64ks2, x26, x6, x22, 0x00020000ffffffff, 0x8000, 0xfffdffffffffffff, x1, 0, x7)

aes64ks2_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x00010000ffffffff), rs1:x5(0x0000000000010000), rs2:x21(0xfffeffffffffffff)
    TEST_RR_OP(aes64ks2, x27, x5, x21, 0x00010000ffffffff, 0x10000, 0xfffeffffffffffff, x1, 8, x7)

aes64ks2_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x00008000ffffffff), rs1:x4(0x0000000000020000), rs2:x20(0xffff7fffffffffff)
    TEST_RR_OP(aes64ks2, x28, x4, x20, 0x00008000ffffffff, 0x20000, 0xffff7fffffffffff, x1, 16, x7)

aes64ks2_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x00004000ffffffff), rs1:x3(0x0000000000040000), rs2:x19(0xffffbfffffffffff)
    TEST_RR_OP(aes64ks2, x29, x3, x19, 0x00004000ffffffff, 0x40000, 0xffffbfffffffffff, x1, 24, x7)

aes64ks2_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x00002000ffffffff), rs1:x2(0x0000000000080000), rs2:x18(0xffffdfffffffffff)
    TEST_RR_OP(aes64ks2, x30, x2, x18, 0x00002000ffffffff, 0x80000, 0xffffdfffffffffff, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x5,signature_7_0)


aes64ks2_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x00001000ffffffff), rs1:x1(0x0000000000100000), rs2:x17(0xffffefffffffffff)
    TEST_RR_OP(aes64ks2, x31, x1, x17, 0x00001000ffffffff, 0x100000, 0xffffefffffffffff, x5, 0, x6)

aes64ks2_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x00000800ffffffff), rs1:x31(0x0000000000200000), rs2:x16(0xfffff7ffffffffff)
    TEST_RR_OP(aes64ks2, x1, x31, x16, 0x00000800ffffffff, 0x200000, 0xfffff7ffffffffff, x5, 8, x6)

aes64ks2_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x00000400ffffffff), rs1:x30(0x0000000000400000), rs2:x15(0xfffffbffffffffff)
    TEST_RR_OP(aes64ks2, x2, x30, x15, 0x00000400ffffffff, 0x400000, 0xfffffbffffffffff, x5, 16, x6)

aes64ks2_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x00000200ffffffff), rs1:x29(0x0000000000800000), rs2:x14(0xfffffdffffffffff)
    TEST_RR_OP(aes64ks2, x3, x29, x14, 0x00000200ffffffff, 0x800000, 0xfffffdffffffffff, x5, 24, x6)

aes64ks2_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x00000100ffffffff), rs1:x28(0x0000000001000000), rs2:x13(0xfffffeffffffffff)
    TEST_RR_OP(aes64ks2, x4, x28, x13, 0x00000100ffffffff, 0x1000000, 0xfffffeffffffffff, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_8_0)


aes64ks2_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x00000080ffffffff), rs1:x27(0x0000000002000000), rs2:x12(0xffffff7fffffffff)
    TEST_RR_OP(aes64ks2, x5, x27, x12, 0x00000080ffffffff, 0x2000000, 0xffffff7fffffffff, x1, 0, x2)

aes64ks2_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x00000040ffffffff), rs1:x26(0x0000000004000000), rs2:x11(0xffffffbfffffffff)
    TEST_RR_OP(aes64ks2, x6, x26, x11, 0x00000040ffffffff, 0x4000000, 0xffffffbfffffffff, x1, 8, x2)

aes64ks2_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x00000020ffffffff), rs1:x25(0x0000000008000000), rs2:x10(0xffffffdfffffffff)
    TEST_RR_OP(aes64ks2, x7, x25, x10, 0x00000020ffffffff, 0x8000000, 0xffffffdfffffffff, x1, 16, x2)

aes64ks2_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x00000010ffffffff), rs1:x24(0x0000000010000000), rs2:x9(0xffffffefffffffff)
    TEST_RR_OP(aes64ks2, x8, x24, x9, 0x00000010ffffffff, 0x10000000, 0xffffffefffffffff, x1, 24, x2)

aes64ks2_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x00000008ffffffff), rs1:x23(0x0000000020000000), rs2:x8(0xfffffff7ffffffff)
    TEST_RR_OP(aes64ks2, x9, x23, x8, 0x00000008ffffffff, 0x20000000, 0xfffffff7ffffffff, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_9_0)


aes64ks2_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x00000004ffffffff), rs1:x22(0x0000000040000000), rs2:x7(0xfffffffbffffffff)
    TEST_RR_OP(aes64ks2, x10, x22, x7, 0x00000004ffffffff, 0x40000000, 0xfffffffbffffffff, x1, 0, x2)

aes64ks2_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x00000002ffffffff), rs1:x21(0x0000000080000000), rs2:x6(0xfffffffdffffffff)
    TEST_RR_OP(aes64ks2, x11, x21, x6, 0x00000002ffffffff, 0x80000000, 0xfffffffdffffffff, x1, 8, x2)

aes64ks2_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x00000000fffffffe), rs1:x20(0x0000000100000000), rs2:x5(0xfffffffeffffffff)
    TEST_RR_OP(aes64ks2, x12, x20, x5, 0x00000000fffffffe, 0x100000000, 0xfffffffeffffffff, x1, 16, x2)

aes64ks2_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x800000027ffffffd), rs1:x19(0x0000000200000000), rs2:x4(0xffffffff7fffffff)
    TEST_RR_OP(aes64ks2, x13, x19, x4, 0x800000027ffffffd, 0x200000000, 0xffffffff7fffffff, x1, 24, x2)

aes64ks2_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x40000004bffffffb), rs1:x18(0x0000000400000000), rs2:x3(0xffffffffbfffffff)
    TEST_RR_OP(aes64ks2, x14, x18, x3, 0x40000004bffffffb, 0x400000000, 0xffffffffbfffffff, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x3,signature_10_0)


aes64ks2_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x20000008dffffff7), rs1:x17(0x0000000800000000), rs2:x2(0xffffffffdfffffff)
    TEST_RR_OP(aes64ks2, x15, x17, x2, 0x20000008dffffff7, 0x800000000, 0xffffffffdfffffff, x3, 0, x4)

aes64ks2_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x10000010efffffef), rs1:x16(0x0000001000000000), rs2:x1(0xffffffffefffffff)
    TEST_RR_OP(aes64ks2, x16, x16, x1, 0x10000010efffffef, 0x1000000000, 0xffffffffefffffff, x3, 8, x4)

aes64ks2_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x08000020f7ffffdf), rs1:x15(0x0000002000000000), rs2:x31(0xfffffffff7ffffff)
    TEST_RR_OP(aes64ks2, x17, x15, x31, 0x08000020f7ffffdf, 0x2000000000, 0xfffffffff7ffffff, x3, 16, x4)

aes64ks2_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x04000040fbffffbf), rs1:x14(0x0000004000000000), rs2:x30(0xfffffffffbffffff)
    TEST_RR_OP(aes64ks2, x18, x14, x30, 0x04000040fbffffbf, 0x4000000000, 0xfffffffffbffffff, x3, 24, x4)

aes64ks2_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x02000080fdffff7f), rs1:x13(0x0000008000000000), rs2:x29(0xfffffffffdffffff)
    TEST_RR_OP(aes64ks2, x19, x13, x29, 0x02000080fdffff7f, 0x8000000000, 0xfffffffffdffffff, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_11_0)


aes64ks2_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x01000100fefffeff), rs1:x12(0x0000010000000000), rs2:x28(0xfffffffffeffffff)
    TEST_RR_OP(aes64ks2, x20, x12, x28, 0x01000100fefffeff, 0x10000000000, 0xfffffffffeffffff, x1, 0, x2)

aes64ks2_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x00800200ff7ffdff), rs1:x11(0x0000020000000000), rs2:x27(0xffffffffff7fffff)
    TEST_RR_OP(aes64ks2, x21, x11, x27, 0x00800200ff7ffdff, 0x20000000000, 0xffffffffff7fffff, x1, 8, x2)

aes64ks2_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x00400400ffbffbff), rs1:x10(0x0000040000000000), rs2:x26(0xffffffffffbfffff)
    TEST_RR_OP(aes64ks2, x22, x10, x26, 0x00400400ffbffbff, 0x40000000000, 0xffffffffffbfffff, x1, 16, x2)

aes64ks2_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x00200800ffdff7ff), rs1:x9(0x0000080000000000), rs2:x25(0xffffffffffdfffff)
    TEST_RR_OP(aes64ks2, x23, x9, x25, 0x00200800ffdff7ff, 0x80000000000, 0xffffffffffdfffff, x1, 24, x2)

aes64ks2_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x00101000ffefefff), rs1:x8(0x0000100000000000), rs2:x24(0xffffffffffefffff)
    TEST_RR_OP(aes64ks2, x24, x8, x24, 0x00101000ffefefff, 0x100000000000, 0xffffffffffefffff, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_12_0)


aes64ks2_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x00082000fff7dfff), rs1:x7(0x0000200000000000), rs2:x23(0xfffffffffff7ffff)
    TEST_RR_OP(aes64ks2, x25, x7, x23, 0x00082000fff7dfff, 0x200000000000, 0xfffffffffff7ffff, x1, 0, x2)

aes64ks2_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x00044000fffbbfff), rs1:x6(0x0000400000000000), rs2:x22(0xfffffffffffbffff)
    TEST_RR_OP(aes64ks2, x26, x6, x22, 0x00044000fffbbfff, 0x400000000000, 0xfffffffffffbffff, x1, 8, x2)

aes64ks2_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x00028000fffd7fff), rs1:x5(0x0000800000000000), rs2:x21(0xfffffffffffdffff)
    TEST_RR_OP(aes64ks2, x27, x5, x21, 0x00028000fffd7fff, 0x800000000000, 0xfffffffffffdffff, x1, 16, x2)

aes64ks2_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x00000000ffffffff), rs1:x4(0x0001000000000000), rs2:x20(0xfffffffffffeffff)
    TEST_RR_OP(aes64ks2, x28, x4, x20, 0x00000000ffffffff, 0x1000000000000, 0xfffffffffffeffff, x1, 24, x2)

aes64ks2_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x00028000fffd7fff), rs1:x3(0x0002000000000000), rs2:x19(0xffffffffffff7fff)
    TEST_RR_OP(aes64ks2, x29, x3, x19, 0x00028000fffd7fff, 0x2000000000000, 0xffffffffffff7fff, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x4,signature_13_0)


aes64ks2_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x00044000fffbbfff), rs1:x2(0x0004000000000000), rs2:x18(0xffffffffffffbfff)
    TEST_RR_OP(aes64ks2, x30, x2, x18, 0x00044000fffbbfff, 0x4000000000000, 0xffffffffffffbfff, x4, 0, x5)

aes64ks2_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x00082000fff7dfff), rs1:x1(0x0008000000000000), rs2:x17(0xffffffffffffdfff)
    TEST_RR_OP(aes64ks2, x31, x1, x17, 0x00082000fff7dfff, 0x8000000000000, 0xffffffffffffdfff, x4, 8, x5)

aes64ks2_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x00101000ffefefff), rs1:x31(0x0010000000000000), rs2:x16(0xffffffffffffefff)
    TEST_RR_OP(aes64ks2, x1, x31, x16, 0x00101000ffefefff, 0x10000000000000, 0xffffffffffffefff, x4, 16, x5)

aes64ks2_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x00200800ffdff7ff), rs1:x30(0x0020000000000000), rs2:x15(0xfffffffffffff7ff)
    TEST_RR_OP(aes64ks2, x2, x30, x15, 0x00200800ffdff7ff, 0x20000000000000, 0xfffffffffffff7ff, x4, 24, x5)

aes64ks2_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x00400400ffbffbff), rs1:x29(0x0040000000000000), rs2:x14(0xfffffffffffffbff)
    TEST_RR_OP(aes64ks2, x3, x29, x14, 0x00400400ffbffbff, 0x40000000000000, 0xfffffffffffffbff, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_14_0)


aes64ks2_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x00800200ff7ffdff), rs1:x28(0x0080000000000000), rs2:x13(0xfffffffffffffdff)
    TEST_RR_OP(aes64ks2, x4, x28, x13, 0x00800200ff7ffdff, 0x80000000000000, 0xfffffffffffffdff, x1, 0, x2)

aes64ks2_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x01000100fefffeff), rs1:x27(0x0100000000000000), rs2:x12(0xfffffffffffffeff)
    TEST_RR_OP(aes64ks2, x5, x27, x12, 0x01000100fefffeff, 0x100000000000000, 0xfffffffffffffeff, x1, 8, x2)

aes64ks2_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x02000080fdffff7f), rs1:x26(0x0200000000000000), rs2:x11(0xffffffffffffff7f)
    TEST_RR_OP(aes64ks2, x6, x26, x11, 0x02000080fdffff7f, 0x200000000000000, 0xffffffffffffff7f, x1, 16, x2)

aes64ks2_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x04000040fbffffbf), rs1:x25(0x0400000000000000), rs2:x10(0xffffffffffffffbf)
    TEST_RR_OP(aes64ks2, x7, x25, x10, 0x04000040fbffffbf, 0x400000000000000, 0xffffffffffffffbf, x1, 24, x2)

aes64ks2_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x08000020f7ffffdf), rs1:x24(0x0800000000000000), rs2:x9(0xffffffffffffffdf)
    TEST_RR_OP(aes64ks2, x8, x24, x9, 0x08000020f7ffffdf, 0x800000000000000, 0xffffffffffffffdf, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_15_0)


aes64ks2_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x10000010efffffef), rs1:x23(0x1000000000000000), rs2:x8(0xffffffffffffffef)
    TEST_RR_OP(aes64ks2, x9, x23, x8, 0x10000010efffffef, 0x1000000000000000, 0xffffffffffffffef, x1, 0, x2)

aes64ks2_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x20000008dffffff7), rs1:x22(0x2000000000000000), rs2:x7(0xfffffffffffffff7)
    TEST_RR_OP(aes64ks2, x10, x22, x7, 0x20000008dffffff7, 0x2000000000000000, 0xfffffffffffffff7, x1, 8, x2)

aes64ks2_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x40000004bffffffb), rs1:x21(0x4000000000000000), rs2:x6(0xfffffffffffffffb)
    TEST_RR_OP(aes64ks2, x11, x21, x6, 0x40000004bffffffb, 0x4000000000000000, 0xfffffffffffffffb, x1, 16, x2)

aes64ks2_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x800000027ffffffd), rs1:x20(0x8000000000000000), rs2:x5(0xfffffffffffffffd)
    TEST_RR_OP(aes64ks2, x12, x20, x5, 0x800000027ffffffd, 0x8000000000000000, 0xfffffffffffffffd, x1, 24, x2)

aes64ks2_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x00000001fffffffe), rs1:x19(0x0000000000000000), rs2:x4(0xfffffffffffffffe)
    TEST_RR_OP(aes64ks2, x13, x19, x4, 0x00000001fffffffe, 0x0, 0xfffffffffffffffe, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x4,signature_16_0)


aes64ks2_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0xfffffffffffffffe), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x14, x18, x3, 0xffffffffffffffff, 0xfffffffffffffffe, 0x0, x4, 0, x5)

aes64ks2_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0x7fffffffffffffff), rs1:x17(0xfffffffffffffffd), rs2:x2(0x8000000000000000)
    TEST_RR_OP(aes64ks2, x15, x17, x2, 0x7fffffffffffffff, 0xfffffffffffffffd, 0x8000000000000000, x4, 8, x5)

aes64ks2_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0xbfffffffffffffff), rs1:x16(0xfffffffffffffffb), rs2:x1(0x4000000000000000)
    TEST_RR_OP(aes64ks2, x16, x16, x1, 0xbfffffffffffffff, 0xfffffffffffffffb, 0x4000000000000000, x4, 16, x5)

aes64ks2_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0xdfffffffffffffff), rs1:x15(0xfffffffffffffff7), rs2:x31(0x2000000000000000)
    TEST_RR_OP(aes64ks2, x17, x15, x31, 0xdfffffffffffffff, 0xfffffffffffffff7, 0x2000000000000000, x4, 24, x5)

aes64ks2_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0xefffffffffffffff), rs1:x14(0xffffffffffffffef), rs2:x30(0x1000000000000000)
    TEST_RR_OP(aes64ks2, x18, x14, x30, 0xefffffffffffffff, 0xffffffffffffffef, 0x1000000000000000, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_17_0)


aes64ks2_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0xf7ffffffffffffff), rs1:x13(0xffffffffffffffdf), rs2:x29(0x0800000000000000)
    TEST_RR_OP(aes64ks2, x19, x13, x29, 0xf7ffffffffffffff, 0xffffffffffffffdf, 0x800000000000000, x1, 0, x2)

aes64ks2_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0xfbffffffffffffff), rs1:x12(0xffffffffffffffbf), rs2:x28(0x0400000000000000)
    TEST_RR_OP(aes64ks2, x20, x12, x28, 0xfbffffffffffffff, 0xffffffffffffffbf, 0x400000000000000, x1, 8, x2)

aes64ks2_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0xfdffffffffffffff), rs1:x11(0xffffffffffffff7f), rs2:x27(0x0200000000000000)
    TEST_RR_OP(aes64ks2, x21, x11, x27, 0xfdffffffffffffff, 0xffffffffffffff7f, 0x200000000000000, x1, 16, x2)

aes64ks2_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0xfeffffffffffffff), rs1:x10(0xfffffffffffffeff), rs2:x26(0x0100000000000000)
    TEST_RR_OP(aes64ks2, x22, x10, x26, 0xfeffffffffffffff, 0xfffffffffffffeff, 0x100000000000000, x1, 24, x2)

aes64ks2_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0xff7fffffffffffff), rs1:x9(0xfffffffffffffdff), rs2:x25(0x0080000000000000)
    TEST_RR_OP(aes64ks2, x23, x9, x25, 0xff7fffffffffffff, 0xfffffffffffffdff, 0x80000000000000, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_18_0)


aes64ks2_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0xffbfffffffffffff), rs1:x8(0xfffffffffffffbff), rs2:x24(0x0040000000000000)
    TEST_RR_OP(aes64ks2, x24, x8, x24, 0xffbfffffffffffff, 0xfffffffffffffbff, 0x40000000000000, x1, 0, x2)

aes64ks2_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0xffdfffffffffffff), rs1:x7(0xfffffffffffff7ff), rs2:x23(0x0020000000000000)
    TEST_RR_OP(aes64ks2, x25, x7, x23, 0xffdfffffffffffff, 0xfffffffffffff7ff, 0x20000000000000, x1, 8, x2)

aes64ks2_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0xffefffffffffffff), rs1:x6(0xffffffffffffefff), rs2:x22(0x0010000000000000)
    TEST_RR_OP(aes64ks2, x26, x6, x22, 0xffefffffffffffff, 0xffffffffffffefff, 0x10000000000000, x1, 16, x2)

aes64ks2_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0xfff7ffffffffffff), rs1:x5(0xffffffffffffdfff), rs2:x21(0x0008000000000000)
    TEST_RR_OP(aes64ks2, x27, x5, x21, 0xfff7ffffffffffff, 0xffffffffffffdfff, 0x8000000000000, x1, 24, x2)

aes64ks2_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0xfffbffffffffffff), rs1:x4(0xffffffffffffbfff), rs2:x20(0x0004000000000000)
    TEST_RR_OP(aes64ks2, x28, x4, x20, 0xfffbffffffffffff, 0xffffffffffffbfff, 0x4000000000000, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x4,signature_19_0)


aes64ks2_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0xfffdffffffffffff), rs1:x3(0xffffffffffff7fff), rs2:x19(0x0002000000000000)
    TEST_RR_OP(aes64ks2, x29, x3, x19, 0xfffdffffffffffff, 0xffffffffffff7fff, 0x2000000000000, x4, 0, x5)

aes64ks2_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0xfffeffffffffffff), rs1:x2(0xfffffffffffeffff), rs2:x18(0x0001000000000000)
    TEST_RR_OP(aes64ks2, x30, x2, x18, 0xfffeffffffffffff, 0xfffffffffffeffff, 0x1000000000000, x4, 8, x5)

aes64ks2_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0xffff7fffffffffff), rs1:x1(0xfffffffffffdffff), rs2:x17(0x0000800000000000)
    TEST_RR_OP(aes64ks2, x31, x1, x17, 0xffff7fffffffffff, 0xfffffffffffdffff, 0x800000000000, x4, 16, x5)

aes64ks2_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0xffffbfffffffffff), rs1:x31(0xfffffffffffbffff), rs2:x16(0x0000400000000000)
    TEST_RR_OP(aes64ks2, x1, x31, x16, 0xffffbfffffffffff, 0xfffffffffffbffff, 0x400000000000, x4, 24, x5)

aes64ks2_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0xffffdfffffffffff), rs1:x30(0xfffffffffff7ffff), rs2:x15(0x0000200000000000)
    TEST_RR_OP(aes64ks2, x2, x30, x15, 0xffffdfffffffffff, 0xfffffffffff7ffff, 0x200000000000, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_20_0)


aes64ks2_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0xffffefffffffffff), rs1:x29(0xffffffffffefffff), rs2:x14(0x0000100000000000)
    TEST_RR_OP(aes64ks2, x3, x29, x14, 0xffffefffffffffff, 0xffffffffffefffff, 0x100000000000, x1, 0, x2)

aes64ks2_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0xfffff7ffffffffff), rs1:x28(0xffffffffffdfffff), rs2:x13(0x0000080000000000)
    TEST_RR_OP(aes64ks2, x4, x28, x13, 0xfffff7ffffffffff, 0xffffffffffdfffff, 0x80000000000, x1, 8, x2)

aes64ks2_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0xfffffbffffffffff), rs1:x27(0xffffffffffbfffff), rs2:x12(0x0000040000000000)
    TEST_RR_OP(aes64ks2, x5, x27, x12, 0xfffffbffffffffff, 0xffffffffffbfffff, 0x40000000000, x1, 16, x2)

aes64ks2_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0xfffffdffffffffff), rs1:x26(0xffffffffff7fffff), rs2:x11(0x0000020000000000)
    TEST_RR_OP(aes64ks2, x6, x26, x11, 0xfffffdffffffffff, 0xffffffffff7fffff, 0x20000000000, x1, 24, x2)

aes64ks2_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0xfffffeffffffffff), rs1:x25(0xfffffffffeffffff), rs2:x10(0x0000010000000000)
    TEST_RR_OP(aes64ks2, x7, x25, x10, 0xfffffeffffffffff, 0xfffffffffeffffff, 0x10000000000, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_21_0)


aes64ks2_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0xffffff7fffffffff), rs1:x24(0xfffffffffdffffff), rs2:x9(0x0000008000000000)
    TEST_RR_OP(aes64ks2, x8, x24, x9, 0xffffff7fffffffff, 0xfffffffffdffffff, 0x8000000000, x1, 0, x2)

aes64ks2_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0xffffffbfffffffff), rs1:x23(0xfffffffffbffffff), rs2:x8(0x0000004000000000)
    TEST_RR_OP(aes64ks2, x9, x23, x8, 0xffffffbfffffffff, 0xfffffffffbffffff, 0x4000000000, x1, 8, x2)

aes64ks2_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0xffffffdfffffffff), rs1:x22(0xfffffffff7ffffff), rs2:x7(0x0000002000000000)
    TEST_RR_OP(aes64ks2, x10, x22, x7, 0xffffffdfffffffff, 0xfffffffff7ffffff, 0x2000000000, x1, 16, x2)

aes64ks2_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0xffffffefffffffff), rs1:x21(0xffffffffefffffff), rs2:x6(0x0000001000000000)
    TEST_RR_OP(aes64ks2, x11, x21, x6, 0xffffffefffffffff, 0xffffffffefffffff, 0x1000000000, x1, 24, x2)

aes64ks2_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0xfffffff7ffffffff), rs1:x20(0xffffffffdfffffff), rs2:x5(0x0000000800000000)
    TEST_RR_OP(aes64ks2, x12, x20, x5, 0xfffffff7ffffffff, 0xffffffffdfffffff, 0x800000000, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x5,signature_22_0)


aes64ks2_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0xfffffffbffffffff), rs1:x19(0xffffffffbfffffff), rs2:x4(0x0000000400000000)
    TEST_RR_OP(aes64ks2, x13, x19, x4, 0xfffffffbffffffff, 0xffffffffbfffffff, 0x400000000, x5, 0, x6)

aes64ks2_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0xfffffffdffffffff), rs1:x18(0xffffffff7fffffff), rs2:x3(0x0000000200000000)
    TEST_RR_OP(aes64ks2, x14, x18, x3, 0xfffffffdffffffff, 0xffffffff7fffffff, 0x200000000, x5, 8, x6)

aes64ks2_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0xfffffffffffffffe), rs1:x17(0xfffffffeffffffff), rs2:x2(0x0000000100000000)
    TEST_RR_OP(aes64ks2, x15, x17, x2, 0xfffffffffffffffe, 0xfffffffeffffffff, 0x100000000, x5, 16, x6)

aes64ks2_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0x7ffffffd7ffffffd), rs1:x16(0xfffffffdffffffff), rs2:x1(0x0000000080000000)
    TEST_RR_OP(aes64ks2, x16, x16, x1, 0x7ffffffd7ffffffd, 0xfffffffdffffffff, 0x80000000, x5, 24, x6)

aes64ks2_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0xbffffffbbffffffb), rs1:x15(0xfffffffbffffffff), rs2:x31(0x0000000040000000)
    TEST_RR_OP(aes64ks2, x17, x15, x31, 0xbffffffbbffffffb, 0xfffffffbffffffff, 0x40000000, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_23_0)


aes64ks2_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0xdffffff7dffffff7), rs1:x14(0xfffffff7ffffffff), rs2:x30(0x0000000020000000)
    TEST_RR_OP(aes64ks2, x18, x14, x30, 0xdffffff7dffffff7, 0xfffffff7ffffffff, 0x20000000, x1, 0, x2)

aes64ks2_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0xefffffefefffffef), rs1:x13(0xffffffefffffffff), rs2:x29(0x0000000010000000)
    TEST_RR_OP(aes64ks2, x19, x13, x29, 0xefffffefefffffef, 0xffffffefffffffff, 0x10000000, x1, 8, x2)

aes64ks2_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0xf7ffffdff7ffffdf), rs1:x12(0xffffffdfffffffff), rs2:x28(0x0000000008000000)
    TEST_RR_OP(aes64ks2, x20, x12, x28, 0xf7ffffdff7ffffdf, 0xffffffdfffffffff, 0x8000000, x1, 16, x2)

aes64ks2_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0xfbffffbffbffffbf), rs1:x11(0xffffffbfffffffff), rs2:x27(0x0000000004000000)
    TEST_RR_OP(aes64ks2, x21, x11, x27, 0xfbffffbffbffffbf, 0xffffffbfffffffff, 0x4000000, x1, 24, x2)

aes64ks2_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0xfdffff7ffdffff7f), rs1:x10(0xffffff7fffffffff), rs2:x26(0x0000000002000000)
    TEST_RR_OP(aes64ks2, x22, x10, x26, 0xfdffff7ffdffff7f, 0xffffff7fffffffff, 0x2000000, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_24_0)


aes64ks2_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0xfefffefffefffeff), rs1:x9(0xfffffeffffffffff), rs2:x25(0x0000000001000000)
    TEST_RR_OP(aes64ks2, x23, x9, x25, 0xfefffefffefffeff, 0xfffffeffffffffff, 0x1000000, x1, 0, x2)

aes64ks2_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0xff7ffdffff7ffdff), rs1:x8(0xfffffdffffffffff), rs2:x24(0x0000000000800000)
    TEST_RR_OP(aes64ks2, x24, x8, x24, 0xff7ffdffff7ffdff, 0xfffffdffffffffff, 0x800000, x1, 8, x2)

aes64ks2_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0xffbffbffffbffbff), rs1:x7(0xfffffbffffffffff), rs2:x23(0x0000000000400000)
    TEST_RR_OP(aes64ks2, x25, x7, x23, 0xffbffbffffbffbff, 0xfffffbffffffffff, 0x400000, x1, 16, x2)

aes64ks2_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0xffdff7ffffdff7ff), rs1:x6(0xfffff7ffffffffff), rs2:x22(0x0000000000200000)
    TEST_RR_OP(aes64ks2, x26, x6, x22, 0xffdff7ffffdff7ff, 0xfffff7ffffffffff, 0x200000, x1, 24, x2)

aes64ks2_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0xffefefffffefefff), rs1:x5(0xffffefffffffffff), rs2:x21(0x0000000000100000)
    TEST_RR_OP(aes64ks2, x27, x5, x21, 0xffefefffffefefff, 0xffffefffffffffff, 0x100000, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x5,signature_25_0)


aes64ks2_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0xfff7dffffff7dfff), rs1:x4(0xffffdfffffffffff), rs2:x20(0x0000000000080000)
    TEST_RR_OP(aes64ks2, x28, x4, x20, 0xfff7dffffff7dfff, 0xffffdfffffffffff, 0x80000, x5, 0, x6)

aes64ks2_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0xfffbbffffffbbfff), rs1:x3(0xffffbfffffffffff), rs2:x19(0x0000000000040000)
    TEST_RR_OP(aes64ks2, x29, x3, x19, 0xfffbbffffffbbfff, 0xffffbfffffffffff, 0x40000, x5, 8, x6)

aes64ks2_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0xfffd7ffffffd7fff), rs1:x2(0xffff7fffffffffff), rs2:x18(0x0000000000020000)
    TEST_RR_OP(aes64ks2, x30, x2, x18, 0xfffd7ffffffd7fff, 0xffff7fffffffffff, 0x20000, x5, 16, x6)

aes64ks2_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffffff), rs1:x1(0xfffeffffffffffff), rs2:x17(0x0000000000010000)
    TEST_RR_OP(aes64ks2, x31, x1, x17, 0xffffffffffffffff, 0xfffeffffffffffff, 0x10000, x5, 24, x6)

aes64ks2_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0xfffd7ffffffd7fff), rs1:x31(0xfffdffffffffffff), rs2:x16(0x0000000000008000)
    TEST_RR_OP(aes64ks2, x1, x31, x16, 0xfffd7ffffffd7fff, 0xfffdffffffffffff, 0x8000, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_26_0)


aes64ks2_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0xfffbbffffffbbfff), rs1:x30(0xfffbffffffffffff), rs2:x15(0x0000000000004000)
    TEST_RR_OP(aes64ks2, x2, x30, x15, 0xfffbbffffffbbfff, 0xfffbffffffffffff, 0x4000, x1, 0, x7)

aes64ks2_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0xfff7dffffff7dfff), rs1:x29(0xfff7ffffffffffff), rs2:x14(0x0000000000002000)
    TEST_RR_OP(aes64ks2, x3, x29, x14, 0xfff7dffffff7dfff, 0xfff7ffffffffffff, 0x2000, x1, 8, x7)

aes64ks2_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0xffefefffffefefff), rs1:x28(0xffefffffffffffff), rs2:x13(0x0000000000001000)
    TEST_RR_OP(aes64ks2, x4, x28, x13, 0xffefefffffefefff, 0xffefffffffffffff, 0x1000, x1, 16, x7)

aes64ks2_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0xffdff7ffffdff7ff), rs1:x27(0xffdfffffffffffff), rs2:x12(0x0000000000000800)
    TEST_RR_OP(aes64ks2, x5, x27, x12, 0xffdff7ffffdff7ff, 0xffdfffffffffffff, 0x800, x1, 24, x7)

aes64ks2_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0xffbffbffffbffbff), rs1:x26(0xffbfffffffffffff), rs2:x11(0x0000000000000400)
    TEST_RR_OP(aes64ks2, x6, x26, x11, 0xffbffbffffbffbff, 0xffbfffffffffffff, 0x400, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_27_0)


aes64ks2_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0xff7ffdffff7ffdff), rs1:x25(0xff7fffffffffffff), rs2:x10(0x0000000000000200)
    TEST_RR_OP(aes64ks2, x7, x25, x10, 0xff7ffdffff7ffdff, 0xff7fffffffffffff, 0x200, x1, 0, x2)

aes64ks2_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0xfefffefffefffeff), rs1:x24(0xfeffffffffffffff), rs2:x9(0x0000000000000100)
    TEST_RR_OP(aes64ks2, x8, x24, x9, 0xfefffefffefffeff, 0xfeffffffffffffff, 0x100, x1, 8, x2)

aes64ks2_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0xfdffff7ffdffff7f), rs1:x23(0xfdffffffffffffff), rs2:x8(0x0000000000000080)
    TEST_RR_OP(aes64ks2, x9, x23, x8, 0xfdffff7ffdffff7f, 0xfdffffffffffffff, 0x80, x1, 16, x2)

aes64ks2_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0xfbffffbffbffffbf), rs1:x22(0xfbffffffffffffff), rs2:x7(0x0000000000000040)
    TEST_RR_OP(aes64ks2, x10, x22, x7, 0xfbffffbffbffffbf, 0xfbffffffffffffff, 0x40, x1, 24, x2)

aes64ks2_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0xf7ffffdff7ffffdf), rs1:x21(0xf7ffffffffffffff), rs2:x6(0x0000000000000020)
    TEST_RR_OP(aes64ks2, x11, x21, x6, 0xf7ffffdff7ffffdf, 0xf7ffffffffffffff, 0x20, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x6,signature_28_0)


aes64ks2_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0xefffffefefffffef), rs1:x20(0xefffffffffffffff), rs2:x5(0x0000000000000010)
    TEST_RR_OP(aes64ks2, x12, x20, x5, 0xefffffefefffffef, 0xefffffffffffffff, 0x10, x6, 0, x7)

aes64ks2_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0xdffffff7dffffff7), rs1:x19(0xdfffffffffffffff), rs2:x4(0x0000000000000008)
    TEST_RR_OP(aes64ks2, x13, x19, x4, 0xdffffff7dffffff7, 0xdfffffffffffffff, 0x8, x6, 8, x7)

aes64ks2_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0xbffffffbbffffffb), rs1:x18(0xbfffffffffffffff), rs2:x3(0x0000000000000004)
    TEST_RR_OP(aes64ks2, x14, x18, x3, 0xbffffffbbffffffb, 0xbfffffffffffffff, 0x4, x6, 16, x7)

aes64ks2_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0x7ffffffd7ffffffd), rs1:x17(0x7fffffffffffffff), rs2:x2(0x0000000000000002)
    TEST_RR_OP(aes64ks2, x15, x17, x2, 0x7ffffffd7ffffffd, 0x7fffffffffffffff, 0x2, x6, 24, x7)

aes64ks2_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0xfffffffefffffffe), rs1:x16(0xffffffffffffffff), rs2:x1(0x0000000000000001)
    TEST_RR_OP(aes64ks2, x16, x16, x1, 0xfffffffefffffffe, 0xffffffffffffffff, 0x1, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_29_0)


aes64ks2_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000000000000001), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x17, x15, x31, 0x0000000000000000, 0x1, 0x0, x1, 0, x2)

aes64ks2_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000000000000002), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x18, x14, x30, 0x0000000000000000, 0x2, 0x0, x1, 8, x2)

aes64ks2_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000004), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x19, x13, x29, 0x0000000000000000, 0x4, 0x0, x1, 16, x2)

aes64ks2_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000000000000008), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x20, x12, x28, 0x0000000000000000, 0x8, 0x0, x1, 24, x2)

aes64ks2_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000000000010), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x21, x11, x27, 0x0000000000000000, 0x10, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_30_0)


aes64ks2_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000000000000020), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x22, x10, x26, 0x0000000000000000, 0x20, 0x0, x1, 0, x2)

aes64ks2_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000000000000040), rs2:x25(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x23, x9, x25, 0x0000000000000000, 0x40, 0x0, x1, 8, x2)

aes64ks2_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000000000000080), rs2:x24(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x24, x8, x24, 0x0000000000000000, 0x80, 0x0, x1, 16, x2)

aes64ks2_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000000000000100), rs2:x23(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x25, x7, x23, 0x0000000000000000, 0x100, 0x0, x1, 24, x2)

aes64ks2_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000000000000200), rs2:x22(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x26, x6, x22, 0x0000000000000000, 0x200, 0x0, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x6,signature_31_0)


aes64ks2_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000000000000400), rs2:x21(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x27, x5, x21, 0x0000000000000000, 0x400, 0x0, x6, 0, x7)

aes64ks2_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000000000000800), rs2:x20(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x28, x4, x20, 0x0000000000000000, 0x800, 0x0, x6, 8, x7)

aes64ks2_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000000000001000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x29, x3, x19, 0x0000000000000000, 0x1000, 0x0, x6, 16, x7)

aes64ks2_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000000000002000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x30, x2, x18, 0x0000000000000000, 0x2000, 0x0, x6, 24, x7)

aes64ks2_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000000000004000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x31, x1, x17, 0x0000000000000000, 0x4000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x6,signature_32_0)


aes64ks2_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000000000008000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x1, x31, x16, 0x0000000000000000, 0x8000, 0x0, x6, 0, x7)

aes64ks2_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000000000010000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x2, x30, x15, 0x0000000000000000, 0x10000, 0x0, x6, 8, x7)

aes64ks2_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0000000000020000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x3, x29, x14, 0x0000000000000000, 0x20000, 0x0, x6, 16, x7)

aes64ks2_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0000000000040000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x4, x28, x13, 0x0000000000000000, 0x40000, 0x0, x6, 24, x7)

aes64ks2_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0000000000080000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x5, x27, x12, 0x0000000000000000, 0x80000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_33_0)


aes64ks2_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0000000000100000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x6, x26, x11, 0x0000000000000000, 0x100000, 0x0, x1, 0, x2)

aes64ks2_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0000000000200000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x7, x25, x10, 0x0000000000000000, 0x200000, 0x0, x1, 8, x2)

aes64ks2_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0000000000400000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x8, x24, x9, 0x0000000000000000, 0x400000, 0x0, x1, 16, x2)

aes64ks2_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0000000000800000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x9, x23, x8, 0x0000000000000000, 0x800000, 0x0, x1, 24, x2)

aes64ks2_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0000000001000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x10, x22, x7, 0x0000000000000000, 0x1000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_34_0)


aes64ks2_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0000000002000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x11, x21, x6, 0x0000000000000000, 0x2000000, 0x0, x1, 0, x7)

aes64ks2_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000004000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x12, x20, x5, 0x0000000000000000, 0x4000000, 0x0, x1, 8, x7)

aes64ks2_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000008000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x13, x19, x4, 0x0000000000000000, 0x8000000, 0x0, x1, 16, x7)

aes64ks2_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0000000010000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x14, x18, x3, 0x0000000000000000, 0x10000000, 0x0, x1, 24, x7)

aes64ks2_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x0000000020000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x15, x17, x2, 0x0000000000000000, 0x20000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x2,signature_35_0)


aes64ks2_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x0000000040000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x16, x16, x1, 0x0000000000000000, 0x40000000, 0x0, x2, 0, x3)

aes64ks2_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000000080000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x17, x15, x31, 0x0000000000000000, 0x80000000, 0x0, x2, 8, x3)

aes64ks2_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000100000001), rs1:x14(0x0000000100000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x18, x14, x30, 0x0000000100000001, 0x100000000, 0x0, x2, 16, x3)

aes64ks2_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000200000002), rs1:x13(0x0000000200000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x19, x13, x29, 0x0000000200000002, 0x200000000, 0x0, x2, 24, x3)

aes64ks2_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000000400000004), rs1:x12(0x0000000400000000), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x20, x12, x28, 0x0000000400000004, 0x400000000, 0x0, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_36_0)


aes64ks2_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000800000008), rs1:x11(0x0000000800000000), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x21, x11, x27, 0x0000000800000008, 0x800000000, 0x0, x1, 0, x2)

aes64ks2_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000001000000010), rs1:x10(0x0000001000000000), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x22, x10, x26, 0x0000001000000010, 0x1000000000, 0x0, x1, 8, x2)

aes64ks2_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000002000000020), rs1:x9(0x0000002000000000), rs2:x25(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x23, x9, x25, 0x0000002000000020, 0x2000000000, 0x0, x1, 16, x2)

aes64ks2_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000004000000040), rs1:x8(0x0000004000000000), rs2:x24(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x24, x8, x24, 0x0000004000000040, 0x4000000000, 0x0, x1, 24, x2)

aes64ks2_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000008000000080), rs1:x7(0x0000008000000000), rs2:x23(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x25, x7, x23, 0x0000008000000080, 0x8000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_37_0)


aes64ks2_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000010000000100), rs1:x6(0x0000010000000000), rs2:x22(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x26, x6, x22, 0x0000010000000100, 0x10000000000, 0x0, x1, 0, x7)

aes64ks2_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000020000000200), rs1:x5(0x0000020000000000), rs2:x21(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x27, x5, x21, 0x0000020000000200, 0x20000000000, 0x0, x1, 8, x7)

aes64ks2_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000040000000400), rs1:x4(0x0000040000000000), rs2:x20(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x28, x4, x20, 0x0000040000000400, 0x40000000000, 0x0, x1, 16, x7)

aes64ks2_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000080000000800), rs1:x3(0x0000080000000000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x29, x3, x19, 0x0000080000000800, 0x80000000000, 0x0, x1, 24, x7)

aes64ks2_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000100000001000), rs1:x2(0x0000100000000000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x30, x2, x18, 0x0000100000001000, 0x100000000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x5,signature_38_0)


aes64ks2_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000200000002000), rs1:x1(0x0000200000000000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x31, x1, x17, 0x0000200000002000, 0x200000000000, 0x0, x5, 0, x6)

aes64ks2_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000400000004000), rs1:x31(0x0000400000000000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x1, x31, x16, 0x0000400000004000, 0x400000000000, 0x0, x5, 8, x6)

aes64ks2_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000800000008000), rs1:x30(0x0000800000000000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x2, x30, x15, 0x0000800000008000, 0x800000000000, 0x0, x5, 16, x6)

aes64ks2_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0001000000010000), rs1:x29(0x0001000000000000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x3, x29, x14, 0x0001000000010000, 0x1000000000000, 0x0, x5, 24, x6)

aes64ks2_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0002000000020000), rs1:x28(0x0002000000000000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x4, x28, x13, 0x0002000000020000, 0x2000000000000, 0x0, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_39_0)


aes64ks2_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0004000000040000), rs1:x27(0x0004000000000000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x5, x27, x12, 0x0004000000040000, 0x4000000000000, 0x0, x1, 0, x2)

aes64ks2_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0008000000080000), rs1:x26(0x0008000000000000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x6, x26, x11, 0x0008000000080000, 0x8000000000000, 0x0, x1, 8, x2)

aes64ks2_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0010000000100000), rs1:x25(0x0010000000000000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x7, x25, x10, 0x0010000000100000, 0x10000000000000, 0x0, x1, 16, x2)

aes64ks2_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0020000000200000), rs1:x24(0x0020000000000000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x8, x24, x9, 0x0020000000200000, 0x20000000000000, 0x0, x1, 24, x2)

aes64ks2_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0040000000400000), rs1:x23(0x0040000000000000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x9, x23, x8, 0x0040000000400000, 0x40000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_40_0)


aes64ks2_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0080000000800000), rs1:x22(0x0080000000000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x10, x22, x7, 0x0080000000800000, 0x80000000000000, 0x0, x1, 0, x2)

aes64ks2_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0100000001000000), rs1:x21(0x0100000000000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x11, x21, x6, 0x0100000001000000, 0x100000000000000, 0x0, x1, 8, x2)

aes64ks2_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0200000002000000), rs1:x20(0x0200000000000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x12, x20, x5, 0x0200000002000000, 0x200000000000000, 0x0, x1, 16, x2)

aes64ks2_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0400000004000000), rs1:x19(0x0400000000000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x13, x19, x4, 0x0400000004000000, 0x400000000000000, 0x0, x1, 24, x2)

aes64ks2_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0800000008000000), rs1:x18(0x0800000000000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x14, x18, x3, 0x0800000008000000, 0x800000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x3,signature_41_0)


aes64ks2_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x1000000010000000), rs1:x17(0x1000000000000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x15, x17, x2, 0x1000000010000000, 0x1000000000000000, 0x0, x3, 0, x4)

aes64ks2_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x2000000020000000), rs1:x16(0x2000000000000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x16, x16, x1, 0x2000000020000000, 0x2000000000000000, 0x0, x3, 8, x4)

aes64ks2_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x4000000040000000), rs1:x15(0x4000000000000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x17, x15, x31, 0x4000000040000000, 0x4000000000000000, 0x0, x3, 16, x4)

aes64ks2_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x8000000080000000), rs1:x14(0x8000000000000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x18, x14, x30, 0x8000000080000000, 0x8000000000000000, 0x0, x3, 24, x4)

aes64ks2_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x19, x13, x29, 0x0000000000000000, 0x0, 0x0, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_42_0)


aes64ks2_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffff), rs1:x12(0xfffffffffffffffe), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x20, x12, x28, 0xffffffffffffffff, 0xfffffffffffffffe, 0x0, x1, 0, x2)

aes64ks2_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0xfffffffffffffffd), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x21, x11, x27, 0xffffffffffffffff, 0xfffffffffffffffd, 0x0, x1, 8, x2)

aes64ks2_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xfffffffffffffffb), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x22, x10, x26, 0xffffffffffffffff, 0xfffffffffffffffb, 0x0, x1, 16, x2)

aes64ks2_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffffffff), rs1:x9(0xfffffffffffffff7), rs2:x25(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x23, x9, x25, 0xffffffffffffffff, 0xfffffffffffffff7, 0x0, x1, 24, x2)

aes64ks2_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffff), rs1:x8(0xffffffffffffffef), rs2:x24(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x24, x8, x24, 0xffffffffffffffff, 0xffffffffffffffef, 0x0, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_43_0)


aes64ks2_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffff), rs1:x7(0xffffffffffffffdf), rs2:x23(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x25, x7, x23, 0xffffffffffffffff, 0xffffffffffffffdf, 0x0, x1, 0, x2)

aes64ks2_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffff), rs1:x6(0xffffffffffffffbf), rs2:x22(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x26, x6, x22, 0xffffffffffffffff, 0xffffffffffffffbf, 0x0, x1, 8, x2)

aes64ks2_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffffff), rs1:x5(0xffffffffffffff7f), rs2:x21(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x27, x5, x21, 0xffffffffffffffff, 0xffffffffffffff7f, 0x0, x1, 16, x2)

aes64ks2_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffffff), rs1:x4(0xfffffffffffffeff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x28, x4, x20, 0xffffffffffffffff, 0xfffffffffffffeff, 0x0, x1, 24, x2)

aes64ks2_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffffff), rs1:x3(0xfffffffffffffdff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x29, x3, x19, 0xffffffffffffffff, 0xfffffffffffffdff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x4,signature_44_0)


aes64ks2_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffffff), rs1:x2(0xfffffffffffffbff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x30, x2, x18, 0xffffffffffffffff, 0xfffffffffffffbff, 0x0, x4, 0, x5)

aes64ks2_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffffff), rs1:x1(0xfffffffffffff7ff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x31, x1, x17, 0xffffffffffffffff, 0xfffffffffffff7ff, 0x0, x4, 8, x5)

aes64ks2_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffffff), rs1:x31(0xffffffffffffefff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x1, x31, x16, 0xffffffffffffffff, 0xffffffffffffefff, 0x0, x4, 16, x5)

aes64ks2_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffffff), rs1:x30(0xffffffffffffdfff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x2, x30, x15, 0xffffffffffffffff, 0xffffffffffffdfff, 0x0, x4, 24, x5)

aes64ks2_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffffff), rs1:x29(0xffffffffffffbfff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x3, x29, x14, 0xffffffffffffffff, 0xffffffffffffbfff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_45_0)


aes64ks2_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffffffff), rs1:x28(0xffffffffffff7fff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x4, x28, x13, 0xffffffffffffffff, 0xffffffffffff7fff, 0x0, x1, 0, x2)

aes64ks2_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffffffff), rs1:x27(0xfffffffffffeffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x5, x27, x12, 0xffffffffffffffff, 0xfffffffffffeffff, 0x0, x1, 8, x2)

aes64ks2_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffffffff), rs1:x26(0xfffffffffffdffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x6, x26, x11, 0xffffffffffffffff, 0xfffffffffffdffff, 0x0, x1, 16, x2)

aes64ks2_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffffffff), rs1:x25(0xfffffffffffbffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x7, x25, x10, 0xffffffffffffffff, 0xfffffffffffbffff, 0x0, x1, 24, x2)

aes64ks2_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffffffff), rs1:x24(0xfffffffffff7ffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x8, x24, x9, 0xffffffffffffffff, 0xfffffffffff7ffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_46_0)


aes64ks2_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffffffff), rs1:x23(0xffffffffffefffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x9, x23, x8, 0xffffffffffffffff, 0xffffffffffefffff, 0x0, x1, 0, x2)

aes64ks2_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffffffff), rs1:x22(0xffffffffffdfffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x10, x22, x7, 0xffffffffffffffff, 0xffffffffffdfffff, 0x0, x1, 8, x2)

aes64ks2_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffffff), rs1:x21(0xffffffffffbfffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x11, x21, x6, 0xffffffffffffffff, 0xffffffffffbfffff, 0x0, x1, 16, x2)

aes64ks2_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffffff), rs1:x20(0xffffffffff7fffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x12, x20, x5, 0xffffffffffffffff, 0xffffffffff7fffff, 0x0, x1, 24, x2)

aes64ks2_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffffff), rs1:x19(0xfffffffffeffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x13, x19, x4, 0xffffffffffffffff, 0xfffffffffeffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x4,signature_47_0)


aes64ks2_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0xfffffffffdffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x14, x18, x3, 0xffffffffffffffff, 0xfffffffffdffffff, 0x0, x4, 0, x5)

aes64ks2_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0xfffffffffbffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x15, x17, x2, 0xffffffffffffffff, 0xfffffffffbffffff, 0x0, x4, 8, x5)

aes64ks2_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xfffffffff7ffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x16, x16, x1, 0xffffffffffffffff, 0xfffffffff7ffffff, 0x0, x4, 16, x5)

aes64ks2_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffffffff), rs1:x15(0xffffffffefffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x17, x15, x31, 0xffffffffffffffff, 0xffffffffefffffff, 0x0, x4, 24, x5)

aes64ks2_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffff), rs1:x14(0xffffffffdfffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x18, x14, x30, 0xffffffffffffffff, 0xffffffffdfffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_48_0)


aes64ks2_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffff), rs1:x13(0xffffffffbfffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x19, x13, x29, 0xffffffffffffffff, 0xffffffffbfffffff, 0x0, x1, 0, x2)

aes64ks2_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffff), rs1:x12(0xffffffff7fffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x20, x12, x28, 0xffffffffffffffff, 0xffffffff7fffffff, 0x0, x1, 8, x2)

aes64ks2_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0xfffffffefffffffe), rs1:x11(0xfffffffeffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x21, x11, x27, 0xfffffffefffffffe, 0xfffffffeffffffff, 0x0, x1, 16, x2)

aes64ks2_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0xfffffffdfffffffd), rs1:x10(0xfffffffdffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x22, x10, x26, 0xfffffffdfffffffd, 0xfffffffdffffffff, 0x0, x1, 24, x2)

aes64ks2_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0xfffffffbfffffffb), rs1:x9(0xfffffffbffffffff), rs2:x25(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x23, x9, x25, 0xfffffffbfffffffb, 0xfffffffbffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_49_0)


aes64ks2_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0xfffffff7fffffff7), rs1:x8(0xfffffff7ffffffff), rs2:x24(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x24, x8, x24, 0xfffffff7fffffff7, 0xfffffff7ffffffff, 0x0, x1, 0, x2)

aes64ks2_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0xffffffefffffffef), rs1:x7(0xffffffefffffffff), rs2:x23(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x25, x7, x23, 0xffffffefffffffef, 0xffffffefffffffff, 0x0, x1, 8, x2)

aes64ks2_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0xffffffdfffffffdf), rs1:x6(0xffffffdfffffffff), rs2:x22(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x26, x6, x22, 0xffffffdfffffffdf, 0xffffffdfffffffff, 0x0, x1, 16, x2)

aes64ks2_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0xffffffbfffffffbf), rs1:x5(0xffffffbfffffffff), rs2:x21(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x27, x5, x21, 0xffffffbfffffffbf, 0xffffffbfffffffff, 0x0, x1, 24, x2)

aes64ks2_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0xffffff7fffffff7f), rs1:x4(0xffffff7fffffffff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x28, x4, x20, 0xffffff7fffffff7f, 0xffffff7fffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x4,signature_50_0)


aes64ks2_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0xfffffefffffffeff), rs1:x3(0xfffffeffffffffff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x29, x3, x19, 0xfffffefffffffeff, 0xfffffeffffffffff, 0x0, x4, 0, x5)

aes64ks2_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0xfffffdfffffffdff), rs1:x2(0xfffffdffffffffff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x30, x2, x18, 0xfffffdfffffffdff, 0xfffffdffffffffff, 0x0, x4, 8, x5)

aes64ks2_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0xfffffbfffffffbff), rs1:x1(0xfffffbffffffffff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x31, x1, x17, 0xfffffbfffffffbff, 0xfffffbffffffffff, 0x0, x4, 16, x5)

aes64ks2_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0xfffff7fffffff7ff), rs1:x31(0xfffff7ffffffffff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x1, x31, x16, 0xfffff7fffffff7ff, 0xfffff7ffffffffff, 0x0, x4, 24, x5)

aes64ks2_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0xffffefffffffefff), rs1:x30(0xffffefffffffffff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x2, x30, x15, 0xffffefffffffefff, 0xffffefffffffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_51_0)


aes64ks2_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0xffffdfffffffdfff), rs1:x29(0xffffdfffffffffff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x3, x29, x14, 0xffffdfffffffdfff, 0xffffdfffffffffff, 0x0, x1, 0, x2)

aes64ks2_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0xffffbfffffffbfff), rs1:x28(0xffffbfffffffffff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x4, x28, x13, 0xffffbfffffffbfff, 0xffffbfffffffffff, 0x0, x1, 8, x2)

aes64ks2_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0xffff7fffffff7fff), rs1:x27(0xffff7fffffffffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x5, x27, x12, 0xffff7fffffff7fff, 0xffff7fffffffffff, 0x0, x1, 16, x2)

aes64ks2_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0xfffefffffffeffff), rs1:x26(0xfffeffffffffffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x6, x26, x11, 0xfffefffffffeffff, 0xfffeffffffffffff, 0x0, x1, 24, x2)

aes64ks2_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0xfffdfffffffdffff), rs1:x25(0xfffdffffffffffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x7, x25, x10, 0xfffdfffffffdffff, 0xfffdffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_52_0)


aes64ks2_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0xfffbfffffffbffff), rs1:x24(0xfffbffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x8, x24, x9, 0xfffbfffffffbffff, 0xfffbffffffffffff, 0x0, x1, 0, x2)

aes64ks2_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0xfff7fffffff7ffff), rs1:x23(0xfff7ffffffffffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x9, x23, x8, 0xfff7fffffff7ffff, 0xfff7ffffffffffff, 0x0, x1, 8, x2)

aes64ks2_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0xffefffffffefffff), rs1:x22(0xffefffffffffffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x10, x22, x7, 0xffefffffffefffff, 0xffefffffffffffff, 0x0, x1, 16, x2)

aes64ks2_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0xffdfffffffdfffff), rs1:x21(0xffdfffffffffffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x11, x21, x6, 0xffdfffffffdfffff, 0xffdfffffffffffff, 0x0, x1, 24, x2)

aes64ks2_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0xffbfffffffbfffff), rs1:x20(0xffbfffffffffffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x12, x20, x5, 0xffbfffffffbfffff, 0xffbfffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x5,signature_53_0)


aes64ks2_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0xff7fffffff7fffff), rs1:x19(0xff7fffffffffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x13, x19, x4, 0xff7fffffff7fffff, 0xff7fffffffffffff, 0x0, x5, 0, x6)

aes64ks2_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0xfefffffffeffffff), rs1:x18(0xfeffffffffffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x14, x18, x3, 0xfefffffffeffffff, 0xfeffffffffffffff, 0x0, x5, 8, x6)

aes64ks2_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0xfdfffffffdffffff), rs1:x17(0xfdffffffffffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x15, x17, x2, 0xfdfffffffdffffff, 0xfdffffffffffffff, 0x0, x5, 16, x6)

aes64ks2_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0xfbfffffffbffffff), rs1:x16(0xfbffffffffffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x16, x16, x1, 0xfbfffffffbffffff, 0xfbffffffffffffff, 0x0, x5, 24, x6)

aes64ks2_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0xf7fffffff7ffffff), rs1:x15(0xf7ffffffffffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x17, x15, x31, 0xf7fffffff7ffffff, 0xf7ffffffffffffff, 0x0, x5, 32, x6)

    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_54_0)


aes64ks2_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0xefffffffefffffff), rs1:x14(0xefffffffffffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x18, x14, x30, 0xefffffffefffffff, 0xefffffffffffffff, 0x0, x1, 0, x2)

aes64ks2_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0xdfffffffdfffffff), rs1:x13(0xdfffffffffffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x19, x13, x29, 0xdfffffffdfffffff, 0xdfffffffffffffff, 0x0, x1, 8, x2)

aes64ks2_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0xbfffffffbfffffff), rs1:x12(0xbfffffffffffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x20, x12, x28, 0xbfffffffbfffffff, 0xbfffffffffffffff, 0x0, x1, 16, x2)

aes64ks2_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0x7fffffff7fffffff), rs1:x11(0x7fffffffffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x21, x11, x27, 0x7fffffff7fffffff, 0x7fffffffffffffff, 0x0, x1, 24, x2)

aes64ks2_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xffffffffffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x22, x10, x26, 0xffffffffffffffff, 0xffffffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_55_0)


aes64ks2_01_inst_270:
    // Test 270:  Test with rs1 == rs2
    // result rd:x23(0x121bcc23cd64f467), rs1:x25(0x10fd3dedadea5195), rs2:x25(0xdf7f3844121bcc23)
    TEST_RR_OP(aes64ks2, x23, x25, x25, 0x121bcc23cd64f467, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x1, 0, x2)

aes64ks2_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1), rs2:x24(0xf5adb41aa47d105b)
    TEST_RR_OP(aes64ks2, x0, x8, x24, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x1, 8, x2)

aes64ks2_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0xc9649f05c9649f05), rs1:x7(0xc9649f05a8e1a8bb), rs2:x0(0x82f6747f707af2c0)
    TEST_RR_OP(aes64ks2, x25, x7, x0, 0xc9649f05c9649f05, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x1, 16, x2)

aes64ks2_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x9232d417e19bfbc3), rs1:x0(0x3541291848c99fcb), rs2:x22(0x73a92fd4e19bfbc3)
    TEST_RR_OP(aes64ks2, x26, x0, x22, 0x9232d417e19bfbc3, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x1, 24, x2)
	
#endif


RVTEST_CODE_END aes64ks2_01_code_end
RVTEST_CODE_BEGIN xperm_b_01_init xperm_b_01_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x6,signature_1_0)


xperm_b_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x0000000000000000), rs1:x31(0x10fd3dedadea5195), rs2:x16(0xdf7f3844121bcc23)
    TEST_RR_OP(xperm.b, x1, x31, x16, 0x0000000000000000, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x6, 0, x7)

xperm_b_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x0000000000000000), rs1:x30(0xbd295ce2d2ffbec1), rs2:x15(0xf5adb41aa47d105b)
    TEST_RR_OP(xperm.b, x2, x30, x15, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x6, 8, x7)

xperm_b_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0x0000000000000000), rs1:x29(0xc9649f05a8e1a8bb), rs2:x14(0x82f6747f707af2c0)
    TEST_RR_OP(xperm.b, x3, x29, x14, 0x0000000000000000, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x6, 16, x7)

xperm_b_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x0000000000000000), rs1:x28(0x3541291848c99fcb), rs2:x13(0x73a92fd4e19bfbc3)
    TEST_RR_OP(xperm.b, x4, x28, x13, 0x0000000000000000, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x6, 24, x7)

xperm_b_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x0000000000000000), rs1:x27(0x10a24740461d524f), rs2:x12(0x546b0e54528a10af)
    TEST_RR_OP(xperm.b, x5, x27, x12, 0x0000000000000000, 0x10a24740461d524f, 0x546b0e54528a10af, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_2_0)


xperm_b_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x0000000000000000), rs1:x26(0x546b0e54528a10af), rs2:x11(0x10a24740461d524f)
    TEST_RR_OP(xperm.b, x6, x26, x11, 0x0000000000000000, 0x546b0e54528a10af, 0x10a24740461d524f, x1, 0, x2)

xperm_b_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x0000000000000000), rs1:x25(0x73a92fd4e19bfbc3), rs2:x10(0x3541291848c99fcb)
    TEST_RR_OP(xperm.b, x7, x25, x10, 0x0000000000000000, 0x73a92fd4e19bfbc3, 0x3541291848c99fcb, x1, 8, x2)

xperm_b_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x0000007400000000), rs1:x24(0x82f6747f707af2c0), rs2:x9(0xc9649f05a8e1a8bb)
    TEST_RR_OP(xperm.b, x8, x24, x9, 0x0000007400000000, 0x82f6747f707af2c0, 0xc9649f05a8e1a8bb, x1, 16, x2)

xperm_b_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0x0000000000000000), rs1:x23(0xf5adb41aa47d105b), rs2:x8(0xbd295ce2d2ffbec1)
    TEST_RR_OP(xperm.b, x9, x23, x8, 0x0000000000000000, 0xf5adb41aa47d105b, 0xbd295ce2d2ffbec1, x1, 24, x2)

xperm_b_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0x0000000000000000), rs1:x22(0xdf7f3844121bcc23), rs2:x7(0x10fd3dedadea5195)
    TEST_RR_OP(xperm.b, x10, x22, x7, 0x0000000000000000, 0xdf7f3844121bcc23, 0x10fd3dedadea5195, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_3_0)


xperm_b_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0000000000000001), rs2:x6(0xffffffffffffffff)
    TEST_RR_OP(xperm.b, x11, x21, x6, 0x0000000000000000, 0x1, 0xffffffffffffffff, x1, 0, x7)

xperm_b_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000000000002), rs2:x5(0x7fffffffffffffff)
    TEST_RR_OP(xperm.b, x12, x20, x5, 0x0000000000000000, 0x2, 0x7fffffffffffffff, x1, 8, x7)

xperm_b_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000004), rs2:x4(0xbfffffffffffffff)
    TEST_RR_OP(xperm.b, x13, x19, x4, 0x0000000000000000, 0x4, 0xbfffffffffffffff, x1, 16, x7)

xperm_b_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0000000000000008), rs2:x3(0xdfffffffffffffff)
    TEST_RR_OP(xperm.b, x14, x18, x3, 0x0000000000000000, 0x8, 0xdfffffffffffffff, x1, 24, x7)

xperm_b_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x0000000000000010), rs2:x2(0xefffffffffffffff)
    TEST_RR_OP(xperm.b, x15, x17, x2, 0x0000000000000000, 0x10, 0xefffffffffffffff, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x2,signature_4_0)


xperm_b_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x0000000000000020), rs2:x1(0xf7ffffffffffffff)
    TEST_RR_OP(xperm.b, x16, x16, x1, 0x0000000000000000, 0x20, 0xf7ffffffffffffff, x2, 0, x3)

xperm_b_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000000000000040), rs2:x31(0xfbffffffffffffff)
    TEST_RR_OP(xperm.b, x17, x15, x31, 0x0000000000000000, 0x40, 0xfbffffffffffffff, x2, 8, x3)

xperm_b_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000000000000080), rs2:x30(0xfdffffffffffffff)
    TEST_RR_OP(xperm.b, x18, x14, x30, 0x0000000000000000, 0x80, 0xfdffffffffffffff, x2, 16, x3)

xperm_b_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000100), rs2:x29(0xfeffffffffffffff)
    TEST_RR_OP(xperm.b, x19, x13, x29, 0x0000000000000000, 0x100, 0xfeffffffffffffff, x2, 24, x3)

xperm_b_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000000000000200), rs2:x28(0xff7fffffffffffff)
    TEST_RR_OP(xperm.b, x20, x12, x28, 0x0000000000000000, 0x200, 0xff7fffffffffffff, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_5_0)


xperm_b_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000000000400), rs2:x27(0xffbfffffffffffff)
    TEST_RR_OP(xperm.b, x21, x11, x27, 0x0000000000000000, 0x400, 0xffbfffffffffffff, x1, 0, x2)

xperm_b_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000000000000800), rs2:x26(0xffdfffffffffffff)
    TEST_RR_OP(xperm.b, x22, x10, x26, 0x0000000000000000, 0x800, 0xffdfffffffffffff, x1, 8, x2)

xperm_b_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000000000001000), rs2:x25(0xffefffffffffffff)
    TEST_RR_OP(xperm.b, x23, x9, x25, 0x0000000000000000, 0x1000, 0xffefffffffffffff, x1, 16, x2)

xperm_b_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000000000002000), rs2:x24(0xfff7ffffffffffff)
    TEST_RR_OP(xperm.b, x24, x8, x24, 0x0000000000000000, 0x2000, 0xfff7ffffffffffff, x1, 24, x2)

xperm_b_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000000000004000), rs2:x23(0xfffbffffffffffff)
    TEST_RR_OP(xperm.b, x25, x7, x23, 0x0000000000000000, 0x4000, 0xfffbffffffffffff, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_6_0)


xperm_b_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000000000008000), rs2:x22(0xfffdffffffffffff)
    TEST_RR_OP(xperm.b, x26, x6, x22, 0x0000000000000000, 0x8000, 0xfffdffffffffffff, x1, 0, x7)

xperm_b_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000000000010000), rs2:x21(0xfffeffffffffffff)
    TEST_RR_OP(xperm.b, x27, x5, x21, 0x0000000000000000, 0x10000, 0xfffeffffffffffff, x1, 8, x7)

xperm_b_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000000000020000), rs2:x20(0xffff7fffffffffff)
    TEST_RR_OP(xperm.b, x28, x4, x20, 0x0000000000000000, 0x20000, 0xffff7fffffffffff, x1, 16, x7)

xperm_b_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000000000040000), rs2:x19(0xffffbfffffffffff)
    TEST_RR_OP(xperm.b, x29, x3, x19, 0x0000000000000000, 0x40000, 0xffffbfffffffffff, x1, 24, x7)

xperm_b_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000000000080000), rs2:x18(0xffffdfffffffffff)
    TEST_RR_OP(xperm.b, x30, x2, x18, 0x0000000000000000, 0x80000, 0xffffdfffffffffff, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x5,signature_7_0)


xperm_b_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000000000100000), rs2:x17(0xffffefffffffffff)
    TEST_RR_OP(xperm.b, x31, x1, x17, 0x0000000000000000, 0x100000, 0xffffefffffffffff, x5, 0, x6)

xperm_b_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000000000200000), rs2:x16(0xfffff7ffffffffff)
    TEST_RR_OP(xperm.b, x1, x31, x16, 0x0000000000000000, 0x200000, 0xfffff7ffffffffff, x5, 8, x6)

xperm_b_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000000000400000), rs2:x15(0xfffffbffffffffff)
    TEST_RR_OP(xperm.b, x2, x30, x15, 0x0000000000000000, 0x400000, 0xfffffbffffffffff, x5, 16, x6)

xperm_b_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0000000000800000), rs2:x14(0xfffffdffffffffff)
    TEST_RR_OP(xperm.b, x3, x29, x14, 0x0000000000000000, 0x800000, 0xfffffdffffffffff, x5, 24, x6)

xperm_b_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0000000001000000), rs2:x13(0xfffffeffffffffff)
    TEST_RR_OP(xperm.b, x4, x28, x13, 0x0000000000000000, 0x1000000, 0xfffffeffffffffff, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_8_0)


xperm_b_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0000000002000000), rs2:x12(0xffffff7fffffffff)
    TEST_RR_OP(xperm.b, x5, x27, x12, 0x0000000000000000, 0x2000000, 0xffffff7fffffffff, x1, 0, x2)

xperm_b_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0000000004000000), rs2:x11(0xffffffbfffffffff)
    TEST_RR_OP(xperm.b, x6, x26, x11, 0x0000000000000000, 0x4000000, 0xffffffbfffffffff, x1, 8, x2)

xperm_b_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0000000008000000), rs2:x10(0xffffffdfffffffff)
    TEST_RR_OP(xperm.b, x7, x25, x10, 0x0000000000000000, 0x8000000, 0xffffffdfffffffff, x1, 16, x2)

xperm_b_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0000000010000000), rs2:x9(0xffffffefffffffff)
    TEST_RR_OP(xperm.b, x8, x24, x9, 0x0000000000000000, 0x10000000, 0xffffffefffffffff, x1, 24, x2)

xperm_b_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0000000020000000), rs2:x8(0xfffffff7ffffffff)
    TEST_RR_OP(xperm.b, x9, x23, x8, 0x0000000000000000, 0x20000000, 0xfffffff7ffffffff, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_9_0)


xperm_b_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0000000040000000), rs2:x7(0xfffffffbffffffff)
    TEST_RR_OP(xperm.b, x10, x22, x7, 0x0000000000000000, 0x40000000, 0xfffffffbffffffff, x1, 0, x2)

xperm_b_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0000000080000000), rs2:x6(0xfffffffdffffffff)
    TEST_RR_OP(xperm.b, x11, x21, x6, 0x0000000000000000, 0x80000000, 0xfffffffdffffffff, x1, 8, x2)

xperm_b_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000100000000), rs2:x5(0xfffffffeffffffff)
    TEST_RR_OP(xperm.b, x12, x20, x5, 0x0000000000000000, 0x100000000, 0xfffffffeffffffff, x1, 16, x2)

xperm_b_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000200000000), rs2:x4(0xffffffff7fffffff)
    TEST_RR_OP(xperm.b, x13, x19, x4, 0x0000000000000000, 0x200000000, 0xffffffff7fffffff, x1, 24, x2)

xperm_b_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0000000400000000), rs2:x3(0xffffffffbfffffff)
    TEST_RR_OP(xperm.b, x14, x18, x3, 0x0000000000000000, 0x400000000, 0xffffffffbfffffff, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x3,signature_10_0)


xperm_b_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x0000000800000000), rs2:x2(0xffffffffdfffffff)
    TEST_RR_OP(xperm.b, x15, x17, x2, 0x0000000000000000, 0x800000000, 0xffffffffdfffffff, x3, 0, x4)

xperm_b_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x0000001000000000), rs2:x1(0xffffffffefffffff)
    TEST_RR_OP(xperm.b, x16, x16, x1, 0x0000000000000000, 0x1000000000, 0xffffffffefffffff, x3, 8, x4)

xperm_b_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000002000000000), rs2:x31(0xfffffffff7ffffff)
    TEST_RR_OP(xperm.b, x17, x15, x31, 0x0000000000000000, 0x2000000000, 0xfffffffff7ffffff, x3, 16, x4)

xperm_b_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000004000000000), rs2:x30(0xfffffffffbffffff)
    TEST_RR_OP(xperm.b, x18, x14, x30, 0x0000000000000000, 0x4000000000, 0xfffffffffbffffff, x3, 24, x4)

xperm_b_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000008000000000), rs2:x29(0xfffffffffdffffff)
    TEST_RR_OP(xperm.b, x19, x13, x29, 0x0000000000000000, 0x8000000000, 0xfffffffffdffffff, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_11_0)


xperm_b_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000010000000000), rs2:x28(0xfffffffffeffffff)
    TEST_RR_OP(xperm.b, x20, x12, x28, 0x0000000000000000, 0x10000000000, 0xfffffffffeffffff, x1, 0, x2)

xperm_b_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000020000000000), rs2:x27(0xffffffffff7fffff)
    TEST_RR_OP(xperm.b, x21, x11, x27, 0x0000000000000000, 0x20000000000, 0xffffffffff7fffff, x1, 8, x2)

xperm_b_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000040000000000), rs2:x26(0xffffffffffbfffff)
    TEST_RR_OP(xperm.b, x22, x10, x26, 0x0000000000000000, 0x40000000000, 0xffffffffffbfffff, x1, 16, x2)

xperm_b_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000080000000000), rs2:x25(0xffffffffffdfffff)
    TEST_RR_OP(xperm.b, x23, x9, x25, 0x0000000000000000, 0x80000000000, 0xffffffffffdfffff, x1, 24, x2)

xperm_b_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000100000000000), rs2:x24(0xffffffffffefffff)
    TEST_RR_OP(xperm.b, x24, x8, x24, 0x0000000000000000, 0x100000000000, 0xffffffffffefffff, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_12_0)


xperm_b_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000200000000000), rs2:x23(0xfffffffffff7ffff)
    TEST_RR_OP(xperm.b, x25, x7, x23, 0x0000000000000000, 0x200000000000, 0xfffffffffff7ffff, x1, 0, x2)

xperm_b_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000400000000000), rs2:x22(0xfffffffffffbffff)
    TEST_RR_OP(xperm.b, x26, x6, x22, 0x0000000000000000, 0x400000000000, 0xfffffffffffbffff, x1, 8, x2)

xperm_b_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000800000000000), rs2:x21(0xfffffffffffdffff)
    TEST_RR_OP(xperm.b, x27, x5, x21, 0x0000000000000000, 0x800000000000, 0xfffffffffffdffff, x1, 16, x2)

xperm_b_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0001000000000000), rs2:x20(0xfffffffffffeffff)
    TEST_RR_OP(xperm.b, x28, x4, x20, 0x0000000000000000, 0x1000000000000, 0xfffffffffffeffff, x1, 24, x2)

xperm_b_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0002000000000000), rs2:x19(0xffffffffffff7fff)
    TEST_RR_OP(xperm.b, x29, x3, x19, 0x0000000000000000, 0x2000000000000, 0xffffffffffff7fff, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x4,signature_13_0)


xperm_b_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0004000000000000), rs2:x18(0xffffffffffffbfff)
    TEST_RR_OP(xperm.b, x30, x2, x18, 0x0000000000000000, 0x4000000000000, 0xffffffffffffbfff, x4, 0, x5)

xperm_b_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0008000000000000), rs2:x17(0xffffffffffffdfff)
    TEST_RR_OP(xperm.b, x31, x1, x17, 0x0000000000000000, 0x8000000000000, 0xffffffffffffdfff, x4, 8, x5)

xperm_b_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0010000000000000), rs2:x16(0xffffffffffffefff)
    TEST_RR_OP(xperm.b, x1, x31, x16, 0x0000000000000000, 0x10000000000000, 0xffffffffffffefff, x4, 16, x5)

xperm_b_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0020000000000000), rs2:x15(0xfffffffffffff7ff)
    TEST_RR_OP(xperm.b, x2, x30, x15, 0x0000000000000000, 0x20000000000000, 0xfffffffffffff7ff, x4, 24, x5)

xperm_b_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0040000000000000), rs2:x14(0xfffffffffffffbff)
    TEST_RR_OP(xperm.b, x3, x29, x14, 0x0000000000000000, 0x40000000000000, 0xfffffffffffffbff, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_14_0)


xperm_b_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0080000000000000), rs2:x13(0xfffffffffffffdff)
    TEST_RR_OP(xperm.b, x4, x28, x13, 0x0000000000000000, 0x80000000000000, 0xfffffffffffffdff, x1, 0, x2)

xperm_b_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0100000000000000), rs2:x12(0xfffffffffffffeff)
    TEST_RR_OP(xperm.b, x5, x27, x12, 0x0000000000000000, 0x100000000000000, 0xfffffffffffffeff, x1, 8, x2)

xperm_b_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0200000000000000), rs2:x11(0xffffffffffffff7f)
    TEST_RR_OP(xperm.b, x6, x26, x11, 0x0000000000000000, 0x200000000000000, 0xffffffffffffff7f, x1, 16, x2)

xperm_b_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0400000000000000), rs2:x10(0xffffffffffffffbf)
    TEST_RR_OP(xperm.b, x7, x25, x10, 0x0000000000000000, 0x400000000000000, 0xffffffffffffffbf, x1, 24, x2)

xperm_b_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0800000000000000), rs2:x9(0xffffffffffffffdf)
    TEST_RR_OP(xperm.b, x8, x24, x9, 0x0000000000000000, 0x800000000000000, 0xffffffffffffffdf, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_15_0)


xperm_b_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x1000000000000000), rs2:x8(0xffffffffffffffef)
    TEST_RR_OP(xperm.b, x9, x23, x8, 0x0000000000000000, 0x1000000000000000, 0xffffffffffffffef, x1, 0, x2)

xperm_b_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x2000000000000000), rs2:x7(0xfffffffffffffff7)
    TEST_RR_OP(xperm.b, x10, x22, x7, 0x0000000000000000, 0x2000000000000000, 0xfffffffffffffff7, x1, 8, x2)

xperm_b_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x4000000000000000), rs2:x6(0xfffffffffffffffb)
    TEST_RR_OP(xperm.b, x11, x21, x6, 0x0000000000000000, 0x4000000000000000, 0xfffffffffffffffb, x1, 16, x2)

xperm_b_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x8000000000000000), rs2:x5(0xfffffffffffffffd)
    TEST_RR_OP(xperm.b, x12, x20, x5, 0x0000000000000000, 0x8000000000000000, 0xfffffffffffffffd, x1, 24, x2)

xperm_b_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000), rs2:x4(0xfffffffffffffffe)
    TEST_RR_OP(xperm.b, x13, x19, x4, 0x0000000000000000, 0x0, 0xfffffffffffffffe, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x4,signature_16_0)


xperm_b_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0xfefefefefefefefe), rs1:x18(0xfffffffffffffffe), rs2:x3(0x0000000000000000)
    TEST_RR_OP(xperm.b, x14, x18, x3, 0xfefefefefefefefe, 0xfffffffffffffffe, 0x0, x4, 0, x5)

xperm_b_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0x00fdfdfdfdfdfdfd), rs1:x17(0xfffffffffffffffd), rs2:x2(0x8000000000000000)
    TEST_RR_OP(xperm.b, x15, x17, x2, 0x00fdfdfdfdfdfdfd, 0xfffffffffffffffd, 0x8000000000000000, x4, 8, x5)

xperm_b_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0x00fbfbfbfbfbfbfb), rs1:x16(0xfffffffffffffffb), rs2:x1(0x4000000000000000)
    TEST_RR_OP(xperm.b, x16, x16, x1, 0x00fbfbfbfbfbfbfb, 0xfffffffffffffffb, 0x4000000000000000, x4, 16, x5)

xperm_b_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0x00f7f7f7f7f7f7f7), rs1:x15(0xfffffffffffffff7), rs2:x31(0x2000000000000000)
    TEST_RR_OP(xperm.b, x17, x15, x31, 0x00f7f7f7f7f7f7f7, 0xfffffffffffffff7, 0x2000000000000000, x4, 24, x5)

xperm_b_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0x00efefefefefefef), rs1:x14(0xffffffffffffffef), rs2:x30(0x1000000000000000)
    TEST_RR_OP(xperm.b, x18, x14, x30, 0x00efefefefefefef, 0xffffffffffffffef, 0x1000000000000000, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_17_0)


xperm_b_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0x00dfdfdfdfdfdfdf), rs1:x13(0xffffffffffffffdf), rs2:x29(0x0800000000000000)
    TEST_RR_OP(xperm.b, x19, x13, x29, 0x00dfdfdfdfdfdfdf, 0xffffffffffffffdf, 0x800000000000000, x1, 0, x2)

xperm_b_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0xffbfbfbfbfbfbfbf), rs1:x12(0xffffffffffffffbf), rs2:x28(0x0400000000000000)
    TEST_RR_OP(xperm.b, x20, x12, x28, 0xffbfbfbfbfbfbfbf, 0xffffffffffffffbf, 0x400000000000000, x1, 8, x2)

xperm_b_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0xff7f7f7f7f7f7f7f), rs1:x11(0xffffffffffffff7f), rs2:x27(0x0200000000000000)
    TEST_RR_OP(xperm.b, x21, x11, x27, 0xff7f7f7f7f7f7f7f, 0xffffffffffffff7f, 0x200000000000000, x1, 16, x2)

xperm_b_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0xfeffffffffffffff), rs1:x10(0xfffffffffffffeff), rs2:x26(0x0100000000000000)
    TEST_RR_OP(xperm.b, x22, x10, x26, 0xfeffffffffffffff, 0xfffffffffffffeff, 0x100000000000000, x1, 24, x2)

xperm_b_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0xff00ffffffffffff), rs1:x9(0xfffffffffffffdff), rs2:x25(0x0080000000000000)
    TEST_RR_OP(xperm.b, x23, x9, x25, 0xff00ffffffffffff, 0xfffffffffffffdff, 0x80000000000000, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_18_0)


xperm_b_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0xff00ffffffffffff), rs1:x8(0xfffffffffffffbff), rs2:x24(0x0040000000000000)
    TEST_RR_OP(xperm.b, x24, x8, x24, 0xff00ffffffffffff, 0xfffffffffffffbff, 0x40000000000000, x1, 0, x2)

xperm_b_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0xff00ffffffffffff), rs1:x7(0xfffffffffffff7ff), rs2:x23(0x0020000000000000)
    TEST_RR_OP(xperm.b, x25, x7, x23, 0xff00ffffffffffff, 0xfffffffffffff7ff, 0x20000000000000, x1, 8, x2)

xperm_b_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0xff00ffffffffffff), rs1:x6(0xffffffffffffefff), rs2:x22(0x0010000000000000)
    TEST_RR_OP(xperm.b, x26, x6, x22, 0xff00ffffffffffff, 0xffffffffffffefff, 0x10000000000000, x1, 16, x2)

xperm_b_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0xff00ffffffffffff), rs1:x5(0xffffffffffffdfff), rs2:x21(0x0008000000000000)
    TEST_RR_OP(xperm.b, x27, x5, x21, 0xff00ffffffffffff, 0xffffffffffffdfff, 0x8000000000000, x1, 24, x2)

xperm_b_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffffff), rs1:x4(0xffffffffffffbfff), rs2:x20(0x0004000000000000)
    TEST_RR_OP(xperm.b, x28, x4, x20, 0xffffffffffffffff, 0xffffffffffffbfff, 0x4000000000000, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x4,signature_19_0)


xperm_b_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffffff), rs1:x3(0xffffffffffff7fff), rs2:x19(0x0002000000000000)
    TEST_RR_OP(xperm.b, x29, x3, x19, 0xffffffffffffffff, 0xffffffffffff7fff, 0x2000000000000, x4, 0, x5)

xperm_b_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffffff), rs1:x2(0xfffffffffffeffff), rs2:x18(0x0001000000000000)
    TEST_RR_OP(xperm.b, x30, x2, x18, 0xffffffffffffffff, 0xfffffffffffeffff, 0x1000000000000, x4, 8, x5)

xperm_b_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0xffff00ffffffffff), rs1:x1(0xfffffffffffdffff), rs2:x17(0x0000800000000000)
    TEST_RR_OP(xperm.b, x31, x1, x17, 0xffff00ffffffffff, 0xfffffffffffdffff, 0x800000000000, x4, 16, x5)

xperm_b_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0xffff00ffffffffff), rs1:x31(0xfffffffffffbffff), rs2:x16(0x0000400000000000)
    TEST_RR_OP(xperm.b, x1, x31, x16, 0xffff00ffffffffff, 0xfffffffffffbffff, 0x400000000000, x4, 24, x5)

xperm_b_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0xffff00ffffffffff), rs1:x30(0xfffffffffff7ffff), rs2:x15(0x0000200000000000)
    TEST_RR_OP(xperm.b, x2, x30, x15, 0xffff00ffffffffff, 0xfffffffffff7ffff, 0x200000000000, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_20_0)


xperm_b_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0xffff00ffffffffff), rs1:x29(0xffffffffffefffff), rs2:x14(0x0000100000000000)
    TEST_RR_OP(xperm.b, x3, x29, x14, 0xffff00ffffffffff, 0xffffffffffefffff, 0x100000000000, x1, 0, x2)

xperm_b_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0xffff00ffffffffff), rs1:x28(0xffffffffffdfffff), rs2:x13(0x0000080000000000)
    TEST_RR_OP(xperm.b, x4, x28, x13, 0xffff00ffffffffff, 0xffffffffffdfffff, 0x80000000000, x1, 8, x2)

xperm_b_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffffffff), rs1:x27(0xffffffffffbfffff), rs2:x12(0x0000040000000000)
    TEST_RR_OP(xperm.b, x5, x27, x12, 0xffffffffffffffff, 0xffffffffffbfffff, 0x40000000000, x1, 16, x2)

xperm_b_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0xffff7fffffffffff), rs1:x26(0xffffffffff7fffff), rs2:x11(0x0000020000000000)
    TEST_RR_OP(xperm.b, x6, x26, x11, 0xffff7fffffffffff, 0xffffffffff7fffff, 0x20000000000, x1, 24, x2)

xperm_b_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffffffff), rs1:x25(0xfffffffffeffffff), rs2:x10(0x0000010000000000)
    TEST_RR_OP(xperm.b, x7, x25, x10, 0xffffffffffffffff, 0xfffffffffeffffff, 0x10000000000, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_21_0)


xperm_b_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0xffffff00ffffffff), rs1:x24(0xfffffffffdffffff), rs2:x9(0x0000008000000000)
    TEST_RR_OP(xperm.b, x8, x24, x9, 0xffffff00ffffffff, 0xfffffffffdffffff, 0x8000000000, x1, 0, x2)

xperm_b_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0xffffff00ffffffff), rs1:x23(0xfffffffffbffffff), rs2:x8(0x0000004000000000)
    TEST_RR_OP(xperm.b, x9, x23, x8, 0xffffff00ffffffff, 0xfffffffffbffffff, 0x4000000000, x1, 8, x2)

xperm_b_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0xffffff00ffffffff), rs1:x22(0xfffffffff7ffffff), rs2:x7(0x0000002000000000)
    TEST_RR_OP(xperm.b, x10, x22, x7, 0xffffff00ffffffff, 0xfffffffff7ffffff, 0x2000000000, x1, 16, x2)

xperm_b_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0xffffff00ffffffff), rs1:x21(0xffffffffefffffff), rs2:x6(0x0000001000000000)
    TEST_RR_OP(xperm.b, x11, x21, x6, 0xffffff00ffffffff, 0xffffffffefffffff, 0x1000000000, x1, 24, x2)

xperm_b_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0xffffff00ffffffff), rs1:x20(0xffffffffdfffffff), rs2:x5(0x0000000800000000)
    TEST_RR_OP(xperm.b, x12, x20, x5, 0xffffff00ffffffff, 0xffffffffdfffffff, 0x800000000, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x5,signature_22_0)


xperm_b_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffffff), rs1:x19(0xffffffffbfffffff), rs2:x4(0x0000000400000000)
    TEST_RR_OP(xperm.b, x13, x19, x4, 0xffffffffffffffff, 0xffffffffbfffffff, 0x400000000, x5, 0, x6)

xperm_b_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0xffffffff7fffffff), rs2:x3(0x0000000200000000)
    TEST_RR_OP(xperm.b, x14, x18, x3, 0xffffffffffffffff, 0xffffffff7fffffff, 0x200000000, x5, 8, x6)

xperm_b_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0xfffffffeffffffff), rs2:x2(0x0000000100000000)
    TEST_RR_OP(xperm.b, x15, x17, x2, 0xffffffffffffffff, 0xfffffffeffffffff, 0x100000000, x5, 16, x6)

xperm_b_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0xffffffff00ffffff), rs1:x16(0xfffffffdffffffff), rs2:x1(0x0000000080000000)
    TEST_RR_OP(xperm.b, x16, x16, x1, 0xffffffff00ffffff, 0xfffffffdffffffff, 0x80000000, x5, 24, x6)

xperm_b_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0xffffffff00ffffff), rs1:x15(0xfffffffbffffffff), rs2:x31(0x0000000040000000)
    TEST_RR_OP(xperm.b, x17, x15, x31, 0xffffffff00ffffff, 0xfffffffbffffffff, 0x40000000, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_23_0)


xperm_b_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0xffffffff00ffffff), rs1:x14(0xfffffff7ffffffff), rs2:x30(0x0000000020000000)
    TEST_RR_OP(xperm.b, x18, x14, x30, 0xffffffff00ffffff, 0xfffffff7ffffffff, 0x20000000, x1, 0, x2)

xperm_b_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0xffffffff00ffffff), rs1:x13(0xffffffefffffffff), rs2:x29(0x0000000010000000)
    TEST_RR_OP(xperm.b, x19, x13, x29, 0xffffffff00ffffff, 0xffffffefffffffff, 0x10000000, x1, 8, x2)

xperm_b_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0xffffffff00ffffff), rs1:x12(0xffffffdfffffffff), rs2:x28(0x0000000008000000)
    TEST_RR_OP(xperm.b, x20, x12, x28, 0xffffffff00ffffff, 0xffffffdfffffffff, 0x8000000, x1, 16, x2)

xperm_b_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0xffffffffbfffffff), rs1:x11(0xffffffbfffffffff), rs2:x27(0x0000000004000000)
    TEST_RR_OP(xperm.b, x21, x11, x27, 0xffffffffbfffffff, 0xffffffbfffffffff, 0x4000000, x1, 24, x2)

xperm_b_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xffffff7fffffffff), rs2:x26(0x0000000002000000)
    TEST_RR_OP(xperm.b, x22, x10, x26, 0xffffffffffffffff, 0xffffff7fffffffff, 0x2000000, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_24_0)


xperm_b_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffffffff), rs1:x9(0xfffffeffffffffff), rs2:x25(0x0000000001000000)
    TEST_RR_OP(xperm.b, x23, x9, x25, 0xffffffffffffffff, 0xfffffeffffffffff, 0x1000000, x1, 0, x2)

xperm_b_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0xffffffffff00ffff), rs1:x8(0xfffffdffffffffff), rs2:x24(0x0000000000800000)
    TEST_RR_OP(xperm.b, x24, x8, x24, 0xffffffffff00ffff, 0xfffffdffffffffff, 0x800000, x1, 8, x2)

xperm_b_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0xffffffffff00ffff), rs1:x7(0xfffffbffffffffff), rs2:x23(0x0000000000400000)
    TEST_RR_OP(xperm.b, x25, x7, x23, 0xffffffffff00ffff, 0xfffffbffffffffff, 0x400000, x1, 16, x2)

xperm_b_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0xffffffffff00ffff), rs1:x6(0xfffff7ffffffffff), rs2:x22(0x0000000000200000)
    TEST_RR_OP(xperm.b, x26, x6, x22, 0xffffffffff00ffff, 0xfffff7ffffffffff, 0x200000, x1, 24, x2)

xperm_b_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0xffffffffff00ffff), rs1:x5(0xffffefffffffffff), rs2:x21(0x0000000000100000)
    TEST_RR_OP(xperm.b, x27, x5, x21, 0xffffffffff00ffff, 0xffffefffffffffff, 0x100000, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x5,signature_25_0)


xperm_b_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0xffffffffff00ffff), rs1:x4(0xffffdfffffffffff), rs2:x20(0x0000000000080000)
    TEST_RR_OP(xperm.b, x28, x4, x20, 0xffffffffff00ffff, 0xffffdfffffffffff, 0x80000, x5, 0, x6)

xperm_b_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffffff), rs1:x3(0xffffbfffffffffff), rs2:x19(0x0000000000040000)
    TEST_RR_OP(xperm.b, x29, x3, x19, 0xffffffffffffffff, 0xffffbfffffffffff, 0x40000, x5, 8, x6)

xperm_b_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffffff), rs1:x2(0xffff7fffffffffff), rs2:x18(0x0000000000020000)
    TEST_RR_OP(xperm.b, x30, x2, x18, 0xffffffffffffffff, 0xffff7fffffffffff, 0x20000, x5, 16, x6)

xperm_b_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffffff), rs1:x1(0xfffeffffffffffff), rs2:x17(0x0000000000010000)
    TEST_RR_OP(xperm.b, x31, x1, x17, 0xffffffffffffffff, 0xfffeffffffffffff, 0x10000, x5, 24, x6)

xperm_b_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffff00ff), rs1:x31(0xfffdffffffffffff), rs2:x16(0x0000000000008000)
    TEST_RR_OP(xperm.b, x1, x31, x16, 0xffffffffffff00ff, 0xfffdffffffffffff, 0x8000, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_26_0)


xperm_b_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffff00ff), rs1:x30(0xfffbffffffffffff), rs2:x15(0x0000000000004000)
    TEST_RR_OP(xperm.b, x2, x30, x15, 0xffffffffffff00ff, 0xfffbffffffffffff, 0x4000, x1, 0, x7)

xperm_b_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffff00ff), rs1:x29(0xfff7ffffffffffff), rs2:x14(0x0000000000002000)
    TEST_RR_OP(xperm.b, x3, x29, x14, 0xffffffffffff00ff, 0xfff7ffffffffffff, 0x2000, x1, 8, x7)

xperm_b_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffff00ff), rs1:x28(0xffefffffffffffff), rs2:x13(0x0000000000001000)
    TEST_RR_OP(xperm.b, x4, x28, x13, 0xffffffffffff00ff, 0xffefffffffffffff, 0x1000, x1, 16, x7)

xperm_b_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffff00ff), rs1:x27(0xffdfffffffffffff), rs2:x12(0x0000000000000800)
    TEST_RR_OP(xperm.b, x5, x27, x12, 0xffffffffffff00ff, 0xffdfffffffffffff, 0x800, x1, 24, x7)

xperm_b_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffffffff), rs1:x26(0xffbfffffffffffff), rs2:x11(0x0000000000000400)
    TEST_RR_OP(xperm.b, x6, x26, x11, 0xffffffffffffffff, 0xffbfffffffffffff, 0x400, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_27_0)


xperm_b_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffffffff), rs1:x25(0xff7fffffffffffff), rs2:x10(0x0000000000000200)
    TEST_RR_OP(xperm.b, x7, x25, x10, 0xffffffffffffffff, 0xff7fffffffffffff, 0x200, x1, 0, x2)

xperm_b_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffffffff), rs1:x24(0xfeffffffffffffff), rs2:x9(0x0000000000000100)
    TEST_RR_OP(xperm.b, x8, x24, x9, 0xffffffffffffffff, 0xfeffffffffffffff, 0x100, x1, 8, x2)

xperm_b_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffffff00), rs1:x23(0xfdffffffffffffff), rs2:x8(0x0000000000000080)
    TEST_RR_OP(xperm.b, x9, x23, x8, 0xffffffffffffff00, 0xfdffffffffffffff, 0x80, x1, 16, x2)

xperm_b_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffffff00), rs1:x22(0xfbffffffffffffff), rs2:x7(0x0000000000000040)
    TEST_RR_OP(xperm.b, x10, x22, x7, 0xffffffffffffff00, 0xfbffffffffffffff, 0x40, x1, 24, x2)

xperm_b_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffff00), rs1:x21(0xf7ffffffffffffff), rs2:x6(0x0000000000000020)
    TEST_RR_OP(xperm.b, x11, x21, x6, 0xffffffffffffff00, 0xf7ffffffffffffff, 0x20, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x6,signature_28_0)


xperm_b_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffff00), rs1:x20(0xefffffffffffffff), rs2:x5(0x0000000000000010)
    TEST_RR_OP(xperm.b, x12, x20, x5, 0xffffffffffffff00, 0xefffffffffffffff, 0x10, x6, 0, x7)

xperm_b_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffff00), rs1:x19(0xdfffffffffffffff), rs2:x4(0x0000000000000008)
    TEST_RR_OP(xperm.b, x13, x19, x4, 0xffffffffffffff00, 0xdfffffffffffffff, 0x8, x6, 8, x7)

xperm_b_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0xbfffffffffffffff), rs2:x3(0x0000000000000004)
    TEST_RR_OP(xperm.b, x14, x18, x3, 0xffffffffffffffff, 0xbfffffffffffffff, 0x4, x6, 16, x7)

xperm_b_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0x7fffffffffffffff), rs2:x2(0x0000000000000002)
    TEST_RR_OP(xperm.b, x15, x17, x2, 0xffffffffffffffff, 0x7fffffffffffffff, 0x2, x6, 24, x7)

xperm_b_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xffffffffffffffff), rs2:x1(0x0000000000000001)
    TEST_RR_OP(xperm.b, x16, x16, x1, 0xffffffffffffffff, 0xffffffffffffffff, 0x1, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_29_0)


xperm_b_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0101010101010101), rs1:x15(0x0000000000000001), rs2:x31(0x0000000000000000)
    TEST_RR_OP(xperm.b, x17, x15, x31, 0x0101010101010101, 0x1, 0x0, x1, 0, x2)

xperm_b_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0202020202020202), rs1:x14(0x0000000000000002), rs2:x30(0x0000000000000000)
    TEST_RR_OP(xperm.b, x18, x14, x30, 0x0202020202020202, 0x2, 0x0, x1, 8, x2)

xperm_b_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0404040404040404), rs1:x13(0x0000000000000004), rs2:x29(0x0000000000000000)
    TEST_RR_OP(xperm.b, x19, x13, x29, 0x0404040404040404, 0x4, 0x0, x1, 16, x2)

xperm_b_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0808080808080808), rs1:x12(0x0000000000000008), rs2:x28(0x0000000000000000)
    TEST_RR_OP(xperm.b, x20, x12, x28, 0x0808080808080808, 0x8, 0x0, x1, 24, x2)

xperm_b_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x1010101010101010), rs1:x11(0x0000000000000010), rs2:x27(0x0000000000000000)
    TEST_RR_OP(xperm.b, x21, x11, x27, 0x1010101010101010, 0x10, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_30_0)


xperm_b_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x2020202020202020), rs1:x10(0x0000000000000020), rs2:x26(0x0000000000000000)
    TEST_RR_OP(xperm.b, x22, x10, x26, 0x2020202020202020, 0x20, 0x0, x1, 0, x2)

xperm_b_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x4040404040404040), rs1:x9(0x0000000000000040), rs2:x25(0x0000000000000000)
    TEST_RR_OP(xperm.b, x23, x9, x25, 0x4040404040404040, 0x40, 0x0, x1, 8, x2)

xperm_b_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x8080808080808080), rs1:x8(0x0000000000000080), rs2:x24(0x0000000000000000)
    TEST_RR_OP(xperm.b, x24, x8, x24, 0x8080808080808080, 0x80, 0x0, x1, 16, x2)

xperm_b_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000000000000100), rs2:x23(0x0000000000000000)
    TEST_RR_OP(xperm.b, x25, x7, x23, 0x0000000000000000, 0x100, 0x0, x1, 24, x2)

xperm_b_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000000000000200), rs2:x22(0x0000000000000000)
    TEST_RR_OP(xperm.b, x26, x6, x22, 0x0000000000000000, 0x200, 0x0, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x6,signature_31_0)


xperm_b_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000000000000400), rs2:x21(0x0000000000000000)
    TEST_RR_OP(xperm.b, x27, x5, x21, 0x0000000000000000, 0x400, 0x0, x6, 0, x7)

xperm_b_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000000000000800), rs2:x20(0x0000000000000000)
    TEST_RR_OP(xperm.b, x28, x4, x20, 0x0000000000000000, 0x800, 0x0, x6, 8, x7)

xperm_b_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000000000001000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(xperm.b, x29, x3, x19, 0x0000000000000000, 0x1000, 0x0, x6, 16, x7)

xperm_b_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000000000002000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(xperm.b, x30, x2, x18, 0x0000000000000000, 0x2000, 0x0, x6, 24, x7)

xperm_b_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000000000004000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(xperm.b, x31, x1, x17, 0x0000000000000000, 0x4000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x6,signature_32_0)


xperm_b_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000000000008000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(xperm.b, x1, x31, x16, 0x0000000000000000, 0x8000, 0x0, x6, 0, x7)

xperm_b_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000000000010000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(xperm.b, x2, x30, x15, 0x0000000000000000, 0x10000, 0x0, x6, 8, x7)

xperm_b_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0000000000020000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(xperm.b, x3, x29, x14, 0x0000000000000000, 0x20000, 0x0, x6, 16, x7)

xperm_b_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0000000000040000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(xperm.b, x4, x28, x13, 0x0000000000000000, 0x40000, 0x0, x6, 24, x7)

xperm_b_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0000000000080000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(xperm.b, x5, x27, x12, 0x0000000000000000, 0x80000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_33_0)


xperm_b_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0000000000100000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(xperm.b, x6, x26, x11, 0x0000000000000000, 0x100000, 0x0, x1, 0, x2)

xperm_b_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0000000000200000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(xperm.b, x7, x25, x10, 0x0000000000000000, 0x200000, 0x0, x1, 8, x2)

xperm_b_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0000000000400000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(xperm.b, x8, x24, x9, 0x0000000000000000, 0x400000, 0x0, x1, 16, x2)

xperm_b_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0000000000800000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(xperm.b, x9, x23, x8, 0x0000000000000000, 0x800000, 0x0, x1, 24, x2)

xperm_b_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0000000001000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(xperm.b, x10, x22, x7, 0x0000000000000000, 0x1000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_34_0)


xperm_b_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0000000002000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(xperm.b, x11, x21, x6, 0x0000000000000000, 0x2000000, 0x0, x1, 0, x7)

xperm_b_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000004000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(xperm.b, x12, x20, x5, 0x0000000000000000, 0x4000000, 0x0, x1, 8, x7)

xperm_b_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000008000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(xperm.b, x13, x19, x4, 0x0000000000000000, 0x8000000, 0x0, x1, 16, x7)

xperm_b_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0000000010000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(xperm.b, x14, x18, x3, 0x0000000000000000, 0x10000000, 0x0, x1, 24, x7)

xperm_b_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x0000000020000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(xperm.b, x15, x17, x2, 0x0000000000000000, 0x20000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x2,signature_35_0)


xperm_b_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x0000000040000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(xperm.b, x16, x16, x1, 0x0000000000000000, 0x40000000, 0x0, x2, 0, x3)

xperm_b_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000000080000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(xperm.b, x17, x15, x31, 0x0000000000000000, 0x80000000, 0x0, x2, 8, x3)

xperm_b_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000000100000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(xperm.b, x18, x14, x30, 0x0000000000000000, 0x100000000, 0x0, x2, 16, x3)

xperm_b_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000200000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(xperm.b, x19, x13, x29, 0x0000000000000000, 0x200000000, 0x0, x2, 24, x3)

xperm_b_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000000400000000), rs2:x28(0x0000000000000000)
    TEST_RR_OP(xperm.b, x20, x12, x28, 0x0000000000000000, 0x400000000, 0x0, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_36_0)


xperm_b_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000800000000), rs2:x27(0x0000000000000000)
    TEST_RR_OP(xperm.b, x21, x11, x27, 0x0000000000000000, 0x800000000, 0x0, x1, 0, x2)

xperm_b_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000001000000000), rs2:x26(0x0000000000000000)
    TEST_RR_OP(xperm.b, x22, x10, x26, 0x0000000000000000, 0x1000000000, 0x0, x1, 8, x2)

xperm_b_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000002000000000), rs2:x25(0x0000000000000000)
    TEST_RR_OP(xperm.b, x23, x9, x25, 0x0000000000000000, 0x2000000000, 0x0, x1, 16, x2)

xperm_b_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000004000000000), rs2:x24(0x0000000000000000)
    TEST_RR_OP(xperm.b, x24, x8, x24, 0x0000000000000000, 0x4000000000, 0x0, x1, 24, x2)

xperm_b_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000008000000000), rs2:x23(0x0000000000000000)
    TEST_RR_OP(xperm.b, x25, x7, x23, 0x0000000000000000, 0x8000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_37_0)


xperm_b_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000010000000000), rs2:x22(0x0000000000000000)
    TEST_RR_OP(xperm.b, x26, x6, x22, 0x0000000000000000, 0x10000000000, 0x0, x1, 0, x7)

xperm_b_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000020000000000), rs2:x21(0x0000000000000000)
    TEST_RR_OP(xperm.b, x27, x5, x21, 0x0000000000000000, 0x20000000000, 0x0, x1, 8, x7)

xperm_b_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000040000000000), rs2:x20(0x0000000000000000)
    TEST_RR_OP(xperm.b, x28, x4, x20, 0x0000000000000000, 0x40000000000, 0x0, x1, 16, x7)

xperm_b_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000080000000000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(xperm.b, x29, x3, x19, 0x0000000000000000, 0x80000000000, 0x0, x1, 24, x7)

xperm_b_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000100000000000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(xperm.b, x30, x2, x18, 0x0000000000000000, 0x100000000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x5,signature_38_0)


xperm_b_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000200000000000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(xperm.b, x31, x1, x17, 0x0000000000000000, 0x200000000000, 0x0, x5, 0, x6)

xperm_b_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000400000000000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(xperm.b, x1, x31, x16, 0x0000000000000000, 0x400000000000, 0x0, x5, 8, x6)

xperm_b_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000800000000000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(xperm.b, x2, x30, x15, 0x0000000000000000, 0x800000000000, 0x0, x5, 16, x6)

xperm_b_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0001000000000000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(xperm.b, x3, x29, x14, 0x0000000000000000, 0x1000000000000, 0x0, x5, 24, x6)

xperm_b_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0002000000000000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(xperm.b, x4, x28, x13, 0x0000000000000000, 0x2000000000000, 0x0, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_39_0)


xperm_b_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0004000000000000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(xperm.b, x5, x27, x12, 0x0000000000000000, 0x4000000000000, 0x0, x1, 0, x2)

xperm_b_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0008000000000000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(xperm.b, x6, x26, x11, 0x0000000000000000, 0x8000000000000, 0x0, x1, 8, x2)

xperm_b_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0010000000000000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(xperm.b, x7, x25, x10, 0x0000000000000000, 0x10000000000000, 0x0, x1, 16, x2)

xperm_b_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0020000000000000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(xperm.b, x8, x24, x9, 0x0000000000000000, 0x20000000000000, 0x0, x1, 24, x2)

xperm_b_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0040000000000000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(xperm.b, x9, x23, x8, 0x0000000000000000, 0x40000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_40_0)


xperm_b_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0080000000000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(xperm.b, x10, x22, x7, 0x0000000000000000, 0x80000000000000, 0x0, x1, 0, x2)

xperm_b_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0100000000000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(xperm.b, x11, x21, x6, 0x0000000000000000, 0x100000000000000, 0x0, x1, 8, x2)

xperm_b_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0200000000000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(xperm.b, x12, x20, x5, 0x0000000000000000, 0x200000000000000, 0x0, x1, 16, x2)

xperm_b_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0400000000000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(xperm.b, x13, x19, x4, 0x0000000000000000, 0x400000000000000, 0x0, x1, 24, x2)

xperm_b_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0800000000000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(xperm.b, x14, x18, x3, 0x0000000000000000, 0x800000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x3,signature_41_0)


xperm_b_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x1000000000000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(xperm.b, x15, x17, x2, 0x0000000000000000, 0x1000000000000000, 0x0, x3, 0, x4)

xperm_b_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x2000000000000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(xperm.b, x16, x16, x1, 0x0000000000000000, 0x2000000000000000, 0x0, x3, 8, x4)

xperm_b_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x4000000000000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(xperm.b, x17, x15, x31, 0x0000000000000000, 0x4000000000000000, 0x0, x3, 16, x4)

xperm_b_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x8000000000000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(xperm.b, x18, x14, x30, 0x0000000000000000, 0x8000000000000000, 0x0, x3, 24, x4)

xperm_b_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(xperm.b, x19, x13, x29, 0x0000000000000000, 0x0, 0x0, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_42_0)


xperm_b_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0xfefefefefefefefe), rs1:x12(0xfffffffffffffffe), rs2:x28(0x0000000000000000)
    TEST_RR_OP(xperm.b, x20, x12, x28, 0xfefefefefefefefe, 0xfffffffffffffffe, 0x0, x1, 0, x2)

xperm_b_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0xfdfdfdfdfdfdfdfd), rs1:x11(0xfffffffffffffffd), rs2:x27(0x0000000000000000)
    TEST_RR_OP(xperm.b, x21, x11, x27, 0xfdfdfdfdfdfdfdfd, 0xfffffffffffffffd, 0x0, x1, 8, x2)

xperm_b_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0xfbfbfbfbfbfbfbfb), rs1:x10(0xfffffffffffffffb), rs2:x26(0x0000000000000000)
    TEST_RR_OP(xperm.b, x22, x10, x26, 0xfbfbfbfbfbfbfbfb, 0xfffffffffffffffb, 0x0, x1, 16, x2)

xperm_b_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0xf7f7f7f7f7f7f7f7), rs1:x9(0xfffffffffffffff7), rs2:x25(0x0000000000000000)
    TEST_RR_OP(xperm.b, x23, x9, x25, 0xf7f7f7f7f7f7f7f7, 0xfffffffffffffff7, 0x0, x1, 24, x2)

xperm_b_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0xefefefefefefefef), rs1:x8(0xffffffffffffffef), rs2:x24(0x0000000000000000)
    TEST_RR_OP(xperm.b, x24, x8, x24, 0xefefefefefefefef, 0xffffffffffffffef, 0x0, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_43_0)


xperm_b_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0xdfdfdfdfdfdfdfdf), rs1:x7(0xffffffffffffffdf), rs2:x23(0x0000000000000000)
    TEST_RR_OP(xperm.b, x25, x7, x23, 0xdfdfdfdfdfdfdfdf, 0xffffffffffffffdf, 0x0, x1, 0, x2)

xperm_b_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0xbfbfbfbfbfbfbfbf), rs1:x6(0xffffffffffffffbf), rs2:x22(0x0000000000000000)
    TEST_RR_OP(xperm.b, x26, x6, x22, 0xbfbfbfbfbfbfbfbf, 0xffffffffffffffbf, 0x0, x1, 8, x2)

xperm_b_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0x7f7f7f7f7f7f7f7f), rs1:x5(0xffffffffffffff7f), rs2:x21(0x0000000000000000)
    TEST_RR_OP(xperm.b, x27, x5, x21, 0x7f7f7f7f7f7f7f7f, 0xffffffffffffff7f, 0x0, x1, 16, x2)

xperm_b_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffffff), rs1:x4(0xfffffffffffffeff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(xperm.b, x28, x4, x20, 0xffffffffffffffff, 0xfffffffffffffeff, 0x0, x1, 24, x2)

xperm_b_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffffff), rs1:x3(0xfffffffffffffdff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(xperm.b, x29, x3, x19, 0xffffffffffffffff, 0xfffffffffffffdff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x4,signature_44_0)


xperm_b_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffffff), rs1:x2(0xfffffffffffffbff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(xperm.b, x30, x2, x18, 0xffffffffffffffff, 0xfffffffffffffbff, 0x0, x4, 0, x5)

xperm_b_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffffff), rs1:x1(0xfffffffffffff7ff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(xperm.b, x31, x1, x17, 0xffffffffffffffff, 0xfffffffffffff7ff, 0x0, x4, 8, x5)

xperm_b_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffffff), rs1:x31(0xffffffffffffefff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(xperm.b, x1, x31, x16, 0xffffffffffffffff, 0xffffffffffffefff, 0x0, x4, 16, x5)

xperm_b_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffffff), rs1:x30(0xffffffffffffdfff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(xperm.b, x2, x30, x15, 0xffffffffffffffff, 0xffffffffffffdfff, 0x0, x4, 24, x5)

xperm_b_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffffff), rs1:x29(0xffffffffffffbfff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(xperm.b, x3, x29, x14, 0xffffffffffffffff, 0xffffffffffffbfff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_45_0)


xperm_b_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffffffff), rs1:x28(0xffffffffffff7fff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(xperm.b, x4, x28, x13, 0xffffffffffffffff, 0xffffffffffff7fff, 0x0, x1, 0, x2)

xperm_b_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffffffff), rs1:x27(0xfffffffffffeffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(xperm.b, x5, x27, x12, 0xffffffffffffffff, 0xfffffffffffeffff, 0x0, x1, 8, x2)

xperm_b_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffffffff), rs1:x26(0xfffffffffffdffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(xperm.b, x6, x26, x11, 0xffffffffffffffff, 0xfffffffffffdffff, 0x0, x1, 16, x2)

xperm_b_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffffffff), rs1:x25(0xfffffffffffbffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(xperm.b, x7, x25, x10, 0xffffffffffffffff, 0xfffffffffffbffff, 0x0, x1, 24, x2)

xperm_b_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffffffff), rs1:x24(0xfffffffffff7ffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(xperm.b, x8, x24, x9, 0xffffffffffffffff, 0xfffffffffff7ffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_46_0)


xperm_b_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffffffff), rs1:x23(0xffffffffffefffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(xperm.b, x9, x23, x8, 0xffffffffffffffff, 0xffffffffffefffff, 0x0, x1, 0, x2)

xperm_b_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffffffff), rs1:x22(0xffffffffffdfffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(xperm.b, x10, x22, x7, 0xffffffffffffffff, 0xffffffffffdfffff, 0x0, x1, 8, x2)

xperm_b_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffffff), rs1:x21(0xffffffffffbfffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(xperm.b, x11, x21, x6, 0xffffffffffffffff, 0xffffffffffbfffff, 0x0, x1, 16, x2)

xperm_b_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffffff), rs1:x20(0xffffffffff7fffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(xperm.b, x12, x20, x5, 0xffffffffffffffff, 0xffffffffff7fffff, 0x0, x1, 24, x2)

xperm_b_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffffff), rs1:x19(0xfffffffffeffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(xperm.b, x13, x19, x4, 0xffffffffffffffff, 0xfffffffffeffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x4,signature_47_0)


xperm_b_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0xfffffffffdffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(xperm.b, x14, x18, x3, 0xffffffffffffffff, 0xfffffffffdffffff, 0x0, x4, 0, x5)

xperm_b_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0xfffffffffbffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(xperm.b, x15, x17, x2, 0xffffffffffffffff, 0xfffffffffbffffff, 0x0, x4, 8, x5)

xperm_b_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xfffffffff7ffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(xperm.b, x16, x16, x1, 0xffffffffffffffff, 0xfffffffff7ffffff, 0x0, x4, 16, x5)

xperm_b_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffffffff), rs1:x15(0xffffffffefffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(xperm.b, x17, x15, x31, 0xffffffffffffffff, 0xffffffffefffffff, 0x0, x4, 24, x5)

xperm_b_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffff), rs1:x14(0xffffffffdfffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(xperm.b, x18, x14, x30, 0xffffffffffffffff, 0xffffffffdfffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_48_0)


xperm_b_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffff), rs1:x13(0xffffffffbfffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(xperm.b, x19, x13, x29, 0xffffffffffffffff, 0xffffffffbfffffff, 0x0, x1, 0, x2)

xperm_b_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffff), rs1:x12(0xffffffff7fffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(xperm.b, x20, x12, x28, 0xffffffffffffffff, 0xffffffff7fffffff, 0x0, x1, 8, x2)

xperm_b_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0xfffffffeffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(xperm.b, x21, x11, x27, 0xffffffffffffffff, 0xfffffffeffffffff, 0x0, x1, 16, x2)

xperm_b_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xfffffffdffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(xperm.b, x22, x10, x26, 0xffffffffffffffff, 0xfffffffdffffffff, 0x0, x1, 24, x2)

xperm_b_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffffffff), rs1:x9(0xfffffffbffffffff), rs2:x25(0x0000000000000000)
    TEST_RR_OP(xperm.b, x23, x9, x25, 0xffffffffffffffff, 0xfffffffbffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_49_0)


xperm_b_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffff), rs1:x8(0xfffffff7ffffffff), rs2:x24(0x0000000000000000)
    TEST_RR_OP(xperm.b, x24, x8, x24, 0xffffffffffffffff, 0xfffffff7ffffffff, 0x0, x1, 0, x2)

xperm_b_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffff), rs1:x7(0xffffffefffffffff), rs2:x23(0x0000000000000000)
    TEST_RR_OP(xperm.b, x25, x7, x23, 0xffffffffffffffff, 0xffffffefffffffff, 0x0, x1, 8, x2)

xperm_b_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffff), rs1:x6(0xffffffdfffffffff), rs2:x22(0x0000000000000000)
    TEST_RR_OP(xperm.b, x26, x6, x22, 0xffffffffffffffff, 0xffffffdfffffffff, 0x0, x1, 16, x2)

xperm_b_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffffff), rs1:x5(0xffffffbfffffffff), rs2:x21(0x0000000000000000)
    TEST_RR_OP(xperm.b, x27, x5, x21, 0xffffffffffffffff, 0xffffffbfffffffff, 0x0, x1, 24, x2)

xperm_b_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffffff), rs1:x4(0xffffff7fffffffff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(xperm.b, x28, x4, x20, 0xffffffffffffffff, 0xffffff7fffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x4,signature_50_0)


xperm_b_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffffff), rs1:x3(0xfffffeffffffffff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(xperm.b, x29, x3, x19, 0xffffffffffffffff, 0xfffffeffffffffff, 0x0, x4, 0, x5)

xperm_b_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffffff), rs1:x2(0xfffffdffffffffff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(xperm.b, x30, x2, x18, 0xffffffffffffffff, 0xfffffdffffffffff, 0x0, x4, 8, x5)

xperm_b_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffffff), rs1:x1(0xfffffbffffffffff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(xperm.b, x31, x1, x17, 0xffffffffffffffff, 0xfffffbffffffffff, 0x0, x4, 16, x5)

xperm_b_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffffff), rs1:x31(0xfffff7ffffffffff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(xperm.b, x1, x31, x16, 0xffffffffffffffff, 0xfffff7ffffffffff, 0x0, x4, 24, x5)

xperm_b_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffffff), rs1:x30(0xffffefffffffffff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(xperm.b, x2, x30, x15, 0xffffffffffffffff, 0xffffefffffffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_51_0)


xperm_b_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffffff), rs1:x29(0xffffdfffffffffff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(xperm.b, x3, x29, x14, 0xffffffffffffffff, 0xffffdfffffffffff, 0x0, x1, 0, x2)

xperm_b_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffffffff), rs1:x28(0xffffbfffffffffff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(xperm.b, x4, x28, x13, 0xffffffffffffffff, 0xffffbfffffffffff, 0x0, x1, 8, x2)

xperm_b_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffffffff), rs1:x27(0xffff7fffffffffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(xperm.b, x5, x27, x12, 0xffffffffffffffff, 0xffff7fffffffffff, 0x0, x1, 16, x2)

xperm_b_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffffffff), rs1:x26(0xfffeffffffffffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(xperm.b, x6, x26, x11, 0xffffffffffffffff, 0xfffeffffffffffff, 0x0, x1, 24, x2)

xperm_b_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffffffff), rs1:x25(0xfffdffffffffffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(xperm.b, x7, x25, x10, 0xffffffffffffffff, 0xfffdffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_52_0)


xperm_b_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffffffff), rs1:x24(0xfffbffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(xperm.b, x8, x24, x9, 0xffffffffffffffff, 0xfffbffffffffffff, 0x0, x1, 0, x2)

xperm_b_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffffffff), rs1:x23(0xfff7ffffffffffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(xperm.b, x9, x23, x8, 0xffffffffffffffff, 0xfff7ffffffffffff, 0x0, x1, 8, x2)

xperm_b_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffffffff), rs1:x22(0xffefffffffffffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(xperm.b, x10, x22, x7, 0xffffffffffffffff, 0xffefffffffffffff, 0x0, x1, 16, x2)

xperm_b_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffffff), rs1:x21(0xffdfffffffffffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(xperm.b, x11, x21, x6, 0xffffffffffffffff, 0xffdfffffffffffff, 0x0, x1, 24, x2)

xperm_b_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffffff), rs1:x20(0xffbfffffffffffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(xperm.b, x12, x20, x5, 0xffffffffffffffff, 0xffbfffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x5,signature_53_0)


xperm_b_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffffff), rs1:x19(0xff7fffffffffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(xperm.b, x13, x19, x4, 0xffffffffffffffff, 0xff7fffffffffffff, 0x0, x5, 0, x6)

xperm_b_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0xfeffffffffffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(xperm.b, x14, x18, x3, 0xffffffffffffffff, 0xfeffffffffffffff, 0x0, x5, 8, x6)

xperm_b_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0xfdffffffffffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(xperm.b, x15, x17, x2, 0xffffffffffffffff, 0xfdffffffffffffff, 0x0, x5, 16, x6)

xperm_b_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xfbffffffffffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(xperm.b, x16, x16, x1, 0xffffffffffffffff, 0xfbffffffffffffff, 0x0, x5, 24, x6)

xperm_b_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffffffff), rs1:x15(0xf7ffffffffffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(xperm.b, x17, x15, x31, 0xffffffffffffffff, 0xf7ffffffffffffff, 0x0, x5, 32, x6)

    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_54_0)


xperm_b_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffff), rs1:x14(0xefffffffffffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(xperm.b, x18, x14, x30, 0xffffffffffffffff, 0xefffffffffffffff, 0x0, x1, 0, x2)

xperm_b_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffff), rs1:x13(0xdfffffffffffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(xperm.b, x19, x13, x29, 0xffffffffffffffff, 0xdfffffffffffffff, 0x0, x1, 8, x2)

xperm_b_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffff), rs1:x12(0xbfffffffffffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(xperm.b, x20, x12, x28, 0xffffffffffffffff, 0xbfffffffffffffff, 0x0, x1, 16, x2)

xperm_b_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0x7fffffffffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(xperm.b, x21, x11, x27, 0xffffffffffffffff, 0x7fffffffffffffff, 0x0, x1, 24, x2)

xperm_b_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xffffffffffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(xperm.b, x22, x10, x26, 0xffffffffffffffff, 0xffffffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.b)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.b)

	RVTEST_SIGBASE(x1,signature_55_0)


xperm_b_01_inst_270:
    // Test 270:  Test with rs1 == rs2
    // result rd:x23(0x0000000000000000), rs1:x25(0x10fd3dedadea5195), rs2:x25(0xdf7f3844121bcc23)
    TEST_RR_OP(xperm.b, x23, x25, x25, 0x0000000000000000, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x1, 0, x2)

xperm_b_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1), rs2:x24(0xf5adb41aa47d105b)
    TEST_RR_OP(xperm.b, x0, x8, x24, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x1, 8, x2)

xperm_b_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0xbbbbbbbbbbbbbbbb), rs1:x7(0xc9649f05a8e1a8bb), rs2:x0(0x82f6747f707af2c0)
    TEST_RR_OP(xperm.b, x25, x7, x0, 0xbbbbbbbbbbbbbbbb, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x1, 16, x2)

xperm_b_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb), rs2:x22(0x73a92fd4e19bfbc3)
    TEST_RR_OP(xperm.b, x26, x0, x22, 0x0000000000000000, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x1, 24, x2)
	
#endif


RVTEST_CODE_END xperm_b_01_code_end
RVTEST_CODE_BEGIN rev8_01_init rev8_01_code_begin






#ifdef TEST_CASE_1


    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x6,signature_1_0)

 
rev8_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x9551eaaded3dfd10), rs1:x31(0x10fd3dedadea5195)
    li  x31, 0x10fd3dedadea5195
    rev8 x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x9551eaaded3dfd10)
 
rev8_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0xc1beffd2e25c29bd), rs1:x30(0xbd295ce2d2ffbec1)
    li  x30, 0xbd295ce2d2ffbec1
    rev8 x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0xc1beffd2e25c29bd)
 
rev8_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0xbba8e1a8059f64c9), rs1:x29(0xc9649f05a8e1a8bb)
    li  x29, 0xc9649f05a8e1a8bb
    rev8 x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0xbba8e1a8059f64c9)
 
rev8_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0xcb9fc94818294135), rs1:x28(0x3541291848c99fcb)
    li  x28, 0x3541291848c99fcb
    rev8 x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0xcb9fc94818294135)
 
rev8_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x4f521d464047a210), rs1:x27(0x10a24740461d524f)
    li  x27, 0x10a24740461d524f
    rev8 x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x4f521d464047a210)


    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_2_0)

 
rev8_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0xaf108a52540e6b54), rs1:x26(0x546b0e54528a10af)
    li  x26, 0x546b0e54528a10af
    rev8 x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xaf108a52540e6b54)
 
rev8_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0xc3fb9be1d42fa973), rs1:x25(0x73a92fd4e19bfbc3)
    li  x25, 0x73a92fd4e19bfbc3
    rev8 x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xc3fb9be1d42fa973)
 
rev8_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0xc0f27a707f74f682), rs1:x24(0x82f6747f707af2c0)
    li  x24, 0x82f6747f707af2c0
    rev8 x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xc0f27a707f74f682)
 
rev8_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0x5b107da41ab4adf5), rs1:x23(0xf5adb41aa47d105b)
    li  x23, 0xf5adb41aa47d105b
    rev8 x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x5b107da41ab4adf5)
 
rev8_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0x23cc1b1244387fdf), rs1:x22(0xdf7f3844121bcc23)
    li  x22, 0xdf7f3844121bcc23
    rev8 x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x23cc1b1244387fdf)


    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_3_0)

 
rev8_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x0100000000000000), rs1:x21(0x0000000000000001)
    li  x21, 0x1
    rev8 x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x0100000000000000)
 
rev8_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x0200000000000000), rs1:x20(0x0000000000000002)
    li  x20, 0x2
    rev8 x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0200000000000000)
 
rev8_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x0400000000000000), rs1:x19(0x0000000000000004)
    li  x19, 0x4
    rev8 x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0400000000000000)
 
rev8_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0800000000000000), rs1:x18(0x0000000000000008)
    li  x18, 0x8
    rev8 x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0800000000000000)
 
rev8_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x1000000000000000), rs1:x17(0x0000000000000010)
    li  x17, 0x10
    rev8 x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x1000000000000000)


    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x2,signature_4_0)

 
rev8_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x2000000000000000), rs1:x16(0x0000000000000020)
    li  x16, 0x20
    rev8 x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x2000000000000000)
 
rev8_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x4000000000000000), rs1:x15(0x0000000000000040)
    li  x15, 0x40
    rev8 x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x4000000000000000)
 
rev8_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x8000000000000000), rs1:x14(0x0000000000000080)
    li  x14, 0x80
    rev8 x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x8000000000000000)
 
rev8_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0001000000000000), rs1:x13(0x0000000000000100)
    li  x13, 0x100
    rev8 x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0001000000000000)
 
rev8_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0002000000000000), rs1:x12(0x0000000000000200)
    li  x12, 0x200
    rev8 x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0002000000000000)


    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_5_0)

 
rev8_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x0004000000000000), rs1:x11(0x0000000000000400)
    li  x11, 0x400
    rev8 x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0004000000000000)
 
rev8_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0008000000000000), rs1:x10(0x0000000000000800)
    li  x10, 0x800
    rev8 x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0008000000000000)
 
rev8_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x0010000000000000), rs1:x9(0x0000000000001000)
    li  x9, 0x1000
    rev8 x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0010000000000000)
 
rev8_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0020000000000000), rs1:x8(0x0000000000002000)
    li  x8, 0x2000
    rev8 x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0020000000000000)
 
rev8_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x0040000000000000), rs1:x7(0x0000000000004000)
    li  x7, 0x4000
    rev8 x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0040000000000000)


    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_6_0)

 
rev8_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x0080000000000000), rs1:x6(0x0000000000008000)
    li  x6, 0x8000
    rev8 x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x0080000000000000)
 
rev8_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x0000010000000000), rs1:x5(0x0000000000010000)
    li  x5, 0x10000
    rev8 x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000010000000000)
 
rev8_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x0000020000000000), rs1:x4(0x0000000000020000)
    li  x4, 0x20000
    rev8 x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000020000000000)
 
rev8_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0000040000000000), rs1:x3(0x0000000000040000)
    li  x3, 0x40000
    rev8 x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000040000000000)
 
rev8_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0000080000000000), rs1:x2(0x0000000000080000)
    li  x2, 0x80000
    rev8 x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000080000000000)


    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x5,signature_7_0)

 
rev8_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0000100000000000), rs1:x1(0x0000000000100000)
    li  x1, 0x100000
    rev8 x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0000100000000000)
 
rev8_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0000200000000000), rs1:x31(0x0000000000200000)
    li  x31, 0x200000
    rev8 x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0000200000000000)
 
rev8_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0000400000000000), rs1:x30(0x0000000000400000)
    li  x30, 0x400000
    rev8 x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0000400000000000)
 
rev8_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0000800000000000), rs1:x29(0x0000000000800000)
    li  x29, 0x800000
    rev8 x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0000800000000000)
 
rev8_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x0000000100000000), rs1:x28(0x0000000001000000)
    li  x28, 0x1000000
    rev8 x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0000000100000000)


    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_8_0)

 
rev8_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x0000000200000000), rs1:x27(0x0000000002000000)
    li  x27, 0x2000000
    rev8 x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000200000000)
 
rev8_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x0000000400000000), rs1:x26(0x0000000004000000)
    li  x26, 0x4000000
    rev8 x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000400000000)
 
rev8_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0000000800000000), rs1:x25(0x0000000008000000)
    li  x25, 0x8000000
    rev8 x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000800000000)
 
rev8_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0000001000000000), rs1:x24(0x0000000010000000)
    li  x24, 0x10000000
    rev8 x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000001000000000)
 
rev8_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0000002000000000), rs1:x23(0x0000000020000000)
    li  x23, 0x20000000
    rev8 x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000002000000000)


    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_9_0)

 
rev8_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x0000004000000000), rs1:x22(0x0000000040000000)
    li  x22, 0x40000000
    rev8 x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000004000000000)
 
rev8_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0000008000000000), rs1:x21(0x0000000080000000)
    li  x21, 0x80000000
    rev8 x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000008000000000)
 
rev8_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0000000001000000), rs1:x20(0x0000000100000000)
    li  x20, 0x100000000
    rev8 x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000001000000)
 
rev8_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x0000000002000000), rs1:x19(0x0000000200000000)
    li  x19, 0x200000000
    rev8 x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000002000000)
 
rev8_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x0000000004000000), rs1:x18(0x0000000400000000)
    li  x18, 0x400000000
    rev8 x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x0000000004000000)


    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x3,signature_10_0)

 
rev8_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x0000000008000000), rs1:x17(0x0000000800000000)
    li  x17, 0x800000000
    rev8 x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x0000000008000000)
 
rev8_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0000000010000000), rs1:x16(0x0000001000000000)
    li  x16, 0x1000000000
    rev8 x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0000000010000000)
 
rev8_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0000000020000000), rs1:x15(0x0000002000000000)
    li  x15, 0x2000000000
    rev8 x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x0000000020000000)
 
rev8_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x0000000040000000), rs1:x14(0x0000004000000000)
    li  x14, 0x4000000000
    rev8 x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x0000000040000000)
 
rev8_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000000080000000), rs1:x13(0x0000008000000000)
    li  x13, 0x8000000000
    rev8 x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000000080000000)


    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_11_0)

 
rev8_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0000000000010000), rs1:x12(0x0000010000000000)
    li  x12, 0x10000000000
    rev8 x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0000000000010000)
 
rev8_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000000000020000), rs1:x11(0x0000020000000000)
    li  x11, 0x20000000000
    rev8 x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000000020000)
 
rev8_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000000000040000), rs1:x10(0x0000040000000000)
    li  x10, 0x40000000000
    rev8 x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000000040000)
 
rev8_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000000000080000), rs1:x9(0x0000080000000000)
    li  x9, 0x80000000000
    rev8 x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000000080000)
 
rev8_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000000000100000), rs1:x8(0x0000100000000000)
    li  x8, 0x100000000000
    rev8 x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000000100000)


    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_12_0)

 
rev8_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0000000000200000), rs1:x7(0x0000200000000000)
    li  x7, 0x200000000000
    rev8 x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000000200000)
 
rev8_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x0000000000400000), rs1:x6(0x0000400000000000)
    li  x6, 0x400000000000
    rev8 x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000400000)
 
rev8_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0000000000800000), rs1:x5(0x0000800000000000)
    li  x5, 0x800000000000
    rev8 x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x0000000000800000)
 
rev8_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000100), rs1:x4(0x0001000000000000)
    li  x4, 0x1000000000000
    rev8 x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x0000000000000100)
 
rev8_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000200), rs1:x3(0x0002000000000000)
    li  x3, 0x2000000000000
    rev8 x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x0000000000000200)


    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x4,signature_13_0)

 
rev8_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000400), rs1:x2(0x0004000000000000)
    li  x2, 0x4000000000000
    rev8 x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x0000000000000400)
 
rev8_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000800), rs1:x1(0x0008000000000000)
    li  x1, 0x8000000000000
    rev8 x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x0000000000000800)
 
rev8_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0000000000001000), rs1:x31(0x0010000000000000)
    li  x31, 0x10000000000000
    rev8 x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x0000000000001000)
 
rev8_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0000000000002000), rs1:x30(0x0020000000000000)
    li  x30, 0x20000000000000
    rev8 x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x0000000000002000)
 
rev8_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0000000000004000), rs1:x29(0x0040000000000000)
    li  x29, 0x40000000000000
    rev8 x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x0000000000004000)


    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_14_0)

 
rev8_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0000000000008000), rs1:x28(0x0080000000000000)
    li  x28, 0x80000000000000
    rev8 x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x0000000000008000)
 
rev8_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000001), rs1:x27(0x0100000000000000)
    li  x27, 0x100000000000000
    rev8 x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000000000001)
 
rev8_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000002), rs1:x26(0x0200000000000000)
    li  x26, 0x200000000000000
    rev8 x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000000002)
 
rev8_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000004), rs1:x25(0x0400000000000000)
    li  x25, 0x400000000000000
    rev8 x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000000000004)
 
rev8_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000008), rs1:x24(0x0800000000000000)
    li  x24, 0x800000000000000
    rev8 x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000000000008)


    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_15_0)

 
rev8_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000010), rs1:x23(0x1000000000000000)
    li  x23, 0x1000000000000000
    rev8 x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000000010)
 
rev8_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000020), rs1:x22(0x2000000000000000)
    li  x22, 0x2000000000000000
    rev8 x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000000000020)
 
rev8_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000040), rs1:x21(0x4000000000000000)
    li  x21, 0x4000000000000000
    rev8 x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000040)
 
rev8_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000080), rs1:x20(0x8000000000000000)
    li  x20, 0x8000000000000000
    rev8 x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000000000080)
 
rev8_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000)
    li  x19, 0x0
    rev8 x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)


    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x4,signature_16_0)

 
rev8_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0xfeffffffffffffff), rs1:x18(0xfffffffffffffffe)
    li  x18, 0xfffffffffffffffe
    rev8 x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0xfeffffffffffffff)
 
rev8_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0xfdffffffffffffff), rs1:x17(0xfffffffffffffffd)
    li  x17, 0xfffffffffffffffd
    rev8 x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0xfdffffffffffffff)
 
rev8_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0xfbffffffffffffff), rs1:x16(0xfffffffffffffffb)
    li  x16, 0xfffffffffffffffb
    rev8 x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0xfbffffffffffffff)
 
rev8_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0xf7ffffffffffffff), rs1:x15(0xfffffffffffffff7)
    li  x15, 0xfffffffffffffff7
    rev8 x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0xf7ffffffffffffff)
 
rev8_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0xefffffffffffffff), rs1:x14(0xffffffffffffffef)
    li  x14, 0xffffffffffffffef
    rev8 x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0xefffffffffffffff)


    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_17_0)

 
rev8_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0xdfffffffffffffff), rs1:x13(0xffffffffffffffdf)
    li  x13, 0xffffffffffffffdf
    rev8 x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0xdfffffffffffffff)
 
rev8_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0xbfffffffffffffff), rs1:x12(0xffffffffffffffbf)
    li  x12, 0xffffffffffffffbf
    rev8 x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xbfffffffffffffff)
 
rev8_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0x7fffffffffffffff), rs1:x11(0xffffffffffffff7f)
    li  x11, 0xffffffffffffff7f
    rev8 x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x7fffffffffffffff)
 
rev8_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0xfffeffffffffffff), rs1:x10(0xfffffffffffffeff)
    li  x10, 0xfffffffffffffeff
    rev8 x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xfffeffffffffffff)
 
rev8_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0xfffdffffffffffff), rs1:x9(0xfffffffffffffdff)
    li  x9, 0xfffffffffffffdff
    rev8 x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xfffdffffffffffff)


    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_18_0)

 
rev8_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0xfffbffffffffffff), rs1:x8(0xfffffffffffffbff)
    li  x8, 0xfffffffffffffbff
    rev8 x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xfffbffffffffffff)
 
rev8_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0xfff7ffffffffffff), rs1:x7(0xfffffffffffff7ff)
    li  x7, 0xfffffffffffff7ff
    rev8 x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xfff7ffffffffffff)
 
rev8_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0xffefffffffffffff), rs1:x6(0xffffffffffffefff)
    li  x6, 0xffffffffffffefff
    rev8 x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0xffefffffffffffff)
 
rev8_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0xffdfffffffffffff), rs1:x5(0xffffffffffffdfff)
    li  x5, 0xffffffffffffdfff
    rev8 x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0xffdfffffffffffff)
 
rev8_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0xffbfffffffffffff), rs1:x4(0xffffffffffffbfff)
    li  x4, 0xffffffffffffbfff
    rev8 x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0xffbfffffffffffff)


    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x4,signature_19_0)

 
rev8_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0xff7fffffffffffff), rs1:x3(0xffffffffffff7fff)
    li  x3, 0xffffffffffff7fff
    rev8 x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0xff7fffffffffffff)
 
rev8_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0xfffffeffffffffff), rs1:x2(0xfffffffffffeffff)
    li  x2, 0xfffffffffffeffff
    rev8 x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0xfffffeffffffffff)
 
rev8_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0xfffffdffffffffff), rs1:x1(0xfffffffffffdffff)
    li  x1, 0xfffffffffffdffff
    rev8 x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0xfffffdffffffffff)
 
rev8_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0xfffffbffffffffff), rs1:x31(0xfffffffffffbffff)
    li  x31, 0xfffffffffffbffff
    rev8 x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0xfffffbffffffffff)
 
rev8_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0xfffff7ffffffffff), rs1:x30(0xfffffffffff7ffff)
    li  x30, 0xfffffffffff7ffff
    rev8 x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0xfffff7ffffffffff)


    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_20_0)

 
rev8_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0xffffefffffffffff), rs1:x29(0xffffffffffefffff)
    li  x29, 0xffffffffffefffff
    rev8 x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0xffffefffffffffff)
 
rev8_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0xffffdfffffffffff), rs1:x28(0xffffffffffdfffff)
    li  x28, 0xffffffffffdfffff
    rev8 x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0xffffdfffffffffff)
 
rev8_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0xffffbfffffffffff), rs1:x27(0xffffffffffbfffff)
    li  x27, 0xffffffffffbfffff
    rev8 x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0xffffbfffffffffff)
 
rev8_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0xffff7fffffffffff), rs1:x26(0xffffffffff7fffff)
    li  x26, 0xffffffffff7fffff
    rev8 x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xffff7fffffffffff)
 
rev8_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0xfffffffeffffffff), rs1:x25(0xfffffffffeffffff)
    li  x25, 0xfffffffffeffffff
    rev8 x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xfffffffeffffffff)


    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_21_0)

 
rev8_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0xfffffffdffffffff), rs1:x24(0xfffffffffdffffff)
    li  x24, 0xfffffffffdffffff
    rev8 x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xfffffffdffffffff)
 
rev8_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0xfffffffbffffffff), rs1:x23(0xfffffffffbffffff)
    li  x23, 0xfffffffffbffffff
    rev8 x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xfffffffbffffffff)
 
rev8_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0xfffffff7ffffffff), rs1:x22(0xfffffffff7ffffff)
    li  x22, 0xfffffffff7ffffff
    rev8 x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xfffffff7ffffffff)
 
rev8_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0xffffffefffffffff), rs1:x21(0xffffffffefffffff)
    li  x21, 0xffffffffefffffff
    rev8 x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xffffffefffffffff)
 
rev8_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0xffffffdfffffffff), rs1:x20(0xffffffffdfffffff)
    li  x20, 0xffffffffdfffffff
    rev8 x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0xffffffdfffffffff)


    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x5,signature_22_0)

 
rev8_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0xffffffbfffffffff), rs1:x19(0xffffffffbfffffff)
    li  x19, 0xffffffffbfffffff
    rev8 x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0xffffffbfffffffff)
 
rev8_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0xffffff7fffffffff), rs1:x18(0xffffffff7fffffff)
    li  x18, 0xffffffff7fffffff
    rev8 x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0xffffff7fffffffff)
 
rev8_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0xfffffffffeffffff), rs1:x17(0xfffffffeffffffff)
    li  x17, 0xfffffffeffffffff
    rev8 x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0xfffffffffeffffff)
 
rev8_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0xfffffffffdffffff), rs1:x16(0xfffffffdffffffff)
    li  x16, 0xfffffffdffffffff
    rev8 x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0xfffffffffdffffff)
 
rev8_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0xfffffffffbffffff), rs1:x15(0xfffffffbffffffff)
    li  x15, 0xfffffffbffffffff
    rev8 x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0xfffffffffbffffff)


    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_23_0)

 
rev8_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0xfffffffff7ffffff), rs1:x14(0xfffffff7ffffffff)
    li  x14, 0xfffffff7ffffffff
    rev8 x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0xfffffffff7ffffff)
 
rev8_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0xffffffffefffffff), rs1:x13(0xffffffefffffffff)
    li  x13, 0xffffffefffffffff
    rev8 x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0xffffffffefffffff)
 
rev8_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0xffffffffdfffffff), rs1:x12(0xffffffdfffffffff)
    li  x12, 0xffffffdfffffffff
    rev8 x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xffffffffdfffffff)
 
rev8_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0xffffffffbfffffff), rs1:x11(0xffffffbfffffffff)
    li  x11, 0xffffffbfffffffff
    rev8 x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xffffffffbfffffff)
 
rev8_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0xffffffff7fffffff), rs1:x10(0xffffff7fffffffff)
    li  x10, 0xffffff7fffffffff
    rev8 x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xffffffff7fffffff)


    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_24_0)

 
rev8_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0xfffffffffffeffff), rs1:x9(0xfffffeffffffffff)
    li  x9, 0xfffffeffffffffff
    rev8 x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xfffffffffffeffff)
 
rev8_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0xfffffffffffdffff), rs1:x8(0xfffffdffffffffff)
    li  x8, 0xfffffdffffffffff
    rev8 x24, x8
    sd x24, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xfffffffffffdffff)
 
rev8_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0xfffffffffffbffff), rs1:x7(0xfffffbffffffffff)
    li  x7, 0xfffffbffffffffff
    rev8 x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xfffffffffffbffff)
 
rev8_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0xfffffffffff7ffff), rs1:x6(0xfffff7ffffffffff)
    li  x6, 0xfffff7ffffffffff
    rev8 x26, x6
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0xfffffffffff7ffff)
 
rev8_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffefffff), rs1:x5(0xffffefffffffffff)
    li  x5, 0xffffefffffffffff
    rev8 x27, x5
    sd x27, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0xffffffffffefffff)


    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x5,signature_25_0)

 
rev8_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffdfffff), rs1:x4(0xffffdfffffffffff)
    li  x4, 0xffffdfffffffffff
    rev8 x28, x4
    sd x28, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x28, 0xffffffffffdfffff)
 
rev8_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffbfffff), rs1:x3(0xffffbfffffffffff)
    li  x3, 0xffffbfffffffffff
    rev8 x29, x3
    sd x29, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x29, 0xffffffffffbfffff)
 
rev8_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0xffffffffff7fffff), rs1:x2(0xffff7fffffffffff)
    li  x2, 0xffff7fffffffffff
    rev8 x30, x2
    sd x30, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x30, 0xffffffffff7fffff)
 
rev8_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0xfffffffffffffeff), rs1:x1(0xfffeffffffffffff)
    li  x1, 0xfffeffffffffffff
    rev8 x31, x1
    sd x31, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0xfffffffffffffeff)
 
rev8_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0xfffffffffffffdff), rs1:x31(0xfffdffffffffffff)
    li  x31, 0xfffdffffffffffff
    rev8 x1, x31
    sd x1, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0xfffffffffffffdff)


    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_26_0)

 
rev8_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0xfffffffffffffbff), rs1:x30(0xfffbffffffffffff)
    li  x30, 0xfffbffffffffffff
    rev8 x2, x30
    sd x2, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0xfffffffffffffbff)
 
rev8_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0xfffffffffffff7ff), rs1:x29(0xfff7ffffffffffff)
    li  x29, 0xfff7ffffffffffff
    rev8 x3, x29
    sd x3, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0xfffffffffffff7ff)
 
rev8_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffffefff), rs1:x28(0xffefffffffffffff)
    li  x28, 0xffefffffffffffff
    rev8 x4, x28
    sd x4, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0xffffffffffffefff)
 
rev8_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffffdfff), rs1:x27(0xffdfffffffffffff)
    li  x27, 0xffdfffffffffffff
    rev8 x5, x27
    sd x5, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0xffffffffffffdfff)
 
rev8_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffffbfff), rs1:x26(0xffbfffffffffffff)
    li  x26, 0xffbfffffffffffff
    rev8 x6, x26
    sd x6, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x6, 0xffffffffffffbfff)


    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_27_0)

 
rev8_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffff7fff), rs1:x25(0xff7fffffffffffff)
    li  x25, 0xff7fffffffffffff
    rev8 x7, x25
    sd x7, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xffffffffffff7fff)
 
rev8_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0xfffffffffffffffe), rs1:x24(0xfeffffffffffffff)
    li  x24, 0xfeffffffffffffff
    rev8 x8, x24
    sd x8, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xfffffffffffffffe)
 
rev8_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0xfffffffffffffffd), rs1:x23(0xfdffffffffffffff)
    li  x23, 0xfdffffffffffffff
    rev8 x9, x23
    sd x9, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xfffffffffffffffd)
 
rev8_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0xfffffffffffffffb), rs1:x22(0xfbffffffffffffff)
    li  x22, 0xfbffffffffffffff
    rev8 x10, x22
    sd x10, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xfffffffffffffffb)
 
rev8_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0xfffffffffffffff7), rs1:x21(0xf7ffffffffffffff)
    li  x21, 0xf7ffffffffffffff
    rev8 x11, x21
    sd x11, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xfffffffffffffff7)


    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x6,signature_28_0)

 
rev8_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffffef), rs1:x20(0xefffffffffffffff)
    li  x20, 0xefffffffffffffff
    rev8 x12, x20
    sd x12, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0xffffffffffffffef)
 
rev8_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffffdf), rs1:x19(0xdfffffffffffffff)
    li  x19, 0xdfffffffffffffff
    rev8 x13, x19
    sd x13, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0xffffffffffffffdf)
 
rev8_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffbf), rs1:x18(0xbfffffffffffffff)
    li  x18, 0xbfffffffffffffff
    rev8 x14, x18
    sd x14, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0xffffffffffffffbf)
 
rev8_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffff7f), rs1:x17(0x7fffffffffffffff)
    li  x17, 0x7fffffffffffffff
    rev8 x15, x17
    sd x15, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0xffffffffffffff7f)
 
rev8_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xffffffffffffffff)
    li  x16, 0xffffffffffffffff
    rev8 x16, x16
    sd x16, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x16, 0xffffffffffffffff)


    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_29_0)

 
rev8_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0100000000000000), rs1:x15(0x0000000000000001)
    li  x15, 0x1
    rev8 x17, x15
    sd x17, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x17, 0x0100000000000000)
 
rev8_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0200000000000000), rs1:x14(0x0000000000000002)
    li  x14, 0x2
    rev8 x18, x14
    sd x18, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x0200000000000000)
 
rev8_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0400000000000000), rs1:x13(0x0000000000000004)
    li  x13, 0x4
    rev8 x19, x13
    sd x19, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x0400000000000000)
 
rev8_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0800000000000000), rs1:x12(0x0000000000000008)
    li  x12, 0x8
    rev8 x20, x12
    sd x20, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0800000000000000)
 
rev8_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x1000000000000000), rs1:x11(0x0000000000000010)
    li  x11, 0x10
    rev8 x21, x11
    sd x21, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x1000000000000000)


    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_30_0)

 
rev8_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x2000000000000000), rs1:x10(0x0000000000000020)
    li  x10, 0x20
    rev8 x22, x10
    sd x22, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x2000000000000000)
 
rev8_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x4000000000000000), rs1:x9(0x0000000000000040)
    li  x9, 0x40
    rev8 x23, x9
    sd x23, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x4000000000000000)
 
rev8_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x8000000000000000), rs1:x8(0x0000000000000080)
    li  x8, 0x80
    rev8 x24, x8
    sd x24, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x8000000000000000)
 
rev8_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0001000000000000), rs1:x7(0x0000000000000100)
    li  x7, 0x100
    rev8 x25, x7
    sd x25, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0001000000000000)
 
rev8_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0002000000000000), rs1:x6(0x0000000000000200)
    li  x6, 0x200
    rev8 x26, x6
    sd x26, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0002000000000000)


    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x6,signature_31_0)

 
rev8_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0004000000000000), rs1:x5(0x0000000000000400)
    li  x5, 0x400
    rev8 x27, x5
    sd x27, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0004000000000000)
 
rev8_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0008000000000000), rs1:x4(0x0000000000000800)
    li  x4, 0x800
    rev8 x28, x4
    sd x28, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0008000000000000)
 
rev8_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0010000000000000), rs1:x3(0x0000000000001000)
    li  x3, 0x1000
    rev8 x29, x3
    sd x29, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0010000000000000)
 
rev8_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0020000000000000), rs1:x2(0x0000000000002000)
    li  x2, 0x2000
    rev8 x30, x2
    sd x30, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0020000000000000)
 
rev8_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0040000000000000), rs1:x1(0x0000000000004000)
    li  x1, 0x4000
    rev8 x31, x1
    sd x31, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x0040000000000000)


    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x6,signature_32_0)

 
rev8_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0080000000000000), rs1:x31(0x0000000000008000)
    li  x31, 0x8000
    rev8 x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x0080000000000000)
 
rev8_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000010000000000), rs1:x30(0x0000000000010000)
    li  x30, 0x10000
    rev8 x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x0000010000000000)
 
rev8_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000020000000000), rs1:x29(0x0000000000020000)
    li  x29, 0x20000
    rev8 x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x0000020000000000)
 
rev8_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000040000000000), rs1:x28(0x0000000000040000)
    li  x28, 0x40000
    rev8 x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x0000040000000000)
 
rev8_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000080000000000), rs1:x27(0x0000000000080000)
    li  x27, 0x80000
    rev8 x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x0000080000000000)


    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_33_0)

 
rev8_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000100000000000), rs1:x26(0x0000000000100000)
    li  x26, 0x100000
    rev8 x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000100000000000)
 
rev8_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000200000000000), rs1:x25(0x0000000000200000)
    li  x25, 0x200000
    rev8 x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000200000000000)
 
rev8_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000400000000000), rs1:x24(0x0000000000400000)
    li  x24, 0x400000
    rev8 x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000400000000000)
 
rev8_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000800000000000), rs1:x23(0x0000000000800000)
    li  x23, 0x800000
    rev8 x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000800000000000)
 
rev8_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000100000000), rs1:x22(0x0000000001000000)
    li  x22, 0x1000000
    rev8 x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000100000000)


    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_34_0)

 
rev8_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000200000000), rs1:x21(0x0000000002000000)
    li  x21, 0x2000000
    rev8 x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x0000000200000000)
 
rev8_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000400000000), rs1:x20(0x0000000004000000)
    li  x20, 0x4000000
    rev8 x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0000000400000000)
 
rev8_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000800000000), rs1:x19(0x0000000008000000)
    li  x19, 0x8000000
    rev8 x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0000000800000000)
 
rev8_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000001000000000), rs1:x18(0x0000000010000000)
    li  x18, 0x10000000
    rev8 x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0000001000000000)
 
rev8_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000002000000000), rs1:x17(0x0000000020000000)
    li  x17, 0x20000000
    rev8 x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0000002000000000)


    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x2,signature_35_0)

 
rev8_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000004000000000), rs1:x16(0x0000000040000000)
    li  x16, 0x40000000
    rev8 x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0000004000000000)
 
rev8_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000008000000000), rs1:x15(0x0000000080000000)
    li  x15, 0x80000000
    rev8 x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x0000008000000000)
 
rev8_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000001000000), rs1:x14(0x0000000100000000)
    li  x14, 0x100000000
    rev8 x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x0000000001000000)
 
rev8_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000002000000), rs1:x13(0x0000000200000000)
    li  x13, 0x200000000
    rev8 x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0000000002000000)
 
rev8_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000000004000000), rs1:x12(0x0000000400000000)
    li  x12, 0x400000000
    rev8 x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0000000004000000)


    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_36_0)

 
rev8_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000008000000), rs1:x11(0x0000000800000000)
    li  x11, 0x800000000
    rev8 x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000008000000)
 
rev8_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000000010000000), rs1:x10(0x0000001000000000)
    li  x10, 0x1000000000
    rev8 x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000010000000)
 
rev8_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000000020000000), rs1:x9(0x0000002000000000)
    li  x9, 0x2000000000
    rev8 x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000020000000)
 
rev8_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000000040000000), rs1:x8(0x0000004000000000)
    li  x8, 0x4000000000
    rev8 x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000040000000)
 
rev8_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000000080000000), rs1:x7(0x0000008000000000)
    li  x7, 0x8000000000
    rev8 x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000080000000)


    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_37_0)

 
rev8_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000000000010000), rs1:x6(0x0000010000000000)
    li  x6, 0x10000000000
    rev8 x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x0000000000010000)
 
rev8_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000000000020000), rs1:x5(0x0000020000000000)
    li  x5, 0x20000000000
    rev8 x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000000020000)
 
rev8_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000000000040000), rs1:x4(0x0000040000000000)
    li  x4, 0x40000000000
    rev8 x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000000040000)
 
rev8_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000000000080000), rs1:x3(0x0000080000000000)
    li  x3, 0x80000000000
    rev8 x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000000080000)
 
rev8_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000000000100000), rs1:x2(0x0000100000000000)
    li  x2, 0x100000000000
    rev8 x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000000100000)


    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x5,signature_38_0)

 
rev8_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000000000200000), rs1:x1(0x0000200000000000)
    li  x1, 0x200000000000
    rev8 x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0000000000200000)
 
rev8_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000000000400000), rs1:x31(0x0000400000000000)
    li  x31, 0x400000000000
    rev8 x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0000000000400000)
 
rev8_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000000000800000), rs1:x30(0x0000800000000000)
    li  x30, 0x800000000000
    rev8 x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0000000000800000)
 
rev8_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000100), rs1:x29(0x0001000000000000)
    li  x29, 0x1000000000000
    rev8 x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0000000000000100)
 
rev8_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000200), rs1:x28(0x0002000000000000)
    li  x28, 0x2000000000000
    rev8 x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0000000000000200)


    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_39_0)

 
rev8_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000400), rs1:x27(0x0004000000000000)
    li  x27, 0x4000000000000
    rev8 x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000000000400)
 
rev8_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000800), rs1:x26(0x0008000000000000)
    li  x26, 0x8000000000000
    rev8 x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000000800)
 
rev8_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0000000000001000), rs1:x25(0x0010000000000000)
    li  x25, 0x10000000000000
    rev8 x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000000001000)
 
rev8_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0000000000002000), rs1:x24(0x0020000000000000)
    li  x24, 0x20000000000000
    rev8 x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000000002000)
 
rev8_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0000000000004000), rs1:x23(0x0040000000000000)
    li  x23, 0x40000000000000
    rev8 x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000004000)


    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_40_0)

 
rev8_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0000000000008000), rs1:x22(0x0080000000000000)
    li  x22, 0x80000000000000
    rev8 x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000000008000)
 
rev8_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000001), rs1:x21(0x0100000000000000)
    li  x21, 0x100000000000000
    rev8 x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000001)
 
rev8_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000002), rs1:x20(0x0200000000000000)
    li  x20, 0x200000000000000
    rev8 x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000000000002)
 
rev8_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000004), rs1:x19(0x0400000000000000)
    li  x19, 0x400000000000000
    rev8 x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000004)
 
rev8_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000008), rs1:x18(0x0800000000000000)
    li  x18, 0x800000000000000
    rev8 x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x0000000000000008)


    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x3,signature_41_0)

 
rev8_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000010), rs1:x17(0x1000000000000000)
    li  x17, 0x1000000000000000
    rev8 x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x0000000000000010)
 
rev8_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000020), rs1:x16(0x2000000000000000)
    li  x16, 0x2000000000000000
    rev8 x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0000000000000020)
 
rev8_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000040), rs1:x15(0x4000000000000000)
    li  x15, 0x4000000000000000
    rev8 x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x0000000000000040)
 
rev8_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000080), rs1:x14(0x8000000000000000)
    li  x14, 0x8000000000000000
    rev8 x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x0000000000000080)
 
rev8_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000)
    li  x13, 0x0
    rev8 x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000000000000000)


    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_42_0)

 
rev8_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0xfeffffffffffffff), rs1:x12(0xfffffffffffffffe)
    li  x12, 0xfffffffffffffffe
    rev8 x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xfeffffffffffffff)
 
rev8_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0xfdffffffffffffff), rs1:x11(0xfffffffffffffffd)
    li  x11, 0xfffffffffffffffd
    rev8 x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xfdffffffffffffff)
 
rev8_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0xfbffffffffffffff), rs1:x10(0xfffffffffffffffb)
    li  x10, 0xfffffffffffffffb
    rev8 x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xfbffffffffffffff)
 
rev8_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0xf7ffffffffffffff), rs1:x9(0xfffffffffffffff7)
    li  x9, 0xfffffffffffffff7
    rev8 x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xf7ffffffffffffff)
 
rev8_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0xefffffffffffffff), rs1:x8(0xffffffffffffffef)
    li  x8, 0xffffffffffffffef
    rev8 x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xefffffffffffffff)


    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_43_0)

 
rev8_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0xdfffffffffffffff), rs1:x7(0xffffffffffffffdf)
    li  x7, 0xffffffffffffffdf
    rev8 x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xdfffffffffffffff)
 
rev8_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0xbfffffffffffffff), rs1:x6(0xffffffffffffffbf)
    li  x6, 0xffffffffffffffbf
    rev8 x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0xbfffffffffffffff)
 
rev8_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0x7fffffffffffffff), rs1:x5(0xffffffffffffff7f)
    li  x5, 0xffffffffffffff7f
    rev8 x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x7fffffffffffffff)
 
rev8_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0xfffeffffffffffff), rs1:x4(0xfffffffffffffeff)
    li  x4, 0xfffffffffffffeff
    rev8 x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0xfffeffffffffffff)
 
rev8_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0xfffdffffffffffff), rs1:x3(0xfffffffffffffdff)
    li  x3, 0xfffffffffffffdff
    rev8 x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0xfffdffffffffffff)


    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x4,signature_44_0)

 
rev8_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0xfffbffffffffffff), rs1:x2(0xfffffffffffffbff)
    li  x2, 0xfffffffffffffbff
    rev8 x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0xfffbffffffffffff)
 
rev8_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0xfff7ffffffffffff), rs1:x1(0xfffffffffffff7ff)
    li  x1, 0xfffffffffffff7ff
    rev8 x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0xfff7ffffffffffff)
 
rev8_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0xffefffffffffffff), rs1:x31(0xffffffffffffefff)
    li  x31, 0xffffffffffffefff
    rev8 x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0xffefffffffffffff)
 
rev8_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0xffdfffffffffffff), rs1:x30(0xffffffffffffdfff)
    li  x30, 0xffffffffffffdfff
    rev8 x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0xffdfffffffffffff)
 
rev8_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0xffbfffffffffffff), rs1:x29(0xffffffffffffbfff)
    li  x29, 0xffffffffffffbfff
    rev8 x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0xffbfffffffffffff)


    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_45_0)

 
rev8_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0xff7fffffffffffff), rs1:x28(0xffffffffffff7fff)
    li  x28, 0xffffffffffff7fff
    rev8 x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0xff7fffffffffffff)
 
rev8_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0xfffffeffffffffff), rs1:x27(0xfffffffffffeffff)
    li  x27, 0xfffffffffffeffff
    rev8 x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0xfffffeffffffffff)
 
rev8_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0xfffffdffffffffff), rs1:x26(0xfffffffffffdffff)
    li  x26, 0xfffffffffffdffff
    rev8 x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xfffffdffffffffff)
 
rev8_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0xfffffbffffffffff), rs1:x25(0xfffffffffffbffff)
    li  x25, 0xfffffffffffbffff
    rev8 x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xfffffbffffffffff)
 
rev8_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0xfffff7ffffffffff), rs1:x24(0xfffffffffff7ffff)
    li  x24, 0xfffffffffff7ffff
    rev8 x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xfffff7ffffffffff)


    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_46_0)

 
rev8_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0xffffefffffffffff), rs1:x23(0xffffffffffefffff)
    li  x23, 0xffffffffffefffff
    rev8 x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xffffefffffffffff)
 
rev8_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0xffffdfffffffffff), rs1:x22(0xffffffffffdfffff)
    li  x22, 0xffffffffffdfffff
    rev8 x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xffffdfffffffffff)
 
rev8_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0xffffbfffffffffff), rs1:x21(0xffffffffffbfffff)
    li  x21, 0xffffffffffbfffff
    rev8 x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xffffbfffffffffff)
 
rev8_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0xffff7fffffffffff), rs1:x20(0xffffffffff7fffff)
    li  x20, 0xffffffffff7fffff
    rev8 x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0xffff7fffffffffff)
 
rev8_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0xfffffffeffffffff), rs1:x19(0xfffffffffeffffff)
    li  x19, 0xfffffffffeffffff
    rev8 x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0xfffffffeffffffff)


    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x4,signature_47_0)

 
rev8_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0xfffffffdffffffff), rs1:x18(0xfffffffffdffffff)
    li  x18, 0xfffffffffdffffff
    rev8 x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0xfffffffdffffffff)
 
rev8_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0xfffffffbffffffff), rs1:x17(0xfffffffffbffffff)
    li  x17, 0xfffffffffbffffff
    rev8 x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0xfffffffbffffffff)
 
rev8_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0xfffffff7ffffffff), rs1:x16(0xfffffffff7ffffff)
    li  x16, 0xfffffffff7ffffff
    rev8 x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0xfffffff7ffffffff)
 
rev8_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0xffffffefffffffff), rs1:x15(0xffffffffefffffff)
    li  x15, 0xffffffffefffffff
    rev8 x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0xffffffefffffffff)
 
rev8_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0xffffffdfffffffff), rs1:x14(0xffffffffdfffffff)
    li  x14, 0xffffffffdfffffff
    rev8 x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0xffffffdfffffffff)


    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_48_0)

 
rev8_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0xffffffbfffffffff), rs1:x13(0xffffffffbfffffff)
    li  x13, 0xffffffffbfffffff
    rev8 x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0xffffffbfffffffff)
 
rev8_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0xffffff7fffffffff), rs1:x12(0xffffffff7fffffff)
    li  x12, 0xffffffff7fffffff
    rev8 x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xffffff7fffffffff)
 
rev8_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0xfffffffffeffffff), rs1:x11(0xfffffffeffffffff)
    li  x11, 0xfffffffeffffffff
    rev8 x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xfffffffffeffffff)
 
rev8_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0xfffffffffdffffff), rs1:x10(0xfffffffdffffffff)
    li  x10, 0xfffffffdffffffff
    rev8 x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xfffffffffdffffff)
 
rev8_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0xfffffffffbffffff), rs1:x9(0xfffffffbffffffff)
    li  x9, 0xfffffffbffffffff
    rev8 x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xfffffffffbffffff)


    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_49_0)

 
rev8_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0xfffffffff7ffffff), rs1:x8(0xfffffff7ffffffff)
    li  x8, 0xfffffff7ffffffff
    rev8 x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xfffffffff7ffffff)
 
rev8_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0xffffffffefffffff), rs1:x7(0xffffffefffffffff)
    li  x7, 0xffffffefffffffff
    rev8 x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xffffffffefffffff)
 
rev8_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0xffffffffdfffffff), rs1:x6(0xffffffdfffffffff)
    li  x6, 0xffffffdfffffffff
    rev8 x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0xffffffffdfffffff)
 
rev8_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0xffffffffbfffffff), rs1:x5(0xffffffbfffffffff)
    li  x5, 0xffffffbfffffffff
    rev8 x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0xffffffffbfffffff)
 
rev8_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0xffffffff7fffffff), rs1:x4(0xffffff7fffffffff)
    li  x4, 0xffffff7fffffffff
    rev8 x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0xffffffff7fffffff)


    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x4,signature_50_0)

 
rev8_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0xfffffffffffeffff), rs1:x3(0xfffffeffffffffff)
    li  x3, 0xfffffeffffffffff
    rev8 x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0xfffffffffffeffff)
 
rev8_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0xfffffffffffdffff), rs1:x2(0xfffffdffffffffff)
    li  x2, 0xfffffdffffffffff
    rev8 x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0xfffffffffffdffff)
 
rev8_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0xfffffffffffbffff), rs1:x1(0xfffffbffffffffff)
    li  x1, 0xfffffbffffffffff
    rev8 x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0xfffffffffffbffff)
 
rev8_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0xfffffffffff7ffff), rs1:x31(0xfffff7ffffffffff)
    li  x31, 0xfffff7ffffffffff
    rev8 x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0xfffffffffff7ffff)
 
rev8_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffefffff), rs1:x30(0xffffefffffffffff)
    li  x30, 0xffffefffffffffff
    rev8 x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0xffffffffffefffff)


    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_51_0)

 
rev8_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffdfffff), rs1:x29(0xffffdfffffffffff)
    li  x29, 0xffffdfffffffffff
    rev8 x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0xffffffffffdfffff)
 
rev8_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffbfffff), rs1:x28(0xffffbfffffffffff)
    li  x28, 0xffffbfffffffffff
    rev8 x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0xffffffffffbfffff)
 
rev8_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0xffffffffff7fffff), rs1:x27(0xffff7fffffffffff)
    li  x27, 0xffff7fffffffffff
    rev8 x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0xffffffffff7fffff)
 
rev8_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0xfffffffffffffeff), rs1:x26(0xfffeffffffffffff)
    li  x26, 0xfffeffffffffffff
    rev8 x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xfffffffffffffeff)
 
rev8_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0xfffffffffffffdff), rs1:x25(0xfffdffffffffffff)
    li  x25, 0xfffdffffffffffff
    rev8 x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xfffffffffffffdff)


    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_52_0)

 
rev8_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0xfffffffffffffbff), rs1:x24(0xfffbffffffffffff)
    li  x24, 0xfffbffffffffffff
    rev8 x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xfffffffffffffbff)
 
rev8_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0xfffffffffffff7ff), rs1:x23(0xfff7ffffffffffff)
    li  x23, 0xfff7ffffffffffff
    rev8 x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xfffffffffffff7ff)
 
rev8_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffffefff), rs1:x22(0xffefffffffffffff)
    li  x22, 0xffefffffffffffff
    rev8 x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xffffffffffffefff)
 
rev8_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffdfff), rs1:x21(0xffdfffffffffffff)
    li  x21, 0xffdfffffffffffff
    rev8 x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xffffffffffffdfff)
 
rev8_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffbfff), rs1:x20(0xffbfffffffffffff)
    li  x20, 0xffbfffffffffffff
    rev8 x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0xffffffffffffbfff)


    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x5,signature_53_0)

 
rev8_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffff7fff), rs1:x19(0xff7fffffffffffff)
    li  x19, 0xff7fffffffffffff
    rev8 x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0xffffffffffff7fff)
 
rev8_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0xfffffffffffffffe), rs1:x18(0xfeffffffffffffff)
    li  x18, 0xfeffffffffffffff
    rev8 x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0xfffffffffffffffe)
 
rev8_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0xfffffffffffffffd), rs1:x17(0xfdffffffffffffff)
    li  x17, 0xfdffffffffffffff
    rev8 x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0xfffffffffffffffd)
 
rev8_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0xfffffffffffffffb), rs1:x16(0xfbffffffffffffff)
    li  x16, 0xfbffffffffffffff
    rev8 x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0xfffffffffffffffb)
 
rev8_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0xfffffffffffffff7), rs1:x15(0xf7ffffffffffffff)
    li  x15, 0xf7ffffffffffffff
    rev8 x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0xfffffffffffffff7)


    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_54_0)

 
rev8_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffef), rs1:x14(0xefffffffffffffff)
    li  x14, 0xefffffffffffffff
    rev8 x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0xffffffffffffffef)
 
rev8_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffdf), rs1:x13(0xdfffffffffffffff)
    li  x13, 0xdfffffffffffffff
    rev8 x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0xffffffffffffffdf)
 
rev8_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffbf), rs1:x12(0xbfffffffffffffff)
    li  x12, 0xbfffffffffffffff
    rev8 x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xffffffffffffffbf)
 
rev8_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffff7f), rs1:x11(0x7fffffffffffffff)
    li  x11, 0x7fffffffffffffff
    rev8 x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xffffffffffffff7f)
 
rev8_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xffffffffffffffff)
    li  x10, 0xffffffffffffffff
    rev8 x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xffffffffffffffff)


    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

    RVTEST_SIGBASE(x1,signature_55_0)

 
rev8_01_inst_270:
    // Test 270:  Test with random values
    // result rd:x23(0x9551eaaded3dfd10), rs1:x9(0x10fd3dedadea5195)
    li  x9, 0x10fd3dedadea5195
    rev8 x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x9551eaaded3dfd10)
 
rev8_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1)
    li  x8, 0xbd295ce2d2ffbec1
    rev8 x0, x8
    sd x0, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x0, 0x0000000000000000)
 
rev8_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0xbba8e1a8059f64c9), rs1:x7(0xc9649f05a8e1a8bb)
    li  x7, 0xc9649f05a8e1a8bb
    rev8 x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xbba8e1a8059f64c9)
 
rev8_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb)
    li  x0, 0x3541291848c99fcb
    rev8 x26, x0
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000000000)
	
#endif


RVTEST_CODE_END rev8_01_code_end
RVTEST_CODE_BEGIN sha512sig0_01_init sha512sig0_01_code_begin






#ifdef TEST_CASE_1


    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x6,signature_1_0)

 
sha512sig0_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x1d4f99b0e0031638), rs1:x31(0x10fd3dedadea5195)
    li  x31, 0x10fd3dedadea5195
    sha512sig0 x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x1d4f99b0e0031638)
 
sha512sig0_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x1e53d5944e08dfa3), rs1:x30(0xbd295ce2d2ffbec1)
    li  x30, 0xbd295ce2d2ffbec1
    sha512sig0 x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x1e53d5944e08dfa3)
 
sha512sig0_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0x5ee9e223da89f6a4), rs1:x29(0xc9649f05a8e1a8bb)
    li  x29, 0xc9649f05a8e1a8bb
    sha512sig0 x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x5ee9e223da89f6a4)
 
sha512sig0_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x51ff57f70cbd9545), rs1:x28(0x3541291848c99fcb)
    li  x28, 0x3541291848c99fcb
    sha512sig0 x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x51ff57f70cbd9545)
 
sha512sig0_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0xc760c569e3c48ed1), rs1:x27(0x10a24740461d524f)
    li  x27, 0x10a24740461d524f
    sha512sig0 x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0xc760c569e3c48ed1)


    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_2_0)

 
sha512sig0_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x05c93a38d5b29666), rs1:x26(0x546b0e54528a10af)
    li  x26, 0x546b0e54528a10af
    sha512sig0 x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x05c93a38d5b29666)
 
sha512sig0_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x7a406c9a0def51ed), rs1:x25(0x73a92fd4e19bfbc3)
    li  x25, 0x73a92fd4e19bfbc3
    sha512sig0 x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x7a406c9a0def51ed)
 
sha512sig0_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x80fc20a339adf677), rs1:x24(0x82f6747f707af2c0)
    li  x24, 0x82f6747f707af2c0
    sha512sig0 x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x80fc20a339adf677)
 
sha512sig0_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0xa0c82cd17dd20f1d), rs1:x23(0xf5adb41aa47d105b)
    li  x23, 0xf5adb41aa47d105b
    sha512sig0 x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xa0c82cd17dd20f1d)
 
sha512sig0_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0xcdde1d6ac53bca45), rs1:x22(0xdf7f3844121bcc23)
    li  x22, 0xdf7f3844121bcc23
    sha512sig0 x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xcdde1d6ac53bca45)


    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_3_0)

 
sha512sig0_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x8100000000000000), rs1:x21(0x0000000000000001)
    li  x21, 0x1
    sha512sig0 x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x8100000000000000)
 
sha512sig0_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x0200000000000001), rs1:x20(0x0000000000000002)
    li  x20, 0x2
    sha512sig0 x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0200000000000001)
 
sha512sig0_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x0400000000000002), rs1:x19(0x0000000000000004)
    li  x19, 0x4
    sha512sig0 x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0400000000000002)
 
sha512sig0_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0800000000000004), rs1:x18(0x0000000000000008)
    li  x18, 0x8
    sha512sig0 x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0800000000000004)
 
sha512sig0_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x1000000000000008), rs1:x17(0x0000000000000010)
    li  x17, 0x10
    sha512sig0 x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x1000000000000008)


    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x2,signature_4_0)

 
sha512sig0_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x2000000000000010), rs1:x16(0x0000000000000020)
    li  x16, 0x20
    sha512sig0 x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x2000000000000010)
 
sha512sig0_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x4000000000000020), rs1:x15(0x0000000000000040)
    li  x15, 0x40
    sha512sig0 x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x4000000000000020)
 
sha512sig0_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x8000000000000041), rs1:x14(0x0000000000000080)
    li  x14, 0x80
    sha512sig0 x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x8000000000000041)
 
sha512sig0_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000083), rs1:x13(0x0000000000000100)
    li  x13, 0x100
    sha512sig0 x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0000000000000083)
 
sha512sig0_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000106), rs1:x12(0x0000000000000200)
    li  x12, 0x200
    sha512sig0 x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0000000000000106)


    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_5_0)

 
sha512sig0_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x000000000000020c), rs1:x11(0x0000000000000400)
    li  x11, 0x400
    sha512sig0 x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x000000000000020c)
 
sha512sig0_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000418), rs1:x10(0x0000000000000800)
    li  x10, 0x800
    sha512sig0 x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000000000418)
 
sha512sig0_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000830), rs1:x9(0x0000000000001000)
    li  x9, 0x1000
    sha512sig0 x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000000000830)
 
sha512sig0_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0000000000001060), rs1:x8(0x0000000000002000)
    li  x8, 0x2000
    sha512sig0 x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000000001060)
 
sha512sig0_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x00000000000020c0), rs1:x7(0x0000000000004000)
    li  x7, 0x4000
    sha512sig0 x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x00000000000020c0)


    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_6_0)

 
sha512sig0_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x0000000000004180), rs1:x6(0x0000000000008000)
    li  x6, 0x8000
    sha512sig0 x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x0000000000004180)
 
sha512sig0_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x0000000000008300), rs1:x5(0x0000000000010000)
    li  x5, 0x10000
    sha512sig0 x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000000008300)
 
sha512sig0_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x0000000000010600), rs1:x4(0x0000000000020000)
    li  x4, 0x20000
    sha512sig0 x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000000010600)
 
sha512sig0_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0000000000020c00), rs1:x3(0x0000000000040000)
    li  x3, 0x40000
    sha512sig0 x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000000020c00)
 
sha512sig0_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0000000000041800), rs1:x2(0x0000000000080000)
    li  x2, 0x80000
    sha512sig0 x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000000041800)


    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x5,signature_7_0)

 
sha512sig0_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0000000000083000), rs1:x1(0x0000000000100000)
    li  x1, 0x100000
    sha512sig0 x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0000000000083000)
 
sha512sig0_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0000000000106000), rs1:x31(0x0000000000200000)
    li  x31, 0x200000
    sha512sig0 x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0000000000106000)
 
sha512sig0_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x000000000020c000), rs1:x30(0x0000000000400000)
    li  x30, 0x400000
    sha512sig0 x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x000000000020c000)
 
sha512sig0_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0000000000418000), rs1:x29(0x0000000000800000)
    li  x29, 0x800000
    sha512sig0 x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0000000000418000)
 
sha512sig0_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x0000000000830000), rs1:x28(0x0000000001000000)
    li  x28, 0x1000000
    sha512sig0 x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0000000000830000)


    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_8_0)

 
sha512sig0_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x0000000001060000), rs1:x27(0x0000000002000000)
    li  x27, 0x2000000
    sha512sig0 x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000001060000)
 
sha512sig0_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x00000000020c0000), rs1:x26(0x0000000004000000)
    li  x26, 0x4000000
    sha512sig0 x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x00000000020c0000)
 
sha512sig0_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0000000004180000), rs1:x25(0x0000000008000000)
    li  x25, 0x8000000
    sha512sig0 x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000004180000)
 
sha512sig0_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0000000008300000), rs1:x24(0x0000000010000000)
    li  x24, 0x10000000
    sha512sig0 x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000008300000)
 
sha512sig0_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0000000010600000), rs1:x23(0x0000000020000000)
    li  x23, 0x20000000
    sha512sig0 x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000010600000)


    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_9_0)

 
sha512sig0_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x0000000020c00000), rs1:x22(0x0000000040000000)
    li  x22, 0x40000000
    sha512sig0 x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000020c00000)
 
sha512sig0_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0000000041800000), rs1:x21(0x0000000080000000)
    li  x21, 0x80000000
    sha512sig0 x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000041800000)
 
sha512sig0_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0000000083000000), rs1:x20(0x0000000100000000)
    li  x20, 0x100000000
    sha512sig0 x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000083000000)
 
sha512sig0_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x0000000106000000), rs1:x19(0x0000000200000000)
    li  x19, 0x200000000
    sha512sig0 x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000106000000)
 
sha512sig0_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x000000020c000000), rs1:x18(0x0000000400000000)
    li  x18, 0x400000000
    sha512sig0 x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x000000020c000000)


    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x3,signature_10_0)

 
sha512sig0_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x0000000418000000), rs1:x17(0x0000000800000000)
    li  x17, 0x800000000
    sha512sig0 x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x0000000418000000)
 
sha512sig0_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0000000830000000), rs1:x16(0x0000001000000000)
    li  x16, 0x1000000000
    sha512sig0 x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0000000830000000)
 
sha512sig0_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0000001060000000), rs1:x15(0x0000002000000000)
    li  x15, 0x2000000000
    sha512sig0 x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x0000001060000000)
 
sha512sig0_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x00000020c0000000), rs1:x14(0x0000004000000000)
    li  x14, 0x4000000000
    sha512sig0 x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x00000020c0000000)
 
sha512sig0_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000004180000000), rs1:x13(0x0000008000000000)
    li  x13, 0x8000000000
    sha512sig0 x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000004180000000)


    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_11_0)

 
sha512sig0_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0000008300000000), rs1:x12(0x0000010000000000)
    li  x12, 0x10000000000
    sha512sig0 x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0000008300000000)
 
sha512sig0_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000010600000000), rs1:x11(0x0000020000000000)
    li  x11, 0x20000000000
    sha512sig0 x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000010600000000)
 
sha512sig0_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000020c00000000), rs1:x10(0x0000040000000000)
    li  x10, 0x40000000000
    sha512sig0 x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000020c00000000)
 
sha512sig0_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000041800000000), rs1:x9(0x0000080000000000)
    li  x9, 0x80000000000
    sha512sig0 x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000041800000000)
 
sha512sig0_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000083000000000), rs1:x8(0x0000100000000000)
    li  x8, 0x100000000000
    sha512sig0 x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000083000000000)


    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_12_0)

 
sha512sig0_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0000106000000000), rs1:x7(0x0000200000000000)
    li  x7, 0x200000000000
    sha512sig0 x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000106000000000)
 
sha512sig0_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x000020c000000000), rs1:x6(0x0000400000000000)
    li  x6, 0x400000000000
    sha512sig0 x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x000020c000000000)
 
sha512sig0_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0000418000000000), rs1:x5(0x0000800000000000)
    li  x5, 0x800000000000
    sha512sig0 x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x0000418000000000)
 
sha512sig0_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0000830000000000), rs1:x4(0x0001000000000000)
    li  x4, 0x1000000000000
    sha512sig0 x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x0000830000000000)
 
sha512sig0_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0001060000000000), rs1:x3(0x0002000000000000)
    li  x3, 0x2000000000000
    sha512sig0 x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x0001060000000000)


    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x4,signature_13_0)

 
sha512sig0_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x00020c0000000000), rs1:x2(0x0004000000000000)
    li  x2, 0x4000000000000
    sha512sig0 x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x00020c0000000000)
 
sha512sig0_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0004180000000000), rs1:x1(0x0008000000000000)
    li  x1, 0x8000000000000
    sha512sig0 x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x0004180000000000)
 
sha512sig0_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0008300000000000), rs1:x31(0x0010000000000000)
    li  x31, 0x10000000000000
    sha512sig0 x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x0008300000000000)
 
sha512sig0_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0010600000000000), rs1:x30(0x0020000000000000)
    li  x30, 0x20000000000000
    sha512sig0 x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x0010600000000000)
 
sha512sig0_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0020c00000000000), rs1:x29(0x0040000000000000)
    li  x29, 0x40000000000000
    sha512sig0 x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x0020c00000000000)


    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_14_0)

 
sha512sig0_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0041800000000000), rs1:x28(0x0080000000000000)
    li  x28, 0x80000000000000
    sha512sig0 x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x0041800000000000)
 
sha512sig0_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0083000000000000), rs1:x27(0x0100000000000000)
    li  x27, 0x100000000000000
    sha512sig0 x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0083000000000000)
 
sha512sig0_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x0106000000000000), rs1:x26(0x0200000000000000)
    li  x26, 0x200000000000000
    sha512sig0 x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0106000000000000)
 
sha512sig0_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x020c000000000000), rs1:x25(0x0400000000000000)
    li  x25, 0x400000000000000
    sha512sig0 x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x020c000000000000)
 
sha512sig0_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x0418000000000000), rs1:x24(0x0800000000000000)
    li  x24, 0x800000000000000
    sha512sig0 x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0418000000000000)


    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_15_0)

 
sha512sig0_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x0830000000000000), rs1:x23(0x1000000000000000)
    li  x23, 0x1000000000000000
    sha512sig0 x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0830000000000000)
 
sha512sig0_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x1060000000000000), rs1:x22(0x2000000000000000)
    li  x22, 0x2000000000000000
    sha512sig0 x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x1060000000000000)
 
sha512sig0_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x20c0000000000000), rs1:x21(0x4000000000000000)
    li  x21, 0x4000000000000000
    sha512sig0 x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x20c0000000000000)
 
sha512sig0_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x4180000000000000), rs1:x20(0x8000000000000000)
    li  x20, 0x8000000000000000
    sha512sig0 x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x4180000000000000)
 
sha512sig0_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000)
    li  x19, 0x0
    sha512sig0 x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)


    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x4,signature_16_0)

 
sha512sig0_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0x80ffffffffffffff), rs1:x18(0xfffffffffffffffe)
    li  x18, 0xfffffffffffffffe
    sha512sig0 x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0x80ffffffffffffff)
 
sha512sig0_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0x03fffffffffffffe), rs1:x17(0xfffffffffffffffd)
    li  x17, 0xfffffffffffffffd
    sha512sig0 x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0x03fffffffffffffe)
 
sha512sig0_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0x05fffffffffffffd), rs1:x16(0xfffffffffffffffb)
    li  x16, 0xfffffffffffffffb
    sha512sig0 x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0x05fffffffffffffd)
 
sha512sig0_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0x09fffffffffffffb), rs1:x15(0xfffffffffffffff7)
    li  x15, 0xfffffffffffffff7
    sha512sig0 x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0x09fffffffffffffb)
 
sha512sig0_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0x11fffffffffffff7), rs1:x14(0xffffffffffffffef)
    li  x14, 0xffffffffffffffef
    sha512sig0 x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0x11fffffffffffff7)


    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_17_0)

 
sha512sig0_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0x21ffffffffffffef), rs1:x13(0xffffffffffffffdf)
    li  x13, 0xffffffffffffffdf
    sha512sig0 x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x21ffffffffffffef)
 
sha512sig0_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0x41ffffffffffffdf), rs1:x12(0xffffffffffffffbf)
    li  x12, 0xffffffffffffffbf
    sha512sig0 x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x41ffffffffffffdf)
 
sha512sig0_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0x81ffffffffffffbe), rs1:x11(0xffffffffffffff7f)
    li  x11, 0xffffffffffffff7f
    sha512sig0 x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x81ffffffffffffbe)
 
sha512sig0_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0x01ffffffffffff7c), rs1:x10(0xfffffffffffffeff)
    li  x10, 0xfffffffffffffeff
    sha512sig0 x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x01ffffffffffff7c)
 
sha512sig0_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0x01fffffffffffef9), rs1:x9(0xfffffffffffffdff)
    li  x9, 0xfffffffffffffdff
    sha512sig0 x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x01fffffffffffef9)


    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_18_0)

 
sha512sig0_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0x01fffffffffffdf3), rs1:x8(0xfffffffffffffbff)
    li  x8, 0xfffffffffffffbff
    sha512sig0 x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x01fffffffffffdf3)
 
sha512sig0_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0x01fffffffffffbe7), rs1:x7(0xfffffffffffff7ff)
    li  x7, 0xfffffffffffff7ff
    sha512sig0 x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x01fffffffffffbe7)
 
sha512sig0_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0x01fffffffffff7cf), rs1:x6(0xffffffffffffefff)
    li  x6, 0xffffffffffffefff
    sha512sig0 x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x01fffffffffff7cf)
 
sha512sig0_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0x01ffffffffffef9f), rs1:x5(0xffffffffffffdfff)
    li  x5, 0xffffffffffffdfff
    sha512sig0 x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x01ffffffffffef9f)
 
sha512sig0_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0x01ffffffffffdf3f), rs1:x4(0xffffffffffffbfff)
    li  x4, 0xffffffffffffbfff
    sha512sig0 x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x01ffffffffffdf3f)


    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x4,signature_19_0)

 
sha512sig0_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0x01ffffffffffbe7f), rs1:x3(0xffffffffffff7fff)
    li  x3, 0xffffffffffff7fff
    sha512sig0 x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0x01ffffffffffbe7f)
 
sha512sig0_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0x01ffffffffff7cff), rs1:x2(0xfffffffffffeffff)
    li  x2, 0xfffffffffffeffff
    sha512sig0 x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x01ffffffffff7cff)
 
sha512sig0_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0x01fffffffffef9ff), rs1:x1(0xfffffffffffdffff)
    li  x1, 0xfffffffffffdffff
    sha512sig0 x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x01fffffffffef9ff)
 
sha512sig0_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0x01fffffffffdf3ff), rs1:x31(0xfffffffffffbffff)
    li  x31, 0xfffffffffffbffff
    sha512sig0 x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x01fffffffffdf3ff)
 
sha512sig0_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0x01fffffffffbe7ff), rs1:x30(0xfffffffffff7ffff)
    li  x30, 0xfffffffffff7ffff
    sha512sig0 x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x01fffffffffbe7ff)


    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_20_0)

 
sha512sig0_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0x01fffffffff7cfff), rs1:x29(0xffffffffffefffff)
    li  x29, 0xffffffffffefffff
    sha512sig0 x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0x01fffffffff7cfff)
 
sha512sig0_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0x01ffffffffef9fff), rs1:x28(0xffffffffffdfffff)
    li  x28, 0xffffffffffdfffff
    sha512sig0 x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x01ffffffffef9fff)
 
sha512sig0_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0x01ffffffffdf3fff), rs1:x27(0xffffffffffbfffff)
    li  x27, 0xffffffffffbfffff
    sha512sig0 x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x01ffffffffdf3fff)
 
sha512sig0_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0x01ffffffffbe7fff), rs1:x26(0xffffffffff7fffff)
    li  x26, 0xffffffffff7fffff
    sha512sig0 x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x01ffffffffbe7fff)
 
sha512sig0_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0x01ffffffff7cffff), rs1:x25(0xfffffffffeffffff)
    li  x25, 0xfffffffffeffffff
    sha512sig0 x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x01ffffffff7cffff)


    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_21_0)

 
sha512sig0_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0x01fffffffef9ffff), rs1:x24(0xfffffffffdffffff)
    li  x24, 0xfffffffffdffffff
    sha512sig0 x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x01fffffffef9ffff)
 
sha512sig0_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0x01fffffffdf3ffff), rs1:x23(0xfffffffffbffffff)
    li  x23, 0xfffffffffbffffff
    sha512sig0 x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x01fffffffdf3ffff)
 
sha512sig0_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0x01fffffffbe7ffff), rs1:x22(0xfffffffff7ffffff)
    li  x22, 0xfffffffff7ffffff
    sha512sig0 x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x01fffffffbe7ffff)
 
sha512sig0_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0x01fffffff7cfffff), rs1:x21(0xffffffffefffffff)
    li  x21, 0xffffffffefffffff
    sha512sig0 x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x01fffffff7cfffff)
 
sha512sig0_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0x01ffffffef9fffff), rs1:x20(0xffffffffdfffffff)
    li  x20, 0xffffffffdfffffff
    sha512sig0 x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x01ffffffef9fffff)


    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x5,signature_22_0)

 
sha512sig0_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0x01ffffffdf3fffff), rs1:x19(0xffffffffbfffffff)
    li  x19, 0xffffffffbfffffff
    sha512sig0 x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0x01ffffffdf3fffff)
 
sha512sig0_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0x01ffffffbe7fffff), rs1:x18(0xffffffff7fffffff)
    li  x18, 0xffffffff7fffffff
    sha512sig0 x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0x01ffffffbe7fffff)
 
sha512sig0_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0x01ffffff7cffffff), rs1:x17(0xfffffffeffffffff)
    li  x17, 0xfffffffeffffffff
    sha512sig0 x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0x01ffffff7cffffff)
 
sha512sig0_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0x01fffffef9ffffff), rs1:x16(0xfffffffdffffffff)
    li  x16, 0xfffffffdffffffff
    sha512sig0 x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0x01fffffef9ffffff)
 
sha512sig0_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0x01fffffdf3ffffff), rs1:x15(0xfffffffbffffffff)
    li  x15, 0xfffffffbffffffff
    sha512sig0 x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0x01fffffdf3ffffff)


    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_23_0)

 
sha512sig0_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0x01fffffbe7ffffff), rs1:x14(0xfffffff7ffffffff)
    li  x14, 0xfffffff7ffffffff
    sha512sig0 x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x01fffffbe7ffffff)
 
sha512sig0_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0x01fffff7cfffffff), rs1:x13(0xffffffefffffffff)
    li  x13, 0xffffffefffffffff
    sha512sig0 x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x01fffff7cfffffff)
 
sha512sig0_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0x01ffffef9fffffff), rs1:x12(0xffffffdfffffffff)
    li  x12, 0xffffffdfffffffff
    sha512sig0 x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x01ffffef9fffffff)
 
sha512sig0_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0x01ffffdf3fffffff), rs1:x11(0xffffffbfffffffff)
    li  x11, 0xffffffbfffffffff
    sha512sig0 x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x01ffffdf3fffffff)
 
sha512sig0_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0x01ffffbe7fffffff), rs1:x10(0xffffff7fffffffff)
    li  x10, 0xffffff7fffffffff
    sha512sig0 x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x01ffffbe7fffffff)


    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_24_0)

 
sha512sig0_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0x01ffff7cffffffff), rs1:x9(0xfffffeffffffffff)
    li  x9, 0xfffffeffffffffff
    sha512sig0 x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x01ffff7cffffffff)
 
sha512sig0_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0x01fffef9ffffffff), rs1:x8(0xfffffdffffffffff)
    li  x8, 0xfffffdffffffffff
    sha512sig0 x24, x8
    sd x24, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x01fffef9ffffffff)
 
sha512sig0_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0x01fffdf3ffffffff), rs1:x7(0xfffffbffffffffff)
    li  x7, 0xfffffbffffffffff
    sha512sig0 x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x01fffdf3ffffffff)
 
sha512sig0_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0x01fffbe7ffffffff), rs1:x6(0xfffff7ffffffffff)
    li  x6, 0xfffff7ffffffffff
    sha512sig0 x26, x6
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x01fffbe7ffffffff)
 
sha512sig0_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0x01fff7cfffffffff), rs1:x5(0xffffefffffffffff)
    li  x5, 0xffffefffffffffff
    sha512sig0 x27, x5
    sd x27, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x01fff7cfffffffff)


    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x5,signature_25_0)

 
sha512sig0_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0x01ffef9fffffffff), rs1:x4(0xffffdfffffffffff)
    li  x4, 0xffffdfffffffffff
    sha512sig0 x28, x4
    sd x28, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x28, 0x01ffef9fffffffff)
 
sha512sig0_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0x01ffdf3fffffffff), rs1:x3(0xffffbfffffffffff)
    li  x3, 0xffffbfffffffffff
    sha512sig0 x29, x3
    sd x29, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x29, 0x01ffdf3fffffffff)
 
sha512sig0_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0x01ffbe7fffffffff), rs1:x2(0xffff7fffffffffff)
    li  x2, 0xffff7fffffffffff
    sha512sig0 x30, x2
    sd x30, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x30, 0x01ffbe7fffffffff)
 
sha512sig0_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0x01ff7cffffffffff), rs1:x1(0xfffeffffffffffff)
    li  x1, 0xfffeffffffffffff
    sha512sig0 x31, x1
    sd x31, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x01ff7cffffffffff)
 
sha512sig0_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0x01fef9ffffffffff), rs1:x31(0xfffdffffffffffff)
    li  x31, 0xfffdffffffffffff
    sha512sig0 x1, x31
    sd x1, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x01fef9ffffffffff)


    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_26_0)

 
sha512sig0_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0x01fdf3ffffffffff), rs1:x30(0xfffbffffffffffff)
    li  x30, 0xfffbffffffffffff
    sha512sig0 x2, x30
    sd x2, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x01fdf3ffffffffff)
 
sha512sig0_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0x01fbe7ffffffffff), rs1:x29(0xfff7ffffffffffff)
    li  x29, 0xfff7ffffffffffff
    sha512sig0 x3, x29
    sd x3, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x01fbe7ffffffffff)
 
sha512sig0_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0x01f7cfffffffffff), rs1:x28(0xffefffffffffffff)
    li  x28, 0xffefffffffffffff
    sha512sig0 x4, x28
    sd x4, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x01f7cfffffffffff)
 
sha512sig0_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0x01ef9fffffffffff), rs1:x27(0xffdfffffffffffff)
    li  x27, 0xffdfffffffffffff
    sha512sig0 x5, x27
    sd x5, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x01ef9fffffffffff)
 
sha512sig0_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0x01df3fffffffffff), rs1:x26(0xffbfffffffffffff)
    li  x26, 0xffbfffffffffffff
    sha512sig0 x6, x26
    sd x6, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x6, 0x01df3fffffffffff)


    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_27_0)

 
sha512sig0_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0x01be7fffffffffff), rs1:x25(0xff7fffffffffffff)
    li  x25, 0xff7fffffffffffff
    sha512sig0 x7, x25
    sd x7, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x01be7fffffffffff)
 
sha512sig0_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0x017cffffffffffff), rs1:x24(0xfeffffffffffffff)
    li  x24, 0xfeffffffffffffff
    sha512sig0 x8, x24
    sd x8, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x017cffffffffffff)
 
sha512sig0_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0x00f9ffffffffffff), rs1:x23(0xfdffffffffffffff)
    li  x23, 0xfdffffffffffffff
    sha512sig0 x9, x23
    sd x9, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00f9ffffffffffff)
 
sha512sig0_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0x03f3ffffffffffff), rs1:x22(0xfbffffffffffffff)
    li  x22, 0xfbffffffffffffff
    sha512sig0 x10, x22
    sd x10, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x03f3ffffffffffff)
 
sha512sig0_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0x05e7ffffffffffff), rs1:x21(0xf7ffffffffffffff)
    li  x21, 0xf7ffffffffffffff
    sha512sig0 x11, x21
    sd x11, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x05e7ffffffffffff)


    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x6,signature_28_0)

 
sha512sig0_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0x09cfffffffffffff), rs1:x20(0xefffffffffffffff)
    li  x20, 0xefffffffffffffff
    sha512sig0 x12, x20
    sd x12, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x09cfffffffffffff)
 
sha512sig0_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0x119fffffffffffff), rs1:x19(0xdfffffffffffffff)
    li  x19, 0xdfffffffffffffff
    sha512sig0 x13, x19
    sd x13, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x119fffffffffffff)
 
sha512sig0_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0x213fffffffffffff), rs1:x18(0xbfffffffffffffff)
    li  x18, 0xbfffffffffffffff
    sha512sig0 x14, x18
    sd x14, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x213fffffffffffff)
 
sha512sig0_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0x407fffffffffffff), rs1:x17(0x7fffffffffffffff)
    li  x17, 0x7fffffffffffffff
    sha512sig0 x15, x17
    sd x15, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x407fffffffffffff)
 
sha512sig0_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0x01ffffffffffffff), rs1:x16(0xffffffffffffffff)
    li  x16, 0xffffffffffffffff
    sha512sig0 x16, x16
    sd x16, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x16, 0x01ffffffffffffff)


    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_29_0)

 
sha512sig0_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x8100000000000000), rs1:x15(0x0000000000000001)
    li  x15, 0x1
    sha512sig0 x17, x15
    sd x17, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x17, 0x8100000000000000)
 
sha512sig0_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0200000000000001), rs1:x14(0x0000000000000002)
    li  x14, 0x2
    sha512sig0 x18, x14
    sd x18, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x0200000000000001)
 
sha512sig0_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0400000000000002), rs1:x13(0x0000000000000004)
    li  x13, 0x4
    sha512sig0 x19, x13
    sd x19, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x0400000000000002)
 
sha512sig0_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0800000000000004), rs1:x12(0x0000000000000008)
    li  x12, 0x8
    sha512sig0 x20, x12
    sd x20, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0800000000000004)
 
sha512sig0_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x1000000000000008), rs1:x11(0x0000000000000010)
    li  x11, 0x10
    sha512sig0 x21, x11
    sd x21, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x1000000000000008)


    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_30_0)

 
sha512sig0_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x2000000000000010), rs1:x10(0x0000000000000020)
    li  x10, 0x20
    sha512sig0 x22, x10
    sd x22, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x2000000000000010)
 
sha512sig0_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x4000000000000020), rs1:x9(0x0000000000000040)
    li  x9, 0x40
    sha512sig0 x23, x9
    sd x23, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x4000000000000020)
 
sha512sig0_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x8000000000000041), rs1:x8(0x0000000000000080)
    li  x8, 0x80
    sha512sig0 x24, x8
    sd x24, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x8000000000000041)
 
sha512sig0_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000083), rs1:x7(0x0000000000000100)
    li  x7, 0x100
    sha512sig0 x25, x7
    sd x25, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000000000083)
 
sha512sig0_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000106), rs1:x6(0x0000000000000200)
    li  x6, 0x200
    sha512sig0 x26, x6
    sd x26, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000000106)


    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x6,signature_31_0)

 
sha512sig0_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x000000000000020c), rs1:x5(0x0000000000000400)
    li  x5, 0x400
    sha512sig0 x27, x5
    sd x27, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x000000000000020c)
 
sha512sig0_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000418), rs1:x4(0x0000000000000800)
    li  x4, 0x800
    sha512sig0 x28, x4
    sd x28, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000000000418)
 
sha512sig0_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000830), rs1:x3(0x0000000000001000)
    li  x3, 0x1000
    sha512sig0 x29, x3
    sd x29, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000000000830)
 
sha512sig0_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000000001060), rs1:x2(0x0000000000002000)
    li  x2, 0x2000
    sha512sig0 x30, x2
    sd x30, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000000001060)
 
sha512sig0_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x00000000000020c0), rs1:x1(0x0000000000004000)
    li  x1, 0x4000
    sha512sig0 x31, x1
    sd x31, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x00000000000020c0)


    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x6,signature_32_0)

 
sha512sig0_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000000004180), rs1:x31(0x0000000000008000)
    li  x31, 0x8000
    sha512sig0 x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x0000000000004180)
 
sha512sig0_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000000000008300), rs1:x30(0x0000000000010000)
    li  x30, 0x10000
    sha512sig0 x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x0000000000008300)
 
sha512sig0_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000000010600), rs1:x29(0x0000000000020000)
    li  x29, 0x20000
    sha512sig0 x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x0000000000010600)
 
sha512sig0_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000000020c00), rs1:x28(0x0000000000040000)
    li  x28, 0x40000
    sha512sig0 x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x0000000000020c00)
 
sha512sig0_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000000041800), rs1:x27(0x0000000000080000)
    li  x27, 0x80000
    sha512sig0 x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x0000000000041800)


    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_33_0)

 
sha512sig0_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000000083000), rs1:x26(0x0000000000100000)
    li  x26, 0x100000
    sha512sig0 x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000083000)
 
sha512sig0_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000000106000), rs1:x25(0x0000000000200000)
    li  x25, 0x200000
    sha512sig0 x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000000106000)
 
sha512sig0_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x000000000020c000), rs1:x24(0x0000000000400000)
    li  x24, 0x400000
    sha512sig0 x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x000000000020c000)
 
sha512sig0_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000000418000), rs1:x23(0x0000000000800000)
    li  x23, 0x800000
    sha512sig0 x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000418000)
 
sha512sig0_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000000830000), rs1:x22(0x0000000001000000)
    li  x22, 0x1000000
    sha512sig0 x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000000830000)


    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_34_0)

 
sha512sig0_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000001060000), rs1:x21(0x0000000002000000)
    li  x21, 0x2000000
    sha512sig0 x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x0000000001060000)
 
sha512sig0_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x00000000020c0000), rs1:x20(0x0000000004000000)
    li  x20, 0x4000000
    sha512sig0 x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x00000000020c0000)
 
sha512sig0_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000004180000), rs1:x19(0x0000000008000000)
    li  x19, 0x8000000
    sha512sig0 x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0000000004180000)
 
sha512sig0_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000008300000), rs1:x18(0x0000000010000000)
    li  x18, 0x10000000
    sha512sig0 x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0000000008300000)
 
sha512sig0_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000010600000), rs1:x17(0x0000000020000000)
    li  x17, 0x20000000
    sha512sig0 x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0000000010600000)


    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x2,signature_35_0)

 
sha512sig0_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000020c00000), rs1:x16(0x0000000040000000)
    li  x16, 0x40000000
    sha512sig0 x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0000000020c00000)
 
sha512sig0_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000000041800000), rs1:x15(0x0000000080000000)
    li  x15, 0x80000000
    sha512sig0 x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x0000000041800000)
 
sha512sig0_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000083000000), rs1:x14(0x0000000100000000)
    li  x14, 0x100000000
    sha512sig0 x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x0000000083000000)
 
sha512sig0_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000106000000), rs1:x13(0x0000000200000000)
    li  x13, 0x200000000
    sha512sig0 x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0000000106000000)
 
sha512sig0_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x000000020c000000), rs1:x12(0x0000000400000000)
    li  x12, 0x400000000
    sha512sig0 x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x000000020c000000)


    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_36_0)

 
sha512sig0_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000418000000), rs1:x11(0x0000000800000000)
    li  x11, 0x800000000
    sha512sig0 x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000418000000)
 
sha512sig0_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000000830000000), rs1:x10(0x0000001000000000)
    li  x10, 0x1000000000
    sha512sig0 x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000830000000)
 
sha512sig0_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000001060000000), rs1:x9(0x0000002000000000)
    li  x9, 0x2000000000
    sha512sig0 x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000001060000000)
 
sha512sig0_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x00000020c0000000), rs1:x8(0x0000004000000000)
    li  x8, 0x4000000000
    sha512sig0 x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x00000020c0000000)
 
sha512sig0_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000004180000000), rs1:x7(0x0000008000000000)
    li  x7, 0x8000000000
    sha512sig0 x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000004180000000)


    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_37_0)

 
sha512sig0_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000008300000000), rs1:x6(0x0000010000000000)
    li  x6, 0x10000000000
    sha512sig0 x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x0000008300000000)
 
sha512sig0_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000010600000000), rs1:x5(0x0000020000000000)
    li  x5, 0x20000000000
    sha512sig0 x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000010600000000)
 
sha512sig0_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000020c00000000), rs1:x4(0x0000040000000000)
    li  x4, 0x40000000000
    sha512sig0 x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000020c00000000)
 
sha512sig0_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000041800000000), rs1:x3(0x0000080000000000)
    li  x3, 0x80000000000
    sha512sig0 x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000041800000000)
 
sha512sig0_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000083000000000), rs1:x2(0x0000100000000000)
    li  x2, 0x100000000000
    sha512sig0 x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000083000000000)


    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x5,signature_38_0)

 
sha512sig0_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000106000000000), rs1:x1(0x0000200000000000)
    li  x1, 0x200000000000
    sha512sig0 x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0000106000000000)
 
sha512sig0_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x000020c000000000), rs1:x31(0x0000400000000000)
    li  x31, 0x400000000000
    sha512sig0 x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x000020c000000000)
 
sha512sig0_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000418000000000), rs1:x30(0x0000800000000000)
    li  x30, 0x800000000000
    sha512sig0 x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0000418000000000)
 
sha512sig0_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0000830000000000), rs1:x29(0x0001000000000000)
    li  x29, 0x1000000000000
    sha512sig0 x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0000830000000000)
 
sha512sig0_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0001060000000000), rs1:x28(0x0002000000000000)
    li  x28, 0x2000000000000
    sha512sig0 x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0001060000000000)


    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_39_0)

 
sha512sig0_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x00020c0000000000), rs1:x27(0x0004000000000000)
    li  x27, 0x4000000000000
    sha512sig0 x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x00020c0000000000)
 
sha512sig0_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0004180000000000), rs1:x26(0x0008000000000000)
    li  x26, 0x8000000000000
    sha512sig0 x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0004180000000000)
 
sha512sig0_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0008300000000000), rs1:x25(0x0010000000000000)
    li  x25, 0x10000000000000
    sha512sig0 x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0008300000000000)
 
sha512sig0_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0010600000000000), rs1:x24(0x0020000000000000)
    li  x24, 0x20000000000000
    sha512sig0 x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0010600000000000)
 
sha512sig0_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0020c00000000000), rs1:x23(0x0040000000000000)
    li  x23, 0x40000000000000
    sha512sig0 x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0020c00000000000)


    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_40_0)

 
sha512sig0_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0041800000000000), rs1:x22(0x0080000000000000)
    li  x22, 0x80000000000000
    sha512sig0 x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0041800000000000)
 
sha512sig0_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0083000000000000), rs1:x21(0x0100000000000000)
    li  x21, 0x100000000000000
    sha512sig0 x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0083000000000000)
 
sha512sig0_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0106000000000000), rs1:x20(0x0200000000000000)
    li  x20, 0x200000000000000
    sha512sig0 x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0106000000000000)
 
sha512sig0_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x020c000000000000), rs1:x19(0x0400000000000000)
    li  x19, 0x400000000000000
    sha512sig0 x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x020c000000000000)
 
sha512sig0_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0418000000000000), rs1:x18(0x0800000000000000)
    li  x18, 0x800000000000000
    sha512sig0 x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x0418000000000000)


    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x3,signature_41_0)

 
sha512sig0_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x0830000000000000), rs1:x17(0x1000000000000000)
    li  x17, 0x1000000000000000
    sha512sig0 x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x0830000000000000)
 
sha512sig0_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x1060000000000000), rs1:x16(0x2000000000000000)
    li  x16, 0x2000000000000000
    sha512sig0 x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x1060000000000000)
 
sha512sig0_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x20c0000000000000), rs1:x15(0x4000000000000000)
    li  x15, 0x4000000000000000
    sha512sig0 x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x20c0000000000000)
 
sha512sig0_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x4180000000000000), rs1:x14(0x8000000000000000)
    li  x14, 0x8000000000000000
    sha512sig0 x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x4180000000000000)
 
sha512sig0_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000)
    li  x13, 0x0
    sha512sig0 x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000000000000000)


    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_42_0)

 
sha512sig0_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0x80ffffffffffffff), rs1:x12(0xfffffffffffffffe)
    li  x12, 0xfffffffffffffffe
    sha512sig0 x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x80ffffffffffffff)
 
sha512sig0_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0x03fffffffffffffe), rs1:x11(0xfffffffffffffffd)
    li  x11, 0xfffffffffffffffd
    sha512sig0 x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x03fffffffffffffe)
 
sha512sig0_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0x05fffffffffffffd), rs1:x10(0xfffffffffffffffb)
    li  x10, 0xfffffffffffffffb
    sha512sig0 x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x05fffffffffffffd)
 
sha512sig0_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0x09fffffffffffffb), rs1:x9(0xfffffffffffffff7)
    li  x9, 0xfffffffffffffff7
    sha512sig0 x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x09fffffffffffffb)
 
sha512sig0_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0x11fffffffffffff7), rs1:x8(0xffffffffffffffef)
    li  x8, 0xffffffffffffffef
    sha512sig0 x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x11fffffffffffff7)


    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_43_0)

 
sha512sig0_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0x21ffffffffffffef), rs1:x7(0xffffffffffffffdf)
    li  x7, 0xffffffffffffffdf
    sha512sig0 x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x21ffffffffffffef)
 
sha512sig0_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0x41ffffffffffffdf), rs1:x6(0xffffffffffffffbf)
    li  x6, 0xffffffffffffffbf
    sha512sig0 x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x41ffffffffffffdf)
 
sha512sig0_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0x81ffffffffffffbe), rs1:x5(0xffffffffffffff7f)
    li  x5, 0xffffffffffffff7f
    sha512sig0 x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x81ffffffffffffbe)
 
sha512sig0_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0x01ffffffffffff7c), rs1:x4(0xfffffffffffffeff)
    li  x4, 0xfffffffffffffeff
    sha512sig0 x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x01ffffffffffff7c)
 
sha512sig0_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0x01fffffffffffef9), rs1:x3(0xfffffffffffffdff)
    li  x3, 0xfffffffffffffdff
    sha512sig0 x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x01fffffffffffef9)


    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x4,signature_44_0)

 
sha512sig0_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0x01fffffffffffdf3), rs1:x2(0xfffffffffffffbff)
    li  x2, 0xfffffffffffffbff
    sha512sig0 x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x01fffffffffffdf3)
 
sha512sig0_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0x01fffffffffffbe7), rs1:x1(0xfffffffffffff7ff)
    li  x1, 0xfffffffffffff7ff
    sha512sig0 x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x01fffffffffffbe7)
 
sha512sig0_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0x01fffffffffff7cf), rs1:x31(0xffffffffffffefff)
    li  x31, 0xffffffffffffefff
    sha512sig0 x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x01fffffffffff7cf)
 
sha512sig0_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0x01ffffffffffef9f), rs1:x30(0xffffffffffffdfff)
    li  x30, 0xffffffffffffdfff
    sha512sig0 x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x01ffffffffffef9f)
 
sha512sig0_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0x01ffffffffffdf3f), rs1:x29(0xffffffffffffbfff)
    li  x29, 0xffffffffffffbfff
    sha512sig0 x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x01ffffffffffdf3f)


    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_45_0)

 
sha512sig0_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0x01ffffffffffbe7f), rs1:x28(0xffffffffffff7fff)
    li  x28, 0xffffffffffff7fff
    sha512sig0 x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x01ffffffffffbe7f)
 
sha512sig0_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0x01ffffffffff7cff), rs1:x27(0xfffffffffffeffff)
    li  x27, 0xfffffffffffeffff
    sha512sig0 x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x01ffffffffff7cff)
 
sha512sig0_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0x01fffffffffef9ff), rs1:x26(0xfffffffffffdffff)
    li  x26, 0xfffffffffffdffff
    sha512sig0 x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x01fffffffffef9ff)
 
sha512sig0_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0x01fffffffffdf3ff), rs1:x25(0xfffffffffffbffff)
    li  x25, 0xfffffffffffbffff
    sha512sig0 x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x01fffffffffdf3ff)
 
sha512sig0_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0x01fffffffffbe7ff), rs1:x24(0xfffffffffff7ffff)
    li  x24, 0xfffffffffff7ffff
    sha512sig0 x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x01fffffffffbe7ff)


    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_46_0)

 
sha512sig0_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0x01fffffffff7cfff), rs1:x23(0xffffffffffefffff)
    li  x23, 0xffffffffffefffff
    sha512sig0 x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x01fffffffff7cfff)
 
sha512sig0_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0x01ffffffffef9fff), rs1:x22(0xffffffffffdfffff)
    li  x22, 0xffffffffffdfffff
    sha512sig0 x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x01ffffffffef9fff)
 
sha512sig0_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0x01ffffffffdf3fff), rs1:x21(0xffffffffffbfffff)
    li  x21, 0xffffffffffbfffff
    sha512sig0 x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x01ffffffffdf3fff)
 
sha512sig0_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0x01ffffffffbe7fff), rs1:x20(0xffffffffff7fffff)
    li  x20, 0xffffffffff7fffff
    sha512sig0 x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x01ffffffffbe7fff)
 
sha512sig0_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0x01ffffffff7cffff), rs1:x19(0xfffffffffeffffff)
    li  x19, 0xfffffffffeffffff
    sha512sig0 x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x01ffffffff7cffff)


    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x4,signature_47_0)

 
sha512sig0_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0x01fffffffef9ffff), rs1:x18(0xfffffffffdffffff)
    li  x18, 0xfffffffffdffffff
    sha512sig0 x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0x01fffffffef9ffff)
 
sha512sig0_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0x01fffffffdf3ffff), rs1:x17(0xfffffffffbffffff)
    li  x17, 0xfffffffffbffffff
    sha512sig0 x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0x01fffffffdf3ffff)
 
sha512sig0_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0x01fffffffbe7ffff), rs1:x16(0xfffffffff7ffffff)
    li  x16, 0xfffffffff7ffffff
    sha512sig0 x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0x01fffffffbe7ffff)
 
sha512sig0_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0x01fffffff7cfffff), rs1:x15(0xffffffffefffffff)
    li  x15, 0xffffffffefffffff
    sha512sig0 x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0x01fffffff7cfffff)
 
sha512sig0_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0x01ffffffef9fffff), rs1:x14(0xffffffffdfffffff)
    li  x14, 0xffffffffdfffffff
    sha512sig0 x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0x01ffffffef9fffff)


    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_48_0)

 
sha512sig0_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0x01ffffffdf3fffff), rs1:x13(0xffffffffbfffffff)
    li  x13, 0xffffffffbfffffff
    sha512sig0 x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x01ffffffdf3fffff)
 
sha512sig0_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0x01ffffffbe7fffff), rs1:x12(0xffffffff7fffffff)
    li  x12, 0xffffffff7fffffff
    sha512sig0 x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x01ffffffbe7fffff)
 
sha512sig0_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0x01ffffff7cffffff), rs1:x11(0xfffffffeffffffff)
    li  x11, 0xfffffffeffffffff
    sha512sig0 x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x01ffffff7cffffff)
 
sha512sig0_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0x01fffffef9ffffff), rs1:x10(0xfffffffdffffffff)
    li  x10, 0xfffffffdffffffff
    sha512sig0 x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x01fffffef9ffffff)
 
sha512sig0_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0x01fffffdf3ffffff), rs1:x9(0xfffffffbffffffff)
    li  x9, 0xfffffffbffffffff
    sha512sig0 x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x01fffffdf3ffffff)


    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_49_0)

 
sha512sig0_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0x01fffffbe7ffffff), rs1:x8(0xfffffff7ffffffff)
    li  x8, 0xfffffff7ffffffff
    sha512sig0 x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x01fffffbe7ffffff)
 
sha512sig0_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0x01fffff7cfffffff), rs1:x7(0xffffffefffffffff)
    li  x7, 0xffffffefffffffff
    sha512sig0 x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x01fffff7cfffffff)
 
sha512sig0_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0x01ffffef9fffffff), rs1:x6(0xffffffdfffffffff)
    li  x6, 0xffffffdfffffffff
    sha512sig0 x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x01ffffef9fffffff)
 
sha512sig0_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0x01ffffdf3fffffff), rs1:x5(0xffffffbfffffffff)
    li  x5, 0xffffffbfffffffff
    sha512sig0 x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x01ffffdf3fffffff)
 
sha512sig0_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0x01ffffbe7fffffff), rs1:x4(0xffffff7fffffffff)
    li  x4, 0xffffff7fffffffff
    sha512sig0 x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x01ffffbe7fffffff)


    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x4,signature_50_0)

 
sha512sig0_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0x01ffff7cffffffff), rs1:x3(0xfffffeffffffffff)
    li  x3, 0xfffffeffffffffff
    sha512sig0 x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0x01ffff7cffffffff)
 
sha512sig0_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0x01fffef9ffffffff), rs1:x2(0xfffffdffffffffff)
    li  x2, 0xfffffdffffffffff
    sha512sig0 x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x01fffef9ffffffff)
 
sha512sig0_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0x01fffdf3ffffffff), rs1:x1(0xfffffbffffffffff)
    li  x1, 0xfffffbffffffffff
    sha512sig0 x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x01fffdf3ffffffff)
 
sha512sig0_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0x01fffbe7ffffffff), rs1:x31(0xfffff7ffffffffff)
    li  x31, 0xfffff7ffffffffff
    sha512sig0 x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x01fffbe7ffffffff)
 
sha512sig0_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0x01fff7cfffffffff), rs1:x30(0xffffefffffffffff)
    li  x30, 0xffffefffffffffff
    sha512sig0 x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x01fff7cfffffffff)


    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_51_0)

 
sha512sig0_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0x01ffef9fffffffff), rs1:x29(0xffffdfffffffffff)
    li  x29, 0xffffdfffffffffff
    sha512sig0 x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0x01ffef9fffffffff)
 
sha512sig0_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0x01ffdf3fffffffff), rs1:x28(0xffffbfffffffffff)
    li  x28, 0xffffbfffffffffff
    sha512sig0 x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x01ffdf3fffffffff)
 
sha512sig0_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0x01ffbe7fffffffff), rs1:x27(0xffff7fffffffffff)
    li  x27, 0xffff7fffffffffff
    sha512sig0 x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x01ffbe7fffffffff)
 
sha512sig0_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0x01ff7cffffffffff), rs1:x26(0xfffeffffffffffff)
    li  x26, 0xfffeffffffffffff
    sha512sig0 x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x01ff7cffffffffff)
 
sha512sig0_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0x01fef9ffffffffff), rs1:x25(0xfffdffffffffffff)
    li  x25, 0xfffdffffffffffff
    sha512sig0 x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x01fef9ffffffffff)


    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_52_0)

 
sha512sig0_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0x01fdf3ffffffffff), rs1:x24(0xfffbffffffffffff)
    li  x24, 0xfffbffffffffffff
    sha512sig0 x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x01fdf3ffffffffff)
 
sha512sig0_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0x01fbe7ffffffffff), rs1:x23(0xfff7ffffffffffff)
    li  x23, 0xfff7ffffffffffff
    sha512sig0 x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x01fbe7ffffffffff)
 
sha512sig0_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0x01f7cfffffffffff), rs1:x22(0xffefffffffffffff)
    li  x22, 0xffefffffffffffff
    sha512sig0 x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x01f7cfffffffffff)
 
sha512sig0_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0x01ef9fffffffffff), rs1:x21(0xffdfffffffffffff)
    li  x21, 0xffdfffffffffffff
    sha512sig0 x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x01ef9fffffffffff)
 
sha512sig0_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0x01df3fffffffffff), rs1:x20(0xffbfffffffffffff)
    li  x20, 0xffbfffffffffffff
    sha512sig0 x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x01df3fffffffffff)


    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x5,signature_53_0)

 
sha512sig0_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0x01be7fffffffffff), rs1:x19(0xff7fffffffffffff)
    li  x19, 0xff7fffffffffffff
    sha512sig0 x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0x01be7fffffffffff)
 
sha512sig0_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0x017cffffffffffff), rs1:x18(0xfeffffffffffffff)
    li  x18, 0xfeffffffffffffff
    sha512sig0 x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0x017cffffffffffff)
 
sha512sig0_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0x00f9ffffffffffff), rs1:x17(0xfdffffffffffffff)
    li  x17, 0xfdffffffffffffff
    sha512sig0 x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0x00f9ffffffffffff)
 
sha512sig0_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0x03f3ffffffffffff), rs1:x16(0xfbffffffffffffff)
    li  x16, 0xfbffffffffffffff
    sha512sig0 x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0x03f3ffffffffffff)
 
sha512sig0_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0x05e7ffffffffffff), rs1:x15(0xf7ffffffffffffff)
    li  x15, 0xf7ffffffffffffff
    sha512sig0 x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0x05e7ffffffffffff)


    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_54_0)

 
sha512sig0_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0x09cfffffffffffff), rs1:x14(0xefffffffffffffff)
    li  x14, 0xefffffffffffffff
    sha512sig0 x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x09cfffffffffffff)
 
sha512sig0_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0x119fffffffffffff), rs1:x13(0xdfffffffffffffff)
    li  x13, 0xdfffffffffffffff
    sha512sig0 x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x119fffffffffffff)
 
sha512sig0_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0x213fffffffffffff), rs1:x12(0xbfffffffffffffff)
    li  x12, 0xbfffffffffffffff
    sha512sig0 x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x213fffffffffffff)
 
sha512sig0_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0x407fffffffffffff), rs1:x11(0x7fffffffffffffff)
    li  x11, 0x7fffffffffffffff
    sha512sig0 x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x407fffffffffffff)
 
sha512sig0_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0x01ffffffffffffff), rs1:x10(0xffffffffffffffff)
    li  x10, 0xffffffffffffffff
    sha512sig0 x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x01ffffffffffffff)


    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig0)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig0)

    RVTEST_SIGBASE(x1,signature_55_0)

 
sha512sig0_01_inst_270:
    // Test 270:  Test with random values
    // result rd:x23(0x1d4f99b0e0031638), rs1:x9(0x10fd3dedadea5195)
    li  x9, 0x10fd3dedadea5195
    sha512sig0 x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x1d4f99b0e0031638)
 
sha512sig0_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1)
    li  x8, 0xbd295ce2d2ffbec1
    sha512sig0 x0, x8
    sd x0, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x0, 0x0000000000000000)
 
sha512sig0_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0x5ee9e223da89f6a4), rs1:x7(0xc9649f05a8e1a8bb)
    li  x7, 0xc9649f05a8e1a8bb
    sha512sig0 x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x5ee9e223da89f6a4)
 
sha512sig0_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb)
    li  x0, 0x3541291848c99fcb
    sha512sig0 x26, x0
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000000000)
	
#endif


RVTEST_CODE_END sha512sig0_01_code_end
RVTEST_CODE_BEGIN aes64im_01_init aes64im_01_code_begin






#ifdef TEST_CASE_1


    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x6,signature_1_0)

 
aes64im_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x8bb2dcd8f7741616), rs1:x31(0x10fd3dedadea5195)
    li  x31, 0x10fd3dedadea5195
    aes64im x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x8bb2dcd8f7741616)
 
aes64im_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0xcb7a7ee5aba96333), rs1:x30(0xbd295ce2d2ffbec1)
    li  x30, 0xbd295ce2d2ffbec1
    aes64im x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0xcb7a7ee5aba96333)
 
aes64im_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0x9d2ea52132bc8652), rs1:x29(0xc9649f05a8e1a8bb)
    li  x29, 0xc9649f05a8e1a8bb
    aes64im x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x9d2ea52132bc8652)
 
aes64im_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x448dd25e03ff654c), rs1:x28(0x3541291848c99fcb)
    li  x28, 0x3541291848c99fcb
    aes64im x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x448dd25e03ff654c)
 
aes64im_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x9d12bb8144b8dc66), rs1:x27(0x10a24740461d524f)
    li  x27, 0x10a24740461d524f
    aes64im x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x9d12bb8144b8dc66)


    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_2_0)

 
aes64im_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x4789d77cd2c75e2c), rs1:x26(0x546b0e54528a10af)
    li  x26, 0x546b0e54528a10af
    aes64im x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x4789d77cd2c75e2c)
 
aes64im_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x7fdb61e4a97037ac), rs1:x25(0x73a92fd4e19bfbc3)
    li  x25, 0x73a92fd4e19bfbc3
    aes64im x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x7fdb61e4a97037ac)
 
aes64im_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x3ca634d1d6532499), rs1:x24(0x82f6747f707af2c0)
    li  x24, 0x82f6747f707af2c0
    aes64im x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x3ca634d1d6532499)
 
aes64im_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0x28f09eb0c922423b), rs1:x23(0xf5adb41aa47d105b)
    li  x23, 0xf5adb41aa47d105b
    aes64im x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x28f09eb0c922423b)
 
aes64im_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0x25ae6136b27ebb91), rs1:x22(0xdf7f3844121bcc23)
    li  x22, 0xdf7f3844121bcc23
    aes64im x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x25ae6136b27ebb91)


    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_3_0)

 
aes64im_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x000000000b0d090e), rs1:x21(0x0000000000000001)
    li  x21, 0x1
    aes64im x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x000000000b0d090e)
 
aes64im_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x00000000161a121c), rs1:x20(0x0000000000000002)
    li  x20, 0x2
    aes64im x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x00000000161a121c)
 
aes64im_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x000000002c342438), rs1:x19(0x0000000000000004)
    li  x19, 0x4
    aes64im x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x000000002c342438)
 
aes64im_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0000000058684870), rs1:x18(0x0000000000000008)
    li  x18, 0x8
    aes64im x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0000000058684870)
 
aes64im_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x00000000b0d090e0), rs1:x17(0x0000000000000010)
    li  x17, 0x10
    aes64im x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x00000000b0d090e0)


    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x2,signature_4_0)

 
aes64im_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x000000007bbb3bdb), rs1:x16(0x0000000000000020)
    li  x16, 0x20
    aes64im x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x000000007bbb3bdb)
 
aes64im_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x00000000f66d76ad), rs1:x15(0x0000000000000040)
    li  x15, 0x40
    aes64im x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x00000000f66d76ad)
 
aes64im_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x00000000f7daec41), rs1:x14(0x0000000000000080)
    li  x14, 0x80
    aes64im x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x00000000f7daec41)
 
aes64im_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x000000000d090e0b), rs1:x13(0x0000000000000100)
    li  x13, 0x100
    aes64im x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x000000000d090e0b)
 
aes64im_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x000000001a121c16), rs1:x12(0x0000000000000200)
    li  x12, 0x200
    aes64im x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x000000001a121c16)


    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_5_0)

 
aes64im_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x000000003424382c), rs1:x11(0x0000000000000400)
    li  x11, 0x400
    aes64im x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x000000003424382c)
 
aes64im_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0000000068487058), rs1:x10(0x0000000000000800)
    li  x10, 0x800
    aes64im x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000068487058)
 
aes64im_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x00000000d090e0b0), rs1:x9(0x0000000000001000)
    li  x9, 0x1000
    aes64im x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000d090e0b0)
 
aes64im_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x00000000bb3bdb7b), rs1:x8(0x0000000000002000)
    li  x8, 0x2000
    aes64im x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x00000000bb3bdb7b)
 
aes64im_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x000000006d76adf6), rs1:x7(0x0000000000004000)
    li  x7, 0x4000
    aes64im x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x000000006d76adf6)


    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_6_0)

 
aes64im_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x00000000daec41f7), rs1:x6(0x0000000000008000)
    li  x6, 0x8000
    aes64im x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x00000000daec41f7)
 
aes64im_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x00000000090e0b0d), rs1:x5(0x0000000000010000)
    li  x5, 0x10000
    aes64im x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x00000000090e0b0d)
 
aes64im_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x00000000121c161a), rs1:x4(0x0000000000020000)
    li  x4, 0x20000
    aes64im x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x00000000121c161a)
 
aes64im_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0000000024382c34), rs1:x3(0x0000000000040000)
    li  x3, 0x40000
    aes64im x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000024382c34)
 
aes64im_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0000000048705868), rs1:x2(0x0000000000080000)
    li  x2, 0x80000
    aes64im x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000048705868)


    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x5,signature_7_0)

 
aes64im_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0000000090e0b0d0), rs1:x1(0x0000000000100000)
    li  x1, 0x100000
    aes64im x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0000000090e0b0d0)
 
aes64im_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x000000003bdb7bbb), rs1:x31(0x0000000000200000)
    li  x31, 0x200000
    aes64im x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x000000003bdb7bbb)
 
aes64im_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0000000076adf66d), rs1:x30(0x0000000000400000)
    li  x30, 0x400000
    aes64im x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0000000076adf66d)
 
aes64im_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x00000000ec41f7da), rs1:x29(0x0000000000800000)
    li  x29, 0x800000
    aes64im x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x00000000ec41f7da)
 
aes64im_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x000000000e0b0d09), rs1:x28(0x0000000001000000)
    li  x28, 0x1000000
    aes64im x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x000000000e0b0d09)


    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_8_0)

 
aes64im_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x000000001c161a12), rs1:x27(0x0000000002000000)
    li  x27, 0x2000000
    aes64im x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x000000001c161a12)
 
aes64im_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x00000000382c3424), rs1:x26(0x0000000004000000)
    li  x26, 0x4000000
    aes64im x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x00000000382c3424)
 
aes64im_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0000000070586848), rs1:x25(0x0000000008000000)
    li  x25, 0x8000000
    aes64im x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000070586848)
 
aes64im_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x00000000e0b0d090), rs1:x24(0x0000000010000000)
    li  x24, 0x10000000
    aes64im x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000e0b0d090)
 
aes64im_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x00000000db7bbb3b), rs1:x23(0x0000000020000000)
    li  x23, 0x20000000
    aes64im x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000db7bbb3b)


    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_9_0)

 
aes64im_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x00000000adf66d76), rs1:x22(0x0000000040000000)
    li  x22, 0x40000000
    aes64im x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000adf66d76)
 
aes64im_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0000000041f7daec), rs1:x21(0x0000000080000000)
    li  x21, 0x80000000
    aes64im x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000041f7daec)
 
aes64im_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0b0d090e00000000), rs1:x20(0x0000000100000000)
    li  x20, 0x100000000
    aes64im x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0b0d090e00000000)
 
aes64im_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x161a121c00000000), rs1:x19(0x0000000200000000)
    li  x19, 0x200000000
    aes64im x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x161a121c00000000)
 
aes64im_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x2c34243800000000), rs1:x18(0x0000000400000000)
    li  x18, 0x400000000
    aes64im x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x2c34243800000000)


    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x3,signature_10_0)

 
aes64im_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x5868487000000000), rs1:x17(0x0000000800000000)
    li  x17, 0x800000000
    aes64im x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x5868487000000000)
 
aes64im_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0xb0d090e000000000), rs1:x16(0x0000001000000000)
    li  x16, 0x1000000000
    aes64im x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0xb0d090e000000000)
 
aes64im_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x7bbb3bdb00000000), rs1:x15(0x0000002000000000)
    li  x15, 0x2000000000
    aes64im x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x7bbb3bdb00000000)
 
aes64im_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0xf66d76ad00000000), rs1:x14(0x0000004000000000)
    li  x14, 0x4000000000
    aes64im x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0xf66d76ad00000000)
 
aes64im_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0xf7daec4100000000), rs1:x13(0x0000008000000000)
    li  x13, 0x8000000000
    aes64im x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0xf7daec4100000000)


    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_11_0)

 
aes64im_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0d090e0b00000000), rs1:x12(0x0000010000000000)
    li  x12, 0x10000000000
    aes64im x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0d090e0b00000000)
 
aes64im_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x1a121c1600000000), rs1:x11(0x0000020000000000)
    li  x11, 0x20000000000
    aes64im x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x1a121c1600000000)
 
aes64im_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x3424382c00000000), rs1:x10(0x0000040000000000)
    li  x10, 0x40000000000
    aes64im x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x3424382c00000000)
 
aes64im_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x6848705800000000), rs1:x9(0x0000080000000000)
    li  x9, 0x80000000000
    aes64im x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x6848705800000000)
 
aes64im_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0xd090e0b000000000), rs1:x8(0x0000100000000000)
    li  x8, 0x100000000000
    aes64im x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xd090e0b000000000)


    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_12_0)

 
aes64im_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0xbb3bdb7b00000000), rs1:x7(0x0000200000000000)
    li  x7, 0x200000000000
    aes64im x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xbb3bdb7b00000000)
 
aes64im_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x6d76adf600000000), rs1:x6(0x0000400000000000)
    li  x6, 0x400000000000
    aes64im x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x6d76adf600000000)
 
aes64im_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0xdaec41f700000000), rs1:x5(0x0000800000000000)
    li  x5, 0x800000000000
    aes64im x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0xdaec41f700000000)
 
aes64im_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x090e0b0d00000000), rs1:x4(0x0001000000000000)
    li  x4, 0x1000000000000
    aes64im x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x090e0b0d00000000)
 
aes64im_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x121c161a00000000), rs1:x3(0x0002000000000000)
    li  x3, 0x2000000000000
    aes64im x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x121c161a00000000)


    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x4,signature_13_0)

 
aes64im_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x24382c3400000000), rs1:x2(0x0004000000000000)
    li  x2, 0x4000000000000
    aes64im x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x24382c3400000000)
 
aes64im_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x4870586800000000), rs1:x1(0x0008000000000000)
    li  x1, 0x8000000000000
    aes64im x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x4870586800000000)
 
aes64im_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x90e0b0d000000000), rs1:x31(0x0010000000000000)
    li  x31, 0x10000000000000
    aes64im x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x90e0b0d000000000)
 
aes64im_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x3bdb7bbb00000000), rs1:x30(0x0020000000000000)
    li  x30, 0x20000000000000
    aes64im x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x3bdb7bbb00000000)
 
aes64im_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x76adf66d00000000), rs1:x29(0x0040000000000000)
    li  x29, 0x40000000000000
    aes64im x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x76adf66d00000000)


    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_14_0)

 
aes64im_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0xec41f7da00000000), rs1:x28(0x0080000000000000)
    li  x28, 0x80000000000000
    aes64im x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0xec41f7da00000000)
 
aes64im_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0e0b0d0900000000), rs1:x27(0x0100000000000000)
    li  x27, 0x100000000000000
    aes64im x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0e0b0d0900000000)
 
aes64im_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x1c161a1200000000), rs1:x26(0x0200000000000000)
    li  x26, 0x200000000000000
    aes64im x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x1c161a1200000000)
 
aes64im_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x382c342400000000), rs1:x25(0x0400000000000000)
    li  x25, 0x400000000000000
    aes64im x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x382c342400000000)
 
aes64im_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x7058684800000000), rs1:x24(0x0800000000000000)
    li  x24, 0x800000000000000
    aes64im x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x7058684800000000)


    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_15_0)

 
aes64im_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0xe0b0d09000000000), rs1:x23(0x1000000000000000)
    li  x23, 0x1000000000000000
    aes64im x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xe0b0d09000000000)
 
aes64im_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0xdb7bbb3b00000000), rs1:x22(0x2000000000000000)
    li  x22, 0x2000000000000000
    aes64im x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xdb7bbb3b00000000)
 
aes64im_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0xadf66d7600000000), rs1:x21(0x4000000000000000)
    li  x21, 0x4000000000000000
    aes64im x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xadf66d7600000000)
 
aes64im_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x41f7daec00000000), rs1:x20(0x8000000000000000)
    li  x20, 0x8000000000000000
    aes64im x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x41f7daec00000000)
 
aes64im_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000)
    li  x19, 0x0
    aes64im x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)


    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x4,signature_16_0)

 
aes64im_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0xfffffffff4f2f6f1), rs1:x18(0xfffffffffffffffe)
    li  x18, 0xfffffffffffffffe
    aes64im x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0xfffffffff4f2f6f1)
 
aes64im_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0xffffffffe9e5ede3), rs1:x17(0xfffffffffffffffd)
    li  x17, 0xfffffffffffffffd
    aes64im x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0xffffffffe9e5ede3)
 
aes64im_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0xffffffffd3cbdbc7), rs1:x16(0xfffffffffffffffb)
    li  x16, 0xfffffffffffffffb
    aes64im x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0xffffffffd3cbdbc7)
 
aes64im_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0xffffffffa797b78f), rs1:x15(0xfffffffffffffff7)
    li  x15, 0xfffffffffffffff7
    aes64im x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0xffffffffa797b78f)
 
aes64im_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0xffffffff4f2f6f1f), rs1:x14(0xffffffffffffffef)
    li  x14, 0xffffffffffffffef
    aes64im x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0xffffffff4f2f6f1f)


    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_17_0)

 
aes64im_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0xffffffff8444c424), rs1:x13(0xffffffffffffffdf)
    li  x13, 0xffffffffffffffdf
    aes64im x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0xffffffff8444c424)
 
aes64im_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0xffffffff09928952), rs1:x12(0xffffffffffffffbf)
    li  x12, 0xffffffffffffffbf
    aes64im x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xffffffff09928952)
 
aes64im_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0xffffffff082513be), rs1:x11(0xffffffffffffff7f)
    li  x11, 0xffffffffffffff7f
    aes64im x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xffffffff082513be)
 
aes64im_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0xfffffffff2f6f1f4), rs1:x10(0xfffffffffffffeff)
    li  x10, 0xfffffffffffffeff
    aes64im x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xfffffffff2f6f1f4)
 
aes64im_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0xffffffffe5ede3e9), rs1:x9(0xfffffffffffffdff)
    li  x9, 0xfffffffffffffdff
    aes64im x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xffffffffe5ede3e9)


    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_18_0)

 
aes64im_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0xffffffffcbdbc7d3), rs1:x8(0xfffffffffffffbff)
    li  x8, 0xfffffffffffffbff
    aes64im x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xffffffffcbdbc7d3)
 
aes64im_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0xffffffff97b78fa7), rs1:x7(0xfffffffffffff7ff)
    li  x7, 0xfffffffffffff7ff
    aes64im x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xffffffff97b78fa7)
 
aes64im_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0xffffffff2f6f1f4f), rs1:x6(0xffffffffffffefff)
    li  x6, 0xffffffffffffefff
    aes64im x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0xffffffff2f6f1f4f)
 
aes64im_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0xffffffff44c42484), rs1:x5(0xffffffffffffdfff)
    li  x5, 0xffffffffffffdfff
    aes64im x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0xffffffff44c42484)
 
aes64im_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0xffffffff92895209), rs1:x4(0xffffffffffffbfff)
    li  x4, 0xffffffffffffbfff
    aes64im x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0xffffffff92895209)


    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x4,signature_19_0)

 
aes64im_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0xffffffff2513be08), rs1:x3(0xffffffffffff7fff)
    li  x3, 0xffffffffffff7fff
    aes64im x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0xffffffff2513be08)
 
aes64im_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0xfffffffff6f1f4f2), rs1:x2(0xfffffffffffeffff)
    li  x2, 0xfffffffffffeffff
    aes64im x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0xfffffffff6f1f4f2)
 
aes64im_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0xffffffffede3e9e5), rs1:x1(0xfffffffffffdffff)
    li  x1, 0xfffffffffffdffff
    aes64im x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0xffffffffede3e9e5)
 
aes64im_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0xffffffffdbc7d3cb), rs1:x31(0xfffffffffffbffff)
    li  x31, 0xfffffffffffbffff
    aes64im x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0xffffffffdbc7d3cb)
 
aes64im_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0xffffffffb78fa797), rs1:x30(0xfffffffffff7ffff)
    li  x30, 0xfffffffffff7ffff
    aes64im x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0xffffffffb78fa797)


    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_20_0)

 
aes64im_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0xffffffff6f1f4f2f), rs1:x29(0xffffffffffefffff)
    li  x29, 0xffffffffffefffff
    aes64im x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0xffffffff6f1f4f2f)
 
aes64im_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0xffffffffc4248444), rs1:x28(0xffffffffffdfffff)
    li  x28, 0xffffffffffdfffff
    aes64im x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0xffffffffc4248444)
 
aes64im_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0xffffffff89520992), rs1:x27(0xffffffffffbfffff)
    li  x27, 0xffffffffffbfffff
    aes64im x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0xffffffff89520992)
 
aes64im_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0xffffffff13be0825), rs1:x26(0xffffffffff7fffff)
    li  x26, 0xffffffffff7fffff
    aes64im x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xffffffff13be0825)
 
aes64im_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0xfffffffff1f4f2f6), rs1:x25(0xfffffffffeffffff)
    li  x25, 0xfffffffffeffffff
    aes64im x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xfffffffff1f4f2f6)


    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_21_0)

 
aes64im_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0xffffffffe3e9e5ed), rs1:x24(0xfffffffffdffffff)
    li  x24, 0xfffffffffdffffff
    aes64im x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xffffffffe3e9e5ed)
 
aes64im_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0xffffffffc7d3cbdb), rs1:x23(0xfffffffffbffffff)
    li  x23, 0xfffffffffbffffff
    aes64im x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xffffffffc7d3cbdb)
 
aes64im_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0xffffffff8fa797b7), rs1:x22(0xfffffffff7ffffff)
    li  x22, 0xfffffffff7ffffff
    aes64im x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xffffffff8fa797b7)
 
aes64im_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0xffffffff1f4f2f6f), rs1:x21(0xffffffffefffffff)
    li  x21, 0xffffffffefffffff
    aes64im x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xffffffff1f4f2f6f)
 
aes64im_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0xffffffff248444c4), rs1:x20(0xffffffffdfffffff)
    li  x20, 0xffffffffdfffffff
    aes64im x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0xffffffff248444c4)


    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x5,signature_22_0)

 
aes64im_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0xffffffff52099289), rs1:x19(0xffffffffbfffffff)
    li  x19, 0xffffffffbfffffff
    aes64im x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0xffffffff52099289)
 
aes64im_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0xffffffffbe082513), rs1:x18(0xffffffff7fffffff)
    li  x18, 0xffffffff7fffffff
    aes64im x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0xffffffffbe082513)
 
aes64im_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0xf4f2f6f1ffffffff), rs1:x17(0xfffffffeffffffff)
    li  x17, 0xfffffffeffffffff
    aes64im x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0xf4f2f6f1ffffffff)
 
aes64im_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0xe9e5ede3ffffffff), rs1:x16(0xfffffffdffffffff)
    li  x16, 0xfffffffdffffffff
    aes64im x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0xe9e5ede3ffffffff)
 
aes64im_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0xd3cbdbc7ffffffff), rs1:x15(0xfffffffbffffffff)
    li  x15, 0xfffffffbffffffff
    aes64im x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0xd3cbdbc7ffffffff)


    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_23_0)

 
aes64im_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0xa797b78fffffffff), rs1:x14(0xfffffff7ffffffff)
    li  x14, 0xfffffff7ffffffff
    aes64im x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0xa797b78fffffffff)
 
aes64im_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0x4f2f6f1fffffffff), rs1:x13(0xffffffefffffffff)
    li  x13, 0xffffffefffffffff
    aes64im x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x4f2f6f1fffffffff)
 
aes64im_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0x8444c424ffffffff), rs1:x12(0xffffffdfffffffff)
    li  x12, 0xffffffdfffffffff
    aes64im x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x8444c424ffffffff)
 
aes64im_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0x09928952ffffffff), rs1:x11(0xffffffbfffffffff)
    li  x11, 0xffffffbfffffffff
    aes64im x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x09928952ffffffff)
 
aes64im_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0x082513beffffffff), rs1:x10(0xffffff7fffffffff)
    li  x10, 0xffffff7fffffffff
    aes64im x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x082513beffffffff)


    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_24_0)

 
aes64im_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0xf2f6f1f4ffffffff), rs1:x9(0xfffffeffffffffff)
    li  x9, 0xfffffeffffffffff
    aes64im x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xf2f6f1f4ffffffff)
 
aes64im_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0xe5ede3e9ffffffff), rs1:x8(0xfffffdffffffffff)
    li  x8, 0xfffffdffffffffff
    aes64im x24, x8
    sd x24, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xe5ede3e9ffffffff)
 
aes64im_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0xcbdbc7d3ffffffff), rs1:x7(0xfffffbffffffffff)
    li  x7, 0xfffffbffffffffff
    aes64im x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xcbdbc7d3ffffffff)
 
aes64im_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0x97b78fa7ffffffff), rs1:x6(0xfffff7ffffffffff)
    li  x6, 0xfffff7ffffffffff
    aes64im x26, x6
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x97b78fa7ffffffff)
 
aes64im_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0x2f6f1f4fffffffff), rs1:x5(0xffffefffffffffff)
    li  x5, 0xffffefffffffffff
    aes64im x27, x5
    sd x27, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x2f6f1f4fffffffff)


    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x5,signature_25_0)

 
aes64im_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0x44c42484ffffffff), rs1:x4(0xffffdfffffffffff)
    li  x4, 0xffffdfffffffffff
    aes64im x28, x4
    sd x28, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x28, 0x44c42484ffffffff)
 
aes64im_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0x92895209ffffffff), rs1:x3(0xffffbfffffffffff)
    li  x3, 0xffffbfffffffffff
    aes64im x29, x3
    sd x29, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x29, 0x92895209ffffffff)
 
aes64im_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0x2513be08ffffffff), rs1:x2(0xffff7fffffffffff)
    li  x2, 0xffff7fffffffffff
    aes64im x30, x2
    sd x30, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x30, 0x2513be08ffffffff)
 
aes64im_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0xf6f1f4f2ffffffff), rs1:x1(0xfffeffffffffffff)
    li  x1, 0xfffeffffffffffff
    aes64im x31, x1
    sd x31, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0xf6f1f4f2ffffffff)
 
aes64im_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0xede3e9e5ffffffff), rs1:x31(0xfffdffffffffffff)
    li  x31, 0xfffdffffffffffff
    aes64im x1, x31
    sd x1, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0xede3e9e5ffffffff)


    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_26_0)

 
aes64im_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0xdbc7d3cbffffffff), rs1:x30(0xfffbffffffffffff)
    li  x30, 0xfffbffffffffffff
    aes64im x2, x30
    sd x2, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0xdbc7d3cbffffffff)
 
aes64im_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0xb78fa797ffffffff), rs1:x29(0xfff7ffffffffffff)
    li  x29, 0xfff7ffffffffffff
    aes64im x3, x29
    sd x3, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0xb78fa797ffffffff)
 
aes64im_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0x6f1f4f2fffffffff), rs1:x28(0xffefffffffffffff)
    li  x28, 0xffefffffffffffff
    aes64im x4, x28
    sd x4, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x6f1f4f2fffffffff)
 
aes64im_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0xc4248444ffffffff), rs1:x27(0xffdfffffffffffff)
    li  x27, 0xffdfffffffffffff
    aes64im x5, x27
    sd x5, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0xc4248444ffffffff)
 
aes64im_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0x89520992ffffffff), rs1:x26(0xffbfffffffffffff)
    li  x26, 0xffbfffffffffffff
    aes64im x6, x26
    sd x6, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x6, 0x89520992ffffffff)


    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_27_0)

 
aes64im_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0x13be0825ffffffff), rs1:x25(0xff7fffffffffffff)
    li  x25, 0xff7fffffffffffff
    aes64im x7, x25
    sd x7, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x13be0825ffffffff)
 
aes64im_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0xf1f4f2f6ffffffff), rs1:x24(0xfeffffffffffffff)
    li  x24, 0xfeffffffffffffff
    aes64im x8, x24
    sd x8, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xf1f4f2f6ffffffff)
 
aes64im_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0xe3e9e5edffffffff), rs1:x23(0xfdffffffffffffff)
    li  x23, 0xfdffffffffffffff
    aes64im x9, x23
    sd x9, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xe3e9e5edffffffff)
 
aes64im_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0xc7d3cbdbffffffff), rs1:x22(0xfbffffffffffffff)
    li  x22, 0xfbffffffffffffff
    aes64im x10, x22
    sd x10, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xc7d3cbdbffffffff)
 
aes64im_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0x8fa797b7ffffffff), rs1:x21(0xf7ffffffffffffff)
    li  x21, 0xf7ffffffffffffff
    aes64im x11, x21
    sd x11, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x8fa797b7ffffffff)


    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x6,signature_28_0)

 
aes64im_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0x1f4f2f6fffffffff), rs1:x20(0xefffffffffffffff)
    li  x20, 0xefffffffffffffff
    aes64im x12, x20
    sd x12, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x1f4f2f6fffffffff)
 
aes64im_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0x248444c4ffffffff), rs1:x19(0xdfffffffffffffff)
    li  x19, 0xdfffffffffffffff
    aes64im x13, x19
    sd x13, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x248444c4ffffffff)
 
aes64im_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0x52099289ffffffff), rs1:x18(0xbfffffffffffffff)
    li  x18, 0xbfffffffffffffff
    aes64im x14, x18
    sd x14, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x52099289ffffffff)
 
aes64im_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0xbe082513ffffffff), rs1:x17(0x7fffffffffffffff)
    li  x17, 0x7fffffffffffffff
    aes64im x15, x17
    sd x15, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0xbe082513ffffffff)
 
aes64im_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xffffffffffffffff)
    li  x16, 0xffffffffffffffff
    aes64im x16, x16
    sd x16, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x16, 0xffffffffffffffff)


    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_29_0)

 
aes64im_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x000000000b0d090e), rs1:x15(0x0000000000000001)
    li  x15, 0x1
    aes64im x17, x15
    sd x17, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x17, 0x000000000b0d090e)
 
aes64im_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x00000000161a121c), rs1:x14(0x0000000000000002)
    li  x14, 0x2
    aes64im x18, x14
    sd x18, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x00000000161a121c)
 
aes64im_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x000000002c342438), rs1:x13(0x0000000000000004)
    li  x13, 0x4
    aes64im x19, x13
    sd x19, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x000000002c342438)
 
aes64im_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0000000058684870), rs1:x12(0x0000000000000008)
    li  x12, 0x8
    aes64im x20, x12
    sd x20, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0000000058684870)
 
aes64im_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x00000000b0d090e0), rs1:x11(0x0000000000000010)
    li  x11, 0x10
    aes64im x21, x11
    sd x21, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000b0d090e0)


    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_30_0)

 
aes64im_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x000000007bbb3bdb), rs1:x10(0x0000000000000020)
    li  x10, 0x20
    aes64im x22, x10
    sd x22, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x000000007bbb3bdb)
 
aes64im_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x00000000f66d76ad), rs1:x9(0x0000000000000040)
    li  x9, 0x40
    aes64im x23, x9
    sd x23, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000f66d76ad)
 
aes64im_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x00000000f7daec41), rs1:x8(0x0000000000000080)
    li  x8, 0x80
    aes64im x24, x8
    sd x24, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x00000000f7daec41)
 
aes64im_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x000000000d090e0b), rs1:x7(0x0000000000000100)
    li  x7, 0x100
    aes64im x25, x7
    sd x25, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x000000000d090e0b)
 
aes64im_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x000000001a121c16), rs1:x6(0x0000000000000200)
    li  x6, 0x200
    aes64im x26, x6
    sd x26, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x000000001a121c16)


    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x6,signature_31_0)

 
aes64im_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x000000003424382c), rs1:x5(0x0000000000000400)
    li  x5, 0x400
    aes64im x27, x5
    sd x27, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x000000003424382c)
 
aes64im_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000068487058), rs1:x4(0x0000000000000800)
    li  x4, 0x800
    aes64im x28, x4
    sd x28, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000068487058)
 
aes64im_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x00000000d090e0b0), rs1:x3(0x0000000000001000)
    li  x3, 0x1000
    aes64im x29, x3
    sd x29, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x00000000d090e0b0)
 
aes64im_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x00000000bb3bdb7b), rs1:x2(0x0000000000002000)
    li  x2, 0x2000
    aes64im x30, x2
    sd x30, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x00000000bb3bdb7b)
 
aes64im_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x000000006d76adf6), rs1:x1(0x0000000000004000)
    li  x1, 0x4000
    aes64im x31, x1
    sd x31, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x000000006d76adf6)


    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x6,signature_32_0)

 
aes64im_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x00000000daec41f7), rs1:x31(0x0000000000008000)
    li  x31, 0x8000
    aes64im x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x00000000daec41f7)
 
aes64im_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x00000000090e0b0d), rs1:x30(0x0000000000010000)
    li  x30, 0x10000
    aes64im x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x00000000090e0b0d)
 
aes64im_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x00000000121c161a), rs1:x29(0x0000000000020000)
    li  x29, 0x20000
    aes64im x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x00000000121c161a)
 
aes64im_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000024382c34), rs1:x28(0x0000000000040000)
    li  x28, 0x40000
    aes64im x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x0000000024382c34)
 
aes64im_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000048705868), rs1:x27(0x0000000000080000)
    li  x27, 0x80000
    aes64im x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x0000000048705868)


    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_33_0)

 
aes64im_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000090e0b0d0), rs1:x26(0x0000000000100000)
    li  x26, 0x100000
    aes64im x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000090e0b0d0)
 
aes64im_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x000000003bdb7bbb), rs1:x25(0x0000000000200000)
    li  x25, 0x200000
    aes64im x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x000000003bdb7bbb)
 
aes64im_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000076adf66d), rs1:x24(0x0000000000400000)
    li  x24, 0x400000
    aes64im x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000076adf66d)
 
aes64im_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x00000000ec41f7da), rs1:x23(0x0000000000800000)
    li  x23, 0x800000
    aes64im x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000ec41f7da)
 
aes64im_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x000000000e0b0d09), rs1:x22(0x0000000001000000)
    li  x22, 0x1000000
    aes64im x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x000000000e0b0d09)


    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_34_0)

 
aes64im_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x000000001c161a12), rs1:x21(0x0000000002000000)
    li  x21, 0x2000000
    aes64im x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x000000001c161a12)
 
aes64im_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x00000000382c3424), rs1:x20(0x0000000004000000)
    li  x20, 0x4000000
    aes64im x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x00000000382c3424)
 
aes64im_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000070586848), rs1:x19(0x0000000008000000)
    li  x19, 0x8000000
    aes64im x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0000000070586848)
 
aes64im_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x00000000e0b0d090), rs1:x18(0x0000000010000000)
    li  x18, 0x10000000
    aes64im x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x00000000e0b0d090)
 
aes64im_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x00000000db7bbb3b), rs1:x17(0x0000000020000000)
    li  x17, 0x20000000
    aes64im x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x00000000db7bbb3b)


    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x2,signature_35_0)

 
aes64im_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x00000000adf66d76), rs1:x16(0x0000000040000000)
    li  x16, 0x40000000
    aes64im x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x00000000adf66d76)
 
aes64im_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000000041f7daec), rs1:x15(0x0000000080000000)
    li  x15, 0x80000000
    aes64im x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x0000000041f7daec)
 
aes64im_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0b0d090e00000000), rs1:x14(0x0000000100000000)
    li  x14, 0x100000000
    aes64im x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x0b0d090e00000000)
 
aes64im_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x161a121c00000000), rs1:x13(0x0000000200000000)
    li  x13, 0x200000000
    aes64im x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x161a121c00000000)
 
aes64im_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x2c34243800000000), rs1:x12(0x0000000400000000)
    li  x12, 0x400000000
    aes64im x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x2c34243800000000)


    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_36_0)

 
aes64im_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x5868487000000000), rs1:x11(0x0000000800000000)
    li  x11, 0x800000000
    aes64im x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x5868487000000000)
 
aes64im_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0xb0d090e000000000), rs1:x10(0x0000001000000000)
    li  x10, 0x1000000000
    aes64im x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xb0d090e000000000)
 
aes64im_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x7bbb3bdb00000000), rs1:x9(0x0000002000000000)
    li  x9, 0x2000000000
    aes64im x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x7bbb3bdb00000000)
 
aes64im_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0xf66d76ad00000000), rs1:x8(0x0000004000000000)
    li  x8, 0x4000000000
    aes64im x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xf66d76ad00000000)
 
aes64im_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0xf7daec4100000000), rs1:x7(0x0000008000000000)
    li  x7, 0x8000000000
    aes64im x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xf7daec4100000000)


    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_37_0)

 
aes64im_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0d090e0b00000000), rs1:x6(0x0000010000000000)
    li  x6, 0x10000000000
    aes64im x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x0d090e0b00000000)
 
aes64im_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x1a121c1600000000), rs1:x5(0x0000020000000000)
    li  x5, 0x20000000000
    aes64im x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x1a121c1600000000)
 
aes64im_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x3424382c00000000), rs1:x4(0x0000040000000000)
    li  x4, 0x40000000000
    aes64im x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x3424382c00000000)
 
aes64im_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x6848705800000000), rs1:x3(0x0000080000000000)
    li  x3, 0x80000000000
    aes64im x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x6848705800000000)
 
aes64im_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0xd090e0b000000000), rs1:x2(0x0000100000000000)
    li  x2, 0x100000000000
    aes64im x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0xd090e0b000000000)


    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x5,signature_38_0)

 
aes64im_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0xbb3bdb7b00000000), rs1:x1(0x0000200000000000)
    li  x1, 0x200000000000
    aes64im x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0xbb3bdb7b00000000)
 
aes64im_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x6d76adf600000000), rs1:x31(0x0000400000000000)
    li  x31, 0x400000000000
    aes64im x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x6d76adf600000000)
 
aes64im_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0xdaec41f700000000), rs1:x30(0x0000800000000000)
    li  x30, 0x800000000000
    aes64im x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0xdaec41f700000000)
 
aes64im_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x090e0b0d00000000), rs1:x29(0x0001000000000000)
    li  x29, 0x1000000000000
    aes64im x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x090e0b0d00000000)
 
aes64im_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x121c161a00000000), rs1:x28(0x0002000000000000)
    li  x28, 0x2000000000000
    aes64im x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x121c161a00000000)


    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_39_0)

 
aes64im_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x24382c3400000000), rs1:x27(0x0004000000000000)
    li  x27, 0x4000000000000
    aes64im x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x24382c3400000000)
 
aes64im_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x4870586800000000), rs1:x26(0x0008000000000000)
    li  x26, 0x8000000000000
    aes64im x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x4870586800000000)
 
aes64im_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x90e0b0d000000000), rs1:x25(0x0010000000000000)
    li  x25, 0x10000000000000
    aes64im x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x90e0b0d000000000)
 
aes64im_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x3bdb7bbb00000000), rs1:x24(0x0020000000000000)
    li  x24, 0x20000000000000
    aes64im x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x3bdb7bbb00000000)
 
aes64im_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x76adf66d00000000), rs1:x23(0x0040000000000000)
    li  x23, 0x40000000000000
    aes64im x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x76adf66d00000000)


    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_40_0)

 
aes64im_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0xec41f7da00000000), rs1:x22(0x0080000000000000)
    li  x22, 0x80000000000000
    aes64im x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xec41f7da00000000)
 
aes64im_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0e0b0d0900000000), rs1:x21(0x0100000000000000)
    li  x21, 0x100000000000000
    aes64im x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0e0b0d0900000000)
 
aes64im_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x1c161a1200000000), rs1:x20(0x0200000000000000)
    li  x20, 0x200000000000000
    aes64im x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x1c161a1200000000)
 
aes64im_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x382c342400000000), rs1:x19(0x0400000000000000)
    li  x19, 0x400000000000000
    aes64im x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x382c342400000000)
 
aes64im_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x7058684800000000), rs1:x18(0x0800000000000000)
    li  x18, 0x800000000000000
    aes64im x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x7058684800000000)


    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x3,signature_41_0)

 
aes64im_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0xe0b0d09000000000), rs1:x17(0x1000000000000000)
    li  x17, 0x1000000000000000
    aes64im x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0xe0b0d09000000000)
 
aes64im_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0xdb7bbb3b00000000), rs1:x16(0x2000000000000000)
    li  x16, 0x2000000000000000
    aes64im x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0xdb7bbb3b00000000)
 
aes64im_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0xadf66d7600000000), rs1:x15(0x4000000000000000)
    li  x15, 0x4000000000000000
    aes64im x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0xadf66d7600000000)
 
aes64im_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x41f7daec00000000), rs1:x14(0x8000000000000000)
    li  x14, 0x8000000000000000
    aes64im x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x41f7daec00000000)
 
aes64im_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000)
    li  x13, 0x0
    aes64im x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000000000000000)


    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_42_0)

 
aes64im_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0xfffffffff4f2f6f1), rs1:x12(0xfffffffffffffffe)
    li  x12, 0xfffffffffffffffe
    aes64im x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xfffffffff4f2f6f1)
 
aes64im_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0xffffffffe9e5ede3), rs1:x11(0xfffffffffffffffd)
    li  x11, 0xfffffffffffffffd
    aes64im x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xffffffffe9e5ede3)
 
aes64im_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0xffffffffd3cbdbc7), rs1:x10(0xfffffffffffffffb)
    li  x10, 0xfffffffffffffffb
    aes64im x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xffffffffd3cbdbc7)
 
aes64im_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0xffffffffa797b78f), rs1:x9(0xfffffffffffffff7)
    li  x9, 0xfffffffffffffff7
    aes64im x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xffffffffa797b78f)
 
aes64im_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0xffffffff4f2f6f1f), rs1:x8(0xffffffffffffffef)
    li  x8, 0xffffffffffffffef
    aes64im x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xffffffff4f2f6f1f)


    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_43_0)

 
aes64im_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0xffffffff8444c424), rs1:x7(0xffffffffffffffdf)
    li  x7, 0xffffffffffffffdf
    aes64im x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xffffffff8444c424)
 
aes64im_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0xffffffff09928952), rs1:x6(0xffffffffffffffbf)
    li  x6, 0xffffffffffffffbf
    aes64im x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0xffffffff09928952)
 
aes64im_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0xffffffff082513be), rs1:x5(0xffffffffffffff7f)
    li  x5, 0xffffffffffffff7f
    aes64im x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0xffffffff082513be)
 
aes64im_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0xfffffffff2f6f1f4), rs1:x4(0xfffffffffffffeff)
    li  x4, 0xfffffffffffffeff
    aes64im x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0xfffffffff2f6f1f4)
 
aes64im_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0xffffffffe5ede3e9), rs1:x3(0xfffffffffffffdff)
    li  x3, 0xfffffffffffffdff
    aes64im x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0xffffffffe5ede3e9)


    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x4,signature_44_0)

 
aes64im_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0xffffffffcbdbc7d3), rs1:x2(0xfffffffffffffbff)
    li  x2, 0xfffffffffffffbff
    aes64im x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0xffffffffcbdbc7d3)
 
aes64im_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0xffffffff97b78fa7), rs1:x1(0xfffffffffffff7ff)
    li  x1, 0xfffffffffffff7ff
    aes64im x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0xffffffff97b78fa7)
 
aes64im_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0xffffffff2f6f1f4f), rs1:x31(0xffffffffffffefff)
    li  x31, 0xffffffffffffefff
    aes64im x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0xffffffff2f6f1f4f)
 
aes64im_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0xffffffff44c42484), rs1:x30(0xffffffffffffdfff)
    li  x30, 0xffffffffffffdfff
    aes64im x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0xffffffff44c42484)
 
aes64im_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0xffffffff92895209), rs1:x29(0xffffffffffffbfff)
    li  x29, 0xffffffffffffbfff
    aes64im x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0xffffffff92895209)


    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_45_0)

 
aes64im_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0xffffffff2513be08), rs1:x28(0xffffffffffff7fff)
    li  x28, 0xffffffffffff7fff
    aes64im x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0xffffffff2513be08)
 
aes64im_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0xfffffffff6f1f4f2), rs1:x27(0xfffffffffffeffff)
    li  x27, 0xfffffffffffeffff
    aes64im x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0xfffffffff6f1f4f2)
 
aes64im_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0xffffffffede3e9e5), rs1:x26(0xfffffffffffdffff)
    li  x26, 0xfffffffffffdffff
    aes64im x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xffffffffede3e9e5)
 
aes64im_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0xffffffffdbc7d3cb), rs1:x25(0xfffffffffffbffff)
    li  x25, 0xfffffffffffbffff
    aes64im x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xffffffffdbc7d3cb)
 
aes64im_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0xffffffffb78fa797), rs1:x24(0xfffffffffff7ffff)
    li  x24, 0xfffffffffff7ffff
    aes64im x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xffffffffb78fa797)


    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_46_0)

 
aes64im_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0xffffffff6f1f4f2f), rs1:x23(0xffffffffffefffff)
    li  x23, 0xffffffffffefffff
    aes64im x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xffffffff6f1f4f2f)
 
aes64im_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0xffffffffc4248444), rs1:x22(0xffffffffffdfffff)
    li  x22, 0xffffffffffdfffff
    aes64im x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xffffffffc4248444)
 
aes64im_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0xffffffff89520992), rs1:x21(0xffffffffffbfffff)
    li  x21, 0xffffffffffbfffff
    aes64im x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xffffffff89520992)
 
aes64im_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0xffffffff13be0825), rs1:x20(0xffffffffff7fffff)
    li  x20, 0xffffffffff7fffff
    aes64im x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0xffffffff13be0825)
 
aes64im_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0xfffffffff1f4f2f6), rs1:x19(0xfffffffffeffffff)
    li  x19, 0xfffffffffeffffff
    aes64im x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0xfffffffff1f4f2f6)


    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x4,signature_47_0)

 
aes64im_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0xffffffffe3e9e5ed), rs1:x18(0xfffffffffdffffff)
    li  x18, 0xfffffffffdffffff
    aes64im x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0xffffffffe3e9e5ed)
 
aes64im_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0xffffffffc7d3cbdb), rs1:x17(0xfffffffffbffffff)
    li  x17, 0xfffffffffbffffff
    aes64im x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0xffffffffc7d3cbdb)
 
aes64im_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0xffffffff8fa797b7), rs1:x16(0xfffffffff7ffffff)
    li  x16, 0xfffffffff7ffffff
    aes64im x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0xffffffff8fa797b7)
 
aes64im_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0xffffffff1f4f2f6f), rs1:x15(0xffffffffefffffff)
    li  x15, 0xffffffffefffffff
    aes64im x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0xffffffff1f4f2f6f)
 
aes64im_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0xffffffff248444c4), rs1:x14(0xffffffffdfffffff)
    li  x14, 0xffffffffdfffffff
    aes64im x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0xffffffff248444c4)


    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_48_0)

 
aes64im_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0xffffffff52099289), rs1:x13(0xffffffffbfffffff)
    li  x13, 0xffffffffbfffffff
    aes64im x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0xffffffff52099289)
 
aes64im_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0xffffffffbe082513), rs1:x12(0xffffffff7fffffff)
    li  x12, 0xffffffff7fffffff
    aes64im x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xffffffffbe082513)
 
aes64im_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0xf4f2f6f1ffffffff), rs1:x11(0xfffffffeffffffff)
    li  x11, 0xfffffffeffffffff
    aes64im x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xf4f2f6f1ffffffff)
 
aes64im_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0xe9e5ede3ffffffff), rs1:x10(0xfffffffdffffffff)
    li  x10, 0xfffffffdffffffff
    aes64im x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xe9e5ede3ffffffff)
 
aes64im_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0xd3cbdbc7ffffffff), rs1:x9(0xfffffffbffffffff)
    li  x9, 0xfffffffbffffffff
    aes64im x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xd3cbdbc7ffffffff)


    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_49_0)

 
aes64im_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0xa797b78fffffffff), rs1:x8(0xfffffff7ffffffff)
    li  x8, 0xfffffff7ffffffff
    aes64im x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xa797b78fffffffff)
 
aes64im_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0x4f2f6f1fffffffff), rs1:x7(0xffffffefffffffff)
    li  x7, 0xffffffefffffffff
    aes64im x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x4f2f6f1fffffffff)
 
aes64im_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0x8444c424ffffffff), rs1:x6(0xffffffdfffffffff)
    li  x6, 0xffffffdfffffffff
    aes64im x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x8444c424ffffffff)
 
aes64im_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0x09928952ffffffff), rs1:x5(0xffffffbfffffffff)
    li  x5, 0xffffffbfffffffff
    aes64im x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x09928952ffffffff)
 
aes64im_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0x082513beffffffff), rs1:x4(0xffffff7fffffffff)
    li  x4, 0xffffff7fffffffff
    aes64im x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x082513beffffffff)


    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x4,signature_50_0)

 
aes64im_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0xf2f6f1f4ffffffff), rs1:x3(0xfffffeffffffffff)
    li  x3, 0xfffffeffffffffff
    aes64im x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0xf2f6f1f4ffffffff)
 
aes64im_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0xe5ede3e9ffffffff), rs1:x2(0xfffffdffffffffff)
    li  x2, 0xfffffdffffffffff
    aes64im x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0xe5ede3e9ffffffff)
 
aes64im_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0xcbdbc7d3ffffffff), rs1:x1(0xfffffbffffffffff)
    li  x1, 0xfffffbffffffffff
    aes64im x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0xcbdbc7d3ffffffff)
 
aes64im_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0x97b78fa7ffffffff), rs1:x31(0xfffff7ffffffffff)
    li  x31, 0xfffff7ffffffffff
    aes64im x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x97b78fa7ffffffff)
 
aes64im_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0x2f6f1f4fffffffff), rs1:x30(0xffffefffffffffff)
    li  x30, 0xffffefffffffffff
    aes64im x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x2f6f1f4fffffffff)


    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_51_0)

 
aes64im_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0x44c42484ffffffff), rs1:x29(0xffffdfffffffffff)
    li  x29, 0xffffdfffffffffff
    aes64im x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0x44c42484ffffffff)
 
aes64im_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0x92895209ffffffff), rs1:x28(0xffffbfffffffffff)
    li  x28, 0xffffbfffffffffff
    aes64im x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x92895209ffffffff)
 
aes64im_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0x2513be08ffffffff), rs1:x27(0xffff7fffffffffff)
    li  x27, 0xffff7fffffffffff
    aes64im x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x2513be08ffffffff)
 
aes64im_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0xf6f1f4f2ffffffff), rs1:x26(0xfffeffffffffffff)
    li  x26, 0xfffeffffffffffff
    aes64im x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xf6f1f4f2ffffffff)
 
aes64im_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0xede3e9e5ffffffff), rs1:x25(0xfffdffffffffffff)
    li  x25, 0xfffdffffffffffff
    aes64im x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xede3e9e5ffffffff)


    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_52_0)

 
aes64im_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0xdbc7d3cbffffffff), rs1:x24(0xfffbffffffffffff)
    li  x24, 0xfffbffffffffffff
    aes64im x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xdbc7d3cbffffffff)
 
aes64im_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0xb78fa797ffffffff), rs1:x23(0xfff7ffffffffffff)
    li  x23, 0xfff7ffffffffffff
    aes64im x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xb78fa797ffffffff)
 
aes64im_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0x6f1f4f2fffffffff), rs1:x22(0xffefffffffffffff)
    li  x22, 0xffefffffffffffff
    aes64im x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x6f1f4f2fffffffff)
 
aes64im_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0xc4248444ffffffff), rs1:x21(0xffdfffffffffffff)
    li  x21, 0xffdfffffffffffff
    aes64im x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xc4248444ffffffff)
 
aes64im_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0x89520992ffffffff), rs1:x20(0xffbfffffffffffff)
    li  x20, 0xffbfffffffffffff
    aes64im x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x89520992ffffffff)


    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x5,signature_53_0)

 
aes64im_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0x13be0825ffffffff), rs1:x19(0xff7fffffffffffff)
    li  x19, 0xff7fffffffffffff
    aes64im x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0x13be0825ffffffff)
 
aes64im_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0xf1f4f2f6ffffffff), rs1:x18(0xfeffffffffffffff)
    li  x18, 0xfeffffffffffffff
    aes64im x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0xf1f4f2f6ffffffff)
 
aes64im_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0xe3e9e5edffffffff), rs1:x17(0xfdffffffffffffff)
    li  x17, 0xfdffffffffffffff
    aes64im x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0xe3e9e5edffffffff)
 
aes64im_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0xc7d3cbdbffffffff), rs1:x16(0xfbffffffffffffff)
    li  x16, 0xfbffffffffffffff
    aes64im x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0xc7d3cbdbffffffff)
 
aes64im_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0x8fa797b7ffffffff), rs1:x15(0xf7ffffffffffffff)
    li  x15, 0xf7ffffffffffffff
    aes64im x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0x8fa797b7ffffffff)


    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_54_0)

 
aes64im_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0x1f4f2f6fffffffff), rs1:x14(0xefffffffffffffff)
    li  x14, 0xefffffffffffffff
    aes64im x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x1f4f2f6fffffffff)
 
aes64im_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0x248444c4ffffffff), rs1:x13(0xdfffffffffffffff)
    li  x13, 0xdfffffffffffffff
    aes64im x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x248444c4ffffffff)
 
aes64im_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0x52099289ffffffff), rs1:x12(0xbfffffffffffffff)
    li  x12, 0xbfffffffffffffff
    aes64im x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x52099289ffffffff)
 
aes64im_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0xbe082513ffffffff), rs1:x11(0x7fffffffffffffff)
    li  x11, 0x7fffffffffffffff
    aes64im x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xbe082513ffffffff)
 
aes64im_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xffffffffffffffff)
    li  x10, 0xffffffffffffffff
    aes64im x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xffffffffffffffff)


    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_55_0)

 
aes64im_01_inst_270:
    // Test 270:  Test with random values
    // result rd:x23(0x8bb2dcd8f7741616), rs1:x9(0x10fd3dedadea5195)
    li  x9, 0x10fd3dedadea5195
    aes64im x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x8bb2dcd8f7741616)
 
aes64im_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1)
    li  x8, 0xbd295ce2d2ffbec1
    aes64im x0, x8
    sd x0, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x0, 0x0000000000000000)
 
aes64im_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0x9d2ea52132bc8652), rs1:x7(0xc9649f05a8e1a8bb)
    li  x7, 0xc9649f05a8e1a8bb
    aes64im x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x9d2ea52132bc8652)
 
aes64im_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb)
    li  x0, 0x3541291848c99fcb
    aes64im x26, x0
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000000000)
	
#endif


RVTEST_CODE_END aes64im_01_code_end
RVTEST_CODE_BEGIN orn_01_init orn_01_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x6,signature_1_0)


orn_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x30fdffffedee73dd), rs1:x31(0x10fd3dedadea5195), rs2:x16(0xdf7f3844121bcc23)
    TEST_RR_OP(orn, x1, x31, x16, 0x30fdffffedee73dd, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x6, 0, x7)

orn_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0xbf7b5fe7dbffffe5), rs1:x30(0xbd295ce2d2ffbec1), rs2:x15(0xf5adb41aa47d105b)
    TEST_RR_OP(orn, x2, x30, x15, 0xbf7b5fe7dbffffe5, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x6, 8, x7)

orn_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0xfd6d9f85afe5adbf), rs1:x29(0xc9649f05a8e1a8bb), rs2:x14(0x82f6747f707af2c0)
    TEST_RR_OP(orn, x3, x29, x14, 0xfd6d9f85afe5adbf, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x6, 16, x7)

orn_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0xbd57f93b5eed9fff), rs1:x28(0x3541291848c99fcb), rs2:x13(0x73a92fd4e19bfbc3)
    TEST_RR_OP(orn, x4, x28, x13, 0xbd57f93b5eed9fff, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x6, 24, x7)

orn_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0xbbb6f7ebef7dff5f), rs1:x27(0x10a24740461d524f), rs2:x12(0x546b0e54528a10af)
    TEST_RR_OP(orn, x5, x27, x12, 0xbbb6f7ebef7dff5f, 0x10a24740461d524f, 0x546b0e54528a10af, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_2_0)


orn_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0xff7fbefffbeabdbf), rs1:x26(0x546b0e54528a10af), rs2:x11(0x10a24740461d524f)
    TEST_RR_OP(orn, x6, x26, x11, 0xff7fbefffbeabdbf, 0x546b0e54528a10af, 0x10a24740461d524f, x1, 0, x2)

orn_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0xfbbffff7f7bffbf7), rs1:x25(0x73a92fd4e19bfbc3), rs2:x10(0x3541291848c99fcb)
    TEST_RR_OP(orn, x7, x25, x10, 0xfbbffff7f7bffbf7, 0x73a92fd4e19bfbc3, 0x3541291848c99fcb, x1, 8, x2)

orn_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0xb6ff74ff777ef7c4), rs1:x24(0x82f6747f707af2c0), rs2:x9(0xc9649f05a8e1a8bb)
    TEST_RR_OP(orn, x8, x24, x9, 0xb6ff74ff777ef7c4, 0x82f6747f707af2c0, 0xc9649f05a8e1a8bb, x1, 16, x2)

orn_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0xf7ffb71fad7d517f), rs1:x23(0xf5adb41aa47d105b), rs2:x8(0xbd295ce2d2ffbec1)
    TEST_RR_OP(orn, x9, x23, x8, 0xf7ffb71fad7d517f, 0xf5adb41aa47d105b, 0xbd295ce2d2ffbec1, x1, 24, x2)

orn_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0xff7ffa56521fee6b), rs1:x22(0xdf7f3844121bcc23), rs2:x7(0x10fd3dedadea5195)
    TEST_RR_OP(orn, x10, x22, x7, 0xff7ffa56521fee6b, 0xdf7f3844121bcc23, 0x10fd3dedadea5195, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_3_0)


orn_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000001), rs1:x21(0x0000000000000001), rs2:x6(0xffffffffffffffff)
    TEST_RR_OP(orn, x11, x21, x6, 0x0000000000000001, 0x1, 0xffffffffffffffff, x1, 0, x7)

orn_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x8000000000000002), rs1:x20(0x0000000000000002), rs2:x5(0x7fffffffffffffff)
    TEST_RR_OP(orn, x12, x20, x5, 0x8000000000000002, 0x2, 0x7fffffffffffffff, x1, 8, x7)

orn_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x4000000000000004), rs1:x19(0x0000000000000004), rs2:x4(0xbfffffffffffffff)
    TEST_RR_OP(orn, x13, x19, x4, 0x4000000000000004, 0x4, 0xbfffffffffffffff, x1, 16, x7)

orn_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x2000000000000008), rs1:x18(0x0000000000000008), rs2:x3(0xdfffffffffffffff)
    TEST_RR_OP(orn, x14, x18, x3, 0x2000000000000008, 0x8, 0xdfffffffffffffff, x1, 24, x7)

orn_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x1000000000000010), rs1:x17(0x0000000000000010), rs2:x2(0xefffffffffffffff)
    TEST_RR_OP(orn, x15, x17, x2, 0x1000000000000010, 0x10, 0xefffffffffffffff, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x2,signature_4_0)


orn_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x0800000000000020), rs1:x16(0x0000000000000020), rs2:x1(0xf7ffffffffffffff)
    TEST_RR_OP(orn, x16, x16, x1, 0x0800000000000020, 0x20, 0xf7ffffffffffffff, x2, 0, x3)

orn_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x0400000000000040), rs1:x15(0x0000000000000040), rs2:x31(0xfbffffffffffffff)
    TEST_RR_OP(orn, x17, x15, x31, 0x0400000000000040, 0x40, 0xfbffffffffffffff, x2, 8, x3)

orn_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x0200000000000080), rs1:x14(0x0000000000000080), rs2:x30(0xfdffffffffffffff)
    TEST_RR_OP(orn, x18, x14, x30, 0x0200000000000080, 0x80, 0xfdffffffffffffff, x2, 16, x3)

orn_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0100000000000100), rs1:x13(0x0000000000000100), rs2:x29(0xfeffffffffffffff)
    TEST_RR_OP(orn, x19, x13, x29, 0x0100000000000100, 0x100, 0xfeffffffffffffff, x2, 24, x3)

orn_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0080000000000200), rs1:x12(0x0000000000000200), rs2:x28(0xff7fffffffffffff)
    TEST_RR_OP(orn, x20, x12, x28, 0x0080000000000200, 0x200, 0xff7fffffffffffff, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_5_0)


orn_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x0040000000000400), rs1:x11(0x0000000000000400), rs2:x27(0xffbfffffffffffff)
    TEST_RR_OP(orn, x21, x11, x27, 0x0040000000000400, 0x400, 0xffbfffffffffffff, x1, 0, x2)

orn_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0020000000000800), rs1:x10(0x0000000000000800), rs2:x26(0xffdfffffffffffff)
    TEST_RR_OP(orn, x22, x10, x26, 0x0020000000000800, 0x800, 0xffdfffffffffffff, x1, 8, x2)

orn_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x0010000000001000), rs1:x9(0x0000000000001000), rs2:x25(0xffefffffffffffff)
    TEST_RR_OP(orn, x23, x9, x25, 0x0010000000001000, 0x1000, 0xffefffffffffffff, x1, 16, x2)

orn_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0008000000002000), rs1:x8(0x0000000000002000), rs2:x24(0xfff7ffffffffffff)
    TEST_RR_OP(orn, x24, x8, x24, 0x0008000000002000, 0x2000, 0xfff7ffffffffffff, x1, 24, x2)

orn_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x0004000000004000), rs1:x7(0x0000000000004000), rs2:x23(0xfffbffffffffffff)
    TEST_RR_OP(orn, x25, x7, x23, 0x0004000000004000, 0x4000, 0xfffbffffffffffff, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_6_0)


orn_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x0002000000008000), rs1:x6(0x0000000000008000), rs2:x22(0xfffdffffffffffff)
    TEST_RR_OP(orn, x26, x6, x22, 0x0002000000008000, 0x8000, 0xfffdffffffffffff, x1, 0, x7)

orn_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x0001000000010000), rs1:x5(0x0000000000010000), rs2:x21(0xfffeffffffffffff)
    TEST_RR_OP(orn, x27, x5, x21, 0x0001000000010000, 0x10000, 0xfffeffffffffffff, x1, 8, x7)

orn_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x0000800000020000), rs1:x4(0x0000000000020000), rs2:x20(0xffff7fffffffffff)
    TEST_RR_OP(orn, x28, x4, x20, 0x0000800000020000, 0x20000, 0xffff7fffffffffff, x1, 16, x7)

orn_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0000400000040000), rs1:x3(0x0000000000040000), rs2:x19(0xffffbfffffffffff)
    TEST_RR_OP(orn, x29, x3, x19, 0x0000400000040000, 0x40000, 0xffffbfffffffffff, x1, 24, x7)

orn_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0000200000080000), rs1:x2(0x0000000000080000), rs2:x18(0xffffdfffffffffff)
    TEST_RR_OP(orn, x30, x2, x18, 0x0000200000080000, 0x80000, 0xffffdfffffffffff, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x5,signature_7_0)


orn_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0000100000100000), rs1:x1(0x0000000000100000), rs2:x17(0xffffefffffffffff)
    TEST_RR_OP(orn, x31, x1, x17, 0x0000100000100000, 0x100000, 0xffffefffffffffff, x5, 0, x6)

orn_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0000080000200000), rs1:x31(0x0000000000200000), rs2:x16(0xfffff7ffffffffff)
    TEST_RR_OP(orn, x1, x31, x16, 0x0000080000200000, 0x200000, 0xfffff7ffffffffff, x5, 8, x6)

orn_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0000040000400000), rs1:x30(0x0000000000400000), rs2:x15(0xfffffbffffffffff)
    TEST_RR_OP(orn, x2, x30, x15, 0x0000040000400000, 0x400000, 0xfffffbffffffffff, x5, 16, x6)

orn_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0000020000800000), rs1:x29(0x0000000000800000), rs2:x14(0xfffffdffffffffff)
    TEST_RR_OP(orn, x3, x29, x14, 0x0000020000800000, 0x800000, 0xfffffdffffffffff, x5, 24, x6)

orn_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x0000010001000000), rs1:x28(0x0000000001000000), rs2:x13(0xfffffeffffffffff)
    TEST_RR_OP(orn, x4, x28, x13, 0x0000010001000000, 0x1000000, 0xfffffeffffffffff, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_8_0)


orn_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x0000008002000000), rs1:x27(0x0000000002000000), rs2:x12(0xffffff7fffffffff)
    TEST_RR_OP(orn, x5, x27, x12, 0x0000008002000000, 0x2000000, 0xffffff7fffffffff, x1, 0, x2)

orn_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x0000004004000000), rs1:x26(0x0000000004000000), rs2:x11(0xffffffbfffffffff)
    TEST_RR_OP(orn, x6, x26, x11, 0x0000004004000000, 0x4000000, 0xffffffbfffffffff, x1, 8, x2)

orn_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0000002008000000), rs1:x25(0x0000000008000000), rs2:x10(0xffffffdfffffffff)
    TEST_RR_OP(orn, x7, x25, x10, 0x0000002008000000, 0x8000000, 0xffffffdfffffffff, x1, 16, x2)

orn_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0000001010000000), rs1:x24(0x0000000010000000), rs2:x9(0xffffffefffffffff)
    TEST_RR_OP(orn, x8, x24, x9, 0x0000001010000000, 0x10000000, 0xffffffefffffffff, x1, 24, x2)

orn_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0000000820000000), rs1:x23(0x0000000020000000), rs2:x8(0xfffffff7ffffffff)
    TEST_RR_OP(orn, x9, x23, x8, 0x0000000820000000, 0x20000000, 0xfffffff7ffffffff, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_9_0)


orn_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x0000000440000000), rs1:x22(0x0000000040000000), rs2:x7(0xfffffffbffffffff)
    TEST_RR_OP(orn, x10, x22, x7, 0x0000000440000000, 0x40000000, 0xfffffffbffffffff, x1, 0, x2)

orn_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0000000280000000), rs1:x21(0x0000000080000000), rs2:x6(0xfffffffdffffffff)
    TEST_RR_OP(orn, x11, x21, x6, 0x0000000280000000, 0x80000000, 0xfffffffdffffffff, x1, 8, x2)

orn_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0000000100000000), rs1:x20(0x0000000100000000), rs2:x5(0xfffffffeffffffff)
    TEST_RR_OP(orn, x12, x20, x5, 0x0000000100000000, 0x100000000, 0xfffffffeffffffff, x1, 16, x2)

orn_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x0000000280000000), rs1:x19(0x0000000200000000), rs2:x4(0xffffffff7fffffff)
    TEST_RR_OP(orn, x13, x19, x4, 0x0000000280000000, 0x200000000, 0xffffffff7fffffff, x1, 24, x2)

orn_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x0000000440000000), rs1:x18(0x0000000400000000), rs2:x3(0xffffffffbfffffff)
    TEST_RR_OP(orn, x14, x18, x3, 0x0000000440000000, 0x400000000, 0xffffffffbfffffff, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x3,signature_10_0)


orn_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x0000000820000000), rs1:x17(0x0000000800000000), rs2:x2(0xffffffffdfffffff)
    TEST_RR_OP(orn, x15, x17, x2, 0x0000000820000000, 0x800000000, 0xffffffffdfffffff, x3, 0, x4)

orn_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0000001010000000), rs1:x16(0x0000001000000000), rs2:x1(0xffffffffefffffff)
    TEST_RR_OP(orn, x16, x16, x1, 0x0000001010000000, 0x1000000000, 0xffffffffefffffff, x3, 8, x4)

orn_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0000002008000000), rs1:x15(0x0000002000000000), rs2:x31(0xfffffffff7ffffff)
    TEST_RR_OP(orn, x17, x15, x31, 0x0000002008000000, 0x2000000000, 0xfffffffff7ffffff, x3, 16, x4)

orn_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x0000004004000000), rs1:x14(0x0000004000000000), rs2:x30(0xfffffffffbffffff)
    TEST_RR_OP(orn, x18, x14, x30, 0x0000004004000000, 0x4000000000, 0xfffffffffbffffff, x3, 24, x4)

orn_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000008002000000), rs1:x13(0x0000008000000000), rs2:x29(0xfffffffffdffffff)
    TEST_RR_OP(orn, x19, x13, x29, 0x0000008002000000, 0x8000000000, 0xfffffffffdffffff, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_11_0)


orn_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0000010001000000), rs1:x12(0x0000010000000000), rs2:x28(0xfffffffffeffffff)
    TEST_RR_OP(orn, x20, x12, x28, 0x0000010001000000, 0x10000000000, 0xfffffffffeffffff, x1, 0, x2)

orn_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000020000800000), rs1:x11(0x0000020000000000), rs2:x27(0xffffffffff7fffff)
    TEST_RR_OP(orn, x21, x11, x27, 0x0000020000800000, 0x20000000000, 0xffffffffff7fffff, x1, 8, x2)

orn_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000040000400000), rs1:x10(0x0000040000000000), rs2:x26(0xffffffffffbfffff)
    TEST_RR_OP(orn, x22, x10, x26, 0x0000040000400000, 0x40000000000, 0xffffffffffbfffff, x1, 16, x2)

orn_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000080000200000), rs1:x9(0x0000080000000000), rs2:x25(0xffffffffffdfffff)
    TEST_RR_OP(orn, x23, x9, x25, 0x0000080000200000, 0x80000000000, 0xffffffffffdfffff, x1, 24, x2)

orn_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000100000100000), rs1:x8(0x0000100000000000), rs2:x24(0xffffffffffefffff)
    TEST_RR_OP(orn, x24, x8, x24, 0x0000100000100000, 0x100000000000, 0xffffffffffefffff, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_12_0)


orn_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0000200000080000), rs1:x7(0x0000200000000000), rs2:x23(0xfffffffffff7ffff)
    TEST_RR_OP(orn, x25, x7, x23, 0x0000200000080000, 0x200000000000, 0xfffffffffff7ffff, x1, 0, x2)

orn_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x0000400000040000), rs1:x6(0x0000400000000000), rs2:x22(0xfffffffffffbffff)
    TEST_RR_OP(orn, x26, x6, x22, 0x0000400000040000, 0x400000000000, 0xfffffffffffbffff, x1, 8, x2)

orn_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0000800000020000), rs1:x5(0x0000800000000000), rs2:x21(0xfffffffffffdffff)
    TEST_RR_OP(orn, x27, x5, x21, 0x0000800000020000, 0x800000000000, 0xfffffffffffdffff, x1, 16, x2)

orn_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0001000000010000), rs1:x4(0x0001000000000000), rs2:x20(0xfffffffffffeffff)
    TEST_RR_OP(orn, x28, x4, x20, 0x0001000000010000, 0x1000000000000, 0xfffffffffffeffff, x1, 24, x2)

orn_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0002000000008000), rs1:x3(0x0002000000000000), rs2:x19(0xffffffffffff7fff)
    TEST_RR_OP(orn, x29, x3, x19, 0x0002000000008000, 0x2000000000000, 0xffffffffffff7fff, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x4,signature_13_0)


orn_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0004000000004000), rs1:x2(0x0004000000000000), rs2:x18(0xffffffffffffbfff)
    TEST_RR_OP(orn, x30, x2, x18, 0x0004000000004000, 0x4000000000000, 0xffffffffffffbfff, x4, 0, x5)

orn_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0008000000002000), rs1:x1(0x0008000000000000), rs2:x17(0xffffffffffffdfff)
    TEST_RR_OP(orn, x31, x1, x17, 0x0008000000002000, 0x8000000000000, 0xffffffffffffdfff, x4, 8, x5)

orn_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0010000000001000), rs1:x31(0x0010000000000000), rs2:x16(0xffffffffffffefff)
    TEST_RR_OP(orn, x1, x31, x16, 0x0010000000001000, 0x10000000000000, 0xffffffffffffefff, x4, 16, x5)

orn_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0020000000000800), rs1:x30(0x0020000000000000), rs2:x15(0xfffffffffffff7ff)
    TEST_RR_OP(orn, x2, x30, x15, 0x0020000000000800, 0x20000000000000, 0xfffffffffffff7ff, x4, 24, x5)

orn_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0040000000000400), rs1:x29(0x0040000000000000), rs2:x14(0xfffffffffffffbff)
    TEST_RR_OP(orn, x3, x29, x14, 0x0040000000000400, 0x40000000000000, 0xfffffffffffffbff, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_14_0)


orn_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0080000000000200), rs1:x28(0x0080000000000000), rs2:x13(0xfffffffffffffdff)
    TEST_RR_OP(orn, x4, x28, x13, 0x0080000000000200, 0x80000000000000, 0xfffffffffffffdff, x1, 0, x2)

orn_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0100000000000100), rs1:x27(0x0100000000000000), rs2:x12(0xfffffffffffffeff)
    TEST_RR_OP(orn, x5, x27, x12, 0x0100000000000100, 0x100000000000000, 0xfffffffffffffeff, x1, 8, x2)

orn_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x0200000000000080), rs1:x26(0x0200000000000000), rs2:x11(0xffffffffffffff7f)
    TEST_RR_OP(orn, x6, x26, x11, 0x0200000000000080, 0x200000000000000, 0xffffffffffffff7f, x1, 16, x2)

orn_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x0400000000000040), rs1:x25(0x0400000000000000), rs2:x10(0xffffffffffffffbf)
    TEST_RR_OP(orn, x7, x25, x10, 0x0400000000000040, 0x400000000000000, 0xffffffffffffffbf, x1, 24, x2)

orn_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x0800000000000020), rs1:x24(0x0800000000000000), rs2:x9(0xffffffffffffffdf)
    TEST_RR_OP(orn, x8, x24, x9, 0x0800000000000020, 0x800000000000000, 0xffffffffffffffdf, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_15_0)


orn_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x1000000000000010), rs1:x23(0x1000000000000000), rs2:x8(0xffffffffffffffef)
    TEST_RR_OP(orn, x9, x23, x8, 0x1000000000000010, 0x1000000000000000, 0xffffffffffffffef, x1, 0, x2)

orn_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x2000000000000008), rs1:x22(0x2000000000000000), rs2:x7(0xfffffffffffffff7)
    TEST_RR_OP(orn, x10, x22, x7, 0x2000000000000008, 0x2000000000000000, 0xfffffffffffffff7, x1, 8, x2)

orn_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x4000000000000004), rs1:x21(0x4000000000000000), rs2:x6(0xfffffffffffffffb)
    TEST_RR_OP(orn, x11, x21, x6, 0x4000000000000004, 0x4000000000000000, 0xfffffffffffffffb, x1, 16, x2)

orn_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x8000000000000002), rs1:x20(0x8000000000000000), rs2:x5(0xfffffffffffffffd)
    TEST_RR_OP(orn, x12, x20, x5, 0x8000000000000002, 0x8000000000000000, 0xfffffffffffffffd, x1, 24, x2)

orn_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000001), rs1:x19(0x0000000000000000), rs2:x4(0xfffffffffffffffe)
    TEST_RR_OP(orn, x13, x19, x4, 0x0000000000000001, 0x0, 0xfffffffffffffffe, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x4,signature_16_0)


orn_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0xfffffffffffffffe), rs2:x3(0x0000000000000000)
    TEST_RR_OP(orn, x14, x18, x3, 0xffffffffffffffff, 0xfffffffffffffffe, 0x0, x4, 0, x5)

orn_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0xfffffffffffffffd), rs2:x2(0x8000000000000000)
    TEST_RR_OP(orn, x15, x17, x2, 0xffffffffffffffff, 0xfffffffffffffffd, 0x8000000000000000, x4, 8, x5)

orn_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xfffffffffffffffb), rs2:x1(0x4000000000000000)
    TEST_RR_OP(orn, x16, x16, x1, 0xffffffffffffffff, 0xfffffffffffffffb, 0x4000000000000000, x4, 16, x5)

orn_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffffffff), rs1:x15(0xfffffffffffffff7), rs2:x31(0x2000000000000000)
    TEST_RR_OP(orn, x17, x15, x31, 0xffffffffffffffff, 0xfffffffffffffff7, 0x2000000000000000, x4, 24, x5)

orn_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffff), rs1:x14(0xffffffffffffffef), rs2:x30(0x1000000000000000)
    TEST_RR_OP(orn, x18, x14, x30, 0xffffffffffffffff, 0xffffffffffffffef, 0x1000000000000000, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_17_0)


orn_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffff), rs1:x13(0xffffffffffffffdf), rs2:x29(0x0800000000000000)
    TEST_RR_OP(orn, x19, x13, x29, 0xffffffffffffffff, 0xffffffffffffffdf, 0x800000000000000, x1, 0, x2)

orn_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffff), rs1:x12(0xffffffffffffffbf), rs2:x28(0x0400000000000000)
    TEST_RR_OP(orn, x20, x12, x28, 0xffffffffffffffff, 0xffffffffffffffbf, 0x400000000000000, x1, 8, x2)

orn_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0xffffffffffffff7f), rs2:x27(0x0200000000000000)
    TEST_RR_OP(orn, x21, x11, x27, 0xffffffffffffffff, 0xffffffffffffff7f, 0x200000000000000, x1, 16, x2)

orn_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xfffffffffffffeff), rs2:x26(0x0100000000000000)
    TEST_RR_OP(orn, x22, x10, x26, 0xffffffffffffffff, 0xfffffffffffffeff, 0x100000000000000, x1, 24, x2)

orn_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffffffff), rs1:x9(0xfffffffffffffdff), rs2:x25(0x0080000000000000)
    TEST_RR_OP(orn, x23, x9, x25, 0xffffffffffffffff, 0xfffffffffffffdff, 0x80000000000000, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_18_0)


orn_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffff), rs1:x8(0xfffffffffffffbff), rs2:x24(0x0040000000000000)
    TEST_RR_OP(orn, x24, x8, x24, 0xffffffffffffffff, 0xfffffffffffffbff, 0x40000000000000, x1, 0, x2)

orn_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffff), rs1:x7(0xfffffffffffff7ff), rs2:x23(0x0020000000000000)
    TEST_RR_OP(orn, x25, x7, x23, 0xffffffffffffffff, 0xfffffffffffff7ff, 0x20000000000000, x1, 8, x2)

orn_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffff), rs1:x6(0xffffffffffffefff), rs2:x22(0x0010000000000000)
    TEST_RR_OP(orn, x26, x6, x22, 0xffffffffffffffff, 0xffffffffffffefff, 0x10000000000000, x1, 16, x2)

orn_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffffff), rs1:x5(0xffffffffffffdfff), rs2:x21(0x0008000000000000)
    TEST_RR_OP(orn, x27, x5, x21, 0xffffffffffffffff, 0xffffffffffffdfff, 0x8000000000000, x1, 24, x2)

orn_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffffff), rs1:x4(0xffffffffffffbfff), rs2:x20(0x0004000000000000)
    TEST_RR_OP(orn, x28, x4, x20, 0xffffffffffffffff, 0xffffffffffffbfff, 0x4000000000000, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x4,signature_19_0)


orn_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffffff), rs1:x3(0xffffffffffff7fff), rs2:x19(0x0002000000000000)
    TEST_RR_OP(orn, x29, x3, x19, 0xffffffffffffffff, 0xffffffffffff7fff, 0x2000000000000, x4, 0, x5)

orn_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffffff), rs1:x2(0xfffffffffffeffff), rs2:x18(0x0001000000000000)
    TEST_RR_OP(orn, x30, x2, x18, 0xffffffffffffffff, 0xfffffffffffeffff, 0x1000000000000, x4, 8, x5)

orn_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffffff), rs1:x1(0xfffffffffffdffff), rs2:x17(0x0000800000000000)
    TEST_RR_OP(orn, x31, x1, x17, 0xffffffffffffffff, 0xfffffffffffdffff, 0x800000000000, x4, 16, x5)

orn_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffffff), rs1:x31(0xfffffffffffbffff), rs2:x16(0x0000400000000000)
    TEST_RR_OP(orn, x1, x31, x16, 0xffffffffffffffff, 0xfffffffffffbffff, 0x400000000000, x4, 24, x5)

orn_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffffff), rs1:x30(0xfffffffffff7ffff), rs2:x15(0x0000200000000000)
    TEST_RR_OP(orn, x2, x30, x15, 0xffffffffffffffff, 0xfffffffffff7ffff, 0x200000000000, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_20_0)


orn_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffffff), rs1:x29(0xffffffffffefffff), rs2:x14(0x0000100000000000)
    TEST_RR_OP(orn, x3, x29, x14, 0xffffffffffffffff, 0xffffffffffefffff, 0x100000000000, x1, 0, x2)

orn_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffffffff), rs1:x28(0xffffffffffdfffff), rs2:x13(0x0000080000000000)
    TEST_RR_OP(orn, x4, x28, x13, 0xffffffffffffffff, 0xffffffffffdfffff, 0x80000000000, x1, 8, x2)

orn_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffffffff), rs1:x27(0xffffffffffbfffff), rs2:x12(0x0000040000000000)
    TEST_RR_OP(orn, x5, x27, x12, 0xffffffffffffffff, 0xffffffffffbfffff, 0x40000000000, x1, 16, x2)

orn_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffffffff), rs1:x26(0xffffffffff7fffff), rs2:x11(0x0000020000000000)
    TEST_RR_OP(orn, x6, x26, x11, 0xffffffffffffffff, 0xffffffffff7fffff, 0x20000000000, x1, 24, x2)

orn_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffffffff), rs1:x25(0xfffffffffeffffff), rs2:x10(0x0000010000000000)
    TEST_RR_OP(orn, x7, x25, x10, 0xffffffffffffffff, 0xfffffffffeffffff, 0x10000000000, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_21_0)


orn_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffffffff), rs1:x24(0xfffffffffdffffff), rs2:x9(0x0000008000000000)
    TEST_RR_OP(orn, x8, x24, x9, 0xffffffffffffffff, 0xfffffffffdffffff, 0x8000000000, x1, 0, x2)

orn_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffffffff), rs1:x23(0xfffffffffbffffff), rs2:x8(0x0000004000000000)
    TEST_RR_OP(orn, x9, x23, x8, 0xffffffffffffffff, 0xfffffffffbffffff, 0x4000000000, x1, 8, x2)

orn_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffffffff), rs1:x22(0xfffffffff7ffffff), rs2:x7(0x0000002000000000)
    TEST_RR_OP(orn, x10, x22, x7, 0xffffffffffffffff, 0xfffffffff7ffffff, 0x2000000000, x1, 16, x2)

orn_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffffff), rs1:x21(0xffffffffefffffff), rs2:x6(0x0000001000000000)
    TEST_RR_OP(orn, x11, x21, x6, 0xffffffffffffffff, 0xffffffffefffffff, 0x1000000000, x1, 24, x2)

orn_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffffff), rs1:x20(0xffffffffdfffffff), rs2:x5(0x0000000800000000)
    TEST_RR_OP(orn, x12, x20, x5, 0xffffffffffffffff, 0xffffffffdfffffff, 0x800000000, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x5,signature_22_0)


orn_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffffff), rs1:x19(0xffffffffbfffffff), rs2:x4(0x0000000400000000)
    TEST_RR_OP(orn, x13, x19, x4, 0xffffffffffffffff, 0xffffffffbfffffff, 0x400000000, x5, 0, x6)

orn_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0xffffffff7fffffff), rs2:x3(0x0000000200000000)
    TEST_RR_OP(orn, x14, x18, x3, 0xffffffffffffffff, 0xffffffff7fffffff, 0x200000000, x5, 8, x6)

orn_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0xfffffffeffffffff), rs1:x17(0xfffffffeffffffff), rs2:x2(0x0000000100000000)
    TEST_RR_OP(orn, x15, x17, x2, 0xfffffffeffffffff, 0xfffffffeffffffff, 0x100000000, x5, 16, x6)

orn_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xfffffffdffffffff), rs2:x1(0x0000000080000000)
    TEST_RR_OP(orn, x16, x16, x1, 0xffffffffffffffff, 0xfffffffdffffffff, 0x80000000, x5, 24, x6)

orn_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffffffff), rs1:x15(0xfffffffbffffffff), rs2:x31(0x0000000040000000)
    TEST_RR_OP(orn, x17, x15, x31, 0xffffffffffffffff, 0xfffffffbffffffff, 0x40000000, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_23_0)


orn_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffff), rs1:x14(0xfffffff7ffffffff), rs2:x30(0x0000000020000000)
    TEST_RR_OP(orn, x18, x14, x30, 0xffffffffffffffff, 0xfffffff7ffffffff, 0x20000000, x1, 0, x2)

orn_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffff), rs1:x13(0xffffffefffffffff), rs2:x29(0x0000000010000000)
    TEST_RR_OP(orn, x19, x13, x29, 0xffffffffffffffff, 0xffffffefffffffff, 0x10000000, x1, 8, x2)

orn_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffff), rs1:x12(0xffffffdfffffffff), rs2:x28(0x0000000008000000)
    TEST_RR_OP(orn, x20, x12, x28, 0xffffffffffffffff, 0xffffffdfffffffff, 0x8000000, x1, 16, x2)

orn_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0xffffffbfffffffff), rs2:x27(0x0000000004000000)
    TEST_RR_OP(orn, x21, x11, x27, 0xffffffffffffffff, 0xffffffbfffffffff, 0x4000000, x1, 24, x2)

orn_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xffffff7fffffffff), rs2:x26(0x0000000002000000)
    TEST_RR_OP(orn, x22, x10, x26, 0xffffffffffffffff, 0xffffff7fffffffff, 0x2000000, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_24_0)


orn_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffffffff), rs1:x9(0xfffffeffffffffff), rs2:x25(0x0000000001000000)
    TEST_RR_OP(orn, x23, x9, x25, 0xffffffffffffffff, 0xfffffeffffffffff, 0x1000000, x1, 0, x2)

orn_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffff), rs1:x8(0xfffffdffffffffff), rs2:x24(0x0000000000800000)
    TEST_RR_OP(orn, x24, x8, x24, 0xffffffffffffffff, 0xfffffdffffffffff, 0x800000, x1, 8, x2)

orn_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffff), rs1:x7(0xfffffbffffffffff), rs2:x23(0x0000000000400000)
    TEST_RR_OP(orn, x25, x7, x23, 0xffffffffffffffff, 0xfffffbffffffffff, 0x400000, x1, 16, x2)

orn_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffff), rs1:x6(0xfffff7ffffffffff), rs2:x22(0x0000000000200000)
    TEST_RR_OP(orn, x26, x6, x22, 0xffffffffffffffff, 0xfffff7ffffffffff, 0x200000, x1, 24, x2)

orn_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffffff), rs1:x5(0xffffefffffffffff), rs2:x21(0x0000000000100000)
    TEST_RR_OP(orn, x27, x5, x21, 0xffffffffffffffff, 0xffffefffffffffff, 0x100000, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x5,signature_25_0)


orn_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffffff), rs1:x4(0xffffdfffffffffff), rs2:x20(0x0000000000080000)
    TEST_RR_OP(orn, x28, x4, x20, 0xffffffffffffffff, 0xffffdfffffffffff, 0x80000, x5, 0, x6)

orn_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffffff), rs1:x3(0xffffbfffffffffff), rs2:x19(0x0000000000040000)
    TEST_RR_OP(orn, x29, x3, x19, 0xffffffffffffffff, 0xffffbfffffffffff, 0x40000, x5, 8, x6)

orn_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffffff), rs1:x2(0xffff7fffffffffff), rs2:x18(0x0000000000020000)
    TEST_RR_OP(orn, x30, x2, x18, 0xffffffffffffffff, 0xffff7fffffffffff, 0x20000, x5, 16, x6)

orn_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffffff), rs1:x1(0xfffeffffffffffff), rs2:x17(0x0000000000010000)
    TEST_RR_OP(orn, x31, x1, x17, 0xffffffffffffffff, 0xfffeffffffffffff, 0x10000, x5, 24, x6)

orn_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffffff), rs1:x31(0xfffdffffffffffff), rs2:x16(0x0000000000008000)
    TEST_RR_OP(orn, x1, x31, x16, 0xffffffffffffffff, 0xfffdffffffffffff, 0x8000, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_26_0)


orn_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffffff), rs1:x30(0xfffbffffffffffff), rs2:x15(0x0000000000004000)
    TEST_RR_OP(orn, x2, x30, x15, 0xffffffffffffffff, 0xfffbffffffffffff, 0x4000, x1, 0, x7)

orn_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffffff), rs1:x29(0xfff7ffffffffffff), rs2:x14(0x0000000000002000)
    TEST_RR_OP(orn, x3, x29, x14, 0xffffffffffffffff, 0xfff7ffffffffffff, 0x2000, x1, 8, x7)

orn_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffffffff), rs1:x28(0xffefffffffffffff), rs2:x13(0x0000000000001000)
    TEST_RR_OP(orn, x4, x28, x13, 0xffffffffffffffff, 0xffefffffffffffff, 0x1000, x1, 16, x7)

orn_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffffffff), rs1:x27(0xffdfffffffffffff), rs2:x12(0x0000000000000800)
    TEST_RR_OP(orn, x5, x27, x12, 0xffffffffffffffff, 0xffdfffffffffffff, 0x800, x1, 24, x7)

orn_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffffffff), rs1:x26(0xffbfffffffffffff), rs2:x11(0x0000000000000400)
    TEST_RR_OP(orn, x6, x26, x11, 0xffffffffffffffff, 0xffbfffffffffffff, 0x400, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_27_0)


orn_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffffffff), rs1:x25(0xff7fffffffffffff), rs2:x10(0x0000000000000200)
    TEST_RR_OP(orn, x7, x25, x10, 0xffffffffffffffff, 0xff7fffffffffffff, 0x200, x1, 0, x2)

orn_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffffffff), rs1:x24(0xfeffffffffffffff), rs2:x9(0x0000000000000100)
    TEST_RR_OP(orn, x8, x24, x9, 0xffffffffffffffff, 0xfeffffffffffffff, 0x100, x1, 8, x2)

orn_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffffffff), rs1:x23(0xfdffffffffffffff), rs2:x8(0x0000000000000080)
    TEST_RR_OP(orn, x9, x23, x8, 0xffffffffffffffff, 0xfdffffffffffffff, 0x80, x1, 16, x2)

orn_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffffffff), rs1:x22(0xfbffffffffffffff), rs2:x7(0x0000000000000040)
    TEST_RR_OP(orn, x10, x22, x7, 0xffffffffffffffff, 0xfbffffffffffffff, 0x40, x1, 24, x2)

orn_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffffff), rs1:x21(0xf7ffffffffffffff), rs2:x6(0x0000000000000020)
    TEST_RR_OP(orn, x11, x21, x6, 0xffffffffffffffff, 0xf7ffffffffffffff, 0x20, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x6,signature_28_0)


orn_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffffff), rs1:x20(0xefffffffffffffff), rs2:x5(0x0000000000000010)
    TEST_RR_OP(orn, x12, x20, x5, 0xffffffffffffffff, 0xefffffffffffffff, 0x10, x6, 0, x7)

orn_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffffff), rs1:x19(0xdfffffffffffffff), rs2:x4(0x0000000000000008)
    TEST_RR_OP(orn, x13, x19, x4, 0xffffffffffffffff, 0xdfffffffffffffff, 0x8, x6, 8, x7)

orn_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0xbfffffffffffffff), rs2:x3(0x0000000000000004)
    TEST_RR_OP(orn, x14, x18, x3, 0xffffffffffffffff, 0xbfffffffffffffff, 0x4, x6, 16, x7)

orn_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0x7fffffffffffffff), rs2:x2(0x0000000000000002)
    TEST_RR_OP(orn, x15, x17, x2, 0xffffffffffffffff, 0x7fffffffffffffff, 0x2, x6, 24, x7)

orn_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xffffffffffffffff), rs2:x1(0x0000000000000001)
    TEST_RR_OP(orn, x16, x16, x1, 0xffffffffffffffff, 0xffffffffffffffff, 0x1, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_29_0)


orn_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffffffff), rs1:x15(0x0000000000000001), rs2:x31(0x0000000000000000)
    TEST_RR_OP(orn, x17, x15, x31, 0xffffffffffffffff, 0x1, 0x0, x1, 0, x2)

orn_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffff), rs1:x14(0x0000000000000002), rs2:x30(0x0000000000000000)
    TEST_RR_OP(orn, x18, x14, x30, 0xffffffffffffffff, 0x2, 0x0, x1, 8, x2)

orn_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffff), rs1:x13(0x0000000000000004), rs2:x29(0x0000000000000000)
    TEST_RR_OP(orn, x19, x13, x29, 0xffffffffffffffff, 0x4, 0x0, x1, 16, x2)

orn_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffff), rs1:x12(0x0000000000000008), rs2:x28(0x0000000000000000)
    TEST_RR_OP(orn, x20, x12, x28, 0xffffffffffffffff, 0x8, 0x0, x1, 24, x2)

orn_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0x0000000000000010), rs2:x27(0x0000000000000000)
    TEST_RR_OP(orn, x21, x11, x27, 0xffffffffffffffff, 0x10, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_30_0)


orn_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0x0000000000000020), rs2:x26(0x0000000000000000)
    TEST_RR_OP(orn, x22, x10, x26, 0xffffffffffffffff, 0x20, 0x0, x1, 0, x2)

orn_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffffffff), rs1:x9(0x0000000000000040), rs2:x25(0x0000000000000000)
    TEST_RR_OP(orn, x23, x9, x25, 0xffffffffffffffff, 0x40, 0x0, x1, 8, x2)

orn_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffff), rs1:x8(0x0000000000000080), rs2:x24(0x0000000000000000)
    TEST_RR_OP(orn, x24, x8, x24, 0xffffffffffffffff, 0x80, 0x0, x1, 16, x2)

orn_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffff), rs1:x7(0x0000000000000100), rs2:x23(0x0000000000000000)
    TEST_RR_OP(orn, x25, x7, x23, 0xffffffffffffffff, 0x100, 0x0, x1, 24, x2)

orn_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffff), rs1:x6(0x0000000000000200), rs2:x22(0x0000000000000000)
    TEST_RR_OP(orn, x26, x6, x22, 0xffffffffffffffff, 0x200, 0x0, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x6,signature_31_0)


orn_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffffff), rs1:x5(0x0000000000000400), rs2:x21(0x0000000000000000)
    TEST_RR_OP(orn, x27, x5, x21, 0xffffffffffffffff, 0x400, 0x0, x6, 0, x7)

orn_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffffff), rs1:x4(0x0000000000000800), rs2:x20(0x0000000000000000)
    TEST_RR_OP(orn, x28, x4, x20, 0xffffffffffffffff, 0x800, 0x0, x6, 8, x7)

orn_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffffff), rs1:x3(0x0000000000001000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(orn, x29, x3, x19, 0xffffffffffffffff, 0x1000, 0x0, x6, 16, x7)

orn_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffffff), rs1:x2(0x0000000000002000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(orn, x30, x2, x18, 0xffffffffffffffff, 0x2000, 0x0, x6, 24, x7)

orn_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffffff), rs1:x1(0x0000000000004000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(orn, x31, x1, x17, 0xffffffffffffffff, 0x4000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x6,signature_32_0)


orn_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffffff), rs1:x31(0x0000000000008000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(orn, x1, x31, x16, 0xffffffffffffffff, 0x8000, 0x0, x6, 0, x7)

orn_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffffff), rs1:x30(0x0000000000010000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(orn, x2, x30, x15, 0xffffffffffffffff, 0x10000, 0x0, x6, 8, x7)

orn_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffffff), rs1:x29(0x0000000000020000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(orn, x3, x29, x14, 0xffffffffffffffff, 0x20000, 0x0, x6, 16, x7)

orn_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffffffff), rs1:x28(0x0000000000040000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(orn, x4, x28, x13, 0xffffffffffffffff, 0x40000, 0x0, x6, 24, x7)

orn_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffffffff), rs1:x27(0x0000000000080000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(orn, x5, x27, x12, 0xffffffffffffffff, 0x80000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_33_0)


orn_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffffffff), rs1:x26(0x0000000000100000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(orn, x6, x26, x11, 0xffffffffffffffff, 0x100000, 0x0, x1, 0, x2)

orn_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffffffff), rs1:x25(0x0000000000200000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(orn, x7, x25, x10, 0xffffffffffffffff, 0x200000, 0x0, x1, 8, x2)

orn_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffffffff), rs1:x24(0x0000000000400000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(orn, x8, x24, x9, 0xffffffffffffffff, 0x400000, 0x0, x1, 16, x2)

orn_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffffffff), rs1:x23(0x0000000000800000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(orn, x9, x23, x8, 0xffffffffffffffff, 0x800000, 0x0, x1, 24, x2)

orn_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffffffff), rs1:x22(0x0000000001000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(orn, x10, x22, x7, 0xffffffffffffffff, 0x1000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_34_0)


orn_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffffff), rs1:x21(0x0000000002000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(orn, x11, x21, x6, 0xffffffffffffffff, 0x2000000, 0x0, x1, 0, x7)

orn_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffffff), rs1:x20(0x0000000004000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(orn, x12, x20, x5, 0xffffffffffffffff, 0x4000000, 0x0, x1, 8, x7)

orn_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffffff), rs1:x19(0x0000000008000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(orn, x13, x19, x4, 0xffffffffffffffff, 0x8000000, 0x0, x1, 16, x7)

orn_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0x0000000010000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(orn, x14, x18, x3, 0xffffffffffffffff, 0x10000000, 0x0, x1, 24, x7)

orn_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0x0000000020000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(orn, x15, x17, x2, 0xffffffffffffffff, 0x20000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x2,signature_35_0)


orn_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0x0000000040000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(orn, x16, x16, x1, 0xffffffffffffffff, 0x40000000, 0x0, x2, 0, x3)

orn_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffffffff), rs1:x15(0x0000000080000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(orn, x17, x15, x31, 0xffffffffffffffff, 0x80000000, 0x0, x2, 8, x3)

orn_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffff), rs1:x14(0x0000000100000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(orn, x18, x14, x30, 0xffffffffffffffff, 0x100000000, 0x0, x2, 16, x3)

orn_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffff), rs1:x13(0x0000000200000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(orn, x19, x13, x29, 0xffffffffffffffff, 0x200000000, 0x0, x2, 24, x3)

orn_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffff), rs1:x12(0x0000000400000000), rs2:x28(0x0000000000000000)
    TEST_RR_OP(orn, x20, x12, x28, 0xffffffffffffffff, 0x400000000, 0x0, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_36_0)


orn_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0x0000000800000000), rs2:x27(0x0000000000000000)
    TEST_RR_OP(orn, x21, x11, x27, 0xffffffffffffffff, 0x800000000, 0x0, x1, 0, x2)

orn_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0x0000001000000000), rs2:x26(0x0000000000000000)
    TEST_RR_OP(orn, x22, x10, x26, 0xffffffffffffffff, 0x1000000000, 0x0, x1, 8, x2)

orn_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffffffff), rs1:x9(0x0000002000000000), rs2:x25(0x0000000000000000)
    TEST_RR_OP(orn, x23, x9, x25, 0xffffffffffffffff, 0x2000000000, 0x0, x1, 16, x2)

orn_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffff), rs1:x8(0x0000004000000000), rs2:x24(0x0000000000000000)
    TEST_RR_OP(orn, x24, x8, x24, 0xffffffffffffffff, 0x4000000000, 0x0, x1, 24, x2)

orn_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffff), rs1:x7(0x0000008000000000), rs2:x23(0x0000000000000000)
    TEST_RR_OP(orn, x25, x7, x23, 0xffffffffffffffff, 0x8000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_37_0)


orn_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffff), rs1:x6(0x0000010000000000), rs2:x22(0x0000000000000000)
    TEST_RR_OP(orn, x26, x6, x22, 0xffffffffffffffff, 0x10000000000, 0x0, x1, 0, x7)

orn_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffffff), rs1:x5(0x0000020000000000), rs2:x21(0x0000000000000000)
    TEST_RR_OP(orn, x27, x5, x21, 0xffffffffffffffff, 0x20000000000, 0x0, x1, 8, x7)

orn_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffffff), rs1:x4(0x0000040000000000), rs2:x20(0x0000000000000000)
    TEST_RR_OP(orn, x28, x4, x20, 0xffffffffffffffff, 0x40000000000, 0x0, x1, 16, x7)

orn_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffffff), rs1:x3(0x0000080000000000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(orn, x29, x3, x19, 0xffffffffffffffff, 0x80000000000, 0x0, x1, 24, x7)

orn_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffffff), rs1:x2(0x0000100000000000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(orn, x30, x2, x18, 0xffffffffffffffff, 0x100000000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x5,signature_38_0)


orn_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffffff), rs1:x1(0x0000200000000000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(orn, x31, x1, x17, 0xffffffffffffffff, 0x200000000000, 0x0, x5, 0, x6)

orn_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffffff), rs1:x31(0x0000400000000000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(orn, x1, x31, x16, 0xffffffffffffffff, 0x400000000000, 0x0, x5, 8, x6)

orn_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffffff), rs1:x30(0x0000800000000000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(orn, x2, x30, x15, 0xffffffffffffffff, 0x800000000000, 0x0, x5, 16, x6)

orn_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffffff), rs1:x29(0x0001000000000000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(orn, x3, x29, x14, 0xffffffffffffffff, 0x1000000000000, 0x0, x5, 24, x6)

orn_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffffffff), rs1:x28(0x0002000000000000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(orn, x4, x28, x13, 0xffffffffffffffff, 0x2000000000000, 0x0, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_39_0)


orn_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffffffff), rs1:x27(0x0004000000000000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(orn, x5, x27, x12, 0xffffffffffffffff, 0x4000000000000, 0x0, x1, 0, x2)

orn_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffffffff), rs1:x26(0x0008000000000000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(orn, x6, x26, x11, 0xffffffffffffffff, 0x8000000000000, 0x0, x1, 8, x2)

orn_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffffffff), rs1:x25(0x0010000000000000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(orn, x7, x25, x10, 0xffffffffffffffff, 0x10000000000000, 0x0, x1, 16, x2)

orn_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffffffff), rs1:x24(0x0020000000000000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(orn, x8, x24, x9, 0xffffffffffffffff, 0x20000000000000, 0x0, x1, 24, x2)

orn_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffffffff), rs1:x23(0x0040000000000000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(orn, x9, x23, x8, 0xffffffffffffffff, 0x40000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_40_0)


orn_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffffffff), rs1:x22(0x0080000000000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(orn, x10, x22, x7, 0xffffffffffffffff, 0x80000000000000, 0x0, x1, 0, x2)

orn_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffffff), rs1:x21(0x0100000000000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(orn, x11, x21, x6, 0xffffffffffffffff, 0x100000000000000, 0x0, x1, 8, x2)

orn_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffffff), rs1:x20(0x0200000000000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(orn, x12, x20, x5, 0xffffffffffffffff, 0x200000000000000, 0x0, x1, 16, x2)

orn_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffffff), rs1:x19(0x0400000000000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(orn, x13, x19, x4, 0xffffffffffffffff, 0x400000000000000, 0x0, x1, 24, x2)

orn_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0x0800000000000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(orn, x14, x18, x3, 0xffffffffffffffff, 0x800000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x3,signature_41_0)


orn_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0x1000000000000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(orn, x15, x17, x2, 0xffffffffffffffff, 0x1000000000000000, 0x0, x3, 0, x4)

orn_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0x2000000000000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(orn, x16, x16, x1, 0xffffffffffffffff, 0x2000000000000000, 0x0, x3, 8, x4)

orn_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffffffff), rs1:x15(0x4000000000000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(orn, x17, x15, x31, 0xffffffffffffffff, 0x4000000000000000, 0x0, x3, 16, x4)

orn_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffff), rs1:x14(0x8000000000000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(orn, x18, x14, x30, 0xffffffffffffffff, 0x8000000000000000, 0x0, x3, 24, x4)

orn_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffff), rs1:x13(0x0000000000000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(orn, x19, x13, x29, 0xffffffffffffffff, 0x0, 0x0, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_42_0)


orn_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffff), rs1:x12(0xfffffffffffffffe), rs2:x28(0x0000000000000000)
    TEST_RR_OP(orn, x20, x12, x28, 0xffffffffffffffff, 0xfffffffffffffffe, 0x0, x1, 0, x2)

orn_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0xfffffffffffffffd), rs2:x27(0x0000000000000000)
    TEST_RR_OP(orn, x21, x11, x27, 0xffffffffffffffff, 0xfffffffffffffffd, 0x0, x1, 8, x2)

orn_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xfffffffffffffffb), rs2:x26(0x0000000000000000)
    TEST_RR_OP(orn, x22, x10, x26, 0xffffffffffffffff, 0xfffffffffffffffb, 0x0, x1, 16, x2)

orn_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffffffff), rs1:x9(0xfffffffffffffff7), rs2:x25(0x0000000000000000)
    TEST_RR_OP(orn, x23, x9, x25, 0xffffffffffffffff, 0xfffffffffffffff7, 0x0, x1, 24, x2)

orn_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffff), rs1:x8(0xffffffffffffffef), rs2:x24(0x0000000000000000)
    TEST_RR_OP(orn, x24, x8, x24, 0xffffffffffffffff, 0xffffffffffffffef, 0x0, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_43_0)


orn_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffff), rs1:x7(0xffffffffffffffdf), rs2:x23(0x0000000000000000)
    TEST_RR_OP(orn, x25, x7, x23, 0xffffffffffffffff, 0xffffffffffffffdf, 0x0, x1, 0, x2)

orn_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffff), rs1:x6(0xffffffffffffffbf), rs2:x22(0x0000000000000000)
    TEST_RR_OP(orn, x26, x6, x22, 0xffffffffffffffff, 0xffffffffffffffbf, 0x0, x1, 8, x2)

orn_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffffff), rs1:x5(0xffffffffffffff7f), rs2:x21(0x0000000000000000)
    TEST_RR_OP(orn, x27, x5, x21, 0xffffffffffffffff, 0xffffffffffffff7f, 0x0, x1, 16, x2)

orn_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffffff), rs1:x4(0xfffffffffffffeff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(orn, x28, x4, x20, 0xffffffffffffffff, 0xfffffffffffffeff, 0x0, x1, 24, x2)

orn_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffffff), rs1:x3(0xfffffffffffffdff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(orn, x29, x3, x19, 0xffffffffffffffff, 0xfffffffffffffdff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x4,signature_44_0)


orn_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffffff), rs1:x2(0xfffffffffffffbff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(orn, x30, x2, x18, 0xffffffffffffffff, 0xfffffffffffffbff, 0x0, x4, 0, x5)

orn_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffffff), rs1:x1(0xfffffffffffff7ff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(orn, x31, x1, x17, 0xffffffffffffffff, 0xfffffffffffff7ff, 0x0, x4, 8, x5)

orn_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffffff), rs1:x31(0xffffffffffffefff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(orn, x1, x31, x16, 0xffffffffffffffff, 0xffffffffffffefff, 0x0, x4, 16, x5)

orn_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffffff), rs1:x30(0xffffffffffffdfff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(orn, x2, x30, x15, 0xffffffffffffffff, 0xffffffffffffdfff, 0x0, x4, 24, x5)

orn_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffffff), rs1:x29(0xffffffffffffbfff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(orn, x3, x29, x14, 0xffffffffffffffff, 0xffffffffffffbfff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_45_0)


orn_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffffffff), rs1:x28(0xffffffffffff7fff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(orn, x4, x28, x13, 0xffffffffffffffff, 0xffffffffffff7fff, 0x0, x1, 0, x2)

orn_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffffffff), rs1:x27(0xfffffffffffeffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(orn, x5, x27, x12, 0xffffffffffffffff, 0xfffffffffffeffff, 0x0, x1, 8, x2)

orn_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffffffff), rs1:x26(0xfffffffffffdffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(orn, x6, x26, x11, 0xffffffffffffffff, 0xfffffffffffdffff, 0x0, x1, 16, x2)

orn_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffffffff), rs1:x25(0xfffffffffffbffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(orn, x7, x25, x10, 0xffffffffffffffff, 0xfffffffffffbffff, 0x0, x1, 24, x2)

orn_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffffffff), rs1:x24(0xfffffffffff7ffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(orn, x8, x24, x9, 0xffffffffffffffff, 0xfffffffffff7ffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_46_0)


orn_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffffffff), rs1:x23(0xffffffffffefffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(orn, x9, x23, x8, 0xffffffffffffffff, 0xffffffffffefffff, 0x0, x1, 0, x2)

orn_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffffffff), rs1:x22(0xffffffffffdfffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(orn, x10, x22, x7, 0xffffffffffffffff, 0xffffffffffdfffff, 0x0, x1, 8, x2)

orn_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffffff), rs1:x21(0xffffffffffbfffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(orn, x11, x21, x6, 0xffffffffffffffff, 0xffffffffffbfffff, 0x0, x1, 16, x2)

orn_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffffff), rs1:x20(0xffffffffff7fffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(orn, x12, x20, x5, 0xffffffffffffffff, 0xffffffffff7fffff, 0x0, x1, 24, x2)

orn_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffffff), rs1:x19(0xfffffffffeffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(orn, x13, x19, x4, 0xffffffffffffffff, 0xfffffffffeffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x4,signature_47_0)


orn_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0xfffffffffdffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(orn, x14, x18, x3, 0xffffffffffffffff, 0xfffffffffdffffff, 0x0, x4, 0, x5)

orn_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0xfffffffffbffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(orn, x15, x17, x2, 0xffffffffffffffff, 0xfffffffffbffffff, 0x0, x4, 8, x5)

orn_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xfffffffff7ffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(orn, x16, x16, x1, 0xffffffffffffffff, 0xfffffffff7ffffff, 0x0, x4, 16, x5)

orn_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffffffff), rs1:x15(0xffffffffefffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(orn, x17, x15, x31, 0xffffffffffffffff, 0xffffffffefffffff, 0x0, x4, 24, x5)

orn_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffff), rs1:x14(0xffffffffdfffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(orn, x18, x14, x30, 0xffffffffffffffff, 0xffffffffdfffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_48_0)


orn_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffff), rs1:x13(0xffffffffbfffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(orn, x19, x13, x29, 0xffffffffffffffff, 0xffffffffbfffffff, 0x0, x1, 0, x2)

orn_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffff), rs1:x12(0xffffffff7fffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(orn, x20, x12, x28, 0xffffffffffffffff, 0xffffffff7fffffff, 0x0, x1, 8, x2)

orn_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0xfffffffeffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(orn, x21, x11, x27, 0xffffffffffffffff, 0xfffffffeffffffff, 0x0, x1, 16, x2)

orn_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xfffffffdffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(orn, x22, x10, x26, 0xffffffffffffffff, 0xfffffffdffffffff, 0x0, x1, 24, x2)

orn_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffffffff), rs1:x9(0xfffffffbffffffff), rs2:x25(0x0000000000000000)
    TEST_RR_OP(orn, x23, x9, x25, 0xffffffffffffffff, 0xfffffffbffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_49_0)


orn_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffff), rs1:x8(0xfffffff7ffffffff), rs2:x24(0x0000000000000000)
    TEST_RR_OP(orn, x24, x8, x24, 0xffffffffffffffff, 0xfffffff7ffffffff, 0x0, x1, 0, x2)

orn_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffff), rs1:x7(0xffffffefffffffff), rs2:x23(0x0000000000000000)
    TEST_RR_OP(orn, x25, x7, x23, 0xffffffffffffffff, 0xffffffefffffffff, 0x0, x1, 8, x2)

orn_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffff), rs1:x6(0xffffffdfffffffff), rs2:x22(0x0000000000000000)
    TEST_RR_OP(orn, x26, x6, x22, 0xffffffffffffffff, 0xffffffdfffffffff, 0x0, x1, 16, x2)

orn_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffffff), rs1:x5(0xffffffbfffffffff), rs2:x21(0x0000000000000000)
    TEST_RR_OP(orn, x27, x5, x21, 0xffffffffffffffff, 0xffffffbfffffffff, 0x0, x1, 24, x2)

orn_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffffff), rs1:x4(0xffffff7fffffffff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(orn, x28, x4, x20, 0xffffffffffffffff, 0xffffff7fffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x4,signature_50_0)


orn_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffffff), rs1:x3(0xfffffeffffffffff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(orn, x29, x3, x19, 0xffffffffffffffff, 0xfffffeffffffffff, 0x0, x4, 0, x5)

orn_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffffff), rs1:x2(0xfffffdffffffffff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(orn, x30, x2, x18, 0xffffffffffffffff, 0xfffffdffffffffff, 0x0, x4, 8, x5)

orn_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffffff), rs1:x1(0xfffffbffffffffff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(orn, x31, x1, x17, 0xffffffffffffffff, 0xfffffbffffffffff, 0x0, x4, 16, x5)

orn_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffffff), rs1:x31(0xfffff7ffffffffff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(orn, x1, x31, x16, 0xffffffffffffffff, 0xfffff7ffffffffff, 0x0, x4, 24, x5)

orn_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffffff), rs1:x30(0xffffefffffffffff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(orn, x2, x30, x15, 0xffffffffffffffff, 0xffffefffffffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_51_0)


orn_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffffff), rs1:x29(0xffffdfffffffffff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(orn, x3, x29, x14, 0xffffffffffffffff, 0xffffdfffffffffff, 0x0, x1, 0, x2)

orn_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffffffff), rs1:x28(0xffffbfffffffffff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(orn, x4, x28, x13, 0xffffffffffffffff, 0xffffbfffffffffff, 0x0, x1, 8, x2)

orn_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffffffff), rs1:x27(0xffff7fffffffffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(orn, x5, x27, x12, 0xffffffffffffffff, 0xffff7fffffffffff, 0x0, x1, 16, x2)

orn_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffffffff), rs1:x26(0xfffeffffffffffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(orn, x6, x26, x11, 0xffffffffffffffff, 0xfffeffffffffffff, 0x0, x1, 24, x2)

orn_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffffffff), rs1:x25(0xfffdffffffffffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(orn, x7, x25, x10, 0xffffffffffffffff, 0xfffdffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_52_0)


orn_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffffffff), rs1:x24(0xfffbffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(orn, x8, x24, x9, 0xffffffffffffffff, 0xfffbffffffffffff, 0x0, x1, 0, x2)

orn_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffffffff), rs1:x23(0xfff7ffffffffffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(orn, x9, x23, x8, 0xffffffffffffffff, 0xfff7ffffffffffff, 0x0, x1, 8, x2)

orn_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffffffff), rs1:x22(0xffefffffffffffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(orn, x10, x22, x7, 0xffffffffffffffff, 0xffefffffffffffff, 0x0, x1, 16, x2)

orn_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffffff), rs1:x21(0xffdfffffffffffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(orn, x11, x21, x6, 0xffffffffffffffff, 0xffdfffffffffffff, 0x0, x1, 24, x2)

orn_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffffff), rs1:x20(0xffbfffffffffffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(orn, x12, x20, x5, 0xffffffffffffffff, 0xffbfffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x5,signature_53_0)


orn_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffffff), rs1:x19(0xff7fffffffffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(orn, x13, x19, x4, 0xffffffffffffffff, 0xff7fffffffffffff, 0x0, x5, 0, x6)

orn_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0xfeffffffffffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(orn, x14, x18, x3, 0xffffffffffffffff, 0xfeffffffffffffff, 0x0, x5, 8, x6)

orn_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0xfdffffffffffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(orn, x15, x17, x2, 0xffffffffffffffff, 0xfdffffffffffffff, 0x0, x5, 16, x6)

orn_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xfbffffffffffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(orn, x16, x16, x1, 0xffffffffffffffff, 0xfbffffffffffffff, 0x0, x5, 24, x6)

orn_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffffffff), rs1:x15(0xf7ffffffffffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(orn, x17, x15, x31, 0xffffffffffffffff, 0xf7ffffffffffffff, 0x0, x5, 32, x6)

    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_54_0)


orn_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffff), rs1:x14(0xefffffffffffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(orn, x18, x14, x30, 0xffffffffffffffff, 0xefffffffffffffff, 0x0, x1, 0, x2)

orn_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffff), rs1:x13(0xdfffffffffffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(orn, x19, x13, x29, 0xffffffffffffffff, 0xdfffffffffffffff, 0x0, x1, 8, x2)

orn_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffff), rs1:x12(0xbfffffffffffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(orn, x20, x12, x28, 0xffffffffffffffff, 0xbfffffffffffffff, 0x0, x1, 16, x2)

orn_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0x7fffffffffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(orn, x21, x11, x27, 0xffffffffffffffff, 0x7fffffffffffffff, 0x0, x1, 24, x2)

orn_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xffffffffffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(orn, x22, x10, x26, 0xffffffffffffffff, 0xffffffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",orn)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",orn)

	RVTEST_SIGBASE(x1,signature_55_0)


orn_01_inst_270:
    // Test 270:  Test with rs1 == rs2
    // result rd:x23(0xffffffffffffffff), rs1:x25(0x10fd3dedadea5195), rs2:x25(0xdf7f3844121bcc23)
    TEST_RR_OP(orn, x23, x25, x25, 0xffffffffffffffff, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x1, 0, x2)

orn_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1), rs2:x24(0xf5adb41aa47d105b)
    TEST_RR_OP(orn, x0, x8, x24, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x1, 8, x2)

orn_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0xffffffffffffffff), rs1:x7(0xc9649f05a8e1a8bb), rs2:x0(0x82f6747f707af2c0)
    TEST_RR_OP(orn, x25, x7, x0, 0xffffffffffffffff, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x1, 16, x2)

orn_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x8c56d02b1e64043c), rs1:x0(0x3541291848c99fcb), rs2:x22(0x73a92fd4e19bfbc3)
    TEST_RR_OP(orn, x26, x0, x22, 0x8c56d02b1e64043c, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x1, 24, x2)
	
#endif


RVTEST_CODE_END orn_01_code_end
RVTEST_CODE_BEGIN aes64ds_02_init aes64ds_02_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x6,signature_1_0)


aes64ds_02_inst_0:
    // Test 0:  Test with dataset: sbox64
    // result rd:x1(0x7d7d5252527d7d52), rs1:x31(0x0000000000000000), rs2:x16(0xffffffffffffffff)
    TEST_RR_OP(aes64ds, x1, x31, x16, 0x7d7d5252527d7d52, 0x0, 0xffffffffffffffff, x6, 0, x7)

aes64ds_02_inst_1:
    // Test 1:  Test with dataset: sbox64
    // result rd:x2(0x0c0c0909090c0c09), rs1:x30(0x0101010101010101), rs2:x15(0xfefefefefefefefe)
    TEST_RR_OP(aes64ds, x2, x30, x15, 0x0c0c0909090c0c09, 0x101010101010101, 0xfefefefefefefefe, x6, 8, x7)

aes64ds_02_inst_2:
    // Test 2:  Test with dataset: sbox64
    // result rd:x3(0x21216a6a6a21216a), rs1:x29(0x0202020202020202), rs2:x14(0xfdfdfdfdfdfdfdfd)
    TEST_RR_OP(aes64ds, x3, x29, x14, 0x21216a6a6a21216a, 0x202020202020202, 0xfdfdfdfdfdfdfdfd, x6, 16, x7)

aes64ds_02_inst_3:
    // Test 3:  Test with dataset: sbox64
    // result rd:x4(0x5555d5d5d55555d5), rs1:x28(0x0303030303030303), rs2:x13(0xfcfcfcfcfcfcfcfc)
    TEST_RR_OP(aes64ds, x4, x28, x13, 0x5555d5d5d55555d5, 0x303030303030303, 0xfcfcfcfcfcfcfcfc, x6, 24, x7)

aes64ds_02_inst_4:
    // Test 4:  Test with dataset: sbox64
    // result rd:x5(0x6363303030636330), rs1:x27(0x0404040404040404), rs2:x12(0xfbfbfbfbfbfbfbfb)
    TEST_RR_OP(aes64ds, x5, x27, x12, 0x6363303030636330, 0x404040404040404, 0xfbfbfbfbfbfbfbfb, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_2_0)


aes64ds_02_inst_5:
    // Test 5:  Test with dataset: sbox64
    // result rd:x6(0x1414363636141436), rs1:x26(0x0505050505050505), rs2:x11(0xfafafafafafafafa)
    TEST_RR_OP(aes64ds, x6, x26, x11, 0x1414363636141436, 0x505050505050505, 0xfafafafafafafafa, x1, 0, x2)

aes64ds_02_inst_6:
    // Test 6:  Test with dataset: sbox64
    // result rd:x7(0x6969a5a5a56969a5), rs1:x25(0x0606060606060606), rs2:x10(0xf9f9f9f9f9f9f9f9)
    TEST_RR_OP(aes64ds, x7, x25, x10, 0x6969a5a5a56969a5, 0x606060606060606, 0xf9f9f9f9f9f9f9f9, x1, 8, x2)

aes64ds_02_inst_7:
    // Test 7:  Test with dataset: sbox64
    // result rd:x8(0xe1e1383838e1e138), rs1:x24(0x0707070707070707), rs2:x9(0xf8f8f8f8f8f8f8f8)
    TEST_RR_OP(aes64ds, x8, x24, x9, 0xe1e1383838e1e138, 0x707070707070707, 0xf8f8f8f8f8f8f8f8, x1, 16, x2)

aes64ds_02_inst_8:
    // Test 8:  Test with dataset: sbox64
    // result rd:x9(0x2626bfbfbf2626bf), rs1:x23(0x0808080808080808), rs2:x8(0xf7f7f7f7f7f7f7f7)
    TEST_RR_OP(aes64ds, x9, x23, x8, 0x2626bfbfbf2626bf, 0x808080808080808, 0xf7f7f7f7f7f7f7f7, x1, 24, x2)

aes64ds_02_inst_9:
    // Test 9:  Test with dataset: sbox64
    // result rd:x10(0xd6d6404040d6d640), rs1:x22(0x0909090909090909), rs2:x7(0xf6f6f6f6f6f6f6f6)
    TEST_RR_OP(aes64ds, x10, x22, x7, 0xd6d6404040d6d640, 0x909090909090909, 0xf6f6f6f6f6f6f6f6, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_3_0)


aes64ds_02_inst_10:
    // Test 10:  Test with dataset: sbox64
    // result rd:x11(0x7777a3a3a37777a3), rs1:x21(0x0a0a0a0a0a0a0a0a), rs2:x6(0xf5f5f5f5f5f5f5f5)
    TEST_RR_OP(aes64ds, x11, x21, x6, 0x7777a3a3a37777a3, 0xa0a0a0a0a0a0a0a, 0xf5f5f5f5f5f5f5f5, x1, 0, x7)

aes64ds_02_inst_11:
    // Test 11:  Test with dataset: sbox64
    // result rd:x12(0xbaba9e9e9ebaba9e), rs1:x20(0x0b0b0b0b0b0b0b0b), rs2:x5(0xf4f4f4f4f4f4f4f4)
    TEST_RR_OP(aes64ds, x12, x20, x5, 0xbaba9e9e9ebaba9e, 0xb0b0b0b0b0b0b0b, 0xf4f4f4f4f4f4f4f4, x1, 8, x7)

aes64ds_02_inst_12:
    // Test 12:  Test with dataset: sbox64
    // result rd:x13(0x7e7e8181817e7e81), rs1:x19(0x0c0c0c0c0c0c0c0c), rs2:x4(0xf3f3f3f3f3f3f3f3)
    TEST_RR_OP(aes64ds, x13, x19, x4, 0x7e7e8181817e7e81, 0xc0c0c0c0c0c0c0c, 0xf3f3f3f3f3f3f3f3, x1, 16, x7)

aes64ds_02_inst_13:
    // Test 13:  Test with dataset: sbox64
    // result rd:x14(0x0404f3f3f30404f3), rs1:x18(0x0d0d0d0d0d0d0d0d), rs2:x3(0xf2f2f2f2f2f2f2f2)
    TEST_RR_OP(aes64ds, x14, x18, x3, 0x0404f3f3f30404f3, 0xd0d0d0d0d0d0d0d, 0xf2f2f2f2f2f2f2f2, x1, 24, x7)

aes64ds_02_inst_14:
    // Test 14:  Test with dataset: sbox64
    // result rd:x15(0x2b2bd7d7d72b2bd7), rs1:x17(0x0e0e0e0e0e0e0e0e), rs2:x2(0xf1f1f1f1f1f1f1f1)
    TEST_RR_OP(aes64ds, x15, x17, x2, 0x2b2bd7d7d72b2bd7, 0xe0e0e0e0e0e0e0e, 0xf1f1f1f1f1f1f1f1, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x2,signature_4_0)


aes64ds_02_inst_15:
    // Test 15:  Test with dataset: sbox64
    // result rd:x16(0x1717fbfbfb1717fb), rs1:x16(0x0f0f0f0f0f0f0f0f), rs2:x1(0xf0f0f0f0f0f0f0f0)
    TEST_RR_OP(aes64ds, x16, x16, x1, 0x1717fbfbfb1717fb, 0xf0f0f0f0f0f0f0f, 0xf0f0f0f0f0f0f0f0, x2, 0, x3)

aes64ds_02_inst_16:
    // Test 16:  Test with dataset: sbox64
    // result rd:x17(0x61617c7c7c61617c), rs1:x15(0x1010101010101010), rs2:x31(0xefefefefefefefef)
    TEST_RR_OP(aes64ds, x17, x15, x31, 0x61617c7c7c61617c, 0x1010101010101010, 0xefefefefefefefef, x2, 8, x3)

aes64ds_02_inst_17:
    // Test 17:  Test with dataset: sbox64
    // result rd:x18(0x9999e3e3e39999e3), rs1:x14(0x1111111111111111), rs2:x30(0xeeeeeeeeeeeeeeee)
    TEST_RR_OP(aes64ds, x18, x14, x30, 0x9999e3e3e39999e3, 0x1111111111111111, 0xeeeeeeeeeeeeeeee, x2, 16, x3)

aes64ds_02_inst_18:
    // Test 18:  Test with dataset: sbox64
    // result rd:x19(0x5353393939535339), rs1:x13(0x1212121212121212), rs2:x29(0xedededededededed)
    TEST_RR_OP(aes64ds, x19, x13, x29, 0x5353393939535339, 0x1212121212121212, 0xedededededededed, x2, 24, x3)

aes64ds_02_inst_19:
    // Test 19:  Test with dataset: sbox64
    // result rd:x20(0x8383828282838382), rs1:x12(0x1313131313131313), rs2:x28(0xecececececececec)
    TEST_RR_OP(aes64ds, x20, x12, x28, 0x8383828282838382, 0x1313131313131313, 0xecececececececec, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_5_0)


aes64ds_02_inst_20:
    // Test 20:  Test with dataset: sbox64
    // result rd:x21(0x3c3c9b9b9b3c3c9b), rs1:x11(0x1414141414141414), rs2:x27(0xebebebebebebebeb)
    TEST_RR_OP(aes64ds, x21, x11, x27, 0x3c3c9b9b9b3c3c9b, 0x1414141414141414, 0xebebebebebebebeb, x1, 0, x2)

aes64ds_02_inst_21:
    // Test 21:  Test with dataset: sbox64
    // result rd:x22(0xbbbb2f2f2fbbbb2f), rs1:x10(0x1515151515151515), rs2:x26(0xeaeaeaeaeaeaeaea)
    TEST_RR_OP(aes64ds, x22, x10, x26, 0xbbbb2f2f2fbbbb2f, 0x1515151515151515, 0xeaeaeaeaeaeaeaea, x1, 8, x2)

aes64ds_02_inst_22:
    // Test 22:  Test with dataset: sbox64
    // result rd:x23(0xebebffffffebebff), rs1:x9(0x1616161616161616), rs2:x25(0xe9e9e9e9e9e9e9e9)
    TEST_RR_OP(aes64ds, x23, x9, x25, 0xebebffffffebebff, 0x1616161616161616, 0xe9e9e9e9e9e9e9e9, x1, 16, x2)

aes64ds_02_inst_23:
    // Test 23:  Test with dataset: sbox64
    // result rd:x24(0xc8c8878787c8c887), rs1:x8(0x1717171717171717), rs2:x24(0xe8e8e8e8e8e8e8e8)
    TEST_RR_OP(aes64ds, x24, x8, x24, 0xc8c8878787c8c887, 0x1717171717171717, 0xe8e8e8e8e8e8e8e8, x1, 24, x2)

aes64ds_02_inst_24:
    // Test 24:  Test with dataset: sbox64
    // result rd:x25(0xb0b0343434b0b034), rs1:x7(0x1818181818181818), rs2:x23(0xe7e7e7e7e7e7e7e7)
    TEST_RR_OP(aes64ds, x25, x7, x23, 0xb0b0343434b0b034, 0x1818181818181818, 0xe7e7e7e7e7e7e7e7, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_6_0)


aes64ds_02_inst_25:
    // Test 25:  Test with dataset: sbox64
    // result rd:x26(0xf5f58e8e8ef5f58e), rs1:x6(0x1919191919191919), rs2:x22(0xe6e6e6e6e6e6e6e6)
    TEST_RR_OP(aes64ds, x26, x6, x22, 0xf5f58e8e8ef5f58e, 0x1919191919191919, 0xe6e6e6e6e6e6e6e6, x1, 0, x7)

aes64ds_02_inst_26:
    // Test 26:  Test with dataset: sbox64
    // result rd:x27(0x2a2a4343432a2a43), rs1:x5(0x1a1a1a1a1a1a1a1a), rs2:x21(0xe5e5e5e5e5e5e5e5)
    TEST_RR_OP(aes64ds, x27, x5, x21, 0x2a2a4343432a2a43, 0x1a1a1a1a1a1a1a1a, 0xe5e5e5e5e5e5e5e5, x1, 8, x7)

aes64ds_02_inst_27:
    // Test 27:  Test with dataset: sbox64
    // result rd:x28(0xaeae444444aeae44), rs1:x4(0x1b1b1b1b1b1b1b1b), rs2:x20(0xe4e4e4e4e4e4e4e4)
    TEST_RR_OP(aes64ds, x28, x4, x20, 0xaeae444444aeae44, 0x1b1b1b1b1b1b1b1b, 0xe4e4e4e4e4e4e4e4, x1, 16, x7)

aes64ds_02_inst_28:
    // Test 28:  Test with dataset: sbox64
    // result rd:x29(0x4d4dc4c4c44d4dc4), rs1:x3(0x1c1c1c1c1c1c1c1c), rs2:x19(0xe3e3e3e3e3e3e3e3)
    TEST_RR_OP(aes64ds, x29, x3, x19, 0x4d4dc4c4c44d4dc4, 0x1c1c1c1c1c1c1c1c, 0xe3e3e3e3e3e3e3e3, x1, 24, x7)

aes64ds_02_inst_29:
    // Test 29:  Test with dataset: sbox64
    // result rd:x30(0x3b3bdedede3b3bde), rs1:x2(0x1d1d1d1d1d1d1d1d), rs2:x18(0xe2e2e2e2e2e2e2e2)
    TEST_RR_OP(aes64ds, x30, x2, x18, 0x3b3bdedede3b3bde, 0x1d1d1d1d1d1d1d1d, 0xe2e2e2e2e2e2e2e2, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x5,signature_7_0)


aes64ds_02_inst_30:
    // Test 30:  Test with dataset: sbox64
    // result rd:x31(0xe0e0e9e9e9e0e0e9), rs1:x1(0x1e1e1e1e1e1e1e1e), rs2:x17(0xe1e1e1e1e1e1e1e1)
    TEST_RR_OP(aes64ds, x31, x1, x17, 0xe0e0e9e9e9e0e0e9, 0x1e1e1e1e1e1e1e1e, 0xe1e1e1e1e1e1e1e1, x5, 0, x6)

aes64ds_02_inst_31:
    // Test 31:  Test with dataset: sbox64
    // result rd:x1(0xa0a0cbcbcba0a0cb), rs1:x31(0x1f1f1f1f1f1f1f1f), rs2:x16(0xe0e0e0e0e0e0e0e0)
    TEST_RR_OP(aes64ds, x1, x31, x16, 0xa0a0cbcbcba0a0cb, 0x1f1f1f1f1f1f1f1f, 0xe0e0e0e0e0e0e0e0, x5, 8, x6)

aes64ds_02_inst_32:
    // Test 32:  Test with dataset: sbox64
    // result rd:x2(0xefef545454efef54), rs1:x30(0x2020202020202020), rs2:x15(0xdfdfdfdfdfdfdfdf)
    TEST_RR_OP(aes64ds, x2, x30, x15, 0xefef545454efef54, 0x2020202020202020, 0xdfdfdfdfdfdfdfdf, x5, 16, x6)

aes64ds_02_inst_33:
    // Test 33:  Test with dataset: sbox64
    // result rd:x3(0x9c9c7b7b7b9c9c7b), rs1:x29(0x2121212121212121), rs2:x14(0xdededededededede)
    TEST_RR_OP(aes64ds, x3, x29, x14, 0x9c9c7b7b7b9c9c7b, 0x2121212121212121, 0xdededededededede, x5, 24, x6)

aes64ds_02_inst_34:
    // Test 34:  Test with dataset: sbox64
    // result rd:x4(0xc9c9949494c9c994), rs1:x28(0x2222222222222222), rs2:x13(0xdddddddddddddddd)
    TEST_RR_OP(aes64ds, x4, x28, x13, 0xc9c9949494c9c994, 0x2222222222222222, 0xdddddddddddddddd, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_8_0)


aes64ds_02_inst_35:
    // Test 35:  Test with dataset: sbox64
    // result rd:x5(0x9393323232939332), rs1:x27(0x2323232323232323), rs2:x12(0xdcdcdcdcdcdcdcdc)
    TEST_RR_OP(aes64ds, x5, x27, x12, 0x9393323232939332, 0x2323232323232323, 0xdcdcdcdcdcdcdcdc, x1, 0, x2)

aes64ds_02_inst_36:
    // Test 36:  Test with dataset: sbox64
    // result rd:x6(0x9f9fa6a6a69f9fa6), rs1:x26(0x2424242424242424), rs2:x11(0xdbdbdbdbdbdbdbdb)
    TEST_RR_OP(aes64ds, x6, x26, x11, 0x9f9fa6a6a69f9fa6, 0x2424242424242424, 0xdbdbdbdbdbdbdbdb, x1, 8, x2)

aes64ds_02_inst_37:
    // Test 37:  Test with dataset: sbox64
    // result rd:x7(0x7a7ac2c2c27a7ac2), rs1:x25(0x2525252525252525), rs2:x10(0xdadadadadadadada)
    TEST_RR_OP(aes64ds, x7, x25, x10, 0x7a7ac2c2c27a7ac2, 0x2525252525252525, 0xdadadadadadadada, x1, 16, x2)

aes64ds_02_inst_38:
    // Test 38:  Test with dataset: sbox64
    // result rd:x8(0xe5e5232323e5e523), rs1:x24(0x2626262626262626), rs2:x9(0xd9d9d9d9d9d9d9d9)
    TEST_RR_OP(aes64ds, x8, x24, x9, 0xe5e5232323e5e523, 0x2626262626262626, 0xd9d9d9d9d9d9d9d9, x1, 24, x2)

aes64ds_02_inst_39:
    // Test 39:  Test with dataset: sbox64
    // result rd:x9(0x2d2d3d3d3d2d2d3d), rs1:x23(0x2727272727272727), rs2:x8(0xd8d8d8d8d8d8d8d8)
    TEST_RR_OP(aes64ds, x9, x23, x8, 0x2d2d3d3d3d2d2d3d, 0x2727272727272727, 0xd8d8d8d8d8d8d8d8, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_9_0)


aes64ds_02_inst_40:
    // Test 40:  Test with dataset: sbox64
    // result rd:x10(0x0d0deeeeee0d0dee), rs1:x22(0x2828282828282828), rs2:x7(0xd7d7d7d7d7d7d7d7)
    TEST_RR_OP(aes64ds, x10, x22, x7, 0x0d0deeeeee0d0dee, 0x2828282828282828, 0xd7d7d7d7d7d7d7d7, x1, 0, x2)

aes64ds_02_inst_41:
    // Test 41:  Test with dataset: sbox64
    // result rd:x11(0x4a4a4c4c4c4a4a4c), rs1:x21(0x2929292929292929), rs2:x6(0xd6d6d6d6d6d6d6d6)
    TEST_RR_OP(aes64ds, x11, x21, x6, 0x4a4a4c4c4c4a4a4c, 0x2929292929292929, 0xd6d6d6d6d6d6d6d6, x1, 8, x2)

aes64ds_02_inst_42:
    // Test 42:  Test with dataset: sbox64
    // result rd:x12(0xb5b5959595b5b595), rs1:x20(0x2a2a2a2a2a2a2a2a), rs2:x5(0xd5d5d5d5d5d5d5d5)
    TEST_RR_OP(aes64ds, x12, x20, x5, 0xb5b5959595b5b595, 0x2a2a2a2a2a2a2a2a, 0xd5d5d5d5d5d5d5d5, x1, 16, x2)

aes64ds_02_inst_43:
    // Test 43:  Test with dataset: sbox64
    // result rd:x13(0x19190b0b0b19190b), rs1:x19(0x2b2b2b2b2b2b2b2b), rs2:x4(0xd4d4d4d4d4d4d4d4)
    TEST_RR_OP(aes64ds, x13, x19, x4, 0x19190b0b0b19190b, 0x2b2b2b2b2b2b2b2b, 0xd4d4d4d4d4d4d4d4, x1, 24, x2)

aes64ds_02_inst_44:
    // Test 44:  Test with dataset: sbox64
    // result rd:x14(0xa9a9424242a9a942), rs1:x18(0x2c2c2c2c2c2c2c2c), rs2:x3(0xd3d3d3d3d3d3d3d3)
    TEST_RR_OP(aes64ds, x14, x18, x3, 0xa9a9424242a9a942, 0x2c2c2c2c2c2c2c2c, 0xd3d3d3d3d3d3d3d3, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x3,signature_10_0)


aes64ds_02_inst_45:
    // Test 45:  Test with dataset: sbox64
    // result rd:x15(0x7f7ffafafa7f7ffa), rs1:x17(0x2d2d2d2d2d2d2d2d), rs2:x2(0xd2d2d2d2d2d2d2d2)
    TEST_RR_OP(aes64ds, x15, x17, x2, 0x7f7ffafafa7f7ffa, 0x2d2d2d2d2d2d2d2d, 0xd2d2d2d2d2d2d2d2, x3, 0, x4)

aes64ds_02_inst_46:
    // Test 46:  Test with dataset: sbox64
    // result rd:x16(0x5151c3c3c35151c3), rs1:x16(0x2e2e2e2e2e2e2e2e), rs2:x1(0xd1d1d1d1d1d1d1d1)
    TEST_RR_OP(aes64ds, x16, x16, x1, 0x5151c3c3c35151c3, 0x2e2e2e2e2e2e2e2e, 0xd1d1d1d1d1d1d1d1, x3, 8, x4)

aes64ds_02_inst_47:
    // Test 47:  Test with dataset: sbox64
    // result rd:x17(0x60604e4e4e60604e), rs1:x15(0x2f2f2f2f2f2f2f2f), rs2:x31(0xd0d0d0d0d0d0d0d0)
    TEST_RR_OP(aes64ds, x17, x15, x31, 0x60604e4e4e60604e, 0x2f2f2f2f2f2f2f2f, 0xd0d0d0d0d0d0d0d0, x3, 16, x4)

aes64ds_02_inst_48:
    // Test 48:  Test with dataset: sbox64
    // result rd:x18(0x5f5f0808085f5f08), rs1:x14(0x3030303030303030), rs2:x30(0xcfcfcfcfcfcfcfcf)
    TEST_RR_OP(aes64ds, x18, x14, x30, 0x5f5f0808085f5f08, 0x3030303030303030, 0xcfcfcfcfcfcfcfcf, x3, 24, x4)

aes64ds_02_inst_49:
    // Test 49:  Test with dataset: sbox64
    // result rd:x19(0xecec2e2e2eecec2e), rs1:x13(0x3131313131313131), rs2:x29(0xcececececececece)
    TEST_RR_OP(aes64ds, x19, x13, x29, 0xecec2e2e2eecec2e, 0x3131313131313131, 0xcececececececece, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_11_0)


aes64ds_02_inst_50:
    // Test 50:  Test with dataset: sbox64
    // result rd:x20(0x8080a1a1a18080a1), rs1:x12(0x3232323232323232), rs2:x28(0xcdcdcdcdcdcdcdcd)
    TEST_RR_OP(aes64ds, x20, x12, x28, 0x8080a1a1a18080a1, 0x3232323232323232, 0xcdcdcdcdcdcdcdcd, x1, 0, x2)

aes64ds_02_inst_51:
    // Test 51:  Test with dataset: sbox64
    // result rd:x21(0x2727666666272766), rs1:x11(0x3333333333333333), rs2:x27(0xcccccccccccccccc)
    TEST_RR_OP(aes64ds, x21, x11, x27, 0x2727666666272766, 0x3333333333333333, 0xcccccccccccccccc, x1, 8, x2)

aes64ds_02_inst_52:
    // Test 52:  Test with dataset: sbox64
    // result rd:x22(0x5959282828595928), rs1:x10(0x3434343434343434), rs2:x26(0xcbcbcbcbcbcbcbcb)
    TEST_RR_OP(aes64ds, x22, x10, x26, 0x5959282828595928, 0x3434343434343434, 0xcbcbcbcbcbcbcbcb, x1, 16, x2)

aes64ds_02_inst_53:
    // Test 53:  Test with dataset: sbox64
    // result rd:x23(0x1010d9d9d91010d9), rs1:x9(0x3535353535353535), rs2:x25(0xcacacacacacacaca)
    TEST_RR_OP(aes64ds, x23, x9, x25, 0x1010d9d9d91010d9, 0x3535353535353535, 0xcacacacacacacaca, x1, 24, x2)

aes64ds_02_inst_54:
    // Test 54:  Test with dataset: sbox64
    // result rd:x24(0x1212242424121224), rs1:x8(0x3636363636363636), rs2:x24(0xc9c9c9c9c9c9c9c9)
    TEST_RR_OP(aes64ds, x24, x8, x24, 0x1212242424121224, 0x3636363636363636, 0xc9c9c9c9c9c9c9c9, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_12_0)


aes64ds_02_inst_55:
    // Test 55:  Test with dataset: sbox64
    // result rd:x25(0xb1b1b2b2b2b1b1b2), rs1:x7(0x3737373737373737), rs2:x23(0xc8c8c8c8c8c8c8c8)
    TEST_RR_OP(aes64ds, x25, x7, x23, 0xb1b1b2b2b2b1b1b2, 0x3737373737373737, 0xc8c8c8c8c8c8c8c8, x1, 0, x2)

aes64ds_02_inst_56:
    // Test 56:  Test with dataset: sbox64
    // result rd:x26(0x3131767676313176), rs1:x6(0x3838383838383838), rs2:x22(0xc7c7c7c7c7c7c7c7)
    TEST_RR_OP(aes64ds, x26, x6, x22, 0x3131767676313176, 0x3838383838383838, 0xc7c7c7c7c7c7c7c7, x1, 8, x2)

aes64ds_02_inst_57:
    // Test 57:  Test with dataset: sbox64
    // result rd:x27(0xc7c75b5b5bc7c75b), rs1:x5(0x3939393939393939), rs2:x21(0xc6c6c6c6c6c6c6c6)
    TEST_RR_OP(aes64ds, x27, x5, x21, 0xc7c75b5b5bc7c75b, 0x3939393939393939, 0xc6c6c6c6c6c6c6c6, x1, 16, x2)

aes64ds_02_inst_58:
    // Test 58:  Test with dataset: sbox64
    // result rd:x28(0x0707a2a2a20707a2), rs1:x4(0x3a3a3a3a3a3a3a3a), rs2:x20(0xc5c5c5c5c5c5c5c5)
    TEST_RR_OP(aes64ds, x28, x4, x20, 0x0707a2a2a20707a2, 0x3a3a3a3a3a3a3a3a, 0xc5c5c5c5c5c5c5c5, x1, 24, x2)

aes64ds_02_inst_59:
    // Test 59:  Test with dataset: sbox64
    // result rd:x29(0x8888494949888849), rs1:x3(0x3b3b3b3b3b3b3b3b), rs2:x19(0xc4c4c4c4c4c4c4c4)
    TEST_RR_OP(aes64ds, x29, x3, x19, 0x8888494949888849, 0x3b3b3b3b3b3b3b3b, 0xc4c4c4c4c4c4c4c4, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x4,signature_13_0)


aes64ds_02_inst_60:
    // Test 60:  Test with dataset: sbox64
    // result rd:x30(0x33336d6d6d33336d), rs1:x2(0x3c3c3c3c3c3c3c3c), rs2:x18(0xc3c3c3c3c3c3c3c3)
    TEST_RR_OP(aes64ds, x30, x2, x18, 0x33336d6d6d33336d, 0x3c3c3c3c3c3c3c3c, 0xc3c3c3c3c3c3c3c3, x4, 0, x5)

aes64ds_02_inst_61:
    // Test 61:  Test with dataset: sbox64
    // result rd:x31(0xa8a88b8b8ba8a88b), rs1:x1(0x3d3d3d3d3d3d3d3d), rs2:x17(0xc2c2c2c2c2c2c2c2)
    TEST_RR_OP(aes64ds, x31, x1, x17, 0xa8a88b8b8ba8a88b, 0x3d3d3d3d3d3d3d3d, 0xc2c2c2c2c2c2c2c2, x4, 8, x5)

aes64ds_02_inst_62:
    // Test 62:  Test with dataset: sbox64
    // result rd:x1(0xddddd1d1d1ddddd1), rs1:x31(0x3e3e3e3e3e3e3e3e), rs2:x16(0xc1c1c1c1c1c1c1c1)
    TEST_RR_OP(aes64ds, x1, x31, x16, 0xddddd1d1d1ddddd1, 0x3e3e3e3e3e3e3e3e, 0xc1c1c1c1c1c1c1c1, x4, 16, x5)

aes64ds_02_inst_63:
    // Test 63:  Test with dataset: sbox64
    // result rd:x2(0x1f1f2525251f1f25), rs1:x30(0x3f3f3f3f3f3f3f3f), rs2:x15(0xc0c0c0c0c0c0c0c0)
    TEST_RR_OP(aes64ds, x2, x30, x15, 0x1f1f2525251f1f25, 0x3f3f3f3f3f3f3f3f, 0xc0c0c0c0c0c0c0c0, x4, 24, x5)

aes64ds_02_inst_64:
    // Test 64:  Test with dataset: sbox64
    // result rd:x3(0xf4f4727272f4f472), rs1:x29(0x4040404040404040), rs2:x14(0xbfbfbfbfbfbfbfbf)
    TEST_RR_OP(aes64ds, x3, x29, x14, 0xf4f4727272f4f472, 0x4040404040404040, 0xbfbfbfbfbfbfbfbf, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_14_0)


aes64ds_02_inst_65:
    // Test 65:  Test with dataset: sbox64
    // result rd:x4(0x5a5af8f8f85a5af8), rs1:x28(0x4141414141414141), rs2:x13(0xbebebebebebebebe)
    TEST_RR_OP(aes64ds, x4, x28, x13, 0x5a5af8f8f85a5af8, 0x4141414141414141, 0xbebebebebebebebe, x1, 0, x2)

aes64ds_02_inst_66:
    // Test 66:  Test with dataset: sbox64
    // result rd:x5(0xcdcdf6f6f6cdcdf6), rs1:x27(0x4242424242424242), rs2:x12(0xbdbdbdbdbdbdbdbd)
    TEST_RR_OP(aes64ds, x5, x27, x12, 0xcdcdf6f6f6cdcdf6, 0x4242424242424242, 0xbdbdbdbdbdbdbdbd, x1, 8, x2)

aes64ds_02_inst_67:
    // Test 67:  Test with dataset: sbox64
    // result rd:x6(0x7878646464787864), rs1:x26(0x4343434343434343), rs2:x11(0xbcbcbcbcbcbcbcbc)
    TEST_RR_OP(aes64ds, x6, x26, x11, 0x7878646464787864, 0x4343434343434343, 0xbcbcbcbcbcbcbcbc, x1, 16, x2)

aes64ds_02_inst_68:
    // Test 68:  Test with dataset: sbox64
    // result rd:x7(0xfefe868686fefe86), rs1:x25(0x4444444444444444), rs2:x10(0xbbbbbbbbbbbbbbbb)
    TEST_RR_OP(aes64ds, x7, x25, x10, 0xfefe868686fefe86, 0x4444444444444444, 0xbbbbbbbbbbbbbbbb, x1, 24, x2)

aes64ds_02_inst_69:
    // Test 69:  Test with dataset: sbox64
    // result rd:x8(0xc0c0686868c0c068), rs1:x24(0x4545454545454545), rs2:x9(0xbabababababababa)
    TEST_RR_OP(aes64ds, x8, x24, x9, 0xc0c0686868c0c068, 0x4545454545454545, 0xbabababababababa, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_15_0)


aes64ds_02_inst_70:
    // Test 70:  Test with dataset: sbox64
    // result rd:x9(0xdbdb989898dbdb98), rs1:x23(0x4646464646464646), rs2:x8(0xb9b9b9b9b9b9b9b9)
    TEST_RR_OP(aes64ds, x9, x23, x8, 0xdbdb989898dbdb98, 0x4646464646464646, 0xb9b9b9b9b9b9b9b9, x1, 0, x2)

aes64ds_02_inst_71:
    // Test 71:  Test with dataset: sbox64
    // result rd:x10(0x9a9a1616169a9a16), rs1:x22(0x4747474747474747), rs2:x7(0xb8b8b8b8b8b8b8b8)
    TEST_RR_OP(aes64ds, x10, x22, x7, 0x9a9a1616169a9a16, 0x4747474747474747, 0xb8b8b8b8b8b8b8b8, x1, 8, x2)

aes64ds_02_inst_72:
    // Test 72:  Test with dataset: sbox64
    // result rd:x11(0x2020d4d4d42020d4), rs1:x21(0x4848484848484848), rs2:x6(0xb7b7b7b7b7b7b7b7)
    TEST_RR_OP(aes64ds, x11, x21, x6, 0x2020d4d4d42020d4, 0x4848484848484848, 0xb7b7b7b7b7b7b7b7, x1, 16, x2)

aes64ds_02_inst_73:
    // Test 73:  Test with dataset: sbox64
    // result rd:x12(0x7979a4a4a47979a4), rs1:x20(0x4949494949494949), rs2:x5(0xb6b6b6b6b6b6b6b6)
    TEST_RR_OP(aes64ds, x12, x20, x5, 0x7979a4a4a47979a4, 0x4949494949494949, 0xb6b6b6b6b6b6b6b6, x1, 24, x2)

aes64ds_02_inst_74:
    // Test 74:  Test with dataset: sbox64
    // result rd:x13(0xd2d25c5c5cd2d25c), rs1:x19(0x4a4a4a4a4a4a4a4a), rs2:x4(0xb5b5b5b5b5b5b5b5)
    TEST_RR_OP(aes64ds, x13, x19, x4, 0xd2d25c5c5cd2d25c, 0x4a4a4a4a4a4a4a4a, 0xb5b5b5b5b5b5b5b5, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x4,signature_16_0)


aes64ds_02_inst_75:
    // Test 75:  Test with dataset: sbox64
    // result rd:x14(0xc6c6ccccccc6c6cc), rs1:x18(0x4b4b4b4b4b4b4b4b), rs2:x3(0xb4b4b4b4b4b4b4b4)
    TEST_RR_OP(aes64ds, x14, x18, x3, 0xc6c6ccccccc6c6cc, 0x4b4b4b4b4b4b4b4b, 0xb4b4b4b4b4b4b4b4, x4, 0, x5)

aes64ds_02_inst_76:
    // Test 76:  Test with dataset: sbox64
    // result rd:x15(0x4b4b5d5d5d4b4b5d), rs1:x17(0x4c4c4c4c4c4c4c4c), rs2:x2(0xb3b3b3b3b3b3b3b3)
    TEST_RR_OP(aes64ds, x15, x17, x2, 0x4b4b5d5d5d4b4b5d, 0x4c4c4c4c4c4c4c4c, 0xb3b3b3b3b3b3b3b3, x4, 8, x5)

aes64ds_02_inst_77:
    // Test 77:  Test with dataset: sbox64
    // result rd:x16(0x3e3e6565653e3e65), rs1:x16(0x4d4d4d4d4d4d4d4d), rs2:x1(0xb2b2b2b2b2b2b2b2)
    TEST_RR_OP(aes64ds, x16, x16, x1, 0x3e3e6565653e3e65, 0x4d4d4d4d4d4d4d4d, 0xb2b2b2b2b2b2b2b2, x4, 16, x5)

aes64ds_02_inst_78:
    // Test 78:  Test with dataset: sbox64
    // result rd:x17(0x5656b6b6b65656b6), rs1:x15(0x4e4e4e4e4e4e4e4e), rs2:x31(0xb1b1b1b1b1b1b1b1)
    TEST_RR_OP(aes64ds, x17, x15, x31, 0x5656b6b6b65656b6, 0x4e4e4e4e4e4e4e4e, 0xb1b1b1b1b1b1b1b1, x4, 24, x5)

aes64ds_02_inst_79:
    // Test 79:  Test with dataset: sbox64
    // result rd:x18(0xfcfc929292fcfc92), rs1:x14(0x4f4f4f4f4f4f4f4f), rs2:x30(0xb0b0b0b0b0b0b0b0)
    TEST_RR_OP(aes64ds, x18, x14, x30, 0xfcfc929292fcfc92, 0x4f4f4f4f4f4f4f4f, 0xb0b0b0b0b0b0b0b0, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_17_0)


aes64ds_02_inst_80:
    // Test 80:  Test with dataset: sbox64
    // result rd:x19(0x1b1b6c6c6c1b1b6c), rs1:x13(0x5050505050505050), rs2:x29(0xafafafafafafafaf)
    TEST_RR_OP(aes64ds, x19, x13, x29, 0x1b1b6c6c6c1b1b6c, 0x5050505050505050, 0xafafafafafafafaf, x1, 0, x2)

aes64ds_02_inst_81:
    // Test 81:  Test with dataset: sbox64
    // result rd:x20(0xbebe707070bebe70), rs1:x12(0x5151515151515151), rs2:x28(0xaeaeaeaeaeaeaeae)
    TEST_RR_OP(aes64ds, x20, x12, x28, 0xbebe707070bebe70, 0x5151515151515151, 0xaeaeaeaeaeaeaeae, x1, 8, x2)

aes64ds_02_inst_82:
    // Test 82:  Test with dataset: sbox64
    // result rd:x21(0x1818484848181848), rs1:x11(0x5252525252525252), rs2:x27(0xadadadadadadadad)
    TEST_RR_OP(aes64ds, x21, x11, x27, 0x1818484848181848, 0x5252525252525252, 0xadadadadadadadad, x1, 16, x2)

aes64ds_02_inst_83:
    // Test 83:  Test with dataset: sbox64
    // result rd:x22(0xaaaa505050aaaa50), rs1:x10(0x5353535353535353), rs2:x26(0xacacacacacacacac)
    TEST_RR_OP(aes64ds, x22, x10, x26, 0xaaaa505050aaaa50, 0x5353535353535353, 0xacacacacacacacac, x1, 24, x2)

aes64ds_02_inst_84:
    // Test 84:  Test with dataset: sbox64
    // result rd:x23(0x0e0efdfdfd0e0efd), rs1:x9(0x5454545454545454), rs2:x25(0xabababababababab)
    TEST_RR_OP(aes64ds, x23, x9, x25, 0x0e0efdfdfd0e0efd, 0x5454545454545454, 0xabababababababab, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_18_0)


aes64ds_02_inst_85:
    // Test 85:  Test with dataset: sbox64
    // result rd:x24(0x6262ededed6262ed), rs1:x8(0x5555555555555555), rs2:x24(0xaaaaaaaaaaaaaaaa)
    TEST_RR_OP(aes64ds, x24, x8, x24, 0x6262ededed6262ed, 0x5555555555555555, 0xaaaaaaaaaaaaaaaa, x1, 0, x2)

aes64ds_02_inst_86:
    // Test 86:  Test with dataset: sbox64
    // result rd:x25(0xb7b7b9b9b9b7b7b9), rs1:x7(0x5656565656565656), rs2:x23(0xa9a9a9a9a9a9a9a9)
    TEST_RR_OP(aes64ds, x25, x7, x23, 0xb7b7b9b9b9b7b7b9, 0x5656565656565656, 0xa9a9a9a9a9a9a9a9, x1, 8, x2)

aes64ds_02_inst_87:
    // Test 87:  Test with dataset: sbox64
    // result rd:x26(0x6f6fdadada6f6fda), rs1:x6(0x5757575757575757), rs2:x22(0xa8a8a8a8a8a8a8a8)
    TEST_RR_OP(aes64ds, x26, x6, x22, 0x6f6fdadada6f6fda, 0x5757575757575757, 0xa8a8a8a8a8a8a8a8, x1, 16, x2)

aes64ds_02_inst_88:
    // Test 88:  Test with dataset: sbox64
    // result rd:x27(0x89895e5e5e89895e), rs1:x5(0x5858585858585858), rs2:x21(0xa7a7a7a7a7a7a7a7)
    TEST_RR_OP(aes64ds, x27, x5, x21, 0x89895e5e5e89895e, 0x5858585858585858, 0xa7a7a7a7a7a7a7a7, x1, 24, x2)

aes64ds_02_inst_89:
    // Test 89:  Test with dataset: sbox64
    // result rd:x28(0xc5c5151515c5c515), rs1:x4(0x5959595959595959), rs2:x20(0xa6a6a6a6a6a6a6a6)
    TEST_RR_OP(aes64ds, x28, x4, x20, 0xc5c5151515c5c515, 0x5959595959595959, 0xa6a6a6a6a6a6a6a6, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x4,signature_19_0)


aes64ds_02_inst_90:
    // Test 90:  Test with dataset: sbox64
    // result rd:x29(0x2929464646292946), rs1:x3(0x5a5a5a5a5a5a5a5a), rs2:x19(0xa5a5a5a5a5a5a5a5)
    TEST_RR_OP(aes64ds, x29, x3, x19, 0x2929464646292946, 0x5a5a5a5a5a5a5a5a, 0xa5a5a5a5a5a5a5a5, x4, 0, x5)

aes64ds_02_inst_91:
    // Test 91:  Test with dataset: sbox64
    // result rd:x30(0x1d1d5757571d1d57), rs1:x2(0x5b5b5b5b5b5b5b5b), rs2:x18(0xa4a4a4a4a4a4a4a4)
    TEST_RR_OP(aes64ds, x30, x2, x18, 0x1d1d5757571d1d57, 0x5b5b5b5b5b5b5b5b, 0xa4a4a4a4a4a4a4a4, x4, 8, x5)

aes64ds_02_inst_92:
    // Test 92:  Test with dataset: sbox64
    // result rd:x31(0x7171a7a7a77171a7), rs1:x1(0x5c5c5c5c5c5c5c5c), rs2:x17(0xa3a3a3a3a3a3a3a3)
    TEST_RR_OP(aes64ds, x31, x1, x17, 0x7171a7a7a77171a7, 0x5c5c5c5c5c5c5c5c, 0xa3a3a3a3a3a3a3a3, x4, 16, x5)

aes64ds_02_inst_93:
    // Test 93:  Test with dataset: sbox64
    // result rd:x1(0x1a1a8d8d8d1a1a8d), rs1:x31(0x5d5d5d5d5d5d5d5d), rs2:x16(0xa2a2a2a2a2a2a2a2)
    TEST_RR_OP(aes64ds, x1, x31, x16, 0x1a1a8d8d8d1a1a8d, 0x5d5d5d5d5d5d5d5d, 0xa2a2a2a2a2a2a2a2, x4, 24, x5)

aes64ds_02_inst_94:
    // Test 94:  Test with dataset: sbox64
    // result rd:x2(0xf1f19d9d9df1f19d), rs1:x30(0x5e5e5e5e5e5e5e5e), rs2:x15(0xa1a1a1a1a1a1a1a1)
    TEST_RR_OP(aes64ds, x2, x30, x15, 0xf1f19d9d9df1f19d, 0x5e5e5e5e5e5e5e5e, 0xa1a1a1a1a1a1a1a1, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_20_0)


aes64ds_02_inst_95:
    // Test 95:  Test with dataset: sbox64
    // result rd:x3(0x4747848484474784), rs1:x29(0x5f5f5f5f5f5f5f5f), rs2:x14(0xa0a0a0a0a0a0a0a0)
    TEST_RR_OP(aes64ds, x3, x29, x14, 0x4747848484474784, 0x5f5f5f5f5f5f5f5f, 0xa0a0a0a0a0a0a0a0, x1, 0, x2)

aes64ds_02_inst_96:
    // Test 96:  Test with dataset: sbox64
    // result rd:x4(0x6e6e9090906e6e90), rs1:x28(0x6060606060606060), rs2:x13(0x9f9f9f9f9f9f9f9f)
    TEST_RR_OP(aes64ds, x4, x28, x13, 0x6e6e9090906e6e90, 0x6060606060606060, 0x9f9f9f9f9f9f9f9f, x1, 8, x2)

aes64ds_02_inst_97:
    // Test 97:  Test with dataset: sbox64
    // result rd:x5(0xdfdfd8d8d8dfdfd8), rs1:x27(0x6161616161616161), rs2:x12(0x9e9e9e9e9e9e9e9e)
    TEST_RR_OP(aes64ds, x5, x27, x12, 0xdfdfd8d8d8dfdfd8, 0x6161616161616161, 0x9e9e9e9e9e9e9e9e, x1, 16, x2)

aes64ds_02_inst_98:
    // Test 98:  Test with dataset: sbox64
    // result rd:x6(0x7575ababab7575ab), rs1:x26(0x6262626262626262), rs2:x11(0x9d9d9d9d9d9d9d9d)
    TEST_RR_OP(aes64ds, x6, x26, x11, 0x7575ababab7575ab, 0x6262626262626262, 0x9d9d9d9d9d9d9d9d, x1, 24, x2)

aes64ds_02_inst_99:
    // Test 99:  Test with dataset: sbox64
    // result rd:x7(0x1c1c0000001c1c00), rs1:x25(0x6363636363636363), rs2:x10(0x9c9c9c9c9c9c9c9c)
    TEST_RR_OP(aes64ds, x7, x25, x10, 0x1c1c0000001c1c00, 0x6363636363636363, 0x9c9c9c9c9c9c9c9c, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_21_0)


aes64ds_02_inst_100:
    // Test 100:  Test with dataset: sbox64
    // result rd:x8(0xe8e88c8c8ce8e88c), rs1:x24(0x6464646464646464), rs2:x9(0x9b9b9b9b9b9b9b9b)
    TEST_RR_OP(aes64ds, x8, x24, x9, 0xe8e88c8c8ce8e88c, 0x6464646464646464, 0x9b9b9b9b9b9b9b9b, x1, 0, x2)

aes64ds_02_inst_101:
    // Test 101:  Test with dataset: sbox64
    // result rd:x9(0x3737bcbcbc3737bc), rs1:x23(0x6565656565656565), rs2:x8(0x9a9a9a9a9a9a9a9a)
    TEST_RR_OP(aes64ds, x9, x23, x8, 0x3737bcbcbc3737bc, 0x6565656565656565, 0x9a9a9a9a9a9a9a9a, x1, 8, x2)

aes64ds_02_inst_102:
    // Test 102:  Test with dataset: sbox64
    // result rd:x10(0xf9f9d3d3d3f9f9d3), rs1:x22(0x6666666666666666), rs2:x7(0x9999999999999999)
    TEST_RR_OP(aes64ds, x10, x22, x7, 0xf9f9d3d3d3f9f9d3, 0x6666666666666666, 0x9999999999999999, x1, 16, x2)

aes64ds_02_inst_103:
    // Test 103:  Test with dataset: sbox64
    // result rd:x11(0xe2e20a0a0ae2e20a), rs1:x21(0x6767676767676767), rs2:x6(0x9898989898989898)
    TEST_RR_OP(aes64ds, x11, x21, x6, 0xe2e20a0a0ae2e20a, 0x6767676767676767, 0x9898989898989898, x1, 24, x2)

aes64ds_02_inst_104:
    // Test 104:  Test with dataset: sbox64
    // result rd:x12(0x8585f7f7f78585f7), rs1:x20(0x6868686868686868), rs2:x5(0x9797979797979797)
    TEST_RR_OP(aes64ds, x12, x20, x5, 0x8585f7f7f78585f7, 0x6868686868686868, 0x9797979797979797, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x5,signature_22_0)


aes64ds_02_inst_105:
    // Test 105:  Test with dataset: sbox64
    // result rd:x13(0x3535e4e4e43535e4), rs1:x19(0x6969696969696969), rs2:x4(0x9696969696969696)
    TEST_RR_OP(aes64ds, x13, x19, x4, 0x3535e4e4e43535e4, 0x6969696969696969, 0x9696969696969696, x5, 0, x6)

aes64ds_02_inst_106:
    // Test 106:  Test with dataset: sbox64
    // result rd:x14(0xadad585858adad58), rs1:x18(0x6a6a6a6a6a6a6a6a), rs2:x3(0x9595959595959595)
    TEST_RR_OP(aes64ds, x14, x18, x3, 0xadad585858adad58, 0x6a6a6a6a6a6a6a6a, 0x9595959595959595, x5, 8, x6)

aes64ds_02_inst_107:
    // Test 107:  Test with dataset: sbox64
    // result rd:x15(0xe7e7050505e7e705), rs1:x17(0x6b6b6b6b6b6b6b6b), rs2:x2(0x9494949494949494)
    TEST_RR_OP(aes64ds, x15, x17, x2, 0xe7e7050505e7e705, 0x6b6b6b6b6b6b6b6b, 0x9494949494949494, x5, 16, x6)

aes64ds_02_inst_108:
    // Test 108:  Test with dataset: sbox64
    // result rd:x16(0x2222b8b8b82222b8), rs1:x16(0x6c6c6c6c6c6c6c6c), rs2:x1(0x9393939393939393)
    TEST_RR_OP(aes64ds, x16, x16, x1, 0x2222b8b8b82222b8, 0x6c6c6c6c6c6c6c6c, 0x9393939393939393, x5, 24, x6)

aes64ds_02_inst_109:
    // Test 109:  Test with dataset: sbox64
    // result rd:x17(0x7474b3b3b37474b3), rs1:x15(0x6d6d6d6d6d6d6d6d), rs2:x31(0x9292929292929292)
    TEST_RR_OP(aes64ds, x17, x15, x31, 0x7474b3b3b37474b3, 0x6d6d6d6d6d6d6d6d, 0x9292929292929292, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_23_0)


aes64ds_02_inst_110:
    // Test 110:  Test with dataset: sbox64
    // result rd:x18(0xacac454545acac45), rs1:x14(0x6e6e6e6e6e6e6e6e), rs2:x30(0x9191919191919191)
    TEST_RR_OP(aes64ds, x18, x14, x30, 0xacac454545acac45, 0x6e6e6e6e6e6e6e6e, 0x9191919191919191, x1, 0, x2)

aes64ds_02_inst_111:
    // Test 111:  Test with dataset: sbox64
    // result rd:x19(0x9696060606969606), rs1:x13(0x6f6f6f6f6f6f6f6f), rs2:x29(0x9090909090909090)
    TEST_RR_OP(aes64ds, x19, x13, x29, 0x9696060606969606, 0x6f6f6f6f6f6f6f6f, 0x9090909090909090, x1, 8, x2)

aes64ds_02_inst_112:
    // Test 112:  Test with dataset: sbox64
    // result rd:x20(0x7373d0d0d07373d0), rs1:x12(0x7070707070707070), rs2:x28(0x8f8f8f8f8f8f8f8f)
    TEST_RR_OP(aes64ds, x20, x12, x28, 0x7373d0d0d07373d0, 0x7070707070707070, 0x8f8f8f8f8f8f8f8f, x1, 16, x2)

aes64ds_02_inst_113:
    // Test 113:  Test with dataset: sbox64
    // result rd:x21(0xe6e62c2c2ce6e62c), rs1:x11(0x7171717171717171), rs2:x27(0x8e8e8e8e8e8e8e8e)
    TEST_RR_OP(aes64ds, x21, x11, x27, 0xe6e62c2c2ce6e62c, 0x7171717171717171, 0x8e8e8e8e8e8e8e8e, x1, 24, x2)

aes64ds_02_inst_114:
    // Test 114:  Test with dataset: sbox64
    // result rd:x22(0xb4b41e1e1eb4b41e), rs1:x10(0x7272727272727272), rs2:x26(0x8d8d8d8d8d8d8d8d)
    TEST_RR_OP(aes64ds, x22, x10, x26, 0xb4b41e1e1eb4b41e, 0x7272727272727272, 0x8d8d8d8d8d8d8d8d, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_24_0)


aes64ds_02_inst_115:
    // Test 115:  Test with dataset: sbox64
    // result rd:x23(0xf0f08f8f8ff0f08f), rs1:x9(0x7373737373737373), rs2:x25(0x8c8c8c8c8c8c8c8c)
    TEST_RR_OP(aes64ds, x23, x9, x25, 0xf0f08f8f8ff0f08f, 0x7373737373737373, 0x8c8c8c8c8c8c8c8c, x1, 0, x2)

aes64ds_02_inst_116:
    // Test 116:  Test with dataset: sbox64
    // result rd:x24(0xcececacacacececa), rs1:x8(0x7474747474747474), rs2:x24(0x8b8b8b8b8b8b8b8b)
    TEST_RR_OP(aes64ds, x24, x8, x24, 0xcececacacacececa, 0x7474747474747474, 0x8b8b8b8b8b8b8b8b, x1, 8, x2)

aes64ds_02_inst_117:
    // Test 117:  Test with dataset: sbox64
    // result rd:x25(0xcfcf3f3f3fcfcf3f), rs1:x7(0x7575757575757575), rs2:x23(0x8a8a8a8a8a8a8a8a)
    TEST_RR_OP(aes64ds, x25, x7, x23, 0xcfcf3f3f3fcfcf3f, 0x7575757575757575, 0x8a8a8a8a8a8a8a8a, x1, 16, x2)

aes64ds_02_inst_118:
    // Test 118:  Test with dataset: sbox64
    // result rd:x26(0xf2f20f0f0ff2f20f), rs1:x6(0x7676767676767676), rs2:x22(0x8989898989898989)
    TEST_RR_OP(aes64ds, x26, x6, x22, 0xf2f20f0f0ff2f20f, 0x7676767676767676, 0x8989898989898989, x1, 24, x2)

aes64ds_02_inst_119:
    // Test 119:  Test with dataset: sbox64
    // result rd:x27(0x9797020202979702), rs1:x5(0x7777777777777777), rs2:x21(0x8888888888888888)
    TEST_RR_OP(aes64ds, x27, x5, x21, 0x9797020202979702, 0x7777777777777777, 0x8888888888888888, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x5,signature_25_0)


aes64ds_02_inst_120:
    // Test 120:  Test with dataset: sbox64
    // result rd:x28(0xeaeac1c1c1eaeac1), rs1:x4(0x7878787878787878), rs2:x20(0x8787878787878787)
    TEST_RR_OP(aes64ds, x28, x4, x20, 0xeaeac1c1c1eaeac1, 0x7878787878787878, 0x8787878787878787, x5, 0, x6)

aes64ds_02_inst_121:
    // Test 121:  Test with dataset: sbox64
    // result rd:x29(0xdcdcafafafdcdcaf), rs1:x3(0x7979797979797979), rs2:x19(0x8686868686868686)
    TEST_RR_OP(aes64ds, x29, x3, x19, 0xdcdcafafafdcdcaf, 0x7979797979797979, 0x8686868686868686, x5, 8, x6)

aes64ds_02_inst_122:
    // Test 122:  Test with dataset: sbox64
    // result rd:x30(0x6767bdbdbd6767bd), rs1:x2(0x7a7a7a7a7a7a7a7a), rs2:x18(0x8585858585858585)
    TEST_RR_OP(aes64ds, x30, x2, x18, 0x6767bdbdbd6767bd, 0x7a7a7a7a7a7a7a7a, 0x8585858585858585, x5, 16, x6)

aes64ds_02_inst_123:
    // Test 123:  Test with dataset: sbox64
    // result rd:x31(0x4f4f0303034f4f03), rs1:x1(0x7b7b7b7b7b7b7b7b), rs2:x17(0x8484848484848484)
    TEST_RR_OP(aes64ds, x31, x1, x17, 0x4f4f0303034f4f03, 0x7b7b7b7b7b7b7b7b, 0x8484848484848484, x5, 24, x6)

aes64ds_02_inst_124:
    // Test 124:  Test with dataset: sbox64
    // result rd:x1(0x4141010101414101), rs1:x31(0x7c7c7c7c7c7c7c7c), rs2:x16(0x8383838383838383)
    TEST_RR_OP(aes64ds, x1, x31, x16, 0x4141010101414101, 0x7c7c7c7c7c7c7c7c, 0x8383838383838383, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_26_0)


aes64ds_02_inst_125:
    // Test 125:  Test with dataset: sbox64
    // result rd:x2(0x1111131313111113), rs1:x30(0x7d7d7d7d7d7d7d7d), rs2:x15(0x8282828282828282)
    TEST_RR_OP(aes64ds, x2, x30, x15, 0x1111131313111113, 0x7d7d7d7d7d7d7d7d, 0x8282828282828282, x1, 0, x7)

aes64ds_02_inst_126:
    // Test 126:  Test with dataset: sbox64
    // result rd:x3(0x91918a8a8a91918a), rs1:x29(0x7e7e7e7e7e7e7e7e), rs2:x14(0x8181818181818181)
    TEST_RR_OP(aes64ds, x3, x29, x14, 0x91918a8a8a91918a, 0x7e7e7e7e7e7e7e7e, 0x8181818181818181, x1, 8, x7)

aes64ds_02_inst_127:
    // Test 127:  Test with dataset: sbox64
    // result rd:x4(0x3a3a6b6b6b3a3a6b), rs1:x28(0x7f7f7f7f7f7f7f7f), rs2:x13(0x8080808080808080)
    TEST_RR_OP(aes64ds, x4, x28, x13, 0x3a3a6b6b6b3a3a6b, 0x7f7f7f7f7f7f7f7f, 0x8080808080808080, x1, 16, x7)

aes64ds_02_inst_128:
    // Test 128:  Test with dataset: sbox64
    // result rd:x5(0x6b6b3a3a3a6b6b3a), rs1:x27(0x8080808080808080), rs2:x12(0x7f7f7f7f7f7f7f7f)
    TEST_RR_OP(aes64ds, x5, x27, x12, 0x6b6b3a3a3a6b6b3a, 0x8080808080808080, 0x7f7f7f7f7f7f7f7f, x1, 24, x7)

aes64ds_02_inst_129:
    // Test 129:  Test with dataset: sbox64
    // result rd:x6(0x8a8a9191918a8a91), rs1:x26(0x8181818181818181), rs2:x11(0x7e7e7e7e7e7e7e7e)
    TEST_RR_OP(aes64ds, x6, x26, x11, 0x8a8a9191918a8a91, 0x8181818181818181, 0x7e7e7e7e7e7e7e7e, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_27_0)


aes64ds_02_inst_130:
    // Test 130:  Test with dataset: sbox64
    // result rd:x7(0x1313111111131311), rs1:x25(0x8282828282828282), rs2:x10(0x7d7d7d7d7d7d7d7d)
    TEST_RR_OP(aes64ds, x7, x25, x10, 0x1313111111131311, 0x8282828282828282, 0x7d7d7d7d7d7d7d7d, x1, 0, x2)

aes64ds_02_inst_131:
    // Test 131:  Test with dataset: sbox64
    // result rd:x8(0x0101414141010141), rs1:x24(0x8383838383838383), rs2:x9(0x7c7c7c7c7c7c7c7c)
    TEST_RR_OP(aes64ds, x8, x24, x9, 0x0101414141010141, 0x8383838383838383, 0x7c7c7c7c7c7c7c7c, x1, 8, x2)

aes64ds_02_inst_132:
    // Test 132:  Test with dataset: sbox64
    // result rd:x9(0x03034f4f4f03034f), rs1:x23(0x8484848484848484), rs2:x8(0x7b7b7b7b7b7b7b7b)
    TEST_RR_OP(aes64ds, x9, x23, x8, 0x03034f4f4f03034f, 0x8484848484848484, 0x7b7b7b7b7b7b7b7b, x1, 16, x2)

aes64ds_02_inst_133:
    // Test 133:  Test with dataset: sbox64
    // result rd:x10(0xbdbd676767bdbd67), rs1:x22(0x8585858585858585), rs2:x7(0x7a7a7a7a7a7a7a7a)
    TEST_RR_OP(aes64ds, x10, x22, x7, 0xbdbd676767bdbd67, 0x8585858585858585, 0x7a7a7a7a7a7a7a7a, x1, 24, x2)

aes64ds_02_inst_134:
    // Test 134:  Test with dataset: sbox64
    // result rd:x11(0xafafdcdcdcafafdc), rs1:x21(0x8686868686868686), rs2:x6(0x7979797979797979)
    TEST_RR_OP(aes64ds, x11, x21, x6, 0xafafdcdcdcafafdc, 0x8686868686868686, 0x7979797979797979, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x6,signature_28_0)


aes64ds_02_inst_135:
    // Test 135:  Test with dataset: sbox64
    // result rd:x12(0xc1c1eaeaeac1c1ea), rs1:x20(0x8787878787878787), rs2:x5(0x7878787878787878)
    TEST_RR_OP(aes64ds, x12, x20, x5, 0xc1c1eaeaeac1c1ea, 0x8787878787878787, 0x7878787878787878, x6, 0, x7)

aes64ds_02_inst_136:
    // Test 136:  Test with dataset: sbox64
    // result rd:x13(0x0202979797020297), rs1:x19(0x8888888888888888), rs2:x4(0x7777777777777777)
    TEST_RR_OP(aes64ds, x13, x19, x4, 0x0202979797020297, 0x8888888888888888, 0x7777777777777777, x6, 8, x7)

aes64ds_02_inst_137:
    // Test 137:  Test with dataset: sbox64
    // result rd:x14(0x0f0ff2f2f20f0ff2), rs1:x18(0x8989898989898989), rs2:x3(0x7676767676767676)
    TEST_RR_OP(aes64ds, x14, x18, x3, 0x0f0ff2f2f20f0ff2, 0x8989898989898989, 0x7676767676767676, x6, 16, x7)

aes64ds_02_inst_138:
    // Test 138:  Test with dataset: sbox64
    // result rd:x15(0x3f3fcfcfcf3f3fcf), rs1:x17(0x8a8a8a8a8a8a8a8a), rs2:x2(0x7575757575757575)
    TEST_RR_OP(aes64ds, x15, x17, x2, 0x3f3fcfcfcf3f3fcf, 0x8a8a8a8a8a8a8a8a, 0x7575757575757575, x6, 24, x7)

aes64ds_02_inst_139:
    // Test 139:  Test with dataset: sbox64
    // result rd:x16(0xcacacecececacace), rs1:x16(0x8b8b8b8b8b8b8b8b), rs2:x1(0x7474747474747474)
    TEST_RR_OP(aes64ds, x16, x16, x1, 0xcacacecececacace, 0x8b8b8b8b8b8b8b8b, 0x7474747474747474, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_29_0)


aes64ds_02_inst_140:
    // Test 140:  Test with dataset: sbox64
    // result rd:x17(0x8f8ff0f0f08f8ff0), rs1:x15(0x8c8c8c8c8c8c8c8c), rs2:x31(0x7373737373737373)
    TEST_RR_OP(aes64ds, x17, x15, x31, 0x8f8ff0f0f08f8ff0, 0x8c8c8c8c8c8c8c8c, 0x7373737373737373, x1, 0, x2)

aes64ds_02_inst_141:
    // Test 141:  Test with dataset: sbox64
    // result rd:x18(0x1e1eb4b4b41e1eb4), rs1:x14(0x8d8d8d8d8d8d8d8d), rs2:x30(0x7272727272727272)
    TEST_RR_OP(aes64ds, x18, x14, x30, 0x1e1eb4b4b41e1eb4, 0x8d8d8d8d8d8d8d8d, 0x7272727272727272, x1, 8, x2)

aes64ds_02_inst_142:
    // Test 142:  Test with dataset: sbox64
    // result rd:x19(0x2c2ce6e6e62c2ce6), rs1:x13(0x8e8e8e8e8e8e8e8e), rs2:x29(0x7171717171717171)
    TEST_RR_OP(aes64ds, x19, x13, x29, 0x2c2ce6e6e62c2ce6, 0x8e8e8e8e8e8e8e8e, 0x7171717171717171, x1, 16, x2)

aes64ds_02_inst_143:
    // Test 143:  Test with dataset: sbox64
    // result rd:x20(0xd0d0737373d0d073), rs1:x12(0x8f8f8f8f8f8f8f8f), rs2:x28(0x7070707070707070)
    TEST_RR_OP(aes64ds, x20, x12, x28, 0xd0d0737373d0d073, 0x8f8f8f8f8f8f8f8f, 0x7070707070707070, x1, 24, x2)

aes64ds_02_inst_144:
    // Test 144:  Test with dataset: sbox64
    // result rd:x21(0x0606969696060696), rs1:x11(0x9090909090909090), rs2:x27(0x6f6f6f6f6f6f6f6f)
    TEST_RR_OP(aes64ds, x21, x11, x27, 0x0606969696060696, 0x9090909090909090, 0x6f6f6f6f6f6f6f6f, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_30_0)


aes64ds_02_inst_145:
    // Test 145:  Test with dataset: sbox64
    // result rd:x22(0x4545acacac4545ac), rs1:x10(0x9191919191919191), rs2:x26(0x6e6e6e6e6e6e6e6e)
    TEST_RR_OP(aes64ds, x22, x10, x26, 0x4545acacac4545ac, 0x9191919191919191, 0x6e6e6e6e6e6e6e6e, x1, 0, x2)

aes64ds_02_inst_146:
    // Test 146:  Test with dataset: sbox64
    // result rd:x23(0xb3b3747474b3b374), rs1:x9(0x9292929292929292), rs2:x25(0x6d6d6d6d6d6d6d6d)
    TEST_RR_OP(aes64ds, x23, x9, x25, 0xb3b3747474b3b374, 0x9292929292929292, 0x6d6d6d6d6d6d6d6d, x1, 8, x2)

aes64ds_02_inst_147:
    // Test 147:  Test with dataset: sbox64
    // result rd:x24(0xb8b8222222b8b822), rs1:x8(0x9393939393939393), rs2:x24(0x6c6c6c6c6c6c6c6c)
    TEST_RR_OP(aes64ds, x24, x8, x24, 0xb8b8222222b8b822, 0x9393939393939393, 0x6c6c6c6c6c6c6c6c, x1, 16, x2)

aes64ds_02_inst_148:
    // Test 148:  Test with dataset: sbox64
    // result rd:x25(0x0505e7e7e70505e7), rs1:x7(0x9494949494949494), rs2:x23(0x6b6b6b6b6b6b6b6b)
    TEST_RR_OP(aes64ds, x25, x7, x23, 0x0505e7e7e70505e7, 0x9494949494949494, 0x6b6b6b6b6b6b6b6b, x1, 24, x2)

aes64ds_02_inst_149:
    // Test 149:  Test with dataset: sbox64
    // result rd:x26(0x5858adadad5858ad), rs1:x6(0x9595959595959595), rs2:x22(0x6a6a6a6a6a6a6a6a)
    TEST_RR_OP(aes64ds, x26, x6, x22, 0x5858adadad5858ad, 0x9595959595959595, 0x6a6a6a6a6a6a6a6a, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x6,signature_31_0)


aes64ds_02_inst_150:
    // Test 150:  Test with dataset: sbox64
    // result rd:x27(0xe4e4353535e4e435), rs1:x5(0x9696969696969696), rs2:x21(0x6969696969696969)
    TEST_RR_OP(aes64ds, x27, x5, x21, 0xe4e4353535e4e435, 0x9696969696969696, 0x6969696969696969, x6, 0, x7)

aes64ds_02_inst_151:
    // Test 151:  Test with dataset: sbox64
    // result rd:x28(0xf7f7858585f7f785), rs1:x4(0x9797979797979797), rs2:x20(0x6868686868686868)
    TEST_RR_OP(aes64ds, x28, x4, x20, 0xf7f7858585f7f785, 0x9797979797979797, 0x6868686868686868, x6, 8, x7)

aes64ds_02_inst_152:
    // Test 152:  Test with dataset: sbox64
    // result rd:x29(0x0a0ae2e2e20a0ae2), rs1:x3(0x9898989898989898), rs2:x19(0x6767676767676767)
    TEST_RR_OP(aes64ds, x29, x3, x19, 0x0a0ae2e2e20a0ae2, 0x9898989898989898, 0x6767676767676767, x6, 16, x7)

aes64ds_02_inst_153:
    // Test 153:  Test with dataset: sbox64
    // result rd:x30(0xd3d3f9f9f9d3d3f9), rs1:x2(0x9999999999999999), rs2:x18(0x6666666666666666)
    TEST_RR_OP(aes64ds, x30, x2, x18, 0xd3d3f9f9f9d3d3f9, 0x9999999999999999, 0x6666666666666666, x6, 24, x7)

aes64ds_02_inst_154:
    // Test 154:  Test with dataset: sbox64
    // result rd:x31(0xbcbc373737bcbc37), rs1:x1(0x9a9a9a9a9a9a9a9a), rs2:x17(0x6565656565656565)
    TEST_RR_OP(aes64ds, x31, x1, x17, 0xbcbc373737bcbc37, 0x9a9a9a9a9a9a9a9a, 0x6565656565656565, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x6,signature_32_0)


aes64ds_02_inst_155:
    // Test 155:  Test with dataset: sbox64
    // result rd:x1(0x8c8ce8e8e88c8ce8), rs1:x31(0x9b9b9b9b9b9b9b9b), rs2:x16(0x6464646464646464)
    TEST_RR_OP(aes64ds, x1, x31, x16, 0x8c8ce8e8e88c8ce8, 0x9b9b9b9b9b9b9b9b, 0x6464646464646464, x6, 0, x7)

aes64ds_02_inst_156:
    // Test 156:  Test with dataset: sbox64
    // result rd:x2(0x00001c1c1c00001c), rs1:x30(0x9c9c9c9c9c9c9c9c), rs2:x15(0x6363636363636363)
    TEST_RR_OP(aes64ds, x2, x30, x15, 0x00001c1c1c00001c, 0x9c9c9c9c9c9c9c9c, 0x6363636363636363, x6, 8, x7)

aes64ds_02_inst_157:
    // Test 157:  Test with dataset: sbox64
    // result rd:x3(0xabab757575abab75), rs1:x29(0x9d9d9d9d9d9d9d9d), rs2:x14(0x6262626262626262)
    TEST_RR_OP(aes64ds, x3, x29, x14, 0xabab757575abab75, 0x9d9d9d9d9d9d9d9d, 0x6262626262626262, x6, 16, x7)

aes64ds_02_inst_158:
    // Test 158:  Test with dataset: sbox64
    // result rd:x4(0xd8d8dfdfdfd8d8df), rs1:x28(0x9e9e9e9e9e9e9e9e), rs2:x13(0x6161616161616161)
    TEST_RR_OP(aes64ds, x4, x28, x13, 0xd8d8dfdfdfd8d8df, 0x9e9e9e9e9e9e9e9e, 0x6161616161616161, x6, 24, x7)

aes64ds_02_inst_159:
    // Test 159:  Test with dataset: sbox64
    // result rd:x5(0x90906e6e6e90906e), rs1:x27(0x9f9f9f9f9f9f9f9f), rs2:x12(0x6060606060606060)
    TEST_RR_OP(aes64ds, x5, x27, x12, 0x90906e6e6e90906e, 0x9f9f9f9f9f9f9f9f, 0x6060606060606060, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_33_0)


aes64ds_02_inst_160:
    // Test 160:  Test with dataset: sbox64
    // result rd:x6(0x8484474747848447), rs1:x26(0xa0a0a0a0a0a0a0a0), rs2:x11(0x5f5f5f5f5f5f5f5f)
    TEST_RR_OP(aes64ds, x6, x26, x11, 0x8484474747848447, 0xa0a0a0a0a0a0a0a0, 0x5f5f5f5f5f5f5f5f, x1, 0, x2)

aes64ds_02_inst_161:
    // Test 161:  Test with dataset: sbox64
    // result rd:x7(0x9d9df1f1f19d9df1), rs1:x25(0xa1a1a1a1a1a1a1a1), rs2:x10(0x5e5e5e5e5e5e5e5e)
    TEST_RR_OP(aes64ds, x7, x25, x10, 0x9d9df1f1f19d9df1, 0xa1a1a1a1a1a1a1a1, 0x5e5e5e5e5e5e5e5e, x1, 8, x2)

aes64ds_02_inst_162:
    // Test 162:  Test with dataset: sbox64
    // result rd:x8(0x8d8d1a1a1a8d8d1a), rs1:x24(0xa2a2a2a2a2a2a2a2), rs2:x9(0x5d5d5d5d5d5d5d5d)
    TEST_RR_OP(aes64ds, x8, x24, x9, 0x8d8d1a1a1a8d8d1a, 0xa2a2a2a2a2a2a2a2, 0x5d5d5d5d5d5d5d5d, x1, 16, x2)

aes64ds_02_inst_163:
    // Test 163:  Test with dataset: sbox64
    // result rd:x9(0xa7a7717171a7a771), rs1:x23(0xa3a3a3a3a3a3a3a3), rs2:x8(0x5c5c5c5c5c5c5c5c)
    TEST_RR_OP(aes64ds, x9, x23, x8, 0xa7a7717171a7a771, 0xa3a3a3a3a3a3a3a3, 0x5c5c5c5c5c5c5c5c, x1, 24, x2)

aes64ds_02_inst_164:
    // Test 164:  Test with dataset: sbox64
    // result rd:x10(0x57571d1d1d57571d), rs1:x22(0xa4a4a4a4a4a4a4a4), rs2:x7(0x5b5b5b5b5b5b5b5b)
    TEST_RR_OP(aes64ds, x10, x22, x7, 0x57571d1d1d57571d, 0xa4a4a4a4a4a4a4a4, 0x5b5b5b5b5b5b5b5b, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_34_0)


aes64ds_02_inst_165:
    // Test 165:  Test with dataset: sbox64
    // result rd:x11(0x4646292929464629), rs1:x21(0xa5a5a5a5a5a5a5a5), rs2:x6(0x5a5a5a5a5a5a5a5a)
    TEST_RR_OP(aes64ds, x11, x21, x6, 0x4646292929464629, 0xa5a5a5a5a5a5a5a5, 0x5a5a5a5a5a5a5a5a, x1, 0, x7)

aes64ds_02_inst_166:
    // Test 166:  Test with dataset: sbox64
    // result rd:x12(0x1515c5c5c51515c5), rs1:x20(0xa6a6a6a6a6a6a6a6), rs2:x5(0x5959595959595959)
    TEST_RR_OP(aes64ds, x12, x20, x5, 0x1515c5c5c51515c5, 0xa6a6a6a6a6a6a6a6, 0x5959595959595959, x1, 8, x7)

aes64ds_02_inst_167:
    // Test 167:  Test with dataset: sbox64
    // result rd:x13(0x5e5e8989895e5e89), rs1:x19(0xa7a7a7a7a7a7a7a7), rs2:x4(0x5858585858585858)
    TEST_RR_OP(aes64ds, x13, x19, x4, 0x5e5e8989895e5e89, 0xa7a7a7a7a7a7a7a7, 0x5858585858585858, x1, 16, x7)

aes64ds_02_inst_168:
    // Test 168:  Test with dataset: sbox64
    // result rd:x14(0xdada6f6f6fdada6f), rs1:x18(0xa8a8a8a8a8a8a8a8), rs2:x3(0x5757575757575757)
    TEST_RR_OP(aes64ds, x14, x18, x3, 0xdada6f6f6fdada6f, 0xa8a8a8a8a8a8a8a8, 0x5757575757575757, x1, 24, x7)

aes64ds_02_inst_169:
    // Test 169:  Test with dataset: sbox64
    // result rd:x15(0xb9b9b7b7b7b9b9b7), rs1:x17(0xa9a9a9a9a9a9a9a9), rs2:x2(0x5656565656565656)
    TEST_RR_OP(aes64ds, x15, x17, x2, 0xb9b9b7b7b7b9b9b7, 0xa9a9a9a9a9a9a9a9, 0x5656565656565656, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x2,signature_35_0)


aes64ds_02_inst_170:
    // Test 170:  Test with dataset: sbox64
    // result rd:x16(0xeded626262eded62), rs1:x16(0xaaaaaaaaaaaaaaaa), rs2:x1(0x5555555555555555)
    TEST_RR_OP(aes64ds, x16, x16, x1, 0xeded626262eded62, 0xaaaaaaaaaaaaaaaa, 0x5555555555555555, x2, 0, x3)

aes64ds_02_inst_171:
    // Test 171:  Test with dataset: sbox64
    // result rd:x17(0xfdfd0e0e0efdfd0e), rs1:x15(0xabababababababab), rs2:x31(0x5454545454545454)
    TEST_RR_OP(aes64ds, x17, x15, x31, 0xfdfd0e0e0efdfd0e, 0xabababababababab, 0x5454545454545454, x2, 8, x3)

aes64ds_02_inst_172:
    // Test 172:  Test with dataset: sbox64
    // result rd:x18(0x5050aaaaaa5050aa), rs1:x14(0xacacacacacacacac), rs2:x30(0x5353535353535353)
    TEST_RR_OP(aes64ds, x18, x14, x30, 0x5050aaaaaa5050aa, 0xacacacacacacacac, 0x5353535353535353, x2, 16, x3)

aes64ds_02_inst_173:
    // Test 173:  Test with dataset: sbox64
    // result rd:x19(0x4848181818484818), rs1:x13(0xadadadadadadadad), rs2:x29(0x5252525252525252)
    TEST_RR_OP(aes64ds, x19, x13, x29, 0x4848181818484818, 0xadadadadadadadad, 0x5252525252525252, x2, 24, x3)

aes64ds_02_inst_174:
    // Test 174:  Test with dataset: sbox64
    // result rd:x20(0x7070bebebe7070be), rs1:x12(0xaeaeaeaeaeaeaeae), rs2:x28(0x5151515151515151)
    TEST_RR_OP(aes64ds, x20, x12, x28, 0x7070bebebe7070be, 0xaeaeaeaeaeaeaeae, 0x5151515151515151, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_36_0)


aes64ds_02_inst_175:
    // Test 175:  Test with dataset: sbox64
    // result rd:x21(0x6c6c1b1b1b6c6c1b), rs1:x11(0xafafafafafafafaf), rs2:x27(0x5050505050505050)
    TEST_RR_OP(aes64ds, x21, x11, x27, 0x6c6c1b1b1b6c6c1b, 0xafafafafafafafaf, 0x5050505050505050, x1, 0, x2)

aes64ds_02_inst_176:
    // Test 176:  Test with dataset: sbox64
    // result rd:x22(0x9292fcfcfc9292fc), rs1:x10(0xb0b0b0b0b0b0b0b0), rs2:x26(0x4f4f4f4f4f4f4f4f)
    TEST_RR_OP(aes64ds, x22, x10, x26, 0x9292fcfcfc9292fc, 0xb0b0b0b0b0b0b0b0, 0x4f4f4f4f4f4f4f4f, x1, 8, x2)

aes64ds_02_inst_177:
    // Test 177:  Test with dataset: sbox64
    // result rd:x23(0xb6b6565656b6b656), rs1:x9(0xb1b1b1b1b1b1b1b1), rs2:x25(0x4e4e4e4e4e4e4e4e)
    TEST_RR_OP(aes64ds, x23, x9, x25, 0xb6b6565656b6b656, 0xb1b1b1b1b1b1b1b1, 0x4e4e4e4e4e4e4e4e, x1, 16, x2)

aes64ds_02_inst_178:
    // Test 178:  Test with dataset: sbox64
    // result rd:x24(0x65653e3e3e65653e), rs1:x8(0xb2b2b2b2b2b2b2b2), rs2:x24(0x4d4d4d4d4d4d4d4d)
    TEST_RR_OP(aes64ds, x24, x8, x24, 0x65653e3e3e65653e, 0xb2b2b2b2b2b2b2b2, 0x4d4d4d4d4d4d4d4d, x1, 24, x2)

aes64ds_02_inst_179:
    // Test 179:  Test with dataset: sbox64
    // result rd:x25(0x5d5d4b4b4b5d5d4b), rs1:x7(0xb3b3b3b3b3b3b3b3), rs2:x23(0x4c4c4c4c4c4c4c4c)
    TEST_RR_OP(aes64ds, x25, x7, x23, 0x5d5d4b4b4b5d5d4b, 0xb3b3b3b3b3b3b3b3, 0x4c4c4c4c4c4c4c4c, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_37_0)


aes64ds_02_inst_180:
    // Test 180:  Test with dataset: sbox64
    // result rd:x26(0xccccc6c6c6ccccc6), rs1:x6(0xb4b4b4b4b4b4b4b4), rs2:x22(0x4b4b4b4b4b4b4b4b)
    TEST_RR_OP(aes64ds, x26, x6, x22, 0xccccc6c6c6ccccc6, 0xb4b4b4b4b4b4b4b4, 0x4b4b4b4b4b4b4b4b, x1, 0, x7)

aes64ds_02_inst_181:
    // Test 181:  Test with dataset: sbox64
    // result rd:x27(0x5c5cd2d2d25c5cd2), rs1:x5(0xb5b5b5b5b5b5b5b5), rs2:x21(0x4a4a4a4a4a4a4a4a)
    TEST_RR_OP(aes64ds, x27, x5, x21, 0x5c5cd2d2d25c5cd2, 0xb5b5b5b5b5b5b5b5, 0x4a4a4a4a4a4a4a4a, x1, 8, x7)

aes64ds_02_inst_182:
    // Test 182:  Test with dataset: sbox64
    // result rd:x28(0xa4a4797979a4a479), rs1:x4(0xb6b6b6b6b6b6b6b6), rs2:x20(0x4949494949494949)
    TEST_RR_OP(aes64ds, x28, x4, x20, 0xa4a4797979a4a479, 0xb6b6b6b6b6b6b6b6, 0x4949494949494949, x1, 16, x7)

aes64ds_02_inst_183:
    // Test 183:  Test with dataset: sbox64
    // result rd:x29(0xd4d4202020d4d420), rs1:x3(0xb7b7b7b7b7b7b7b7), rs2:x19(0x4848484848484848)
    TEST_RR_OP(aes64ds, x29, x3, x19, 0xd4d4202020d4d420, 0xb7b7b7b7b7b7b7b7, 0x4848484848484848, x1, 24, x7)

aes64ds_02_inst_184:
    // Test 184:  Test with dataset: sbox64
    // result rd:x30(0x16169a9a9a16169a), rs1:x2(0xb8b8b8b8b8b8b8b8), rs2:x18(0x4747474747474747)
    TEST_RR_OP(aes64ds, x30, x2, x18, 0x16169a9a9a16169a, 0xb8b8b8b8b8b8b8b8, 0x4747474747474747, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x5,signature_38_0)


aes64ds_02_inst_185:
    // Test 185:  Test with dataset: sbox64
    // result rd:x31(0x9898dbdbdb9898db), rs1:x1(0xb9b9b9b9b9b9b9b9), rs2:x17(0x4646464646464646)
    TEST_RR_OP(aes64ds, x31, x1, x17, 0x9898dbdbdb9898db, 0xb9b9b9b9b9b9b9b9, 0x4646464646464646, x5, 0, x6)

aes64ds_02_inst_186:
    // Test 186:  Test with dataset: sbox64
    // result rd:x1(0x6868c0c0c06868c0), rs1:x31(0xbabababababababa), rs2:x16(0x4545454545454545)
    TEST_RR_OP(aes64ds, x1, x31, x16, 0x6868c0c0c06868c0, 0xbabababababababa, 0x4545454545454545, x5, 8, x6)

aes64ds_02_inst_187:
    // Test 187:  Test with dataset: sbox64
    // result rd:x2(0x8686fefefe8686fe), rs1:x30(0xbbbbbbbbbbbbbbbb), rs2:x15(0x4444444444444444)
    TEST_RR_OP(aes64ds, x2, x30, x15, 0x8686fefefe8686fe, 0xbbbbbbbbbbbbbbbb, 0x4444444444444444, x5, 16, x6)

aes64ds_02_inst_188:
    // Test 188:  Test with dataset: sbox64
    // result rd:x3(0x6464787878646478), rs1:x29(0xbcbcbcbcbcbcbcbc), rs2:x14(0x4343434343434343)
    TEST_RR_OP(aes64ds, x3, x29, x14, 0x6464787878646478, 0xbcbcbcbcbcbcbcbc, 0x4343434343434343, x5, 24, x6)

aes64ds_02_inst_189:
    // Test 189:  Test with dataset: sbox64
    // result rd:x4(0xf6f6cdcdcdf6f6cd), rs1:x28(0xbdbdbdbdbdbdbdbd), rs2:x13(0x4242424242424242)
    TEST_RR_OP(aes64ds, x4, x28, x13, 0xf6f6cdcdcdf6f6cd, 0xbdbdbdbdbdbdbdbd, 0x4242424242424242, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_39_0)


aes64ds_02_inst_190:
    // Test 190:  Test with dataset: sbox64
    // result rd:x5(0xf8f85a5a5af8f85a), rs1:x27(0xbebebebebebebebe), rs2:x12(0x4141414141414141)
    TEST_RR_OP(aes64ds, x5, x27, x12, 0xf8f85a5a5af8f85a, 0xbebebebebebebebe, 0x4141414141414141, x1, 0, x2)

aes64ds_02_inst_191:
    // Test 191:  Test with dataset: sbox64
    // result rd:x6(0x7272f4f4f47272f4), rs1:x26(0xbfbfbfbfbfbfbfbf), rs2:x11(0x4040404040404040)
    TEST_RR_OP(aes64ds, x6, x26, x11, 0x7272f4f4f47272f4, 0xbfbfbfbfbfbfbfbf, 0x4040404040404040, x1, 8, x2)

aes64ds_02_inst_192:
    // Test 192:  Test with dataset: sbox64
    // result rd:x7(0x25251f1f1f25251f), rs1:x25(0xc0c0c0c0c0c0c0c0), rs2:x10(0x3f3f3f3f3f3f3f3f)
    TEST_RR_OP(aes64ds, x7, x25, x10, 0x25251f1f1f25251f, 0xc0c0c0c0c0c0c0c0, 0x3f3f3f3f3f3f3f3f, x1, 16, x2)

aes64ds_02_inst_193:
    // Test 193:  Test with dataset: sbox64
    // result rd:x8(0xd1d1ddddddd1d1dd), rs1:x24(0xc1c1c1c1c1c1c1c1), rs2:x9(0x3e3e3e3e3e3e3e3e)
    TEST_RR_OP(aes64ds, x8, x24, x9, 0xd1d1ddddddd1d1dd, 0xc1c1c1c1c1c1c1c1, 0x3e3e3e3e3e3e3e3e, x1, 24, x2)

aes64ds_02_inst_194:
    // Test 194:  Test with dataset: sbox64
    // result rd:x9(0x8b8ba8a8a88b8ba8), rs1:x23(0xc2c2c2c2c2c2c2c2), rs2:x8(0x3d3d3d3d3d3d3d3d)
    TEST_RR_OP(aes64ds, x9, x23, x8, 0x8b8ba8a8a88b8ba8, 0xc2c2c2c2c2c2c2c2, 0x3d3d3d3d3d3d3d3d, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_40_0)


aes64ds_02_inst_195:
    // Test 195:  Test with dataset: sbox64
    // result rd:x10(0x6d6d3333336d6d33), rs1:x22(0xc3c3c3c3c3c3c3c3), rs2:x7(0x3c3c3c3c3c3c3c3c)
    TEST_RR_OP(aes64ds, x10, x22, x7, 0x6d6d3333336d6d33, 0xc3c3c3c3c3c3c3c3, 0x3c3c3c3c3c3c3c3c, x1, 0, x2)

aes64ds_02_inst_196:
    // Test 196:  Test with dataset: sbox64
    // result rd:x11(0x4949888888494988), rs1:x21(0xc4c4c4c4c4c4c4c4), rs2:x6(0x3b3b3b3b3b3b3b3b)
    TEST_RR_OP(aes64ds, x11, x21, x6, 0x4949888888494988, 0xc4c4c4c4c4c4c4c4, 0x3b3b3b3b3b3b3b3b, x1, 8, x2)

aes64ds_02_inst_197:
    // Test 197:  Test with dataset: sbox64
    // result rd:x12(0xa2a2070707a2a207), rs1:x20(0xc5c5c5c5c5c5c5c5), rs2:x5(0x3a3a3a3a3a3a3a3a)
    TEST_RR_OP(aes64ds, x12, x20, x5, 0xa2a2070707a2a207, 0xc5c5c5c5c5c5c5c5, 0x3a3a3a3a3a3a3a3a, x1, 16, x2)

aes64ds_02_inst_198:
    // Test 198:  Test with dataset: sbox64
    // result rd:x13(0x5b5bc7c7c75b5bc7), rs1:x19(0xc6c6c6c6c6c6c6c6), rs2:x4(0x3939393939393939)
    TEST_RR_OP(aes64ds, x13, x19, x4, 0x5b5bc7c7c75b5bc7, 0xc6c6c6c6c6c6c6c6, 0x3939393939393939, x1, 24, x2)

aes64ds_02_inst_199:
    // Test 199:  Test with dataset: sbox64
    // result rd:x14(0x7676313131767631), rs1:x18(0xc7c7c7c7c7c7c7c7), rs2:x3(0x3838383838383838)
    TEST_RR_OP(aes64ds, x14, x18, x3, 0x7676313131767631, 0xc7c7c7c7c7c7c7c7, 0x3838383838383838, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x3,signature_41_0)


aes64ds_02_inst_200:
    // Test 200:  Test with dataset: sbox64
    // result rd:x15(0xb2b2b1b1b1b2b2b1), rs1:x17(0xc8c8c8c8c8c8c8c8), rs2:x2(0x3737373737373737)
    TEST_RR_OP(aes64ds, x15, x17, x2, 0xb2b2b1b1b1b2b2b1, 0xc8c8c8c8c8c8c8c8, 0x3737373737373737, x3, 0, x4)

aes64ds_02_inst_201:
    // Test 201:  Test with dataset: sbox64
    // result rd:x16(0x2424121212242412), rs1:x16(0xc9c9c9c9c9c9c9c9), rs2:x1(0x3636363636363636)
    TEST_RR_OP(aes64ds, x16, x16, x1, 0x2424121212242412, 0xc9c9c9c9c9c9c9c9, 0x3636363636363636, x3, 8, x4)

aes64ds_02_inst_202:
    // Test 202:  Test with dataset: sbox64
    // result rd:x17(0xd9d9101010d9d910), rs1:x15(0xcacacacacacacaca), rs2:x31(0x3535353535353535)
    TEST_RR_OP(aes64ds, x17, x15, x31, 0xd9d9101010d9d910, 0xcacacacacacacaca, 0x3535353535353535, x3, 16, x4)

aes64ds_02_inst_203:
    // Test 203:  Test with dataset: sbox64
    // result rd:x18(0x2828595959282859), rs1:x14(0xcbcbcbcbcbcbcbcb), rs2:x30(0x3434343434343434)
    TEST_RR_OP(aes64ds, x18, x14, x30, 0x2828595959282859, 0xcbcbcbcbcbcbcbcb, 0x3434343434343434, x3, 24, x4)

aes64ds_02_inst_204:
    // Test 204:  Test with dataset: sbox64
    // result rd:x19(0x6666272727666627), rs1:x13(0xcccccccccccccccc), rs2:x29(0x3333333333333333)
    TEST_RR_OP(aes64ds, x19, x13, x29, 0x6666272727666627, 0xcccccccccccccccc, 0x3333333333333333, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_42_0)


aes64ds_02_inst_205:
    // Test 205:  Test with dataset: sbox64
    // result rd:x20(0xa1a1808080a1a180), rs1:x12(0xcdcdcdcdcdcdcdcd), rs2:x28(0x3232323232323232)
    TEST_RR_OP(aes64ds, x20, x12, x28, 0xa1a1808080a1a180, 0xcdcdcdcdcdcdcdcd, 0x3232323232323232, x1, 0, x2)

aes64ds_02_inst_206:
    // Test 206:  Test with dataset: sbox64
    // result rd:x21(0x2e2eececec2e2eec), rs1:x11(0xcececececececece), rs2:x27(0x3131313131313131)
    TEST_RR_OP(aes64ds, x21, x11, x27, 0x2e2eececec2e2eec, 0xcececececececece, 0x3131313131313131, x1, 8, x2)

aes64ds_02_inst_207:
    // Test 207:  Test with dataset: sbox64
    // result rd:x22(0x08085f5f5f08085f), rs1:x10(0xcfcfcfcfcfcfcfcf), rs2:x26(0x3030303030303030)
    TEST_RR_OP(aes64ds, x22, x10, x26, 0x08085f5f5f08085f, 0xcfcfcfcfcfcfcfcf, 0x3030303030303030, x1, 16, x2)

aes64ds_02_inst_208:
    // Test 208:  Test with dataset: sbox64
    // result rd:x23(0x4e4e6060604e4e60), rs1:x9(0xd0d0d0d0d0d0d0d0), rs2:x25(0x2f2f2f2f2f2f2f2f)
    TEST_RR_OP(aes64ds, x23, x9, x25, 0x4e4e6060604e4e60, 0xd0d0d0d0d0d0d0d0, 0x2f2f2f2f2f2f2f2f, x1, 24, x2)

aes64ds_02_inst_209:
    // Test 209:  Test with dataset: sbox64
    // result rd:x24(0xc3c3515151c3c351), rs1:x8(0xd1d1d1d1d1d1d1d1), rs2:x24(0x2e2e2e2e2e2e2e2e)
    TEST_RR_OP(aes64ds, x24, x8, x24, 0xc3c3515151c3c351, 0xd1d1d1d1d1d1d1d1, 0x2e2e2e2e2e2e2e2e, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_43_0)


aes64ds_02_inst_210:
    // Test 210:  Test with dataset: sbox64
    // result rd:x25(0xfafa7f7f7ffafa7f), rs1:x7(0xd2d2d2d2d2d2d2d2), rs2:x23(0x2d2d2d2d2d2d2d2d)
    TEST_RR_OP(aes64ds, x25, x7, x23, 0xfafa7f7f7ffafa7f, 0xd2d2d2d2d2d2d2d2, 0x2d2d2d2d2d2d2d2d, x1, 0, x2)

aes64ds_02_inst_211:
    // Test 211:  Test with dataset: sbox64
    // result rd:x26(0x4242a9a9a94242a9), rs1:x6(0xd3d3d3d3d3d3d3d3), rs2:x22(0x2c2c2c2c2c2c2c2c)
    TEST_RR_OP(aes64ds, x26, x6, x22, 0x4242a9a9a94242a9, 0xd3d3d3d3d3d3d3d3, 0x2c2c2c2c2c2c2c2c, x1, 8, x2)

aes64ds_02_inst_212:
    // Test 212:  Test with dataset: sbox64
    // result rd:x27(0x0b0b1919190b0b19), rs1:x5(0xd4d4d4d4d4d4d4d4), rs2:x21(0x2b2b2b2b2b2b2b2b)
    TEST_RR_OP(aes64ds, x27, x5, x21, 0x0b0b1919190b0b19, 0xd4d4d4d4d4d4d4d4, 0x2b2b2b2b2b2b2b2b, x1, 16, x2)

aes64ds_02_inst_213:
    // Test 213:  Test with dataset: sbox64
    // result rd:x28(0x9595b5b5b59595b5), rs1:x4(0xd5d5d5d5d5d5d5d5), rs2:x20(0x2a2a2a2a2a2a2a2a)
    TEST_RR_OP(aes64ds, x28, x4, x20, 0x9595b5b5b59595b5, 0xd5d5d5d5d5d5d5d5, 0x2a2a2a2a2a2a2a2a, x1, 24, x2)

aes64ds_02_inst_214:
    // Test 214:  Test with dataset: sbox64
    // result rd:x29(0x4c4c4a4a4a4c4c4a), rs1:x3(0xd6d6d6d6d6d6d6d6), rs2:x19(0x2929292929292929)
    TEST_RR_OP(aes64ds, x29, x3, x19, 0x4c4c4a4a4a4c4c4a, 0xd6d6d6d6d6d6d6d6, 0x2929292929292929, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x4,signature_44_0)


aes64ds_02_inst_215:
    // Test 215:  Test with dataset: sbox64
    // result rd:x30(0xeeee0d0d0deeee0d), rs1:x2(0xd7d7d7d7d7d7d7d7), rs2:x18(0x2828282828282828)
    TEST_RR_OP(aes64ds, x30, x2, x18, 0xeeee0d0d0deeee0d, 0xd7d7d7d7d7d7d7d7, 0x2828282828282828, x4, 0, x5)

aes64ds_02_inst_216:
    // Test 216:  Test with dataset: sbox64
    // result rd:x31(0x3d3d2d2d2d3d3d2d), rs1:x1(0xd8d8d8d8d8d8d8d8), rs2:x17(0x2727272727272727)
    TEST_RR_OP(aes64ds, x31, x1, x17, 0x3d3d2d2d2d3d3d2d, 0xd8d8d8d8d8d8d8d8, 0x2727272727272727, x4, 8, x5)

aes64ds_02_inst_217:
    // Test 217:  Test with dataset: sbox64
    // result rd:x1(0x2323e5e5e52323e5), rs1:x31(0xd9d9d9d9d9d9d9d9), rs2:x16(0x2626262626262626)
    TEST_RR_OP(aes64ds, x1, x31, x16, 0x2323e5e5e52323e5, 0xd9d9d9d9d9d9d9d9, 0x2626262626262626, x4, 16, x5)

aes64ds_02_inst_218:
    // Test 218:  Test with dataset: sbox64
    // result rd:x2(0xc2c27a7a7ac2c27a), rs1:x30(0xdadadadadadadada), rs2:x15(0x2525252525252525)
    TEST_RR_OP(aes64ds, x2, x30, x15, 0xc2c27a7a7ac2c27a, 0xdadadadadadadada, 0x2525252525252525, x4, 24, x5)

aes64ds_02_inst_219:
    // Test 219:  Test with dataset: sbox64
    // result rd:x3(0xa6a69f9f9fa6a69f), rs1:x29(0xdbdbdbdbdbdbdbdb), rs2:x14(0x2424242424242424)
    TEST_RR_OP(aes64ds, x3, x29, x14, 0xa6a69f9f9fa6a69f, 0xdbdbdbdbdbdbdbdb, 0x2424242424242424, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_45_0)


aes64ds_02_inst_220:
    // Test 220:  Test with dataset: sbox64
    // result rd:x4(0x3232939393323293), rs1:x28(0xdcdcdcdcdcdcdcdc), rs2:x13(0x2323232323232323)
    TEST_RR_OP(aes64ds, x4, x28, x13, 0x3232939393323293, 0xdcdcdcdcdcdcdcdc, 0x2323232323232323, x1, 0, x2)

aes64ds_02_inst_221:
    // Test 221:  Test with dataset: sbox64
    // result rd:x5(0x9494c9c9c99494c9), rs1:x27(0xdddddddddddddddd), rs2:x12(0x2222222222222222)
    TEST_RR_OP(aes64ds, x5, x27, x12, 0x9494c9c9c99494c9, 0xdddddddddddddddd, 0x2222222222222222, x1, 8, x2)

aes64ds_02_inst_222:
    // Test 222:  Test with dataset: sbox64
    // result rd:x6(0x7b7b9c9c9c7b7b9c), rs1:x26(0xdededededededede), rs2:x11(0x2121212121212121)
    TEST_RR_OP(aes64ds, x6, x26, x11, 0x7b7b9c9c9c7b7b9c, 0xdededededededede, 0x2121212121212121, x1, 16, x2)

aes64ds_02_inst_223:
    // Test 223:  Test with dataset: sbox64
    // result rd:x7(0x5454efefef5454ef), rs1:x25(0xdfdfdfdfdfdfdfdf), rs2:x10(0x2020202020202020)
    TEST_RR_OP(aes64ds, x7, x25, x10, 0x5454efefef5454ef, 0xdfdfdfdfdfdfdfdf, 0x2020202020202020, x1, 24, x2)

aes64ds_02_inst_224:
    // Test 224:  Test with dataset: sbox64
    // result rd:x8(0xcbcba0a0a0cbcba0), rs1:x24(0xe0e0e0e0e0e0e0e0), rs2:x9(0x1f1f1f1f1f1f1f1f)
    TEST_RR_OP(aes64ds, x8, x24, x9, 0xcbcba0a0a0cbcba0, 0xe0e0e0e0e0e0e0e0, 0x1f1f1f1f1f1f1f1f, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_46_0)


aes64ds_02_inst_225:
    // Test 225:  Test with dataset: sbox64
    // result rd:x9(0xe9e9e0e0e0e9e9e0), rs1:x23(0xe1e1e1e1e1e1e1e1), rs2:x8(0x1e1e1e1e1e1e1e1e)
    TEST_RR_OP(aes64ds, x9, x23, x8, 0xe9e9e0e0e0e9e9e0, 0xe1e1e1e1e1e1e1e1, 0x1e1e1e1e1e1e1e1e, x1, 0, x2)

aes64ds_02_inst_226:
    // Test 226:  Test with dataset: sbox64
    // result rd:x10(0xdede3b3b3bdede3b), rs1:x22(0xe2e2e2e2e2e2e2e2), rs2:x7(0x1d1d1d1d1d1d1d1d)
    TEST_RR_OP(aes64ds, x10, x22, x7, 0xdede3b3b3bdede3b, 0xe2e2e2e2e2e2e2e2, 0x1d1d1d1d1d1d1d1d, x1, 8, x2)

aes64ds_02_inst_227:
    // Test 227:  Test with dataset: sbox64
    // result rd:x11(0xc4c44d4d4dc4c44d), rs1:x21(0xe3e3e3e3e3e3e3e3), rs2:x6(0x1c1c1c1c1c1c1c1c)
    TEST_RR_OP(aes64ds, x11, x21, x6, 0xc4c44d4d4dc4c44d, 0xe3e3e3e3e3e3e3e3, 0x1c1c1c1c1c1c1c1c, x1, 16, x2)

aes64ds_02_inst_228:
    // Test 228:  Test with dataset: sbox64
    // result rd:x12(0x4444aeaeae4444ae), rs1:x20(0xe4e4e4e4e4e4e4e4), rs2:x5(0x1b1b1b1b1b1b1b1b)
    TEST_RR_OP(aes64ds, x12, x20, x5, 0x4444aeaeae4444ae, 0xe4e4e4e4e4e4e4e4, 0x1b1b1b1b1b1b1b1b, x1, 24, x2)

aes64ds_02_inst_229:
    // Test 229:  Test with dataset: sbox64
    // result rd:x13(0x43432a2a2a43432a), rs1:x19(0xe5e5e5e5e5e5e5e5), rs2:x4(0x1a1a1a1a1a1a1a1a)
    TEST_RR_OP(aes64ds, x13, x19, x4, 0x43432a2a2a43432a, 0xe5e5e5e5e5e5e5e5, 0x1a1a1a1a1a1a1a1a, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x4,signature_47_0)


aes64ds_02_inst_230:
    // Test 230:  Test with dataset: sbox64
    // result rd:x14(0x8e8ef5f5f58e8ef5), rs1:x18(0xe6e6e6e6e6e6e6e6), rs2:x3(0x1919191919191919)
    TEST_RR_OP(aes64ds, x14, x18, x3, 0x8e8ef5f5f58e8ef5, 0xe6e6e6e6e6e6e6e6, 0x1919191919191919, x4, 0, x5)

aes64ds_02_inst_231:
    // Test 231:  Test with dataset: sbox64
    // result rd:x15(0x3434b0b0b03434b0), rs1:x17(0xe7e7e7e7e7e7e7e7), rs2:x2(0x1818181818181818)
    TEST_RR_OP(aes64ds, x15, x17, x2, 0x3434b0b0b03434b0, 0xe7e7e7e7e7e7e7e7, 0x1818181818181818, x4, 8, x5)

aes64ds_02_inst_232:
    // Test 232:  Test with dataset: sbox64
    // result rd:x16(0x8787c8c8c88787c8), rs1:x16(0xe8e8e8e8e8e8e8e8), rs2:x1(0x1717171717171717)
    TEST_RR_OP(aes64ds, x16, x16, x1, 0x8787c8c8c88787c8, 0xe8e8e8e8e8e8e8e8, 0x1717171717171717, x4, 16, x5)

aes64ds_02_inst_233:
    // Test 233:  Test with dataset: sbox64
    // result rd:x17(0xffffebebebffffeb), rs1:x15(0xe9e9e9e9e9e9e9e9), rs2:x31(0x1616161616161616)
    TEST_RR_OP(aes64ds, x17, x15, x31, 0xffffebebebffffeb, 0xe9e9e9e9e9e9e9e9, 0x1616161616161616, x4, 24, x5)

aes64ds_02_inst_234:
    // Test 234:  Test with dataset: sbox64
    // result rd:x18(0x2f2fbbbbbb2f2fbb), rs1:x14(0xeaeaeaeaeaeaeaea), rs2:x30(0x1515151515151515)
    TEST_RR_OP(aes64ds, x18, x14, x30, 0x2f2fbbbbbb2f2fbb, 0xeaeaeaeaeaeaeaea, 0x1515151515151515, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_48_0)


aes64ds_02_inst_235:
    // Test 235:  Test with dataset: sbox64
    // result rd:x19(0x9b9b3c3c3c9b9b3c), rs1:x13(0xebebebebebebebeb), rs2:x29(0x1414141414141414)
    TEST_RR_OP(aes64ds, x19, x13, x29, 0x9b9b3c3c3c9b9b3c, 0xebebebebebebebeb, 0x1414141414141414, x1, 0, x2)

aes64ds_02_inst_236:
    // Test 236:  Test with dataset: sbox64
    // result rd:x20(0x8282838383828283), rs1:x12(0xecececececececec), rs2:x28(0x1313131313131313)
    TEST_RR_OP(aes64ds, x20, x12, x28, 0x8282838383828283, 0xecececececececec, 0x1313131313131313, x1, 8, x2)

aes64ds_02_inst_237:
    // Test 237:  Test with dataset: sbox64
    // result rd:x21(0x3939535353393953), rs1:x11(0xedededededededed), rs2:x27(0x1212121212121212)
    TEST_RR_OP(aes64ds, x21, x11, x27, 0x3939535353393953, 0xedededededededed, 0x1212121212121212, x1, 16, x2)

aes64ds_02_inst_238:
    // Test 238:  Test with dataset: sbox64
    // result rd:x22(0xe3e3999999e3e399), rs1:x10(0xeeeeeeeeeeeeeeee), rs2:x26(0x1111111111111111)
    TEST_RR_OP(aes64ds, x22, x10, x26, 0xe3e3999999e3e399, 0xeeeeeeeeeeeeeeee, 0x1111111111111111, x1, 24, x2)

aes64ds_02_inst_239:
    // Test 239:  Test with dataset: sbox64
    // result rd:x23(0x7c7c6161617c7c61), rs1:x9(0xefefefefefefefef), rs2:x25(0x1010101010101010)
    TEST_RR_OP(aes64ds, x23, x9, x25, 0x7c7c6161617c7c61, 0xefefefefefefefef, 0x1010101010101010, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_49_0)


aes64ds_02_inst_240:
    // Test 240:  Test with dataset: sbox64
    // result rd:x24(0xfbfb171717fbfb17), rs1:x8(0xf0f0f0f0f0f0f0f0), rs2:x24(0x0f0f0f0f0f0f0f0f)
    TEST_RR_OP(aes64ds, x24, x8, x24, 0xfbfb171717fbfb17, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f, x1, 0, x2)

aes64ds_02_inst_241:
    // Test 241:  Test with dataset: sbox64
    // result rd:x25(0xd7d72b2b2bd7d72b), rs1:x7(0xf1f1f1f1f1f1f1f1), rs2:x23(0x0e0e0e0e0e0e0e0e)
    TEST_RR_OP(aes64ds, x25, x7, x23, 0xd7d72b2b2bd7d72b, 0xf1f1f1f1f1f1f1f1, 0xe0e0e0e0e0e0e0e, x1, 8, x2)

aes64ds_02_inst_242:
    // Test 242:  Test with dataset: sbox64
    // result rd:x26(0xf3f3040404f3f304), rs1:x6(0xf2f2f2f2f2f2f2f2), rs2:x22(0x0d0d0d0d0d0d0d0d)
    TEST_RR_OP(aes64ds, x26, x6, x22, 0xf3f3040404f3f304, 0xf2f2f2f2f2f2f2f2, 0xd0d0d0d0d0d0d0d, x1, 16, x2)

aes64ds_02_inst_243:
    // Test 243:  Test with dataset: sbox64
    // result rd:x27(0x81817e7e7e81817e), rs1:x5(0xf3f3f3f3f3f3f3f3), rs2:x21(0x0c0c0c0c0c0c0c0c)
    TEST_RR_OP(aes64ds, x27, x5, x21, 0x81817e7e7e81817e, 0xf3f3f3f3f3f3f3f3, 0xc0c0c0c0c0c0c0c, x1, 24, x2)

aes64ds_02_inst_244:
    // Test 244:  Test with dataset: sbox64
    // result rd:x28(0x9e9ebababa9e9eba), rs1:x4(0xf4f4f4f4f4f4f4f4), rs2:x20(0x0b0b0b0b0b0b0b0b)
    TEST_RR_OP(aes64ds, x28, x4, x20, 0x9e9ebababa9e9eba, 0xf4f4f4f4f4f4f4f4, 0xb0b0b0b0b0b0b0b, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x4,signature_50_0)


aes64ds_02_inst_245:
    // Test 245:  Test with dataset: sbox64
    // result rd:x29(0xa3a3777777a3a377), rs1:x3(0xf5f5f5f5f5f5f5f5), rs2:x19(0x0a0a0a0a0a0a0a0a)
    TEST_RR_OP(aes64ds, x29, x3, x19, 0xa3a3777777a3a377, 0xf5f5f5f5f5f5f5f5, 0xa0a0a0a0a0a0a0a, x4, 0, x5)

aes64ds_02_inst_246:
    // Test 246:  Test with dataset: sbox64
    // result rd:x30(0x4040d6d6d64040d6), rs1:x2(0xf6f6f6f6f6f6f6f6), rs2:x18(0x0909090909090909)
    TEST_RR_OP(aes64ds, x30, x2, x18, 0x4040d6d6d64040d6, 0xf6f6f6f6f6f6f6f6, 0x909090909090909, x4, 8, x5)

aes64ds_02_inst_247:
    // Test 247:  Test with dataset: sbox64
    // result rd:x31(0xbfbf262626bfbf26), rs1:x1(0xf7f7f7f7f7f7f7f7), rs2:x17(0x0808080808080808)
    TEST_RR_OP(aes64ds, x31, x1, x17, 0xbfbf262626bfbf26, 0xf7f7f7f7f7f7f7f7, 0x808080808080808, x4, 16, x5)

aes64ds_02_inst_248:
    // Test 248:  Test with dataset: sbox64
    // result rd:x1(0x3838e1e1e13838e1), rs1:x31(0xf8f8f8f8f8f8f8f8), rs2:x16(0x0707070707070707)
    TEST_RR_OP(aes64ds, x1, x31, x16, 0x3838e1e1e13838e1, 0xf8f8f8f8f8f8f8f8, 0x707070707070707, x4, 24, x5)

aes64ds_02_inst_249:
    // Test 249:  Test with dataset: sbox64
    // result rd:x2(0xa5a5696969a5a569), rs1:x30(0xf9f9f9f9f9f9f9f9), rs2:x15(0x0606060606060606)
    TEST_RR_OP(aes64ds, x2, x30, x15, 0xa5a5696969a5a569, 0xf9f9f9f9f9f9f9f9, 0x606060606060606, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_51_0)


aes64ds_02_inst_250:
    // Test 250:  Test with dataset: sbox64
    // result rd:x3(0x3636141414363614), rs1:x29(0xfafafafafafafafa), rs2:x14(0x0505050505050505)
    TEST_RR_OP(aes64ds, x3, x29, x14, 0x3636141414363614, 0xfafafafafafafafa, 0x505050505050505, x1, 0, x2)

aes64ds_02_inst_251:
    // Test 251:  Test with dataset: sbox64
    // result rd:x4(0x3030636363303063), rs1:x28(0xfbfbfbfbfbfbfbfb), rs2:x13(0x0404040404040404)
    TEST_RR_OP(aes64ds, x4, x28, x13, 0x3030636363303063, 0xfbfbfbfbfbfbfbfb, 0x404040404040404, x1, 8, x2)

aes64ds_02_inst_252:
    // Test 252:  Test with dataset: sbox64
    // result rd:x5(0xd5d5555555d5d555), rs1:x27(0xfcfcfcfcfcfcfcfc), rs2:x12(0x0303030303030303)
    TEST_RR_OP(aes64ds, x5, x27, x12, 0xd5d5555555d5d555, 0xfcfcfcfcfcfcfcfc, 0x303030303030303, x1, 16, x2)

aes64ds_02_inst_253:
    // Test 253:  Test with dataset: sbox64
    // result rd:x6(0x6a6a2121216a6a21), rs1:x26(0xfdfdfdfdfdfdfdfd), rs2:x11(0x0202020202020202)
    TEST_RR_OP(aes64ds, x6, x26, x11, 0x6a6a2121216a6a21, 0xfdfdfdfdfdfdfdfd, 0x202020202020202, x1, 24, x2)

aes64ds_02_inst_254:
    // Test 254:  Test with dataset: sbox64
    // result rd:x7(0x09090c0c0c09090c), rs1:x25(0xfefefefefefefefe), rs2:x10(0x0101010101010101)
    TEST_RR_OP(aes64ds, x7, x25, x10, 0x09090c0c0c09090c, 0xfefefefefefefefe, 0x101010101010101, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_52_0)


aes64ds_02_inst_255:
    // Test 255:  Test with dataset: sbox64
    // result rd:x8(0x52527d7d7d52527d), rs1:x24(0xffffffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64ds, x8, x24, x9, 0x52527d7d7d52527d, 0xffffffffffffffff, 0x0, x1, 0, x2)
	
#endif


RVTEST_CODE_END aes64ds_02_code_end
RVTEST_CODE_BEGIN aes64im_02_init aes64im_02_code_begin






#ifdef TEST_CASE_1


    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x6,signature_1_0)

 
aes64im_02_inst_0:
    // Test 0:  Test with dataset: sbox64
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000000000000000)
    li  x31, 0x0
    aes64im x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x0000000000000000)
 
aes64im_02_inst_1:
    // Test 1:  Test with dataset: sbox64
    // result rd:x2(0x0101010101010101), rs1:x30(0x0101010101010101)
    li  x30, 0x101010101010101
    aes64im x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x0101010101010101)
 
aes64im_02_inst_2:
    // Test 2:  Test with dataset: sbox64
    // result rd:x3(0x0202020202020202), rs1:x29(0x0202020202020202)
    li  x29, 0x202020202020202
    aes64im x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x0202020202020202)
 
aes64im_02_inst_3:
    // Test 3:  Test with dataset: sbox64
    // result rd:x4(0x0303030303030303), rs1:x28(0x0303030303030303)
    li  x28, 0x303030303030303
    aes64im x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x0303030303030303)
 
aes64im_02_inst_4:
    // Test 4:  Test with dataset: sbox64
    // result rd:x5(0x0404040404040404), rs1:x27(0x0404040404040404)
    li  x27, 0x404040404040404
    aes64im x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x0404040404040404)


    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_2_0)

 
aes64im_02_inst_5:
    // Test 5:  Test with dataset: sbox64
    // result rd:x6(0x0505050505050505), rs1:x26(0x0505050505050505)
    li  x26, 0x505050505050505
    aes64im x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0505050505050505)
 
aes64im_02_inst_6:
    // Test 6:  Test with dataset: sbox64
    // result rd:x7(0x0606060606060606), rs1:x25(0x0606060606060606)
    li  x25, 0x606060606060606
    aes64im x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0606060606060606)
 
aes64im_02_inst_7:
    // Test 7:  Test with dataset: sbox64
    // result rd:x8(0x0707070707070707), rs1:x24(0x0707070707070707)
    li  x24, 0x707070707070707
    aes64im x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0707070707070707)
 
aes64im_02_inst_8:
    // Test 8:  Test with dataset: sbox64
    // result rd:x9(0x0808080808080808), rs1:x23(0x0808080808080808)
    li  x23, 0x808080808080808
    aes64im x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0808080808080808)
 
aes64im_02_inst_9:
    // Test 9:  Test with dataset: sbox64
    // result rd:x10(0x0909090909090909), rs1:x22(0x0909090909090909)
    li  x22, 0x909090909090909
    aes64im x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0909090909090909)


    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_3_0)

 
aes64im_02_inst_10:
    // Test 10:  Test with dataset: sbox64
    // result rd:x11(0x0a0a0a0a0a0a0a0a), rs1:x21(0x0a0a0a0a0a0a0a0a)
    li  x21, 0xa0a0a0a0a0a0a0a
    aes64im x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x0a0a0a0a0a0a0a0a)
 
aes64im_02_inst_11:
    // Test 11:  Test with dataset: sbox64
    // result rd:x12(0x0b0b0b0b0b0b0b0b), rs1:x20(0x0b0b0b0b0b0b0b0b)
    li  x20, 0xb0b0b0b0b0b0b0b
    aes64im x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0b0b0b0b0b0b0b0b)
 
aes64im_02_inst_12:
    // Test 12:  Test with dataset: sbox64
    // result rd:x13(0x0c0c0c0c0c0c0c0c), rs1:x19(0x0c0c0c0c0c0c0c0c)
    li  x19, 0xc0c0c0c0c0c0c0c
    aes64im x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0c0c0c0c0c0c0c0c)
 
aes64im_02_inst_13:
    // Test 13:  Test with dataset: sbox64
    // result rd:x14(0x0d0d0d0d0d0d0d0d), rs1:x18(0x0d0d0d0d0d0d0d0d)
    li  x18, 0xd0d0d0d0d0d0d0d
    aes64im x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0d0d0d0d0d0d0d0d)
 
aes64im_02_inst_14:
    // Test 14:  Test with dataset: sbox64
    // result rd:x15(0x0e0e0e0e0e0e0e0e), rs1:x17(0x0e0e0e0e0e0e0e0e)
    li  x17, 0xe0e0e0e0e0e0e0e
    aes64im x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0e0e0e0e0e0e0e0e)


    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x2,signature_4_0)

 
aes64im_02_inst_15:
    // Test 15:  Test with dataset: sbox64
    // result rd:x16(0x0f0f0f0f0f0f0f0f), rs1:x16(0x0f0f0f0f0f0f0f0f)
    li  x16, 0xf0f0f0f0f0f0f0f
    aes64im x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0f0f0f0f0f0f0f0f)
 
aes64im_02_inst_16:
    // Test 16:  Test with dataset: sbox64
    // result rd:x17(0x1010101010101010), rs1:x15(0x1010101010101010)
    li  x15, 0x1010101010101010
    aes64im x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x1010101010101010)
 
aes64im_02_inst_17:
    // Test 17:  Test with dataset: sbox64
    // result rd:x18(0x1111111111111111), rs1:x14(0x1111111111111111)
    li  x14, 0x1111111111111111
    aes64im x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x1111111111111111)
 
aes64im_02_inst_18:
    // Test 18:  Test with dataset: sbox64
    // result rd:x19(0x1212121212121212), rs1:x13(0x1212121212121212)
    li  x13, 0x1212121212121212
    aes64im x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x1212121212121212)
 
aes64im_02_inst_19:
    // Test 19:  Test with dataset: sbox64
    // result rd:x20(0x1313131313131313), rs1:x12(0x1313131313131313)
    li  x12, 0x1313131313131313
    aes64im x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x1313131313131313)


    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_5_0)

 
aes64im_02_inst_20:
    // Test 20:  Test with dataset: sbox64
    // result rd:x21(0x1414141414141414), rs1:x11(0x1414141414141414)
    li  x11, 0x1414141414141414
    aes64im x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x1414141414141414)
 
aes64im_02_inst_21:
    // Test 21:  Test with dataset: sbox64
    // result rd:x22(0x1515151515151515), rs1:x10(0x1515151515151515)
    li  x10, 0x1515151515151515
    aes64im x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x1515151515151515)
 
aes64im_02_inst_22:
    // Test 22:  Test with dataset: sbox64
    // result rd:x23(0x1616161616161616), rs1:x9(0x1616161616161616)
    li  x9, 0x1616161616161616
    aes64im x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x1616161616161616)
 
aes64im_02_inst_23:
    // Test 23:  Test with dataset: sbox64
    // result rd:x24(0x1717171717171717), rs1:x8(0x1717171717171717)
    li  x8, 0x1717171717171717
    aes64im x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x1717171717171717)
 
aes64im_02_inst_24:
    // Test 24:  Test with dataset: sbox64
    // result rd:x25(0x1818181818181818), rs1:x7(0x1818181818181818)
    li  x7, 0x1818181818181818
    aes64im x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x1818181818181818)


    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_6_0)

 
aes64im_02_inst_25:
    // Test 25:  Test with dataset: sbox64
    // result rd:x26(0x1919191919191919), rs1:x6(0x1919191919191919)
    li  x6, 0x1919191919191919
    aes64im x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x1919191919191919)
 
aes64im_02_inst_26:
    // Test 26:  Test with dataset: sbox64
    // result rd:x27(0x1a1a1a1a1a1a1a1a), rs1:x5(0x1a1a1a1a1a1a1a1a)
    li  x5, 0x1a1a1a1a1a1a1a1a
    aes64im x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x1a1a1a1a1a1a1a1a)
 
aes64im_02_inst_27:
    // Test 27:  Test with dataset: sbox64
    // result rd:x28(0x1b1b1b1b1b1b1b1b), rs1:x4(0x1b1b1b1b1b1b1b1b)
    li  x4, 0x1b1b1b1b1b1b1b1b
    aes64im x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x1b1b1b1b1b1b1b1b)
 
aes64im_02_inst_28:
    // Test 28:  Test with dataset: sbox64
    // result rd:x29(0x1c1c1c1c1c1c1c1c), rs1:x3(0x1c1c1c1c1c1c1c1c)
    li  x3, 0x1c1c1c1c1c1c1c1c
    aes64im x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x1c1c1c1c1c1c1c1c)
 
aes64im_02_inst_29:
    // Test 29:  Test with dataset: sbox64
    // result rd:x30(0x1d1d1d1d1d1d1d1d), rs1:x2(0x1d1d1d1d1d1d1d1d)
    li  x2, 0x1d1d1d1d1d1d1d1d
    aes64im x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x1d1d1d1d1d1d1d1d)


    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x5,signature_7_0)

 
aes64im_02_inst_30:
    // Test 30:  Test with dataset: sbox64
    // result rd:x31(0x1e1e1e1e1e1e1e1e), rs1:x1(0x1e1e1e1e1e1e1e1e)
    li  x1, 0x1e1e1e1e1e1e1e1e
    aes64im x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x1e1e1e1e1e1e1e1e)
 
aes64im_02_inst_31:
    // Test 31:  Test with dataset: sbox64
    // result rd:x1(0x1f1f1f1f1f1f1f1f), rs1:x31(0x1f1f1f1f1f1f1f1f)
    li  x31, 0x1f1f1f1f1f1f1f1f
    aes64im x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x1f1f1f1f1f1f1f1f)
 
aes64im_02_inst_32:
    // Test 32:  Test with dataset: sbox64
    // result rd:x2(0x2020202020202020), rs1:x30(0x2020202020202020)
    li  x30, 0x2020202020202020
    aes64im x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x2020202020202020)
 
aes64im_02_inst_33:
    // Test 33:  Test with dataset: sbox64
    // result rd:x3(0x2121212121212121), rs1:x29(0x2121212121212121)
    li  x29, 0x2121212121212121
    aes64im x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x2121212121212121)
 
aes64im_02_inst_34:
    // Test 34:  Test with dataset: sbox64
    // result rd:x4(0x2222222222222222), rs1:x28(0x2222222222222222)
    li  x28, 0x2222222222222222
    aes64im x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x2222222222222222)


    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_8_0)

 
aes64im_02_inst_35:
    // Test 35:  Test with dataset: sbox64
    // result rd:x5(0x2323232323232323), rs1:x27(0x2323232323232323)
    li  x27, 0x2323232323232323
    aes64im x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x2323232323232323)
 
aes64im_02_inst_36:
    // Test 36:  Test with dataset: sbox64
    // result rd:x6(0x2424242424242424), rs1:x26(0x2424242424242424)
    li  x26, 0x2424242424242424
    aes64im x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x2424242424242424)
 
aes64im_02_inst_37:
    // Test 37:  Test with dataset: sbox64
    // result rd:x7(0x2525252525252525), rs1:x25(0x2525252525252525)
    li  x25, 0x2525252525252525
    aes64im x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x2525252525252525)
 
aes64im_02_inst_38:
    // Test 38:  Test with dataset: sbox64
    // result rd:x8(0x2626262626262626), rs1:x24(0x2626262626262626)
    li  x24, 0x2626262626262626
    aes64im x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x2626262626262626)
 
aes64im_02_inst_39:
    // Test 39:  Test with dataset: sbox64
    // result rd:x9(0x2727272727272727), rs1:x23(0x2727272727272727)
    li  x23, 0x2727272727272727
    aes64im x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x2727272727272727)


    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_9_0)

 
aes64im_02_inst_40:
    // Test 40:  Test with dataset: sbox64
    // result rd:x10(0x2828282828282828), rs1:x22(0x2828282828282828)
    li  x22, 0x2828282828282828
    aes64im x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x2828282828282828)
 
aes64im_02_inst_41:
    // Test 41:  Test with dataset: sbox64
    // result rd:x11(0x2929292929292929), rs1:x21(0x2929292929292929)
    li  x21, 0x2929292929292929
    aes64im x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x2929292929292929)
 
aes64im_02_inst_42:
    // Test 42:  Test with dataset: sbox64
    // result rd:x12(0x2a2a2a2a2a2a2a2a), rs1:x20(0x2a2a2a2a2a2a2a2a)
    li  x20, 0x2a2a2a2a2a2a2a2a
    aes64im x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x2a2a2a2a2a2a2a2a)
 
aes64im_02_inst_43:
    // Test 43:  Test with dataset: sbox64
    // result rd:x13(0x2b2b2b2b2b2b2b2b), rs1:x19(0x2b2b2b2b2b2b2b2b)
    li  x19, 0x2b2b2b2b2b2b2b2b
    aes64im x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x2b2b2b2b2b2b2b2b)
 
aes64im_02_inst_44:
    // Test 44:  Test with dataset: sbox64
    // result rd:x14(0x2c2c2c2c2c2c2c2c), rs1:x18(0x2c2c2c2c2c2c2c2c)
    li  x18, 0x2c2c2c2c2c2c2c2c
    aes64im x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x2c2c2c2c2c2c2c2c)


    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x3,signature_10_0)

 
aes64im_02_inst_45:
    // Test 45:  Test with dataset: sbox64
    // result rd:x15(0x2d2d2d2d2d2d2d2d), rs1:x17(0x2d2d2d2d2d2d2d2d)
    li  x17, 0x2d2d2d2d2d2d2d2d
    aes64im x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x2d2d2d2d2d2d2d2d)
 
aes64im_02_inst_46:
    // Test 46:  Test with dataset: sbox64
    // result rd:x16(0x2e2e2e2e2e2e2e2e), rs1:x16(0x2e2e2e2e2e2e2e2e)
    li  x16, 0x2e2e2e2e2e2e2e2e
    aes64im x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x2e2e2e2e2e2e2e2e)
 
aes64im_02_inst_47:
    // Test 47:  Test with dataset: sbox64
    // result rd:x17(0x2f2f2f2f2f2f2f2f), rs1:x15(0x2f2f2f2f2f2f2f2f)
    li  x15, 0x2f2f2f2f2f2f2f2f
    aes64im x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x2f2f2f2f2f2f2f2f)
 
aes64im_02_inst_48:
    // Test 48:  Test with dataset: sbox64
    // result rd:x18(0x3030303030303030), rs1:x14(0x3030303030303030)
    li  x14, 0x3030303030303030
    aes64im x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x3030303030303030)
 
aes64im_02_inst_49:
    // Test 49:  Test with dataset: sbox64
    // result rd:x19(0x3131313131313131), rs1:x13(0x3131313131313131)
    li  x13, 0x3131313131313131
    aes64im x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x3131313131313131)


    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_11_0)

 
aes64im_02_inst_50:
    // Test 50:  Test with dataset: sbox64
    // result rd:x20(0x3232323232323232), rs1:x12(0x3232323232323232)
    li  x12, 0x3232323232323232
    aes64im x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x3232323232323232)
 
aes64im_02_inst_51:
    // Test 51:  Test with dataset: sbox64
    // result rd:x21(0x3333333333333333), rs1:x11(0x3333333333333333)
    li  x11, 0x3333333333333333
    aes64im x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x3333333333333333)
 
aes64im_02_inst_52:
    // Test 52:  Test with dataset: sbox64
    // result rd:x22(0x3434343434343434), rs1:x10(0x3434343434343434)
    li  x10, 0x3434343434343434
    aes64im x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x3434343434343434)
 
aes64im_02_inst_53:
    // Test 53:  Test with dataset: sbox64
    // result rd:x23(0x3535353535353535), rs1:x9(0x3535353535353535)
    li  x9, 0x3535353535353535
    aes64im x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x3535353535353535)
 
aes64im_02_inst_54:
    // Test 54:  Test with dataset: sbox64
    // result rd:x24(0x3636363636363636), rs1:x8(0x3636363636363636)
    li  x8, 0x3636363636363636
    aes64im x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x3636363636363636)


    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_12_0)

 
aes64im_02_inst_55:
    // Test 55:  Test with dataset: sbox64
    // result rd:x25(0x3737373737373737), rs1:x7(0x3737373737373737)
    li  x7, 0x3737373737373737
    aes64im x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x3737373737373737)
 
aes64im_02_inst_56:
    // Test 56:  Test with dataset: sbox64
    // result rd:x26(0x3838383838383838), rs1:x6(0x3838383838383838)
    li  x6, 0x3838383838383838
    aes64im x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x3838383838383838)
 
aes64im_02_inst_57:
    // Test 57:  Test with dataset: sbox64
    // result rd:x27(0x3939393939393939), rs1:x5(0x3939393939393939)
    li  x5, 0x3939393939393939
    aes64im x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x3939393939393939)
 
aes64im_02_inst_58:
    // Test 58:  Test with dataset: sbox64
    // result rd:x28(0x3a3a3a3a3a3a3a3a), rs1:x4(0x3a3a3a3a3a3a3a3a)
    li  x4, 0x3a3a3a3a3a3a3a3a
    aes64im x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x3a3a3a3a3a3a3a3a)
 
aes64im_02_inst_59:
    // Test 59:  Test with dataset: sbox64
    // result rd:x29(0x3b3b3b3b3b3b3b3b), rs1:x3(0x3b3b3b3b3b3b3b3b)
    li  x3, 0x3b3b3b3b3b3b3b3b
    aes64im x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x3b3b3b3b3b3b3b3b)


    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x4,signature_13_0)

 
aes64im_02_inst_60:
    // Test 60:  Test with dataset: sbox64
    // result rd:x30(0x3c3c3c3c3c3c3c3c), rs1:x2(0x3c3c3c3c3c3c3c3c)
    li  x2, 0x3c3c3c3c3c3c3c3c
    aes64im x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x3c3c3c3c3c3c3c3c)
 
aes64im_02_inst_61:
    // Test 61:  Test with dataset: sbox64
    // result rd:x31(0x3d3d3d3d3d3d3d3d), rs1:x1(0x3d3d3d3d3d3d3d3d)
    li  x1, 0x3d3d3d3d3d3d3d3d
    aes64im x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x3d3d3d3d3d3d3d3d)
 
aes64im_02_inst_62:
    // Test 62:  Test with dataset: sbox64
    // result rd:x1(0x3e3e3e3e3e3e3e3e), rs1:x31(0x3e3e3e3e3e3e3e3e)
    li  x31, 0x3e3e3e3e3e3e3e3e
    aes64im x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x3e3e3e3e3e3e3e3e)
 
aes64im_02_inst_63:
    // Test 63:  Test with dataset: sbox64
    // result rd:x2(0x3f3f3f3f3f3f3f3f), rs1:x30(0x3f3f3f3f3f3f3f3f)
    li  x30, 0x3f3f3f3f3f3f3f3f
    aes64im x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x3f3f3f3f3f3f3f3f)
 
aes64im_02_inst_64:
    // Test 64:  Test with dataset: sbox64
    // result rd:x3(0x4040404040404040), rs1:x29(0x4040404040404040)
    li  x29, 0x4040404040404040
    aes64im x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x4040404040404040)


    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_14_0)

 
aes64im_02_inst_65:
    // Test 65:  Test with dataset: sbox64
    // result rd:x4(0x4141414141414141), rs1:x28(0x4141414141414141)
    li  x28, 0x4141414141414141
    aes64im x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x4141414141414141)
 
aes64im_02_inst_66:
    // Test 66:  Test with dataset: sbox64
    // result rd:x5(0x4242424242424242), rs1:x27(0x4242424242424242)
    li  x27, 0x4242424242424242
    aes64im x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x4242424242424242)
 
aes64im_02_inst_67:
    // Test 67:  Test with dataset: sbox64
    // result rd:x6(0x4343434343434343), rs1:x26(0x4343434343434343)
    li  x26, 0x4343434343434343
    aes64im x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x4343434343434343)
 
aes64im_02_inst_68:
    // Test 68:  Test with dataset: sbox64
    // result rd:x7(0x4444444444444444), rs1:x25(0x4444444444444444)
    li  x25, 0x4444444444444444
    aes64im x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x4444444444444444)
 
aes64im_02_inst_69:
    // Test 69:  Test with dataset: sbox64
    // result rd:x8(0x4545454545454545), rs1:x24(0x4545454545454545)
    li  x24, 0x4545454545454545
    aes64im x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x4545454545454545)


    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_15_0)

 
aes64im_02_inst_70:
    // Test 70:  Test with dataset: sbox64
    // result rd:x9(0x4646464646464646), rs1:x23(0x4646464646464646)
    li  x23, 0x4646464646464646
    aes64im x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x4646464646464646)
 
aes64im_02_inst_71:
    // Test 71:  Test with dataset: sbox64
    // result rd:x10(0x4747474747474747), rs1:x22(0x4747474747474747)
    li  x22, 0x4747474747474747
    aes64im x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x4747474747474747)
 
aes64im_02_inst_72:
    // Test 72:  Test with dataset: sbox64
    // result rd:x11(0x4848484848484848), rs1:x21(0x4848484848484848)
    li  x21, 0x4848484848484848
    aes64im x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x4848484848484848)
 
aes64im_02_inst_73:
    // Test 73:  Test with dataset: sbox64
    // result rd:x12(0x4949494949494949), rs1:x20(0x4949494949494949)
    li  x20, 0x4949494949494949
    aes64im x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x4949494949494949)
 
aes64im_02_inst_74:
    // Test 74:  Test with dataset: sbox64
    // result rd:x13(0x4a4a4a4a4a4a4a4a), rs1:x19(0x4a4a4a4a4a4a4a4a)
    li  x19, 0x4a4a4a4a4a4a4a4a
    aes64im x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x4a4a4a4a4a4a4a4a)


    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x4,signature_16_0)

 
aes64im_02_inst_75:
    // Test 75:  Test with dataset: sbox64
    // result rd:x14(0x4b4b4b4b4b4b4b4b), rs1:x18(0x4b4b4b4b4b4b4b4b)
    li  x18, 0x4b4b4b4b4b4b4b4b
    aes64im x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0x4b4b4b4b4b4b4b4b)
 
aes64im_02_inst_76:
    // Test 76:  Test with dataset: sbox64
    // result rd:x15(0x4c4c4c4c4c4c4c4c), rs1:x17(0x4c4c4c4c4c4c4c4c)
    li  x17, 0x4c4c4c4c4c4c4c4c
    aes64im x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0x4c4c4c4c4c4c4c4c)
 
aes64im_02_inst_77:
    // Test 77:  Test with dataset: sbox64
    // result rd:x16(0x4d4d4d4d4d4d4d4d), rs1:x16(0x4d4d4d4d4d4d4d4d)
    li  x16, 0x4d4d4d4d4d4d4d4d
    aes64im x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0x4d4d4d4d4d4d4d4d)
 
aes64im_02_inst_78:
    // Test 78:  Test with dataset: sbox64
    // result rd:x17(0x4e4e4e4e4e4e4e4e), rs1:x15(0x4e4e4e4e4e4e4e4e)
    li  x15, 0x4e4e4e4e4e4e4e4e
    aes64im x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0x4e4e4e4e4e4e4e4e)
 
aes64im_02_inst_79:
    // Test 79:  Test with dataset: sbox64
    // result rd:x18(0x4f4f4f4f4f4f4f4f), rs1:x14(0x4f4f4f4f4f4f4f4f)
    li  x14, 0x4f4f4f4f4f4f4f4f
    aes64im x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0x4f4f4f4f4f4f4f4f)


    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_17_0)

 
aes64im_02_inst_80:
    // Test 80:  Test with dataset: sbox64
    // result rd:x19(0x5050505050505050), rs1:x13(0x5050505050505050)
    li  x13, 0x5050505050505050
    aes64im x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x5050505050505050)
 
aes64im_02_inst_81:
    // Test 81:  Test with dataset: sbox64
    // result rd:x20(0x5151515151515151), rs1:x12(0x5151515151515151)
    li  x12, 0x5151515151515151
    aes64im x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x5151515151515151)
 
aes64im_02_inst_82:
    // Test 82:  Test with dataset: sbox64
    // result rd:x21(0x5252525252525252), rs1:x11(0x5252525252525252)
    li  x11, 0x5252525252525252
    aes64im x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x5252525252525252)
 
aes64im_02_inst_83:
    // Test 83:  Test with dataset: sbox64
    // result rd:x22(0x5353535353535353), rs1:x10(0x5353535353535353)
    li  x10, 0x5353535353535353
    aes64im x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x5353535353535353)
 
aes64im_02_inst_84:
    // Test 84:  Test with dataset: sbox64
    // result rd:x23(0x5454545454545454), rs1:x9(0x5454545454545454)
    li  x9, 0x5454545454545454
    aes64im x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x5454545454545454)


    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_18_0)

 
aes64im_02_inst_85:
    // Test 85:  Test with dataset: sbox64
    // result rd:x24(0x5555555555555555), rs1:x8(0x5555555555555555)
    li  x8, 0x5555555555555555
    aes64im x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x5555555555555555)
 
aes64im_02_inst_86:
    // Test 86:  Test with dataset: sbox64
    // result rd:x25(0x5656565656565656), rs1:x7(0x5656565656565656)
    li  x7, 0x5656565656565656
    aes64im x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x5656565656565656)
 
aes64im_02_inst_87:
    // Test 87:  Test with dataset: sbox64
    // result rd:x26(0x5757575757575757), rs1:x6(0x5757575757575757)
    li  x6, 0x5757575757575757
    aes64im x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x5757575757575757)
 
aes64im_02_inst_88:
    // Test 88:  Test with dataset: sbox64
    // result rd:x27(0x5858585858585858), rs1:x5(0x5858585858585858)
    li  x5, 0x5858585858585858
    aes64im x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x5858585858585858)
 
aes64im_02_inst_89:
    // Test 89:  Test with dataset: sbox64
    // result rd:x28(0x5959595959595959), rs1:x4(0x5959595959595959)
    li  x4, 0x5959595959595959
    aes64im x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x5959595959595959)


    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x4,signature_19_0)

 
aes64im_02_inst_90:
    // Test 90:  Test with dataset: sbox64
    // result rd:x29(0x5a5a5a5a5a5a5a5a), rs1:x3(0x5a5a5a5a5a5a5a5a)
    li  x3, 0x5a5a5a5a5a5a5a5a
    aes64im x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0x5a5a5a5a5a5a5a5a)
 
aes64im_02_inst_91:
    // Test 91:  Test with dataset: sbox64
    // result rd:x30(0x5b5b5b5b5b5b5b5b), rs1:x2(0x5b5b5b5b5b5b5b5b)
    li  x2, 0x5b5b5b5b5b5b5b5b
    aes64im x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x5b5b5b5b5b5b5b5b)
 
aes64im_02_inst_92:
    // Test 92:  Test with dataset: sbox64
    // result rd:x31(0x5c5c5c5c5c5c5c5c), rs1:x1(0x5c5c5c5c5c5c5c5c)
    li  x1, 0x5c5c5c5c5c5c5c5c
    aes64im x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x5c5c5c5c5c5c5c5c)
 
aes64im_02_inst_93:
    // Test 93:  Test with dataset: sbox64
    // result rd:x1(0x5d5d5d5d5d5d5d5d), rs1:x31(0x5d5d5d5d5d5d5d5d)
    li  x31, 0x5d5d5d5d5d5d5d5d
    aes64im x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x5d5d5d5d5d5d5d5d)
 
aes64im_02_inst_94:
    // Test 94:  Test with dataset: sbox64
    // result rd:x2(0x5e5e5e5e5e5e5e5e), rs1:x30(0x5e5e5e5e5e5e5e5e)
    li  x30, 0x5e5e5e5e5e5e5e5e
    aes64im x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x5e5e5e5e5e5e5e5e)


    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_20_0)

 
aes64im_02_inst_95:
    // Test 95:  Test with dataset: sbox64
    // result rd:x3(0x5f5f5f5f5f5f5f5f), rs1:x29(0x5f5f5f5f5f5f5f5f)
    li  x29, 0x5f5f5f5f5f5f5f5f
    aes64im x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0x5f5f5f5f5f5f5f5f)
 
aes64im_02_inst_96:
    // Test 96:  Test with dataset: sbox64
    // result rd:x4(0x6060606060606060), rs1:x28(0x6060606060606060)
    li  x28, 0x6060606060606060
    aes64im x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x6060606060606060)
 
aes64im_02_inst_97:
    // Test 97:  Test with dataset: sbox64
    // result rd:x5(0x6161616161616161), rs1:x27(0x6161616161616161)
    li  x27, 0x6161616161616161
    aes64im x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x6161616161616161)
 
aes64im_02_inst_98:
    // Test 98:  Test with dataset: sbox64
    // result rd:x6(0x6262626262626262), rs1:x26(0x6262626262626262)
    li  x26, 0x6262626262626262
    aes64im x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x6262626262626262)
 
aes64im_02_inst_99:
    // Test 99:  Test with dataset: sbox64
    // result rd:x7(0x6363636363636363), rs1:x25(0x6363636363636363)
    li  x25, 0x6363636363636363
    aes64im x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x6363636363636363)


    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_21_0)

 
aes64im_02_inst_100:
    // Test 100:  Test with dataset: sbox64
    // result rd:x8(0x6464646464646464), rs1:x24(0x6464646464646464)
    li  x24, 0x6464646464646464
    aes64im x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x6464646464646464)
 
aes64im_02_inst_101:
    // Test 101:  Test with dataset: sbox64
    // result rd:x9(0x6565656565656565), rs1:x23(0x6565656565656565)
    li  x23, 0x6565656565656565
    aes64im x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x6565656565656565)
 
aes64im_02_inst_102:
    // Test 102:  Test with dataset: sbox64
    // result rd:x10(0x6666666666666666), rs1:x22(0x6666666666666666)
    li  x22, 0x6666666666666666
    aes64im x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x6666666666666666)
 
aes64im_02_inst_103:
    // Test 103:  Test with dataset: sbox64
    // result rd:x11(0x6767676767676767), rs1:x21(0x6767676767676767)
    li  x21, 0x6767676767676767
    aes64im x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x6767676767676767)
 
aes64im_02_inst_104:
    // Test 104:  Test with dataset: sbox64
    // result rd:x12(0x6868686868686868), rs1:x20(0x6868686868686868)
    li  x20, 0x6868686868686868
    aes64im x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x6868686868686868)


    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x5,signature_22_0)

 
aes64im_02_inst_105:
    // Test 105:  Test with dataset: sbox64
    // result rd:x13(0x6969696969696969), rs1:x19(0x6969696969696969)
    li  x19, 0x6969696969696969
    aes64im x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0x6969696969696969)
 
aes64im_02_inst_106:
    // Test 106:  Test with dataset: sbox64
    // result rd:x14(0x6a6a6a6a6a6a6a6a), rs1:x18(0x6a6a6a6a6a6a6a6a)
    li  x18, 0x6a6a6a6a6a6a6a6a
    aes64im x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0x6a6a6a6a6a6a6a6a)
 
aes64im_02_inst_107:
    // Test 107:  Test with dataset: sbox64
    // result rd:x15(0x6b6b6b6b6b6b6b6b), rs1:x17(0x6b6b6b6b6b6b6b6b)
    li  x17, 0x6b6b6b6b6b6b6b6b
    aes64im x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0x6b6b6b6b6b6b6b6b)
 
aes64im_02_inst_108:
    // Test 108:  Test with dataset: sbox64
    // result rd:x16(0x6c6c6c6c6c6c6c6c), rs1:x16(0x6c6c6c6c6c6c6c6c)
    li  x16, 0x6c6c6c6c6c6c6c6c
    aes64im x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0x6c6c6c6c6c6c6c6c)
 
aes64im_02_inst_109:
    // Test 109:  Test with dataset: sbox64
    // result rd:x17(0x6d6d6d6d6d6d6d6d), rs1:x15(0x6d6d6d6d6d6d6d6d)
    li  x15, 0x6d6d6d6d6d6d6d6d
    aes64im x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0x6d6d6d6d6d6d6d6d)


    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_23_0)

 
aes64im_02_inst_110:
    // Test 110:  Test with dataset: sbox64
    // result rd:x18(0x6e6e6e6e6e6e6e6e), rs1:x14(0x6e6e6e6e6e6e6e6e)
    li  x14, 0x6e6e6e6e6e6e6e6e
    aes64im x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x6e6e6e6e6e6e6e6e)
 
aes64im_02_inst_111:
    // Test 111:  Test with dataset: sbox64
    // result rd:x19(0x6f6f6f6f6f6f6f6f), rs1:x13(0x6f6f6f6f6f6f6f6f)
    li  x13, 0x6f6f6f6f6f6f6f6f
    aes64im x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x6f6f6f6f6f6f6f6f)
 
aes64im_02_inst_112:
    // Test 112:  Test with dataset: sbox64
    // result rd:x20(0x7070707070707070), rs1:x12(0x7070707070707070)
    li  x12, 0x7070707070707070
    aes64im x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x7070707070707070)
 
aes64im_02_inst_113:
    // Test 113:  Test with dataset: sbox64
    // result rd:x21(0x7171717171717171), rs1:x11(0x7171717171717171)
    li  x11, 0x7171717171717171
    aes64im x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x7171717171717171)
 
aes64im_02_inst_114:
    // Test 114:  Test with dataset: sbox64
    // result rd:x22(0x7272727272727272), rs1:x10(0x7272727272727272)
    li  x10, 0x7272727272727272
    aes64im x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x7272727272727272)


    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_24_0)

 
aes64im_02_inst_115:
    // Test 115:  Test with dataset: sbox64
    // result rd:x23(0x7373737373737373), rs1:x9(0x7373737373737373)
    li  x9, 0x7373737373737373
    aes64im x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x7373737373737373)
 
aes64im_02_inst_116:
    // Test 116:  Test with dataset: sbox64
    // result rd:x24(0x7474747474747474), rs1:x8(0x7474747474747474)
    li  x8, 0x7474747474747474
    aes64im x24, x8
    sd x24, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x7474747474747474)
 
aes64im_02_inst_117:
    // Test 117:  Test with dataset: sbox64
    // result rd:x25(0x7575757575757575), rs1:x7(0x7575757575757575)
    li  x7, 0x7575757575757575
    aes64im x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x7575757575757575)
 
aes64im_02_inst_118:
    // Test 118:  Test with dataset: sbox64
    // result rd:x26(0x7676767676767676), rs1:x6(0x7676767676767676)
    li  x6, 0x7676767676767676
    aes64im x26, x6
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x7676767676767676)
 
aes64im_02_inst_119:
    // Test 119:  Test with dataset: sbox64
    // result rd:x27(0x7777777777777777), rs1:x5(0x7777777777777777)
    li  x5, 0x7777777777777777
    aes64im x27, x5
    sd x27, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x7777777777777777)


    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x5,signature_25_0)

 
aes64im_02_inst_120:
    // Test 120:  Test with dataset: sbox64
    // result rd:x28(0x7878787878787878), rs1:x4(0x7878787878787878)
    li  x4, 0x7878787878787878
    aes64im x28, x4
    sd x28, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x28, 0x7878787878787878)
 
aes64im_02_inst_121:
    // Test 121:  Test with dataset: sbox64
    // result rd:x29(0x7979797979797979), rs1:x3(0x7979797979797979)
    li  x3, 0x7979797979797979
    aes64im x29, x3
    sd x29, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x29, 0x7979797979797979)
 
aes64im_02_inst_122:
    // Test 122:  Test with dataset: sbox64
    // result rd:x30(0x7a7a7a7a7a7a7a7a), rs1:x2(0x7a7a7a7a7a7a7a7a)
    li  x2, 0x7a7a7a7a7a7a7a7a
    aes64im x30, x2
    sd x30, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x30, 0x7a7a7a7a7a7a7a7a)
 
aes64im_02_inst_123:
    // Test 123:  Test with dataset: sbox64
    // result rd:x31(0x7b7b7b7b7b7b7b7b), rs1:x1(0x7b7b7b7b7b7b7b7b)
    li  x1, 0x7b7b7b7b7b7b7b7b
    aes64im x31, x1
    sd x31, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x7b7b7b7b7b7b7b7b)
 
aes64im_02_inst_124:
    // Test 124:  Test with dataset: sbox64
    // result rd:x1(0x7c7c7c7c7c7c7c7c), rs1:x31(0x7c7c7c7c7c7c7c7c)
    li  x31, 0x7c7c7c7c7c7c7c7c
    aes64im x1, x31
    sd x1, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x7c7c7c7c7c7c7c7c)


    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_26_0)

 
aes64im_02_inst_125:
    // Test 125:  Test with dataset: sbox64
    // result rd:x2(0x7d7d7d7d7d7d7d7d), rs1:x30(0x7d7d7d7d7d7d7d7d)
    li  x30, 0x7d7d7d7d7d7d7d7d
    aes64im x2, x30
    sd x2, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x7d7d7d7d7d7d7d7d)
 
aes64im_02_inst_126:
    // Test 126:  Test with dataset: sbox64
    // result rd:x3(0x7e7e7e7e7e7e7e7e), rs1:x29(0x7e7e7e7e7e7e7e7e)
    li  x29, 0x7e7e7e7e7e7e7e7e
    aes64im x3, x29
    sd x3, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x7e7e7e7e7e7e7e7e)
 
aes64im_02_inst_127:
    // Test 127:  Test with dataset: sbox64
    // result rd:x4(0x7f7f7f7f7f7f7f7f), rs1:x28(0x7f7f7f7f7f7f7f7f)
    li  x28, 0x7f7f7f7f7f7f7f7f
    aes64im x4, x28
    sd x4, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x7f7f7f7f7f7f7f7f)
 
aes64im_02_inst_128:
    // Test 128:  Test with dataset: sbox64
    // result rd:x5(0x8080808080808080), rs1:x27(0x8080808080808080)
    li  x27, 0x8080808080808080
    aes64im x5, x27
    sd x5, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x8080808080808080)
 
aes64im_02_inst_129:
    // Test 129:  Test with dataset: sbox64
    // result rd:x6(0x8181818181818181), rs1:x26(0x8181818181818181)
    li  x26, 0x8181818181818181
    aes64im x6, x26
    sd x6, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x6, 0x8181818181818181)


    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_27_0)

 
aes64im_02_inst_130:
    // Test 130:  Test with dataset: sbox64
    // result rd:x7(0x8282828282828282), rs1:x25(0x8282828282828282)
    li  x25, 0x8282828282828282
    aes64im x7, x25
    sd x7, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x8282828282828282)
 
aes64im_02_inst_131:
    // Test 131:  Test with dataset: sbox64
    // result rd:x8(0x8383838383838383), rs1:x24(0x8383838383838383)
    li  x24, 0x8383838383838383
    aes64im x8, x24
    sd x8, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x8383838383838383)
 
aes64im_02_inst_132:
    // Test 132:  Test with dataset: sbox64
    // result rd:x9(0x8484848484848484), rs1:x23(0x8484848484848484)
    li  x23, 0x8484848484848484
    aes64im x9, x23
    sd x9, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x8484848484848484)
 
aes64im_02_inst_133:
    // Test 133:  Test with dataset: sbox64
    // result rd:x10(0x8585858585858585), rs1:x22(0x8585858585858585)
    li  x22, 0x8585858585858585
    aes64im x10, x22
    sd x10, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x8585858585858585)
 
aes64im_02_inst_134:
    // Test 134:  Test with dataset: sbox64
    // result rd:x11(0x8686868686868686), rs1:x21(0x8686868686868686)
    li  x21, 0x8686868686868686
    aes64im x11, x21
    sd x11, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x8686868686868686)


    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x6,signature_28_0)

 
aes64im_02_inst_135:
    // Test 135:  Test with dataset: sbox64
    // result rd:x12(0x8787878787878787), rs1:x20(0x8787878787878787)
    li  x20, 0x8787878787878787
    aes64im x12, x20
    sd x12, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x8787878787878787)
 
aes64im_02_inst_136:
    // Test 136:  Test with dataset: sbox64
    // result rd:x13(0x8888888888888888), rs1:x19(0x8888888888888888)
    li  x19, 0x8888888888888888
    aes64im x13, x19
    sd x13, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x8888888888888888)
 
aes64im_02_inst_137:
    // Test 137:  Test with dataset: sbox64
    // result rd:x14(0x8989898989898989), rs1:x18(0x8989898989898989)
    li  x18, 0x8989898989898989
    aes64im x14, x18
    sd x14, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x8989898989898989)
 
aes64im_02_inst_138:
    // Test 138:  Test with dataset: sbox64
    // result rd:x15(0x8a8a8a8a8a8a8a8a), rs1:x17(0x8a8a8a8a8a8a8a8a)
    li  x17, 0x8a8a8a8a8a8a8a8a
    aes64im x15, x17
    sd x15, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x8a8a8a8a8a8a8a8a)
 
aes64im_02_inst_139:
    // Test 139:  Test with dataset: sbox64
    // result rd:x16(0x8b8b8b8b8b8b8b8b), rs1:x16(0x8b8b8b8b8b8b8b8b)
    li  x16, 0x8b8b8b8b8b8b8b8b
    aes64im x16, x16
    sd x16, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x16, 0x8b8b8b8b8b8b8b8b)


    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_29_0)

 
aes64im_02_inst_140:
    // Test 140:  Test with dataset: sbox64
    // result rd:x17(0x8c8c8c8c8c8c8c8c), rs1:x15(0x8c8c8c8c8c8c8c8c)
    li  x15, 0x8c8c8c8c8c8c8c8c
    aes64im x17, x15
    sd x17, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x17, 0x8c8c8c8c8c8c8c8c)
 
aes64im_02_inst_141:
    // Test 141:  Test with dataset: sbox64
    // result rd:x18(0x8d8d8d8d8d8d8d8d), rs1:x14(0x8d8d8d8d8d8d8d8d)
    li  x14, 0x8d8d8d8d8d8d8d8d
    aes64im x18, x14
    sd x18, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x8d8d8d8d8d8d8d8d)
 
aes64im_02_inst_142:
    // Test 142:  Test with dataset: sbox64
    // result rd:x19(0x8e8e8e8e8e8e8e8e), rs1:x13(0x8e8e8e8e8e8e8e8e)
    li  x13, 0x8e8e8e8e8e8e8e8e
    aes64im x19, x13
    sd x19, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x8e8e8e8e8e8e8e8e)
 
aes64im_02_inst_143:
    // Test 143:  Test with dataset: sbox64
    // result rd:x20(0x8f8f8f8f8f8f8f8f), rs1:x12(0x8f8f8f8f8f8f8f8f)
    li  x12, 0x8f8f8f8f8f8f8f8f
    aes64im x20, x12
    sd x20, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x8f8f8f8f8f8f8f8f)
 
aes64im_02_inst_144:
    // Test 144:  Test with dataset: sbox64
    // result rd:x21(0x9090909090909090), rs1:x11(0x9090909090909090)
    li  x11, 0x9090909090909090
    aes64im x21, x11
    sd x21, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x9090909090909090)


    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_30_0)

 
aes64im_02_inst_145:
    // Test 145:  Test with dataset: sbox64
    // result rd:x22(0x9191919191919191), rs1:x10(0x9191919191919191)
    li  x10, 0x9191919191919191
    aes64im x22, x10
    sd x22, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x9191919191919191)
 
aes64im_02_inst_146:
    // Test 146:  Test with dataset: sbox64
    // result rd:x23(0x9292929292929292), rs1:x9(0x9292929292929292)
    li  x9, 0x9292929292929292
    aes64im x23, x9
    sd x23, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x9292929292929292)
 
aes64im_02_inst_147:
    // Test 147:  Test with dataset: sbox64
    // result rd:x24(0x9393939393939393), rs1:x8(0x9393939393939393)
    li  x8, 0x9393939393939393
    aes64im x24, x8
    sd x24, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x9393939393939393)
 
aes64im_02_inst_148:
    // Test 148:  Test with dataset: sbox64
    // result rd:x25(0x9494949494949494), rs1:x7(0x9494949494949494)
    li  x7, 0x9494949494949494
    aes64im x25, x7
    sd x25, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x9494949494949494)
 
aes64im_02_inst_149:
    // Test 149:  Test with dataset: sbox64
    // result rd:x26(0x9595959595959595), rs1:x6(0x9595959595959595)
    li  x6, 0x9595959595959595
    aes64im x26, x6
    sd x26, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x9595959595959595)


    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x6,signature_31_0)

 
aes64im_02_inst_150:
    // Test 150:  Test with dataset: sbox64
    // result rd:x27(0x9696969696969696), rs1:x5(0x9696969696969696)
    li  x5, 0x9696969696969696
    aes64im x27, x5
    sd x27, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x9696969696969696)
 
aes64im_02_inst_151:
    // Test 151:  Test with dataset: sbox64
    // result rd:x28(0x9797979797979797), rs1:x4(0x9797979797979797)
    li  x4, 0x9797979797979797
    aes64im x28, x4
    sd x28, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x9797979797979797)
 
aes64im_02_inst_152:
    // Test 152:  Test with dataset: sbox64
    // result rd:x29(0x9898989898989898), rs1:x3(0x9898989898989898)
    li  x3, 0x9898989898989898
    aes64im x29, x3
    sd x29, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x9898989898989898)
 
aes64im_02_inst_153:
    // Test 153:  Test with dataset: sbox64
    // result rd:x30(0x9999999999999999), rs1:x2(0x9999999999999999)
    li  x2, 0x9999999999999999
    aes64im x30, x2
    sd x30, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x9999999999999999)
 
aes64im_02_inst_154:
    // Test 154:  Test with dataset: sbox64
    // result rd:x31(0x9a9a9a9a9a9a9a9a), rs1:x1(0x9a9a9a9a9a9a9a9a)
    li  x1, 0x9a9a9a9a9a9a9a9a
    aes64im x31, x1
    sd x31, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x9a9a9a9a9a9a9a9a)


    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x6,signature_32_0)

 
aes64im_02_inst_155:
    // Test 155:  Test with dataset: sbox64
    // result rd:x1(0x9b9b9b9b9b9b9b9b), rs1:x31(0x9b9b9b9b9b9b9b9b)
    li  x31, 0x9b9b9b9b9b9b9b9b
    aes64im x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x9b9b9b9b9b9b9b9b)
 
aes64im_02_inst_156:
    // Test 156:  Test with dataset: sbox64
    // result rd:x2(0x9c9c9c9c9c9c9c9c), rs1:x30(0x9c9c9c9c9c9c9c9c)
    li  x30, 0x9c9c9c9c9c9c9c9c
    aes64im x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x9c9c9c9c9c9c9c9c)
 
aes64im_02_inst_157:
    // Test 157:  Test with dataset: sbox64
    // result rd:x3(0x9d9d9d9d9d9d9d9d), rs1:x29(0x9d9d9d9d9d9d9d9d)
    li  x29, 0x9d9d9d9d9d9d9d9d
    aes64im x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x9d9d9d9d9d9d9d9d)
 
aes64im_02_inst_158:
    // Test 158:  Test with dataset: sbox64
    // result rd:x4(0x9e9e9e9e9e9e9e9e), rs1:x28(0x9e9e9e9e9e9e9e9e)
    li  x28, 0x9e9e9e9e9e9e9e9e
    aes64im x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x9e9e9e9e9e9e9e9e)
 
aes64im_02_inst_159:
    // Test 159:  Test with dataset: sbox64
    // result rd:x5(0x9f9f9f9f9f9f9f9f), rs1:x27(0x9f9f9f9f9f9f9f9f)
    li  x27, 0x9f9f9f9f9f9f9f9f
    aes64im x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x9f9f9f9f9f9f9f9f)


    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_33_0)

 
aes64im_02_inst_160:
    // Test 160:  Test with dataset: sbox64
    // result rd:x6(0xa0a0a0a0a0a0a0a0), rs1:x26(0xa0a0a0a0a0a0a0a0)
    li  x26, 0xa0a0a0a0a0a0a0a0
    aes64im x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xa0a0a0a0a0a0a0a0)
 
aes64im_02_inst_161:
    // Test 161:  Test with dataset: sbox64
    // result rd:x7(0xa1a1a1a1a1a1a1a1), rs1:x25(0xa1a1a1a1a1a1a1a1)
    li  x25, 0xa1a1a1a1a1a1a1a1
    aes64im x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xa1a1a1a1a1a1a1a1)
 
aes64im_02_inst_162:
    // Test 162:  Test with dataset: sbox64
    // result rd:x8(0xa2a2a2a2a2a2a2a2), rs1:x24(0xa2a2a2a2a2a2a2a2)
    li  x24, 0xa2a2a2a2a2a2a2a2
    aes64im x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xa2a2a2a2a2a2a2a2)
 
aes64im_02_inst_163:
    // Test 163:  Test with dataset: sbox64
    // result rd:x9(0xa3a3a3a3a3a3a3a3), rs1:x23(0xa3a3a3a3a3a3a3a3)
    li  x23, 0xa3a3a3a3a3a3a3a3
    aes64im x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xa3a3a3a3a3a3a3a3)
 
aes64im_02_inst_164:
    // Test 164:  Test with dataset: sbox64
    // result rd:x10(0xa4a4a4a4a4a4a4a4), rs1:x22(0xa4a4a4a4a4a4a4a4)
    li  x22, 0xa4a4a4a4a4a4a4a4
    aes64im x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xa4a4a4a4a4a4a4a4)


    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_34_0)

 
aes64im_02_inst_165:
    // Test 165:  Test with dataset: sbox64
    // result rd:x11(0xa5a5a5a5a5a5a5a5), rs1:x21(0xa5a5a5a5a5a5a5a5)
    li  x21, 0xa5a5a5a5a5a5a5a5
    aes64im x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0xa5a5a5a5a5a5a5a5)
 
aes64im_02_inst_166:
    // Test 166:  Test with dataset: sbox64
    // result rd:x12(0xa6a6a6a6a6a6a6a6), rs1:x20(0xa6a6a6a6a6a6a6a6)
    li  x20, 0xa6a6a6a6a6a6a6a6
    aes64im x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0xa6a6a6a6a6a6a6a6)
 
aes64im_02_inst_167:
    // Test 167:  Test with dataset: sbox64
    // result rd:x13(0xa7a7a7a7a7a7a7a7), rs1:x19(0xa7a7a7a7a7a7a7a7)
    li  x19, 0xa7a7a7a7a7a7a7a7
    aes64im x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0xa7a7a7a7a7a7a7a7)
 
aes64im_02_inst_168:
    // Test 168:  Test with dataset: sbox64
    // result rd:x14(0xa8a8a8a8a8a8a8a8), rs1:x18(0xa8a8a8a8a8a8a8a8)
    li  x18, 0xa8a8a8a8a8a8a8a8
    aes64im x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0xa8a8a8a8a8a8a8a8)
 
aes64im_02_inst_169:
    // Test 169:  Test with dataset: sbox64
    // result rd:x15(0xa9a9a9a9a9a9a9a9), rs1:x17(0xa9a9a9a9a9a9a9a9)
    li  x17, 0xa9a9a9a9a9a9a9a9
    aes64im x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0xa9a9a9a9a9a9a9a9)


    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x2,signature_35_0)

 
aes64im_02_inst_170:
    // Test 170:  Test with dataset: sbox64
    // result rd:x16(0xaaaaaaaaaaaaaaaa), rs1:x16(0xaaaaaaaaaaaaaaaa)
    li  x16, 0xaaaaaaaaaaaaaaaa
    aes64im x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0xaaaaaaaaaaaaaaaa)
 
aes64im_02_inst_171:
    // Test 171:  Test with dataset: sbox64
    // result rd:x17(0xabababababababab), rs1:x15(0xabababababababab)
    li  x15, 0xabababababababab
    aes64im x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0xabababababababab)
 
aes64im_02_inst_172:
    // Test 172:  Test with dataset: sbox64
    // result rd:x18(0xacacacacacacacac), rs1:x14(0xacacacacacacacac)
    li  x14, 0xacacacacacacacac
    aes64im x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0xacacacacacacacac)
 
aes64im_02_inst_173:
    // Test 173:  Test with dataset: sbox64
    // result rd:x19(0xadadadadadadadad), rs1:x13(0xadadadadadadadad)
    li  x13, 0xadadadadadadadad
    aes64im x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0xadadadadadadadad)
 
aes64im_02_inst_174:
    // Test 174:  Test with dataset: sbox64
    // result rd:x20(0xaeaeaeaeaeaeaeae), rs1:x12(0xaeaeaeaeaeaeaeae)
    li  x12, 0xaeaeaeaeaeaeaeae
    aes64im x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0xaeaeaeaeaeaeaeae)


    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_36_0)

 
aes64im_02_inst_175:
    // Test 175:  Test with dataset: sbox64
    // result rd:x21(0xafafafafafafafaf), rs1:x11(0xafafafafafafafaf)
    li  x11, 0xafafafafafafafaf
    aes64im x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xafafafafafafafaf)
 
aes64im_02_inst_176:
    // Test 176:  Test with dataset: sbox64
    // result rd:x22(0xb0b0b0b0b0b0b0b0), rs1:x10(0xb0b0b0b0b0b0b0b0)
    li  x10, 0xb0b0b0b0b0b0b0b0
    aes64im x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xb0b0b0b0b0b0b0b0)
 
aes64im_02_inst_177:
    // Test 177:  Test with dataset: sbox64
    // result rd:x23(0xb1b1b1b1b1b1b1b1), rs1:x9(0xb1b1b1b1b1b1b1b1)
    li  x9, 0xb1b1b1b1b1b1b1b1
    aes64im x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xb1b1b1b1b1b1b1b1)
 
aes64im_02_inst_178:
    // Test 178:  Test with dataset: sbox64
    // result rd:x24(0xb2b2b2b2b2b2b2b2), rs1:x8(0xb2b2b2b2b2b2b2b2)
    li  x8, 0xb2b2b2b2b2b2b2b2
    aes64im x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xb2b2b2b2b2b2b2b2)
 
aes64im_02_inst_179:
    // Test 179:  Test with dataset: sbox64
    // result rd:x25(0xb3b3b3b3b3b3b3b3), rs1:x7(0xb3b3b3b3b3b3b3b3)
    li  x7, 0xb3b3b3b3b3b3b3b3
    aes64im x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xb3b3b3b3b3b3b3b3)


    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_37_0)

 
aes64im_02_inst_180:
    // Test 180:  Test with dataset: sbox64
    // result rd:x26(0xb4b4b4b4b4b4b4b4), rs1:x6(0xb4b4b4b4b4b4b4b4)
    li  x6, 0xb4b4b4b4b4b4b4b4
    aes64im x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0xb4b4b4b4b4b4b4b4)
 
aes64im_02_inst_181:
    // Test 181:  Test with dataset: sbox64
    // result rd:x27(0xb5b5b5b5b5b5b5b5), rs1:x5(0xb5b5b5b5b5b5b5b5)
    li  x5, 0xb5b5b5b5b5b5b5b5
    aes64im x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0xb5b5b5b5b5b5b5b5)
 
aes64im_02_inst_182:
    // Test 182:  Test with dataset: sbox64
    // result rd:x28(0xb6b6b6b6b6b6b6b6), rs1:x4(0xb6b6b6b6b6b6b6b6)
    li  x4, 0xb6b6b6b6b6b6b6b6
    aes64im x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0xb6b6b6b6b6b6b6b6)
 
aes64im_02_inst_183:
    // Test 183:  Test with dataset: sbox64
    // result rd:x29(0xb7b7b7b7b7b7b7b7), rs1:x3(0xb7b7b7b7b7b7b7b7)
    li  x3, 0xb7b7b7b7b7b7b7b7
    aes64im x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0xb7b7b7b7b7b7b7b7)
 
aes64im_02_inst_184:
    // Test 184:  Test with dataset: sbox64
    // result rd:x30(0xb8b8b8b8b8b8b8b8), rs1:x2(0xb8b8b8b8b8b8b8b8)
    li  x2, 0xb8b8b8b8b8b8b8b8
    aes64im x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0xb8b8b8b8b8b8b8b8)


    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x5,signature_38_0)

 
aes64im_02_inst_185:
    // Test 185:  Test with dataset: sbox64
    // result rd:x31(0xb9b9b9b9b9b9b9b9), rs1:x1(0xb9b9b9b9b9b9b9b9)
    li  x1, 0xb9b9b9b9b9b9b9b9
    aes64im x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0xb9b9b9b9b9b9b9b9)
 
aes64im_02_inst_186:
    // Test 186:  Test with dataset: sbox64
    // result rd:x1(0xbabababababababa), rs1:x31(0xbabababababababa)
    li  x31, 0xbabababababababa
    aes64im x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0xbabababababababa)
 
aes64im_02_inst_187:
    // Test 187:  Test with dataset: sbox64
    // result rd:x2(0xbbbbbbbbbbbbbbbb), rs1:x30(0xbbbbbbbbbbbbbbbb)
    li  x30, 0xbbbbbbbbbbbbbbbb
    aes64im x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0xbbbbbbbbbbbbbbbb)
 
aes64im_02_inst_188:
    // Test 188:  Test with dataset: sbox64
    // result rd:x3(0xbcbcbcbcbcbcbcbc), rs1:x29(0xbcbcbcbcbcbcbcbc)
    li  x29, 0xbcbcbcbcbcbcbcbc
    aes64im x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0xbcbcbcbcbcbcbcbc)
 
aes64im_02_inst_189:
    // Test 189:  Test with dataset: sbox64
    // result rd:x4(0xbdbdbdbdbdbdbdbd), rs1:x28(0xbdbdbdbdbdbdbdbd)
    li  x28, 0xbdbdbdbdbdbdbdbd
    aes64im x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0xbdbdbdbdbdbdbdbd)


    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_39_0)

 
aes64im_02_inst_190:
    // Test 190:  Test with dataset: sbox64
    // result rd:x5(0xbebebebebebebebe), rs1:x27(0xbebebebebebebebe)
    li  x27, 0xbebebebebebebebe
    aes64im x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0xbebebebebebebebe)
 
aes64im_02_inst_191:
    // Test 191:  Test with dataset: sbox64
    // result rd:x6(0xbfbfbfbfbfbfbfbf), rs1:x26(0xbfbfbfbfbfbfbfbf)
    li  x26, 0xbfbfbfbfbfbfbfbf
    aes64im x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xbfbfbfbfbfbfbfbf)
 
aes64im_02_inst_192:
    // Test 192:  Test with dataset: sbox64
    // result rd:x7(0xc0c0c0c0c0c0c0c0), rs1:x25(0xc0c0c0c0c0c0c0c0)
    li  x25, 0xc0c0c0c0c0c0c0c0
    aes64im x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xc0c0c0c0c0c0c0c0)
 
aes64im_02_inst_193:
    // Test 193:  Test with dataset: sbox64
    // result rd:x8(0xc1c1c1c1c1c1c1c1), rs1:x24(0xc1c1c1c1c1c1c1c1)
    li  x24, 0xc1c1c1c1c1c1c1c1
    aes64im x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xc1c1c1c1c1c1c1c1)
 
aes64im_02_inst_194:
    // Test 194:  Test with dataset: sbox64
    // result rd:x9(0xc2c2c2c2c2c2c2c2), rs1:x23(0xc2c2c2c2c2c2c2c2)
    li  x23, 0xc2c2c2c2c2c2c2c2
    aes64im x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xc2c2c2c2c2c2c2c2)


    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_40_0)

 
aes64im_02_inst_195:
    // Test 195:  Test with dataset: sbox64
    // result rd:x10(0xc3c3c3c3c3c3c3c3), rs1:x22(0xc3c3c3c3c3c3c3c3)
    li  x22, 0xc3c3c3c3c3c3c3c3
    aes64im x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xc3c3c3c3c3c3c3c3)
 
aes64im_02_inst_196:
    // Test 196:  Test with dataset: sbox64
    // result rd:x11(0xc4c4c4c4c4c4c4c4), rs1:x21(0xc4c4c4c4c4c4c4c4)
    li  x21, 0xc4c4c4c4c4c4c4c4
    aes64im x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xc4c4c4c4c4c4c4c4)
 
aes64im_02_inst_197:
    // Test 197:  Test with dataset: sbox64
    // result rd:x12(0xc5c5c5c5c5c5c5c5), rs1:x20(0xc5c5c5c5c5c5c5c5)
    li  x20, 0xc5c5c5c5c5c5c5c5
    aes64im x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0xc5c5c5c5c5c5c5c5)
 
aes64im_02_inst_198:
    // Test 198:  Test with dataset: sbox64
    // result rd:x13(0xc6c6c6c6c6c6c6c6), rs1:x19(0xc6c6c6c6c6c6c6c6)
    li  x19, 0xc6c6c6c6c6c6c6c6
    aes64im x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0xc6c6c6c6c6c6c6c6)
 
aes64im_02_inst_199:
    // Test 199:  Test with dataset: sbox64
    // result rd:x14(0xc7c7c7c7c7c7c7c7), rs1:x18(0xc7c7c7c7c7c7c7c7)
    li  x18, 0xc7c7c7c7c7c7c7c7
    aes64im x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0xc7c7c7c7c7c7c7c7)


    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x3,signature_41_0)

 
aes64im_02_inst_200:
    // Test 200:  Test with dataset: sbox64
    // result rd:x15(0xc8c8c8c8c8c8c8c8), rs1:x17(0xc8c8c8c8c8c8c8c8)
    li  x17, 0xc8c8c8c8c8c8c8c8
    aes64im x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0xc8c8c8c8c8c8c8c8)
 
aes64im_02_inst_201:
    // Test 201:  Test with dataset: sbox64
    // result rd:x16(0xc9c9c9c9c9c9c9c9), rs1:x16(0xc9c9c9c9c9c9c9c9)
    li  x16, 0xc9c9c9c9c9c9c9c9
    aes64im x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0xc9c9c9c9c9c9c9c9)
 
aes64im_02_inst_202:
    // Test 202:  Test with dataset: sbox64
    // result rd:x17(0xcacacacacacacaca), rs1:x15(0xcacacacacacacaca)
    li  x15, 0xcacacacacacacaca
    aes64im x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0xcacacacacacacaca)
 
aes64im_02_inst_203:
    // Test 203:  Test with dataset: sbox64
    // result rd:x18(0xcbcbcbcbcbcbcbcb), rs1:x14(0xcbcbcbcbcbcbcbcb)
    li  x14, 0xcbcbcbcbcbcbcbcb
    aes64im x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0xcbcbcbcbcbcbcbcb)
 
aes64im_02_inst_204:
    // Test 204:  Test with dataset: sbox64
    // result rd:x19(0xcccccccccccccccc), rs1:x13(0xcccccccccccccccc)
    li  x13, 0xcccccccccccccccc
    aes64im x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0xcccccccccccccccc)


    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_42_0)

 
aes64im_02_inst_205:
    // Test 205:  Test with dataset: sbox64
    // result rd:x20(0xcdcdcdcdcdcdcdcd), rs1:x12(0xcdcdcdcdcdcdcdcd)
    li  x12, 0xcdcdcdcdcdcdcdcd
    aes64im x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xcdcdcdcdcdcdcdcd)
 
aes64im_02_inst_206:
    // Test 206:  Test with dataset: sbox64
    // result rd:x21(0xcececececececece), rs1:x11(0xcececececececece)
    li  x11, 0xcececececececece
    aes64im x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xcececececececece)
 
aes64im_02_inst_207:
    // Test 207:  Test with dataset: sbox64
    // result rd:x22(0xcfcfcfcfcfcfcfcf), rs1:x10(0xcfcfcfcfcfcfcfcf)
    li  x10, 0xcfcfcfcfcfcfcfcf
    aes64im x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xcfcfcfcfcfcfcfcf)
 
aes64im_02_inst_208:
    // Test 208:  Test with dataset: sbox64
    // result rd:x23(0xd0d0d0d0d0d0d0d0), rs1:x9(0xd0d0d0d0d0d0d0d0)
    li  x9, 0xd0d0d0d0d0d0d0d0
    aes64im x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xd0d0d0d0d0d0d0d0)
 
aes64im_02_inst_209:
    // Test 209:  Test with dataset: sbox64
    // result rd:x24(0xd1d1d1d1d1d1d1d1), rs1:x8(0xd1d1d1d1d1d1d1d1)
    li  x8, 0xd1d1d1d1d1d1d1d1
    aes64im x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xd1d1d1d1d1d1d1d1)


    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_43_0)

 
aes64im_02_inst_210:
    // Test 210:  Test with dataset: sbox64
    // result rd:x25(0xd2d2d2d2d2d2d2d2), rs1:x7(0xd2d2d2d2d2d2d2d2)
    li  x7, 0xd2d2d2d2d2d2d2d2
    aes64im x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xd2d2d2d2d2d2d2d2)
 
aes64im_02_inst_211:
    // Test 211:  Test with dataset: sbox64
    // result rd:x26(0xd3d3d3d3d3d3d3d3), rs1:x6(0xd3d3d3d3d3d3d3d3)
    li  x6, 0xd3d3d3d3d3d3d3d3
    aes64im x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0xd3d3d3d3d3d3d3d3)
 
aes64im_02_inst_212:
    // Test 212:  Test with dataset: sbox64
    // result rd:x27(0xd4d4d4d4d4d4d4d4), rs1:x5(0xd4d4d4d4d4d4d4d4)
    li  x5, 0xd4d4d4d4d4d4d4d4
    aes64im x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0xd4d4d4d4d4d4d4d4)
 
aes64im_02_inst_213:
    // Test 213:  Test with dataset: sbox64
    // result rd:x28(0xd5d5d5d5d5d5d5d5), rs1:x4(0xd5d5d5d5d5d5d5d5)
    li  x4, 0xd5d5d5d5d5d5d5d5
    aes64im x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0xd5d5d5d5d5d5d5d5)
 
aes64im_02_inst_214:
    // Test 214:  Test with dataset: sbox64
    // result rd:x29(0xd6d6d6d6d6d6d6d6), rs1:x3(0xd6d6d6d6d6d6d6d6)
    li  x3, 0xd6d6d6d6d6d6d6d6
    aes64im x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0xd6d6d6d6d6d6d6d6)


    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x4,signature_44_0)

 
aes64im_02_inst_215:
    // Test 215:  Test with dataset: sbox64
    // result rd:x30(0xd7d7d7d7d7d7d7d7), rs1:x2(0xd7d7d7d7d7d7d7d7)
    li  x2, 0xd7d7d7d7d7d7d7d7
    aes64im x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0xd7d7d7d7d7d7d7d7)
 
aes64im_02_inst_216:
    // Test 216:  Test with dataset: sbox64
    // result rd:x31(0xd8d8d8d8d8d8d8d8), rs1:x1(0xd8d8d8d8d8d8d8d8)
    li  x1, 0xd8d8d8d8d8d8d8d8
    aes64im x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0xd8d8d8d8d8d8d8d8)
 
aes64im_02_inst_217:
    // Test 217:  Test with dataset: sbox64
    // result rd:x1(0xd9d9d9d9d9d9d9d9), rs1:x31(0xd9d9d9d9d9d9d9d9)
    li  x31, 0xd9d9d9d9d9d9d9d9
    aes64im x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0xd9d9d9d9d9d9d9d9)
 
aes64im_02_inst_218:
    // Test 218:  Test with dataset: sbox64
    // result rd:x2(0xdadadadadadadada), rs1:x30(0xdadadadadadadada)
    li  x30, 0xdadadadadadadada
    aes64im x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0xdadadadadadadada)
 
aes64im_02_inst_219:
    // Test 219:  Test with dataset: sbox64
    // result rd:x3(0xdbdbdbdbdbdbdbdb), rs1:x29(0xdbdbdbdbdbdbdbdb)
    li  x29, 0xdbdbdbdbdbdbdbdb
    aes64im x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0xdbdbdbdbdbdbdbdb)


    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_45_0)

 
aes64im_02_inst_220:
    // Test 220:  Test with dataset: sbox64
    // result rd:x4(0xdcdcdcdcdcdcdcdc), rs1:x28(0xdcdcdcdcdcdcdcdc)
    li  x28, 0xdcdcdcdcdcdcdcdc
    aes64im x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0xdcdcdcdcdcdcdcdc)
 
aes64im_02_inst_221:
    // Test 221:  Test with dataset: sbox64
    // result rd:x5(0xdddddddddddddddd), rs1:x27(0xdddddddddddddddd)
    li  x27, 0xdddddddddddddddd
    aes64im x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0xdddddddddddddddd)
 
aes64im_02_inst_222:
    // Test 222:  Test with dataset: sbox64
    // result rd:x6(0xdededededededede), rs1:x26(0xdededededededede)
    li  x26, 0xdededededededede
    aes64im x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xdededededededede)
 
aes64im_02_inst_223:
    // Test 223:  Test with dataset: sbox64
    // result rd:x7(0xdfdfdfdfdfdfdfdf), rs1:x25(0xdfdfdfdfdfdfdfdf)
    li  x25, 0xdfdfdfdfdfdfdfdf
    aes64im x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xdfdfdfdfdfdfdfdf)
 
aes64im_02_inst_224:
    // Test 224:  Test with dataset: sbox64
    // result rd:x8(0xe0e0e0e0e0e0e0e0), rs1:x24(0xe0e0e0e0e0e0e0e0)
    li  x24, 0xe0e0e0e0e0e0e0e0
    aes64im x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xe0e0e0e0e0e0e0e0)


    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_46_0)

 
aes64im_02_inst_225:
    // Test 225:  Test with dataset: sbox64
    // result rd:x9(0xe1e1e1e1e1e1e1e1), rs1:x23(0xe1e1e1e1e1e1e1e1)
    li  x23, 0xe1e1e1e1e1e1e1e1
    aes64im x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xe1e1e1e1e1e1e1e1)
 
aes64im_02_inst_226:
    // Test 226:  Test with dataset: sbox64
    // result rd:x10(0xe2e2e2e2e2e2e2e2), rs1:x22(0xe2e2e2e2e2e2e2e2)
    li  x22, 0xe2e2e2e2e2e2e2e2
    aes64im x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xe2e2e2e2e2e2e2e2)
 
aes64im_02_inst_227:
    // Test 227:  Test with dataset: sbox64
    // result rd:x11(0xe3e3e3e3e3e3e3e3), rs1:x21(0xe3e3e3e3e3e3e3e3)
    li  x21, 0xe3e3e3e3e3e3e3e3
    aes64im x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xe3e3e3e3e3e3e3e3)
 
aes64im_02_inst_228:
    // Test 228:  Test with dataset: sbox64
    // result rd:x12(0xe4e4e4e4e4e4e4e4), rs1:x20(0xe4e4e4e4e4e4e4e4)
    li  x20, 0xe4e4e4e4e4e4e4e4
    aes64im x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0xe4e4e4e4e4e4e4e4)
 
aes64im_02_inst_229:
    // Test 229:  Test with dataset: sbox64
    // result rd:x13(0xe5e5e5e5e5e5e5e5), rs1:x19(0xe5e5e5e5e5e5e5e5)
    li  x19, 0xe5e5e5e5e5e5e5e5
    aes64im x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0xe5e5e5e5e5e5e5e5)


    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x4,signature_47_0)

 
aes64im_02_inst_230:
    // Test 230:  Test with dataset: sbox64
    // result rd:x14(0xe6e6e6e6e6e6e6e6), rs1:x18(0xe6e6e6e6e6e6e6e6)
    li  x18, 0xe6e6e6e6e6e6e6e6
    aes64im x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0xe6e6e6e6e6e6e6e6)
 
aes64im_02_inst_231:
    // Test 231:  Test with dataset: sbox64
    // result rd:x15(0xe7e7e7e7e7e7e7e7), rs1:x17(0xe7e7e7e7e7e7e7e7)
    li  x17, 0xe7e7e7e7e7e7e7e7
    aes64im x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0xe7e7e7e7e7e7e7e7)
 
aes64im_02_inst_232:
    // Test 232:  Test with dataset: sbox64
    // result rd:x16(0xe8e8e8e8e8e8e8e8), rs1:x16(0xe8e8e8e8e8e8e8e8)
    li  x16, 0xe8e8e8e8e8e8e8e8
    aes64im x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0xe8e8e8e8e8e8e8e8)
 
aes64im_02_inst_233:
    // Test 233:  Test with dataset: sbox64
    // result rd:x17(0xe9e9e9e9e9e9e9e9), rs1:x15(0xe9e9e9e9e9e9e9e9)
    li  x15, 0xe9e9e9e9e9e9e9e9
    aes64im x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0xe9e9e9e9e9e9e9e9)
 
aes64im_02_inst_234:
    // Test 234:  Test with dataset: sbox64
    // result rd:x18(0xeaeaeaeaeaeaeaea), rs1:x14(0xeaeaeaeaeaeaeaea)
    li  x14, 0xeaeaeaeaeaeaeaea
    aes64im x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0xeaeaeaeaeaeaeaea)


    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_48_0)

 
aes64im_02_inst_235:
    // Test 235:  Test with dataset: sbox64
    // result rd:x19(0xebebebebebebebeb), rs1:x13(0xebebebebebebebeb)
    li  x13, 0xebebebebebebebeb
    aes64im x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0xebebebebebebebeb)
 
aes64im_02_inst_236:
    // Test 236:  Test with dataset: sbox64
    // result rd:x20(0xecececececececec), rs1:x12(0xecececececececec)
    li  x12, 0xecececececececec
    aes64im x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xecececececececec)
 
aes64im_02_inst_237:
    // Test 237:  Test with dataset: sbox64
    // result rd:x21(0xedededededededed), rs1:x11(0xedededededededed)
    li  x11, 0xedededededededed
    aes64im x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xedededededededed)
 
aes64im_02_inst_238:
    // Test 238:  Test with dataset: sbox64
    // result rd:x22(0xeeeeeeeeeeeeeeee), rs1:x10(0xeeeeeeeeeeeeeeee)
    li  x10, 0xeeeeeeeeeeeeeeee
    aes64im x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xeeeeeeeeeeeeeeee)
 
aes64im_02_inst_239:
    // Test 239:  Test with dataset: sbox64
    // result rd:x23(0xefefefefefefefef), rs1:x9(0xefefefefefefefef)
    li  x9, 0xefefefefefefefef
    aes64im x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xefefefefefefefef)


    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_49_0)

 
aes64im_02_inst_240:
    // Test 240:  Test with dataset: sbox64
    // result rd:x24(0xf0f0f0f0f0f0f0f0), rs1:x8(0xf0f0f0f0f0f0f0f0)
    li  x8, 0xf0f0f0f0f0f0f0f0
    aes64im x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xf0f0f0f0f0f0f0f0)
 
aes64im_02_inst_241:
    // Test 241:  Test with dataset: sbox64
    // result rd:x25(0xf1f1f1f1f1f1f1f1), rs1:x7(0xf1f1f1f1f1f1f1f1)
    li  x7, 0xf1f1f1f1f1f1f1f1
    aes64im x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xf1f1f1f1f1f1f1f1)
 
aes64im_02_inst_242:
    // Test 242:  Test with dataset: sbox64
    // result rd:x26(0xf2f2f2f2f2f2f2f2), rs1:x6(0xf2f2f2f2f2f2f2f2)
    li  x6, 0xf2f2f2f2f2f2f2f2
    aes64im x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0xf2f2f2f2f2f2f2f2)
 
aes64im_02_inst_243:
    // Test 243:  Test with dataset: sbox64
    // result rd:x27(0xf3f3f3f3f3f3f3f3), rs1:x5(0xf3f3f3f3f3f3f3f3)
    li  x5, 0xf3f3f3f3f3f3f3f3
    aes64im x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0xf3f3f3f3f3f3f3f3)
 
aes64im_02_inst_244:
    // Test 244:  Test with dataset: sbox64
    // result rd:x28(0xf4f4f4f4f4f4f4f4), rs1:x4(0xf4f4f4f4f4f4f4f4)
    li  x4, 0xf4f4f4f4f4f4f4f4
    aes64im x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0xf4f4f4f4f4f4f4f4)


    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x4,signature_50_0)

 
aes64im_02_inst_245:
    // Test 245:  Test with dataset: sbox64
    // result rd:x29(0xf5f5f5f5f5f5f5f5), rs1:x3(0xf5f5f5f5f5f5f5f5)
    li  x3, 0xf5f5f5f5f5f5f5f5
    aes64im x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0xf5f5f5f5f5f5f5f5)
 
aes64im_02_inst_246:
    // Test 246:  Test with dataset: sbox64
    // result rd:x30(0xf6f6f6f6f6f6f6f6), rs1:x2(0xf6f6f6f6f6f6f6f6)
    li  x2, 0xf6f6f6f6f6f6f6f6
    aes64im x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0xf6f6f6f6f6f6f6f6)
 
aes64im_02_inst_247:
    // Test 247:  Test with dataset: sbox64
    // result rd:x31(0xf7f7f7f7f7f7f7f7), rs1:x1(0xf7f7f7f7f7f7f7f7)
    li  x1, 0xf7f7f7f7f7f7f7f7
    aes64im x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0xf7f7f7f7f7f7f7f7)
 
aes64im_02_inst_248:
    // Test 248:  Test with dataset: sbox64
    // result rd:x1(0xf8f8f8f8f8f8f8f8), rs1:x31(0xf8f8f8f8f8f8f8f8)
    li  x31, 0xf8f8f8f8f8f8f8f8
    aes64im x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0xf8f8f8f8f8f8f8f8)
 
aes64im_02_inst_249:
    // Test 249:  Test with dataset: sbox64
    // result rd:x2(0xf9f9f9f9f9f9f9f9), rs1:x30(0xf9f9f9f9f9f9f9f9)
    li  x30, 0xf9f9f9f9f9f9f9f9
    aes64im x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0xf9f9f9f9f9f9f9f9)


    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_51_0)

 
aes64im_02_inst_250:
    // Test 250:  Test with dataset: sbox64
    // result rd:x3(0xfafafafafafafafa), rs1:x29(0xfafafafafafafafa)
    li  x29, 0xfafafafafafafafa
    aes64im x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0xfafafafafafafafa)
 
aes64im_02_inst_251:
    // Test 251:  Test with dataset: sbox64
    // result rd:x4(0xfbfbfbfbfbfbfbfb), rs1:x28(0xfbfbfbfbfbfbfbfb)
    li  x28, 0xfbfbfbfbfbfbfbfb
    aes64im x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0xfbfbfbfbfbfbfbfb)
 
aes64im_02_inst_252:
    // Test 252:  Test with dataset: sbox64
    // result rd:x5(0xfcfcfcfcfcfcfcfc), rs1:x27(0xfcfcfcfcfcfcfcfc)
    li  x27, 0xfcfcfcfcfcfcfcfc
    aes64im x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0xfcfcfcfcfcfcfcfc)
 
aes64im_02_inst_253:
    // Test 253:  Test with dataset: sbox64
    // result rd:x6(0xfdfdfdfdfdfdfdfd), rs1:x26(0xfdfdfdfdfdfdfdfd)
    li  x26, 0xfdfdfdfdfdfdfdfd
    aes64im x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xfdfdfdfdfdfdfdfd)
 
aes64im_02_inst_254:
    // Test 254:  Test with dataset: sbox64
    // result rd:x7(0xfefefefefefefefe), rs1:x25(0xfefefefefefefefe)
    li  x25, 0xfefefefefefefefe
    aes64im x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xfefefefefefefefe)


    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64im)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64im)

    RVTEST_SIGBASE(x1,signature_52_0)

 
aes64im_02_inst_255:
    // Test 255:  Test with dataset: sbox64
    // result rd:x8(0xffffffffffffffff), rs1:x24(0xffffffffffffffff)
    li  x24, 0xffffffffffffffff
    aes64im x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xffffffffffffffff)
	
#endif


RVTEST_CODE_END aes64im_02_code_end
RVTEST_CODE_BEGIN aes64dsm_02_init aes64dsm_02_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x6,signature_1_0)


aes64dsm_02_inst_0:
    // Test 0:  Test with dataset: sbox64
    // result rd:x1(0x9fc1b0eeee9fc1b0), rs1:x31(0x0000000000000000), rs2:x16(0xffffffffffffffff)
    TEST_RR_OP(aes64dsm, x1, x31, x16, 0x9fc1b0eeee9fc1b0, 0x0, 0xffffffffffffffff, x6, 0, x7)

aes64dsm_02_inst_1:
    // Test 1:  Test with dataset: sbox64
    // result rd:x2(0x1218171d1d121817), rs1:x30(0x0101010101010101), rs2:x15(0xfefefefefefefefe)
    TEST_RR_OP(aes64dsm, x2, x30, x15, 0x1218171d1d121817, 0x101010101010101, 0xfefefefefefefefe, x6, 8, x7)

aes64dsm_02_inst_2:
    // Test 2:  Test with dataset: sbox64
    // result rd:x3(0x8016cb5d5d8016cb), rs1:x29(0x0202020202020202), rs2:x14(0xfdfdfdfdfdfdfdfd)
    TEST_RR_OP(aes64dsm, x3, x29, x14, 0x8016cb5d5d8016cb, 0x202020202020202, 0xfdfdfdfdfdfdfdfd, x6, 16, x7)

aes64dsm_02_inst_3:
    // Test 3:  Test with dataset: sbox64
    // result rd:x4(0x7863f8e3e37863f8), rs1:x28(0x0303030303030303), rs2:x13(0xfcfcfcfcfcfcfcfc)
    TEST_RR_OP(aes64dsm, x4, x28, x13, 0x7863f8e3e37863f8, 0x303030303030303, 0xfcfcfcfcfcfcfcfc, x6, 24, x7)

aes64dsm_02_inst_4:
    // Test 4:  Test with dataset: sbox64
    // result rd:x5(0x9234c167679234c1), rs1:x27(0x0404040404040404), rs2:x12(0xfbfbfbfbfbfbfbfb)
    TEST_RR_OP(aes64dsm, x5, x27, x12, 0x9234c167679234c1, 0x404040404040404, 0xfbfbfbfbfbfbfbfb, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_2_0)


aes64dsm_02_inst_5:
    // Test 5:  Test with dataset: sbox64
    // result rd:x6(0xd89cfabebed89cfa), rs1:x26(0x0505050505050505), rs2:x11(0xfafafafafafafafa)
    TEST_RR_OP(aes64dsm, x6, x26, x11, 0xd89cfabebed89cfa, 0x505050505050505, 0xfafafafafafafafa, x1, 0, x2)

aes64dsm_02_inst_6:
    // Test 6:  Test with dataset: sbox64
    // result rd:x7(0xf7743bb8b8f7743b), rs1:x25(0x0606060606060606), rs2:x10(0xf9f9f9f9f9f9f9f9)
    TEST_RR_OP(aes64dsm, x7, x25, x10, 0xf7743bb8b8f7743b, 0x606060606060606, 0xf9f9f9f9f9f9f9f9, x1, 8, x2)

aes64dsm_02_inst_7:
    // Test 7:  Test with dataset: sbox64
    // result rd:x8(0x01a8d8717101a8d8), rs1:x24(0x0707070707070707), rs2:x9(0xf8f8f8f8f8f8f8f8)
    TEST_RR_OP(aes64dsm, x8, x24, x9, 0x01a8d8717101a8d8, 0x707070707070707, 0xf8f8f8f8f8f8f8f8, x1, 16, x2)

aes64dsm_02_inst_8:
    // Test 8:  Test with dataset: sbox64
    // result rd:x9(0x5d74c4eded5d74c4), rs1:x23(0x0808080808080808), rs2:x8(0xf7f7f7f7f7f7f7f7)
    TEST_RR_OP(aes64dsm, x9, x23, x8, 0x5d74c4eded5d74c4, 0x808080808080808, 0xf7f7f7f7f7f7f7f7, x1, 24, x2)

aes64dsm_02_inst_9:
    // Test 9:  Test with dataset: sbox64
    // result rd:x10(0x8fb8192e2e8fb819), rs1:x22(0x0909090909090909), rs2:x7(0xf6f6f6f6f6f6f6f6)
    TEST_RR_OP(aes64dsm, x10, x22, x7, 0x8fb8192e2e8fb819, 0x909090909090909, 0xf6f6f6f6f6f6f6f6, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_3_0)


aes64dsm_02_inst_10:
    // Test 10:  Test with dataset: sbox64
    // result rd:x11(0xb90a6ddedeb90a6d), rs1:x21(0x0a0a0a0a0a0a0a0a), rs2:x6(0xf5f5f5f5f5f5f5f5)
    TEST_RR_OP(aes64dsm, x11, x21, x6, 0xb90a6ddedeb90a6d, 0xa0a0a0a0a0a0a0a, 0xf5f5f5f5f5f5f5f5, x1, 0, x7)

aes64dsm_02_inst_11:
    // Test 11:  Test with dataset: sbox64
    // result rd:x12(0x622a460e0e622a46), rs1:x20(0x0b0b0b0b0b0b0b0b), rs2:x5(0xf4f4f4f4f4f4f4f4)
    TEST_RR_OP(aes64dsm, x12, x20, x5, 0x622a460e0e622a46, 0xb0b0b0b0b0b0b0b, 0xf4f4f4f4f4f4f4f4, x1, 8, x7)

aes64dsm_02_inst_12:
    // Test 12:  Test with dataset: sbox64
    // result rd:x13(0x4aafb550504aafb5), rs1:x19(0x0c0c0c0c0c0c0c0c), rs2:x4(0xf3f3f3f3f3f3f3f3)
    TEST_RR_OP(aes64dsm, x13, x19, x4, 0x4aafb550504aafb5, 0xc0c0c0c0c0c0c0c, 0xf3f3f3f3f3f3f3f3, x1, 16, x7)

aes64dsm_02_inst_13:
    // Test 13:  Test with dataset: sbox64
    // result rd:x14(0x00f5f7020200f5f7), rs1:x18(0x0d0d0d0d0d0d0d0d), rs2:x3(0xf2f2f2f2f2f2f2f2)
    TEST_RR_OP(aes64dsm, x14, x18, x3, 0x00f5f7020200f5f7, 0xd0d0d0d0d0d0d0d, 0xf2f2f2f2f2f2f2f2, x1, 24, x7)

aes64dsm_02_inst_14:
    // Test 14:  Test with dataset: sbox64
    // result rd:x15(0x15f6e90a0a15f6e9), rs1:x17(0x0e0e0e0e0e0e0e0e), rs2:x2(0xf1f1f1f1f1f1f1f1)
    TEST_RR_OP(aes64dsm, x15, x17, x2, 0x15f6e90a0a15f6e9, 0xe0e0e0e0e0e0e0e, 0xf1f1f1f1f1f1f1f1, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x2,signature_4_0)


aes64dsm_02_inst_15:
    // Test 15:  Test with dataset: sbox64
    // result rd:x16(0x498aa56666498aa5), rs1:x16(0x0f0f0f0f0f0f0f0f), rs2:x1(0xf0f0f0f0f0f0f0f0)
    TEST_RR_OP(aes64dsm, x16, x16, x1, 0x498aa56666498aa5, 0xf0f0f0f0f0f0f0f, 0xf0f0f0f0f0f0f0f0, x2, 0, x3)

aes64dsm_02_inst_16:
    // Test 16:  Test with dataset: sbox64
    // result rd:x17(0x2f153208082f1532), rs1:x15(0x1010101010101010), rs2:x31(0xefefefefefefefef)
    TEST_RR_OP(aes64dsm, x17, x15, x31, 0x2f153208082f1532, 0x1010101010101010, 0xefefefefefefefef, x2, 8, x3)

aes64dsm_02_inst_17:
    // Test 17:  Test with dataset: sbox64
    // result rd:x18(0x9e6ae410109e6ae4), rs1:x14(0x1111111111111111), rs2:x30(0xeeeeeeeeeeeeeeee)
    TEST_RR_OP(aes64dsm, x18, x14, x30, 0x9e6ae410109e6ae4, 0x1111111111111111, 0xeeeeeeeeeeeeeeee, x2, 16, x3)

aes64dsm_02_inst_18:
    // Test 18:  Test with dataset: sbox64
    // result rd:x19(0x34e05e8a8a34e05e), rs1:x13(0x1212121212121212), rs2:x29(0xedededededededed)
    TEST_RR_OP(aes64dsm, x19, x13, x29, 0x34e05e8a8a34e05e, 0x1212121212121212, 0xedededededededed, x2, 24, x3)

aes64dsm_02_inst_19:
    // Test 19:  Test with dataset: sbox64
    // result rd:x20(0x8587848686858784), rs1:x12(0x1313131313131313), rs2:x28(0xecececececececec)
    TEST_RR_OP(aes64dsm, x20, x12, x28, 0x8587848686858784, 0x1313131313131313, 0xecececececececec, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_5_0)


aes64dsm_02_inst_20:
    // Test 20:  Test with dataset: sbox64
    // result rd:x21(0xc396643131c39664), rs1:x11(0x1414141414141414), rs2:x27(0xebebebebebebebeb)
    TEST_RR_OP(aes64dsm, x21, x11, x27, 0xc396643131c39664, 0x1414141414141414, 0xebebebebebebebeb, x1, 0, x2)

aes64dsm_02_inst_21:
    // Test 21:  Test with dataset: sbox64
    // result rd:x22(0xeedd7a4949eedd7a), rs1:x10(0x1515151515151515), rs2:x26(0xeaeaeaeaeaeaeaea)
    TEST_RR_OP(aes64dsm, x22, x10, x26, 0xeedd7a4949eedd7a, 0x1515151515151515, 0xeaeaeaeaeaeaeaea, x1, 8, x2)

aes64dsm_02_inst_22:
    // Test 22:  Test with dataset: sbox64
    // result rd:x23(0x93bb87afaf93bb87), rs1:x9(0x1616161616161616), rs2:x25(0xe9e9e9e9e9e9e9e9)
    TEST_RR_OP(aes64dsm, x23, x9, x25, 0x93bb87afaf93bb87, 0x1616161616161616, 0xe9e9e9e9e9e9e9e9, x1, 16, x2)

aes64dsm_02_inst_23:
    // Test 23:  Test with dataset: sbox64
    // result rd:x24(0x71ef3ea0a071ef3e), rs1:x8(0x1717171717171717), rs2:x24(0xe8e8e8e8e8e8e8e8)
    TEST_RR_OP(aes64dsm, x24, x8, x24, 0x71ef3ea0a071ef3e, 0x1717171717171717, 0xe8e8e8e8e8e8e8e8, x1, 24, x2)

aes64dsm_02_inst_24:
    // Test 24:  Test with dataset: sbox64
    // result rd:x25(0x8596011212859601), rs1:x7(0x1818181818181818), rs2:x23(0xe7e7e7e7e7e7e7e7)
    TEST_RR_OP(aes64dsm, x25, x7, x23, 0x8596011212859601, 0x1818181818181818, 0xe7e7e7e7e7e7e7e7, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_6_0)


aes64dsm_02_inst_25:
    // Test 25:  Test with dataset: sbox64
    // result rd:x26(0xf4028f7979f4028f), rs1:x6(0x1919191919191919), rs2:x22(0xe6e6e6e6e6e6e6e6)
    TEST_RR_OP(aes64dsm, x26, x6, x22, 0xf4028f7979f4028f, 0x1919191919191919, 0xe6e6e6e6e6e6e6e6, x1, 0, x7)

aes64dsm_02_inst_26:
    // Test 26:  Test with dataset: sbox64
    // result rd:x27(0x47952efcfc47952e), rs1:x5(0x1a1a1a1a1a1a1a1a), rs2:x21(0xe5e5e5e5e5e5e5e5)
    TEST_RR_OP(aes64dsm, x27, x5, x21, 0x47952efcfc47952e, 0x1a1a1a1a1a1a1a1a, 0xe5e5e5e5e5e5e5e5, x1, 8, x7)

aes64dsm_02_inst_27:
    // Test 27:  Test with dataset: sbox64
    // result rd:x28(0xe42b0ec1c1e42b0e), rs1:x4(0x1b1b1b1b1b1b1b1b), rs2:x20(0xe4e4e4e4e4e4e4e4)
    TEST_RR_OP(aes64dsm, x28, x4, x20, 0xe42b0ec1c1e42b0e, 0x1b1b1b1b1b1b1b1b, 0xe4e4e4e4e4e4e4e4, x1, 16, x7)

aes64dsm_02_inst_28:
    // Test 28:  Test with dataset: sbox64
    // result rd:x29(0x565fdfd6d6565fdf), rs1:x3(0x1c1c1c1c1c1c1c1c), rs2:x19(0xe3e3e3e3e3e3e3e3)
    TEST_RR_OP(aes64dsm, x29, x3, x19, 0x565fdfd6d6565fdf, 0x1c1c1c1c1c1c1c1c, 0xe3e3e3e3e3e3e3e3, x1, 24, x7)

aes64dsm_02_inst_29:
    // Test 29:  Test with dataset: sbox64
    // result rd:x30(0x5382b667675382b6), rs1:x2(0x1d1d1d1d1d1d1d1d), rs2:x18(0xe2e2e2e2e2e2e2e2)
    TEST_RR_OP(aes64dsm, x30, x2, x18, 0x5382b667675382b6, 0x1d1d1d1d1d1d1d1d, 0xe2e2e2e2e2e2e2e2, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x5,signature_7_0)


aes64dsm_02_inst_30:
    // Test 30:  Test with dataset: sbox64
    // result rd:x31(0xd6c4dfcdcdd6c4df), rs1:x1(0x1e1e1e1e1e1e1e1e), rs2:x17(0xe1e1e1e1e1e1e1e1)
    TEST_RR_OP(aes64dsm, x31, x1, x17, 0xd6c4dfcdcdd6c4df, 0x1e1e1e1e1e1e1e1e, 0xe1e1e1e1e1e1e1e1, x5, 0, x6)

aes64dsm_02_inst_31:
    // Test 31:  Test with dataset: sbox64
    // result rd:x1(0xc117aa7c7cc117aa), rs1:x31(0x1f1f1f1f1f1f1f1f), rs2:x16(0xe0e0e0e0e0e0e0e0)
    TEST_RR_OP(aes64dsm, x1, x31, x16, 0xc117aa7c7cc117aa, 0x1f1f1f1f1f1f1f1f, 0xe0e0e0e0e0e0e0e0, x5, 8, x6)

aes64dsm_02_inst_32:
    // Test 32:  Test with dataset: sbox64
    // result rd:x2(0x5835e38e8e5835e3), rs1:x30(0x2020202020202020), rs2:x15(0xdfdfdfdfdfdfdfdf)
    TEST_RR_OP(aes64dsm, x2, x30, x15, 0x5835e38e8e5835e3, 0x2020202020202020, 0xdfdfdfdfdfdfdfdf, x5, 16, x6)

aes64dsm_02_inst_33:
    // Test 33:  Test with dataset: sbox64
    // result rd:x3(0xf82d1fcacaf82d1f), rs1:x29(0x2121212121212121), rs2:x14(0xdededededededede)
    TEST_RR_OP(aes64dsm, x3, x29, x14, 0xf82d1fcacaf82d1f, 0x2121212121212121, 0xdededededededede, x5, 24, x6)

aes64dsm_02_inst_34:
    // Test 34:  Test with dataset: sbox64
    // result rd:x4(0x1ca641fbfb1ca641), rs1:x28(0x2222222222222222), rs2:x13(0xdddddddddddddddd)
    TEST_RR_OP(aes64dsm, x4, x28, x13, 0x1ca641fbfb1ca641, 0x2222222222222222, 0xdddddddddddddddd, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_8_0)


aes64dsm_02_inst_35:
    // Test 35:  Test with dataset: sbox64
    // result rd:x5(0x7821d980807821d9), rs1:x27(0x2323232323232323), rs2:x12(0xdcdcdcdcdcdcdcdc)
    TEST_RR_OP(aes64dsm, x5, x27, x12, 0x7821d980807821d9, 0x2323232323232323, 0xdcdcdcdcdcdcdcdc, x1, 0, x2)

aes64dsm_02_inst_36:
    // Test 36:  Test with dataset: sbox64
    // result rd:x6(0x097b304242097b30), rs1:x26(0x2424242424242424), rs2:x11(0xdbdbdbdbdbdbdbdb)
    TEST_RR_OP(aes64dsm, x6, x26, x11, 0x097b304242097b30, 0x2424242424242424, 0xdbdbdbdbdbdbdbdb, x1, 8, x2)

aes64dsm_02_inst_37:
    // Test 37:  Test with dataset: sbox64
    // result rd:x7(0xc7ac7f1414c7ac7f), rs1:x25(0x2525252525252525), rs2:x10(0xdadadadadadadada)
    TEST_RR_OP(aes64dsm, x7, x25, x10, 0xc7ac7f1414c7ac7f, 0x2525252525252525, 0xdadadadadadadada, x1, 16, x2)

aes64dsm_02_inst_38:
    // Test 38:  Test with dataset: sbox64
    // result rd:x8(0x47d081161647d081), rs1:x24(0x2626262626262626), rs2:x9(0xd9d9d9d9d9d9d9d9)
    TEST_RR_OP(aes64dsm, x8, x24, x9, 0x47d081161647d081, 0x2626262626262626, 0xd9d9d9d9d9d9d9d9, x1, 24, x2)

aes64dsm_02_inst_39:
    // Test 39:  Test with dataset: sbox64
    // result rd:x9(0x4d6d5d7d7d4d6d5d), rs1:x23(0x2727272727272727), rs2:x8(0xd8d8d8d8d8d8d8d8)
    TEST_RR_OP(aes64dsm, x9, x23, x8, 0x4d6d5d7d7d4d6d5d, 0x2727272727272727, 0xd8d8d8d8d8d8d8d8, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_9_0)


aes64dsm_02_inst_40:
    // Test 40:  Test with dataset: sbox64
    // result rd:x10(0x71ac924f4f71ac92), rs1:x22(0x2828282828282828), rs2:x7(0xd7d7d7d7d7d7d7d7)
    TEST_RR_OP(aes64dsm, x10, x22, x7, 0x71ac924f4f71ac92, 0x2828282828282828, 0xd7d7d7d7d7d7d7d7, x1, 0, x2)

aes64dsm_02_inst_41:
    // Test 41:  Test with dataset: sbox64
    // result rd:x11(0x5e525854545e5258), rs1:x21(0x2929292929292929), rs2:x6(0xd6d6d6d6d6d6d6d6)
    TEST_RR_OP(aes64dsm, x11, x21, x6, 0x5e525854545e5258, 0x2929292929292929, 0xd6d6d6d6d6d6d6d6, x1, 8, x2)

aes64dsm_02_inst_42:
    // Test 42:  Test with dataset: sbox64
    // result rd:x12(0x7535551515753555), rs1:x20(0x2a2a2a2a2a2a2a2a), rs2:x5(0xd5d5d5d5d5d5d5d5)
    TEST_RR_OP(aes64dsm, x12, x20, x5, 0x7535551515753555, 0x2a2a2a2a2a2a2a2a, 0xd5d5d5d5d5d5d5d5, x1, 16, x2)

aes64dsm_02_inst_43:
    // Test 43:  Test with dataset: sbox64
    // result rd:x13(0x7551674343755167), rs1:x19(0x2b2b2b2b2b2b2b2b), rs2:x4(0xd4d4d4d4d4d4d4d4)
    TEST_RR_OP(aes64dsm, x13, x19, x4, 0x7551674343755167, 0x2b2b2b2b2b2b2b2b, 0xd4d4d4d4d4d4d4d4, x1, 24, x2)

aes64dsm_02_inst_44:
    // Test 44:  Test with dataset: sbox64
    // result rd:x14(0xe5280ec3c3e5280e), rs1:x18(0x2c2c2c2c2c2c2c2c), rs2:x3(0xd3d3d3d3d3d3d3d3)
    TEST_RR_OP(aes64dsm, x14, x18, x3, 0xe5280ec3c3e5280e, 0x2c2c2c2c2c2c2c2c, 0xd3d3d3d3d3d3d3d3, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x3,signature_10_0)


aes64dsm_02_inst_45:
    // Test 45:  Test with dataset: sbox64
    // result rd:x15(0x4c5dc9d8d84c5dc9), rs1:x17(0x2d2d2d2d2d2d2d2d), rs2:x2(0xd2d2d2d2d2d2d2d2)
    TEST_RR_OP(aes64dsm, x15, x17, x2, 0x4c5dc9d8d84c5dc9, 0x2d2d2d2d2d2d2d2d, 0xd2d2d2d2d2d2d2d2, x3, 0, x4)

aes64dsm_02_inst_46:
    // Test 46:  Test with dataset: sbox64
    // result rd:x16(0x102f82bdbd102f82), rs1:x16(0x2e2e2e2e2e2e2e2e), rs2:x1(0xd1d1d1d1d1d1d1d1)
    TEST_RR_OP(aes64dsm, x16, x16, x1, 0x102f82bdbd102f82, 0x2e2e2e2e2e2e2e2e, 0xd1d1d1d1d1d1d1d1, x3, 8, x4)

aes64dsm_02_inst_47:
    // Test 47:  Test with dataset: sbox64
    // result rd:x17(0x84d8aaf6f684d8aa), rs1:x15(0x2f2f2f2f2f2f2f2f), rs2:x31(0xd0d0d0d0d0d0d0d0)
    TEST_RR_OP(aes64dsm, x17, x15, x31, 0x84d8aaf6f684d8aa, 0x2f2f2f2f2f2f2f2f, 0xd0d0d0d0d0d0d0d0, x3, 16, x4)

aes64dsm_02_inst_48:
    // Test 48:  Test with dataset: sbox64
    // result rd:x18(0xb618e14f4fb618e1), rs1:x14(0x3030303030303030), rs2:x30(0xcfcfcfcfcfcfcfcf)
    TEST_RR_OP(aes64dsm, x18, x14, x30, 0xb618e14f4fb618e1, 0x3030303030303030, 0xcfcfcfcfcfcfcfcf, x3, 24, x4)

aes64dsm_02_inst_49:
    // Test 49:  Test with dataset: sbox64
    // result rd:x19(0x56c9940b0b56c994), rs1:x13(0x3131313131313131), rs2:x29(0xcececececececece)
    TEST_RR_OP(aes64dsm, x19, x13, x29, 0x56c9940b0b56c994, 0x3131313131313131, 0xcececececececece, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_11_0)


aes64dsm_02_inst_50:
    // Test 50:  Test with dataset: sbox64
    // result rd:x20(0x4604672525460467), rs1:x12(0x3232323232323232), rs2:x28(0xcdcdcdcdcdcdcdcd)
    TEST_RR_OP(aes64dsm, x20, x12, x28, 0x4604672525460467, 0x3232323232323232, 0xcdcdcdcdcdcdcdcd, x1, 0, x2)

aes64dsm_02_inst_51:
    // Test 51:  Test with dataset: sbox64
    // result rd:x21(0xba38fb7979ba38fb), rs1:x11(0x3333333333333333), rs2:x27(0xcccccccccccccccc)
    TEST_RR_OP(aes64dsm, x21, x11, x27, 0xba38fb7979ba38fb, 0x3333333333333333, 0xcccccccccccccccc, x1, 8, x2)

aes64dsm_02_inst_52:
    // Test 52:  Test with dataset: sbox64
    // result rd:x22(0x648615f7f7648615), rs1:x10(0x3434343434343434), rs2:x26(0xcbcbcbcbcbcbcbcb)
    TEST_RR_OP(aes64dsm, x22, x10, x26, 0x648615f7f7648615, 0x3434343434343434, 0xcbcbcbcbcbcbcbcb, x1, 16, x2)

aes64dsm_02_inst_53:
    // Test 53:  Test with dataset: sbox64
    // result rd:x23(0x901959d0d0901959), rs1:x9(0x3535353535353535), rs2:x25(0xcacacacacacacaca)
    TEST_RR_OP(aes64dsm, x23, x9, x25, 0x901959d0d0901959, 0x3535353535353535, 0xcacacacacacacaca, x1, 24, x2)

aes64dsm_02_inst_54:
    // Test 54:  Test with dataset: sbox64
    // result rd:x24(0xa6ca90fcfca6ca90), rs1:x8(0x3636363636363636), rs2:x24(0xc9c9c9c9c9c9c9c9)
    TEST_RR_OP(aes64dsm, x24, x8, x24, 0xa6ca90fcfca6ca90, 0x3636363636363636, 0xc9c9c9c9c9c9c9c9, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_12_0)


aes64dsm_02_inst_55:
    // Test 55:  Test with dataset: sbox64
    // result rd:x25(0xbbbdb8bebebbbdb8), rs1:x7(0x3737373737373737), rs2:x23(0xc8c8c8c8c8c8c8c8)
    TEST_RR_OP(aes64dsm, x25, x7, x23, 0xbbbdb8bebebbbdb8, 0x3737373737373737, 0xc8c8c8c8c8c8c8c8, x1, 0, x2)

aes64dsm_02_inst_56:
    // Test 56:  Test with dataset: sbox64
    // result rd:x26(0xb836ff7171b836ff), rs1:x6(0x3838383838383838), rs2:x22(0xc7c7c7c7c7c7c7c7)
    TEST_RR_OP(aes64dsm, x26, x6, x22, 0xb836ff7171b836ff, 0x3838383838383838, 0xc7c7c7c7c7c7c7c7, x1, 8, x2)

aes64dsm_02_inst_57:
    // Test 57:  Test with dataset: sbox64
    // result rd:x27(0xa2813e1d1da2813e), rs1:x5(0x3939393939393939), rs2:x21(0xc6c6c6c6c6c6c6c6)
    TEST_RR_OP(aes64dsm, x27, x5, x21, 0xa2813e1d1da2813e, 0x3939393939393939, 0xc6c6c6c6c6c6c6c6, x1, 16, x2)

aes64dsm_02_inst_58:
    // Test 58:  Test with dataset: sbox64
    // result rd:x28(0xf4a5510000f4a551), rs1:x4(0x3a3a3a3a3a3a3a3a), rs2:x20(0xc5c5c5c5c5c5c5c5)
    TEST_RR_OP(aes64dsm, x28, x4, x20, 0xf4a5510000f4a551, 0x3a3a3a3a3a3a3a3a, 0xc5c5c5c5c5c5c5c5, x1, 24, x2)

aes64dsm_02_inst_59:
    // Test 59:  Test with dataset: sbox64
    // result rd:x29(0x38a1f9606038a1f9), rs1:x3(0x3b3b3b3b3b3b3b3b), rs2:x19(0xc4c4c4c4c4c4c4c4)
    TEST_RR_OP(aes64dsm, x29, x3, x19, 0x38a1f9606038a1f9, 0x3b3b3b3b3b3b3b3b, 0xc4c4c4c4c4c4c4c4, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x4,signature_13_0)


aes64dsm_02_inst_60:
    // Test 60:  Test with dataset: sbox64
    // result rd:x30(0xec50b20e0eec50b2), rs1:x2(0x3c3c3c3c3c3c3c3c), rs2:x18(0xc3c3c3c3c3c3c3c3)
    TEST_RR_OP(aes64dsm, x30, x2, x18, 0xec50b20e0eec50b2, 0x3c3c3c3c3c3c3c3c, 0xc3c3c3c3c3c3c3c3, x4, 0, x5)

aes64dsm_02_inst_61:
    // Test 61:  Test with dataset: sbox64
    // result rd:x31(0x6224410707622441), rs1:x1(0x3d3d3d3d3d3d3d3d), rs2:x17(0xc2c2c2c2c2c2c2c2)
    TEST_RR_OP(aes64dsm, x31, x1, x17, 0x6224410707622441, 0x3d3d3d3d3d3d3d3d, 0xc2c2c2c2c2c2c2c2, x4, 8, x5)

aes64dsm_02_inst_62:
    // Test 62:  Test with dataset: sbox64
    // result rd:x1(0xf5edf9e1e1f5edf9), rs1:x31(0x3e3e3e3e3e3e3e3e), rs2:x16(0xc1c1c1c1c1c1c1c1)
    TEST_RR_OP(aes64dsm, x1, x31, x16, 0xf5edf9e1e1f5edf9, 0x3e3e3e3e3e3e3e3e, 0xc1c1c1c1c1c1c1c1, x4, 16, x5)

aes64dsm_02_inst_63:
    // Test 63:  Test with dataset: sbox64
    // result rd:x2(0x83f7b9cdcd83f7b9), rs1:x30(0x3f3f3f3f3f3f3f3f), rs2:x15(0xc0c0c0c0c0c0c0c0)
    TEST_RR_OP(aes64dsm, x2, x30, x15, 0x83f7b9cdcd83f7b9, 0x3f3f3f3f3f3f3f3f, 0xc0c0c0c0c0c0c0c0, x4, 24, x5)

aes64dsm_02_inst_64:
    // Test 64:  Test with dataset: sbox64
    // result rd:x3(0xcdda4b5c5ccdda4b), rs1:x29(0x4040404040404040), rs2:x14(0xbfbfbfbfbfbfbfbf)
    TEST_RR_OP(aes64dsm, x3, x29, x14, 0xcdda4b5c5ccdda4b, 0x4040404040404040, 0xbfbfbfbfbfbfbfbf, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_14_0)


aes64dsm_02_inst_65:
    // Test 65:  Test with dataset: sbox64
    // result rd:x4(0xbbe4194646bbe419), rs1:x28(0x4141414141414141), rs2:x13(0xbebebebebebebebe)
    TEST_RR_OP(aes64dsm, x4, x28, x13, 0xbbe4194646bbe419, 0x4141414141414141, 0xbebebebebebebebe, x1, 0, x2)

aes64dsm_02_inst_66:
    // Test 66:  Test with dataset: sbox64
    // result rd:x5(0x57216c1a1a57216c), rs1:x27(0x4242424242424242), rs2:x12(0xbdbdbdbdbdbdbdbd)
    TEST_RR_OP(aes64dsm, x5, x27, x12, 0x57216c1a1a57216c, 0x4242424242424242, 0xbdbdbdbdbdbdbdbd, x1, 8, x2)

aes64dsm_02_inst_67:
    // Test 67:  Test with dataset: sbox64
    // result rd:x6(0x30082c141430082c), rs1:x26(0x4343434343434343), rs2:x11(0xbcbcbcbcbcbcbcbc)
    TEST_RR_OP(aes64dsm, x6, x26, x11, 0x30082c141430082c, 0x4343434343434343, 0xbcbcbcbcbcbcbcbc, x1, 16, x2)

aes64dsm_02_inst_68:
    // Test 68:  Test with dataset: sbox64
    // result rd:x7(0xf5058d7d7df5058d), rs1:x25(0x4444444444444444), rs2:x10(0xbbbbbbbbbbbbbbbb)
    TEST_RR_OP(aes64dsm, x7, x25, x10, 0xf5058d7d7df5058d, 0x4444444444444444, 0xbbbbbbbbbbbbbbbb, x1, 24, x2)

aes64dsm_02_inst_69:
    // Test 69:  Test with dataset: sbox64
    // result rd:x8(0x1d56b5fefe1d56b5), rs1:x24(0x4545454545454545), rs2:x9(0xbabababababababa)
    TEST_RR_OP(aes64dsm, x8, x24, x9, 0x1d56b5fefe1d56b5, 0x4545454545454545, 0xbabababababababa, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_15_0)


aes64dsm_02_inst_70:
    // Test 70:  Test with dataset: sbox64
    // result rd:x9(0x4acc098f8f4acc09), rs1:x23(0x4646464646464646), rs2:x8(0xb9b9b9b9b9b9b9b9)
    TEST_RR_OP(aes64dsm, x9, x23, x8, 0x4acc098f8f4acc09, 0x4646464646464646, 0xb9b9b9b9b9b9b9b9, x1, 0, x2)

aes64dsm_02_inst_71:
    // Test 71:  Test with dataset: sbox64
    // result rd:x10(0x9f9c1310109f9c13), rs1:x22(0x4747474747474747), rs2:x7(0xb8b8b8b8b8b8b8b8)
    TEST_RR_OP(aes64dsm, x10, x22, x7, 0x9f9c1310109f9c13, 0x4747474747474747, 0xb8b8b8b8b8b8b8b8, x1, 8, x2)

aes64dsm_02_inst_72:
    // Test 72:  Test with dataset: sbox64
    // result rd:x11(0x2eddda29292eddda), rs1:x21(0x4848484848484848), rs2:x6(0xb7b7b7b7b7b7b7b7)
    TEST_RR_OP(aes64dsm, x11, x21, x6, 0x2eddda29292eddda, 0x4848484848484848, 0xb7b7b7b7b7b7b7b7, x1, 16, x2)

aes64dsm_02_inst_73:
    // Test 73:  Test with dataset: sbox64
    // result rd:x12(0x81205cfdfd81205c), rs1:x20(0x4949494949494949), rs2:x5(0xb6b6b6b6b6b6b6b6)
    TEST_RR_OP(aes64dsm, x12, x20, x5, 0x81205cfdfd81205c, 0x4949494949494949, 0xb6b6b6b6b6b6b6b6, x1, 24, x2)

aes64dsm_02_inst_74:
    // Test 74:  Test with dataset: sbox64
    // result rd:x13(0xdbdc555252dbdc55), rs1:x19(0x4a4a4a4a4a4a4a4a), rs2:x4(0xb5b5b5b5b5b5b5b5)
    TEST_RR_OP(aes64dsm, x13, x19, x4, 0xdbdc555252dbdc55, 0x4a4a4a4a4a4a4a4a, 0xb5b5b5b5b5b5b5b5, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x4,signature_16_0)


aes64dsm_02_inst_75:
    // Test 75:  Test with dataset: sbox64
    // result rd:x14(0xfaeef0e4e4faeef0), rs1:x18(0x4b4b4b4b4b4b4b4b), rs2:x3(0xb4b4b4b4b4b4b4b4)
    TEST_RR_OP(aes64dsm, x14, x18, x3, 0xfaeef0e4e4faeef0, 0x4b4b4b4b4b4b4b4b, 0xb4b4b4b4b4b4b4b4, x4, 0, x5)

aes64dsm_02_inst_76:
    // Test 76:  Test with dataset: sbox64
    // result rd:x15(0x3f132905053f1329), rs1:x17(0x4c4c4c4c4c4c4c4c), rs2:x2(0xb3b3b3b3b3b3b3b3)
    TEST_RR_OP(aes64dsm, x15, x17, x2, 0x3f132905053f1329, 0x4c4c4c4c4c4c4c4c, 0xb3b3b3b3b3b3b3b3, x4, 8, x5)

aes64dsm_02_inst_77:
    // Test 77:  Test with dataset: sbox64
    // result rd:x16(0xff49a41212ff49a4), rs1:x16(0x4d4d4d4d4d4d4d4d), rs2:x1(0xb2b2b2b2b2b2b2b2)
    TEST_RR_OP(aes64dsm, x16, x16, x1, 0xff49a41212ff49a4, 0x4d4d4d4d4d4d4d4d, 0xb2b2b2b2b2b2b2b2, x4, 16, x5)

aes64dsm_02_inst_78:
    // Test 78:  Test with dataset: sbox64
    // result rd:x17(0x20fbc01b1b20fbc0), rs1:x15(0x4e4e4e4e4e4e4e4e), rs2:x31(0xb1b1b1b1b1b1b1b1)
    TEST_RR_OP(aes64dsm, x17, x15, x31, 0x20fbc01b1b20fbc0, 0x4e4e4e4e4e4e4e4e, 0xb1b1b1b1b1b1b1b1, x4, 24, x5)

aes64dsm_02_inst_79:
    // Test 79:  Test with dataset: sbox64
    // result rd:x18(0x835fed3131835fed), rs1:x14(0x4f4f4f4f4f4f4f4f), rs2:x30(0xb0b0b0b0b0b0b0b0)
    TEST_RR_OP(aes64dsm, x18, x14, x30, 0x835fed3131835fed, 0x4f4f4f4f4f4f4f4f, 0xb0b0b0b0b0b0b0b0, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_17_0)


aes64dsm_02_inst_80:
    // Test 80:  Test with dataset: sbox64
    // result rd:x19(0x32dc45abab32dc45), rs1:x13(0x5050505050505050), rs2:x29(0xafafafafafafafaf)
    TEST_RR_OP(aes64dsm, x19, x13, x29, 0x32dc45abab32dc45, 0x5050505050505050, 0xafafafafafafafaf, x1, 0, x2)

aes64dsm_02_inst_81:
    // Test 81:  Test with dataset: sbox64
    // result rd:x20(0x2cabe265652cabe2), rs1:x12(0x5151515151515151), rs2:x28(0xaeaeaeaeaeaeaeae)
    TEST_RR_OP(aes64dsm, x20, x12, x28, 0x2cabe265652cabe2, 0x5151515151515151, 0xaeaeaeaeaeaeaeae, x1, 8, x2)

aes64dsm_02_inst_82:
    // Test 82:  Test with dataset: sbox64
    // result rd:x21(0xe343b31313e343b3), rs1:x11(0x5252525252525252), rs2:x27(0xadadadadadadadad)
    TEST_RR_OP(aes64dsm, x21, x11, x27, 0xe343b31313e343b3, 0x5252525252525252, 0xadadadadadadadad, x1, 16, x2)

aes64dsm_02_inst_83:
    // Test 83:  Test with dataset: sbox64
    // result rd:x22(0x806f7a9595806f7a), rs1:x10(0x5353535353535353), rs2:x26(0xacacacacacacacac)
    TEST_RR_OP(aes64dsm, x22, x10, x26, 0x806f7a9595806f7a, 0x5353535353535353, 0xacacacacacacacac, x1, 24, x2)

aes64dsm_02_inst_84:
    // Test 84:  Test with dataset: sbox64
    // result rd:x23(0x12efe11c1c12efe1), rs1:x9(0x5454545454545454), rs2:x25(0xabababababababab)
    TEST_RR_OP(aes64dsm, x23, x9, x25, 0x12efe11c1c12efe1, 0x5454545454545454, 0xabababababababab, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_18_0)


aes64dsm_02_inst_85:
    // Test 85:  Test with dataset: sbox64
    // result rd:x24(0x6d68e2e7e76d68e2), rs1:x8(0x5555555555555555), rs2:x24(0xaaaaaaaaaaaaaaaa)
    TEST_RR_OP(aes64dsm, x24, x8, x24, 0x6d68e2e7e76d68e2, 0x5555555555555555, 0xaaaaaaaaaaaaaaaa, x1, 0, x2)

aes64dsm_02_inst_86:
    // Test 86:  Test with dataset: sbox64
    // result rd:x25(0x938f9d8181938f9d), rs1:x7(0x5656565656565656), rs2:x23(0xa9a9a9a9a9a9a9a9)
    TEST_RR_OP(aes64dsm, x25, x7, x23, 0x938f9d8181938f9d, 0x5656565656565656, 0xa9a9a9a9a9a9a9a9, x1, 8, x2)

aes64dsm_02_inst_87:
    // Test 87:  Test with dataset: sbox64
    // result rd:x26(0xfc8d493838fc8d49), rs1:x6(0x5757575757575757), rs2:x22(0xa8a8a8a8a8a8a8a8)
    TEST_RR_OP(aes64dsm, x26, x6, x22, 0xfc8d493838fc8d49, 0x5757575757575757, 0xa8a8a8a8a8a8a8a8, x1, 16, x2)

aes64dsm_02_inst_88:
    // Test 88:  Test with dataset: sbox64
    // result rd:x27(0x4df89a2f2f4df89a), rs1:x5(0x5858585858585858), rs2:x21(0xa7a7a7a7a7a7a7a7)
    TEST_RR_OP(aes64dsm, x27, x5, x21, 0x4df89a2f2f4df89a, 0x5858585858585858, 0xa7a7a7a7a7a7a7a7, x1, 24, x2)

aes64dsm_02_inst_89:
    // Test 89:  Test with dataset: sbox64
    // result rd:x28(0x13a8c3787813a8c3), rs1:x4(0x5959595959595959), rs2:x20(0xa6a6a6a6a6a6a6a6)
    TEST_RR_OP(aes64dsm, x28, x4, x20, 0x13a8c3787813a8c3, 0x5959595959595959, 0xa6a6a6a6a6a6a6a6, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x4,signature_19_0)


aes64dsm_02_inst_90:
    // Test 90:  Test with dataset: sbox64
    // result rd:x29(0x508e3fe1e1508e3f), rs1:x3(0x5a5a5a5a5a5a5a5a), rs2:x19(0xa5a5a5a5a5a5a5a5)
    TEST_RR_OP(aes64dsm, x29, x3, x19, 0x508e3fe1e1508e3f, 0x5a5a5a5a5a5a5a5a, 0xa5a5a5a5a5a5a5a5, x4, 0, x5)

aes64dsm_02_inst_91:
    // Test 91:  Test with dataset: sbox64
    // result rd:x30(0xba2ef06464ba2ef0), rs1:x2(0x5b5b5b5b5b5b5b5b), rs2:x18(0xa4a4a4a4a4a4a4a4)
    TEST_RR_OP(aes64dsm, x30, x2, x18, 0xba2ef06464ba2ef0, 0x5b5b5b5b5b5b5b5b, 0xa4a4a4a4a4a4a4a4, x4, 8, x5)

aes64dsm_02_inst_92:
    // Test 92:  Test with dataset: sbox64
    // result rd:x31(0xb30465d2d2b30465), rs1:x1(0x5c5c5c5c5c5c5c5c), rs2:x17(0xa3a3a3a3a3a3a3a3)
    TEST_RR_OP(aes64dsm, x31, x1, x17, 0xb30465d2d2b30465, 0x5c5c5c5c5c5c5c5c, 0xa3a3a3a3a3a3a3a3, x4, 16, x5)

aes64dsm_02_inst_93:
    // Test 93:  Test with dataset: sbox64
    // result rd:x1(0x4570d2e7e74570d2), rs1:x31(0x5d5d5d5d5d5d5d5d), rs2:x16(0xa2a2a2a2a2a2a2a2)
    TEST_RR_OP(aes64dsm, x1, x31, x16, 0x4570d2e7e74570d2, 0x5d5d5d5d5d5d5d5d, 0xa2a2a2a2a2a2a2a2, x4, 24, x5)

aes64dsm_02_inst_94:
    // Test 94:  Test with dataset: sbox64
    // result rd:x2(0x825aee3636825aee), rs1:x30(0x5e5e5e5e5e5e5e5e), rs2:x15(0xa1a1a1a1a1a1a1a1)
    TEST_RR_OP(aes64dsm, x2, x30, x15, 0x825aee3636825aee, 0x5e5e5e5e5e5e5e5e, 0xa1a1a1a1a1a1a1a1, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_20_0)


aes64dsm_02_inst_95:
    // Test 95:  Test with dataset: sbox64
    // result rd:x3(0xfb6638a5a5fb6638), rs1:x29(0x5f5f5f5f5f5f5f5f), rs2:x14(0xa0a0a0a0a0a0a0a0)
    TEST_RR_OP(aes64dsm, x3, x29, x14, 0xfb6638a5a5fb6638, 0x5f5f5f5f5f5f5f5f, 0xa0a0a0a0a0a0a0a0, x1, 0, x2)

aes64dsm_02_inst_96:
    // Test 96:  Test with dataset: sbox64
    // result rd:x4(0x5cbba245455cbba2), rs1:x28(0x6060606060606060), rs2:x13(0x9f9f9f9f9f9f9f9f)
    TEST_RR_OP(aes64dsm, x4, x28, x13, 0x5cbba245455cbba2, 0x6060606060606060, 0x9f9f9f9f9f9f9f9f, x1, 8, x2)

aes64dsm_02_inst_97:
    // Test 97:  Test with dataset: sbox64
    // result rd:x5(0xcdc3cac4c4cdc3ca), rs1:x27(0x6161616161616161), rs2:x12(0x9e9e9e9e9e9e9e9e)
    TEST_RR_OP(aes64dsm, x5, x27, x12, 0xcdc3cac4c4cdc3ca, 0x6161616161616161, 0x9e9e9e9e9e9e9e9e, x1, 16, x2)

aes64dsm_02_inst_98:
    // Test 98:  Test with dataset: sbox64
    // result rd:x6(0x872059fefe872059), rs1:x26(0x6262626262626262), rs2:x11(0x9d9d9d9d9d9d9d9d)
    TEST_RR_OP(aes64dsm, x6, x26, x11, 0x872059fefe872059, 0x6262626262626262, 0x9d9d9d9d9d9d9d9d, x1, 24, x2)

aes64dsm_02_inst_99:
    // Test 99:  Test with dataset: sbox64
    // result rd:x7(0x546c487070546c48), rs1:x25(0x6363636363636363), rs2:x10(0x9c9c9c9c9c9c9c9c)
    TEST_RR_OP(aes64dsm, x7, x25, x10, 0x546c487070546c48, 0x6363636363636363, 0x9c9c9c9c9c9c9c9c, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_21_0)


aes64dsm_02_inst_100:
    // Test 100:  Test with dataset: sbox64
    // result rd:x8(0xab63cf0707ab63cf), rs1:x24(0x6464646464646464), rs2:x9(0x9b9b9b9b9b9b9b9b)
    TEST_RR_OP(aes64dsm, x8, x24, x9, 0xab63cf0707ab63cf, 0x6464646464646464, 0x9b9b9b9b9b9b9b9b, x1, 0, x2)

aes64dsm_02_inst_101:
    // Test 101:  Test with dataset: sbox64
    // result rd:x9(0x202daba6a6202dab), rs1:x23(0x6565656565656565), rs2:x8(0x9a9a9a9a9a9a9a9a)
    TEST_RR_OP(aes64dsm, x9, x23, x8, 0x202daba6a6202dab, 0x6565656565656565, 0x9a9a9a9a9a9a9a9a, x1, 8, x2)

aes64dsm_02_inst_102:
    // Test 102:  Test with dataset: sbox64
    // result rd:x10(0x05512f7b7b05512f), rs1:x22(0x6666666666666666), rs2:x7(0x9999999999999999)
    TEST_RR_OP(aes64dsm, x10, x22, x7, 0x05512f7b7b05512f, 0x6666666666666666, 0x9999999999999999, x1, 16, x2)

aes64dsm_02_inst_103:
    // Test 103:  Test with dataset: sbox64
    // result rd:x11(0xa46f4c8787a46f4c), rs1:x21(0x6767676767676767), rs2:x6(0x9898989898989898)
    TEST_RR_OP(aes64dsm, x11, x21, x6, 0xa46f4c8787a46f4c, 0x6767676767676767, 0x9898989898989898, x1, 24, x2)

aes64dsm_02_inst_104:
    // Test 104:  Test with dataset: sbox64
    // result rd:x12(0xb256c02424b256c0), rs1:x20(0x6868686868686868), rs2:x5(0x9797979797979797)
    TEST_RR_OP(aes64dsm, x12, x20, x5, 0xb256c02424b256c0, 0x6868686868686868, 0x9797979797979797, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x5,signature_22_0)


aes64dsm_02_inst_105:
    // Test 105:  Test with dataset: sbox64
    // result rd:x13(0xe55c348d8de55c34), rs1:x19(0x6969696969696969), rs2:x4(0x9696969696969696)
    TEST_RR_OP(aes64dsm, x13, x19, x4, 0xe55c348d8de55c34, 0x6969696969696969, 0x9696969696969696, x5, 0, x6)

aes64dsm_02_inst_106:
    // Test 106:  Test with dataset: sbox64
    // result rd:x14(0xa55450a1a1a55450), rs1:x18(0x6a6a6a6a6a6a6a6a), rs2:x3(0x9595959595959595)
    TEST_RR_OP(aes64dsm, x14, x18, x3, 0xa55450a1a1a55450, 0x6a6a6a6a6a6a6a6a, 0x9595959595959595, x5, 8, x6)

aes64dsm_02_inst_107:
    // Test 107:  Test with dataset: sbox64
    // result rd:x15(0x9d427fa0a09d427f), rs1:x17(0x6b6b6b6b6b6b6b6b), rs2:x2(0x9494949494949494)
    TEST_RR_OP(aes64dsm, x15, x17, x2, 0x9d427fa0a09d427f, 0x6b6b6b6b6b6b6b6b, 0x9494949494949494, x5, 16, x6)

aes64dsm_02_inst_108:
    // Test 108:  Test with dataset: sbox64
    // result rd:x16(0x537cc9e6e6537cc9), rs1:x16(0x6c6c6c6c6c6c6c6c), rs2:x1(0x9393939393939393)
    TEST_RR_OP(aes64dsm, x16, x16, x1, 0x537cc9e6e6537cc9, 0x6c6c6c6c6c6c6c6c, 0x9393939393939393, x5, 24, x6)

aes64dsm_02_inst_109:
    // Test 109:  Test with dataset: sbox64
    // result rd:x17(0xd045178282d04517), rs1:x15(0x6d6d6d6d6d6d6d6d), rs2:x31(0x9292929292929292)
    TEST_RR_OP(aes64dsm, x17, x15, x31, 0xd045178282d04517, 0x6d6d6d6d6d6d6d6d, 0x9292929292929292, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_23_0)


aes64dsm_02_inst_110:
    // Test 110:  Test with dataset: sbox64
    // result rd:x18(0xec2505ccccec2505), rs1:x14(0x6e6e6e6e6e6e6e6e), rs2:x30(0x9191919191919191)
    TEST_RR_OP(aes64dsm, x18, x14, x30, 0xec2505ccccec2505, 0x6e6e6e6e6e6e6e6e, 0x9191919191919191, x1, 0, x2)

aes64dsm_02_inst_111:
    // Test 111:  Test with dataset: sbox64
    // result rd:x19(0xdbe04b7070dbe04b), rs1:x13(0x6f6f6f6f6f6f6f6f), rs2:x29(0x9090909090909090)
    TEST_RR_OP(aes64dsm, x19, x13, x29, 0xdbe04b7070dbe04b, 0x6f6f6f6f6f6f6f6f, 0x9090909090909090, x1, 8, x2)

aes64dsm_02_inst_112:
    // Test 112:  Test with dataset: sbox64
    // result rd:x20(0x94c9376a6a94c937), rs1:x12(0x7070707070707070), rs2:x28(0x8f8f8f8f8f8f8f8f)
    TEST_RR_OP(aes64dsm, x20, x12, x28, 0x94c9376a6a94c937, 0x7070707070707070, 0x8f8f8f8f8f8f8f8f, x1, 16, x2)

aes64dsm_02_inst_113:
    // Test 113:  Test with dataset: sbox64
    // result rd:x21(0x6ce3a629296ce3a6), rs1:x11(0x7171717171717171), rs2:x27(0x8e8e8e8e8e8e8e8e)
    TEST_RR_OP(aes64dsm, x21, x11, x27, 0x6ce3a629296ce3a6, 0x7171717171717171, 0x8e8e8e8e8e8e8e8e, x1, 24, x2)

aes64dsm_02_inst_114:
    // Test 114:  Test with dataset: sbox64
    // result rd:x22(0x652acf8080652acf), rs1:x10(0x7272727272727272), rs2:x26(0x8d8d8d8d8d8d8d8d)
    TEST_RR_OP(aes64dsm, x22, x10, x26, 0x652acf8080652acf, 0x7272727272727272, 0x8d8d8d8d8d8d8d8d, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_24_0)


aes64dsm_02_inst_115:
    // Test 115:  Test with dataset: sbox64
    // result rd:x23(0xe917966868e91796), rs1:x9(0x7373737373737373), rs2:x25(0x8c8c8c8c8c8c8c8c)
    TEST_RR_OP(aes64dsm, x23, x9, x25, 0xe917966868e91796, 0x7373737373737373, 0x8c8c8c8c8c8c8c8c, x1, 0, x2)

aes64dsm_02_inst_116:
    // Test 116:  Test with dataset: sbox64
    // result rd:x24(0xd6ded2dadad6ded2), rs1:x8(0x7474747474747474), rs2:x24(0x8b8b8b8b8b8b8b8b)
    TEST_RR_OP(aes64dsm, x24, x8, x24, 0xd6ded2dadad6ded2, 0x7474747474747474, 0x8b8b8b8b8b8b8b8b, x1, 8, x2)

aes64dsm_02_inst_117:
    // Test 117:  Test with dataset: sbox64
    // result rd:x25(0xd92229d2d2d92229), rs1:x7(0x7575757575757575), rs2:x23(0x8a8a8a8a8a8a8a8a)
    TEST_RR_OP(aes64dsm, x25, x7, x23, 0xd92229d2d2d92229, 0x7575757575757575, 0x8a8a8a8a8a8a8a8a, x1, 16, x2)

aes64dsm_02_inst_118:
    // Test 118:  Test with dataset: sbox64
    // result rd:x26(0xca2b37d6d6ca2b37), rs1:x6(0x7676767676767676), rs2:x22(0x8989898989898989)
    TEST_RR_OP(aes64dsm, x26, x6, x22, 0xca2b37d6d6ca2b37, 0x7676767676767676, 0x8989898989898989, x1, 24, x2)

aes64dsm_02_inst_119:
    // Test 119:  Test with dataset: sbox64
    // result rd:x27(0xc4f5516060c4f551), rs1:x5(0x7777777777777777), rs2:x21(0x8888888888888888)
    TEST_RR_OP(aes64dsm, x27, x5, x21, 0xc4f5516060c4f551, 0x7777777777777777, 0x8888888888888888, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x5,signature_25_0)


aes64dsm_02_inst_120:
    // Test 120:  Test with dataset: sbox64
    // result rd:x28(0x10463b6d6d10463b), rs1:x4(0x7878787878787878), rs2:x20(0x8787878787878787)
    TEST_RR_OP(aes64dsm, x28, x4, x20, 0x10463b6d6d10463b, 0x7878787878787878, 0x8787878787878787, x5, 0, x6)

aes64dsm_02_inst_121:
    // Test 121:  Test with dataset: sbox64
    // result rd:x29(0xed0b9e7878ed0b9e), rs1:x3(0x7979797979797979), rs2:x19(0x8686868686868686)
    TEST_RR_OP(aes64dsm, x29, x3, x19, 0xed0b9e7878ed0b9e, 0x7979797979797979, 0x8686868686868686, x5, 8, x6)

aes64dsm_02_inst_122:
    // Test 122:  Test with dataset: sbox64
    // result rd:x30(0x8d2257f8f88d2257), rs1:x2(0x7a7a7a7a7a7a7a7a), rs2:x18(0x8585858585858585)
    TEST_RR_OP(aes64dsm, x30, x2, x18, 0x8d2257f8f88d2257, 0x7a7a7a7a7a7a7a7a, 0x8585858585858585, x5, 16, x6)

aes64dsm_02_inst_123:
    // Test 123:  Test with dataset: sbox64
    // result rd:x31(0xfc64b02828fc64b0), rs1:x1(0x7b7b7b7b7b7b7b7b), rs2:x17(0x8484848484848484)
    TEST_RR_OP(aes64dsm, x31, x1, x17, 0xfc64b02828fc64b0, 0x7b7b7b7b7b7b7b7b, 0x8484848484848484, x5, 24, x6)

aes64dsm_02_inst_124:
    // Test 124:  Test with dataset: sbox64
    // result rd:x1(0xda5a9a1a1ada5a9a), rs1:x31(0x7c7c7c7c7c7c7c7c), rs2:x16(0x8383838383838383)
    TEST_RR_OP(aes64dsm, x1, x31, x16, 0xda5a9a1a1ada5a9a, 0x7c7c7c7c7c7c7c7c, 0x8383838383838383, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_26_0)


aes64dsm_02_inst_125:
    // Test 125:  Test with dataset: sbox64
    // result rd:x2(0x1d191f1b1b1d191f), rs1:x30(0x7d7d7d7d7d7d7d7d), rs2:x15(0x8282828282828282)
    TEST_RR_OP(aes64dsm, x2, x30, x15, 0x1d191f1b1b1d191f, 0x7d7d7d7d7d7d7d7d, 0x8282828282828282, x1, 0, x7)

aes64dsm_02_inst_126:
    // Test 126:  Test with dataset: sbox64
    // result rd:x3(0xcbfdd0e6e6cbfdd0), rs1:x29(0x7e7e7e7e7e7e7e7e), rs2:x14(0x8181818181818181)
    TEST_RR_OP(aes64dsm, x3, x29, x14, 0xcbfdd0e6e6cbfdd0, 0x7e7e7e7e7e7e7e7e, 0x8181818181818181, x1, 8, x7)

aes64dsm_02_inst_127:
    // Test 127:  Test with dataset: sbox64
    // result rd:x4(0xc765963434c76596), rs1:x28(0x7f7f7f7f7f7f7f7f), rs2:x13(0x8080808080808080)
    TEST_RR_OP(aes64dsm, x4, x28, x13, 0xc765963434c76596, 0x7f7f7f7f7f7f7f7f, 0x8080808080808080, x1, 16, x7)

aes64dsm_02_inst_128:
    // Test 128:  Test with dataset: sbox64
    // result rd:x5(0x9634c765659634c7), rs1:x27(0x8080808080808080), rs2:x12(0x7f7f7f7f7f7f7f7f)
    TEST_RR_OP(aes64dsm, x5, x27, x12, 0x9634c765659634c7, 0x8080808080808080, 0x7f7f7f7f7f7f7f7f, x1, 24, x7)

aes64dsm_02_inst_129:
    // Test 129:  Test with dataset: sbox64
    // result rd:x6(0xd0e6cbfdfdd0e6cb), rs1:x26(0x8181818181818181), rs2:x11(0x7e7e7e7e7e7e7e7e)
    TEST_RR_OP(aes64dsm, x6, x26, x11, 0xd0e6cbfdfdd0e6cb, 0x8181818181818181, 0x7e7e7e7e7e7e7e7e, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_27_0)


aes64dsm_02_inst_130:
    // Test 130:  Test with dataset: sbox64
    // result rd:x7(0x1f1b1d19191f1b1d), rs1:x25(0x8282828282828282), rs2:x10(0x7d7d7d7d7d7d7d7d)
    TEST_RR_OP(aes64dsm, x7, x25, x10, 0x1f1b1d19191f1b1d, 0x8282828282828282, 0x7d7d7d7d7d7d7d7d, x1, 0, x2)

aes64dsm_02_inst_131:
    // Test 131:  Test with dataset: sbox64
    // result rd:x8(0x9a1ada5a5a9a1ada), rs1:x24(0x8383838383838383), rs2:x9(0x7c7c7c7c7c7c7c7c)
    TEST_RR_OP(aes64dsm, x8, x24, x9, 0x9a1ada5a5a9a1ada, 0x8383838383838383, 0x7c7c7c7c7c7c7c7c, x1, 8, x2)

aes64dsm_02_inst_132:
    // Test 132:  Test with dataset: sbox64
    // result rd:x9(0xb028fc6464b028fc), rs1:x23(0x8484848484848484), rs2:x8(0x7b7b7b7b7b7b7b7b)
    TEST_RR_OP(aes64dsm, x9, x23, x8, 0xb028fc6464b028fc, 0x8484848484848484, 0x7b7b7b7b7b7b7b7b, x1, 16, x2)

aes64dsm_02_inst_133:
    // Test 133:  Test with dataset: sbox64
    // result rd:x10(0x57f88d222257f88d), rs1:x22(0x8585858585858585), rs2:x7(0x7a7a7a7a7a7a7a7a)
    TEST_RR_OP(aes64dsm, x10, x22, x7, 0x57f88d222257f88d, 0x8585858585858585, 0x7a7a7a7a7a7a7a7a, x1, 24, x2)

aes64dsm_02_inst_134:
    // Test 134:  Test with dataset: sbox64
    // result rd:x11(0x9e78ed0b0b9e78ed), rs1:x21(0x8686868686868686), rs2:x6(0x7979797979797979)
    TEST_RR_OP(aes64dsm, x11, x21, x6, 0x9e78ed0b0b9e78ed, 0x8686868686868686, 0x7979797979797979, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x6,signature_28_0)


aes64dsm_02_inst_135:
    // Test 135:  Test with dataset: sbox64
    // result rd:x12(0x3b6d1046463b6d10), rs1:x20(0x8787878787878787), rs2:x5(0x7878787878787878)
    TEST_RR_OP(aes64dsm, x12, x20, x5, 0x3b6d1046463b6d10, 0x8787878787878787, 0x7878787878787878, x6, 0, x7)

aes64dsm_02_inst_136:
    // Test 136:  Test with dataset: sbox64
    // result rd:x13(0x5160c4f5f55160c4), rs1:x19(0x8888888888888888), rs2:x4(0x7777777777777777)
    TEST_RR_OP(aes64dsm, x13, x19, x4, 0x5160c4f5f55160c4, 0x8888888888888888, 0x7777777777777777, x6, 8, x7)

aes64dsm_02_inst_137:
    // Test 137:  Test with dataset: sbox64
    // result rd:x14(0x37d6ca2b2b37d6ca), rs1:x18(0x8989898989898989), rs2:x3(0x7676767676767676)
    TEST_RR_OP(aes64dsm, x14, x18, x3, 0x37d6ca2b2b37d6ca, 0x8989898989898989, 0x7676767676767676, x6, 16, x7)

aes64dsm_02_inst_138:
    // Test 138:  Test with dataset: sbox64
    // result rd:x15(0x29d2d9222229d2d9), rs1:x17(0x8a8a8a8a8a8a8a8a), rs2:x2(0x7575757575757575)
    TEST_RR_OP(aes64dsm, x15, x17, x2, 0x29d2d9222229d2d9, 0x8a8a8a8a8a8a8a8a, 0x7575757575757575, x6, 24, x7)

aes64dsm_02_inst_139:
    // Test 139:  Test with dataset: sbox64
    // result rd:x16(0xd2dad6deded2dad6), rs1:x16(0x8b8b8b8b8b8b8b8b), rs2:x1(0x7474747474747474)
    TEST_RR_OP(aes64dsm, x16, x16, x1, 0xd2dad6deded2dad6, 0x8b8b8b8b8b8b8b8b, 0x7474747474747474, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_29_0)


aes64dsm_02_inst_140:
    // Test 140:  Test with dataset: sbox64
    // result rd:x17(0x9668e917179668e9), rs1:x15(0x8c8c8c8c8c8c8c8c), rs2:x31(0x7373737373737373)
    TEST_RR_OP(aes64dsm, x17, x15, x31, 0x9668e917179668e9, 0x8c8c8c8c8c8c8c8c, 0x7373737373737373, x1, 0, x2)

aes64dsm_02_inst_141:
    // Test 141:  Test with dataset: sbox64
    // result rd:x18(0xcf80652a2acf8065), rs1:x14(0x8d8d8d8d8d8d8d8d), rs2:x30(0x7272727272727272)
    TEST_RR_OP(aes64dsm, x18, x14, x30, 0xcf80652a2acf8065, 0x8d8d8d8d8d8d8d8d, 0x7272727272727272, x1, 8, x2)

aes64dsm_02_inst_142:
    // Test 142:  Test with dataset: sbox64
    // result rd:x19(0xa6296ce3e3a6296c), rs1:x13(0x8e8e8e8e8e8e8e8e), rs2:x29(0x7171717171717171)
    TEST_RR_OP(aes64dsm, x19, x13, x29, 0xa6296ce3e3a6296c, 0x8e8e8e8e8e8e8e8e, 0x7171717171717171, x1, 16, x2)

aes64dsm_02_inst_143:
    // Test 143:  Test with dataset: sbox64
    // result rd:x20(0x376a94c9c9376a94), rs1:x12(0x8f8f8f8f8f8f8f8f), rs2:x28(0x7070707070707070)
    TEST_RR_OP(aes64dsm, x20, x12, x28, 0x376a94c9c9376a94, 0x8f8f8f8f8f8f8f8f, 0x7070707070707070, x1, 24, x2)

aes64dsm_02_inst_144:
    // Test 144:  Test with dataset: sbox64
    // result rd:x21(0x4b70dbe0e04b70db), rs1:x11(0x9090909090909090), rs2:x27(0x6f6f6f6f6f6f6f6f)
    TEST_RR_OP(aes64dsm, x21, x11, x27, 0x4b70dbe0e04b70db, 0x9090909090909090, 0x6f6f6f6f6f6f6f6f, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_30_0)


aes64dsm_02_inst_145:
    // Test 145:  Test with dataset: sbox64
    // result rd:x22(0x05ccec252505ccec), rs1:x10(0x9191919191919191), rs2:x26(0x6e6e6e6e6e6e6e6e)
    TEST_RR_OP(aes64dsm, x22, x10, x26, 0x05ccec252505ccec, 0x9191919191919191, 0x6e6e6e6e6e6e6e6e, x1, 0, x2)

aes64dsm_02_inst_146:
    // Test 146:  Test with dataset: sbox64
    // result rd:x23(0x1782d045451782d0), rs1:x9(0x9292929292929292), rs2:x25(0x6d6d6d6d6d6d6d6d)
    TEST_RR_OP(aes64dsm, x23, x9, x25, 0x1782d045451782d0, 0x9292929292929292, 0x6d6d6d6d6d6d6d6d, x1, 8, x2)

aes64dsm_02_inst_147:
    // Test 147:  Test with dataset: sbox64
    // result rd:x24(0xc9e6537c7cc9e653), rs1:x8(0x9393939393939393), rs2:x24(0x6c6c6c6c6c6c6c6c)
    TEST_RR_OP(aes64dsm, x24, x8, x24, 0xc9e6537c7cc9e653, 0x9393939393939393, 0x6c6c6c6c6c6c6c6c, x1, 16, x2)

aes64dsm_02_inst_148:
    // Test 148:  Test with dataset: sbox64
    // result rd:x25(0x7fa09d42427fa09d), rs1:x7(0x9494949494949494), rs2:x23(0x6b6b6b6b6b6b6b6b)
    TEST_RR_OP(aes64dsm, x25, x7, x23, 0x7fa09d42427fa09d, 0x9494949494949494, 0x6b6b6b6b6b6b6b6b, x1, 24, x2)

aes64dsm_02_inst_149:
    // Test 149:  Test with dataset: sbox64
    // result rd:x26(0x50a1a5545450a1a5), rs1:x6(0x9595959595959595), rs2:x22(0x6a6a6a6a6a6a6a6a)
    TEST_RR_OP(aes64dsm, x26, x6, x22, 0x50a1a5545450a1a5, 0x9595959595959595, 0x6a6a6a6a6a6a6a6a, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x6,signature_31_0)


aes64dsm_02_inst_150:
    // Test 150:  Test with dataset: sbox64
    // result rd:x27(0x348de55c5c348de5), rs1:x5(0x9696969696969696), rs2:x21(0x6969696969696969)
    TEST_RR_OP(aes64dsm, x27, x5, x21, 0x348de55c5c348de5, 0x9696969696969696, 0x6969696969696969, x6, 0, x7)

aes64dsm_02_inst_151:
    // Test 151:  Test with dataset: sbox64
    // result rd:x28(0xc024b25656c024b2), rs1:x4(0x9797979797979797), rs2:x20(0x6868686868686868)
    TEST_RR_OP(aes64dsm, x28, x4, x20, 0xc024b25656c024b2, 0x9797979797979797, 0x6868686868686868, x6, 8, x7)

aes64dsm_02_inst_152:
    // Test 152:  Test with dataset: sbox64
    // result rd:x29(0x4c87a46f6f4c87a4), rs1:x3(0x9898989898989898), rs2:x19(0x6767676767676767)
    TEST_RR_OP(aes64dsm, x29, x3, x19, 0x4c87a46f6f4c87a4, 0x9898989898989898, 0x6767676767676767, x6, 16, x7)

aes64dsm_02_inst_153:
    // Test 153:  Test with dataset: sbox64
    // result rd:x30(0x2f7b0551512f7b05), rs1:x2(0x9999999999999999), rs2:x18(0x6666666666666666)
    TEST_RR_OP(aes64dsm, x30, x2, x18, 0x2f7b0551512f7b05, 0x9999999999999999, 0x6666666666666666, x6, 24, x7)

aes64dsm_02_inst_154:
    // Test 154:  Test with dataset: sbox64
    // result rd:x31(0xaba6202d2daba620), rs1:x1(0x9a9a9a9a9a9a9a9a), rs2:x17(0x6565656565656565)
    TEST_RR_OP(aes64dsm, x31, x1, x17, 0xaba6202d2daba620, 0x9a9a9a9a9a9a9a9a, 0x6565656565656565, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x6,signature_32_0)


aes64dsm_02_inst_155:
    // Test 155:  Test with dataset: sbox64
    // result rd:x1(0xcf07ab6363cf07ab), rs1:x31(0x9b9b9b9b9b9b9b9b), rs2:x16(0x6464646464646464)
    TEST_RR_OP(aes64dsm, x1, x31, x16, 0xcf07ab6363cf07ab, 0x9b9b9b9b9b9b9b9b, 0x6464646464646464, x6, 0, x7)

aes64dsm_02_inst_156:
    // Test 156:  Test with dataset: sbox64
    // result rd:x2(0x4870546c6c487054), rs1:x30(0x9c9c9c9c9c9c9c9c), rs2:x15(0x6363636363636363)
    TEST_RR_OP(aes64dsm, x2, x30, x15, 0x4870546c6c487054, 0x9c9c9c9c9c9c9c9c, 0x6363636363636363, x6, 8, x7)

aes64dsm_02_inst_157:
    // Test 157:  Test with dataset: sbox64
    // result rd:x3(0x59fe87202059fe87), rs1:x29(0x9d9d9d9d9d9d9d9d), rs2:x14(0x6262626262626262)
    TEST_RR_OP(aes64dsm, x3, x29, x14, 0x59fe87202059fe87, 0x9d9d9d9d9d9d9d9d, 0x6262626262626262, x6, 16, x7)

aes64dsm_02_inst_158:
    // Test 158:  Test with dataset: sbox64
    // result rd:x4(0xcac4cdc3c3cac4cd), rs1:x28(0x9e9e9e9e9e9e9e9e), rs2:x13(0x6161616161616161)
    TEST_RR_OP(aes64dsm, x4, x28, x13, 0xcac4cdc3c3cac4cd, 0x9e9e9e9e9e9e9e9e, 0x6161616161616161, x6, 24, x7)

aes64dsm_02_inst_159:
    // Test 159:  Test with dataset: sbox64
    // result rd:x5(0xa2455cbbbba2455c), rs1:x27(0x9f9f9f9f9f9f9f9f), rs2:x12(0x6060606060606060)
    TEST_RR_OP(aes64dsm, x5, x27, x12, 0xa2455cbbbba2455c, 0x9f9f9f9f9f9f9f9f, 0x6060606060606060, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_33_0)


aes64dsm_02_inst_160:
    // Test 160:  Test with dataset: sbox64
    // result rd:x6(0x38a5fb666638a5fb), rs1:x26(0xa0a0a0a0a0a0a0a0), rs2:x11(0x5f5f5f5f5f5f5f5f)
    TEST_RR_OP(aes64dsm, x6, x26, x11, 0x38a5fb666638a5fb, 0xa0a0a0a0a0a0a0a0, 0x5f5f5f5f5f5f5f5f, x1, 0, x2)

aes64dsm_02_inst_161:
    // Test 161:  Test with dataset: sbox64
    // result rd:x7(0xee36825a5aee3682), rs1:x25(0xa1a1a1a1a1a1a1a1), rs2:x10(0x5e5e5e5e5e5e5e5e)
    TEST_RR_OP(aes64dsm, x7, x25, x10, 0xee36825a5aee3682, 0xa1a1a1a1a1a1a1a1, 0x5e5e5e5e5e5e5e5e, x1, 8, x2)

aes64dsm_02_inst_162:
    // Test 162:  Test with dataset: sbox64
    // result rd:x8(0xd2e7457070d2e745), rs1:x24(0xa2a2a2a2a2a2a2a2), rs2:x9(0x5d5d5d5d5d5d5d5d)
    TEST_RR_OP(aes64dsm, x8, x24, x9, 0xd2e7457070d2e745, 0xa2a2a2a2a2a2a2a2, 0x5d5d5d5d5d5d5d5d, x1, 16, x2)

aes64dsm_02_inst_163:
    // Test 163:  Test with dataset: sbox64
    // result rd:x9(0x65d2b3040465d2b3), rs1:x23(0xa3a3a3a3a3a3a3a3), rs2:x8(0x5c5c5c5c5c5c5c5c)
    TEST_RR_OP(aes64dsm, x9, x23, x8, 0x65d2b3040465d2b3, 0xa3a3a3a3a3a3a3a3, 0x5c5c5c5c5c5c5c5c, x1, 24, x2)

aes64dsm_02_inst_164:
    // Test 164:  Test with dataset: sbox64
    // result rd:x10(0xf064ba2e2ef064ba), rs1:x22(0xa4a4a4a4a4a4a4a4), rs2:x7(0x5b5b5b5b5b5b5b5b)
    TEST_RR_OP(aes64dsm, x10, x22, x7, 0xf064ba2e2ef064ba, 0xa4a4a4a4a4a4a4a4, 0x5b5b5b5b5b5b5b5b, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_34_0)


aes64dsm_02_inst_165:
    // Test 165:  Test with dataset: sbox64
    // result rd:x11(0x3fe1508e8e3fe150), rs1:x21(0xa5a5a5a5a5a5a5a5), rs2:x6(0x5a5a5a5a5a5a5a5a)
    TEST_RR_OP(aes64dsm, x11, x21, x6, 0x3fe1508e8e3fe150, 0xa5a5a5a5a5a5a5a5, 0x5a5a5a5a5a5a5a5a, x1, 0, x7)

aes64dsm_02_inst_166:
    // Test 166:  Test with dataset: sbox64
    // result rd:x12(0xc37813a8a8c37813), rs1:x20(0xa6a6a6a6a6a6a6a6), rs2:x5(0x5959595959595959)
    TEST_RR_OP(aes64dsm, x12, x20, x5, 0xc37813a8a8c37813, 0xa6a6a6a6a6a6a6a6, 0x5959595959595959, x1, 8, x7)

aes64dsm_02_inst_167:
    // Test 167:  Test with dataset: sbox64
    // result rd:x13(0x9a2f4df8f89a2f4d), rs1:x19(0xa7a7a7a7a7a7a7a7), rs2:x4(0x5858585858585858)
    TEST_RR_OP(aes64dsm, x13, x19, x4, 0x9a2f4df8f89a2f4d, 0xa7a7a7a7a7a7a7a7, 0x5858585858585858, x1, 16, x7)

aes64dsm_02_inst_168:
    // Test 168:  Test with dataset: sbox64
    // result rd:x14(0x4938fc8d8d4938fc), rs1:x18(0xa8a8a8a8a8a8a8a8), rs2:x3(0x5757575757575757)
    TEST_RR_OP(aes64dsm, x14, x18, x3, 0x4938fc8d8d4938fc, 0xa8a8a8a8a8a8a8a8, 0x5757575757575757, x1, 24, x7)

aes64dsm_02_inst_169:
    // Test 169:  Test with dataset: sbox64
    // result rd:x15(0x9d81938f8f9d8193), rs1:x17(0xa9a9a9a9a9a9a9a9), rs2:x2(0x5656565656565656)
    TEST_RR_OP(aes64dsm, x15, x17, x2, 0x9d81938f8f9d8193, 0xa9a9a9a9a9a9a9a9, 0x5656565656565656, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x2,signature_35_0)


aes64dsm_02_inst_170:
    // Test 170:  Test with dataset: sbox64
    // result rd:x16(0xe2e76d6868e2e76d), rs1:x16(0xaaaaaaaaaaaaaaaa), rs2:x1(0x5555555555555555)
    TEST_RR_OP(aes64dsm, x16, x16, x1, 0xe2e76d6868e2e76d, 0xaaaaaaaaaaaaaaaa, 0x5555555555555555, x2, 0, x3)

aes64dsm_02_inst_171:
    // Test 171:  Test with dataset: sbox64
    // result rd:x17(0xe11c12efefe11c12), rs1:x15(0xabababababababab), rs2:x31(0x5454545454545454)
    TEST_RR_OP(aes64dsm, x17, x15, x31, 0xe11c12efefe11c12, 0xabababababababab, 0x5454545454545454, x2, 8, x3)

aes64dsm_02_inst_172:
    // Test 172:  Test with dataset: sbox64
    // result rd:x18(0x7a95806f6f7a9580), rs1:x14(0xacacacacacacacac), rs2:x30(0x5353535353535353)
    TEST_RR_OP(aes64dsm, x18, x14, x30, 0x7a95806f6f7a9580, 0xacacacacacacacac, 0x5353535353535353, x2, 16, x3)

aes64dsm_02_inst_173:
    // Test 173:  Test with dataset: sbox64
    // result rd:x19(0xb313e34343b313e3), rs1:x13(0xadadadadadadadad), rs2:x29(0x5252525252525252)
    TEST_RR_OP(aes64dsm, x19, x13, x29, 0xb313e34343b313e3, 0xadadadadadadadad, 0x5252525252525252, x2, 24, x3)

aes64dsm_02_inst_174:
    // Test 174:  Test with dataset: sbox64
    // result rd:x20(0xe2652cababe2652c), rs1:x12(0xaeaeaeaeaeaeaeae), rs2:x28(0x5151515151515151)
    TEST_RR_OP(aes64dsm, x20, x12, x28, 0xe2652cababe2652c, 0xaeaeaeaeaeaeaeae, 0x5151515151515151, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_36_0)


aes64dsm_02_inst_175:
    // Test 175:  Test with dataset: sbox64
    // result rd:x21(0x45ab32dcdc45ab32), rs1:x11(0xafafafafafafafaf), rs2:x27(0x5050505050505050)
    TEST_RR_OP(aes64dsm, x21, x11, x27, 0x45ab32dcdc45ab32, 0xafafafafafafafaf, 0x5050505050505050, x1, 0, x2)

aes64dsm_02_inst_176:
    // Test 176:  Test with dataset: sbox64
    // result rd:x22(0xed31835f5fed3183), rs1:x10(0xb0b0b0b0b0b0b0b0), rs2:x26(0x4f4f4f4f4f4f4f4f)
    TEST_RR_OP(aes64dsm, x22, x10, x26, 0xed31835f5fed3183, 0xb0b0b0b0b0b0b0b0, 0x4f4f4f4f4f4f4f4f, x1, 8, x2)

aes64dsm_02_inst_177:
    // Test 177:  Test with dataset: sbox64
    // result rd:x23(0xc01b20fbfbc01b20), rs1:x9(0xb1b1b1b1b1b1b1b1), rs2:x25(0x4e4e4e4e4e4e4e4e)
    TEST_RR_OP(aes64dsm, x23, x9, x25, 0xc01b20fbfbc01b20, 0xb1b1b1b1b1b1b1b1, 0x4e4e4e4e4e4e4e4e, x1, 16, x2)

aes64dsm_02_inst_178:
    // Test 178:  Test with dataset: sbox64
    // result rd:x24(0xa412ff4949a412ff), rs1:x8(0xb2b2b2b2b2b2b2b2), rs2:x24(0x4d4d4d4d4d4d4d4d)
    TEST_RR_OP(aes64dsm, x24, x8, x24, 0xa412ff4949a412ff, 0xb2b2b2b2b2b2b2b2, 0x4d4d4d4d4d4d4d4d, x1, 24, x2)

aes64dsm_02_inst_179:
    // Test 179:  Test with dataset: sbox64
    // result rd:x25(0x29053f131329053f), rs1:x7(0xb3b3b3b3b3b3b3b3), rs2:x23(0x4c4c4c4c4c4c4c4c)
    TEST_RR_OP(aes64dsm, x25, x7, x23, 0x29053f131329053f, 0xb3b3b3b3b3b3b3b3, 0x4c4c4c4c4c4c4c4c, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_37_0)


aes64dsm_02_inst_180:
    // Test 180:  Test with dataset: sbox64
    // result rd:x26(0xf0e4faeeeef0e4fa), rs1:x6(0xb4b4b4b4b4b4b4b4), rs2:x22(0x4b4b4b4b4b4b4b4b)
    TEST_RR_OP(aes64dsm, x26, x6, x22, 0xf0e4faeeeef0e4fa, 0xb4b4b4b4b4b4b4b4, 0x4b4b4b4b4b4b4b4b, x1, 0, x7)

aes64dsm_02_inst_181:
    // Test 181:  Test with dataset: sbox64
    // result rd:x27(0x5552dbdcdc5552db), rs1:x5(0xb5b5b5b5b5b5b5b5), rs2:x21(0x4a4a4a4a4a4a4a4a)
    TEST_RR_OP(aes64dsm, x27, x5, x21, 0x5552dbdcdc5552db, 0xb5b5b5b5b5b5b5b5, 0x4a4a4a4a4a4a4a4a, x1, 8, x7)

aes64dsm_02_inst_182:
    // Test 182:  Test with dataset: sbox64
    // result rd:x28(0x5cfd8120205cfd81), rs1:x4(0xb6b6b6b6b6b6b6b6), rs2:x20(0x4949494949494949)
    TEST_RR_OP(aes64dsm, x28, x4, x20, 0x5cfd8120205cfd81, 0xb6b6b6b6b6b6b6b6, 0x4949494949494949, x1, 16, x7)

aes64dsm_02_inst_183:
    // Test 183:  Test with dataset: sbox64
    // result rd:x29(0xda292eddddda292e), rs1:x3(0xb7b7b7b7b7b7b7b7), rs2:x19(0x4848484848484848)
    TEST_RR_OP(aes64dsm, x29, x3, x19, 0xda292eddddda292e, 0xb7b7b7b7b7b7b7b7, 0x4848484848484848, x1, 24, x7)

aes64dsm_02_inst_184:
    // Test 184:  Test with dataset: sbox64
    // result rd:x30(0x13109f9c9c13109f), rs1:x2(0xb8b8b8b8b8b8b8b8), rs2:x18(0x4747474747474747)
    TEST_RR_OP(aes64dsm, x30, x2, x18, 0x13109f9c9c13109f, 0xb8b8b8b8b8b8b8b8, 0x4747474747474747, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x5,signature_38_0)


aes64dsm_02_inst_185:
    // Test 185:  Test with dataset: sbox64
    // result rd:x31(0x098f4acccc098f4a), rs1:x1(0xb9b9b9b9b9b9b9b9), rs2:x17(0x4646464646464646)
    TEST_RR_OP(aes64dsm, x31, x1, x17, 0x098f4acccc098f4a, 0xb9b9b9b9b9b9b9b9, 0x4646464646464646, x5, 0, x6)

aes64dsm_02_inst_186:
    // Test 186:  Test with dataset: sbox64
    // result rd:x1(0xb5fe1d5656b5fe1d), rs1:x31(0xbabababababababa), rs2:x16(0x4545454545454545)
    TEST_RR_OP(aes64dsm, x1, x31, x16, 0xb5fe1d5656b5fe1d, 0xbabababababababa, 0x4545454545454545, x5, 8, x6)

aes64dsm_02_inst_187:
    // Test 187:  Test with dataset: sbox64
    // result rd:x2(0x8d7df505058d7df5), rs1:x30(0xbbbbbbbbbbbbbbbb), rs2:x15(0x4444444444444444)
    TEST_RR_OP(aes64dsm, x2, x30, x15, 0x8d7df505058d7df5, 0xbbbbbbbbbbbbbbbb, 0x4444444444444444, x5, 16, x6)

aes64dsm_02_inst_188:
    // Test 188:  Test with dataset: sbox64
    // result rd:x3(0x2c143008082c1430), rs1:x29(0xbcbcbcbcbcbcbcbc), rs2:x14(0x4343434343434343)
    TEST_RR_OP(aes64dsm, x3, x29, x14, 0x2c143008082c1430, 0xbcbcbcbcbcbcbcbc, 0x4343434343434343, x5, 24, x6)

aes64dsm_02_inst_189:
    // Test 189:  Test with dataset: sbox64
    // result rd:x4(0x6c1a5721216c1a57), rs1:x28(0xbdbdbdbdbdbdbdbd), rs2:x13(0x4242424242424242)
    TEST_RR_OP(aes64dsm, x4, x28, x13, 0x6c1a5721216c1a57, 0xbdbdbdbdbdbdbdbd, 0x4242424242424242, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_39_0)


aes64dsm_02_inst_190:
    // Test 190:  Test with dataset: sbox64
    // result rd:x5(0x1946bbe4e41946bb), rs1:x27(0xbebebebebebebebe), rs2:x12(0x4141414141414141)
    TEST_RR_OP(aes64dsm, x5, x27, x12, 0x1946bbe4e41946bb, 0xbebebebebebebebe, 0x4141414141414141, x1, 0, x2)

aes64dsm_02_inst_191:
    // Test 191:  Test with dataset: sbox64
    // result rd:x6(0x4b5ccddada4b5ccd), rs1:x26(0xbfbfbfbfbfbfbfbf), rs2:x11(0x4040404040404040)
    TEST_RR_OP(aes64dsm, x6, x26, x11, 0x4b5ccddada4b5ccd, 0xbfbfbfbfbfbfbfbf, 0x4040404040404040, x1, 8, x2)

aes64dsm_02_inst_192:
    // Test 192:  Test with dataset: sbox64
    // result rd:x7(0xb9cd83f7f7b9cd83), rs1:x25(0xc0c0c0c0c0c0c0c0), rs2:x10(0x3f3f3f3f3f3f3f3f)
    TEST_RR_OP(aes64dsm, x7, x25, x10, 0xb9cd83f7f7b9cd83, 0xc0c0c0c0c0c0c0c0, 0x3f3f3f3f3f3f3f3f, x1, 16, x2)

aes64dsm_02_inst_193:
    // Test 193:  Test with dataset: sbox64
    // result rd:x8(0xf9e1f5ededf9e1f5), rs1:x24(0xc1c1c1c1c1c1c1c1), rs2:x9(0x3e3e3e3e3e3e3e3e)
    TEST_RR_OP(aes64dsm, x8, x24, x9, 0xf9e1f5ededf9e1f5, 0xc1c1c1c1c1c1c1c1, 0x3e3e3e3e3e3e3e3e, x1, 24, x2)

aes64dsm_02_inst_194:
    // Test 194:  Test with dataset: sbox64
    // result rd:x9(0x4107622424410762), rs1:x23(0xc2c2c2c2c2c2c2c2), rs2:x8(0x3d3d3d3d3d3d3d3d)
    TEST_RR_OP(aes64dsm, x9, x23, x8, 0x4107622424410762, 0xc2c2c2c2c2c2c2c2, 0x3d3d3d3d3d3d3d3d, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_40_0)


aes64dsm_02_inst_195:
    // Test 195:  Test with dataset: sbox64
    // result rd:x10(0xb20eec5050b20eec), rs1:x22(0xc3c3c3c3c3c3c3c3), rs2:x7(0x3c3c3c3c3c3c3c3c)
    TEST_RR_OP(aes64dsm, x10, x22, x7, 0xb20eec5050b20eec, 0xc3c3c3c3c3c3c3c3, 0x3c3c3c3c3c3c3c3c, x1, 0, x2)

aes64dsm_02_inst_196:
    // Test 196:  Test with dataset: sbox64
    // result rd:x11(0xf96038a1a1f96038), rs1:x21(0xc4c4c4c4c4c4c4c4), rs2:x6(0x3b3b3b3b3b3b3b3b)
    TEST_RR_OP(aes64dsm, x11, x21, x6, 0xf96038a1a1f96038, 0xc4c4c4c4c4c4c4c4, 0x3b3b3b3b3b3b3b3b, x1, 8, x2)

aes64dsm_02_inst_197:
    // Test 197:  Test with dataset: sbox64
    // result rd:x12(0x5100f4a5a55100f4), rs1:x20(0xc5c5c5c5c5c5c5c5), rs2:x5(0x3a3a3a3a3a3a3a3a)
    TEST_RR_OP(aes64dsm, x12, x20, x5, 0x5100f4a5a55100f4, 0xc5c5c5c5c5c5c5c5, 0x3a3a3a3a3a3a3a3a, x1, 16, x2)

aes64dsm_02_inst_198:
    // Test 198:  Test with dataset: sbox64
    // result rd:x13(0x3e1da281813e1da2), rs1:x19(0xc6c6c6c6c6c6c6c6), rs2:x4(0x3939393939393939)
    TEST_RR_OP(aes64dsm, x13, x19, x4, 0x3e1da281813e1da2, 0xc6c6c6c6c6c6c6c6, 0x3939393939393939, x1, 24, x2)

aes64dsm_02_inst_199:
    // Test 199:  Test with dataset: sbox64
    // result rd:x14(0xff71b83636ff71b8), rs1:x18(0xc7c7c7c7c7c7c7c7), rs2:x3(0x3838383838383838)
    TEST_RR_OP(aes64dsm, x14, x18, x3, 0xff71b83636ff71b8, 0xc7c7c7c7c7c7c7c7, 0x3838383838383838, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x3,signature_41_0)


aes64dsm_02_inst_200:
    // Test 200:  Test with dataset: sbox64
    // result rd:x15(0xb8bebbbdbdb8bebb), rs1:x17(0xc8c8c8c8c8c8c8c8), rs2:x2(0x3737373737373737)
    TEST_RR_OP(aes64dsm, x15, x17, x2, 0xb8bebbbdbdb8bebb, 0xc8c8c8c8c8c8c8c8, 0x3737373737373737, x3, 0, x4)

aes64dsm_02_inst_201:
    // Test 201:  Test with dataset: sbox64
    // result rd:x16(0x90fca6caca90fca6), rs1:x16(0xc9c9c9c9c9c9c9c9), rs2:x1(0x3636363636363636)
    TEST_RR_OP(aes64dsm, x16, x16, x1, 0x90fca6caca90fca6, 0xc9c9c9c9c9c9c9c9, 0x3636363636363636, x3, 8, x4)

aes64dsm_02_inst_202:
    // Test 202:  Test with dataset: sbox64
    // result rd:x17(0x59d090191959d090), rs1:x15(0xcacacacacacacaca), rs2:x31(0x3535353535353535)
    TEST_RR_OP(aes64dsm, x17, x15, x31, 0x59d090191959d090, 0xcacacacacacacaca, 0x3535353535353535, x3, 16, x4)

aes64dsm_02_inst_203:
    // Test 203:  Test with dataset: sbox64
    // result rd:x18(0x15f764868615f764), rs1:x14(0xcbcbcbcbcbcbcbcb), rs2:x30(0x3434343434343434)
    TEST_RR_OP(aes64dsm, x18, x14, x30, 0x15f764868615f764, 0xcbcbcbcbcbcbcbcb, 0x3434343434343434, x3, 24, x4)

aes64dsm_02_inst_204:
    // Test 204:  Test with dataset: sbox64
    // result rd:x19(0xfb79ba3838fb79ba), rs1:x13(0xcccccccccccccccc), rs2:x29(0x3333333333333333)
    TEST_RR_OP(aes64dsm, x19, x13, x29, 0xfb79ba3838fb79ba, 0xcccccccccccccccc, 0x3333333333333333, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_42_0)


aes64dsm_02_inst_205:
    // Test 205:  Test with dataset: sbox64
    // result rd:x20(0x6725460404672546), rs1:x12(0xcdcdcdcdcdcdcdcd), rs2:x28(0x3232323232323232)
    TEST_RR_OP(aes64dsm, x20, x12, x28, 0x6725460404672546, 0xcdcdcdcdcdcdcdcd, 0x3232323232323232, x1, 0, x2)

aes64dsm_02_inst_206:
    // Test 206:  Test with dataset: sbox64
    // result rd:x21(0x940b56c9c9940b56), rs1:x11(0xcececececececece), rs2:x27(0x3131313131313131)
    TEST_RR_OP(aes64dsm, x21, x11, x27, 0x940b56c9c9940b56, 0xcececececececece, 0x3131313131313131, x1, 8, x2)

aes64dsm_02_inst_207:
    // Test 207:  Test with dataset: sbox64
    // result rd:x22(0xe14fb61818e14fb6), rs1:x10(0xcfcfcfcfcfcfcfcf), rs2:x26(0x3030303030303030)
    TEST_RR_OP(aes64dsm, x22, x10, x26, 0xe14fb61818e14fb6, 0xcfcfcfcfcfcfcfcf, 0x3030303030303030, x1, 16, x2)

aes64dsm_02_inst_208:
    // Test 208:  Test with dataset: sbox64
    // result rd:x23(0xaaf684d8d8aaf684), rs1:x9(0xd0d0d0d0d0d0d0d0), rs2:x25(0x2f2f2f2f2f2f2f2f)
    TEST_RR_OP(aes64dsm, x23, x9, x25, 0xaaf684d8d8aaf684, 0xd0d0d0d0d0d0d0d0, 0x2f2f2f2f2f2f2f2f, x1, 24, x2)

aes64dsm_02_inst_209:
    // Test 209:  Test with dataset: sbox64
    // result rd:x24(0x82bd102f2f82bd10), rs1:x8(0xd1d1d1d1d1d1d1d1), rs2:x24(0x2e2e2e2e2e2e2e2e)
    TEST_RR_OP(aes64dsm, x24, x8, x24, 0x82bd102f2f82bd10, 0xd1d1d1d1d1d1d1d1, 0x2e2e2e2e2e2e2e2e, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_43_0)


aes64dsm_02_inst_210:
    // Test 210:  Test with dataset: sbox64
    // result rd:x25(0xc9d84c5d5dc9d84c), rs1:x7(0xd2d2d2d2d2d2d2d2), rs2:x23(0x2d2d2d2d2d2d2d2d)
    TEST_RR_OP(aes64dsm, x25, x7, x23, 0xc9d84c5d5dc9d84c, 0xd2d2d2d2d2d2d2d2, 0x2d2d2d2d2d2d2d2d, x1, 0, x2)

aes64dsm_02_inst_211:
    // Test 211:  Test with dataset: sbox64
    // result rd:x26(0x0ec3e528280ec3e5), rs1:x6(0xd3d3d3d3d3d3d3d3), rs2:x22(0x2c2c2c2c2c2c2c2c)
    TEST_RR_OP(aes64dsm, x26, x6, x22, 0x0ec3e528280ec3e5, 0xd3d3d3d3d3d3d3d3, 0x2c2c2c2c2c2c2c2c, x1, 8, x2)

aes64dsm_02_inst_212:
    // Test 212:  Test with dataset: sbox64
    // result rd:x27(0x6743755151674375), rs1:x5(0xd4d4d4d4d4d4d4d4), rs2:x21(0x2b2b2b2b2b2b2b2b)
    TEST_RR_OP(aes64dsm, x27, x5, x21, 0x6743755151674375, 0xd4d4d4d4d4d4d4d4, 0x2b2b2b2b2b2b2b2b, x1, 16, x2)

aes64dsm_02_inst_213:
    // Test 213:  Test with dataset: sbox64
    // result rd:x28(0x5515753535551575), rs1:x4(0xd5d5d5d5d5d5d5d5), rs2:x20(0x2a2a2a2a2a2a2a2a)
    TEST_RR_OP(aes64dsm, x28, x4, x20, 0x5515753535551575, 0xd5d5d5d5d5d5d5d5, 0x2a2a2a2a2a2a2a2a, x1, 24, x2)

aes64dsm_02_inst_214:
    // Test 214:  Test with dataset: sbox64
    // result rd:x29(0x58545e525258545e), rs1:x3(0xd6d6d6d6d6d6d6d6), rs2:x19(0x2929292929292929)
    TEST_RR_OP(aes64dsm, x29, x3, x19, 0x58545e525258545e, 0xd6d6d6d6d6d6d6d6, 0x2929292929292929, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x4,signature_44_0)


aes64dsm_02_inst_215:
    // Test 215:  Test with dataset: sbox64
    // result rd:x30(0x924f71acac924f71), rs1:x2(0xd7d7d7d7d7d7d7d7), rs2:x18(0x2828282828282828)
    TEST_RR_OP(aes64dsm, x30, x2, x18, 0x924f71acac924f71, 0xd7d7d7d7d7d7d7d7, 0x2828282828282828, x4, 0, x5)

aes64dsm_02_inst_216:
    // Test 216:  Test with dataset: sbox64
    // result rd:x31(0x5d7d4d6d6d5d7d4d), rs1:x1(0xd8d8d8d8d8d8d8d8), rs2:x17(0x2727272727272727)
    TEST_RR_OP(aes64dsm, x31, x1, x17, 0x5d7d4d6d6d5d7d4d, 0xd8d8d8d8d8d8d8d8, 0x2727272727272727, x4, 8, x5)

aes64dsm_02_inst_217:
    // Test 217:  Test with dataset: sbox64
    // result rd:x1(0x811647d0d0811647), rs1:x31(0xd9d9d9d9d9d9d9d9), rs2:x16(0x2626262626262626)
    TEST_RR_OP(aes64dsm, x1, x31, x16, 0x811647d0d0811647, 0xd9d9d9d9d9d9d9d9, 0x2626262626262626, x4, 16, x5)

aes64dsm_02_inst_218:
    // Test 218:  Test with dataset: sbox64
    // result rd:x2(0x7f14c7acac7f14c7), rs1:x30(0xdadadadadadadada), rs2:x15(0x2525252525252525)
    TEST_RR_OP(aes64dsm, x2, x30, x15, 0x7f14c7acac7f14c7, 0xdadadadadadadada, 0x2525252525252525, x4, 24, x5)

aes64dsm_02_inst_219:
    // Test 219:  Test with dataset: sbox64
    // result rd:x3(0x3042097b7b304209), rs1:x29(0xdbdbdbdbdbdbdbdb), rs2:x14(0x2424242424242424)
    TEST_RR_OP(aes64dsm, x3, x29, x14, 0x3042097b7b304209, 0xdbdbdbdbdbdbdbdb, 0x2424242424242424, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_45_0)


aes64dsm_02_inst_220:
    // Test 220:  Test with dataset: sbox64
    // result rd:x4(0xd980782121d98078), rs1:x28(0xdcdcdcdcdcdcdcdc), rs2:x13(0x2323232323232323)
    TEST_RR_OP(aes64dsm, x4, x28, x13, 0xd980782121d98078, 0xdcdcdcdcdcdcdcdc, 0x2323232323232323, x1, 0, x2)

aes64dsm_02_inst_221:
    // Test 221:  Test with dataset: sbox64
    // result rd:x5(0x41fb1ca6a641fb1c), rs1:x27(0xdddddddddddddddd), rs2:x12(0x2222222222222222)
    TEST_RR_OP(aes64dsm, x5, x27, x12, 0x41fb1ca6a641fb1c, 0xdddddddddddddddd, 0x2222222222222222, x1, 8, x2)

aes64dsm_02_inst_222:
    // Test 222:  Test with dataset: sbox64
    // result rd:x6(0x1fcaf82d2d1fcaf8), rs1:x26(0xdededededededede), rs2:x11(0x2121212121212121)
    TEST_RR_OP(aes64dsm, x6, x26, x11, 0x1fcaf82d2d1fcaf8, 0xdededededededede, 0x2121212121212121, x1, 16, x2)

aes64dsm_02_inst_223:
    // Test 223:  Test with dataset: sbox64
    // result rd:x7(0xe38e583535e38e58), rs1:x25(0xdfdfdfdfdfdfdfdf), rs2:x10(0x2020202020202020)
    TEST_RR_OP(aes64dsm, x7, x25, x10, 0xe38e583535e38e58, 0xdfdfdfdfdfdfdfdf, 0x2020202020202020, x1, 24, x2)

aes64dsm_02_inst_224:
    // Test 224:  Test with dataset: sbox64
    // result rd:x8(0xaa7cc11717aa7cc1), rs1:x24(0xe0e0e0e0e0e0e0e0), rs2:x9(0x1f1f1f1f1f1f1f1f)
    TEST_RR_OP(aes64dsm, x8, x24, x9, 0xaa7cc11717aa7cc1, 0xe0e0e0e0e0e0e0e0, 0x1f1f1f1f1f1f1f1f, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_46_0)


aes64dsm_02_inst_225:
    // Test 225:  Test with dataset: sbox64
    // result rd:x9(0xdfcdd6c4c4dfcdd6), rs1:x23(0xe1e1e1e1e1e1e1e1), rs2:x8(0x1e1e1e1e1e1e1e1e)
    TEST_RR_OP(aes64dsm, x9, x23, x8, 0xdfcdd6c4c4dfcdd6, 0xe1e1e1e1e1e1e1e1, 0x1e1e1e1e1e1e1e1e, x1, 0, x2)

aes64dsm_02_inst_226:
    // Test 226:  Test with dataset: sbox64
    // result rd:x10(0xb667538282b66753), rs1:x22(0xe2e2e2e2e2e2e2e2), rs2:x7(0x1d1d1d1d1d1d1d1d)
    TEST_RR_OP(aes64dsm, x10, x22, x7, 0xb667538282b66753, 0xe2e2e2e2e2e2e2e2, 0x1d1d1d1d1d1d1d1d, x1, 8, x2)

aes64dsm_02_inst_227:
    // Test 227:  Test with dataset: sbox64
    // result rd:x11(0xdfd6565f5fdfd656), rs1:x21(0xe3e3e3e3e3e3e3e3), rs2:x6(0x1c1c1c1c1c1c1c1c)
    TEST_RR_OP(aes64dsm, x11, x21, x6, 0xdfd6565f5fdfd656, 0xe3e3e3e3e3e3e3e3, 0x1c1c1c1c1c1c1c1c, x1, 16, x2)

aes64dsm_02_inst_228:
    // Test 228:  Test with dataset: sbox64
    // result rd:x12(0x0ec1e42b2b0ec1e4), rs1:x20(0xe4e4e4e4e4e4e4e4), rs2:x5(0x1b1b1b1b1b1b1b1b)
    TEST_RR_OP(aes64dsm, x12, x20, x5, 0x0ec1e42b2b0ec1e4, 0xe4e4e4e4e4e4e4e4, 0x1b1b1b1b1b1b1b1b, x1, 24, x2)

aes64dsm_02_inst_229:
    // Test 229:  Test with dataset: sbox64
    // result rd:x13(0x2efc4795952efc47), rs1:x19(0xe5e5e5e5e5e5e5e5), rs2:x4(0x1a1a1a1a1a1a1a1a)
    TEST_RR_OP(aes64dsm, x13, x19, x4, 0x2efc4795952efc47, 0xe5e5e5e5e5e5e5e5, 0x1a1a1a1a1a1a1a1a, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x4,signature_47_0)


aes64dsm_02_inst_230:
    // Test 230:  Test with dataset: sbox64
    // result rd:x14(0x8f79f402028f79f4), rs1:x18(0xe6e6e6e6e6e6e6e6), rs2:x3(0x1919191919191919)
    TEST_RR_OP(aes64dsm, x14, x18, x3, 0x8f79f402028f79f4, 0xe6e6e6e6e6e6e6e6, 0x1919191919191919, x4, 0, x5)

aes64dsm_02_inst_231:
    // Test 231:  Test with dataset: sbox64
    // result rd:x15(0x0112859696011285), rs1:x17(0xe7e7e7e7e7e7e7e7), rs2:x2(0x1818181818181818)
    TEST_RR_OP(aes64dsm, x15, x17, x2, 0x0112859696011285, 0xe7e7e7e7e7e7e7e7, 0x1818181818181818, x4, 8, x5)

aes64dsm_02_inst_232:
    // Test 232:  Test with dataset: sbox64
    // result rd:x16(0x3ea071efef3ea071), rs1:x16(0xe8e8e8e8e8e8e8e8), rs2:x1(0x1717171717171717)
    TEST_RR_OP(aes64dsm, x16, x16, x1, 0x3ea071efef3ea071, 0xe8e8e8e8e8e8e8e8, 0x1717171717171717, x4, 16, x5)

aes64dsm_02_inst_233:
    // Test 233:  Test with dataset: sbox64
    // result rd:x17(0x87af93bbbb87af93), rs1:x15(0xe9e9e9e9e9e9e9e9), rs2:x31(0x1616161616161616)
    TEST_RR_OP(aes64dsm, x17, x15, x31, 0x87af93bbbb87af93, 0xe9e9e9e9e9e9e9e9, 0x1616161616161616, x4, 24, x5)

aes64dsm_02_inst_234:
    // Test 234:  Test with dataset: sbox64
    // result rd:x18(0x7a49eedddd7a49ee), rs1:x14(0xeaeaeaeaeaeaeaea), rs2:x30(0x1515151515151515)
    TEST_RR_OP(aes64dsm, x18, x14, x30, 0x7a49eedddd7a49ee, 0xeaeaeaeaeaeaeaea, 0x1515151515151515, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_48_0)


aes64dsm_02_inst_235:
    // Test 235:  Test with dataset: sbox64
    // result rd:x19(0x6431c396966431c3), rs1:x13(0xebebebebebebebeb), rs2:x29(0x1414141414141414)
    TEST_RR_OP(aes64dsm, x19, x13, x29, 0x6431c396966431c3, 0xebebebebebebebeb, 0x1414141414141414, x1, 0, x2)

aes64dsm_02_inst_236:
    // Test 236:  Test with dataset: sbox64
    // result rd:x20(0x8486858787848685), rs1:x12(0xecececececececec), rs2:x28(0x1313131313131313)
    TEST_RR_OP(aes64dsm, x20, x12, x28, 0x8486858787848685, 0xecececececececec, 0x1313131313131313, x1, 8, x2)

aes64dsm_02_inst_237:
    // Test 237:  Test with dataset: sbox64
    // result rd:x21(0x5e8a34e0e05e8a34), rs1:x11(0xedededededededed), rs2:x27(0x1212121212121212)
    TEST_RR_OP(aes64dsm, x21, x11, x27, 0x5e8a34e0e05e8a34, 0xedededededededed, 0x1212121212121212, x1, 16, x2)

aes64dsm_02_inst_238:
    // Test 238:  Test with dataset: sbox64
    // result rd:x22(0xe4109e6a6ae4109e), rs1:x10(0xeeeeeeeeeeeeeeee), rs2:x26(0x1111111111111111)
    TEST_RR_OP(aes64dsm, x22, x10, x26, 0xe4109e6a6ae4109e, 0xeeeeeeeeeeeeeeee, 0x1111111111111111, x1, 24, x2)

aes64dsm_02_inst_239:
    // Test 239:  Test with dataset: sbox64
    // result rd:x23(0x32082f151532082f), rs1:x9(0xefefefefefefefef), rs2:x25(0x1010101010101010)
    TEST_RR_OP(aes64dsm, x23, x9, x25, 0x32082f151532082f, 0xefefefefefefefef, 0x1010101010101010, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_49_0)


aes64dsm_02_inst_240:
    // Test 240:  Test with dataset: sbox64
    // result rd:x24(0xa566498a8aa56649), rs1:x8(0xf0f0f0f0f0f0f0f0), rs2:x24(0x0f0f0f0f0f0f0f0f)
    TEST_RR_OP(aes64dsm, x24, x8, x24, 0xa566498a8aa56649, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f, x1, 0, x2)

aes64dsm_02_inst_241:
    // Test 241:  Test with dataset: sbox64
    // result rd:x25(0xe90a15f6f6e90a15), rs1:x7(0xf1f1f1f1f1f1f1f1), rs2:x23(0x0e0e0e0e0e0e0e0e)
    TEST_RR_OP(aes64dsm, x25, x7, x23, 0xe90a15f6f6e90a15, 0xf1f1f1f1f1f1f1f1, 0xe0e0e0e0e0e0e0e, x1, 8, x2)

aes64dsm_02_inst_242:
    // Test 242:  Test with dataset: sbox64
    // result rd:x26(0xf70200f5f5f70200), rs1:x6(0xf2f2f2f2f2f2f2f2), rs2:x22(0x0d0d0d0d0d0d0d0d)
    TEST_RR_OP(aes64dsm, x26, x6, x22, 0xf70200f5f5f70200, 0xf2f2f2f2f2f2f2f2, 0xd0d0d0d0d0d0d0d, x1, 16, x2)

aes64dsm_02_inst_243:
    // Test 243:  Test with dataset: sbox64
    // result rd:x27(0xb5504aafafb5504a), rs1:x5(0xf3f3f3f3f3f3f3f3), rs2:x21(0x0c0c0c0c0c0c0c0c)
    TEST_RR_OP(aes64dsm, x27, x5, x21, 0xb5504aafafb5504a, 0xf3f3f3f3f3f3f3f3, 0xc0c0c0c0c0c0c0c, x1, 24, x2)

aes64dsm_02_inst_244:
    // Test 244:  Test with dataset: sbox64
    // result rd:x28(0x460e622a2a460e62), rs1:x4(0xf4f4f4f4f4f4f4f4), rs2:x20(0x0b0b0b0b0b0b0b0b)
    TEST_RR_OP(aes64dsm, x28, x4, x20, 0x460e622a2a460e62, 0xf4f4f4f4f4f4f4f4, 0xb0b0b0b0b0b0b0b, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x4,signature_50_0)


aes64dsm_02_inst_245:
    // Test 245:  Test with dataset: sbox64
    // result rd:x29(0x6ddeb90a0a6ddeb9), rs1:x3(0xf5f5f5f5f5f5f5f5), rs2:x19(0x0a0a0a0a0a0a0a0a)
    TEST_RR_OP(aes64dsm, x29, x3, x19, 0x6ddeb90a0a6ddeb9, 0xf5f5f5f5f5f5f5f5, 0xa0a0a0a0a0a0a0a, x4, 0, x5)

aes64dsm_02_inst_246:
    // Test 246:  Test with dataset: sbox64
    // result rd:x30(0x192e8fb8b8192e8f), rs1:x2(0xf6f6f6f6f6f6f6f6), rs2:x18(0x0909090909090909)
    TEST_RR_OP(aes64dsm, x30, x2, x18, 0x192e8fb8b8192e8f, 0xf6f6f6f6f6f6f6f6, 0x909090909090909, x4, 8, x5)

aes64dsm_02_inst_247:
    // Test 247:  Test with dataset: sbox64
    // result rd:x31(0xc4ed5d7474c4ed5d), rs1:x1(0xf7f7f7f7f7f7f7f7), rs2:x17(0x0808080808080808)
    TEST_RR_OP(aes64dsm, x31, x1, x17, 0xc4ed5d7474c4ed5d, 0xf7f7f7f7f7f7f7f7, 0x808080808080808, x4, 16, x5)

aes64dsm_02_inst_248:
    // Test 248:  Test with dataset: sbox64
    // result rd:x1(0xd87101a8a8d87101), rs1:x31(0xf8f8f8f8f8f8f8f8), rs2:x16(0x0707070707070707)
    TEST_RR_OP(aes64dsm, x1, x31, x16, 0xd87101a8a8d87101, 0xf8f8f8f8f8f8f8f8, 0x707070707070707, x4, 24, x5)

aes64dsm_02_inst_249:
    // Test 249:  Test with dataset: sbox64
    // result rd:x2(0x3bb8f774743bb8f7), rs1:x30(0xf9f9f9f9f9f9f9f9), rs2:x15(0x0606060606060606)
    TEST_RR_OP(aes64dsm, x2, x30, x15, 0x3bb8f774743bb8f7, 0xf9f9f9f9f9f9f9f9, 0x606060606060606, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_51_0)


aes64dsm_02_inst_250:
    // Test 250:  Test with dataset: sbox64
    // result rd:x3(0xfabed89c9cfabed8), rs1:x29(0xfafafafafafafafa), rs2:x14(0x0505050505050505)
    TEST_RR_OP(aes64dsm, x3, x29, x14, 0xfabed89c9cfabed8, 0xfafafafafafafafa, 0x505050505050505, x1, 0, x2)

aes64dsm_02_inst_251:
    // Test 251:  Test with dataset: sbox64
    // result rd:x4(0xc167923434c16792), rs1:x28(0xfbfbfbfbfbfbfbfb), rs2:x13(0x0404040404040404)
    TEST_RR_OP(aes64dsm, x4, x28, x13, 0xc167923434c16792, 0xfbfbfbfbfbfbfbfb, 0x404040404040404, x1, 8, x2)

aes64dsm_02_inst_252:
    // Test 252:  Test with dataset: sbox64
    // result rd:x5(0xf8e3786363f8e378), rs1:x27(0xfcfcfcfcfcfcfcfc), rs2:x12(0x0303030303030303)
    TEST_RR_OP(aes64dsm, x5, x27, x12, 0xf8e3786363f8e378, 0xfcfcfcfcfcfcfcfc, 0x303030303030303, x1, 16, x2)

aes64dsm_02_inst_253:
    // Test 253:  Test with dataset: sbox64
    // result rd:x6(0xcb5d801616cb5d80), rs1:x26(0xfdfdfdfdfdfdfdfd), rs2:x11(0x0202020202020202)
    TEST_RR_OP(aes64dsm, x6, x26, x11, 0xcb5d801616cb5d80, 0xfdfdfdfdfdfdfdfd, 0x202020202020202, x1, 24, x2)

aes64dsm_02_inst_254:
    // Test 254:  Test with dataset: sbox64
    // result rd:x7(0x171d121818171d12), rs1:x25(0xfefefefefefefefe), rs2:x10(0x0101010101010101)
    TEST_RR_OP(aes64dsm, x7, x25, x10, 0x171d121818171d12, 0xfefefefefefefefe, 0x101010101010101, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_52_0)


aes64dsm_02_inst_255:
    // Test 255:  Test with dataset: sbox64
    // result rd:x8(0xb0ee9fc1c1b0ee9f), rs1:x24(0xffffffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x8, x24, x9, 0xb0ee9fc1c1b0ee9f, 0xffffffffffffffff, 0x0, x1, 0, x2)
	
#endif


RVTEST_CODE_END aes64dsm_02_code_end
RVTEST_CODE_BEGIN roriw_01_init roriw_01_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x6,signature_1_0)


roriw_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0xffffffffb5bd4a32), rs1:x31(0x10fd3dedadea5195), imm:0x3
    TEST_IMM_OP(roriw, x1, x31, 0xffffffffb5bd4a32, 0x10fd3dedadea5195, 0x3, x6, 0, x7)

roriw_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x000000005ff7d83a), rs1:x30(0xbd295ce2d2ffbec1), imm:0x1b
    TEST_IMM_OP(roriw, x2, x30, 0x000000005ff7d83a, 0xbd295ce2d2ffbec1, 0x1b, x6, 8, x7)

roriw_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0xffffffffa8e1a8bb), rs1:x29(0xc9649f05a8e1a8bb), imm:0x0
    TEST_IMM_OP(roriw, x3, x29, 0xffffffffa8e1a8bb, 0xc9649f05a8e1a8bb, 0x0, x6, 16, x7)

roriw_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x00000000691933f9), rs1:x28(0x3541291848c99fcb), imm:0x3
    TEST_IMM_OP(roriw, x4, x28, 0x00000000691933f9, 0x3541291848c99fcb, 0x3, x6, 24, x7)

roriw_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0xffffffffa49e8c3a), rs1:x27(0x10a24740461d524f), imm:0xf
    TEST_IMM_OP(roriw, x5, x27, 0xffffffffa49e8c3a, 0x10a24740461d524f, 0xf, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_2_0)


roriw_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x00000000215ea514), rs1:x26(0x546b0e54528a10af), imm:0xf
    TEST_IMM_OP(roriw, x6, x26, 0x00000000215ea514, 0x546b0e54528a10af, 0xf, x1, 0, x2)

roriw_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x00000000787c337f), rs1:x25(0x73a92fd4e19bfbc3), imm:0xb
    TEST_IMM_OP(roriw, x7, x25, 0x00000000787c337f, 0x73a92fd4e19bfbc3, 0xb, x1, 8, x2)

roriw_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x000000000f5e580e), rs1:x24(0x82f6747f707af2c0), imm:0x1b
    TEST_IMM_OP(roriw, x8, x24, 0x000000000f5e580e, 0x82f6747f707af2c0, 0x1b, x1, 16, x2)

roriw_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0xffffffffd23e882d), rs1:x23(0xf5adb41aa47d105b), imm:0x1
    TEST_IMM_OP(roriw, x9, x23, 0xffffffffd23e882d, 0xf5adb41aa47d105b, 0x1, x1, 24, x2)

roriw_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0xffffffffde611890), rs1:x22(0xdf7f3844121bcc23), imm:0x15
    TEST_IMM_OP(roriw, x10, x22, 0xffffffffde611890, 0xdf7f3844121bcc23, 0x15, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_3_0)


roriw_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000002), rs1:x21(0x0000000000000001), imm:0x1f
    TEST_IMM_OP(roriw, x11, x21, 0x0000000000000002, 0x1, 0x1f, x1, 0, x7)

roriw_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x0000000000040000), rs1:x20(0x0000000000000002), imm:0xf
    TEST_IMM_OP(roriw, x12, x20, 0x0000000000040000, 0x2, 0xf, x1, 8, x7)

roriw_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000800), rs1:x19(0x0000000000000004), imm:0x17
    TEST_IMM_OP(roriw, x13, x19, 0x0000000000000800, 0x4, 0x17, x1, 16, x7)

roriw_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000100), rs1:x18(0x0000000000000008), imm:0x1b
    TEST_IMM_OP(roriw, x14, x18, 0x0000000000000100, 0x8, 0x1b, x1, 24, x7)

roriw_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000080), rs1:x17(0x0000000000000010), imm:0x1d
    TEST_IMM_OP(roriw, x15, x17, 0x0000000000000080, 0x10, 0x1d, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x2,signature_4_0)


roriw_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000080), rs1:x16(0x0000000000000020), imm:0x1e
    TEST_IMM_OP(roriw, x16, x16, 0x0000000000000080, 0x20, 0x1e, x2, 0, x3)

roriw_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000040), rs1:x15(0x0000000000000040), imm:0x0
    TEST_IMM_OP(roriw, x17, x15, 0x0000000000000040, 0x40, 0x0, x2, 8, x3)

roriw_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x0000000000800000), rs1:x14(0x0000000000000080), imm:0x10
    TEST_IMM_OP(roriw, x18, x14, 0x0000000000800000, 0x80, 0x10, x2, 16, x3)

roriw_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000001), rs1:x13(0x0000000000000100), imm:0x8
    TEST_IMM_OP(roriw, x19, x13, 0x0000000000000001, 0x100, 0x8, x2, 24, x3)

roriw_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000020), rs1:x12(0x0000000000000200), imm:0x4
    TEST_IMM_OP(roriw, x20, x12, 0x0000000000000020, 0x200, 0x4, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_5_0)


roriw_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000100), rs1:x11(0x0000000000000400), imm:0x2
    TEST_IMM_OP(roriw, x21, x11, 0x0000000000000100, 0x400, 0x2, x1, 0, x2)

roriw_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000400), rs1:x10(0x0000000000000800), imm:0x1
    TEST_IMM_OP(roriw, x22, x10, 0x0000000000000400, 0x800, 0x1, x1, 8, x2)

roriw_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000200), rs1:x9(0x0000000000001000), imm:0x3
    TEST_IMM_OP(roriw, x23, x9, 0x0000000000000200, 0x1000, 0x3, x1, 16, x2)

roriw_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0000000000040000), rs1:x8(0x0000000000002000), imm:0x1b
    TEST_IMM_OP(roriw, x24, x8, 0x0000000000040000, 0x2000, 0x1b, x1, 24, x2)

roriw_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x0000000000004000), rs1:x7(0x0000000000004000), imm:0x0
    TEST_IMM_OP(roriw, x25, x7, 0x0000000000004000, 0x4000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_6_0)


roriw_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x0000000000001000), rs1:x6(0x0000000000008000), imm:0x3
    TEST_IMM_OP(roriw, x26, x6, 0x0000000000001000, 0x8000, 0x3, x1, 0, x7)

roriw_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000002), rs1:x5(0x0000000000010000), imm:0xf
    TEST_IMM_OP(roriw, x27, x5, 0x0000000000000002, 0x10000, 0xf, x1, 8, x7)

roriw_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000004), rs1:x4(0x0000000000020000), imm:0xf
    TEST_IMM_OP(roriw, x28, x4, 0x0000000000000004, 0x20000, 0xf, x1, 16, x7)

roriw_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000080), rs1:x3(0x0000000000040000), imm:0xb
    TEST_IMM_OP(roriw, x29, x3, 0x0000000000000080, 0x40000, 0xb, x1, 24, x7)

roriw_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0000000001000000), rs1:x2(0x0000000000080000), imm:0x1b
    TEST_IMM_OP(roriw, x30, x2, 0x0000000001000000, 0x80000, 0x1b, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x5,signature_7_0)


roriw_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0000000000080000), rs1:x1(0x0000000000100000), imm:0x1
    TEST_IMM_OP(roriw, x31, x1, 0x0000000000080000, 0x100000, 0x1, x5, 0, x6)

roriw_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000001), rs1:x31(0x0000000000200000), imm:0x15
    TEST_IMM_OP(roriw, x1, x31, 0x0000000000000001, 0x200000, 0x15, x5, 8, x6)

roriw_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0000000000800000), rs1:x30(0x0000000000400000), imm:0x1f
    TEST_IMM_OP(roriw, x2, x30, 0x0000000000800000, 0x400000, 0x1f, x5, 16, x6)

roriw_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000100), rs1:x29(0x0000000000800000), imm:0xf
    TEST_IMM_OP(roriw, x3, x29, 0x0000000000000100, 0x800000, 0xf, x5, 24, x6)

roriw_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000002), rs1:x28(0x0000000001000000), imm:0x17
    TEST_IMM_OP(roriw, x4, x28, 0x0000000000000002, 0x1000000, 0x17, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_8_0)


roriw_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x0000000040000000), rs1:x27(0x0000000002000000), imm:0x1b
    TEST_IMM_OP(roriw, x5, x27, 0x0000000040000000, 0x2000000, 0x1b, x1, 0, x2)

roriw_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x0000000020000000), rs1:x26(0x0000000004000000), imm:0x1d
    TEST_IMM_OP(roriw, x6, x26, 0x0000000020000000, 0x4000000, 0x1d, x1, 8, x2)

roriw_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0000000020000000), rs1:x25(0x0000000008000000), imm:0x1e
    TEST_IMM_OP(roriw, x7, x25, 0x0000000020000000, 0x8000000, 0x1e, x1, 16, x2)

roriw_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0000000010000000), rs1:x24(0x0000000010000000), imm:0x0
    TEST_IMM_OP(roriw, x8, x24, 0x0000000010000000, 0x10000000, 0x0, x1, 24, x2)

roriw_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0000000000002000), rs1:x23(0x0000000020000000), imm:0x10
    TEST_IMM_OP(roriw, x9, x23, 0x0000000000002000, 0x20000000, 0x10, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_9_0)


roriw_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x0000000000400000), rs1:x22(0x0000000040000000), imm:0x8
    TEST_IMM_OP(roriw, x10, x22, 0x0000000000400000, 0x40000000, 0x8, x1, 0, x2)

roriw_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0000000008000000), rs1:x21(0x0000000080000000), imm:0x4
    TEST_IMM_OP(roriw, x11, x21, 0x0000000008000000, 0x80000000, 0x4, x1, 8, x2)

roriw_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000100000000), imm:0x2
    TEST_IMM_OP(roriw, x12, x20, 0x0000000000000000, 0x100000000, 0x2, x1, 16, x2)

roriw_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000200000000), imm:0x1
    TEST_IMM_OP(roriw, x13, x19, 0x0000000000000000, 0x200000000, 0x1, x1, 24, x2)

roriw_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0000000400000000), imm:0x3
    TEST_IMM_OP(roriw, x14, x18, 0x0000000000000000, 0x400000000, 0x3, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x3,signature_10_0)


roriw_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x0000000800000000), imm:0x1b
    TEST_IMM_OP(roriw, x15, x17, 0x0000000000000000, 0x800000000, 0x1b, x3, 0, x4)

roriw_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x0000001000000000), imm:0x0
    TEST_IMM_OP(roriw, x16, x16, 0x0000000000000000, 0x1000000000, 0x0, x3, 8, x4)

roriw_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000002000000000), imm:0x3
    TEST_IMM_OP(roriw, x17, x15, 0x0000000000000000, 0x2000000000, 0x3, x3, 16, x4)

roriw_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000004000000000), imm:0xf
    TEST_IMM_OP(roriw, x18, x14, 0x0000000000000000, 0x4000000000, 0xf, x3, 24, x4)

roriw_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000008000000000), imm:0xf
    TEST_IMM_OP(roriw, x19, x13, 0x0000000000000000, 0x8000000000, 0xf, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_11_0)


roriw_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000010000000000), imm:0xb
    TEST_IMM_OP(roriw, x20, x12, 0x0000000000000000, 0x10000000000, 0xb, x1, 0, x2)

roriw_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000020000000000), imm:0x1b
    TEST_IMM_OP(roriw, x21, x11, 0x0000000000000000, 0x20000000000, 0x1b, x1, 8, x2)

roriw_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000040000000000), imm:0x1
    TEST_IMM_OP(roriw, x22, x10, 0x0000000000000000, 0x40000000000, 0x1, x1, 16, x2)

roriw_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000080000000000), imm:0x15
    TEST_IMM_OP(roriw, x23, x9, 0x0000000000000000, 0x80000000000, 0x15, x1, 24, x2)

roriw_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000100000000000), imm:0x1f
    TEST_IMM_OP(roriw, x24, x8, 0x0000000000000000, 0x100000000000, 0x1f, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_12_0)


roriw_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000200000000000), imm:0xf
    TEST_IMM_OP(roriw, x25, x7, 0x0000000000000000, 0x200000000000, 0xf, x1, 0, x2)

roriw_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000400000000000), imm:0x17
    TEST_IMM_OP(roriw, x26, x6, 0x0000000000000000, 0x400000000000, 0x17, x1, 8, x2)

roriw_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000800000000000), imm:0x1b
    TEST_IMM_OP(roriw, x27, x5, 0x0000000000000000, 0x800000000000, 0x1b, x1, 16, x2)

roriw_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0001000000000000), imm:0x1d
    TEST_IMM_OP(roriw, x28, x4, 0x0000000000000000, 0x1000000000000, 0x1d, x1, 24, x2)

roriw_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0002000000000000), imm:0x1e
    TEST_IMM_OP(roriw, x29, x3, 0x0000000000000000, 0x2000000000000, 0x1e, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x4,signature_13_0)


roriw_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0004000000000000), imm:0x0
    TEST_IMM_OP(roriw, x30, x2, 0x0000000000000000, 0x4000000000000, 0x0, x4, 0, x5)

roriw_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0008000000000000), imm:0x10
    TEST_IMM_OP(roriw, x31, x1, 0x0000000000000000, 0x8000000000000, 0x10, x4, 8, x5)

roriw_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0010000000000000), imm:0x8
    TEST_IMM_OP(roriw, x1, x31, 0x0000000000000000, 0x10000000000000, 0x8, x4, 16, x5)

roriw_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0020000000000000), imm:0x4
    TEST_IMM_OP(roriw, x2, x30, 0x0000000000000000, 0x20000000000000, 0x4, x4, 24, x5)

roriw_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0040000000000000), imm:0x2
    TEST_IMM_OP(roriw, x3, x29, 0x0000000000000000, 0x40000000000000, 0x2, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_14_0)


roriw_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0080000000000000), imm:0x1
    TEST_IMM_OP(roriw, x4, x28, 0x0000000000000000, 0x80000000000000, 0x1, x1, 0, x2)

roriw_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0100000000000000), imm:0x3
    TEST_IMM_OP(roriw, x5, x27, 0x0000000000000000, 0x100000000000000, 0x3, x1, 8, x2)

roriw_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0200000000000000), imm:0x1b
    TEST_IMM_OP(roriw, x6, x26, 0x0000000000000000, 0x200000000000000, 0x1b, x1, 16, x2)

roriw_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0400000000000000), imm:0x0
    TEST_IMM_OP(roriw, x7, x25, 0x0000000000000000, 0x400000000000000, 0x0, x1, 24, x2)

roriw_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0800000000000000), imm:0x3
    TEST_IMM_OP(roriw, x8, x24, 0x0000000000000000, 0x800000000000000, 0x3, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_15_0)


roriw_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x1000000000000000), imm:0xf
    TEST_IMM_OP(roriw, x9, x23, 0x0000000000000000, 0x1000000000000000, 0xf, x1, 0, x2)

roriw_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x2000000000000000), imm:0xf
    TEST_IMM_OP(roriw, x10, x22, 0x0000000000000000, 0x2000000000000000, 0xf, x1, 8, x2)

roriw_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x4000000000000000), imm:0xb
    TEST_IMM_OP(roriw, x11, x21, 0x0000000000000000, 0x4000000000000000, 0xb, x1, 16, x2)

roriw_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x8000000000000000), imm:0x1b
    TEST_IMM_OP(roriw, x12, x20, 0x0000000000000000, 0x8000000000000000, 0x1b, x1, 24, x2)

roriw_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000), imm:0x1
    TEST_IMM_OP(roriw, x13, x19, 0x0000000000000000, 0x0, 0x1, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x4,signature_16_0)


roriw_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0xfffffffffffff7ff), rs1:x18(0xfffffffffffffffe), imm:0x15
    TEST_IMM_OP(roriw, x14, x18, 0xfffffffffffff7ff, 0xfffffffffffffffe, 0x15, x4, 0, x5)

roriw_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0xfffffffffffffffb), rs1:x17(0xfffffffffffffffd), imm:0x1f
    TEST_IMM_OP(roriw, x15, x17, 0xfffffffffffffffb, 0xfffffffffffffffd, 0x1f, x4, 8, x5)

roriw_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0xfffffffffff7ffff), rs1:x16(0xfffffffffffffffb), imm:0xf
    TEST_IMM_OP(roriw, x16, x16, 0xfffffffffff7ffff, 0xfffffffffffffffb, 0xf, x4, 16, x5)

roriw_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffffefff), rs1:x15(0xfffffffffffffff7), imm:0x17
    TEST_IMM_OP(roriw, x17, x15, 0xffffffffffffefff, 0xfffffffffffffff7, 0x17, x4, 24, x5)

roriw_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0xfffffffffffffdff), rs1:x14(0xffffffffffffffef), imm:0x1b
    TEST_IMM_OP(roriw, x18, x14, 0xfffffffffffffdff, 0xffffffffffffffef, 0x1b, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_17_0)


roriw_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0xfffffffffffffeff), rs1:x13(0xffffffffffffffdf), imm:0x1d
    TEST_IMM_OP(roriw, x19, x13, 0xfffffffffffffeff, 0xffffffffffffffdf, 0x1d, x1, 0, x2)

roriw_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0xfffffffffffffeff), rs1:x12(0xffffffffffffffbf), imm:0x1e
    TEST_IMM_OP(roriw, x20, x12, 0xfffffffffffffeff, 0xffffffffffffffbf, 0x1e, x1, 8, x2)

roriw_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffff7f), rs1:x11(0xffffffffffffff7f), imm:0x0
    TEST_IMM_OP(roriw, x21, x11, 0xffffffffffffff7f, 0xffffffffffffff7f, 0x0, x1, 16, x2)

roriw_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0xfffffffffeffffff), rs1:x10(0xfffffffffffffeff), imm:0x10
    TEST_IMM_OP(roriw, x22, x10, 0xfffffffffeffffff, 0xfffffffffffffeff, 0x10, x1, 24, x2)

roriw_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0xfffffffffffffffd), rs1:x9(0xfffffffffffffdff), imm:0x8
    TEST_IMM_OP(roriw, x23, x9, 0xfffffffffffffffd, 0xfffffffffffffdff, 0x8, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_18_0)


roriw_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffbf), rs1:x8(0xfffffffffffffbff), imm:0x4
    TEST_IMM_OP(roriw, x24, x8, 0xffffffffffffffbf, 0xfffffffffffffbff, 0x4, x1, 0, x2)

roriw_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0xfffffffffffffdff), rs1:x7(0xfffffffffffff7ff), imm:0x2
    TEST_IMM_OP(roriw, x25, x7, 0xfffffffffffffdff, 0xfffffffffffff7ff, 0x2, x1, 8, x2)

roriw_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0xfffffffffffff7ff), rs1:x6(0xffffffffffffefff), imm:0x1
    TEST_IMM_OP(roriw, x26, x6, 0xfffffffffffff7ff, 0xffffffffffffefff, 0x1, x1, 16, x2)

roriw_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0xfffffffffffffbff), rs1:x5(0xffffffffffffdfff), imm:0x3
    TEST_IMM_OP(roriw, x27, x5, 0xfffffffffffffbff, 0xffffffffffffdfff, 0x3, x1, 24, x2)

roriw_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0xfffffffffff7ffff), rs1:x4(0xffffffffffffbfff), imm:0x1b
    TEST_IMM_OP(roriw, x28, x4, 0xfffffffffff7ffff, 0xffffffffffffbfff, 0x1b, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x4,signature_19_0)


roriw_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffff7fff), rs1:x3(0xffffffffffff7fff), imm:0x0
    TEST_IMM_OP(roriw, x29, x3, 0xffffffffffff7fff, 0xffffffffffff7fff, 0x0, x4, 0, x5)

roriw_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffdfff), rs1:x2(0xfffffffffffeffff), imm:0x3
    TEST_IMM_OP(roriw, x30, x2, 0xffffffffffffdfff, 0xfffffffffffeffff, 0x3, x4, 8, x5)

roriw_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0xfffffffffffffffb), rs1:x1(0xfffffffffffdffff), imm:0xf
    TEST_IMM_OP(roriw, x31, x1, 0xfffffffffffffffb, 0xfffffffffffdffff, 0xf, x4, 16, x5)

roriw_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0xfffffffffffffff7), rs1:x31(0xfffffffffffbffff), imm:0xf
    TEST_IMM_OP(roriw, x1, x31, 0xfffffffffffffff7, 0xfffffffffffbffff, 0xf, x4, 24, x5)

roriw_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0xfffffffffffffeff), rs1:x30(0xfffffffffff7ffff), imm:0xb
    TEST_IMM_OP(roriw, x2, x30, 0xfffffffffffffeff, 0xfffffffffff7ffff, 0xb, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_20_0)


roriw_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0xfffffffffdffffff), rs1:x29(0xffffffffffefffff), imm:0x1b
    TEST_IMM_OP(roriw, x3, x29, 0xfffffffffdffffff, 0xffffffffffefffff, 0x1b, x1, 0, x2)

roriw_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffefffff), rs1:x28(0xffffffffffdfffff), imm:0x1
    TEST_IMM_OP(roriw, x4, x28, 0xffffffffffefffff, 0xffffffffffdfffff, 0x1, x1, 8, x2)

roriw_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0xfffffffffffffffd), rs1:x27(0xffffffffffbfffff), imm:0x15
    TEST_IMM_OP(roriw, x5, x27, 0xfffffffffffffffd, 0xffffffffffbfffff, 0x15, x1, 16, x2)

roriw_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0xfffffffffeffffff), rs1:x26(0xffffffffff7fffff), imm:0x1f
    TEST_IMM_OP(roriw, x6, x26, 0xfffffffffeffffff, 0xffffffffff7fffff, 0x1f, x1, 24, x2)

roriw_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0xfffffffffffffdff), rs1:x25(0xfffffffffeffffff), imm:0xf
    TEST_IMM_OP(roriw, x7, x25, 0xfffffffffffffdff, 0xfffffffffeffffff, 0xf, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_21_0)


roriw_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0xfffffffffffffffb), rs1:x24(0xfffffffffdffffff), imm:0x17
    TEST_IMM_OP(roriw, x8, x24, 0xfffffffffffffffb, 0xfffffffffdffffff, 0x17, x1, 0, x2)

roriw_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0x000000007fffffff), rs1:x23(0xfffffffffbffffff), imm:0x1b
    TEST_IMM_OP(roriw, x9, x23, 0x000000007fffffff, 0xfffffffffbffffff, 0x1b, x1, 8, x2)

roriw_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0xffffffffbfffffff), rs1:x22(0xfffffffff7ffffff), imm:0x1d
    TEST_IMM_OP(roriw, x10, x22, 0xffffffffbfffffff, 0xfffffffff7ffffff, 0x1d, x1, 16, x2)

roriw_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0xffffffffbfffffff), rs1:x21(0xffffffffefffffff), imm:0x1e
    TEST_IMM_OP(roriw, x11, x21, 0xffffffffbfffffff, 0xffffffffefffffff, 0x1e, x1, 24, x2)

roriw_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0xffffffffdfffffff), rs1:x20(0xffffffffdfffffff), imm:0x0
    TEST_IMM_OP(roriw, x12, x20, 0xffffffffdfffffff, 0xffffffffdfffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x5,signature_22_0)


roriw_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffbfff), rs1:x19(0xffffffffbfffffff), imm:0x10
    TEST_IMM_OP(roriw, x13, x19, 0xffffffffffffbfff, 0xffffffffbfffffff, 0x10, x5, 0, x6)

roriw_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0xffffffffff7fffff), rs1:x18(0xffffffff7fffffff), imm:0x8
    TEST_IMM_OP(roriw, x14, x18, 0xffffffffff7fffff, 0xffffffff7fffffff, 0x8, x5, 8, x6)

roriw_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0xfffffffeffffffff), imm:0x4
    TEST_IMM_OP(roriw, x15, x17, 0xffffffffffffffff, 0xfffffffeffffffff, 0x4, x5, 16, x6)

roriw_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xfffffffdffffffff), imm:0x2
    TEST_IMM_OP(roriw, x16, x16, 0xffffffffffffffff, 0xfffffffdffffffff, 0x2, x5, 24, x6)

roriw_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffffffff), rs1:x15(0xfffffffbffffffff), imm:0x1
    TEST_IMM_OP(roriw, x17, x15, 0xffffffffffffffff, 0xfffffffbffffffff, 0x1, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_23_0)


roriw_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffff), rs1:x14(0xfffffff7ffffffff), imm:0x3
    TEST_IMM_OP(roriw, x18, x14, 0xffffffffffffffff, 0xfffffff7ffffffff, 0x3, x1, 0, x2)

roriw_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffff), rs1:x13(0xffffffefffffffff), imm:0x1b
    TEST_IMM_OP(roriw, x19, x13, 0xffffffffffffffff, 0xffffffefffffffff, 0x1b, x1, 8, x2)

roriw_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffff), rs1:x12(0xffffffdfffffffff), imm:0x0
    TEST_IMM_OP(roriw, x20, x12, 0xffffffffffffffff, 0xffffffdfffffffff, 0x0, x1, 16, x2)

roriw_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0xffffffbfffffffff), imm:0x3
    TEST_IMM_OP(roriw, x21, x11, 0xffffffffffffffff, 0xffffffbfffffffff, 0x3, x1, 24, x2)

roriw_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xffffff7fffffffff), imm:0xf
    TEST_IMM_OP(roriw, x22, x10, 0xffffffffffffffff, 0xffffff7fffffffff, 0xf, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_24_0)


roriw_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffffffff), rs1:x9(0xfffffeffffffffff), imm:0xf
    TEST_IMM_OP(roriw, x23, x9, 0xffffffffffffffff, 0xfffffeffffffffff, 0xf, x1, 0, x2)

roriw_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffff), rs1:x8(0xfffffdffffffffff), imm:0xb
    TEST_IMM_OP(roriw, x24, x8, 0xffffffffffffffff, 0xfffffdffffffffff, 0xb, x1, 8, x2)

roriw_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffff), rs1:x7(0xfffffbffffffffff), imm:0x1b
    TEST_IMM_OP(roriw, x25, x7, 0xffffffffffffffff, 0xfffffbffffffffff, 0x1b, x1, 16, x2)

roriw_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffff), rs1:x6(0xfffff7ffffffffff), imm:0x1
    TEST_IMM_OP(roriw, x26, x6, 0xffffffffffffffff, 0xfffff7ffffffffff, 0x1, x1, 24, x2)

roriw_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffffff), rs1:x5(0xffffefffffffffff), imm:0x15
    TEST_IMM_OP(roriw, x27, x5, 0xffffffffffffffff, 0xffffefffffffffff, 0x15, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x5,signature_25_0)


roriw_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffffff), rs1:x4(0xffffdfffffffffff), imm:0x1f
    TEST_IMM_OP(roriw, x28, x4, 0xffffffffffffffff, 0xffffdfffffffffff, 0x1f, x5, 0, x6)

roriw_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffffff), rs1:x3(0xffffbfffffffffff), imm:0xf
    TEST_IMM_OP(roriw, x29, x3, 0xffffffffffffffff, 0xffffbfffffffffff, 0xf, x5, 8, x6)

roriw_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffffff), rs1:x2(0xffff7fffffffffff), imm:0x17
    TEST_IMM_OP(roriw, x30, x2, 0xffffffffffffffff, 0xffff7fffffffffff, 0x17, x5, 16, x6)

roriw_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffffff), rs1:x1(0xfffeffffffffffff), imm:0x1b
    TEST_IMM_OP(roriw, x31, x1, 0xffffffffffffffff, 0xfffeffffffffffff, 0x1b, x5, 24, x6)

roriw_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffffff), rs1:x31(0xfffdffffffffffff), imm:0x1d
    TEST_IMM_OP(roriw, x1, x31, 0xffffffffffffffff, 0xfffdffffffffffff, 0x1d, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_26_0)


roriw_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffffff), rs1:x30(0xfffbffffffffffff), imm:0x1e
    TEST_IMM_OP(roriw, x2, x30, 0xffffffffffffffff, 0xfffbffffffffffff, 0x1e, x1, 0, x7)

roriw_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffffff), rs1:x29(0xfff7ffffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x3, x29, 0xffffffffffffffff, 0xfff7ffffffffffff, 0x0, x1, 8, x7)

roriw_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffffffff), rs1:x28(0xffefffffffffffff), imm:0x10
    TEST_IMM_OP(roriw, x4, x28, 0xffffffffffffffff, 0xffefffffffffffff, 0x10, x1, 16, x7)

roriw_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffffffff), rs1:x27(0xffdfffffffffffff), imm:0x8
    TEST_IMM_OP(roriw, x5, x27, 0xffffffffffffffff, 0xffdfffffffffffff, 0x8, x1, 24, x7)

roriw_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffffffff), rs1:x26(0xffbfffffffffffff), imm:0x4
    TEST_IMM_OP(roriw, x6, x26, 0xffffffffffffffff, 0xffbfffffffffffff, 0x4, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_27_0)


roriw_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffffffff), rs1:x25(0xff7fffffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x7, x25, 0xffffffffffffffff, 0xff7fffffffffffff, 0x0, x1, 0, x2)

roriw_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffffffff), rs1:x24(0xfeffffffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x8, x24, 0xffffffffffffffff, 0xfeffffffffffffff, 0x0, x1, 8, x2)

roriw_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffffffff), rs1:x23(0xfdffffffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x9, x23, 0xffffffffffffffff, 0xfdffffffffffffff, 0x0, x1, 16, x2)

roriw_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffffffff), rs1:x22(0xfbffffffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x10, x22, 0xffffffffffffffff, 0xfbffffffffffffff, 0x0, x1, 24, x2)

roriw_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffffff), rs1:x21(0xf7ffffffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x11, x21, 0xffffffffffffffff, 0xf7ffffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x6,signature_28_0)


roriw_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffffff), rs1:x20(0xefffffffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x12, x20, 0xffffffffffffffff, 0xefffffffffffffff, 0x0, x6, 0, x7)

roriw_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffffff), rs1:x19(0xdfffffffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x13, x19, 0xffffffffffffffff, 0xdfffffffffffffff, 0x0, x6, 8, x7)

roriw_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0xbfffffffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x14, x18, 0xffffffffffffffff, 0xbfffffffffffffff, 0x0, x6, 16, x7)

roriw_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0x7fffffffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x15, x17, 0xffffffffffffffff, 0x7fffffffffffffff, 0x0, x6, 24, x7)

roriw_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xffffffffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x16, x16, 0xffffffffffffffff, 0xffffffffffffffff, 0x0, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_29_0)


roriw_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000001), rs1:x15(0x0000000000000001), imm:0x0
    TEST_IMM_OP(roriw, x17, x15, 0x0000000000000001, 0x1, 0x0, x1, 0, x2)

roriw_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000002), rs1:x14(0x0000000000000002), imm:0x0
    TEST_IMM_OP(roriw, x18, x14, 0x0000000000000002, 0x2, 0x0, x1, 8, x2)

roriw_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000004), rs1:x13(0x0000000000000004), imm:0x0
    TEST_IMM_OP(roriw, x19, x13, 0x0000000000000004, 0x4, 0x0, x1, 16, x2)

roriw_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000008), rs1:x12(0x0000000000000008), imm:0x0
    TEST_IMM_OP(roriw, x20, x12, 0x0000000000000008, 0x8, 0x0, x1, 24, x2)

roriw_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000010), rs1:x11(0x0000000000000010), imm:0x0
    TEST_IMM_OP(roriw, x21, x11, 0x0000000000000010, 0x10, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_30_0)


roriw_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000020), rs1:x10(0x0000000000000020), imm:0x0
    TEST_IMM_OP(roriw, x22, x10, 0x0000000000000020, 0x20, 0x0, x1, 0, x2)

roriw_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000040), rs1:x9(0x0000000000000040), imm:0x0
    TEST_IMM_OP(roriw, x23, x9, 0x0000000000000040, 0x40, 0x0, x1, 8, x2)

roriw_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000080), rs1:x8(0x0000000000000080), imm:0x0
    TEST_IMM_OP(roriw, x24, x8, 0x0000000000000080, 0x80, 0x0, x1, 16, x2)

roriw_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000100), rs1:x7(0x0000000000000100), imm:0x0
    TEST_IMM_OP(roriw, x25, x7, 0x0000000000000100, 0x100, 0x0, x1, 24, x2)

roriw_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000200), rs1:x6(0x0000000000000200), imm:0x0
    TEST_IMM_OP(roriw, x26, x6, 0x0000000000000200, 0x200, 0x0, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x6,signature_31_0)


roriw_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000400), rs1:x5(0x0000000000000400), imm:0x0
    TEST_IMM_OP(roriw, x27, x5, 0x0000000000000400, 0x400, 0x0, x6, 0, x7)

roriw_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000800), rs1:x4(0x0000000000000800), imm:0x0
    TEST_IMM_OP(roriw, x28, x4, 0x0000000000000800, 0x800, 0x0, x6, 8, x7)

roriw_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0000000000001000), rs1:x3(0x0000000000001000), imm:0x0
    TEST_IMM_OP(roriw, x29, x3, 0x0000000000001000, 0x1000, 0x0, x6, 16, x7)

roriw_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000000002000), rs1:x2(0x0000000000002000), imm:0x0
    TEST_IMM_OP(roriw, x30, x2, 0x0000000000002000, 0x2000, 0x0, x6, 24, x7)

roriw_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0000000000004000), rs1:x1(0x0000000000004000), imm:0x0
    TEST_IMM_OP(roriw, x31, x1, 0x0000000000004000, 0x4000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x6,signature_32_0)


roriw_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000000008000), rs1:x31(0x0000000000008000), imm:0x0
    TEST_IMM_OP(roriw, x1, x31, 0x0000000000008000, 0x8000, 0x0, x6, 0, x7)

roriw_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000000000010000), rs1:x30(0x0000000000010000), imm:0x0
    TEST_IMM_OP(roriw, x2, x30, 0x0000000000010000, 0x10000, 0x0, x6, 8, x7)

roriw_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000000020000), rs1:x29(0x0000000000020000), imm:0x0
    TEST_IMM_OP(roriw, x3, x29, 0x0000000000020000, 0x20000, 0x0, x6, 16, x7)

roriw_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000000040000), rs1:x28(0x0000000000040000), imm:0x0
    TEST_IMM_OP(roriw, x4, x28, 0x0000000000040000, 0x40000, 0x0, x6, 24, x7)

roriw_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000000080000), rs1:x27(0x0000000000080000), imm:0x0
    TEST_IMM_OP(roriw, x5, x27, 0x0000000000080000, 0x80000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_33_0)


roriw_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000000100000), rs1:x26(0x0000000000100000), imm:0x0
    TEST_IMM_OP(roriw, x6, x26, 0x0000000000100000, 0x100000, 0x0, x1, 0, x2)

roriw_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000000200000), rs1:x25(0x0000000000200000), imm:0x0
    TEST_IMM_OP(roriw, x7, x25, 0x0000000000200000, 0x200000, 0x0, x1, 8, x2)

roriw_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000000400000), rs1:x24(0x0000000000400000), imm:0x0
    TEST_IMM_OP(roriw, x8, x24, 0x0000000000400000, 0x400000, 0x0, x1, 16, x2)

roriw_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000000800000), rs1:x23(0x0000000000800000), imm:0x0
    TEST_IMM_OP(roriw, x9, x23, 0x0000000000800000, 0x800000, 0x0, x1, 24, x2)

roriw_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000001000000), rs1:x22(0x0000000001000000), imm:0x0
    TEST_IMM_OP(roriw, x10, x22, 0x0000000001000000, 0x1000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_34_0)


roriw_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000002000000), rs1:x21(0x0000000002000000), imm:0x0
    TEST_IMM_OP(roriw, x11, x21, 0x0000000002000000, 0x2000000, 0x0, x1, 0, x7)

roriw_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000004000000), rs1:x20(0x0000000004000000), imm:0x0
    TEST_IMM_OP(roriw, x12, x20, 0x0000000004000000, 0x4000000, 0x0, x1, 8, x7)

roriw_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000008000000), rs1:x19(0x0000000008000000), imm:0x0
    TEST_IMM_OP(roriw, x13, x19, 0x0000000008000000, 0x8000000, 0x0, x1, 16, x7)

roriw_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000010000000), rs1:x18(0x0000000010000000), imm:0x0
    TEST_IMM_OP(roriw, x14, x18, 0x0000000010000000, 0x10000000, 0x0, x1, 24, x7)

roriw_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000020000000), rs1:x17(0x0000000020000000), imm:0x0
    TEST_IMM_OP(roriw, x15, x17, 0x0000000020000000, 0x20000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x2,signature_35_0)


roriw_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000040000000), rs1:x16(0x0000000040000000), imm:0x0
    TEST_IMM_OP(roriw, x16, x16, 0x0000000040000000, 0x40000000, 0x0, x2, 0, x3)

roriw_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0xffffffff80000000), rs1:x15(0x0000000080000000), imm:0x0
    TEST_IMM_OP(roriw, x17, x15, 0xffffffff80000000, 0x80000000, 0x0, x2, 8, x3)

roriw_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000000100000000), imm:0x0
    TEST_IMM_OP(roriw, x18, x14, 0x0000000000000000, 0x100000000, 0x0, x2, 16, x3)

roriw_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000200000000), imm:0x0
    TEST_IMM_OP(roriw, x19, x13, 0x0000000000000000, 0x200000000, 0x0, x2, 24, x3)

roriw_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000000400000000), imm:0x0
    TEST_IMM_OP(roriw, x20, x12, 0x0000000000000000, 0x400000000, 0x0, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_36_0)


roriw_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000800000000), imm:0x0
    TEST_IMM_OP(roriw, x21, x11, 0x0000000000000000, 0x800000000, 0x0, x1, 0, x2)

roriw_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000001000000000), imm:0x0
    TEST_IMM_OP(roriw, x22, x10, 0x0000000000000000, 0x1000000000, 0x0, x1, 8, x2)

roriw_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000002000000000), imm:0x0
    TEST_IMM_OP(roriw, x23, x9, 0x0000000000000000, 0x2000000000, 0x0, x1, 16, x2)

roriw_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000004000000000), imm:0x0
    TEST_IMM_OP(roriw, x24, x8, 0x0000000000000000, 0x4000000000, 0x0, x1, 24, x2)

roriw_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000008000000000), imm:0x0
    TEST_IMM_OP(roriw, x25, x7, 0x0000000000000000, 0x8000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_37_0)


roriw_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000010000000000), imm:0x0
    TEST_IMM_OP(roriw, x26, x6, 0x0000000000000000, 0x10000000000, 0x0, x1, 0, x7)

roriw_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000020000000000), imm:0x0
    TEST_IMM_OP(roriw, x27, x5, 0x0000000000000000, 0x20000000000, 0x0, x1, 8, x7)

roriw_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000040000000000), imm:0x0
    TEST_IMM_OP(roriw, x28, x4, 0x0000000000000000, 0x40000000000, 0x0, x1, 16, x7)

roriw_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000080000000000), imm:0x0
    TEST_IMM_OP(roriw, x29, x3, 0x0000000000000000, 0x80000000000, 0x0, x1, 24, x7)

roriw_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000100000000000), imm:0x0
    TEST_IMM_OP(roriw, x30, x2, 0x0000000000000000, 0x100000000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x5,signature_38_0)


roriw_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000200000000000), imm:0x0
    TEST_IMM_OP(roriw, x31, x1, 0x0000000000000000, 0x200000000000, 0x0, x5, 0, x6)

roriw_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000400000000000), imm:0x0
    TEST_IMM_OP(roriw, x1, x31, 0x0000000000000000, 0x400000000000, 0x0, x5, 8, x6)

roriw_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000800000000000), imm:0x0
    TEST_IMM_OP(roriw, x2, x30, 0x0000000000000000, 0x800000000000, 0x0, x5, 16, x6)

roriw_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0001000000000000), imm:0x0
    TEST_IMM_OP(roriw, x3, x29, 0x0000000000000000, 0x1000000000000, 0x0, x5, 24, x6)

roriw_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0002000000000000), imm:0x0
    TEST_IMM_OP(roriw, x4, x28, 0x0000000000000000, 0x2000000000000, 0x0, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_39_0)


roriw_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0004000000000000), imm:0x0
    TEST_IMM_OP(roriw, x5, x27, 0x0000000000000000, 0x4000000000000, 0x0, x1, 0, x2)

roriw_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0008000000000000), imm:0x0
    TEST_IMM_OP(roriw, x6, x26, 0x0000000000000000, 0x8000000000000, 0x0, x1, 8, x2)

roriw_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0010000000000000), imm:0x0
    TEST_IMM_OP(roriw, x7, x25, 0x0000000000000000, 0x10000000000000, 0x0, x1, 16, x2)

roriw_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0020000000000000), imm:0x0
    TEST_IMM_OP(roriw, x8, x24, 0x0000000000000000, 0x20000000000000, 0x0, x1, 24, x2)

roriw_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0040000000000000), imm:0x0
    TEST_IMM_OP(roriw, x9, x23, 0x0000000000000000, 0x40000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_40_0)


roriw_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0080000000000000), imm:0x0
    TEST_IMM_OP(roriw, x10, x22, 0x0000000000000000, 0x80000000000000, 0x0, x1, 0, x2)

roriw_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0100000000000000), imm:0x0
    TEST_IMM_OP(roriw, x11, x21, 0x0000000000000000, 0x100000000000000, 0x0, x1, 8, x2)

roriw_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0200000000000000), imm:0x0
    TEST_IMM_OP(roriw, x12, x20, 0x0000000000000000, 0x200000000000000, 0x0, x1, 16, x2)

roriw_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0400000000000000), imm:0x0
    TEST_IMM_OP(roriw, x13, x19, 0x0000000000000000, 0x400000000000000, 0x0, x1, 24, x2)

roriw_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0800000000000000), imm:0x0
    TEST_IMM_OP(roriw, x14, x18, 0x0000000000000000, 0x800000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x3,signature_41_0)


roriw_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x1000000000000000), imm:0x0
    TEST_IMM_OP(roriw, x15, x17, 0x0000000000000000, 0x1000000000000000, 0x0, x3, 0, x4)

roriw_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x2000000000000000), imm:0x0
    TEST_IMM_OP(roriw, x16, x16, 0x0000000000000000, 0x2000000000000000, 0x0, x3, 8, x4)

roriw_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x4000000000000000), imm:0x0
    TEST_IMM_OP(roriw, x17, x15, 0x0000000000000000, 0x4000000000000000, 0x0, x3, 16, x4)

roriw_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x8000000000000000), imm:0x0
    TEST_IMM_OP(roriw, x18, x14, 0x0000000000000000, 0x8000000000000000, 0x0, x3, 24, x4)

roriw_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000), imm:0x0
    TEST_IMM_OP(roriw, x19, x13, 0x0000000000000000, 0x0, 0x0, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_42_0)


roriw_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0xfffffffffffffffe), rs1:x12(0xfffffffffffffffe), imm:0x0
    TEST_IMM_OP(roriw, x20, x12, 0xfffffffffffffffe, 0xfffffffffffffffe, 0x0, x1, 0, x2)

roriw_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0xfffffffffffffffd), rs1:x11(0xfffffffffffffffd), imm:0x0
    TEST_IMM_OP(roriw, x21, x11, 0xfffffffffffffffd, 0xfffffffffffffffd, 0x0, x1, 8, x2)

roriw_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0xfffffffffffffffb), rs1:x10(0xfffffffffffffffb), imm:0x0
    TEST_IMM_OP(roriw, x22, x10, 0xfffffffffffffffb, 0xfffffffffffffffb, 0x0, x1, 16, x2)

roriw_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0xfffffffffffffff7), rs1:x9(0xfffffffffffffff7), imm:0x0
    TEST_IMM_OP(roriw, x23, x9, 0xfffffffffffffff7, 0xfffffffffffffff7, 0x0, x1, 24, x2)

roriw_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffef), rs1:x8(0xffffffffffffffef), imm:0x0
    TEST_IMM_OP(roriw, x24, x8, 0xffffffffffffffef, 0xffffffffffffffef, 0x0, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_43_0)


roriw_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffdf), rs1:x7(0xffffffffffffffdf), imm:0x0
    TEST_IMM_OP(roriw, x25, x7, 0xffffffffffffffdf, 0xffffffffffffffdf, 0x0, x1, 0, x2)

roriw_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffbf), rs1:x6(0xffffffffffffffbf), imm:0x0
    TEST_IMM_OP(roriw, x26, x6, 0xffffffffffffffbf, 0xffffffffffffffbf, 0x0, x1, 8, x2)

roriw_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffff7f), rs1:x5(0xffffffffffffff7f), imm:0x0
    TEST_IMM_OP(roriw, x27, x5, 0xffffffffffffff7f, 0xffffffffffffff7f, 0x0, x1, 16, x2)

roriw_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0xfffffffffffffeff), rs1:x4(0xfffffffffffffeff), imm:0x0
    TEST_IMM_OP(roriw, x28, x4, 0xfffffffffffffeff, 0xfffffffffffffeff, 0x0, x1, 24, x2)

roriw_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0xfffffffffffffdff), rs1:x3(0xfffffffffffffdff), imm:0x0
    TEST_IMM_OP(roriw, x29, x3, 0xfffffffffffffdff, 0xfffffffffffffdff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x4,signature_44_0)


roriw_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0xfffffffffffffbff), rs1:x2(0xfffffffffffffbff), imm:0x0
    TEST_IMM_OP(roriw, x30, x2, 0xfffffffffffffbff, 0xfffffffffffffbff, 0x0, x4, 0, x5)

roriw_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0xfffffffffffff7ff), rs1:x1(0xfffffffffffff7ff), imm:0x0
    TEST_IMM_OP(roriw, x31, x1, 0xfffffffffffff7ff, 0xfffffffffffff7ff, 0x0, x4, 8, x5)

roriw_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffefff), rs1:x31(0xffffffffffffefff), imm:0x0
    TEST_IMM_OP(roriw, x1, x31, 0xffffffffffffefff, 0xffffffffffffefff, 0x0, x4, 16, x5)

roriw_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffdfff), rs1:x30(0xffffffffffffdfff), imm:0x0
    TEST_IMM_OP(roriw, x2, x30, 0xffffffffffffdfff, 0xffffffffffffdfff, 0x0, x4, 24, x5)

roriw_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffbfff), rs1:x29(0xffffffffffffbfff), imm:0x0
    TEST_IMM_OP(roriw, x3, x29, 0xffffffffffffbfff, 0xffffffffffffbfff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_45_0)


roriw_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffff7fff), rs1:x28(0xffffffffffff7fff), imm:0x0
    TEST_IMM_OP(roriw, x4, x28, 0xffffffffffff7fff, 0xffffffffffff7fff, 0x0, x1, 0, x2)

roriw_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0xfffffffffffeffff), rs1:x27(0xfffffffffffeffff), imm:0x0
    TEST_IMM_OP(roriw, x5, x27, 0xfffffffffffeffff, 0xfffffffffffeffff, 0x0, x1, 8, x2)

roriw_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0xfffffffffffdffff), rs1:x26(0xfffffffffffdffff), imm:0x0
    TEST_IMM_OP(roriw, x6, x26, 0xfffffffffffdffff, 0xfffffffffffdffff, 0x0, x1, 16, x2)

roriw_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0xfffffffffffbffff), rs1:x25(0xfffffffffffbffff), imm:0x0
    TEST_IMM_OP(roriw, x7, x25, 0xfffffffffffbffff, 0xfffffffffffbffff, 0x0, x1, 24, x2)

roriw_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0xfffffffffff7ffff), rs1:x24(0xfffffffffff7ffff), imm:0x0
    TEST_IMM_OP(roriw, x8, x24, 0xfffffffffff7ffff, 0xfffffffffff7ffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_46_0)


roriw_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffefffff), rs1:x23(0xffffffffffefffff), imm:0x0
    TEST_IMM_OP(roriw, x9, x23, 0xffffffffffefffff, 0xffffffffffefffff, 0x0, x1, 0, x2)

roriw_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffdfffff), rs1:x22(0xffffffffffdfffff), imm:0x0
    TEST_IMM_OP(roriw, x10, x22, 0xffffffffffdfffff, 0xffffffffffdfffff, 0x0, x1, 8, x2)

roriw_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffbfffff), rs1:x21(0xffffffffffbfffff), imm:0x0
    TEST_IMM_OP(roriw, x11, x21, 0xffffffffffbfffff, 0xffffffffffbfffff, 0x0, x1, 16, x2)

roriw_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0xffffffffff7fffff), rs1:x20(0xffffffffff7fffff), imm:0x0
    TEST_IMM_OP(roriw, x12, x20, 0xffffffffff7fffff, 0xffffffffff7fffff, 0x0, x1, 24, x2)

roriw_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0xfffffffffeffffff), rs1:x19(0xfffffffffeffffff), imm:0x0
    TEST_IMM_OP(roriw, x13, x19, 0xfffffffffeffffff, 0xfffffffffeffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x4,signature_47_0)


roriw_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0xfffffffffdffffff), rs1:x18(0xfffffffffdffffff), imm:0x0
    TEST_IMM_OP(roriw, x14, x18, 0xfffffffffdffffff, 0xfffffffffdffffff, 0x0, x4, 0, x5)

roriw_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0xfffffffffbffffff), rs1:x17(0xfffffffffbffffff), imm:0x0
    TEST_IMM_OP(roriw, x15, x17, 0xfffffffffbffffff, 0xfffffffffbffffff, 0x0, x4, 8, x5)

roriw_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0xfffffffff7ffffff), rs1:x16(0xfffffffff7ffffff), imm:0x0
    TEST_IMM_OP(roriw, x16, x16, 0xfffffffff7ffffff, 0xfffffffff7ffffff, 0x0, x4, 16, x5)

roriw_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0xffffffffefffffff), rs1:x15(0xffffffffefffffff), imm:0x0
    TEST_IMM_OP(roriw, x17, x15, 0xffffffffefffffff, 0xffffffffefffffff, 0x0, x4, 24, x5)

roriw_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0xffffffffdfffffff), rs1:x14(0xffffffffdfffffff), imm:0x0
    TEST_IMM_OP(roriw, x18, x14, 0xffffffffdfffffff, 0xffffffffdfffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_48_0)


roriw_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0xffffffffbfffffff), rs1:x13(0xffffffffbfffffff), imm:0x0
    TEST_IMM_OP(roriw, x19, x13, 0xffffffffbfffffff, 0xffffffffbfffffff, 0x0, x1, 0, x2)

roriw_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0x000000007fffffff), rs1:x12(0xffffffff7fffffff), imm:0x0
    TEST_IMM_OP(roriw, x20, x12, 0x000000007fffffff, 0xffffffff7fffffff, 0x0, x1, 8, x2)

roriw_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0xfffffffeffffffff), imm:0x0
    TEST_IMM_OP(roriw, x21, x11, 0xffffffffffffffff, 0xfffffffeffffffff, 0x0, x1, 16, x2)

roriw_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xfffffffdffffffff), imm:0x0
    TEST_IMM_OP(roriw, x22, x10, 0xffffffffffffffff, 0xfffffffdffffffff, 0x0, x1, 24, x2)

roriw_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffffffff), rs1:x9(0xfffffffbffffffff), imm:0x0
    TEST_IMM_OP(roriw, x23, x9, 0xffffffffffffffff, 0xfffffffbffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_49_0)


roriw_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffff), rs1:x8(0xfffffff7ffffffff), imm:0x0
    TEST_IMM_OP(roriw, x24, x8, 0xffffffffffffffff, 0xfffffff7ffffffff, 0x0, x1, 0, x2)

roriw_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffff), rs1:x7(0xffffffefffffffff), imm:0x0
    TEST_IMM_OP(roriw, x25, x7, 0xffffffffffffffff, 0xffffffefffffffff, 0x0, x1, 8, x2)

roriw_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffff), rs1:x6(0xffffffdfffffffff), imm:0x0
    TEST_IMM_OP(roriw, x26, x6, 0xffffffffffffffff, 0xffffffdfffffffff, 0x0, x1, 16, x2)

roriw_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffffff), rs1:x5(0xffffffbfffffffff), imm:0x0
    TEST_IMM_OP(roriw, x27, x5, 0xffffffffffffffff, 0xffffffbfffffffff, 0x0, x1, 24, x2)

roriw_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffffff), rs1:x4(0xffffff7fffffffff), imm:0x0
    TEST_IMM_OP(roriw, x28, x4, 0xffffffffffffffff, 0xffffff7fffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x4,signature_50_0)


roriw_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffffff), rs1:x3(0xfffffeffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x29, x3, 0xffffffffffffffff, 0xfffffeffffffffff, 0x0, x4, 0, x5)

roriw_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffffff), rs1:x2(0xfffffdffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x30, x2, 0xffffffffffffffff, 0xfffffdffffffffff, 0x0, x4, 8, x5)

roriw_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffffff), rs1:x1(0xfffffbffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x31, x1, 0xffffffffffffffff, 0xfffffbffffffffff, 0x0, x4, 16, x5)

roriw_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffffff), rs1:x31(0xfffff7ffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x1, x31, 0xffffffffffffffff, 0xfffff7ffffffffff, 0x0, x4, 24, x5)

roriw_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffffff), rs1:x30(0xffffefffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x2, x30, 0xffffffffffffffff, 0xffffefffffffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_51_0)


roriw_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffffff), rs1:x29(0xffffdfffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x3, x29, 0xffffffffffffffff, 0xffffdfffffffffff, 0x0, x1, 0, x2)

roriw_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffffffff), rs1:x28(0xffffbfffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x4, x28, 0xffffffffffffffff, 0xffffbfffffffffff, 0x0, x1, 8, x2)

roriw_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffffffff), rs1:x27(0xffff7fffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x5, x27, 0xffffffffffffffff, 0xffff7fffffffffff, 0x0, x1, 16, x2)

roriw_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffffffff), rs1:x26(0xfffeffffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x6, x26, 0xffffffffffffffff, 0xfffeffffffffffff, 0x0, x1, 24, x2)

roriw_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffffffff), rs1:x25(0xfffdffffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x7, x25, 0xffffffffffffffff, 0xfffdffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_52_0)


roriw_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffffffff), rs1:x24(0xfffbffffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x8, x24, 0xffffffffffffffff, 0xfffbffffffffffff, 0x0, x1, 0, x2)

roriw_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffffffff), rs1:x23(0xfff7ffffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x9, x23, 0xffffffffffffffff, 0xfff7ffffffffffff, 0x0, x1, 8, x2)

roriw_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffffffff), rs1:x22(0xffefffffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x10, x22, 0xffffffffffffffff, 0xffefffffffffffff, 0x0, x1, 16, x2)

roriw_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffffff), rs1:x21(0xffdfffffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x11, x21, 0xffffffffffffffff, 0xffdfffffffffffff, 0x0, x1, 24, x2)

roriw_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffffff), rs1:x20(0xffbfffffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x12, x20, 0xffffffffffffffff, 0xffbfffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x5,signature_53_0)


roriw_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffffff), rs1:x19(0xff7fffffffffffff), imm:0x8
    TEST_IMM_OP(roriw, x13, x19, 0xffffffffffffffff, 0xff7fffffffffffff, 0x8, x5, 0, x6)

roriw_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0xfeffffffffffffff), imm:0x4
    TEST_IMM_OP(roriw, x14, x18, 0xffffffffffffffff, 0xfeffffffffffffff, 0x4, x5, 8, x6)

roriw_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0xfdffffffffffffff), imm:0x2
    TEST_IMM_OP(roriw, x15, x17, 0xffffffffffffffff, 0xfdffffffffffffff, 0x2, x5, 16, x6)

roriw_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xfbffffffffffffff), imm:0x1
    TEST_IMM_OP(roriw, x16, x16, 0xffffffffffffffff, 0xfbffffffffffffff, 0x1, x5, 24, x6)

roriw_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffffffff), rs1:x15(0xf7ffffffffffffff), imm:0x3
    TEST_IMM_OP(roriw, x17, x15, 0xffffffffffffffff, 0xf7ffffffffffffff, 0x3, x5, 32, x6)

    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_54_0)


roriw_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffff), rs1:x14(0xefffffffffffffff), imm:0x1b
    TEST_IMM_OP(roriw, x18, x14, 0xffffffffffffffff, 0xefffffffffffffff, 0x1b, x1, 0, x2)

roriw_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffff), rs1:x13(0xdfffffffffffffff), imm:0x0
    TEST_IMM_OP(roriw, x19, x13, 0xffffffffffffffff, 0xdfffffffffffffff, 0x0, x1, 8, x2)

roriw_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffff), rs1:x12(0xbfffffffffffffff), imm:0x3
    TEST_IMM_OP(roriw, x20, x12, 0xffffffffffffffff, 0xbfffffffffffffff, 0x3, x1, 16, x2)

roriw_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0x7fffffffffffffff), imm:0xf
    TEST_IMM_OP(roriw, x21, x11, 0xffffffffffffffff, 0x7fffffffffffffff, 0xf, x1, 24, x2)

roriw_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xffffffffffffffff), imm:0xf
    TEST_IMM_OP(roriw, x22, x10, 0xffffffffffffffff, 0xffffffffffffffff, 0xf, x1, 32, x2)

    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",roriw)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",roriw)

	RVTEST_SIGBASE(x1,signature_55_0)


roriw_01_inst_270:
    // Test 270:  Test with random values
    // result rd:x23(0x0000000032b5bd4a), rs1:x9(0x10fd3dedadea5195), imm:0xb
    TEST_IMM_OP(roriw, x23, x9, 0x0000000032b5bd4a, 0x10fd3dedadea5195, 0xb, x1, 0, x2)

roriw_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1), imm:0x1b
    TEST_IMM_OP(roriw, x0, x8, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0x1b, x1, 8, x2)

roriw_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0xffffffffd470d45d), rs1:x7(0xc9649f05a8e1a8bb), imm:0x1
    TEST_IMM_OP(roriw, x25, x7, 0xffffffffd470d45d, 0xc9649f05a8e1a8bb, 0x1, x1, 16, x2)

roriw_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb), imm:0x15
    TEST_IMM_OP(roriw, x26, x0, 0x0000000000000000, 0x3541291848c99fcb, 0x15, x1, 24, x2)
	
#endif


RVTEST_CODE_END roriw_01_code_end
RVTEST_CODE_BEGIN aes64esm_01_init aes64esm_01_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x6,signature_1_0)


aes64esm_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x57053b30d1f1100c), rs1:x31(0x10fd3dedadea5195), rs2:x16(0xdf7f3844121bcc23)
    TEST_RR_OP(aes64esm, x1, x31, x16, 0x57053b30d1f1100c, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x6, 0, x7)

aes64esm_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x9da7064eeae61037), rs1:x30(0xbd295ce2d2ffbec1), rs2:x15(0xf5adb41aa47d105b)
    TEST_RR_OP(aes64esm, x2, x30, x15, 0x9da7064eeae61037, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x6, 8, x7)

aes64esm_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0xe93b66d602ab2170), rs1:x29(0xc9649f05a8e1a8bb), rs2:x14(0x82f6747f707af2c0)
    TEST_RR_OP(aes64esm, x3, x29, x14, 0xe93b66d602ab2170, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x6, 16, x7)

aes64esm_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x94e98fd19518fd51), rs1:x28(0x3541291848c99fcb), rs2:x13(0x73a92fd4e19bfbc3)
    TEST_RR_OP(aes64esm, x4, x28, x13, 0x94e98fd19518fd51, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x6, 24, x7)

aes64esm_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x1ad35d7209b87db6), rs1:x27(0x10a24740461d524f), rs2:x12(0x546b0e54528a10af)
    TEST_RR_OP(aes64esm, x5, x27, x12, 0x1ad35d7209b87db6, 0x10a24740461d524f, 0x546b0e54528a10af, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_2_0)


aes64esm_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x5a546e7a0bc4097a), rs1:x26(0x546b0e54528a10af), rs2:x11(0x10a24740461d524f)
    TEST_RR_OP(aes64esm, x6, x26, x11, 0x5a546e7a0bc4097a, 0x546b0e54528a10af, 0x10a24740461d524f, x1, 0, x2)

aes64esm_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x6b9d839d8d3bee28), rs1:x25(0x73a92fd4e19bfbc3), rs2:x10(0x3541291848c99fcb)
    TEST_RR_OP(aes64esm, x7, x25, x10, 0x6b9d839d8d3bee28, 0x73a92fd4e19bfbc3, 0x3541291848c99fcb, x1, 8, x2)

aes64esm_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x4e65d9f01ebf4be7), rs1:x24(0x82f6747f707af2c0), rs2:x9(0xc9649f05a8e1a8bb)
    TEST_RR_OP(aes64esm, x8, x24, x9, 0x4e65d9f01ebf4be7, 0x82f6747f707af2c0, 0xc9649f05a8e1a8bb, x1, 16, x2)

aes64esm_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0x6486585a24167892), rs1:x23(0xf5adb41aa47d105b), rs2:x8(0xbd295ce2d2ffbec1)
    TEST_RR_OP(aes64esm, x9, x23, x8, 0x6486585a24167892, 0xf5adb41aa47d105b, 0xbd295ce2d2ffbec1, x1, 24, x2)

aes64esm_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0x212297c365717008), rs1:x22(0xdf7f3844121bcc23), rs2:x7(0x10fd3dedadea5195)
    TEST_RR_OP(aes64esm, x10, x22, x7, 0x212297c365717008, 0xdf7f3844121bcc23, 0x10fd3dedadea5195, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_3_0)


aes64esm_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x63fc1689dd09965d), rs1:x21(0x0000000000000001), rs2:x6(0xffffffffffffffff)
    TEST_RR_OP(aes64esm, x11, x21, x6, 0x63fc1689dd09965d, 0x1, 0xffffffffffffffff, x1, 0, x7)

aes64esm_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x63fc16895355598f), rs1:x20(0x0000000000000002), rs2:x5(0x7fffffffffffffff)
    TEST_RR_OP(aes64esm, x12, x20, x5, 0x63fc16895355598f, 0x2, 0x7fffffffffffffff, x1, 8, x7)

aes64esm_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x63fc168968a50644), rs1:x19(0x0000000000000004), rs2:x4(0xbfffffffffffffff)
    TEST_RR_OP(aes64esm, x13, x19, x4, 0x63fc168968a50644, 0x4, 0xbfffffffffffffff, x1, 16, x7)

aes64esm_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x63fc168902c6524d), rs1:x18(0x0000000000000008), rs2:x3(0xdfffffffffffffff)
    TEST_RR_OP(aes64esm, x14, x18, x3, 0x63fc168902c6524d, 0x8, 0xdfffffffffffffff, x1, 24, x7)

aes64esm_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x63fc168995ffe9e3), rs1:x17(0x0000000000000010), rs2:x2(0xefffffffffffffff)
    TEST_RR_OP(aes64esm, x15, x17, x2, 0x63fc168995ffe9e3, 0x10, 0xefffffffffffffff, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x2,signature_4_0)


aes64esm_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x63fc1689674023ae), rs1:x16(0x0000000000000020), rs2:x1(0xf7ffffffffffffff)
    TEST_RR_OP(aes64esm, x16, x16, x1, 0x63fc1689674023ae, 0x20, 0xf7ffffffffffffff, x2, 0, x3)

aes64esm_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x63fc16897057faae), rs1:x15(0x0000000000000040), rs2:x31(0xfbffffffffffffff)
    TEST_RR_OP(aes64esm, x17, x15, x31, 0x63fc16897057faae, 0x40, 0xfbffffffffffffff, x2, 8, x3)

aes64esm_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x63fc1689917e6566), rs1:x14(0x0000000000000080), rs2:x30(0xfdffffffffffffff)
    TEST_RR_OP(aes64esm, x18, x14, x30, 0x63fc1689917e6566, 0x80, 0xfdffffffffffffff, x2, 16, x3)

aes64esm_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x63fc1689bdfa24ce), rs1:x13(0x0000000000000100), rs2:x29(0xfeffffffffffffff)
    TEST_RR_OP(aes64esm, x19, x13, x29, 0x63fc1689bdfa24ce, 0x100, 0xfeffffffffffffff, x2, 24, x3)

aes64esm_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0xa76f414dfc168963), rs1:x12(0x0000000000000200), rs2:x28(0xff7fffffffffffff)
    TEST_RR_OP(aes64esm, x20, x12, x28, 0xa76f414dfc168963, 0x200, 0xff7fffffffffffff, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_5_0)


aes64esm_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x7dc03497fc168963), rs1:x11(0x0000000000000400), rs2:x27(0xffbfffffffffffff)
    TEST_RR_OP(aes64esm, x21, x11, x27, 0x7dc03497fc168963, 0x400, 0xffbfffffffffffff, x1, 0, x2)

aes64esm_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0xebf79501fc168963), rs1:x10(0x0000000000000800), rs2:x26(0xffdfffffffffffff)
    TEST_RR_OP(aes64esm, x22, x10, x26, 0xebf79501fc168963, 0x800, 0xffdfffffffffffff, x1, 8, x2)

aes64esm_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0xaa755640fc168963), rs1:x9(0x0000000000001000), rs2:x25(0xffefffffffffffff)
    TEST_RR_OP(aes64esm, x23, x9, x25, 0xaa755640fc168963, 0x1000, 0xffefffffffffffff, x1, 16, x2)

aes64esm_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x1d0094f7fc168963), rs1:x8(0x0000000000002000), rs2:x24(0xfff7ffffffffffff)
    TEST_RR_OP(aes64esm, x24, x8, x24, 0x1d0094f7fc168963, 0x2000, 0xfff7ffffffffffff, x1, 24, x2)

aes64esm_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x7ace3d90fc168963), rs1:x7(0x0000000000004000), rs2:x23(0xfffbffffffffffff)
    TEST_RR_OP(aes64esm, x25, x7, x23, 0x7ace3d90fc168963, 0x4000, 0xfffbffffffffffff, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_6_0)


aes64esm_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x2178d0cbfc168963), rs1:x6(0x0000000000008000), rs2:x22(0xfffdffffffffffff)
    TEST_RR_OP(aes64esm, x26, x6, x22, 0x2178d0cbfc168963, 0x8000, 0xfffdffffffffffff, x1, 0, x7)

aes64esm_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0xcebdfa24fc168963), rs1:x5(0x0000000000010000), rs2:x21(0xfffeffffffffffff)
    TEST_RR_OP(aes64esm, x27, x5, x21, 0xcebdfa24fc168963, 0x10000, 0xfffeffffffffffff, x1, 8, x7)

aes64esm_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x63fc1689fc168963), rs1:x4(0x0000000000020000), rs2:x20(0xffff7fffffffffff)
    TEST_RR_OP(aes64esm, x28, x4, x20, 0x63fc1689fc168963, 0x20000, 0xffff7fffffffffff, x1, 16, x7)

aes64esm_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x63fc1689fc168963), rs1:x3(0x0000000000040000), rs2:x19(0xffffbfffffffffff)
    TEST_RR_OP(aes64esm, x29, x3, x19, 0x63fc1689fc168963, 0x40000, 0xffffbfffffffffff, x1, 24, x7)

aes64esm_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x63fc1689fc168963), rs1:x2(0x0000000000080000), rs2:x18(0xffffdfffffffffff)
    TEST_RR_OP(aes64esm, x30, x2, x18, 0x63fc1689fc168963, 0x80000, 0xffffdfffffffffff, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x5,signature_7_0)


aes64esm_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x63fc1689fc168963), rs1:x1(0x0000000000100000), rs2:x17(0xffffefffffffffff)
    TEST_RR_OP(aes64esm, x31, x1, x17, 0x63fc1689fc168963, 0x100000, 0xffffefffffffffff, x5, 0, x6)

aes64esm_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x63fc1689fc168963), rs1:x31(0x0000000000200000), rs2:x16(0xfffff7ffffffffff)
    TEST_RR_OP(aes64esm, x1, x31, x16, 0x63fc1689fc168963, 0x200000, 0xfffff7ffffffffff, x5, 8, x6)

aes64esm_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x63fc1689fc168963), rs1:x30(0x0000000000400000), rs2:x15(0xfffffbffffffffff)
    TEST_RR_OP(aes64esm, x2, x30, x15, 0x63fc1689fc168963, 0x400000, 0xfffffbffffffffff, x5, 16, x6)

aes64esm_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x63fc1689fc168963), rs1:x29(0x0000000000800000), rs2:x14(0xfffffdffffffffff)
    TEST_RR_OP(aes64esm, x3, x29, x14, 0x63fc1689fc168963, 0x800000, 0xfffffdffffffffff, x5, 24, x6)

aes64esm_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x5ddd0996fc168963), rs1:x28(0x0000000001000000), rs2:x13(0xfffffeffffffffff)
    TEST_RR_OP(aes64esm, x4, x28, x13, 0x5ddd0996fc168963, 0x1000000, 0xfffffeffffffffff, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_8_0)


aes64esm_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x4bc0029dfc168963), rs1:x27(0x0000000002000000), rs2:x12(0xffffff7fffffffff)
    TEST_RR_OP(aes64esm, x5, x27, x12, 0x4bc0029dfc168963, 0x2000000, 0xffffff7fffffffff, x1, 0, x2)

aes64esm_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x5a548718fc168963), rs1:x26(0x0000000004000000), rs2:x11(0xffffffbfffffffff)
    TEST_RR_OP(aes64esm, x6, x26, x11, 0x5a548718fc168963, 0x4000000, 0xffffffbfffffffff, x1, 8, x2)

aes64esm_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0xc50945dafc168963), rs1:x25(0x0000000008000000), rs2:x10(0xffffffdfffffffff)
    TEST_RR_OP(aes64esm, x7, x25, x10, 0xc50945dafc168963, 0x8000000, 0xffffffdfffffffff, x1, 16, x2)

aes64esm_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x2a1cbf20fc168963), rs1:x24(0x0000000010000000), rs2:x9(0xffffffefffffffff)
    TEST_RR_OP(aes64esm, x8, x24, x9, 0x2a1cbf20fc168963, 0x10000000, 0xffffffefffffffff, x1, 24, x2)

aes64esm_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0xd09bc25dfc168963), rs1:x23(0x0000000020000000), rs2:x8(0xfffffff7ffffffff)
    TEST_RR_OP(aes64esm, x9, x23, x8, 0xd09bc25dfc168963, 0x20000000, 0xfffffff7ffffffff, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_9_0)


aes64esm_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0xb7427ce3fc168963), rs1:x22(0x0000000040000000), rs2:x7(0xfffffffbffffffff)
    TEST_RR_OP(aes64esm, x10, x22, x7, 0xb7427ce3fc168963, 0x40000000, 0xfffffffbffffffff, x1, 0, x2)

aes64esm_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x2415b827fc168963), rs1:x21(0x0000000080000000), rs2:x6(0xfffffffdffffffff)
    TEST_RR_OP(aes64esm, x11, x21, x6, 0x2415b827fc168963, 0x80000000, 0xfffffffdffffffff, x1, 8, x2)

aes64esm_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x42e309b7fc168963), rs1:x20(0x0000000100000000), rs2:x5(0xfffffffeffffffff)
    TEST_RR_OP(aes64esm, x12, x20, x5, 0x42e309b7fc168963, 0x100000000, 0xfffffffeffffffff, x1, 16, x2)

aes64esm_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x5fe802a1fc168963), rs1:x19(0x0000000200000000), rs2:x4(0xffffffff7fffffff)
    TEST_RR_OP(aes64esm, x13, x19, x4, 0x5fe802a1fc168963, 0x200000000, 0xffffffff7fffffff, x1, 24, x2)

aes64esm_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0xcb6d87b0fc168963), rs1:x18(0x0000000400000000), rs2:x3(0xffffffffbfffffff)
    TEST_RR_OP(aes64esm, x14, x18, x3, 0xcb6d87b0fc168963, 0x400000000, 0xffffffffbfffffff, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x3,signature_10_0)


aes64esm_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x96af452ffc168963), rs1:x17(0x0000000800000000), rs2:x2(0xffffffffdfffffff)
    TEST_RR_OP(aes64esm, x15, x17, x2, 0x96af452ffc168963, 0x800000000, 0xffffffffdfffffff, x3, 0, x4)

aes64esm_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x8355bfc0fc168963), rs1:x16(0x0000001000000000), rs2:x1(0xffffffffefffffff)
    TEST_RR_OP(aes64esm, x16, x16, x1, 0x8355bfc0fc168963, 0x1000000000, 0xffffffffefffffff, x3, 8, x4)

aes64esm_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0428c23afc168963), rs1:x15(0x0000002000000000), rs2:x31(0xfffffffff7ffffff)
    TEST_RR_OP(aes64esm, x17, x15, x31, 0x0428c23afc168963, 0x2000000000, 0xfffffffff7ffffff, x3, 16, x4)

aes64esm_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0xdd967c5dfc168963), rs1:x14(0x0000004000000000), rs2:x30(0xfffffffffbffffff)
    TEST_RR_OP(aes64esm, x18, x14, x30, 0xdd967c5dfc168963, 0x4000000000, 0xfffffffffbffffff, x3, 24, x4)

aes64esm_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x8a52b8cefc168963), rs1:x13(0x0000008000000000), rs2:x29(0xfffffffffdffffff)
    TEST_RR_OP(aes64esm, x19, x13, x29, 0x8a52b8cefc168963, 0x8000000000, 0xfffffffffdffffff, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_11_0)


aes64esm_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x63fc1689e309b742), rs1:x12(0x0000010000000000), rs2:x28(0xfffffffffeffffff)
    TEST_RR_OP(aes64esm, x20, x12, x28, 0x63fc1689e309b742, 0x10000000000, 0xfffffffffeffffff, x1, 0, x2)

aes64esm_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x63fc16892c91f69b), rs1:x11(0x0000020000000000), rs2:x27(0xffffffffff7fffff)
    TEST_RR_OP(aes64esm, x21, x11, x27, 0x63fc16892c91f69b, 0x20000000000, 0xffffffffff7fffff, x1, 8, x2)

aes64esm_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x63fc168973bb92d5), rs1:x10(0x0000040000000000), rs2:x26(0xffffffffffbfffff)
    TEST_RR_OP(aes64esm, x22, x10, x26, 0x63fc168973bb92d5, 0x40000000000, 0xffffffffffbfffff, x1, 16, x2)

aes64esm_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x63fc1689274eac1e), rs1:x9(0x0000080000000000), rs2:x25(0xffffffffffdfffff)
    TEST_RR_OP(aes64esm, x23, x9, x25, 0x63fc1689274eac1e, 0x80000000000, 0xffffffffffdfffff, x1, 24, x2)

aes64esm_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x63fc16899c36804a), rs1:x8(0x0000100000000000), rs2:x24(0xffffffffffefffff)
    TEST_RR_OP(aes64esm, x24, x8, x24, 0x63fc16899c36804a, 0x100000000000, 0xffffffffffefffff, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_12_0)


aes64esm_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x63fc1689563eb87a), rs1:x7(0x0000200000000000), rs2:x23(0xfffffffffff7ffff)
    TEST_RR_OP(aes64esm, x25, x7, x23, 0x63fc1689563eb87a, 0x200000000000, 0xfffffffffff7ffff, x1, 0, x2)

aes64esm_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x63fc16898f4e76c4), rs1:x6(0x0000400000000000), rs2:x22(0xfffffffffffbffff)
    TEST_RR_OP(aes64esm, x26, x6, x22, 0x63fc16898f4e76c4, 0x400000000000, 0xfffffffffffbffff, x1, 8, x2)

aes64esm_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x63fc1689103c08c8), rs1:x5(0x0000800000000000), rs2:x21(0xfffffffffffdffff)
    TEST_RR_OP(aes64esm, x27, x5, x21, 0x63fc1689103c08c8, 0x800000000000, 0xfffffffffffdffff, x1, 16, x2)

aes64esm_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x63fc1689515765ce), rs1:x4(0x0001000000000000), rs2:x20(0xfffffffffffeffff)
    TEST_RR_OP(aes64esm, x28, x4, x20, 0x63fc1689515765ce, 0x1000000000000, 0xfffffffffffeffff, x1, 24, x2)

aes64esm_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0xa73885defc168963), rs1:x3(0x0002000000000000), rs2:x19(0xffffffffffff7fff)
    TEST_RR_OP(aes64esm, x29, x3, x19, 0xa73885defc168963, 0x2000000000000, 0xffffffffffff7fff, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x4,signature_13_0)


aes64esm_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x7de22aabfc168963), rs1:x2(0x0004000000000000), rs2:x18(0xffffffffffffbfff)
    TEST_RR_OP(aes64esm, x30, x2, x18, 0x7de22aabfc168963, 0x4000000000000, 0xffffffffffffbfff, x4, 0, x5)

aes64esm_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0xeb741d0afc168963), rs1:x1(0x0008000000000000), rs2:x17(0xffffffffffffdfff)
    TEST_RR_OP(aes64esm, x31, x1, x17, 0xeb741d0afc168963, 0x8000000000000, 0xffffffffffffdfff, x4, 8, x5)

aes64esm_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0xaa359fc9fc168963), rs1:x31(0x0010000000000000), rs2:x16(0xffffffffffffefff)
    TEST_RR_OP(aes64esm, x1, x31, x16, 0xaa359fc9fc168963, 0x10000000000000, 0xffffffffffffefff, x4, 16, x5)

aes64esm_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x1d82ea0bfc168963), rs1:x30(0x0020000000000000), rs2:x15(0xfffffffffffff7ff)
    TEST_RR_OP(aes64esm, x2, x30, x15, 0x1d82ea0bfc168963, 0x20000000000000, 0xfffffffffffff7ff, x4, 24, x5)

aes64esm_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x7ae524a2fc168963), rs1:x29(0x0040000000000000), rs2:x14(0xfffffffffffffbff)
    TEST_RR_OP(aes64esm, x3, x29, x14, 0x7ae524a2fc168963, 0x40000000000000, 0xfffffffffffffbff, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_14_0)


aes64esm_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x21be924ffc168963), rs1:x28(0x0080000000000000), rs2:x13(0xfffffffffffffdff)
    TEST_RR_OP(aes64esm, x4, x28, x13, 0x21be924ffc168963, 0x80000000000000, 0xfffffffffffffdff, x1, 0, x2)

aes64esm_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0xce515765fc168963), rs1:x27(0x0100000000000000), rs2:x12(0xfffffffffffffeff)
    TEST_RR_OP(aes64esm, x5, x27, x12, 0xce515765fc168963, 0x100000000000000, 0xfffffffffffffeff, x1, 8, x2)

aes64esm_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x63fc1689fc168963), rs1:x26(0x0200000000000000), rs2:x11(0xffffffffffffff7f)
    TEST_RR_OP(aes64esm, x6, x26, x11, 0x63fc1689fc168963, 0x200000000000000, 0xffffffffffffff7f, x1, 16, x2)

aes64esm_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x63fc1689fc168963), rs1:x25(0x0400000000000000), rs2:x10(0xffffffffffffffbf)
    TEST_RR_OP(aes64esm, x7, x25, x10, 0x63fc1689fc168963, 0x400000000000000, 0xffffffffffffffbf, x1, 24, x2)

aes64esm_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x63fc1689fc168963), rs1:x24(0x0800000000000000), rs2:x9(0xffffffffffffffdf)
    TEST_RR_OP(aes64esm, x8, x24, x9, 0x63fc1689fc168963, 0x800000000000000, 0xffffffffffffffdf, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_15_0)


aes64esm_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x63fc1689fc168963), rs1:x23(0x1000000000000000), rs2:x8(0xffffffffffffffef)
    TEST_RR_OP(aes64esm, x9, x23, x8, 0x63fc1689fc168963, 0x1000000000000000, 0xffffffffffffffef, x1, 0, x2)

aes64esm_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x63fc1689fc168963), rs1:x22(0x2000000000000000), rs2:x7(0xfffffffffffffff7)
    TEST_RR_OP(aes64esm, x10, x22, x7, 0x63fc1689fc168963, 0x2000000000000000, 0xfffffffffffffff7, x1, 8, x2)

aes64esm_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x63fc1689fc168963), rs1:x21(0x4000000000000000), rs2:x6(0xfffffffffffffffb)
    TEST_RR_OP(aes64esm, x11, x21, x6, 0x63fc1689fc168963, 0x4000000000000000, 0xfffffffffffffffb, x1, 16, x2)

aes64esm_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x63fc1689fc168963), rs1:x20(0x8000000000000000), rs2:x5(0xfffffffffffffffd)
    TEST_RR_OP(aes64esm, x12, x20, x5, 0x63fc1689fc168963, 0x8000000000000000, 0xfffffffffffffffd, x1, 24, x2)

aes64esm_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x63fc1689fc168963), rs1:x19(0x0000000000000000), rs2:x4(0xfffffffffffffffe)
    TEST_RR_OP(aes64esm, x13, x19, x4, 0x63fc1689fc168963, 0x0, 0xfffffffffffffffe, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x4,signature_16_0)


aes64esm_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0x168963fc65ce5157), rs1:x18(0xfffffffffffffffe), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64esm, x14, x18, x3, 0x168963fc65ce5157, 0xfffffffffffffffe, 0x0, x4, 0, x5)

aes64esm_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0x168963fc08c8103c), rs1:x17(0xfffffffffffffffd), rs2:x2(0x8000000000000000)
    TEST_RR_OP(aes64esm, x15, x17, x2, 0x168963fc08c8103c, 0xfffffffffffffffd, 0x8000000000000000, x4, 8, x5)

aes64esm_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0x168963fc76c48f4e), rs1:x16(0xfffffffffffffffb), rs2:x1(0x4000000000000000)
    TEST_RR_OP(aes64esm, x16, x16, x1, 0x168963fc76c48f4e, 0xfffffffffffffffb, 0x4000000000000000, x4, 16, x5)

aes64esm_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0x168963fcb87a563e), rs1:x15(0xfffffffffffffff7), rs2:x31(0x2000000000000000)
    TEST_RR_OP(aes64esm, x17, x15, x31, 0x168963fcb87a563e, 0xfffffffffffffff7, 0x2000000000000000, x4, 24, x5)

aes64esm_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0x168963fc804a9c36), rs1:x14(0xffffffffffffffef), rs2:x30(0x1000000000000000)
    TEST_RR_OP(aes64esm, x18, x14, x30, 0x168963fc804a9c36, 0xffffffffffffffef, 0x1000000000000000, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_17_0)


aes64esm_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0x168963fcac1e274e), rs1:x13(0xffffffffffffffdf), rs2:x29(0x0800000000000000)
    TEST_RR_OP(aes64esm, x19, x13, x29, 0x168963fcac1e274e, 0xffffffffffffffdf, 0x800000000000000, x1, 0, x2)

aes64esm_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0x168963fc92d573bb), rs1:x12(0xffffffffffffffbf), rs2:x28(0x0400000000000000)
    TEST_RR_OP(aes64esm, x20, x12, x28, 0x168963fc92d573bb, 0xffffffffffffffbf, 0x400000000000000, x1, 8, x2)

aes64esm_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0x168963fcf69b2c91), rs1:x11(0xffffffffffffff7f), rs2:x27(0x0200000000000000)
    TEST_RR_OP(aes64esm, x21, x11, x27, 0x168963fcf69b2c91, 0xffffffffffffff7f, 0x200000000000000, x1, 16, x2)

aes64esm_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0x168963fcb742e309), rs1:x10(0xfffffffffffffeff), rs2:x26(0x0100000000000000)
    TEST_RR_OP(aes64esm, x22, x10, x26, 0x168963fcb742e309, 0xfffffffffffffeff, 0x100000000000000, x1, 24, x2)

aes64esm_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0xb8ce8a528963fc16), rs1:x9(0xfffffffffffffdff), rs2:x25(0x0080000000000000)
    TEST_RR_OP(aes64esm, x23, x9, x25, 0xb8ce8a528963fc16, 0xfffffffffffffdff, 0x80000000000000, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_18_0)


aes64esm_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0x7c5ddd968963fc16), rs1:x8(0xfffffffffffffbff), rs2:x24(0x0040000000000000)
    TEST_RR_OP(aes64esm, x24, x8, x24, 0x7c5ddd968963fc16, 0xfffffffffffffbff, 0x40000000000000, x1, 0, x2)

aes64esm_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0xc23a04288963fc16), rs1:x7(0xfffffffffffff7ff), rs2:x23(0x0020000000000000)
    TEST_RR_OP(aes64esm, x25, x7, x23, 0xc23a04288963fc16, 0xfffffffffffff7ff, 0x20000000000000, x1, 8, x2)

aes64esm_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0xbfc083558963fc16), rs1:x6(0xffffffffffffefff), rs2:x22(0x0010000000000000)
    TEST_RR_OP(aes64esm, x26, x6, x22, 0xbfc083558963fc16, 0xffffffffffffefff, 0x10000000000000, x1, 16, x2)

aes64esm_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0x452f96af8963fc16), rs1:x5(0xffffffffffffdfff), rs2:x21(0x0008000000000000)
    TEST_RR_OP(aes64esm, x27, x5, x21, 0x452f96af8963fc16, 0xffffffffffffdfff, 0x8000000000000, x1, 24, x2)

aes64esm_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0x87b0cb6d8963fc16), rs1:x4(0xffffffffffffbfff), rs2:x20(0x0004000000000000)
    TEST_RR_OP(aes64esm, x28, x4, x20, 0x87b0cb6d8963fc16, 0xffffffffffffbfff, 0x4000000000000, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x4,signature_19_0)


aes64esm_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0x02a15fe88963fc16), rs1:x3(0xffffffffffff7fff), rs2:x19(0x0002000000000000)
    TEST_RR_OP(aes64esm, x29, x3, x19, 0x02a15fe88963fc16, 0xffffffffffff7fff, 0x2000000000000, x4, 0, x5)

aes64esm_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0x09b742e38963fc16), rs1:x2(0xfffffffffffeffff), rs2:x18(0x0001000000000000)
    TEST_RR_OP(aes64esm, x30, x2, x18, 0x09b742e38963fc16, 0xfffffffffffeffff, 0x1000000000000, x4, 8, x5)

aes64esm_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0x168963fc8963fc16), rs1:x1(0xfffffffffffdffff), rs2:x17(0x0000800000000000)
    TEST_RR_OP(aes64esm, x31, x1, x17, 0x168963fc8963fc16, 0xfffffffffffdffff, 0x800000000000, x4, 16, x5)

aes64esm_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0x168963fc8963fc16), rs1:x31(0xfffffffffffbffff), rs2:x16(0x0000400000000000)
    TEST_RR_OP(aes64esm, x1, x31, x16, 0x168963fc8963fc16, 0xfffffffffffbffff, 0x400000000000, x4, 24, x5)

aes64esm_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0x168963fc8963fc16), rs1:x30(0xfffffffffff7ffff), rs2:x15(0x0000200000000000)
    TEST_RR_OP(aes64esm, x2, x30, x15, 0x168963fc8963fc16, 0xfffffffffff7ffff, 0x200000000000, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_20_0)


aes64esm_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0x168963fc8963fc16), rs1:x29(0xffffffffffefffff), rs2:x14(0x0000100000000000)
    TEST_RR_OP(aes64esm, x3, x29, x14, 0x168963fc8963fc16, 0xffffffffffefffff, 0x100000000000, x1, 0, x2)

aes64esm_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0x168963fc8963fc16), rs1:x28(0xffffffffffdfffff), rs2:x13(0x0000080000000000)
    TEST_RR_OP(aes64esm, x4, x28, x13, 0x168963fc8963fc16, 0xffffffffffdfffff, 0x80000000000, x1, 8, x2)

aes64esm_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0x168963fc8963fc16), rs1:x27(0xffffffffffbfffff), rs2:x12(0x0000040000000000)
    TEST_RR_OP(aes64esm, x5, x27, x12, 0x168963fc8963fc16, 0xffffffffffbfffff, 0x40000000000, x1, 16, x2)

aes64esm_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0x168963fc8963fc16), rs1:x26(0xffffffffff7fffff), rs2:x11(0x0000020000000000)
    TEST_RR_OP(aes64esm, x6, x26, x11, 0x168963fc8963fc16, 0xffffffffff7fffff, 0x20000000000, x1, 24, x2)

aes64esm_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0x5765ce518963fc16), rs1:x25(0xfffffffffeffffff), rs2:x10(0x0000010000000000)
    TEST_RR_OP(aes64esm, x7, x25, x10, 0x5765ce518963fc16, 0xfffffffffeffffff, 0x10000000000, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_21_0)


aes64esm_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0x924f21be8963fc16), rs1:x24(0xfffffffffdffffff), rs2:x9(0x0000008000000000)
    TEST_RR_OP(aes64esm, x8, x24, x9, 0x924f21be8963fc16, 0xfffffffffdffffff, 0x8000000000, x1, 0, x2)

aes64esm_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0x24a27ae58963fc16), rs1:x23(0xfffffffffbffffff), rs2:x8(0x0000004000000000)
    TEST_RR_OP(aes64esm, x9, x23, x8, 0x24a27ae58963fc16, 0xfffffffffbffffff, 0x4000000000, x1, 8, x2)

aes64esm_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0xea0b1d828963fc16), rs1:x22(0xfffffffff7ffffff), rs2:x7(0x0000002000000000)
    TEST_RR_OP(aes64esm, x10, x22, x7, 0xea0b1d828963fc16, 0xfffffffff7ffffff, 0x2000000000, x1, 16, x2)

aes64esm_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0x9fc9aa358963fc16), rs1:x21(0xffffffffefffffff), rs2:x6(0x0000001000000000)
    TEST_RR_OP(aes64esm, x11, x21, x6, 0x9fc9aa358963fc16, 0xffffffffefffffff, 0x1000000000, x1, 24, x2)

aes64esm_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0x1d0aeb748963fc16), rs1:x20(0xffffffffdfffffff), rs2:x5(0x0000000800000000)
    TEST_RR_OP(aes64esm, x12, x20, x5, 0x1d0aeb748963fc16, 0xffffffffdfffffff, 0x800000000, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x5,signature_22_0)


aes64esm_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0x2aab7de28963fc16), rs1:x19(0xffffffffbfffffff), rs2:x4(0x0000000400000000)
    TEST_RR_OP(aes64esm, x13, x19, x4, 0x2aab7de28963fc16, 0xffffffffbfffffff, 0x400000000, x5, 0, x6)

aes64esm_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0x85dea7388963fc16), rs1:x18(0xffffffff7fffffff), rs2:x3(0x0000000200000000)
    TEST_RR_OP(aes64esm, x14, x18, x3, 0x85dea7388963fc16, 0xffffffff7fffffff, 0x200000000, x5, 8, x6)

aes64esm_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0xfa24cebd8963fc16), rs1:x17(0xfffffffeffffffff), rs2:x2(0x0000000100000000)
    TEST_RR_OP(aes64esm, x15, x17, x2, 0xfa24cebd8963fc16, 0xfffffffeffffffff, 0x100000000, x5, 16, x6)

aes64esm_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0xd0cb21788963fc16), rs1:x16(0xfffffffdffffffff), rs2:x1(0x0000000080000000)
    TEST_RR_OP(aes64esm, x16, x16, x1, 0xd0cb21788963fc16, 0xfffffffdffffffff, 0x80000000, x5, 24, x6)

aes64esm_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0x3d907ace8963fc16), rs1:x15(0xfffffffbffffffff), rs2:x31(0x0000000040000000)
    TEST_RR_OP(aes64esm, x17, x15, x31, 0x3d907ace8963fc16, 0xfffffffbffffffff, 0x40000000, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_23_0)


aes64esm_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0x94f71d008963fc16), rs1:x14(0xfffffff7ffffffff), rs2:x30(0x0000000020000000)
    TEST_RR_OP(aes64esm, x18, x14, x30, 0x94f71d008963fc16, 0xfffffff7ffffffff, 0x20000000, x1, 0, x2)

aes64esm_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0x5640aa758963fc16), rs1:x13(0xffffffefffffffff), rs2:x29(0x0000000010000000)
    TEST_RR_OP(aes64esm, x19, x13, x29, 0x5640aa758963fc16, 0xffffffefffffffff, 0x10000000, x1, 8, x2)

aes64esm_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0x9501ebf78963fc16), rs1:x12(0xffffffdfffffffff), rs2:x28(0x0000000008000000)
    TEST_RR_OP(aes64esm, x20, x12, x28, 0x9501ebf78963fc16, 0xffffffdfffffffff, 0x8000000, x1, 16, x2)

aes64esm_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0x34977dc08963fc16), rs1:x11(0xffffffbfffffffff), rs2:x27(0x0000000004000000)
    TEST_RR_OP(aes64esm, x21, x11, x27, 0x34977dc08963fc16, 0xffffffbfffffffff, 0x4000000, x1, 24, x2)

aes64esm_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0x414da76f8963fc16), rs1:x10(0xffffff7fffffffff), rs2:x26(0x0000000002000000)
    TEST_RR_OP(aes64esm, x22, x10, x26, 0x414da76f8963fc16, 0xffffff7fffffffff, 0x2000000, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_24_0)


aes64esm_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0x168963fc24cebdfa), rs1:x9(0xfffffeffffffffff), rs2:x25(0x0000000001000000)
    TEST_RR_OP(aes64esm, x23, x9, x25, 0x168963fc24cebdfa, 0xfffffeffffffffff, 0x1000000, x1, 0, x2)

aes64esm_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0x168963fc6566917e), rs1:x8(0xfffffdffffffffff), rs2:x24(0x0000000000800000)
    TEST_RR_OP(aes64esm, x24, x8, x24, 0x168963fc6566917e, 0xfffffdffffffffff, 0x800000, x1, 8, x2)

aes64esm_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0x168963fcfaae7057), rs1:x7(0xfffffbffffffffff), rs2:x23(0x0000000000400000)
    TEST_RR_OP(aes64esm, x25, x7, x23, 0x168963fcfaae7057, 0xfffffbffffffffff, 0x400000, x1, 16, x2)

aes64esm_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0x168963fc23ae6740), rs1:x6(0xfffff7ffffffffff), rs2:x22(0x0000000000200000)
    TEST_RR_OP(aes64esm, x26, x6, x22, 0x168963fc23ae6740, 0xfffff7ffffffffff, 0x200000, x1, 24, x2)

aes64esm_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0x168963fce9e395ff), rs1:x5(0xffffefffffffffff), rs2:x21(0x0000000000100000)
    TEST_RR_OP(aes64esm, x27, x5, x21, 0x168963fce9e395ff, 0xffffefffffffffff, 0x100000, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x5,signature_25_0)


aes64esm_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0x168963fc524d02c6), rs1:x4(0xffffdfffffffffff), rs2:x20(0x0000000000080000)
    TEST_RR_OP(aes64esm, x28, x4, x20, 0x168963fc524d02c6, 0xffffdfffffffffff, 0x80000, x5, 0, x6)

aes64esm_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0x168963fc064468a5), rs1:x3(0xffffbfffffffffff), rs2:x19(0x0000000000040000)
    TEST_RR_OP(aes64esm, x29, x3, x19, 0x168963fc064468a5, 0xffffbfffffffffff, 0x40000, x5, 8, x6)

aes64esm_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0x168963fc598f5355), rs1:x2(0xffff7fffffffffff), rs2:x18(0x0000000000020000)
    TEST_RR_OP(aes64esm, x30, x2, x18, 0x168963fc598f5355, 0xffff7fffffffffff, 0x20000, x5, 16, x6)

aes64esm_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0x168963fc965ddd09), rs1:x1(0xfffeffffffffffff), rs2:x17(0x0000000000010000)
    TEST_RR_OP(aes64esm, x31, x1, x17, 0x168963fc965ddd09, 0xfffeffffffffffff, 0x10000, x5, 24, x6)

aes64esm_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0xb82724158963fc16), rs1:x31(0xfffdffffffffffff), rs2:x16(0x0000000000008000)
    TEST_RR_OP(aes64esm, x1, x31, x16, 0xb82724158963fc16, 0xfffdffffffffffff, 0x8000, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_26_0)


aes64esm_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0x7ce3b7428963fc16), rs1:x30(0xfffbffffffffffff), rs2:x15(0x0000000000004000)
    TEST_RR_OP(aes64esm, x2, x30, x15, 0x7ce3b7428963fc16, 0xfffbffffffffffff, 0x4000, x1, 0, x7)

aes64esm_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0xc25dd09b8963fc16), rs1:x29(0xfff7ffffffffffff), rs2:x14(0x0000000000002000)
    TEST_RR_OP(aes64esm, x3, x29, x14, 0xc25dd09b8963fc16, 0xfff7ffffffffffff, 0x2000, x1, 8, x7)

aes64esm_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0xbf202a1c8963fc16), rs1:x28(0xffefffffffffffff), rs2:x13(0x0000000000001000)
    TEST_RR_OP(aes64esm, x4, x28, x13, 0xbf202a1c8963fc16, 0xffefffffffffffff, 0x1000, x1, 16, x7)

aes64esm_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0x45dac5098963fc16), rs1:x27(0xffdfffffffffffff), rs2:x12(0x0000000000000800)
    TEST_RR_OP(aes64esm, x5, x27, x12, 0x45dac5098963fc16, 0xffdfffffffffffff, 0x800, x1, 24, x7)

aes64esm_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0x87185a548963fc16), rs1:x26(0xffbfffffffffffff), rs2:x11(0x0000000000000400)
    TEST_RR_OP(aes64esm, x6, x26, x11, 0x87185a548963fc16, 0xffbfffffffffffff, 0x400, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_27_0)


aes64esm_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0x029d4bc08963fc16), rs1:x25(0xff7fffffffffffff), rs2:x10(0x0000000000000200)
    TEST_RR_OP(aes64esm, x7, x25, x10, 0x029d4bc08963fc16, 0xff7fffffffffffff, 0x200, x1, 0, x2)

aes64esm_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0x09965ddd8963fc16), rs1:x24(0xfeffffffffffffff), rs2:x9(0x0000000000000100)
    TEST_RR_OP(aes64esm, x8, x24, x9, 0x09965ddd8963fc16, 0xfeffffffffffffff, 0x100, x1, 8, x2)

aes64esm_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0x168963fc8963fc16), rs1:x23(0xfdffffffffffffff), rs2:x8(0x0000000000000080)
    TEST_RR_OP(aes64esm, x9, x23, x8, 0x168963fc8963fc16, 0xfdffffffffffffff, 0x80, x1, 16, x2)

aes64esm_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0x168963fc8963fc16), rs1:x22(0xfbffffffffffffff), rs2:x7(0x0000000000000040)
    TEST_RR_OP(aes64esm, x10, x22, x7, 0x168963fc8963fc16, 0xfbffffffffffffff, 0x40, x1, 24, x2)

aes64esm_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0x168963fc8963fc16), rs1:x21(0xf7ffffffffffffff), rs2:x6(0x0000000000000020)
    TEST_RR_OP(aes64esm, x11, x21, x6, 0x168963fc8963fc16, 0xf7ffffffffffffff, 0x20, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x6,signature_28_0)


aes64esm_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0x168963fc8963fc16), rs1:x20(0xefffffffffffffff), rs2:x5(0x0000000000000010)
    TEST_RR_OP(aes64esm, x12, x20, x5, 0x168963fc8963fc16, 0xefffffffffffffff, 0x10, x6, 0, x7)

aes64esm_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0x168963fc8963fc16), rs1:x19(0xdfffffffffffffff), rs2:x4(0x0000000000000008)
    TEST_RR_OP(aes64esm, x13, x19, x4, 0x168963fc8963fc16, 0xdfffffffffffffff, 0x8, x6, 8, x7)

aes64esm_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0x168963fc8963fc16), rs1:x18(0xbfffffffffffffff), rs2:x3(0x0000000000000004)
    TEST_RR_OP(aes64esm, x14, x18, x3, 0x168963fc8963fc16, 0xbfffffffffffffff, 0x4, x6, 16, x7)

aes64esm_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0x168963fc8963fc16), rs1:x17(0x7fffffffffffffff), rs2:x2(0x0000000000000002)
    TEST_RR_OP(aes64esm, x15, x17, x2, 0x168963fc8963fc16, 0x7fffffffffffffff, 0x2, x6, 24, x7)

aes64esm_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0x168963fc8963fc16), rs1:x16(0xffffffffffffffff), rs2:x1(0x0000000000000001)
    TEST_RR_OP(aes64esm, x16, x16, x1, 0x168963fc8963fc16, 0xffffffffffffffff, 0x1, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_29_0)


aes64esm_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x63636363427c7c5d), rs1:x15(0x0000000000000001), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64esm, x17, x15, x31, 0x63636363427c7c5d, 0x1, 0x0, x1, 0, x2)

aes64esm_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x636363635f77774b), rs1:x14(0x0000000000000002), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64esm, x18, x14, x30, 0x636363635f77774b, 0x2, 0x0, x1, 8, x2)

aes64esm_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x63636363cbf2f25a), rs1:x13(0x0000000000000004), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64esm, x19, x13, x29, 0x63636363cbf2f25a, 0x4, 0x0, x1, 16, x2)

aes64esm_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x63636363963030c5), rs1:x12(0x0000000000000008), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64esm, x20, x12, x28, 0x63636363963030c5, 0x8, 0x0, x1, 24, x2)

aes64esm_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x6363636383caca2a), rs1:x11(0x0000000000000010), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64esm, x21, x11, x27, 0x6363636383caca2a, 0x10, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_30_0)


aes64esm_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x6363636304b7b7d0), rs1:x10(0x0000000000000020), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64esm, x22, x10, x26, 0x6363636304b7b7d0, 0x20, 0x0, x1, 0, x2)

aes64esm_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x63636363dd0909b7), rs1:x9(0x0000000000000040), rs2:x25(0x0000000000000000)
    TEST_RR_OP(aes64esm, x23, x9, x25, 0x63636363dd0909b7, 0x40, 0x0, x1, 8, x2)

aes64esm_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x636363638acdcd24), rs1:x8(0x0000000000000080), rs2:x24(0x0000000000000000)
    TEST_RR_OP(aes64esm, x24, x8, x24, 0x636363638acdcd24, 0x80, 0x0, x1, 16, x2)

aes64esm_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x6363636363636363), rs1:x7(0x0000000000000100), rs2:x23(0x0000000000000000)
    TEST_RR_OP(aes64esm, x25, x7, x23, 0x6363636363636363, 0x100, 0x0, x1, 24, x2)

aes64esm_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x6363636363636363), rs1:x6(0x0000000000000200), rs2:x22(0x0000000000000000)
    TEST_RR_OP(aes64esm, x26, x6, x22, 0x6363636363636363, 0x200, 0x0, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x6,signature_31_0)


aes64esm_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x6363636363636363), rs1:x5(0x0000000000000400), rs2:x21(0x0000000000000000)
    TEST_RR_OP(aes64esm, x27, x5, x21, 0x6363636363636363, 0x400, 0x0, x6, 0, x7)

aes64esm_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x6363636363636363), rs1:x4(0x0000000000000800), rs2:x20(0x0000000000000000)
    TEST_RR_OP(aes64esm, x28, x4, x20, 0x6363636363636363, 0x800, 0x0, x6, 8, x7)

aes64esm_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x6363636363636363), rs1:x3(0x0000000000001000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(aes64esm, x29, x3, x19, 0x6363636363636363, 0x1000, 0x0, x6, 16, x7)

aes64esm_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x6363636363636363), rs1:x2(0x0000000000002000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(aes64esm, x30, x2, x18, 0x6363636363636363, 0x2000, 0x0, x6, 24, x7)

aes64esm_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x6363636363636363), rs1:x1(0x0000000000004000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(aes64esm, x31, x1, x17, 0x6363636363636363, 0x4000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x6,signature_32_0)


aes64esm_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x6363636363636363), rs1:x31(0x0000000000008000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(aes64esm, x1, x31, x16, 0x6363636363636363, 0x8000, 0x0, x6, 0, x7)

aes64esm_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x6363636363636363), rs1:x30(0x0000000000010000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(aes64esm, x2, x30, x15, 0x6363636363636363, 0x10000, 0x0, x6, 8, x7)

aes64esm_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x6363636363636363), rs1:x29(0x0000000000020000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(aes64esm, x3, x29, x14, 0x6363636363636363, 0x20000, 0x0, x6, 16, x7)

aes64esm_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x6363636363636363), rs1:x28(0x0000000000040000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(aes64esm, x4, x28, x13, 0x6363636363636363, 0x40000, 0x0, x6, 24, x7)

aes64esm_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x6363636363636363), rs1:x27(0x0000000000080000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(aes64esm, x5, x27, x12, 0x6363636363636363, 0x80000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_33_0)


aes64esm_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x6363636363636363), rs1:x26(0x0000000000100000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(aes64esm, x6, x26, x11, 0x6363636363636363, 0x100000, 0x0, x1, 0, x2)

aes64esm_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x6363636363636363), rs1:x25(0x0000000000200000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(aes64esm, x7, x25, x10, 0x6363636363636363, 0x200000, 0x0, x1, 8, x2)

aes64esm_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x6363636363636363), rs1:x24(0x0000000000400000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64esm, x8, x24, x9, 0x6363636363636363, 0x400000, 0x0, x1, 16, x2)

aes64esm_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x6363636363636363), rs1:x23(0x0000000000800000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(aes64esm, x9, x23, x8, 0x6363636363636363, 0x800000, 0x0, x1, 24, x2)

aes64esm_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x5d427c7c63636363), rs1:x22(0x0000000001000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(aes64esm, x10, x22, x7, 0x5d427c7c63636363, 0x1000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_34_0)


aes64esm_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x4b5f777763636363), rs1:x21(0x0000000002000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(aes64esm, x11, x21, x6, 0x4b5f777763636363, 0x2000000, 0x0, x1, 0, x7)

aes64esm_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x5acbf2f263636363), rs1:x20(0x0000000004000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(aes64esm, x12, x20, x5, 0x5acbf2f263636363, 0x4000000, 0x0, x1, 8, x7)

aes64esm_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0xc596303063636363), rs1:x19(0x0000000008000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(aes64esm, x13, x19, x4, 0xc596303063636363, 0x8000000, 0x0, x1, 16, x7)

aes64esm_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x2a83caca63636363), rs1:x18(0x0000000010000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64esm, x14, x18, x3, 0x2a83caca63636363, 0x10000000, 0x0, x1, 24, x7)

aes64esm_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0xd004b7b763636363), rs1:x17(0x0000000020000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(aes64esm, x15, x17, x2, 0xd004b7b763636363, 0x20000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x2,signature_35_0)


aes64esm_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0xb7dd090963636363), rs1:x16(0x0000000040000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(aes64esm, x16, x16, x1, 0xb7dd090963636363, 0x40000000, 0x0, x2, 0, x3)

aes64esm_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x248acdcd63636363), rs1:x15(0x0000000080000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64esm, x17, x15, x31, 0x248acdcd63636363, 0x80000000, 0x0, x2, 8, x3)

aes64esm_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x427c7c5d63636363), rs1:x14(0x0000000100000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64esm, x18, x14, x30, 0x427c7c5d63636363, 0x100000000, 0x0, x2, 16, x3)

aes64esm_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x5f77774b63636363), rs1:x13(0x0000000200000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64esm, x19, x13, x29, 0x5f77774b63636363, 0x200000000, 0x0, x2, 24, x3)

aes64esm_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0xcbf2f25a63636363), rs1:x12(0x0000000400000000), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64esm, x20, x12, x28, 0xcbf2f25a63636363, 0x400000000, 0x0, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_36_0)


aes64esm_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x963030c563636363), rs1:x11(0x0000000800000000), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64esm, x21, x11, x27, 0x963030c563636363, 0x800000000, 0x0, x1, 0, x2)

aes64esm_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x83caca2a63636363), rs1:x10(0x0000001000000000), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64esm, x22, x10, x26, 0x83caca2a63636363, 0x1000000000, 0x0, x1, 8, x2)

aes64esm_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x04b7b7d063636363), rs1:x9(0x0000002000000000), rs2:x25(0x0000000000000000)
    TEST_RR_OP(aes64esm, x23, x9, x25, 0x04b7b7d063636363, 0x2000000000, 0x0, x1, 16, x2)

aes64esm_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0xdd0909b763636363), rs1:x8(0x0000004000000000), rs2:x24(0x0000000000000000)
    TEST_RR_OP(aes64esm, x24, x8, x24, 0xdd0909b763636363, 0x4000000000, 0x0, x1, 24, x2)

aes64esm_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x8acdcd2463636363), rs1:x7(0x0000008000000000), rs2:x23(0x0000000000000000)
    TEST_RR_OP(aes64esm, x25, x7, x23, 0x8acdcd2463636363, 0x8000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_37_0)


aes64esm_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x636363637c7c5d42), rs1:x6(0x0000010000000000), rs2:x22(0x0000000000000000)
    TEST_RR_OP(aes64esm, x26, x6, x22, 0x636363637c7c5d42, 0x10000000000, 0x0, x1, 0, x7)

aes64esm_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x6363636377774b5f), rs1:x5(0x0000020000000000), rs2:x21(0x0000000000000000)
    TEST_RR_OP(aes64esm, x27, x5, x21, 0x6363636377774b5f, 0x20000000000, 0x0, x1, 8, x7)

aes64esm_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x63636363f2f25acb), rs1:x4(0x0000040000000000), rs2:x20(0x0000000000000000)
    TEST_RR_OP(aes64esm, x28, x4, x20, 0x63636363f2f25acb, 0x40000000000, 0x0, x1, 16, x7)

aes64esm_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x636363633030c596), rs1:x3(0x0000080000000000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(aes64esm, x29, x3, x19, 0x636363633030c596, 0x80000000000, 0x0, x1, 24, x7)

aes64esm_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x63636363caca2a83), rs1:x2(0x0000100000000000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(aes64esm, x30, x2, x18, 0x63636363caca2a83, 0x100000000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x5,signature_38_0)


aes64esm_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x63636363b7b7d004), rs1:x1(0x0000200000000000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(aes64esm, x31, x1, x17, 0x63636363b7b7d004, 0x200000000000, 0x0, x5, 0, x6)

aes64esm_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x636363630909b7dd), rs1:x31(0x0000400000000000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(aes64esm, x1, x31, x16, 0x636363630909b7dd, 0x400000000000, 0x0, x5, 8, x6)

aes64esm_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x63636363cdcd248a), rs1:x30(0x0000800000000000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(aes64esm, x2, x30, x15, 0x63636363cdcd248a, 0x800000000000, 0x0, x5, 16, x6)

aes64esm_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x6363636363636363), rs1:x29(0x0001000000000000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(aes64esm, x3, x29, x14, 0x6363636363636363, 0x1000000000000, 0x0, x5, 24, x6)

aes64esm_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x6363636363636363), rs1:x28(0x0002000000000000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(aes64esm, x4, x28, x13, 0x6363636363636363, 0x2000000000000, 0x0, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_39_0)


aes64esm_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x6363636363636363), rs1:x27(0x0004000000000000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(aes64esm, x5, x27, x12, 0x6363636363636363, 0x4000000000000, 0x0, x1, 0, x2)

aes64esm_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x6363636363636363), rs1:x26(0x0008000000000000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(aes64esm, x6, x26, x11, 0x6363636363636363, 0x8000000000000, 0x0, x1, 8, x2)

aes64esm_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x6363636363636363), rs1:x25(0x0010000000000000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(aes64esm, x7, x25, x10, 0x6363636363636363, 0x10000000000000, 0x0, x1, 16, x2)

aes64esm_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x6363636363636363), rs1:x24(0x0020000000000000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64esm, x8, x24, x9, 0x6363636363636363, 0x20000000000000, 0x0, x1, 24, x2)

aes64esm_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x6363636363636363), rs1:x23(0x0040000000000000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(aes64esm, x9, x23, x8, 0x6363636363636363, 0x40000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_40_0)


aes64esm_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x6363636363636363), rs1:x22(0x0080000000000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(aes64esm, x10, x22, x7, 0x6363636363636363, 0x80000000000000, 0x0, x1, 0, x2)

aes64esm_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x6363636363636363), rs1:x21(0x0100000000000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(aes64esm, x11, x21, x6, 0x6363636363636363, 0x100000000000000, 0x0, x1, 8, x2)

aes64esm_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x6363636363636363), rs1:x20(0x0200000000000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(aes64esm, x12, x20, x5, 0x6363636363636363, 0x200000000000000, 0x0, x1, 16, x2)

aes64esm_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x6363636363636363), rs1:x19(0x0400000000000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(aes64esm, x13, x19, x4, 0x6363636363636363, 0x400000000000000, 0x0, x1, 24, x2)

aes64esm_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x6363636363636363), rs1:x18(0x0800000000000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64esm, x14, x18, x3, 0x6363636363636363, 0x800000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x3,signature_41_0)


aes64esm_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x6363636363636363), rs1:x17(0x1000000000000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(aes64esm, x15, x17, x2, 0x6363636363636363, 0x1000000000000000, 0x0, x3, 0, x4)

aes64esm_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x6363636363636363), rs1:x16(0x2000000000000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(aes64esm, x16, x16, x1, 0x6363636363636363, 0x2000000000000000, 0x0, x3, 8, x4)

aes64esm_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x6363636363636363), rs1:x15(0x4000000000000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64esm, x17, x15, x31, 0x6363636363636363, 0x4000000000000000, 0x0, x3, 16, x4)

aes64esm_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x6363636363636363), rs1:x14(0x8000000000000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64esm, x18, x14, x30, 0x6363636363636363, 0x8000000000000000, 0x0, x3, 24, x4)

aes64esm_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x6363636363636363), rs1:x13(0x0000000000000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64esm, x19, x13, x29, 0x6363636363636363, 0x0, 0x0, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_42_0)


aes64esm_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0x168963fc65ce5157), rs1:x12(0xfffffffffffffffe), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64esm, x20, x12, x28, 0x168963fc65ce5157, 0xfffffffffffffffe, 0x0, x1, 0, x2)

aes64esm_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0x168963fc4f21be92), rs1:x11(0xfffffffffffffffd), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64esm, x21, x11, x27, 0x168963fc4f21be92, 0xfffffffffffffffd, 0x0, x1, 8, x2)

aes64esm_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0x168963fca27ae524), rs1:x10(0xfffffffffffffffb), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64esm, x22, x10, x26, 0x168963fca27ae524, 0xfffffffffffffffb, 0x0, x1, 16, x2)

aes64esm_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0x168963fc0b1d82ea), rs1:x9(0xfffffffffffffff7), rs2:x25(0x0000000000000000)
    TEST_RR_OP(aes64esm, x23, x9, x25, 0x168963fc0b1d82ea, 0xfffffffffffffff7, 0x0, x1, 24, x2)

aes64esm_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0x168963fcc9aa359f), rs1:x8(0xffffffffffffffef), rs2:x24(0x0000000000000000)
    TEST_RR_OP(aes64esm, x24, x8, x24, 0x168963fcc9aa359f, 0xffffffffffffffef, 0x0, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_43_0)


aes64esm_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0x168963fc0aeb741d), rs1:x7(0xffffffffffffffdf), rs2:x23(0x0000000000000000)
    TEST_RR_OP(aes64esm, x25, x7, x23, 0x168963fc0aeb741d, 0xffffffffffffffdf, 0x0, x1, 0, x2)

aes64esm_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0x168963fcab7de22a), rs1:x6(0xffffffffffffffbf), rs2:x22(0x0000000000000000)
    TEST_RR_OP(aes64esm, x26, x6, x22, 0x168963fcab7de22a, 0xffffffffffffffbf, 0x0, x1, 8, x2)

aes64esm_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0x168963fcdea73885), rs1:x5(0xffffffffffffff7f), rs2:x21(0x0000000000000000)
    TEST_RR_OP(aes64esm, x27, x5, x21, 0x168963fcdea73885, 0xffffffffffffff7f, 0x0, x1, 16, x2)

aes64esm_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0x168963fc8963fc16), rs1:x4(0xfffffffffffffeff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(aes64esm, x28, x4, x20, 0x168963fc8963fc16, 0xfffffffffffffeff, 0x0, x1, 24, x2)

aes64esm_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0x168963fc8963fc16), rs1:x3(0xfffffffffffffdff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(aes64esm, x29, x3, x19, 0x168963fc8963fc16, 0xfffffffffffffdff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x4,signature_44_0)


aes64esm_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0x168963fc8963fc16), rs1:x2(0xfffffffffffffbff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(aes64esm, x30, x2, x18, 0x168963fc8963fc16, 0xfffffffffffffbff, 0x0, x4, 0, x5)

aes64esm_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0x168963fc8963fc16), rs1:x1(0xfffffffffffff7ff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(aes64esm, x31, x1, x17, 0x168963fc8963fc16, 0xfffffffffffff7ff, 0x0, x4, 8, x5)

aes64esm_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0x168963fc8963fc16), rs1:x31(0xffffffffffffefff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(aes64esm, x1, x31, x16, 0x168963fc8963fc16, 0xffffffffffffefff, 0x0, x4, 16, x5)

aes64esm_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0x168963fc8963fc16), rs1:x30(0xffffffffffffdfff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(aes64esm, x2, x30, x15, 0x168963fc8963fc16, 0xffffffffffffdfff, 0x0, x4, 24, x5)

aes64esm_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0x168963fc8963fc16), rs1:x29(0xffffffffffffbfff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(aes64esm, x3, x29, x14, 0x168963fc8963fc16, 0xffffffffffffbfff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_45_0)


aes64esm_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0x168963fc8963fc16), rs1:x28(0xffffffffffff7fff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(aes64esm, x4, x28, x13, 0x168963fc8963fc16, 0xffffffffffff7fff, 0x0, x1, 0, x2)

aes64esm_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0x168963fc8963fc16), rs1:x27(0xfffffffffffeffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(aes64esm, x5, x27, x12, 0x168963fc8963fc16, 0xfffffffffffeffff, 0x0, x1, 8, x2)

aes64esm_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0x168963fc8963fc16), rs1:x26(0xfffffffffffdffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(aes64esm, x6, x26, x11, 0x168963fc8963fc16, 0xfffffffffffdffff, 0x0, x1, 16, x2)

aes64esm_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0x168963fc8963fc16), rs1:x25(0xfffffffffffbffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(aes64esm, x7, x25, x10, 0x168963fc8963fc16, 0xfffffffffffbffff, 0x0, x1, 24, x2)

aes64esm_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0x168963fc8963fc16), rs1:x24(0xfffffffffff7ffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64esm, x8, x24, x9, 0x168963fc8963fc16, 0xfffffffffff7ffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_46_0)


aes64esm_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0x168963fc8963fc16), rs1:x23(0xffffffffffefffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(aes64esm, x9, x23, x8, 0x168963fc8963fc16, 0xffffffffffefffff, 0x0, x1, 0, x2)

aes64esm_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0x168963fc8963fc16), rs1:x22(0xffffffffffdfffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(aes64esm, x10, x22, x7, 0x168963fc8963fc16, 0xffffffffffdfffff, 0x0, x1, 8, x2)

aes64esm_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0x168963fc8963fc16), rs1:x21(0xffffffffffbfffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(aes64esm, x11, x21, x6, 0x168963fc8963fc16, 0xffffffffffbfffff, 0x0, x1, 16, x2)

aes64esm_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0x168963fc8963fc16), rs1:x20(0xffffffffff7fffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(aes64esm, x12, x20, x5, 0x168963fc8963fc16, 0xffffffffff7fffff, 0x0, x1, 24, x2)

aes64esm_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0x5765ce518963fc16), rs1:x19(0xfffffffffeffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(aes64esm, x13, x19, x4, 0x5765ce518963fc16, 0xfffffffffeffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x4,signature_47_0)


aes64esm_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0x924f21be8963fc16), rs1:x18(0xfffffffffdffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64esm, x14, x18, x3, 0x924f21be8963fc16, 0xfffffffffdffffff, 0x0, x4, 0, x5)

aes64esm_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0x24a27ae58963fc16), rs1:x17(0xfffffffffbffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(aes64esm, x15, x17, x2, 0x24a27ae58963fc16, 0xfffffffffbffffff, 0x0, x4, 8, x5)

aes64esm_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0xea0b1d828963fc16), rs1:x16(0xfffffffff7ffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(aes64esm, x16, x16, x1, 0xea0b1d828963fc16, 0xfffffffff7ffffff, 0x0, x4, 16, x5)

aes64esm_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0x9fc9aa358963fc16), rs1:x15(0xffffffffefffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64esm, x17, x15, x31, 0x9fc9aa358963fc16, 0xffffffffefffffff, 0x0, x4, 24, x5)

aes64esm_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0x1d0aeb748963fc16), rs1:x14(0xffffffffdfffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64esm, x18, x14, x30, 0x1d0aeb748963fc16, 0xffffffffdfffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_48_0)


aes64esm_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0x2aab7de28963fc16), rs1:x13(0xffffffffbfffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64esm, x19, x13, x29, 0x2aab7de28963fc16, 0xffffffffbfffffff, 0x0, x1, 0, x2)

aes64esm_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0x85dea7388963fc16), rs1:x12(0xffffffff7fffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64esm, x20, x12, x28, 0x85dea7388963fc16, 0xffffffff7fffffff, 0x0, x1, 8, x2)

aes64esm_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0xfa24cebd8963fc16), rs1:x11(0xfffffffeffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64esm, x21, x11, x27, 0xfa24cebd8963fc16, 0xfffffffeffffffff, 0x0, x1, 16, x2)

aes64esm_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0xd0cb21788963fc16), rs1:x10(0xfffffffdffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64esm, x22, x10, x26, 0xd0cb21788963fc16, 0xfffffffdffffffff, 0x0, x1, 24, x2)

aes64esm_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0x3d907ace8963fc16), rs1:x9(0xfffffffbffffffff), rs2:x25(0x0000000000000000)
    TEST_RR_OP(aes64esm, x23, x9, x25, 0x3d907ace8963fc16, 0xfffffffbffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_49_0)


aes64esm_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0x94f71d008963fc16), rs1:x8(0xfffffff7ffffffff), rs2:x24(0x0000000000000000)
    TEST_RR_OP(aes64esm, x24, x8, x24, 0x94f71d008963fc16, 0xfffffff7ffffffff, 0x0, x1, 0, x2)

aes64esm_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0x5640aa758963fc16), rs1:x7(0xffffffefffffffff), rs2:x23(0x0000000000000000)
    TEST_RR_OP(aes64esm, x25, x7, x23, 0x5640aa758963fc16, 0xffffffefffffffff, 0x0, x1, 8, x2)

aes64esm_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0x9501ebf78963fc16), rs1:x6(0xffffffdfffffffff), rs2:x22(0x0000000000000000)
    TEST_RR_OP(aes64esm, x26, x6, x22, 0x9501ebf78963fc16, 0xffffffdfffffffff, 0x0, x1, 16, x2)

aes64esm_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0x34977dc08963fc16), rs1:x5(0xffffffbfffffffff), rs2:x21(0x0000000000000000)
    TEST_RR_OP(aes64esm, x27, x5, x21, 0x34977dc08963fc16, 0xffffffbfffffffff, 0x0, x1, 24, x2)

aes64esm_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0x414da76f8963fc16), rs1:x4(0xffffff7fffffffff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(aes64esm, x28, x4, x20, 0x414da76f8963fc16, 0xffffff7fffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x4,signature_50_0)


aes64esm_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0x168963fc24cebdfa), rs1:x3(0xfffffeffffffffff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(aes64esm, x29, x3, x19, 0x168963fc24cebdfa, 0xfffffeffffffffff, 0x0, x4, 0, x5)

aes64esm_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0x168963fccb2178d0), rs1:x2(0xfffffdffffffffff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(aes64esm, x30, x2, x18, 0x168963fccb2178d0, 0xfffffdffffffffff, 0x0, x4, 8, x5)

aes64esm_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0x168963fc907ace3d), rs1:x1(0xfffffbffffffffff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(aes64esm, x31, x1, x17, 0x168963fc907ace3d, 0xfffffbffffffffff, 0x0, x4, 16, x5)

aes64esm_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0x168963fcf71d0094), rs1:x31(0xfffff7ffffffffff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(aes64esm, x1, x31, x16, 0x168963fcf71d0094, 0xfffff7ffffffffff, 0x0, x4, 24, x5)

aes64esm_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0x168963fc40aa7556), rs1:x30(0xffffefffffffffff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(aes64esm, x2, x30, x15, 0x168963fc40aa7556, 0xffffefffffffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_51_0)


aes64esm_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0x168963fc01ebf795), rs1:x29(0xffffdfffffffffff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(aes64esm, x3, x29, x14, 0x168963fc01ebf795, 0xffffdfffffffffff, 0x0, x1, 0, x2)

aes64esm_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0x168963fc977dc034), rs1:x28(0xffffbfffffffffff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(aes64esm, x4, x28, x13, 0x168963fc977dc034, 0xffffbfffffffffff, 0x0, x1, 8, x2)

aes64esm_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0x168963fc4da76f41), rs1:x27(0xffff7fffffffffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(aes64esm, x5, x27, x12, 0x168963fc4da76f41, 0xffff7fffffffffff, 0x0, x1, 16, x2)

aes64esm_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0x168963fc8963fc16), rs1:x26(0xfffeffffffffffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(aes64esm, x6, x26, x11, 0x168963fc8963fc16, 0xfffeffffffffffff, 0x0, x1, 24, x2)

aes64esm_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0x168963fc8963fc16), rs1:x25(0xfffdffffffffffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(aes64esm, x7, x25, x10, 0x168963fc8963fc16, 0xfffdffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_52_0)


aes64esm_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0x168963fc8963fc16), rs1:x24(0xfffbffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64esm, x8, x24, x9, 0x168963fc8963fc16, 0xfffbffffffffffff, 0x0, x1, 0, x2)

aes64esm_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0x168963fc8963fc16), rs1:x23(0xfff7ffffffffffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(aes64esm, x9, x23, x8, 0x168963fc8963fc16, 0xfff7ffffffffffff, 0x0, x1, 8, x2)

aes64esm_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0x168963fc8963fc16), rs1:x22(0xffefffffffffffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(aes64esm, x10, x22, x7, 0x168963fc8963fc16, 0xffefffffffffffff, 0x0, x1, 16, x2)

aes64esm_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0x168963fc8963fc16), rs1:x21(0xffdfffffffffffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(aes64esm, x11, x21, x6, 0x168963fc8963fc16, 0xffdfffffffffffff, 0x0, x1, 24, x2)

aes64esm_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0x168963fc8963fc16), rs1:x20(0xffbfffffffffffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(aes64esm, x12, x20, x5, 0x168963fc8963fc16, 0xffbfffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x5,signature_53_0)


aes64esm_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0x168963fc8963fc16), rs1:x19(0xff7fffffffffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(aes64esm, x13, x19, x4, 0x168963fc8963fc16, 0xff7fffffffffffff, 0x0, x5, 0, x6)

aes64esm_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0x168963fc8963fc16), rs1:x18(0xfeffffffffffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64esm, x14, x18, x3, 0x168963fc8963fc16, 0xfeffffffffffffff, 0x0, x5, 8, x6)

aes64esm_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0x168963fc8963fc16), rs1:x17(0xfdffffffffffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(aes64esm, x15, x17, x2, 0x168963fc8963fc16, 0xfdffffffffffffff, 0x0, x5, 16, x6)

aes64esm_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0x168963fc8963fc16), rs1:x16(0xfbffffffffffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(aes64esm, x16, x16, x1, 0x168963fc8963fc16, 0xfbffffffffffffff, 0x0, x5, 24, x6)

aes64esm_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0x168963fc8963fc16), rs1:x15(0xf7ffffffffffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64esm, x17, x15, x31, 0x168963fc8963fc16, 0xf7ffffffffffffff, 0x0, x5, 32, x6)

    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_54_0)


aes64esm_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0x168963fc8963fc16), rs1:x14(0xefffffffffffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64esm, x18, x14, x30, 0x168963fc8963fc16, 0xefffffffffffffff, 0x0, x1, 0, x2)

aes64esm_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0x168963fc8963fc16), rs1:x13(0xdfffffffffffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64esm, x19, x13, x29, 0x168963fc8963fc16, 0xdfffffffffffffff, 0x0, x1, 8, x2)

aes64esm_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0x168963fc8963fc16), rs1:x12(0xbfffffffffffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64esm, x20, x12, x28, 0x168963fc8963fc16, 0xbfffffffffffffff, 0x0, x1, 16, x2)

aes64esm_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0x168963fc8963fc16), rs1:x11(0x7fffffffffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64esm, x21, x11, x27, 0x168963fc8963fc16, 0x7fffffffffffffff, 0x0, x1, 24, x2)

aes64esm_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0x168963fc8963fc16), rs1:x10(0xffffffffffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64esm, x22, x10, x26, 0x168963fc8963fc16, 0xffffffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_55_0)


aes64esm_01_inst_270:
    // Test 270:  Test with rs1 == rs2
    // result rd:x23(0x3daf29f0e5dd5c74), rs1:x25(0x10fd3dedadea5195), rs2:x25(0xdf7f3844121bcc23)
    TEST_RR_OP(aes64esm, x23, x25, x25, 0x3daf29f0e5dd5c74, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x1, 0, x2)

aes64esm_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1), rs2:x24(0xf5adb41aa47d105b)
    TEST_RR_OP(aes64esm, x0, x8, x24, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x1, 8, x2)

aes64esm_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0x2293cad25b5281b9), rs1:x7(0xc9649f05a8e1a8bb), rs2:x0(0x82f6747f707af2c0)
    TEST_RR_OP(aes64esm, x25, x7, x0, 0x2293cad25b5281b9, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x1, 16, x2)

aes64esm_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0xbf747067d7a216f8), rs1:x0(0x3541291848c99fcb), rs2:x22(0x73a92fd4e19bfbc3)
    TEST_RR_OP(aes64esm, x26, x0, x22, 0xbf747067d7a216f8, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x1, 24, x2)
	
#endif


RVTEST_CODE_END aes64esm_01_code_end
RVTEST_CODE_BEGIN ror_01_init ror_01_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x6,signature_1_0)


ror_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0xb5bd4a32a21fa7bd), rs1:x31(0x10fd3dedadea5195), rs2:x16(0xdf7f3844121bcc23)
    TEST_RR_OP(ror, x1, x31, x16, 0xb5bd4a32a21fa7bd, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x6, 0, x7)

ror_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x5ff7d837a52b9c5a), rs1:x30(0xbd295ce2d2ffbec1), rs2:x15(0xf5adb41aa47d105b)
    TEST_RR_OP(ror, x2, x30, x15, 0x5ff7d837a52b9c5a, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x6, 8, x7)

ror_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0xc9649f05a8e1a8bb), rs1:x29(0xc9649f05a8e1a8bb), rs2:x14(0x82f6747f707af2c0)
    TEST_RR_OP(ror, x3, x29, x14, 0xc9649f05a8e1a8bb, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x6, 16, x7)

ror_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x66a82523091933f9), rs1:x28(0x3541291848c99fcb), rs2:x13(0x73a92fd4e19bfbc3)
    TEST_RR_OP(ror, x4, x28, x13, 0x66a82523091933f9, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x6, 24, x7)

ror_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x8e808c3aa49e2144), rs1:x27(0x10a24740461d524f), rs2:x12(0x546b0e54528a10af)
    TEST_RR_OP(ror, x5, x27, x12, 0x8e808c3aa49e2144, 0x10a24740461d524f, 0x546b0e54528a10af, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_2_0)


ror_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x215ea8d61ca8a514), rs1:x26(0x546b0e54528a10af), rs2:x11(0x10a24740461d524f)
    TEST_RR_OP(ror, x6, x26, x11, 0x215ea8d61ca8a514, 0x546b0e54528a10af, 0x10a24740461d524f, x1, 0, x2)

ror_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x786e7525fa9c337f), rs1:x25(0x73a92fd4e19bfbc3), rs2:x10(0x3541291848c99fcb)
    TEST_RR_OP(ror, x7, x25, x10, 0x786e7525fa9c337f, 0x73a92fd4e19bfbc3, 0x3541291848c99fcb, x1, 8, x2)

ror_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x5ece8fee0f5e5810), rs1:x24(0x82f6747f707af2c0), rs2:x9(0xc9649f05a8e1a8bb)
    TEST_RR_OP(ror, x8, x24, x9, 0x5ece8fee0f5e5810, 0x82f6747f707af2c0, 0xc9649f05a8e1a8bb, x1, 16, x2)

ror_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0xfad6da0d523e882d), rs1:x23(0xf5adb41aa47d105b), rs2:x8(0xbd295ce2d2ffbec1)
    TEST_RR_OP(ror, x9, x23, x8, 0xfad6da0d523e882d, 0xf5adb41aa47d105b, 0xbd295ce2d2ffbec1, x1, 24, x2)

ror_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0xde611efbf9c22090), rs1:x22(0xdf7f3844121bcc23), rs2:x7(0x10fd3dedadea5195)
    TEST_RR_OP(ror, x10, x22, x7, 0xde611efbf9c22090, 0xdf7f3844121bcc23, 0x10fd3dedadea5195, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_3_0)


ror_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000002), rs1:x21(0x0000000000000001), rs2:x6(0xffffffffffffffff)
    TEST_RR_OP(ror, x11, x21, x6, 0x0000000000000002, 0x1, 0xffffffffffffffff, x1, 0, x7)

ror_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000004), rs1:x20(0x0000000000000002), rs2:x5(0x7fffffffffffffff)
    TEST_RR_OP(ror, x12, x20, x5, 0x0000000000000004, 0x2, 0x7fffffffffffffff, x1, 8, x7)

ror_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000008), rs1:x19(0x0000000000000004), rs2:x4(0xbfffffffffffffff)
    TEST_RR_OP(ror, x13, x19, x4, 0x0000000000000008, 0x4, 0xbfffffffffffffff, x1, 16, x7)

ror_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000010), rs1:x18(0x0000000000000008), rs2:x3(0xdfffffffffffffff)
    TEST_RR_OP(ror, x14, x18, x3, 0x0000000000000010, 0x8, 0xdfffffffffffffff, x1, 24, x7)

ror_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000020), rs1:x17(0x0000000000000010), rs2:x2(0xefffffffffffffff)
    TEST_RR_OP(ror, x15, x17, x2, 0x0000000000000020, 0x10, 0xefffffffffffffff, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x2,signature_4_0)


ror_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000040), rs1:x16(0x0000000000000020), rs2:x1(0xf7ffffffffffffff)
    TEST_RR_OP(ror, x16, x16, x1, 0x0000000000000040, 0x20, 0xf7ffffffffffffff, x2, 0, x3)

ror_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000080), rs1:x15(0x0000000000000040), rs2:x31(0xfbffffffffffffff)
    TEST_RR_OP(ror, x17, x15, x31, 0x0000000000000080, 0x40, 0xfbffffffffffffff, x2, 8, x3)

ror_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000100), rs1:x14(0x0000000000000080), rs2:x30(0xfdffffffffffffff)
    TEST_RR_OP(ror, x18, x14, x30, 0x0000000000000100, 0x80, 0xfdffffffffffffff, x2, 16, x3)

ror_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000200), rs1:x13(0x0000000000000100), rs2:x29(0xfeffffffffffffff)
    TEST_RR_OP(ror, x19, x13, x29, 0x0000000000000200, 0x100, 0xfeffffffffffffff, x2, 24, x3)

ror_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000400), rs1:x12(0x0000000000000200), rs2:x28(0xff7fffffffffffff)
    TEST_RR_OP(ror, x20, x12, x28, 0x0000000000000400, 0x200, 0xff7fffffffffffff, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_5_0)


ror_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000800), rs1:x11(0x0000000000000400), rs2:x27(0xffbfffffffffffff)
    TEST_RR_OP(ror, x21, x11, x27, 0x0000000000000800, 0x400, 0xffbfffffffffffff, x1, 0, x2)

ror_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0000000000001000), rs1:x10(0x0000000000000800), rs2:x26(0xffdfffffffffffff)
    TEST_RR_OP(ror, x22, x10, x26, 0x0000000000001000, 0x800, 0xffdfffffffffffff, x1, 8, x2)

ror_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x0000000000002000), rs1:x9(0x0000000000001000), rs2:x25(0xffefffffffffffff)
    TEST_RR_OP(ror, x23, x9, x25, 0x0000000000002000, 0x1000, 0xffefffffffffffff, x1, 16, x2)

ror_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0000000000004000), rs1:x8(0x0000000000002000), rs2:x24(0xfff7ffffffffffff)
    TEST_RR_OP(ror, x24, x8, x24, 0x0000000000004000, 0x2000, 0xfff7ffffffffffff, x1, 24, x2)

ror_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x0000000000008000), rs1:x7(0x0000000000004000), rs2:x23(0xfffbffffffffffff)
    TEST_RR_OP(ror, x25, x7, x23, 0x0000000000008000, 0x4000, 0xfffbffffffffffff, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_6_0)


ror_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x0000000000010000), rs1:x6(0x0000000000008000), rs2:x22(0xfffdffffffffffff)
    TEST_RR_OP(ror, x26, x6, x22, 0x0000000000010000, 0x8000, 0xfffdffffffffffff, x1, 0, x7)

ror_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x0000000000020000), rs1:x5(0x0000000000010000), rs2:x21(0xfffeffffffffffff)
    TEST_RR_OP(ror, x27, x5, x21, 0x0000000000020000, 0x10000, 0xfffeffffffffffff, x1, 8, x7)

ror_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x0000000000040000), rs1:x4(0x0000000000020000), rs2:x20(0xffff7fffffffffff)
    TEST_RR_OP(ror, x28, x4, x20, 0x0000000000040000, 0x20000, 0xffff7fffffffffff, x1, 16, x7)

ror_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0000000000080000), rs1:x3(0x0000000000040000), rs2:x19(0xffffbfffffffffff)
    TEST_RR_OP(ror, x29, x3, x19, 0x0000000000080000, 0x40000, 0xffffbfffffffffff, x1, 24, x7)

ror_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0000000000100000), rs1:x2(0x0000000000080000), rs2:x18(0xffffdfffffffffff)
    TEST_RR_OP(ror, x30, x2, x18, 0x0000000000100000, 0x80000, 0xffffdfffffffffff, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x5,signature_7_0)


ror_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0000000000200000), rs1:x1(0x0000000000100000), rs2:x17(0xffffefffffffffff)
    TEST_RR_OP(ror, x31, x1, x17, 0x0000000000200000, 0x100000, 0xffffefffffffffff, x5, 0, x6)

ror_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0000000000400000), rs1:x31(0x0000000000200000), rs2:x16(0xfffff7ffffffffff)
    TEST_RR_OP(ror, x1, x31, x16, 0x0000000000400000, 0x200000, 0xfffff7ffffffffff, x5, 8, x6)

ror_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0000000000800000), rs1:x30(0x0000000000400000), rs2:x15(0xfffffbffffffffff)
    TEST_RR_OP(ror, x2, x30, x15, 0x0000000000800000, 0x400000, 0xfffffbffffffffff, x5, 16, x6)

ror_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0000000001000000), rs1:x29(0x0000000000800000), rs2:x14(0xfffffdffffffffff)
    TEST_RR_OP(ror, x3, x29, x14, 0x0000000001000000, 0x800000, 0xfffffdffffffffff, x5, 24, x6)

ror_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x0000000002000000), rs1:x28(0x0000000001000000), rs2:x13(0xfffffeffffffffff)
    TEST_RR_OP(ror, x4, x28, x13, 0x0000000002000000, 0x1000000, 0xfffffeffffffffff, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_8_0)


ror_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x0000000004000000), rs1:x27(0x0000000002000000), rs2:x12(0xffffff7fffffffff)
    TEST_RR_OP(ror, x5, x27, x12, 0x0000000004000000, 0x2000000, 0xffffff7fffffffff, x1, 0, x2)

ror_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x0000000008000000), rs1:x26(0x0000000004000000), rs2:x11(0xffffffbfffffffff)
    TEST_RR_OP(ror, x6, x26, x11, 0x0000000008000000, 0x4000000, 0xffffffbfffffffff, x1, 8, x2)

ror_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0000000010000000), rs1:x25(0x0000000008000000), rs2:x10(0xffffffdfffffffff)
    TEST_RR_OP(ror, x7, x25, x10, 0x0000000010000000, 0x8000000, 0xffffffdfffffffff, x1, 16, x2)

ror_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0000000020000000), rs1:x24(0x0000000010000000), rs2:x9(0xffffffefffffffff)
    TEST_RR_OP(ror, x8, x24, x9, 0x0000000020000000, 0x10000000, 0xffffffefffffffff, x1, 24, x2)

ror_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0000000040000000), rs1:x23(0x0000000020000000), rs2:x8(0xfffffff7ffffffff)
    TEST_RR_OP(ror, x9, x23, x8, 0x0000000040000000, 0x20000000, 0xfffffff7ffffffff, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_9_0)


ror_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x0000000080000000), rs1:x22(0x0000000040000000), rs2:x7(0xfffffffbffffffff)
    TEST_RR_OP(ror, x10, x22, x7, 0x0000000080000000, 0x40000000, 0xfffffffbffffffff, x1, 0, x2)

ror_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0000000100000000), rs1:x21(0x0000000080000000), rs2:x6(0xfffffffdffffffff)
    TEST_RR_OP(ror, x11, x21, x6, 0x0000000100000000, 0x80000000, 0xfffffffdffffffff, x1, 8, x2)

ror_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0000000200000000), rs1:x20(0x0000000100000000), rs2:x5(0xfffffffeffffffff)
    TEST_RR_OP(ror, x12, x20, x5, 0x0000000200000000, 0x100000000, 0xfffffffeffffffff, x1, 16, x2)

ror_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x0000000400000000), rs1:x19(0x0000000200000000), rs2:x4(0xffffffff7fffffff)
    TEST_RR_OP(ror, x13, x19, x4, 0x0000000400000000, 0x200000000, 0xffffffff7fffffff, x1, 24, x2)

ror_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x0000000800000000), rs1:x18(0x0000000400000000), rs2:x3(0xffffffffbfffffff)
    TEST_RR_OP(ror, x14, x18, x3, 0x0000000800000000, 0x400000000, 0xffffffffbfffffff, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x3,signature_10_0)


ror_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x0000001000000000), rs1:x17(0x0000000800000000), rs2:x2(0xffffffffdfffffff)
    TEST_RR_OP(ror, x15, x17, x2, 0x0000001000000000, 0x800000000, 0xffffffffdfffffff, x3, 0, x4)

ror_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0000002000000000), rs1:x16(0x0000001000000000), rs2:x1(0xffffffffefffffff)
    TEST_RR_OP(ror, x16, x16, x1, 0x0000002000000000, 0x1000000000, 0xffffffffefffffff, x3, 8, x4)

ror_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0000004000000000), rs1:x15(0x0000002000000000), rs2:x31(0xfffffffff7ffffff)
    TEST_RR_OP(ror, x17, x15, x31, 0x0000004000000000, 0x2000000000, 0xfffffffff7ffffff, x3, 16, x4)

ror_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x0000008000000000), rs1:x14(0x0000004000000000), rs2:x30(0xfffffffffbffffff)
    TEST_RR_OP(ror, x18, x14, x30, 0x0000008000000000, 0x4000000000, 0xfffffffffbffffff, x3, 24, x4)

ror_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000010000000000), rs1:x13(0x0000008000000000), rs2:x29(0xfffffffffdffffff)
    TEST_RR_OP(ror, x19, x13, x29, 0x0000010000000000, 0x8000000000, 0xfffffffffdffffff, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_11_0)


ror_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0000020000000000), rs1:x12(0x0000010000000000), rs2:x28(0xfffffffffeffffff)
    TEST_RR_OP(ror, x20, x12, x28, 0x0000020000000000, 0x10000000000, 0xfffffffffeffffff, x1, 0, x2)

ror_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000040000000000), rs1:x11(0x0000020000000000), rs2:x27(0xffffffffff7fffff)
    TEST_RR_OP(ror, x21, x11, x27, 0x0000040000000000, 0x20000000000, 0xffffffffff7fffff, x1, 8, x2)

ror_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000080000000000), rs1:x10(0x0000040000000000), rs2:x26(0xffffffffffbfffff)
    TEST_RR_OP(ror, x22, x10, x26, 0x0000080000000000, 0x40000000000, 0xffffffffffbfffff, x1, 16, x2)

ror_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000100000000000), rs1:x9(0x0000080000000000), rs2:x25(0xffffffffffdfffff)
    TEST_RR_OP(ror, x23, x9, x25, 0x0000100000000000, 0x80000000000, 0xffffffffffdfffff, x1, 24, x2)

ror_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000200000000000), rs1:x8(0x0000100000000000), rs2:x24(0xffffffffffefffff)
    TEST_RR_OP(ror, x24, x8, x24, 0x0000200000000000, 0x100000000000, 0xffffffffffefffff, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_12_0)


ror_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0000400000000000), rs1:x7(0x0000200000000000), rs2:x23(0xfffffffffff7ffff)
    TEST_RR_OP(ror, x25, x7, x23, 0x0000400000000000, 0x200000000000, 0xfffffffffff7ffff, x1, 0, x2)

ror_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x0000800000000000), rs1:x6(0x0000400000000000), rs2:x22(0xfffffffffffbffff)
    TEST_RR_OP(ror, x26, x6, x22, 0x0000800000000000, 0x400000000000, 0xfffffffffffbffff, x1, 8, x2)

ror_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0001000000000000), rs1:x5(0x0000800000000000), rs2:x21(0xfffffffffffdffff)
    TEST_RR_OP(ror, x27, x5, x21, 0x0001000000000000, 0x800000000000, 0xfffffffffffdffff, x1, 16, x2)

ror_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0002000000000000), rs1:x4(0x0001000000000000), rs2:x20(0xfffffffffffeffff)
    TEST_RR_OP(ror, x28, x4, x20, 0x0002000000000000, 0x1000000000000, 0xfffffffffffeffff, x1, 24, x2)

ror_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0004000000000000), rs1:x3(0x0002000000000000), rs2:x19(0xffffffffffff7fff)
    TEST_RR_OP(ror, x29, x3, x19, 0x0004000000000000, 0x2000000000000, 0xffffffffffff7fff, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x4,signature_13_0)


ror_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0008000000000000), rs1:x2(0x0004000000000000), rs2:x18(0xffffffffffffbfff)
    TEST_RR_OP(ror, x30, x2, x18, 0x0008000000000000, 0x4000000000000, 0xffffffffffffbfff, x4, 0, x5)

ror_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0010000000000000), rs1:x1(0x0008000000000000), rs2:x17(0xffffffffffffdfff)
    TEST_RR_OP(ror, x31, x1, x17, 0x0010000000000000, 0x8000000000000, 0xffffffffffffdfff, x4, 8, x5)

ror_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0020000000000000), rs1:x31(0x0010000000000000), rs2:x16(0xffffffffffffefff)
    TEST_RR_OP(ror, x1, x31, x16, 0x0020000000000000, 0x10000000000000, 0xffffffffffffefff, x4, 16, x5)

ror_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0040000000000000), rs1:x30(0x0020000000000000), rs2:x15(0xfffffffffffff7ff)
    TEST_RR_OP(ror, x2, x30, x15, 0x0040000000000000, 0x20000000000000, 0xfffffffffffff7ff, x4, 24, x5)

ror_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0080000000000000), rs1:x29(0x0040000000000000), rs2:x14(0xfffffffffffffbff)
    TEST_RR_OP(ror, x3, x29, x14, 0x0080000000000000, 0x40000000000000, 0xfffffffffffffbff, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_14_0)


ror_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0100000000000000), rs1:x28(0x0080000000000000), rs2:x13(0xfffffffffffffdff)
    TEST_RR_OP(ror, x4, x28, x13, 0x0100000000000000, 0x80000000000000, 0xfffffffffffffdff, x1, 0, x2)

ror_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0200000000000000), rs1:x27(0x0100000000000000), rs2:x12(0xfffffffffffffeff)
    TEST_RR_OP(ror, x5, x27, x12, 0x0200000000000000, 0x100000000000000, 0xfffffffffffffeff, x1, 8, x2)

ror_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x0400000000000000), rs1:x26(0x0200000000000000), rs2:x11(0xffffffffffffff7f)
    TEST_RR_OP(ror, x6, x26, x11, 0x0400000000000000, 0x200000000000000, 0xffffffffffffff7f, x1, 16, x2)

ror_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x0800000000000000), rs1:x25(0x0400000000000000), rs2:x10(0xffffffffffffffbf)
    TEST_RR_OP(ror, x7, x25, x10, 0x0800000000000000, 0x400000000000000, 0xffffffffffffffbf, x1, 24, x2)

ror_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x0000000010000000), rs1:x24(0x0800000000000000), rs2:x9(0xffffffffffffffdf)
    TEST_RR_OP(ror, x8, x24, x9, 0x0000000010000000, 0x800000000000000, 0xffffffffffffffdf, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_15_0)


ror_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x0000000000002000), rs1:x23(0x1000000000000000), rs2:x8(0xffffffffffffffef)
    TEST_RR_OP(ror, x9, x23, x8, 0x0000000000002000, 0x1000000000000000, 0xffffffffffffffef, x1, 0, x2)

ror_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000040), rs1:x22(0x2000000000000000), rs2:x7(0xfffffffffffffff7)
    TEST_RR_OP(ror, x10, x22, x7, 0x0000000000000040, 0x2000000000000000, 0xfffffffffffffff7, x1, 8, x2)

ror_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000008), rs1:x21(0x4000000000000000), rs2:x6(0xfffffffffffffffb)
    TEST_RR_OP(ror, x11, x21, x6, 0x0000000000000008, 0x4000000000000000, 0xfffffffffffffffb, x1, 16, x2)

ror_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000004), rs1:x20(0x8000000000000000), rs2:x5(0xfffffffffffffffd)
    TEST_RR_OP(ror, x12, x20, x5, 0x0000000000000004, 0x8000000000000000, 0xfffffffffffffffd, x1, 24, x2)

ror_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000), rs2:x4(0xfffffffffffffffe)
    TEST_RR_OP(ror, x13, x19, x4, 0x0000000000000000, 0x0, 0xfffffffffffffffe, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x4,signature_16_0)


ror_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0xfffffffffffffffe), rs1:x18(0xfffffffffffffffe), rs2:x3(0x0000000000000000)
    TEST_RR_OP(ror, x14, x18, x3, 0xfffffffffffffffe, 0xfffffffffffffffe, 0x0, x4, 0, x5)

ror_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0xfffffffffffffffd), rs1:x17(0xfffffffffffffffd), rs2:x2(0x8000000000000000)
    TEST_RR_OP(ror, x15, x17, x2, 0xfffffffffffffffd, 0xfffffffffffffffd, 0x8000000000000000, x4, 8, x5)

ror_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0xfffffffffffffffb), rs1:x16(0xfffffffffffffffb), rs2:x1(0x4000000000000000)
    TEST_RR_OP(ror, x16, x16, x1, 0xfffffffffffffffb, 0xfffffffffffffffb, 0x4000000000000000, x4, 16, x5)

ror_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0xfffffffffffffff7), rs1:x15(0xfffffffffffffff7), rs2:x31(0x2000000000000000)
    TEST_RR_OP(ror, x17, x15, x31, 0xfffffffffffffff7, 0xfffffffffffffff7, 0x2000000000000000, x4, 24, x5)

ror_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffef), rs1:x14(0xffffffffffffffef), rs2:x30(0x1000000000000000)
    TEST_RR_OP(ror, x18, x14, x30, 0xffffffffffffffef, 0xffffffffffffffef, 0x1000000000000000, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_17_0)


ror_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffdf), rs1:x13(0xffffffffffffffdf), rs2:x29(0x0800000000000000)
    TEST_RR_OP(ror, x19, x13, x29, 0xffffffffffffffdf, 0xffffffffffffffdf, 0x800000000000000, x1, 0, x2)

ror_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffbf), rs1:x12(0xffffffffffffffbf), rs2:x28(0x0400000000000000)
    TEST_RR_OP(ror, x20, x12, x28, 0xffffffffffffffbf, 0xffffffffffffffbf, 0x400000000000000, x1, 8, x2)

ror_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffff7f), rs1:x11(0xffffffffffffff7f), rs2:x27(0x0200000000000000)
    TEST_RR_OP(ror, x21, x11, x27, 0xffffffffffffff7f, 0xffffffffffffff7f, 0x200000000000000, x1, 16, x2)

ror_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0xfffffffffffffeff), rs1:x10(0xfffffffffffffeff), rs2:x26(0x0100000000000000)
    TEST_RR_OP(ror, x22, x10, x26, 0xfffffffffffffeff, 0xfffffffffffffeff, 0x100000000000000, x1, 24, x2)

ror_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0xfffffffffffffdff), rs1:x9(0xfffffffffffffdff), rs2:x25(0x0080000000000000)
    TEST_RR_OP(ror, x23, x9, x25, 0xfffffffffffffdff, 0xfffffffffffffdff, 0x80000000000000, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_18_0)


ror_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0xfffffffffffffbff), rs1:x8(0xfffffffffffffbff), rs2:x24(0x0040000000000000)
    TEST_RR_OP(ror, x24, x8, x24, 0xfffffffffffffbff, 0xfffffffffffffbff, 0x40000000000000, x1, 0, x2)

ror_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0xfffffffffffff7ff), rs1:x7(0xfffffffffffff7ff), rs2:x23(0x0020000000000000)
    TEST_RR_OP(ror, x25, x7, x23, 0xfffffffffffff7ff, 0xfffffffffffff7ff, 0x20000000000000, x1, 8, x2)

ror_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffefff), rs1:x6(0xffffffffffffefff), rs2:x22(0x0010000000000000)
    TEST_RR_OP(ror, x26, x6, x22, 0xffffffffffffefff, 0xffffffffffffefff, 0x10000000000000, x1, 16, x2)

ror_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffdfff), rs1:x5(0xffffffffffffdfff), rs2:x21(0x0008000000000000)
    TEST_RR_OP(ror, x27, x5, x21, 0xffffffffffffdfff, 0xffffffffffffdfff, 0x8000000000000, x1, 24, x2)

ror_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffbfff), rs1:x4(0xffffffffffffbfff), rs2:x20(0x0004000000000000)
    TEST_RR_OP(ror, x28, x4, x20, 0xffffffffffffbfff, 0xffffffffffffbfff, 0x4000000000000, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x4,signature_19_0)


ror_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffff7fff), rs1:x3(0xffffffffffff7fff), rs2:x19(0x0002000000000000)
    TEST_RR_OP(ror, x29, x3, x19, 0xffffffffffff7fff, 0xffffffffffff7fff, 0x2000000000000, x4, 0, x5)

ror_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0xfffffffffffeffff), rs1:x2(0xfffffffffffeffff), rs2:x18(0x0001000000000000)
    TEST_RR_OP(ror, x30, x2, x18, 0xfffffffffffeffff, 0xfffffffffffeffff, 0x1000000000000, x4, 8, x5)

ror_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0xfffffffffffdffff), rs1:x1(0xfffffffffffdffff), rs2:x17(0x0000800000000000)
    TEST_RR_OP(ror, x31, x1, x17, 0xfffffffffffdffff, 0xfffffffffffdffff, 0x800000000000, x4, 16, x5)

ror_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0xfffffffffffbffff), rs1:x31(0xfffffffffffbffff), rs2:x16(0x0000400000000000)
    TEST_RR_OP(ror, x1, x31, x16, 0xfffffffffffbffff, 0xfffffffffffbffff, 0x400000000000, x4, 24, x5)

ror_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0xfffffffffff7ffff), rs1:x30(0xfffffffffff7ffff), rs2:x15(0x0000200000000000)
    TEST_RR_OP(ror, x2, x30, x15, 0xfffffffffff7ffff, 0xfffffffffff7ffff, 0x200000000000, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_20_0)


ror_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffefffff), rs1:x29(0xffffffffffefffff), rs2:x14(0x0000100000000000)
    TEST_RR_OP(ror, x3, x29, x14, 0xffffffffffefffff, 0xffffffffffefffff, 0x100000000000, x1, 0, x2)

ror_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffdfffff), rs1:x28(0xffffffffffdfffff), rs2:x13(0x0000080000000000)
    TEST_RR_OP(ror, x4, x28, x13, 0xffffffffffdfffff, 0xffffffffffdfffff, 0x80000000000, x1, 8, x2)

ror_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffbfffff), rs1:x27(0xffffffffffbfffff), rs2:x12(0x0000040000000000)
    TEST_RR_OP(ror, x5, x27, x12, 0xffffffffffbfffff, 0xffffffffffbfffff, 0x40000000000, x1, 16, x2)

ror_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0xffffffffff7fffff), rs1:x26(0xffffffffff7fffff), rs2:x11(0x0000020000000000)
    TEST_RR_OP(ror, x6, x26, x11, 0xffffffffff7fffff, 0xffffffffff7fffff, 0x20000000000, x1, 24, x2)

ror_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0xfffffffffeffffff), rs1:x25(0xfffffffffeffffff), rs2:x10(0x0000010000000000)
    TEST_RR_OP(ror, x7, x25, x10, 0xfffffffffeffffff, 0xfffffffffeffffff, 0x10000000000, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_21_0)


ror_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0xfffffffffdffffff), rs1:x24(0xfffffffffdffffff), rs2:x9(0x0000008000000000)
    TEST_RR_OP(ror, x8, x24, x9, 0xfffffffffdffffff, 0xfffffffffdffffff, 0x8000000000, x1, 0, x2)

ror_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0xfffffffffbffffff), rs1:x23(0xfffffffffbffffff), rs2:x8(0x0000004000000000)
    TEST_RR_OP(ror, x9, x23, x8, 0xfffffffffbffffff, 0xfffffffffbffffff, 0x4000000000, x1, 8, x2)

ror_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0xfffffffff7ffffff), rs1:x22(0xfffffffff7ffffff), rs2:x7(0x0000002000000000)
    TEST_RR_OP(ror, x10, x22, x7, 0xfffffffff7ffffff, 0xfffffffff7ffffff, 0x2000000000, x1, 16, x2)

ror_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0xffffffffefffffff), rs1:x21(0xffffffffefffffff), rs2:x6(0x0000001000000000)
    TEST_RR_OP(ror, x11, x21, x6, 0xffffffffefffffff, 0xffffffffefffffff, 0x1000000000, x1, 24, x2)

ror_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0xffffffffdfffffff), rs1:x20(0xffffffffdfffffff), rs2:x5(0x0000000800000000)
    TEST_RR_OP(ror, x12, x20, x5, 0xffffffffdfffffff, 0xffffffffdfffffff, 0x800000000, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x5,signature_22_0)


ror_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0xffffffffbfffffff), rs1:x19(0xffffffffbfffffff), rs2:x4(0x0000000400000000)
    TEST_RR_OP(ror, x13, x19, x4, 0xffffffffbfffffff, 0xffffffffbfffffff, 0x400000000, x5, 0, x6)

ror_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0xffffffff7fffffff), rs1:x18(0xffffffff7fffffff), rs2:x3(0x0000000200000000)
    TEST_RR_OP(ror, x14, x18, x3, 0xffffffff7fffffff, 0xffffffff7fffffff, 0x200000000, x5, 8, x6)

ror_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0xfffffffeffffffff), rs1:x17(0xfffffffeffffffff), rs2:x2(0x0000000100000000)
    TEST_RR_OP(ror, x15, x17, x2, 0xfffffffeffffffff, 0xfffffffeffffffff, 0x100000000, x5, 16, x6)

ror_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0xfffffffdffffffff), rs1:x16(0xfffffffdffffffff), rs2:x1(0x0000000080000000)
    TEST_RR_OP(ror, x16, x16, x1, 0xfffffffdffffffff, 0xfffffffdffffffff, 0x80000000, x5, 24, x6)

ror_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0xfffffffbffffffff), rs1:x15(0xfffffffbffffffff), rs2:x31(0x0000000040000000)
    TEST_RR_OP(ror, x17, x15, x31, 0xfffffffbffffffff, 0xfffffffbffffffff, 0x40000000, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_23_0)


ror_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0xfffffff7ffffffff), rs1:x14(0xfffffff7ffffffff), rs2:x30(0x0000000020000000)
    TEST_RR_OP(ror, x18, x14, x30, 0xfffffff7ffffffff, 0xfffffff7ffffffff, 0x20000000, x1, 0, x2)

ror_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0xffffffefffffffff), rs1:x13(0xffffffefffffffff), rs2:x29(0x0000000010000000)
    TEST_RR_OP(ror, x19, x13, x29, 0xffffffefffffffff, 0xffffffefffffffff, 0x10000000, x1, 8, x2)

ror_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0xffffffdfffffffff), rs1:x12(0xffffffdfffffffff), rs2:x28(0x0000000008000000)
    TEST_RR_OP(ror, x20, x12, x28, 0xffffffdfffffffff, 0xffffffdfffffffff, 0x8000000, x1, 16, x2)

ror_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0xffffffbfffffffff), rs1:x11(0xffffffbfffffffff), rs2:x27(0x0000000004000000)
    TEST_RR_OP(ror, x21, x11, x27, 0xffffffbfffffffff, 0xffffffbfffffffff, 0x4000000, x1, 24, x2)

ror_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0xffffff7fffffffff), rs1:x10(0xffffff7fffffffff), rs2:x26(0x0000000002000000)
    TEST_RR_OP(ror, x22, x10, x26, 0xffffff7fffffffff, 0xffffff7fffffffff, 0x2000000, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_24_0)


ror_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0xfffffeffffffffff), rs1:x9(0xfffffeffffffffff), rs2:x25(0x0000000001000000)
    TEST_RR_OP(ror, x23, x9, x25, 0xfffffeffffffffff, 0xfffffeffffffffff, 0x1000000, x1, 0, x2)

ror_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0xfffffdffffffffff), rs1:x8(0xfffffdffffffffff), rs2:x24(0x0000000000800000)
    TEST_RR_OP(ror, x24, x8, x24, 0xfffffdffffffffff, 0xfffffdffffffffff, 0x800000, x1, 8, x2)

ror_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0xfffffbffffffffff), rs1:x7(0xfffffbffffffffff), rs2:x23(0x0000000000400000)
    TEST_RR_OP(ror, x25, x7, x23, 0xfffffbffffffffff, 0xfffffbffffffffff, 0x400000, x1, 16, x2)

ror_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0xfffff7ffffffffff), rs1:x6(0xfffff7ffffffffff), rs2:x22(0x0000000000200000)
    TEST_RR_OP(ror, x26, x6, x22, 0xfffff7ffffffffff, 0xfffff7ffffffffff, 0x200000, x1, 24, x2)

ror_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0xffffefffffffffff), rs1:x5(0xffffefffffffffff), rs2:x21(0x0000000000100000)
    TEST_RR_OP(ror, x27, x5, x21, 0xffffefffffffffff, 0xffffefffffffffff, 0x100000, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x5,signature_25_0)


ror_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0xffffdfffffffffff), rs1:x4(0xffffdfffffffffff), rs2:x20(0x0000000000080000)
    TEST_RR_OP(ror, x28, x4, x20, 0xffffdfffffffffff, 0xffffdfffffffffff, 0x80000, x5, 0, x6)

ror_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0xffffbfffffffffff), rs1:x3(0xffffbfffffffffff), rs2:x19(0x0000000000040000)
    TEST_RR_OP(ror, x29, x3, x19, 0xffffbfffffffffff, 0xffffbfffffffffff, 0x40000, x5, 8, x6)

ror_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0xffff7fffffffffff), rs1:x2(0xffff7fffffffffff), rs2:x18(0x0000000000020000)
    TEST_RR_OP(ror, x30, x2, x18, 0xffff7fffffffffff, 0xffff7fffffffffff, 0x20000, x5, 16, x6)

ror_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0xfffeffffffffffff), rs1:x1(0xfffeffffffffffff), rs2:x17(0x0000000000010000)
    TEST_RR_OP(ror, x31, x1, x17, 0xfffeffffffffffff, 0xfffeffffffffffff, 0x10000, x5, 24, x6)

ror_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0xfffdffffffffffff), rs1:x31(0xfffdffffffffffff), rs2:x16(0x0000000000008000)
    TEST_RR_OP(ror, x1, x31, x16, 0xfffdffffffffffff, 0xfffdffffffffffff, 0x8000, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_26_0)


ror_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0xfffbffffffffffff), rs1:x30(0xfffbffffffffffff), rs2:x15(0x0000000000004000)
    TEST_RR_OP(ror, x2, x30, x15, 0xfffbffffffffffff, 0xfffbffffffffffff, 0x4000, x1, 0, x7)

ror_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0xfff7ffffffffffff), rs1:x29(0xfff7ffffffffffff), rs2:x14(0x0000000000002000)
    TEST_RR_OP(ror, x3, x29, x14, 0xfff7ffffffffffff, 0xfff7ffffffffffff, 0x2000, x1, 8, x7)

ror_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0xffefffffffffffff), rs1:x28(0xffefffffffffffff), rs2:x13(0x0000000000001000)
    TEST_RR_OP(ror, x4, x28, x13, 0xffefffffffffffff, 0xffefffffffffffff, 0x1000, x1, 16, x7)

ror_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0xffdfffffffffffff), rs1:x27(0xffdfffffffffffff), rs2:x12(0x0000000000000800)
    TEST_RR_OP(ror, x5, x27, x12, 0xffdfffffffffffff, 0xffdfffffffffffff, 0x800, x1, 24, x7)

ror_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0xffbfffffffffffff), rs1:x26(0xffbfffffffffffff), rs2:x11(0x0000000000000400)
    TEST_RR_OP(ror, x6, x26, x11, 0xffbfffffffffffff, 0xffbfffffffffffff, 0x400, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_27_0)


ror_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0xff7fffffffffffff), rs1:x25(0xff7fffffffffffff), rs2:x10(0x0000000000000200)
    TEST_RR_OP(ror, x7, x25, x10, 0xff7fffffffffffff, 0xff7fffffffffffff, 0x200, x1, 0, x2)

ror_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0xfeffffffffffffff), rs1:x24(0xfeffffffffffffff), rs2:x9(0x0000000000000100)
    TEST_RR_OP(ror, x8, x24, x9, 0xfeffffffffffffff, 0xfeffffffffffffff, 0x100, x1, 8, x2)

ror_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0xfdffffffffffffff), rs1:x23(0xfdffffffffffffff), rs2:x8(0x0000000000000080)
    TEST_RR_OP(ror, x9, x23, x8, 0xfdffffffffffffff, 0xfdffffffffffffff, 0x80, x1, 16, x2)

ror_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0xfbffffffffffffff), rs1:x22(0xfbffffffffffffff), rs2:x7(0x0000000000000040)
    TEST_RR_OP(ror, x10, x22, x7, 0xfbffffffffffffff, 0xfbffffffffffffff, 0x40, x1, 24, x2)

ror_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0xfffffffff7ffffff), rs1:x21(0xf7ffffffffffffff), rs2:x6(0x0000000000000020)
    TEST_RR_OP(ror, x11, x21, x6, 0xfffffffff7ffffff, 0xf7ffffffffffffff, 0x20, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x6,signature_28_0)


ror_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0xffffefffffffffff), rs1:x20(0xefffffffffffffff), rs2:x5(0x0000000000000010)
    TEST_RR_OP(ror, x12, x20, x5, 0xffffefffffffffff, 0xefffffffffffffff, 0x10, x6, 0, x7)

ror_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0xffdfffffffffffff), rs1:x19(0xdfffffffffffffff), rs2:x4(0x0000000000000008)
    TEST_RR_OP(ror, x13, x19, x4, 0xffdfffffffffffff, 0xdfffffffffffffff, 0x8, x6, 8, x7)

ror_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0xfbffffffffffffff), rs1:x18(0xbfffffffffffffff), rs2:x3(0x0000000000000004)
    TEST_RR_OP(ror, x14, x18, x3, 0xfbffffffffffffff, 0xbfffffffffffffff, 0x4, x6, 16, x7)

ror_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0xdfffffffffffffff), rs1:x17(0x7fffffffffffffff), rs2:x2(0x0000000000000002)
    TEST_RR_OP(ror, x15, x17, x2, 0xdfffffffffffffff, 0x7fffffffffffffff, 0x2, x6, 24, x7)

ror_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xffffffffffffffff), rs2:x1(0x0000000000000001)
    TEST_RR_OP(ror, x16, x16, x1, 0xffffffffffffffff, 0xffffffffffffffff, 0x1, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_29_0)


ror_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000001), rs1:x15(0x0000000000000001), rs2:x31(0x0000000000000000)
    TEST_RR_OP(ror, x17, x15, x31, 0x0000000000000001, 0x1, 0x0, x1, 0, x2)

ror_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000002), rs1:x14(0x0000000000000002), rs2:x30(0x0000000000000000)
    TEST_RR_OP(ror, x18, x14, x30, 0x0000000000000002, 0x2, 0x0, x1, 8, x2)

ror_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000004), rs1:x13(0x0000000000000004), rs2:x29(0x0000000000000000)
    TEST_RR_OP(ror, x19, x13, x29, 0x0000000000000004, 0x4, 0x0, x1, 16, x2)

ror_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000008), rs1:x12(0x0000000000000008), rs2:x28(0x0000000000000000)
    TEST_RR_OP(ror, x20, x12, x28, 0x0000000000000008, 0x8, 0x0, x1, 24, x2)

ror_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000010), rs1:x11(0x0000000000000010), rs2:x27(0x0000000000000000)
    TEST_RR_OP(ror, x21, x11, x27, 0x0000000000000010, 0x10, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_30_0)


ror_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000020), rs1:x10(0x0000000000000020), rs2:x26(0x0000000000000000)
    TEST_RR_OP(ror, x22, x10, x26, 0x0000000000000020, 0x20, 0x0, x1, 0, x2)

ror_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000040), rs1:x9(0x0000000000000040), rs2:x25(0x0000000000000000)
    TEST_RR_OP(ror, x23, x9, x25, 0x0000000000000040, 0x40, 0x0, x1, 8, x2)

ror_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000080), rs1:x8(0x0000000000000080), rs2:x24(0x0000000000000000)
    TEST_RR_OP(ror, x24, x8, x24, 0x0000000000000080, 0x80, 0x0, x1, 16, x2)

ror_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000100), rs1:x7(0x0000000000000100), rs2:x23(0x0000000000000000)
    TEST_RR_OP(ror, x25, x7, x23, 0x0000000000000100, 0x100, 0x0, x1, 24, x2)

ror_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000200), rs1:x6(0x0000000000000200), rs2:x22(0x0000000000000000)
    TEST_RR_OP(ror, x26, x6, x22, 0x0000000000000200, 0x200, 0x0, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x6,signature_31_0)


ror_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000400), rs1:x5(0x0000000000000400), rs2:x21(0x0000000000000000)
    TEST_RR_OP(ror, x27, x5, x21, 0x0000000000000400, 0x400, 0x0, x6, 0, x7)

ror_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000800), rs1:x4(0x0000000000000800), rs2:x20(0x0000000000000000)
    TEST_RR_OP(ror, x28, x4, x20, 0x0000000000000800, 0x800, 0x0, x6, 8, x7)

ror_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0000000000001000), rs1:x3(0x0000000000001000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(ror, x29, x3, x19, 0x0000000000001000, 0x1000, 0x0, x6, 16, x7)

ror_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000000002000), rs1:x2(0x0000000000002000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(ror, x30, x2, x18, 0x0000000000002000, 0x2000, 0x0, x6, 24, x7)

ror_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0000000000004000), rs1:x1(0x0000000000004000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(ror, x31, x1, x17, 0x0000000000004000, 0x4000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x6,signature_32_0)


ror_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000000008000), rs1:x31(0x0000000000008000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(ror, x1, x31, x16, 0x0000000000008000, 0x8000, 0x0, x6, 0, x7)

ror_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000000000010000), rs1:x30(0x0000000000010000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(ror, x2, x30, x15, 0x0000000000010000, 0x10000, 0x0, x6, 8, x7)

ror_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000000020000), rs1:x29(0x0000000000020000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(ror, x3, x29, x14, 0x0000000000020000, 0x20000, 0x0, x6, 16, x7)

ror_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000000040000), rs1:x28(0x0000000000040000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(ror, x4, x28, x13, 0x0000000000040000, 0x40000, 0x0, x6, 24, x7)

ror_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000000080000), rs1:x27(0x0000000000080000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(ror, x5, x27, x12, 0x0000000000080000, 0x80000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_33_0)


ror_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000000100000), rs1:x26(0x0000000000100000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(ror, x6, x26, x11, 0x0000000000100000, 0x100000, 0x0, x1, 0, x2)

ror_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000000200000), rs1:x25(0x0000000000200000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(ror, x7, x25, x10, 0x0000000000200000, 0x200000, 0x0, x1, 8, x2)

ror_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000000400000), rs1:x24(0x0000000000400000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(ror, x8, x24, x9, 0x0000000000400000, 0x400000, 0x0, x1, 16, x2)

ror_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000000800000), rs1:x23(0x0000000000800000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(ror, x9, x23, x8, 0x0000000000800000, 0x800000, 0x0, x1, 24, x2)

ror_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000001000000), rs1:x22(0x0000000001000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(ror, x10, x22, x7, 0x0000000001000000, 0x1000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_34_0)


ror_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000002000000), rs1:x21(0x0000000002000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(ror, x11, x21, x6, 0x0000000002000000, 0x2000000, 0x0, x1, 0, x7)

ror_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000004000000), rs1:x20(0x0000000004000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(ror, x12, x20, x5, 0x0000000004000000, 0x4000000, 0x0, x1, 8, x7)

ror_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000008000000), rs1:x19(0x0000000008000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(ror, x13, x19, x4, 0x0000000008000000, 0x8000000, 0x0, x1, 16, x7)

ror_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000010000000), rs1:x18(0x0000000010000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(ror, x14, x18, x3, 0x0000000010000000, 0x10000000, 0x0, x1, 24, x7)

ror_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000020000000), rs1:x17(0x0000000020000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(ror, x15, x17, x2, 0x0000000020000000, 0x20000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x2,signature_35_0)


ror_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000040000000), rs1:x16(0x0000000040000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(ror, x16, x16, x1, 0x0000000040000000, 0x40000000, 0x0, x2, 0, x3)

ror_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000000080000000), rs1:x15(0x0000000080000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(ror, x17, x15, x31, 0x0000000080000000, 0x80000000, 0x0, x2, 8, x3)

ror_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000100000000), rs1:x14(0x0000000100000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(ror, x18, x14, x30, 0x0000000100000000, 0x100000000, 0x0, x2, 16, x3)

ror_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000200000000), rs1:x13(0x0000000200000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(ror, x19, x13, x29, 0x0000000200000000, 0x200000000, 0x0, x2, 24, x3)

ror_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000000400000000), rs1:x12(0x0000000400000000), rs2:x28(0x0000000000000000)
    TEST_RR_OP(ror, x20, x12, x28, 0x0000000400000000, 0x400000000, 0x0, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_36_0)


ror_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000800000000), rs1:x11(0x0000000800000000), rs2:x27(0x0000000000000000)
    TEST_RR_OP(ror, x21, x11, x27, 0x0000000800000000, 0x800000000, 0x0, x1, 0, x2)

ror_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000001000000000), rs1:x10(0x0000001000000000), rs2:x26(0x0000000000000000)
    TEST_RR_OP(ror, x22, x10, x26, 0x0000001000000000, 0x1000000000, 0x0, x1, 8, x2)

ror_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000002000000000), rs1:x9(0x0000002000000000), rs2:x25(0x0000000000000000)
    TEST_RR_OP(ror, x23, x9, x25, 0x0000002000000000, 0x2000000000, 0x0, x1, 16, x2)

ror_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000004000000000), rs1:x8(0x0000004000000000), rs2:x24(0x0000000000000000)
    TEST_RR_OP(ror, x24, x8, x24, 0x0000004000000000, 0x4000000000, 0x0, x1, 24, x2)

ror_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000008000000000), rs1:x7(0x0000008000000000), rs2:x23(0x0000000000000000)
    TEST_RR_OP(ror, x25, x7, x23, 0x0000008000000000, 0x8000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_37_0)


ror_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000010000000000), rs1:x6(0x0000010000000000), rs2:x22(0x0000000000000000)
    TEST_RR_OP(ror, x26, x6, x22, 0x0000010000000000, 0x10000000000, 0x0, x1, 0, x7)

ror_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000020000000000), rs1:x5(0x0000020000000000), rs2:x21(0x0000000000000000)
    TEST_RR_OP(ror, x27, x5, x21, 0x0000020000000000, 0x20000000000, 0x0, x1, 8, x7)

ror_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000040000000000), rs1:x4(0x0000040000000000), rs2:x20(0x0000000000000000)
    TEST_RR_OP(ror, x28, x4, x20, 0x0000040000000000, 0x40000000000, 0x0, x1, 16, x7)

ror_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000080000000000), rs1:x3(0x0000080000000000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(ror, x29, x3, x19, 0x0000080000000000, 0x80000000000, 0x0, x1, 24, x7)

ror_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000100000000000), rs1:x2(0x0000100000000000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(ror, x30, x2, x18, 0x0000100000000000, 0x100000000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x5,signature_38_0)


ror_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000200000000000), rs1:x1(0x0000200000000000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(ror, x31, x1, x17, 0x0000200000000000, 0x200000000000, 0x0, x5, 0, x6)

ror_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000400000000000), rs1:x31(0x0000400000000000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(ror, x1, x31, x16, 0x0000400000000000, 0x400000000000, 0x0, x5, 8, x6)

ror_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000800000000000), rs1:x30(0x0000800000000000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(ror, x2, x30, x15, 0x0000800000000000, 0x800000000000, 0x0, x5, 16, x6)

ror_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0001000000000000), rs1:x29(0x0001000000000000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(ror, x3, x29, x14, 0x0001000000000000, 0x1000000000000, 0x0, x5, 24, x6)

ror_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0002000000000000), rs1:x28(0x0002000000000000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(ror, x4, x28, x13, 0x0002000000000000, 0x2000000000000, 0x0, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_39_0)


ror_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0004000000000000), rs1:x27(0x0004000000000000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(ror, x5, x27, x12, 0x0004000000000000, 0x4000000000000, 0x0, x1, 0, x2)

ror_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0008000000000000), rs1:x26(0x0008000000000000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(ror, x6, x26, x11, 0x0008000000000000, 0x8000000000000, 0x0, x1, 8, x2)

ror_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0010000000000000), rs1:x25(0x0010000000000000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(ror, x7, x25, x10, 0x0010000000000000, 0x10000000000000, 0x0, x1, 16, x2)

ror_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0020000000000000), rs1:x24(0x0020000000000000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(ror, x8, x24, x9, 0x0020000000000000, 0x20000000000000, 0x0, x1, 24, x2)

ror_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0040000000000000), rs1:x23(0x0040000000000000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(ror, x9, x23, x8, 0x0040000000000000, 0x40000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_40_0)


ror_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0080000000000000), rs1:x22(0x0080000000000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(ror, x10, x22, x7, 0x0080000000000000, 0x80000000000000, 0x0, x1, 0, x2)

ror_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0100000000000000), rs1:x21(0x0100000000000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(ror, x11, x21, x6, 0x0100000000000000, 0x100000000000000, 0x0, x1, 8, x2)

ror_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0200000000000000), rs1:x20(0x0200000000000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(ror, x12, x20, x5, 0x0200000000000000, 0x200000000000000, 0x0, x1, 16, x2)

ror_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0400000000000000), rs1:x19(0x0400000000000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(ror, x13, x19, x4, 0x0400000000000000, 0x400000000000000, 0x0, x1, 24, x2)

ror_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0800000000000000), rs1:x18(0x0800000000000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(ror, x14, x18, x3, 0x0800000000000000, 0x800000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x3,signature_41_0)


ror_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x1000000000000000), rs1:x17(0x1000000000000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(ror, x15, x17, x2, 0x1000000000000000, 0x1000000000000000, 0x0, x3, 0, x4)

ror_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x2000000000000000), rs1:x16(0x2000000000000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(ror, x16, x16, x1, 0x2000000000000000, 0x2000000000000000, 0x0, x3, 8, x4)

ror_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x4000000000000000), rs1:x15(0x4000000000000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(ror, x17, x15, x31, 0x4000000000000000, 0x4000000000000000, 0x0, x3, 16, x4)

ror_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x8000000000000000), rs1:x14(0x8000000000000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(ror, x18, x14, x30, 0x8000000000000000, 0x8000000000000000, 0x0, x3, 24, x4)

ror_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(ror, x19, x13, x29, 0x0000000000000000, 0x0, 0x0, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_42_0)


ror_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0xfffffffffffffffe), rs1:x12(0xfffffffffffffffe), rs2:x28(0x0000000000000000)
    TEST_RR_OP(ror, x20, x12, x28, 0xfffffffffffffffe, 0xfffffffffffffffe, 0x0, x1, 0, x2)

ror_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0xfffffffffffffffd), rs1:x11(0xfffffffffffffffd), rs2:x27(0x0000000000000000)
    TEST_RR_OP(ror, x21, x11, x27, 0xfffffffffffffffd, 0xfffffffffffffffd, 0x0, x1, 8, x2)

ror_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0xfffffffffffffffb), rs1:x10(0xfffffffffffffffb), rs2:x26(0x0000000000000000)
    TEST_RR_OP(ror, x22, x10, x26, 0xfffffffffffffffb, 0xfffffffffffffffb, 0x0, x1, 16, x2)

ror_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0xfffffffffffffff7), rs1:x9(0xfffffffffffffff7), rs2:x25(0x0000000000000000)
    TEST_RR_OP(ror, x23, x9, x25, 0xfffffffffffffff7, 0xfffffffffffffff7, 0x0, x1, 24, x2)

ror_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffef), rs1:x8(0xffffffffffffffef), rs2:x24(0x0000000000000000)
    TEST_RR_OP(ror, x24, x8, x24, 0xffffffffffffffef, 0xffffffffffffffef, 0x0, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_43_0)


ror_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffdf), rs1:x7(0xffffffffffffffdf), rs2:x23(0x0000000000000000)
    TEST_RR_OP(ror, x25, x7, x23, 0xffffffffffffffdf, 0xffffffffffffffdf, 0x0, x1, 0, x2)

ror_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffbf), rs1:x6(0xffffffffffffffbf), rs2:x22(0x0000000000000000)
    TEST_RR_OP(ror, x26, x6, x22, 0xffffffffffffffbf, 0xffffffffffffffbf, 0x0, x1, 8, x2)

ror_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffff7f), rs1:x5(0xffffffffffffff7f), rs2:x21(0x0000000000000000)
    TEST_RR_OP(ror, x27, x5, x21, 0xffffffffffffff7f, 0xffffffffffffff7f, 0x0, x1, 16, x2)

ror_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0xfffffffffffffeff), rs1:x4(0xfffffffffffffeff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(ror, x28, x4, x20, 0xfffffffffffffeff, 0xfffffffffffffeff, 0x0, x1, 24, x2)

ror_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0xfffffffffffffdff), rs1:x3(0xfffffffffffffdff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(ror, x29, x3, x19, 0xfffffffffffffdff, 0xfffffffffffffdff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x4,signature_44_0)


ror_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0xfffffffffffffbff), rs1:x2(0xfffffffffffffbff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(ror, x30, x2, x18, 0xfffffffffffffbff, 0xfffffffffffffbff, 0x0, x4, 0, x5)

ror_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0xfffffffffffff7ff), rs1:x1(0xfffffffffffff7ff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(ror, x31, x1, x17, 0xfffffffffffff7ff, 0xfffffffffffff7ff, 0x0, x4, 8, x5)

ror_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffefff), rs1:x31(0xffffffffffffefff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(ror, x1, x31, x16, 0xffffffffffffefff, 0xffffffffffffefff, 0x0, x4, 16, x5)

ror_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffdfff), rs1:x30(0xffffffffffffdfff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(ror, x2, x30, x15, 0xffffffffffffdfff, 0xffffffffffffdfff, 0x0, x4, 24, x5)

ror_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffbfff), rs1:x29(0xffffffffffffbfff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(ror, x3, x29, x14, 0xffffffffffffbfff, 0xffffffffffffbfff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_45_0)


ror_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffff7fff), rs1:x28(0xffffffffffff7fff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(ror, x4, x28, x13, 0xffffffffffff7fff, 0xffffffffffff7fff, 0x0, x1, 0, x2)

ror_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0xfffffffffffeffff), rs1:x27(0xfffffffffffeffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(ror, x5, x27, x12, 0xfffffffffffeffff, 0xfffffffffffeffff, 0x0, x1, 8, x2)

ror_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0xfffffffffffdffff), rs1:x26(0xfffffffffffdffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(ror, x6, x26, x11, 0xfffffffffffdffff, 0xfffffffffffdffff, 0x0, x1, 16, x2)

ror_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0xfffffffffffbffff), rs1:x25(0xfffffffffffbffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(ror, x7, x25, x10, 0xfffffffffffbffff, 0xfffffffffffbffff, 0x0, x1, 24, x2)

ror_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0xfffffffffff7ffff), rs1:x24(0xfffffffffff7ffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(ror, x8, x24, x9, 0xfffffffffff7ffff, 0xfffffffffff7ffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_46_0)


ror_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffefffff), rs1:x23(0xffffffffffefffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(ror, x9, x23, x8, 0xffffffffffefffff, 0xffffffffffefffff, 0x0, x1, 0, x2)

ror_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffdfffff), rs1:x22(0xffffffffffdfffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(ror, x10, x22, x7, 0xffffffffffdfffff, 0xffffffffffdfffff, 0x0, x1, 8, x2)

ror_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffbfffff), rs1:x21(0xffffffffffbfffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(ror, x11, x21, x6, 0xffffffffffbfffff, 0xffffffffffbfffff, 0x0, x1, 16, x2)

ror_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0xffffffffff7fffff), rs1:x20(0xffffffffff7fffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(ror, x12, x20, x5, 0xffffffffff7fffff, 0xffffffffff7fffff, 0x0, x1, 24, x2)

ror_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0xfffffffffeffffff), rs1:x19(0xfffffffffeffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(ror, x13, x19, x4, 0xfffffffffeffffff, 0xfffffffffeffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x4,signature_47_0)


ror_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0xfffffffffdffffff), rs1:x18(0xfffffffffdffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(ror, x14, x18, x3, 0xfffffffffdffffff, 0xfffffffffdffffff, 0x0, x4, 0, x5)

ror_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0xfffffffffbffffff), rs1:x17(0xfffffffffbffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(ror, x15, x17, x2, 0xfffffffffbffffff, 0xfffffffffbffffff, 0x0, x4, 8, x5)

ror_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0xfffffffff7ffffff), rs1:x16(0xfffffffff7ffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(ror, x16, x16, x1, 0xfffffffff7ffffff, 0xfffffffff7ffffff, 0x0, x4, 16, x5)

ror_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0xffffffffefffffff), rs1:x15(0xffffffffefffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(ror, x17, x15, x31, 0xffffffffefffffff, 0xffffffffefffffff, 0x0, x4, 24, x5)

ror_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0xffffffffdfffffff), rs1:x14(0xffffffffdfffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(ror, x18, x14, x30, 0xffffffffdfffffff, 0xffffffffdfffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_48_0)


ror_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0xffffffffbfffffff), rs1:x13(0xffffffffbfffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(ror, x19, x13, x29, 0xffffffffbfffffff, 0xffffffffbfffffff, 0x0, x1, 0, x2)

ror_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0xffffffff7fffffff), rs1:x12(0xffffffff7fffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(ror, x20, x12, x28, 0xffffffff7fffffff, 0xffffffff7fffffff, 0x0, x1, 8, x2)

ror_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0xfffffffeffffffff), rs1:x11(0xfffffffeffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(ror, x21, x11, x27, 0xfffffffeffffffff, 0xfffffffeffffffff, 0x0, x1, 16, x2)

ror_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0xfffffffdffffffff), rs1:x10(0xfffffffdffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(ror, x22, x10, x26, 0xfffffffdffffffff, 0xfffffffdffffffff, 0x0, x1, 24, x2)

ror_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0xfffffffbffffffff), rs1:x9(0xfffffffbffffffff), rs2:x25(0x0000000000000000)
    TEST_RR_OP(ror, x23, x9, x25, 0xfffffffbffffffff, 0xfffffffbffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_49_0)


ror_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0xfffffff7ffffffff), rs1:x8(0xfffffff7ffffffff), rs2:x24(0x0000000000000000)
    TEST_RR_OP(ror, x24, x8, x24, 0xfffffff7ffffffff, 0xfffffff7ffffffff, 0x0, x1, 0, x2)

ror_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0xffffffefffffffff), rs1:x7(0xffffffefffffffff), rs2:x23(0x0000000000000000)
    TEST_RR_OP(ror, x25, x7, x23, 0xffffffefffffffff, 0xffffffefffffffff, 0x0, x1, 8, x2)

ror_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0xffffffdfffffffff), rs1:x6(0xffffffdfffffffff), rs2:x22(0x0000000000000000)
    TEST_RR_OP(ror, x26, x6, x22, 0xffffffdfffffffff, 0xffffffdfffffffff, 0x0, x1, 16, x2)

ror_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0xffffffbfffffffff), rs1:x5(0xffffffbfffffffff), rs2:x21(0x0000000000000000)
    TEST_RR_OP(ror, x27, x5, x21, 0xffffffbfffffffff, 0xffffffbfffffffff, 0x0, x1, 24, x2)

ror_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0xffffff7fffffffff), rs1:x4(0xffffff7fffffffff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(ror, x28, x4, x20, 0xffffff7fffffffff, 0xffffff7fffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x4,signature_50_0)


ror_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0xfffffeffffffffff), rs1:x3(0xfffffeffffffffff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(ror, x29, x3, x19, 0xfffffeffffffffff, 0xfffffeffffffffff, 0x0, x4, 0, x5)

ror_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0xfffffdffffffffff), rs1:x2(0xfffffdffffffffff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(ror, x30, x2, x18, 0xfffffdffffffffff, 0xfffffdffffffffff, 0x0, x4, 8, x5)

ror_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0xfffffbffffffffff), rs1:x1(0xfffffbffffffffff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(ror, x31, x1, x17, 0xfffffbffffffffff, 0xfffffbffffffffff, 0x0, x4, 16, x5)

ror_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0xfffff7ffffffffff), rs1:x31(0xfffff7ffffffffff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(ror, x1, x31, x16, 0xfffff7ffffffffff, 0xfffff7ffffffffff, 0x0, x4, 24, x5)

ror_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0xffffefffffffffff), rs1:x30(0xffffefffffffffff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(ror, x2, x30, x15, 0xffffefffffffffff, 0xffffefffffffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_51_0)


ror_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0xffffdfffffffffff), rs1:x29(0xffffdfffffffffff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(ror, x3, x29, x14, 0xffffdfffffffffff, 0xffffdfffffffffff, 0x0, x1, 0, x2)

ror_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0xffffbfffffffffff), rs1:x28(0xffffbfffffffffff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(ror, x4, x28, x13, 0xffffbfffffffffff, 0xffffbfffffffffff, 0x0, x1, 8, x2)

ror_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0xffff7fffffffffff), rs1:x27(0xffff7fffffffffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(ror, x5, x27, x12, 0xffff7fffffffffff, 0xffff7fffffffffff, 0x0, x1, 16, x2)

ror_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0xfffeffffffffffff), rs1:x26(0xfffeffffffffffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(ror, x6, x26, x11, 0xfffeffffffffffff, 0xfffeffffffffffff, 0x0, x1, 24, x2)

ror_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0xfffdffffffffffff), rs1:x25(0xfffdffffffffffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(ror, x7, x25, x10, 0xfffdffffffffffff, 0xfffdffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_52_0)


ror_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0xfffbffffffffffff), rs1:x24(0xfffbffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(ror, x8, x24, x9, 0xfffbffffffffffff, 0xfffbffffffffffff, 0x0, x1, 0, x2)

ror_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0xfff7ffffffffffff), rs1:x23(0xfff7ffffffffffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(ror, x9, x23, x8, 0xfff7ffffffffffff, 0xfff7ffffffffffff, 0x0, x1, 8, x2)

ror_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0xffefffffffffffff), rs1:x22(0xffefffffffffffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(ror, x10, x22, x7, 0xffefffffffffffff, 0xffefffffffffffff, 0x0, x1, 16, x2)

ror_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0xffdfffffffffffff), rs1:x21(0xffdfffffffffffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(ror, x11, x21, x6, 0xffdfffffffffffff, 0xffdfffffffffffff, 0x0, x1, 24, x2)

ror_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0xffbfffffffffffff), rs1:x20(0xffbfffffffffffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(ror, x12, x20, x5, 0xffbfffffffffffff, 0xffbfffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x5,signature_53_0)


ror_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0xff7fffffffffffff), rs1:x19(0xff7fffffffffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(ror, x13, x19, x4, 0xff7fffffffffffff, 0xff7fffffffffffff, 0x0, x5, 0, x6)

ror_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0xfeffffffffffffff), rs1:x18(0xfeffffffffffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(ror, x14, x18, x3, 0xfeffffffffffffff, 0xfeffffffffffffff, 0x0, x5, 8, x6)

ror_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0xfdffffffffffffff), rs1:x17(0xfdffffffffffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(ror, x15, x17, x2, 0xfdffffffffffffff, 0xfdffffffffffffff, 0x0, x5, 16, x6)

ror_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0xfbffffffffffffff), rs1:x16(0xfbffffffffffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(ror, x16, x16, x1, 0xfbffffffffffffff, 0xfbffffffffffffff, 0x0, x5, 24, x6)

ror_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0xf7ffffffffffffff), rs1:x15(0xf7ffffffffffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(ror, x17, x15, x31, 0xf7ffffffffffffff, 0xf7ffffffffffffff, 0x0, x5, 32, x6)

    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_54_0)


ror_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0xefffffffffffffff), rs1:x14(0xefffffffffffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(ror, x18, x14, x30, 0xefffffffffffffff, 0xefffffffffffffff, 0x0, x1, 0, x2)

ror_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0xdfffffffffffffff), rs1:x13(0xdfffffffffffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(ror, x19, x13, x29, 0xdfffffffffffffff, 0xdfffffffffffffff, 0x0, x1, 8, x2)

ror_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0xbfffffffffffffff), rs1:x12(0xbfffffffffffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(ror, x20, x12, x28, 0xbfffffffffffffff, 0xbfffffffffffffff, 0x0, x1, 16, x2)

ror_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0x7fffffffffffffff), rs1:x11(0x7fffffffffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(ror, x21, x11, x27, 0x7fffffffffffffff, 0x7fffffffffffffff, 0x0, x1, 24, x2)

ror_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xffffffffffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(ror, x22, x10, x26, 0xffffffffffffffff, 0xffffffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",ror)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",ror)

	RVTEST_SIGBASE(x1,signature_55_0)


ror_01_inst_270:
    // Test 270:  Test with rs1 == rs2
    // result rd:x23(0x824379847befe708), rs1:x25(0x10fd3dedadea5195), rs2:x25(0xdf7f3844121bcc23)
    TEST_RR_OP(ror, x23, x25, x25, 0x824379847befe708, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x1, 0, x2)

ror_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1), rs2:x24(0xf5adb41aa47d105b)
    TEST_RR_OP(ror, x0, x8, x24, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x1, 8, x2)

ror_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0xc9649f05a8e1a8bb), rs1:x7(0xc9649f05a8e1a8bb), rs2:x0(0x82f6747f707af2c0)
    TEST_RR_OP(ror, x25, x7, x0, 0xc9649f05a8e1a8bb, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x1, 16, x2)

ror_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb), rs2:x22(0x73a92fd4e19bfbc3)
    TEST_RR_OP(ror, x26, x0, x22, 0x0000000000000000, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x1, 24, x2)
	
#endif


RVTEST_CODE_END ror_01_code_end
RVTEST_CODE_BEGIN aes64es_02_init aes64es_02_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x6,signature_1_0)


aes64es_02_inst_0:
    // Test 0:  Test with dataset: sbox64
    // result rd:x1(0x6316166316166363), rs1:x31(0x0000000000000000), rs2:x16(0xffffffffffffffff)
    TEST_RR_OP(aes64es, x1, x31, x16, 0x6316166316166363, 0x0, 0xffffffffffffffff, x6, 0, x7)

aes64es_02_inst_1:
    // Test 1:  Test with dataset: sbox64
    // result rd:x2(0x7cbbbb7cbbbb7c7c), rs1:x30(0x0101010101010101), rs2:x15(0xfefefefefefefefe)
    TEST_RR_OP(aes64es, x2, x30, x15, 0x7cbbbb7cbbbb7c7c, 0x101010101010101, 0xfefefefefefefefe, x6, 8, x7)

aes64es_02_inst_2:
    // Test 2:  Test with dataset: sbox64
    // result rd:x3(0x7754547754547777), rs1:x29(0x0202020202020202), rs2:x14(0xfdfdfdfdfdfdfdfd)
    TEST_RR_OP(aes64es, x3, x29, x14, 0x7754547754547777, 0x202020202020202, 0xfdfdfdfdfdfdfdfd, x6, 16, x7)

aes64es_02_inst_3:
    // Test 3:  Test with dataset: sbox64
    // result rd:x4(0x7bb0b07bb0b07b7b), rs1:x28(0x0303030303030303), rs2:x13(0xfcfcfcfcfcfcfcfc)
    TEST_RR_OP(aes64es, x4, x28, x13, 0x7bb0b07bb0b07b7b, 0x303030303030303, 0xfcfcfcfcfcfcfcfc, x6, 24, x7)

aes64es_02_inst_4:
    // Test 4:  Test with dataset: sbox64
    // result rd:x5(0xf20f0ff20f0ff2f2), rs1:x27(0x0404040404040404), rs2:x12(0xfbfbfbfbfbfbfbfb)
    TEST_RR_OP(aes64es, x5, x27, x12, 0xf20f0ff20f0ff2f2, 0x404040404040404, 0xfbfbfbfbfbfbfbfb, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_2_0)


aes64es_02_inst_5:
    // Test 5:  Test with dataset: sbox64
    // result rd:x6(0x6b2d2d6b2d2d6b6b), rs1:x26(0x0505050505050505), rs2:x11(0xfafafafafafafafa)
    TEST_RR_OP(aes64es, x6, x26, x11, 0x6b2d2d6b2d2d6b6b, 0x505050505050505, 0xfafafafafafafafa, x1, 0, x2)

aes64es_02_inst_6:
    // Test 6:  Test with dataset: sbox64
    // result rd:x7(0x6f99996f99996f6f), rs1:x25(0x0606060606060606), rs2:x10(0xf9f9f9f9f9f9f9f9)
    TEST_RR_OP(aes64es, x7, x25, x10, 0x6f99996f99996f6f, 0x606060606060606, 0xf9f9f9f9f9f9f9f9, x1, 8, x2)

aes64es_02_inst_7:
    // Test 7:  Test with dataset: sbox64
    // result rd:x8(0xc54141c54141c5c5), rs1:x24(0x0707070707070707), rs2:x9(0xf8f8f8f8f8f8f8f8)
    TEST_RR_OP(aes64es, x8, x24, x9, 0xc54141c54141c5c5, 0x707070707070707, 0xf8f8f8f8f8f8f8f8, x1, 16, x2)

aes64es_02_inst_8:
    // Test 8:  Test with dataset: sbox64
    // result rd:x9(0x3068683068683030), rs1:x23(0x0808080808080808), rs2:x8(0xf7f7f7f7f7f7f7f7)
    TEST_RR_OP(aes64es, x9, x23, x8, 0x3068683068683030, 0x808080808080808, 0xf7f7f7f7f7f7f7f7, x1, 24, x2)

aes64es_02_inst_9:
    // Test 9:  Test with dataset: sbox64
    // result rd:x10(0x0142420142420101), rs1:x22(0x0909090909090909), rs2:x7(0xf6f6f6f6f6f6f6f6)
    TEST_RR_OP(aes64es, x10, x22, x7, 0x0142420142420101, 0x909090909090909, 0xf6f6f6f6f6f6f6f6, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_3_0)


aes64es_02_inst_10:
    // Test 10:  Test with dataset: sbox64
    // result rd:x11(0x67e6e667e6e66767), rs1:x21(0x0a0a0a0a0a0a0a0a), rs2:x6(0xf5f5f5f5f5f5f5f5)
    TEST_RR_OP(aes64es, x11, x21, x6, 0x67e6e667e6e66767, 0xa0a0a0a0a0a0a0a, 0xf5f5f5f5f5f5f5f5, x1, 0, x7)

aes64es_02_inst_11:
    // Test 11:  Test with dataset: sbox64
    // result rd:x12(0x2bbfbf2bbfbf2b2b), rs1:x20(0x0b0b0b0b0b0b0b0b), rs2:x5(0xf4f4f4f4f4f4f4f4)
    TEST_RR_OP(aes64es, x12, x20, x5, 0x2bbfbf2bbfbf2b2b, 0xb0b0b0b0b0b0b0b, 0xf4f4f4f4f4f4f4f4, x1, 8, x7)

aes64es_02_inst_12:
    // Test 12:  Test with dataset: sbox64
    // result rd:x13(0xfe0d0dfe0d0dfefe), rs1:x19(0x0c0c0c0c0c0c0c0c), rs2:x4(0xf3f3f3f3f3f3f3f3)
    TEST_RR_OP(aes64es, x13, x19, x4, 0xfe0d0dfe0d0dfefe, 0xc0c0c0c0c0c0c0c, 0xf3f3f3f3f3f3f3f3, x1, 16, x7)

aes64es_02_inst_13:
    // Test 13:  Test with dataset: sbox64
    // result rd:x14(0xd78989d78989d7d7), rs1:x18(0x0d0d0d0d0d0d0d0d), rs2:x3(0xf2f2f2f2f2f2f2f2)
    TEST_RR_OP(aes64es, x14, x18, x3, 0xd78989d78989d7d7, 0xd0d0d0d0d0d0d0d, 0xf2f2f2f2f2f2f2f2, x1, 24, x7)

aes64es_02_inst_14:
    // Test 14:  Test with dataset: sbox64
    // result rd:x15(0xaba1a1aba1a1abab), rs1:x17(0x0e0e0e0e0e0e0e0e), rs2:x2(0xf1f1f1f1f1f1f1f1)
    TEST_RR_OP(aes64es, x15, x17, x2, 0xaba1a1aba1a1abab, 0xe0e0e0e0e0e0e0e, 0xf1f1f1f1f1f1f1f1, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x2,signature_4_0)


aes64es_02_inst_15:
    // Test 15:  Test with dataset: sbox64
    // result rd:x16(0x768c8c768c8c7676), rs1:x16(0x0f0f0f0f0f0f0f0f), rs2:x1(0xf0f0f0f0f0f0f0f0)
    TEST_RR_OP(aes64es, x16, x16, x1, 0x768c8c768c8c7676, 0xf0f0f0f0f0f0f0f, 0xf0f0f0f0f0f0f0f0, x2, 0, x3)

aes64es_02_inst_16:
    // Test 16:  Test with dataset: sbox64
    // result rd:x17(0xcadfdfcadfdfcaca), rs1:x15(0x1010101010101010), rs2:x31(0xefefefefefefefef)
    TEST_RR_OP(aes64es, x17, x15, x31, 0xcadfdfcadfdfcaca, 0x1010101010101010, 0xefefefefefefefef, x2, 8, x3)

aes64es_02_inst_17:
    // Test 17:  Test with dataset: sbox64
    // result rd:x18(0x8228288228288282), rs1:x14(0x1111111111111111), rs2:x30(0xeeeeeeeeeeeeeeee)
    TEST_RR_OP(aes64es, x18, x14, x30, 0x8228288228288282, 0x1111111111111111, 0xeeeeeeeeeeeeeeee, x2, 16, x3)

aes64es_02_inst_18:
    // Test 18:  Test with dataset: sbox64
    // result rd:x19(0xc95555c95555c9c9), rs1:x13(0x1212121212121212), rs2:x29(0xedededededededed)
    TEST_RR_OP(aes64es, x19, x13, x29, 0xc95555c95555c9c9, 0x1212121212121212, 0xedededededededed, x2, 24, x3)

aes64es_02_inst_19:
    // Test 19:  Test with dataset: sbox64
    // result rd:x20(0x7dcece7dcece7d7d), rs1:x12(0x1313131313131313), rs2:x28(0xecececececececec)
    TEST_RR_OP(aes64es, x20, x12, x28, 0x7dcece7dcece7d7d, 0x1313131313131313, 0xecececececececec, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_5_0)


aes64es_02_inst_20:
    // Test 20:  Test with dataset: sbox64
    // result rd:x21(0xfae9e9fae9e9fafa), rs1:x11(0x1414141414141414), rs2:x27(0xebebebebebebebeb)
    TEST_RR_OP(aes64es, x21, x11, x27, 0xfae9e9fae9e9fafa, 0x1414141414141414, 0xebebebebebebebeb, x1, 0, x2)

aes64es_02_inst_21:
    // Test 21:  Test with dataset: sbox64
    // result rd:x22(0x5987875987875959), rs1:x10(0x1515151515151515), rs2:x26(0xeaeaeaeaeaeaeaea)
    TEST_RR_OP(aes64es, x22, x10, x26, 0x5987875987875959, 0x1515151515151515, 0xeaeaeaeaeaeaeaea, x1, 8, x2)

aes64es_02_inst_22:
    // Test 22:  Test with dataset: sbox64
    // result rd:x23(0x471e1e471e1e4747), rs1:x9(0x1616161616161616), rs2:x25(0xe9e9e9e9e9e9e9e9)
    TEST_RR_OP(aes64es, x23, x9, x25, 0x471e1e471e1e4747, 0x1616161616161616, 0xe9e9e9e9e9e9e9e9, x1, 16, x2)

aes64es_02_inst_23:
    // Test 23:  Test with dataset: sbox64
    // result rd:x24(0xf09b9bf09b9bf0f0), rs1:x8(0x1717171717171717), rs2:x24(0xe8e8e8e8e8e8e8e8)
    TEST_RR_OP(aes64es, x24, x8, x24, 0xf09b9bf09b9bf0f0, 0x1717171717171717, 0xe8e8e8e8e8e8e8e8, x1, 24, x2)

aes64es_02_inst_24:
    // Test 24:  Test with dataset: sbox64
    // result rd:x25(0xad9494ad9494adad), rs1:x7(0x1818181818181818), rs2:x23(0xe7e7e7e7e7e7e7e7)
    TEST_RR_OP(aes64es, x25, x7, x23, 0xad9494ad9494adad, 0x1818181818181818, 0xe7e7e7e7e7e7e7e7, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_6_0)


aes64es_02_inst_25:
    // Test 25:  Test with dataset: sbox64
    // result rd:x26(0xd48e8ed48e8ed4d4), rs1:x6(0x1919191919191919), rs2:x22(0xe6e6e6e6e6e6e6e6)
    TEST_RR_OP(aes64es, x26, x6, x22, 0xd48e8ed48e8ed4d4, 0x1919191919191919, 0xe6e6e6e6e6e6e6e6, x1, 0, x7)

aes64es_02_inst_26:
    // Test 26:  Test with dataset: sbox64
    // result rd:x27(0xa2d9d9a2d9d9a2a2), rs1:x5(0x1a1a1a1a1a1a1a1a), rs2:x21(0xe5e5e5e5e5e5e5e5)
    TEST_RR_OP(aes64es, x27, x5, x21, 0xa2d9d9a2d9d9a2a2, 0x1a1a1a1a1a1a1a1a, 0xe5e5e5e5e5e5e5e5, x1, 8, x7)

aes64es_02_inst_27:
    // Test 27:  Test with dataset: sbox64
    // result rd:x28(0xaf6969af6969afaf), rs1:x4(0x1b1b1b1b1b1b1b1b), rs2:x20(0xe4e4e4e4e4e4e4e4)
    TEST_RR_OP(aes64es, x28, x4, x20, 0xaf6969af6969afaf, 0x1b1b1b1b1b1b1b1b, 0xe4e4e4e4e4e4e4e4, x1, 16, x7)

aes64es_02_inst_28:
    // Test 28:  Test with dataset: sbox64
    // result rd:x29(0x9c11119c11119c9c), rs1:x3(0x1c1c1c1c1c1c1c1c), rs2:x19(0xe3e3e3e3e3e3e3e3)
    TEST_RR_OP(aes64es, x29, x3, x19, 0x9c11119c11119c9c, 0x1c1c1c1c1c1c1c1c, 0xe3e3e3e3e3e3e3e3, x1, 24, x7)

aes64es_02_inst_29:
    // Test 29:  Test with dataset: sbox64
    // result rd:x30(0xa49898a49898a4a4), rs1:x2(0x1d1d1d1d1d1d1d1d), rs2:x18(0xe2e2e2e2e2e2e2e2)
    TEST_RR_OP(aes64es, x30, x2, x18, 0xa49898a49898a4a4, 0x1d1d1d1d1d1d1d1d, 0xe2e2e2e2e2e2e2e2, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x5,signature_7_0)


aes64es_02_inst_30:
    // Test 30:  Test with dataset: sbox64
    // result rd:x31(0x72f8f872f8f87272), rs1:x1(0x1e1e1e1e1e1e1e1e), rs2:x17(0xe1e1e1e1e1e1e1e1)
    TEST_RR_OP(aes64es, x31, x1, x17, 0x72f8f872f8f87272, 0x1e1e1e1e1e1e1e1e, 0xe1e1e1e1e1e1e1e1, x5, 0, x6)

aes64es_02_inst_31:
    // Test 31:  Test with dataset: sbox64
    // result rd:x1(0xc0e1e1c0e1e1c0c0), rs1:x31(0x1f1f1f1f1f1f1f1f), rs2:x16(0xe0e0e0e0e0e0e0e0)
    TEST_RR_OP(aes64es, x1, x31, x16, 0xc0e1e1c0e1e1c0c0, 0x1f1f1f1f1f1f1f1f, 0xe0e0e0e0e0e0e0e0, x5, 8, x6)

aes64es_02_inst_32:
    // Test 32:  Test with dataset: sbox64
    // result rd:x2(0xb79e9eb79e9eb7b7), rs1:x30(0x2020202020202020), rs2:x15(0xdfdfdfdfdfdfdfdf)
    TEST_RR_OP(aes64es, x2, x30, x15, 0xb79e9eb79e9eb7b7, 0x2020202020202020, 0xdfdfdfdfdfdfdfdf, x5, 16, x6)

aes64es_02_inst_33:
    // Test 33:  Test with dataset: sbox64
    // result rd:x3(0xfd1d1dfd1d1dfdfd), rs1:x29(0x2121212121212121), rs2:x14(0xdededededededede)
    TEST_RR_OP(aes64es, x3, x29, x14, 0xfd1d1dfd1d1dfdfd, 0x2121212121212121, 0xdededededededede, x5, 24, x6)

aes64es_02_inst_34:
    // Test 34:  Test with dataset: sbox64
    // result rd:x4(0x93c1c193c1c19393), rs1:x28(0x2222222222222222), rs2:x13(0xdddddddddddddddd)
    TEST_RR_OP(aes64es, x4, x28, x13, 0x93c1c193c1c19393, 0x2222222222222222, 0xdddddddddddddddd, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_8_0)


aes64es_02_inst_35:
    // Test 35:  Test with dataset: sbox64
    // result rd:x5(0x2686862686862626), rs1:x27(0x2323232323232323), rs2:x12(0xdcdcdcdcdcdcdcdc)
    TEST_RR_OP(aes64es, x5, x27, x12, 0x2686862686862626, 0x2323232323232323, 0xdcdcdcdcdcdcdcdc, x1, 0, x2)

aes64es_02_inst_36:
    // Test 36:  Test with dataset: sbox64
    // result rd:x6(0x36b9b936b9b93636), rs1:x26(0x2424242424242424), rs2:x11(0xdbdbdbdbdbdbdbdb)
    TEST_RR_OP(aes64es, x6, x26, x11, 0x36b9b936b9b93636, 0x2424242424242424, 0xdbdbdbdbdbdbdbdb, x1, 8, x2)

aes64es_02_inst_37:
    // Test 37:  Test with dataset: sbox64
    // result rd:x7(0x3f57573f57573f3f), rs1:x25(0x2525252525252525), rs2:x10(0xdadadadadadadada)
    TEST_RR_OP(aes64es, x7, x25, x10, 0x3f57573f57573f3f, 0x2525252525252525, 0xdadadadadadadada, x1, 16, x2)

aes64es_02_inst_38:
    // Test 38:  Test with dataset: sbox64
    // result rd:x8(0xf73535f73535f7f7), rs1:x24(0x2626262626262626), rs2:x9(0xd9d9d9d9d9d9d9d9)
    TEST_RR_OP(aes64es, x8, x24, x9, 0xf73535f73535f7f7, 0x2626262626262626, 0xd9d9d9d9d9d9d9d9, x1, 24, x2)

aes64es_02_inst_39:
    // Test 39:  Test with dataset: sbox64
    // result rd:x9(0xcc6161cc6161cccc), rs1:x23(0x2727272727272727), rs2:x8(0xd8d8d8d8d8d8d8d8)
    TEST_RR_OP(aes64es, x9, x23, x8, 0xcc6161cc6161cccc, 0x2727272727272727, 0xd8d8d8d8d8d8d8d8, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_9_0)


aes64es_02_inst_40:
    // Test 40:  Test with dataset: sbox64
    // result rd:x10(0x340e0e340e0e3434), rs1:x22(0x2828282828282828), rs2:x7(0xd7d7d7d7d7d7d7d7)
    TEST_RR_OP(aes64es, x10, x22, x7, 0x340e0e340e0e3434, 0x2828282828282828, 0xd7d7d7d7d7d7d7d7, x1, 0, x2)

aes64es_02_inst_41:
    // Test 41:  Test with dataset: sbox64
    // result rd:x11(0xa5f6f6a5f6f6a5a5), rs1:x21(0x2929292929292929), rs2:x6(0xd6d6d6d6d6d6d6d6)
    TEST_RR_OP(aes64es, x11, x21, x6, 0xa5f6f6a5f6f6a5a5, 0x2929292929292929, 0xd6d6d6d6d6d6d6d6, x1, 8, x2)

aes64es_02_inst_42:
    // Test 42:  Test with dataset: sbox64
    // result rd:x12(0xe50303e50303e5e5), rs1:x20(0x2a2a2a2a2a2a2a2a), rs2:x5(0xd5d5d5d5d5d5d5d5)
    TEST_RR_OP(aes64es, x12, x20, x5, 0xe50303e50303e5e5, 0x2a2a2a2a2a2a2a2a, 0xd5d5d5d5d5d5d5d5, x1, 16, x2)

aes64es_02_inst_43:
    // Test 43:  Test with dataset: sbox64
    // result rd:x13(0xf14848f14848f1f1), rs1:x19(0x2b2b2b2b2b2b2b2b), rs2:x4(0xd4d4d4d4d4d4d4d4)
    TEST_RR_OP(aes64es, x13, x19, x4, 0xf14848f14848f1f1, 0x2b2b2b2b2b2b2b2b, 0xd4d4d4d4d4d4d4d4, x1, 24, x2)

aes64es_02_inst_44:
    // Test 44:  Test with dataset: sbox64
    // result rd:x14(0x7166667166667171), rs1:x18(0x2c2c2c2c2c2c2c2c), rs2:x3(0xd3d3d3d3d3d3d3d3)
    TEST_RR_OP(aes64es, x14, x18, x3, 0x7166667166667171, 0x2c2c2c2c2c2c2c2c, 0xd3d3d3d3d3d3d3d3, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x3,signature_10_0)


aes64es_02_inst_45:
    // Test 45:  Test with dataset: sbox64
    // result rd:x15(0xd8b5b5d8b5b5d8d8), rs1:x17(0x2d2d2d2d2d2d2d2d), rs2:x2(0xd2d2d2d2d2d2d2d2)
    TEST_RR_OP(aes64es, x15, x17, x2, 0xd8b5b5d8b5b5d8d8, 0x2d2d2d2d2d2d2d2d, 0xd2d2d2d2d2d2d2d2, x3, 0, x4)

aes64es_02_inst_46:
    // Test 46:  Test with dataset: sbox64
    // result rd:x16(0x313e3e313e3e3131), rs1:x16(0x2e2e2e2e2e2e2e2e), rs2:x1(0xd1d1d1d1d1d1d1d1)
    TEST_RR_OP(aes64es, x16, x16, x1, 0x313e3e313e3e3131, 0x2e2e2e2e2e2e2e2e, 0xd1d1d1d1d1d1d1d1, x3, 8, x4)

aes64es_02_inst_47:
    // Test 47:  Test with dataset: sbox64
    // result rd:x17(0x1570701570701515), rs1:x15(0x2f2f2f2f2f2f2f2f), rs2:x31(0xd0d0d0d0d0d0d0d0)
    TEST_RR_OP(aes64es, x17, x15, x31, 0x1570701570701515, 0x2f2f2f2f2f2f2f2f, 0xd0d0d0d0d0d0d0d0, x3, 16, x4)

aes64es_02_inst_48:
    // Test 48:  Test with dataset: sbox64
    // result rd:x18(0x048a8a048a8a0404), rs1:x14(0x3030303030303030), rs2:x30(0xcfcfcfcfcfcfcfcf)
    TEST_RR_OP(aes64es, x18, x14, x30, 0x048a8a048a8a0404, 0x3030303030303030, 0xcfcfcfcfcfcfcfcf, x3, 24, x4)

aes64es_02_inst_49:
    // Test 49:  Test with dataset: sbox64
    // result rd:x19(0xc78b8bc78b8bc7c7), rs1:x13(0x3131313131313131), rs2:x29(0xcececececececece)
    TEST_RR_OP(aes64es, x19, x13, x29, 0xc78b8bc78b8bc7c7, 0x3131313131313131, 0xcececececececece, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_11_0)


aes64es_02_inst_50:
    // Test 50:  Test with dataset: sbox64
    // result rd:x20(0x23bdbd23bdbd2323), rs1:x12(0x3232323232323232), rs2:x28(0xcdcdcdcdcdcdcdcd)
    TEST_RR_OP(aes64es, x20, x12, x28, 0x23bdbd23bdbd2323, 0x3232323232323232, 0xcdcdcdcdcdcdcdcd, x1, 0, x2)

aes64es_02_inst_51:
    // Test 51:  Test with dataset: sbox64
    // result rd:x21(0xc34b4bc34b4bc3c3), rs1:x11(0x3333333333333333), rs2:x27(0xcccccccccccccccc)
    TEST_RR_OP(aes64es, x21, x11, x27, 0xc34b4bc34b4bc3c3, 0x3333333333333333, 0xcccccccccccccccc, x1, 8, x2)

aes64es_02_inst_52:
    // Test 52:  Test with dataset: sbox64
    // result rd:x22(0x181f1f181f1f1818), rs1:x10(0x3434343434343434), rs2:x26(0xcbcbcbcbcbcbcbcb)
    TEST_RR_OP(aes64es, x22, x10, x26, 0x181f1f181f1f1818, 0x3434343434343434, 0xcbcbcbcbcbcbcbcb, x1, 16, x2)

aes64es_02_inst_53:
    // Test 53:  Test with dataset: sbox64
    // result rd:x23(0x9674749674749696), rs1:x9(0x3535353535353535), rs2:x25(0xcacacacacacacaca)
    TEST_RR_OP(aes64es, x23, x9, x25, 0x9674749674749696, 0x3535353535353535, 0xcacacacacacacaca, x1, 24, x2)

aes64es_02_inst_54:
    // Test 54:  Test with dataset: sbox64
    // result rd:x24(0x05dddd05dddd0505), rs1:x8(0x3636363636363636), rs2:x24(0xc9c9c9c9c9c9c9c9)
    TEST_RR_OP(aes64es, x24, x8, x24, 0x05dddd05dddd0505, 0x3636363636363636, 0xc9c9c9c9c9c9c9c9, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_12_0)


aes64es_02_inst_55:
    // Test 55:  Test with dataset: sbox64
    // result rd:x25(0x9ae8e89ae8e89a9a), rs1:x7(0x3737373737373737), rs2:x23(0xc8c8c8c8c8c8c8c8)
    TEST_RR_OP(aes64es, x25, x7, x23, 0x9ae8e89ae8e89a9a, 0x3737373737373737, 0xc8c8c8c8c8c8c8c8, x1, 0, x2)

aes64es_02_inst_56:
    // Test 56:  Test with dataset: sbox64
    // result rd:x26(0x07c6c607c6c60707), rs1:x6(0x3838383838383838), rs2:x22(0xc7c7c7c7c7c7c7c7)
    TEST_RR_OP(aes64es, x26, x6, x22, 0x07c6c607c6c60707, 0x3838383838383838, 0xc7c7c7c7c7c7c7c7, x1, 8, x2)

aes64es_02_inst_57:
    // Test 57:  Test with dataset: sbox64
    // result rd:x27(0x12b4b412b4b41212), rs1:x5(0x3939393939393939), rs2:x21(0xc6c6c6c6c6c6c6c6)
    TEST_RR_OP(aes64es, x27, x5, x21, 0x12b4b412b4b41212, 0x3939393939393939, 0xc6c6c6c6c6c6c6c6, x1, 16, x2)

aes64es_02_inst_58:
    // Test 58:  Test with dataset: sbox64
    // result rd:x28(0x80a6a680a6a68080), rs1:x4(0x3a3a3a3a3a3a3a3a), rs2:x20(0xc5c5c5c5c5c5c5c5)
    TEST_RR_OP(aes64es, x28, x4, x20, 0x80a6a680a6a68080, 0x3a3a3a3a3a3a3a3a, 0xc5c5c5c5c5c5c5c5, x1, 24, x2)

aes64es_02_inst_59:
    // Test 59:  Test with dataset: sbox64
    // result rd:x29(0xe21c1ce21c1ce2e2), rs1:x3(0x3b3b3b3b3b3b3b3b), rs2:x19(0xc4c4c4c4c4c4c4c4)
    TEST_RR_OP(aes64es, x29, x3, x19, 0xe21c1ce21c1ce2e2, 0x3b3b3b3b3b3b3b3b, 0xc4c4c4c4c4c4c4c4, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x4,signature_13_0)


aes64es_02_inst_60:
    // Test 60:  Test with dataset: sbox64
    // result rd:x30(0xeb2e2eeb2e2eebeb), rs1:x2(0x3c3c3c3c3c3c3c3c), rs2:x18(0xc3c3c3c3c3c3c3c3)
    TEST_RR_OP(aes64es, x30, x2, x18, 0xeb2e2eeb2e2eebeb, 0x3c3c3c3c3c3c3c3c, 0xc3c3c3c3c3c3c3c3, x4, 0, x5)

aes64es_02_inst_61:
    // Test 61:  Test with dataset: sbox64
    // result rd:x31(0x2725252725252727), rs1:x1(0x3d3d3d3d3d3d3d3d), rs2:x17(0xc2c2c2c2c2c2c2c2)
    TEST_RR_OP(aes64es, x31, x1, x17, 0x2725252725252727, 0x3d3d3d3d3d3d3d3d, 0xc2c2c2c2c2c2c2c2, x4, 8, x5)

aes64es_02_inst_62:
    // Test 62:  Test with dataset: sbox64
    // result rd:x1(0xb27878b27878b2b2), rs1:x31(0x3e3e3e3e3e3e3e3e), rs2:x16(0xc1c1c1c1c1c1c1c1)
    TEST_RR_OP(aes64es, x1, x31, x16, 0xb27878b27878b2b2, 0x3e3e3e3e3e3e3e3e, 0xc1c1c1c1c1c1c1c1, x4, 16, x5)

aes64es_02_inst_63:
    // Test 63:  Test with dataset: sbox64
    // result rd:x2(0x75baba75baba7575), rs1:x30(0x3f3f3f3f3f3f3f3f), rs2:x15(0xc0c0c0c0c0c0c0c0)
    TEST_RR_OP(aes64es, x2, x30, x15, 0x75baba75baba7575, 0x3f3f3f3f3f3f3f3f, 0xc0c0c0c0c0c0c0c0, x4, 24, x5)

aes64es_02_inst_64:
    // Test 64:  Test with dataset: sbox64
    // result rd:x3(0x0908080908080909), rs1:x29(0x4040404040404040), rs2:x14(0xbfbfbfbfbfbfbfbf)
    TEST_RR_OP(aes64es, x3, x29, x14, 0x0908080908080909, 0x4040404040404040, 0xbfbfbfbfbfbfbfbf, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_14_0)


aes64es_02_inst_65:
    // Test 65:  Test with dataset: sbox64
    // result rd:x4(0x83aeae83aeae8383), rs1:x28(0x4141414141414141), rs2:x13(0xbebebebebebebebe)
    TEST_RR_OP(aes64es, x4, x28, x13, 0x83aeae83aeae8383, 0x4141414141414141, 0xbebebebebebebebe, x1, 0, x2)

aes64es_02_inst_66:
    // Test 66:  Test with dataset: sbox64
    // result rd:x5(0x2c7a7a2c7a7a2c2c), rs1:x27(0x4242424242424242), rs2:x12(0xbdbdbdbdbdbdbdbd)
    TEST_RR_OP(aes64es, x5, x27, x12, 0x2c7a7a2c7a7a2c2c, 0x4242424242424242, 0xbdbdbdbdbdbdbdbd, x1, 8, x2)

aes64es_02_inst_67:
    // Test 67:  Test with dataset: sbox64
    // result rd:x6(0x1a65651a65651a1a), rs1:x26(0x4343434343434343), rs2:x11(0xbcbcbcbcbcbcbcbc)
    TEST_RR_OP(aes64es, x6, x26, x11, 0x1a65651a65651a1a, 0x4343434343434343, 0xbcbcbcbcbcbcbcbc, x1, 16, x2)

aes64es_02_inst_68:
    // Test 68:  Test with dataset: sbox64
    // result rd:x7(0x1beaea1beaea1b1b), rs1:x25(0x4444444444444444), rs2:x10(0xbbbbbbbbbbbbbbbb)
    TEST_RR_OP(aes64es, x7, x25, x10, 0x1beaea1beaea1b1b, 0x4444444444444444, 0xbbbbbbbbbbbbbbbb, x1, 24, x2)

aes64es_02_inst_69:
    // Test 69:  Test with dataset: sbox64
    // result rd:x8(0x6ef4f46ef4f46e6e), rs1:x24(0x4545454545454545), rs2:x9(0xbabababababababa)
    TEST_RR_OP(aes64es, x8, x24, x9, 0x6ef4f46ef4f46e6e, 0x4545454545454545, 0xbabababababababa, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_15_0)


aes64es_02_inst_70:
    // Test 70:  Test with dataset: sbox64
    // result rd:x9(0x5a56565a56565a5a), rs1:x23(0x4646464646464646), rs2:x8(0xb9b9b9b9b9b9b9b9)
    TEST_RR_OP(aes64es, x9, x23, x8, 0x5a56565a56565a5a, 0x4646464646464646, 0xb9b9b9b9b9b9b9b9, x1, 0, x2)

aes64es_02_inst_71:
    // Test 71:  Test with dataset: sbox64
    // result rd:x10(0xa06c6ca06c6ca0a0), rs1:x22(0x4747474747474747), rs2:x7(0xb8b8b8b8b8b8b8b8)
    TEST_RR_OP(aes64es, x10, x22, x7, 0xa06c6ca06c6ca0a0, 0x4747474747474747, 0xb8b8b8b8b8b8b8b8, x1, 8, x2)

aes64es_02_inst_72:
    // Test 72:  Test with dataset: sbox64
    // result rd:x11(0x52a9a952a9a95252), rs1:x21(0x4848484848484848), rs2:x6(0xb7b7b7b7b7b7b7b7)
    TEST_RR_OP(aes64es, x11, x21, x6, 0x52a9a952a9a95252, 0x4848484848484848, 0xb7b7b7b7b7b7b7b7, x1, 16, x2)

aes64es_02_inst_73:
    // Test 73:  Test with dataset: sbox64
    // result rd:x12(0x3b4e4e3b4e4e3b3b), rs1:x20(0x4949494949494949), rs2:x5(0xb6b6b6b6b6b6b6b6)
    TEST_RR_OP(aes64es, x12, x20, x5, 0x3b4e4e3b4e4e3b3b, 0x4949494949494949, 0xb6b6b6b6b6b6b6b6, x1, 24, x2)

aes64es_02_inst_74:
    // Test 74:  Test with dataset: sbox64
    // result rd:x13(0xd6d5d5d6d5d5d6d6), rs1:x19(0x4a4a4a4a4a4a4a4a), rs2:x4(0xb5b5b5b5b5b5b5b5)
    TEST_RR_OP(aes64es, x13, x19, x4, 0xd6d5d5d6d5d5d6d6, 0x4a4a4a4a4a4a4a4a, 0xb5b5b5b5b5b5b5b5, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x4,signature_16_0)


aes64es_02_inst_75:
    // Test 75:  Test with dataset: sbox64
    // result rd:x14(0xb38d8db38d8db3b3), rs1:x18(0x4b4b4b4b4b4b4b4b), rs2:x3(0xb4b4b4b4b4b4b4b4)
    TEST_RR_OP(aes64es, x14, x18, x3, 0xb38d8db38d8db3b3, 0x4b4b4b4b4b4b4b4b, 0xb4b4b4b4b4b4b4b4, x4, 0, x5)

aes64es_02_inst_76:
    // Test 76:  Test with dataset: sbox64
    // result rd:x15(0x296d6d296d6d2929), rs1:x17(0x4c4c4c4c4c4c4c4c), rs2:x2(0xb3b3b3b3b3b3b3b3)
    TEST_RR_OP(aes64es, x15, x17, x2, 0x296d6d296d6d2929, 0x4c4c4c4c4c4c4c4c, 0xb3b3b3b3b3b3b3b3, x4, 8, x5)

aes64es_02_inst_77:
    // Test 77:  Test with dataset: sbox64
    // result rd:x16(0xe33737e33737e3e3), rs1:x16(0x4d4d4d4d4d4d4d4d), rs2:x1(0xb2b2b2b2b2b2b2b2)
    TEST_RR_OP(aes64es, x16, x16, x1, 0xe33737e33737e3e3, 0x4d4d4d4d4d4d4d4d, 0xb2b2b2b2b2b2b2b2, x4, 16, x5)

aes64es_02_inst_78:
    // Test 78:  Test with dataset: sbox64
    // result rd:x17(0x2fc8c82fc8c82f2f), rs1:x15(0x4e4e4e4e4e4e4e4e), rs2:x31(0xb1b1b1b1b1b1b1b1)
    TEST_RR_OP(aes64es, x17, x15, x31, 0x2fc8c82fc8c82f2f, 0x4e4e4e4e4e4e4e4e, 0xb1b1b1b1b1b1b1b1, x4, 24, x5)

aes64es_02_inst_79:
    // Test 79:  Test with dataset: sbox64
    // result rd:x18(0x84e7e784e7e78484), rs1:x14(0x4f4f4f4f4f4f4f4f), rs2:x30(0xb0b0b0b0b0b0b0b0)
    TEST_RR_OP(aes64es, x18, x14, x30, 0x84e7e784e7e78484, 0x4f4f4f4f4f4f4f4f, 0xb0b0b0b0b0b0b0b0, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_17_0)


aes64es_02_inst_80:
    // Test 80:  Test with dataset: sbox64
    // result rd:x19(0x5379795379795353), rs1:x13(0x5050505050505050), rs2:x29(0xafafafafafafafaf)
    TEST_RR_OP(aes64es, x19, x13, x29, 0x5379795379795353, 0x5050505050505050, 0xafafafafafafafaf, x1, 0, x2)

aes64es_02_inst_81:
    // Test 81:  Test with dataset: sbox64
    // result rd:x20(0xd1e4e4d1e4e4d1d1), rs1:x12(0x5151515151515151), rs2:x28(0xaeaeaeaeaeaeaeae)
    TEST_RR_OP(aes64es, x20, x12, x28, 0xd1e4e4d1e4e4d1d1, 0x5151515151515151, 0xaeaeaeaeaeaeaeae, x1, 8, x2)

aes64es_02_inst_82:
    // Test 82:  Test with dataset: sbox64
    // result rd:x21(0x0095950095950000), rs1:x11(0x5252525252525252), rs2:x27(0xadadadadadadadad)
    TEST_RR_OP(aes64es, x21, x11, x27, 0x0095950095950000, 0x5252525252525252, 0xadadadadadadadad, x1, 16, x2)

aes64es_02_inst_83:
    // Test 83:  Test with dataset: sbox64
    // result rd:x22(0xed9191ed9191eded), rs1:x10(0x5353535353535353), rs2:x26(0xacacacacacacacac)
    TEST_RR_OP(aes64es, x22, x10, x26, 0xed9191ed9191eded, 0x5353535353535353, 0xacacacacacacacac, x1, 24, x2)

aes64es_02_inst_84:
    // Test 84:  Test with dataset: sbox64
    // result rd:x23(0x2062622062622020), rs1:x9(0x5454545454545454), rs2:x25(0xabababababababab)
    TEST_RR_OP(aes64es, x23, x9, x25, 0x2062622062622020, 0x5454545454545454, 0xabababababababab, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_18_0)


aes64es_02_inst_85:
    // Test 85:  Test with dataset: sbox64
    // result rd:x24(0xfcacacfcacacfcfc), rs1:x8(0x5555555555555555), rs2:x24(0xaaaaaaaaaaaaaaaa)
    TEST_RR_OP(aes64es, x24, x8, x24, 0xfcacacfcacacfcfc, 0x5555555555555555, 0xaaaaaaaaaaaaaaaa, x1, 0, x2)

aes64es_02_inst_86:
    // Test 86:  Test with dataset: sbox64
    // result rd:x25(0xb1d3d3b1d3d3b1b1), rs1:x7(0x5656565656565656), rs2:x23(0xa9a9a9a9a9a9a9a9)
    TEST_RR_OP(aes64es, x25, x7, x23, 0xb1d3d3b1d3d3b1b1, 0x5656565656565656, 0xa9a9a9a9a9a9a9a9, x1, 8, x2)

aes64es_02_inst_87:
    // Test 87:  Test with dataset: sbox64
    // result rd:x26(0x5bc2c25bc2c25b5b), rs1:x6(0x5757575757575757), rs2:x22(0xa8a8a8a8a8a8a8a8)
    TEST_RR_OP(aes64es, x26, x6, x22, 0x5bc2c25bc2c25b5b, 0x5757575757575757, 0xa8a8a8a8a8a8a8a8, x1, 16, x2)

aes64es_02_inst_88:
    // Test 88:  Test with dataset: sbox64
    // result rd:x27(0x6a5c5c6a5c5c6a6a), rs1:x5(0x5858585858585858), rs2:x21(0xa7a7a7a7a7a7a7a7)
    TEST_RR_OP(aes64es, x27, x5, x21, 0x6a5c5c6a5c5c6a6a, 0x5858585858585858, 0xa7a7a7a7a7a7a7a7, x1, 24, x2)

aes64es_02_inst_89:
    // Test 89:  Test with dataset: sbox64
    // result rd:x28(0xcb2424cb2424cbcb), rs1:x4(0x5959595959595959), rs2:x20(0xa6a6a6a6a6a6a6a6)
    TEST_RR_OP(aes64es, x28, x4, x20, 0xcb2424cb2424cbcb, 0x5959595959595959, 0xa6a6a6a6a6a6a6a6, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x4,signature_19_0)


aes64es_02_inst_90:
    // Test 90:  Test with dataset: sbox64
    // result rd:x29(0xbe0606be0606bebe), rs1:x3(0x5a5a5a5a5a5a5a5a), rs2:x19(0xa5a5a5a5a5a5a5a5)
    TEST_RR_OP(aes64es, x29, x3, x19, 0xbe0606be0606bebe, 0x5a5a5a5a5a5a5a5a, 0xa5a5a5a5a5a5a5a5, x4, 0, x5)

aes64es_02_inst_91:
    // Test 91:  Test with dataset: sbox64
    // result rd:x30(0x3949493949493939), rs1:x2(0x5b5b5b5b5b5b5b5b), rs2:x18(0xa4a4a4a4a4a4a4a4)
    TEST_RR_OP(aes64es, x30, x2, x18, 0x3949493949493939, 0x5b5b5b5b5b5b5b5b, 0xa4a4a4a4a4a4a4a4, x4, 8, x5)

aes64es_02_inst_92:
    // Test 92:  Test with dataset: sbox64
    // result rd:x31(0x4a0a0a4a0a0a4a4a), rs1:x1(0x5c5c5c5c5c5c5c5c), rs2:x17(0xa3a3a3a3a3a3a3a3)
    TEST_RR_OP(aes64es, x31, x1, x17, 0x4a0a0a4a0a0a4a4a, 0x5c5c5c5c5c5c5c5c, 0xa3a3a3a3a3a3a3a3, x4, 16, x5)

aes64es_02_inst_93:
    // Test 93:  Test with dataset: sbox64
    // result rd:x1(0x4c3a3a4c3a3a4c4c), rs1:x31(0x5d5d5d5d5d5d5d5d), rs2:x16(0xa2a2a2a2a2a2a2a2)
    TEST_RR_OP(aes64es, x1, x31, x16, 0x4c3a3a4c3a3a4c4c, 0x5d5d5d5d5d5d5d5d, 0xa2a2a2a2a2a2a2a2, x4, 24, x5)

aes64es_02_inst_94:
    // Test 94:  Test with dataset: sbox64
    // result rd:x2(0x5832325832325858), rs1:x30(0x5e5e5e5e5e5e5e5e), rs2:x15(0xa1a1a1a1a1a1a1a1)
    TEST_RR_OP(aes64es, x2, x30, x15, 0x5832325832325858, 0x5e5e5e5e5e5e5e5e, 0xa1a1a1a1a1a1a1a1, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_20_0)


aes64es_02_inst_95:
    // Test 95:  Test with dataset: sbox64
    // result rd:x3(0xcfe0e0cfe0e0cfcf), rs1:x29(0x5f5f5f5f5f5f5f5f), rs2:x14(0xa0a0a0a0a0a0a0a0)
    TEST_RR_OP(aes64es, x3, x29, x14, 0xcfe0e0cfe0e0cfcf, 0x5f5f5f5f5f5f5f5f, 0xa0a0a0a0a0a0a0a0, x1, 0, x2)

aes64es_02_inst_96:
    // Test 96:  Test with dataset: sbox64
    // result rd:x4(0xd0dbdbd0dbdbd0d0), rs1:x28(0x6060606060606060), rs2:x13(0x9f9f9f9f9f9f9f9f)
    TEST_RR_OP(aes64es, x4, x28, x13, 0xd0dbdbd0dbdbd0d0, 0x6060606060606060, 0x9f9f9f9f9f9f9f9f, x1, 8, x2)

aes64es_02_inst_97:
    // Test 97:  Test with dataset: sbox64
    // result rd:x5(0xef0b0bef0b0befef), rs1:x27(0x6161616161616161), rs2:x12(0x9e9e9e9e9e9e9e9e)
    TEST_RR_OP(aes64es, x5, x27, x12, 0xef0b0bef0b0befef, 0x6161616161616161, 0x9e9e9e9e9e9e9e9e, x1, 16, x2)

aes64es_02_inst_98:
    // Test 98:  Test with dataset: sbox64
    // result rd:x6(0xaa5e5eaa5e5eaaaa), rs1:x26(0x6262626262626262), rs2:x11(0x9d9d9d9d9d9d9d9d)
    TEST_RR_OP(aes64es, x6, x26, x11, 0xaa5e5eaa5e5eaaaa, 0x6262626262626262, 0x9d9d9d9d9d9d9d9d, x1, 24, x2)

aes64es_02_inst_99:
    // Test 99:  Test with dataset: sbox64
    // result rd:x7(0xfbdedefbdedefbfb), rs1:x25(0x6363636363636363), rs2:x10(0x9c9c9c9c9c9c9c9c)
    TEST_RR_OP(aes64es, x7, x25, x10, 0xfbdedefbdedefbfb, 0x6363636363636363, 0x9c9c9c9c9c9c9c9c, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_21_0)


aes64es_02_inst_100:
    // Test 100:  Test with dataset: sbox64
    // result rd:x8(0x4314144314144343), rs1:x24(0x6464646464646464), rs2:x9(0x9b9b9b9b9b9b9b9b)
    TEST_RR_OP(aes64es, x8, x24, x9, 0x4314144314144343, 0x6464646464646464, 0x9b9b9b9b9b9b9b9b, x1, 0, x2)

aes64es_02_inst_101:
    // Test 101:  Test with dataset: sbox64
    // result rd:x9(0x4db8b84db8b84d4d), rs1:x23(0x6565656565656565), rs2:x8(0x9a9a9a9a9a9a9a9a)
    TEST_RR_OP(aes64es, x9, x23, x8, 0x4db8b84db8b84d4d, 0x6565656565656565, 0x9a9a9a9a9a9a9a9a, x1, 8, x2)

aes64es_02_inst_102:
    // Test 102:  Test with dataset: sbox64
    // result rd:x10(0x33eeee33eeee3333), rs1:x22(0x6666666666666666), rs2:x7(0x9999999999999999)
    TEST_RR_OP(aes64es, x10, x22, x7, 0x33eeee33eeee3333, 0x6666666666666666, 0x9999999999999999, x1, 16, x2)

aes64es_02_inst_103:
    // Test 103:  Test with dataset: sbox64
    // result rd:x11(0x8546468546468585), rs1:x21(0x6767676767676767), rs2:x6(0x9898989898989898)
    TEST_RR_OP(aes64es, x11, x21, x6, 0x8546468546468585, 0x6767676767676767, 0x9898989898989898, x1, 24, x2)

aes64es_02_inst_104:
    // Test 104:  Test with dataset: sbox64
    // result rd:x12(0x4588884588884545), rs1:x20(0x6868686868686868), rs2:x5(0x9797979797979797)
    TEST_RR_OP(aes64es, x12, x20, x5, 0x4588884588884545, 0x6868686868686868, 0x9797979797979797, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x5,signature_22_0)


aes64es_02_inst_105:
    // Test 105:  Test with dataset: sbox64
    // result rd:x13(0xf99090f99090f9f9), rs1:x19(0x6969696969696969), rs2:x4(0x9696969696969696)
    TEST_RR_OP(aes64es, x13, x19, x4, 0xf99090f99090f9f9, 0x6969696969696969, 0x9696969696969696, x5, 0, x6)

aes64es_02_inst_106:
    // Test 106:  Test with dataset: sbox64
    // result rd:x14(0x022a2a022a2a0202), rs1:x18(0x6a6a6a6a6a6a6a6a), rs2:x3(0x9595959595959595)
    TEST_RR_OP(aes64es, x14, x18, x3, 0x022a2a022a2a0202, 0x6a6a6a6a6a6a6a6a, 0x9595959595959595, x5, 8, x6)

aes64es_02_inst_107:
    // Test 107:  Test with dataset: sbox64
    // result rd:x15(0x7f22227f22227f7f), rs1:x17(0x6b6b6b6b6b6b6b6b), rs2:x2(0x9494949494949494)
    TEST_RR_OP(aes64es, x15, x17, x2, 0x7f22227f22227f7f, 0x6b6b6b6b6b6b6b6b, 0x9494949494949494, x5, 16, x6)

aes64es_02_inst_108:
    // Test 108:  Test with dataset: sbox64
    // result rd:x16(0x50dcdc50dcdc5050), rs1:x16(0x6c6c6c6c6c6c6c6c), rs2:x1(0x9393939393939393)
    TEST_RR_OP(aes64es, x16, x16, x1, 0x50dcdc50dcdc5050, 0x6c6c6c6c6c6c6c6c, 0x9393939393939393, x5, 24, x6)

aes64es_02_inst_109:
    // Test 109:  Test with dataset: sbox64
    // result rd:x17(0x3c4f4f3c4f4f3c3c), rs1:x15(0x6d6d6d6d6d6d6d6d), rs2:x31(0x9292929292929292)
    TEST_RR_OP(aes64es, x17, x15, x31, 0x3c4f4f3c4f4f3c3c, 0x6d6d6d6d6d6d6d6d, 0x9292929292929292, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_23_0)


aes64es_02_inst_110:
    // Test 110:  Test with dataset: sbox64
    // result rd:x18(0x9f81819f81819f9f), rs1:x14(0x6e6e6e6e6e6e6e6e), rs2:x30(0x9191919191919191)
    TEST_RR_OP(aes64es, x18, x14, x30, 0x9f81819f81819f9f, 0x6e6e6e6e6e6e6e6e, 0x9191919191919191, x1, 0, x2)

aes64es_02_inst_111:
    // Test 111:  Test with dataset: sbox64
    // result rd:x19(0xa86060a86060a8a8), rs1:x13(0x6f6f6f6f6f6f6f6f), rs2:x29(0x9090909090909090)
    TEST_RR_OP(aes64es, x19, x13, x29, 0xa86060a86060a8a8, 0x6f6f6f6f6f6f6f6f, 0x9090909090909090, x1, 8, x2)

aes64es_02_inst_112:
    // Test 112:  Test with dataset: sbox64
    // result rd:x20(0x5173735173735151), rs1:x12(0x7070707070707070), rs2:x28(0x8f8f8f8f8f8f8f8f)
    TEST_RR_OP(aes64es, x20, x12, x28, 0x5173735173735151, 0x7070707070707070, 0x8f8f8f8f8f8f8f8f, x1, 16, x2)

aes64es_02_inst_113:
    // Test 113:  Test with dataset: sbox64
    // result rd:x21(0xa31919a31919a3a3), rs1:x11(0x7171717171717171), rs2:x27(0x8e8e8e8e8e8e8e8e)
    TEST_RR_OP(aes64es, x21, x11, x27, 0xa31919a31919a3a3, 0x7171717171717171, 0x8e8e8e8e8e8e8e8e, x1, 24, x2)

aes64es_02_inst_114:
    // Test 114:  Test with dataset: sbox64
    // result rd:x22(0x405d5d405d5d4040), rs1:x10(0x7272727272727272), rs2:x26(0x8d8d8d8d8d8d8d8d)
    TEST_RR_OP(aes64es, x22, x10, x26, 0x405d5d405d5d4040, 0x7272727272727272, 0x8d8d8d8d8d8d8d8d, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_24_0)


aes64es_02_inst_115:
    // Test 115:  Test with dataset: sbox64
    // result rd:x23(0x8f64648f64648f8f), rs1:x9(0x7373737373737373), rs2:x25(0x8c8c8c8c8c8c8c8c)
    TEST_RR_OP(aes64es, x23, x9, x25, 0x8f64648f64648f8f, 0x7373737373737373, 0x8c8c8c8c8c8c8c8c, x1, 0, x2)

aes64es_02_inst_116:
    // Test 116:  Test with dataset: sbox64
    // result rd:x24(0x923d3d923d3d9292), rs1:x8(0x7474747474747474), rs2:x24(0x8b8b8b8b8b8b8b8b)
    TEST_RR_OP(aes64es, x24, x8, x24, 0x923d3d923d3d9292, 0x7474747474747474, 0x8b8b8b8b8b8b8b8b, x1, 8, x2)

aes64es_02_inst_117:
    // Test 117:  Test with dataset: sbox64
    // result rd:x25(0x9d7e7e9d7e7e9d9d), rs1:x7(0x7575757575757575), rs2:x23(0x8a8a8a8a8a8a8a8a)
    TEST_RR_OP(aes64es, x25, x7, x23, 0x9d7e7e9d7e7e9d9d, 0x7575757575757575, 0x8a8a8a8a8a8a8a8a, x1, 16, x2)

aes64es_02_inst_118:
    // Test 118:  Test with dataset: sbox64
    // result rd:x26(0x38a7a738a7a73838), rs1:x6(0x7676767676767676), rs2:x22(0x8989898989898989)
    TEST_RR_OP(aes64es, x26, x6, x22, 0x38a7a738a7a73838, 0x7676767676767676, 0x8989898989898989, x1, 24, x2)

aes64es_02_inst_119:
    // Test 119:  Test with dataset: sbox64
    // result rd:x27(0xf5c4c4f5c4c4f5f5), rs1:x5(0x7777777777777777), rs2:x21(0x8888888888888888)
    TEST_RR_OP(aes64es, x27, x5, x21, 0xf5c4c4f5c4c4f5f5, 0x7777777777777777, 0x8888888888888888, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x5,signature_25_0)


aes64es_02_inst_120:
    // Test 120:  Test with dataset: sbox64
    // result rd:x28(0xbc1717bc1717bcbc), rs1:x4(0x7878787878787878), rs2:x20(0x8787878787878787)
    TEST_RR_OP(aes64es, x28, x4, x20, 0xbc1717bc1717bcbc, 0x7878787878787878, 0x8787878787878787, x5, 0, x6)

aes64es_02_inst_121:
    // Test 121:  Test with dataset: sbox64
    // result rd:x29(0xb64444b64444b6b6), rs1:x3(0x7979797979797979), rs2:x19(0x8686868686868686)
    TEST_RR_OP(aes64es, x29, x3, x19, 0xb64444b64444b6b6, 0x7979797979797979, 0x8686868686868686, x5, 8, x6)

aes64es_02_inst_122:
    // Test 122:  Test with dataset: sbox64
    // result rd:x30(0xda9797da9797dada), rs1:x2(0x7a7a7a7a7a7a7a7a), rs2:x18(0x8585858585858585)
    TEST_RR_OP(aes64es, x30, x2, x18, 0xda9797da9797dada, 0x7a7a7a7a7a7a7a7a, 0x8585858585858585, x5, 16, x6)

aes64es_02_inst_123:
    // Test 123:  Test with dataset: sbox64
    // result rd:x31(0x215f5f215f5f2121), rs1:x1(0x7b7b7b7b7b7b7b7b), rs2:x17(0x8484848484848484)
    TEST_RR_OP(aes64es, x31, x1, x17, 0x215f5f215f5f2121, 0x7b7b7b7b7b7b7b7b, 0x8484848484848484, x5, 24, x6)

aes64es_02_inst_124:
    // Test 124:  Test with dataset: sbox64
    // result rd:x1(0x10ecec10ecec1010), rs1:x31(0x7c7c7c7c7c7c7c7c), rs2:x16(0x8383838383838383)
    TEST_RR_OP(aes64es, x1, x31, x16, 0x10ecec10ecec1010, 0x7c7c7c7c7c7c7c7c, 0x8383838383838383, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_26_0)


aes64es_02_inst_125:
    // Test 125:  Test with dataset: sbox64
    // result rd:x2(0xff1313ff1313ffff), rs1:x30(0x7d7d7d7d7d7d7d7d), rs2:x15(0x8282828282828282)
    TEST_RR_OP(aes64es, x2, x30, x15, 0xff1313ff1313ffff, 0x7d7d7d7d7d7d7d7d, 0x8282828282828282, x1, 0, x7)

aes64es_02_inst_126:
    // Test 126:  Test with dataset: sbox64
    // result rd:x3(0xf30c0cf30c0cf3f3), rs1:x29(0x7e7e7e7e7e7e7e7e), rs2:x14(0x8181818181818181)
    TEST_RR_OP(aes64es, x3, x29, x14, 0xf30c0cf30c0cf3f3, 0x7e7e7e7e7e7e7e7e, 0x8181818181818181, x1, 8, x7)

aes64es_02_inst_127:
    // Test 127:  Test with dataset: sbox64
    // result rd:x4(0xd2cdcdd2cdcdd2d2), rs1:x28(0x7f7f7f7f7f7f7f7f), rs2:x13(0x8080808080808080)
    TEST_RR_OP(aes64es, x4, x28, x13, 0xd2cdcdd2cdcdd2d2, 0x7f7f7f7f7f7f7f7f, 0x8080808080808080, x1, 16, x7)

aes64es_02_inst_128:
    // Test 128:  Test with dataset: sbox64
    // result rd:x5(0xcdd2d2cdd2d2cdcd), rs1:x27(0x8080808080808080), rs2:x12(0x7f7f7f7f7f7f7f7f)
    TEST_RR_OP(aes64es, x5, x27, x12, 0xcdd2d2cdd2d2cdcd, 0x8080808080808080, 0x7f7f7f7f7f7f7f7f, x1, 24, x7)

aes64es_02_inst_129:
    // Test 129:  Test with dataset: sbox64
    // result rd:x6(0x0cf3f30cf3f30c0c), rs1:x26(0x8181818181818181), rs2:x11(0x7e7e7e7e7e7e7e7e)
    TEST_RR_OP(aes64es, x6, x26, x11, 0x0cf3f30cf3f30c0c, 0x8181818181818181, 0x7e7e7e7e7e7e7e7e, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_27_0)


aes64es_02_inst_130:
    // Test 130:  Test with dataset: sbox64
    // result rd:x7(0x13ffff13ffff1313), rs1:x25(0x8282828282828282), rs2:x10(0x7d7d7d7d7d7d7d7d)
    TEST_RR_OP(aes64es, x7, x25, x10, 0x13ffff13ffff1313, 0x8282828282828282, 0x7d7d7d7d7d7d7d7d, x1, 0, x2)

aes64es_02_inst_131:
    // Test 131:  Test with dataset: sbox64
    // result rd:x8(0xec1010ec1010ecec), rs1:x24(0x8383838383838383), rs2:x9(0x7c7c7c7c7c7c7c7c)
    TEST_RR_OP(aes64es, x8, x24, x9, 0xec1010ec1010ecec, 0x8383838383838383, 0x7c7c7c7c7c7c7c7c, x1, 8, x2)

aes64es_02_inst_132:
    // Test 132:  Test with dataset: sbox64
    // result rd:x9(0x5f21215f21215f5f), rs1:x23(0x8484848484848484), rs2:x8(0x7b7b7b7b7b7b7b7b)
    TEST_RR_OP(aes64es, x9, x23, x8, 0x5f21215f21215f5f, 0x8484848484848484, 0x7b7b7b7b7b7b7b7b, x1, 16, x2)

aes64es_02_inst_133:
    // Test 133:  Test with dataset: sbox64
    // result rd:x10(0x97dada97dada9797), rs1:x22(0x8585858585858585), rs2:x7(0x7a7a7a7a7a7a7a7a)
    TEST_RR_OP(aes64es, x10, x22, x7, 0x97dada97dada9797, 0x8585858585858585, 0x7a7a7a7a7a7a7a7a, x1, 24, x2)

aes64es_02_inst_134:
    // Test 134:  Test with dataset: sbox64
    // result rd:x11(0x44b6b644b6b64444), rs1:x21(0x8686868686868686), rs2:x6(0x7979797979797979)
    TEST_RR_OP(aes64es, x11, x21, x6, 0x44b6b644b6b64444, 0x8686868686868686, 0x7979797979797979, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x6,signature_28_0)


aes64es_02_inst_135:
    // Test 135:  Test with dataset: sbox64
    // result rd:x12(0x17bcbc17bcbc1717), rs1:x20(0x8787878787878787), rs2:x5(0x7878787878787878)
    TEST_RR_OP(aes64es, x12, x20, x5, 0x17bcbc17bcbc1717, 0x8787878787878787, 0x7878787878787878, x6, 0, x7)

aes64es_02_inst_136:
    // Test 136:  Test with dataset: sbox64
    // result rd:x13(0xc4f5f5c4f5f5c4c4), rs1:x19(0x8888888888888888), rs2:x4(0x7777777777777777)
    TEST_RR_OP(aes64es, x13, x19, x4, 0xc4f5f5c4f5f5c4c4, 0x8888888888888888, 0x7777777777777777, x6, 8, x7)

aes64es_02_inst_137:
    // Test 137:  Test with dataset: sbox64
    // result rd:x14(0xa73838a73838a7a7), rs1:x18(0x8989898989898989), rs2:x3(0x7676767676767676)
    TEST_RR_OP(aes64es, x14, x18, x3, 0xa73838a73838a7a7, 0x8989898989898989, 0x7676767676767676, x6, 16, x7)

aes64es_02_inst_138:
    // Test 138:  Test with dataset: sbox64
    // result rd:x15(0x7e9d9d7e9d9d7e7e), rs1:x17(0x8a8a8a8a8a8a8a8a), rs2:x2(0x7575757575757575)
    TEST_RR_OP(aes64es, x15, x17, x2, 0x7e9d9d7e9d9d7e7e, 0x8a8a8a8a8a8a8a8a, 0x7575757575757575, x6, 24, x7)

aes64es_02_inst_139:
    // Test 139:  Test with dataset: sbox64
    // result rd:x16(0x3d92923d92923d3d), rs1:x16(0x8b8b8b8b8b8b8b8b), rs2:x1(0x7474747474747474)
    TEST_RR_OP(aes64es, x16, x16, x1, 0x3d92923d92923d3d, 0x8b8b8b8b8b8b8b8b, 0x7474747474747474, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_29_0)


aes64es_02_inst_140:
    // Test 140:  Test with dataset: sbox64
    // result rd:x17(0x648f8f648f8f6464), rs1:x15(0x8c8c8c8c8c8c8c8c), rs2:x31(0x7373737373737373)
    TEST_RR_OP(aes64es, x17, x15, x31, 0x648f8f648f8f6464, 0x8c8c8c8c8c8c8c8c, 0x7373737373737373, x1, 0, x2)

aes64es_02_inst_141:
    // Test 141:  Test with dataset: sbox64
    // result rd:x18(0x5d40405d40405d5d), rs1:x14(0x8d8d8d8d8d8d8d8d), rs2:x30(0x7272727272727272)
    TEST_RR_OP(aes64es, x18, x14, x30, 0x5d40405d40405d5d, 0x8d8d8d8d8d8d8d8d, 0x7272727272727272, x1, 8, x2)

aes64es_02_inst_142:
    // Test 142:  Test with dataset: sbox64
    // result rd:x19(0x19a3a319a3a31919), rs1:x13(0x8e8e8e8e8e8e8e8e), rs2:x29(0x7171717171717171)
    TEST_RR_OP(aes64es, x19, x13, x29, 0x19a3a319a3a31919, 0x8e8e8e8e8e8e8e8e, 0x7171717171717171, x1, 16, x2)

aes64es_02_inst_143:
    // Test 143:  Test with dataset: sbox64
    // result rd:x20(0x7351517351517373), rs1:x12(0x8f8f8f8f8f8f8f8f), rs2:x28(0x7070707070707070)
    TEST_RR_OP(aes64es, x20, x12, x28, 0x7351517351517373, 0x8f8f8f8f8f8f8f8f, 0x7070707070707070, x1, 24, x2)

aes64es_02_inst_144:
    // Test 144:  Test with dataset: sbox64
    // result rd:x21(0x60a8a860a8a86060), rs1:x11(0x9090909090909090), rs2:x27(0x6f6f6f6f6f6f6f6f)
    TEST_RR_OP(aes64es, x21, x11, x27, 0x60a8a860a8a86060, 0x9090909090909090, 0x6f6f6f6f6f6f6f6f, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_30_0)


aes64es_02_inst_145:
    // Test 145:  Test with dataset: sbox64
    // result rd:x22(0x819f9f819f9f8181), rs1:x10(0x9191919191919191), rs2:x26(0x6e6e6e6e6e6e6e6e)
    TEST_RR_OP(aes64es, x22, x10, x26, 0x819f9f819f9f8181, 0x9191919191919191, 0x6e6e6e6e6e6e6e6e, x1, 0, x2)

aes64es_02_inst_146:
    // Test 146:  Test with dataset: sbox64
    // result rd:x23(0x4f3c3c4f3c3c4f4f), rs1:x9(0x9292929292929292), rs2:x25(0x6d6d6d6d6d6d6d6d)
    TEST_RR_OP(aes64es, x23, x9, x25, 0x4f3c3c4f3c3c4f4f, 0x9292929292929292, 0x6d6d6d6d6d6d6d6d, x1, 8, x2)

aes64es_02_inst_147:
    // Test 147:  Test with dataset: sbox64
    // result rd:x24(0xdc5050dc5050dcdc), rs1:x8(0x9393939393939393), rs2:x24(0x6c6c6c6c6c6c6c6c)
    TEST_RR_OP(aes64es, x24, x8, x24, 0xdc5050dc5050dcdc, 0x9393939393939393, 0x6c6c6c6c6c6c6c6c, x1, 16, x2)

aes64es_02_inst_148:
    // Test 148:  Test with dataset: sbox64
    // result rd:x25(0x227f7f227f7f2222), rs1:x7(0x9494949494949494), rs2:x23(0x6b6b6b6b6b6b6b6b)
    TEST_RR_OP(aes64es, x25, x7, x23, 0x227f7f227f7f2222, 0x9494949494949494, 0x6b6b6b6b6b6b6b6b, x1, 24, x2)

aes64es_02_inst_149:
    // Test 149:  Test with dataset: sbox64
    // result rd:x26(0x2a02022a02022a2a), rs1:x6(0x9595959595959595), rs2:x22(0x6a6a6a6a6a6a6a6a)
    TEST_RR_OP(aes64es, x26, x6, x22, 0x2a02022a02022a2a, 0x9595959595959595, 0x6a6a6a6a6a6a6a6a, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x6,signature_31_0)


aes64es_02_inst_150:
    // Test 150:  Test with dataset: sbox64
    // result rd:x27(0x90f9f990f9f99090), rs1:x5(0x9696969696969696), rs2:x21(0x6969696969696969)
    TEST_RR_OP(aes64es, x27, x5, x21, 0x90f9f990f9f99090, 0x9696969696969696, 0x6969696969696969, x6, 0, x7)

aes64es_02_inst_151:
    // Test 151:  Test with dataset: sbox64
    // result rd:x28(0x8845458845458888), rs1:x4(0x9797979797979797), rs2:x20(0x6868686868686868)
    TEST_RR_OP(aes64es, x28, x4, x20, 0x8845458845458888, 0x9797979797979797, 0x6868686868686868, x6, 8, x7)

aes64es_02_inst_152:
    // Test 152:  Test with dataset: sbox64
    // result rd:x29(0x4685854685854646), rs1:x3(0x9898989898989898), rs2:x19(0x6767676767676767)
    TEST_RR_OP(aes64es, x29, x3, x19, 0x4685854685854646, 0x9898989898989898, 0x6767676767676767, x6, 16, x7)

aes64es_02_inst_153:
    // Test 153:  Test with dataset: sbox64
    // result rd:x30(0xee3333ee3333eeee), rs1:x2(0x9999999999999999), rs2:x18(0x6666666666666666)
    TEST_RR_OP(aes64es, x30, x2, x18, 0xee3333ee3333eeee, 0x9999999999999999, 0x6666666666666666, x6, 24, x7)

aes64es_02_inst_154:
    // Test 154:  Test with dataset: sbox64
    // result rd:x31(0xb84d4db84d4db8b8), rs1:x1(0x9a9a9a9a9a9a9a9a), rs2:x17(0x6565656565656565)
    TEST_RR_OP(aes64es, x31, x1, x17, 0xb84d4db84d4db8b8, 0x9a9a9a9a9a9a9a9a, 0x6565656565656565, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x6,signature_32_0)


aes64es_02_inst_155:
    // Test 155:  Test with dataset: sbox64
    // result rd:x1(0x1443431443431414), rs1:x31(0x9b9b9b9b9b9b9b9b), rs2:x16(0x6464646464646464)
    TEST_RR_OP(aes64es, x1, x31, x16, 0x1443431443431414, 0x9b9b9b9b9b9b9b9b, 0x6464646464646464, x6, 0, x7)

aes64es_02_inst_156:
    // Test 156:  Test with dataset: sbox64
    // result rd:x2(0xdefbfbdefbfbdede), rs1:x30(0x9c9c9c9c9c9c9c9c), rs2:x15(0x6363636363636363)
    TEST_RR_OP(aes64es, x2, x30, x15, 0xdefbfbdefbfbdede, 0x9c9c9c9c9c9c9c9c, 0x6363636363636363, x6, 8, x7)

aes64es_02_inst_157:
    // Test 157:  Test with dataset: sbox64
    // result rd:x3(0x5eaaaa5eaaaa5e5e), rs1:x29(0x9d9d9d9d9d9d9d9d), rs2:x14(0x6262626262626262)
    TEST_RR_OP(aes64es, x3, x29, x14, 0x5eaaaa5eaaaa5e5e, 0x9d9d9d9d9d9d9d9d, 0x6262626262626262, x6, 16, x7)

aes64es_02_inst_158:
    // Test 158:  Test with dataset: sbox64
    // result rd:x4(0x0befef0befef0b0b), rs1:x28(0x9e9e9e9e9e9e9e9e), rs2:x13(0x6161616161616161)
    TEST_RR_OP(aes64es, x4, x28, x13, 0x0befef0befef0b0b, 0x9e9e9e9e9e9e9e9e, 0x6161616161616161, x6, 24, x7)

aes64es_02_inst_159:
    // Test 159:  Test with dataset: sbox64
    // result rd:x5(0xdbd0d0dbd0d0dbdb), rs1:x27(0x9f9f9f9f9f9f9f9f), rs2:x12(0x6060606060606060)
    TEST_RR_OP(aes64es, x5, x27, x12, 0xdbd0d0dbd0d0dbdb, 0x9f9f9f9f9f9f9f9f, 0x6060606060606060, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_33_0)


aes64es_02_inst_160:
    // Test 160:  Test with dataset: sbox64
    // result rd:x6(0xe0cfcfe0cfcfe0e0), rs1:x26(0xa0a0a0a0a0a0a0a0), rs2:x11(0x5f5f5f5f5f5f5f5f)
    TEST_RR_OP(aes64es, x6, x26, x11, 0xe0cfcfe0cfcfe0e0, 0xa0a0a0a0a0a0a0a0, 0x5f5f5f5f5f5f5f5f, x1, 0, x2)

aes64es_02_inst_161:
    // Test 161:  Test with dataset: sbox64
    // result rd:x7(0x3258583258583232), rs1:x25(0xa1a1a1a1a1a1a1a1), rs2:x10(0x5e5e5e5e5e5e5e5e)
    TEST_RR_OP(aes64es, x7, x25, x10, 0x3258583258583232, 0xa1a1a1a1a1a1a1a1, 0x5e5e5e5e5e5e5e5e, x1, 8, x2)

aes64es_02_inst_162:
    // Test 162:  Test with dataset: sbox64
    // result rd:x8(0x3a4c4c3a4c4c3a3a), rs1:x24(0xa2a2a2a2a2a2a2a2), rs2:x9(0x5d5d5d5d5d5d5d5d)
    TEST_RR_OP(aes64es, x8, x24, x9, 0x3a4c4c3a4c4c3a3a, 0xa2a2a2a2a2a2a2a2, 0x5d5d5d5d5d5d5d5d, x1, 16, x2)

aes64es_02_inst_163:
    // Test 163:  Test with dataset: sbox64
    // result rd:x9(0x0a4a4a0a4a4a0a0a), rs1:x23(0xa3a3a3a3a3a3a3a3), rs2:x8(0x5c5c5c5c5c5c5c5c)
    TEST_RR_OP(aes64es, x9, x23, x8, 0x0a4a4a0a4a4a0a0a, 0xa3a3a3a3a3a3a3a3, 0x5c5c5c5c5c5c5c5c, x1, 24, x2)

aes64es_02_inst_164:
    // Test 164:  Test with dataset: sbox64
    // result rd:x10(0x4939394939394949), rs1:x22(0xa4a4a4a4a4a4a4a4), rs2:x7(0x5b5b5b5b5b5b5b5b)
    TEST_RR_OP(aes64es, x10, x22, x7, 0x4939394939394949, 0xa4a4a4a4a4a4a4a4, 0x5b5b5b5b5b5b5b5b, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_34_0)


aes64es_02_inst_165:
    // Test 165:  Test with dataset: sbox64
    // result rd:x11(0x06bebe06bebe0606), rs1:x21(0xa5a5a5a5a5a5a5a5), rs2:x6(0x5a5a5a5a5a5a5a5a)
    TEST_RR_OP(aes64es, x11, x21, x6, 0x06bebe06bebe0606, 0xa5a5a5a5a5a5a5a5, 0x5a5a5a5a5a5a5a5a, x1, 0, x7)

aes64es_02_inst_166:
    // Test 166:  Test with dataset: sbox64
    // result rd:x12(0x24cbcb24cbcb2424), rs1:x20(0xa6a6a6a6a6a6a6a6), rs2:x5(0x5959595959595959)
    TEST_RR_OP(aes64es, x12, x20, x5, 0x24cbcb24cbcb2424, 0xa6a6a6a6a6a6a6a6, 0x5959595959595959, x1, 8, x7)

aes64es_02_inst_167:
    // Test 167:  Test with dataset: sbox64
    // result rd:x13(0x5c6a6a5c6a6a5c5c), rs1:x19(0xa7a7a7a7a7a7a7a7), rs2:x4(0x5858585858585858)
    TEST_RR_OP(aes64es, x13, x19, x4, 0x5c6a6a5c6a6a5c5c, 0xa7a7a7a7a7a7a7a7, 0x5858585858585858, x1, 16, x7)

aes64es_02_inst_168:
    // Test 168:  Test with dataset: sbox64
    // result rd:x14(0xc25b5bc25b5bc2c2), rs1:x18(0xa8a8a8a8a8a8a8a8), rs2:x3(0x5757575757575757)
    TEST_RR_OP(aes64es, x14, x18, x3, 0xc25b5bc25b5bc2c2, 0xa8a8a8a8a8a8a8a8, 0x5757575757575757, x1, 24, x7)

aes64es_02_inst_169:
    // Test 169:  Test with dataset: sbox64
    // result rd:x15(0xd3b1b1d3b1b1d3d3), rs1:x17(0xa9a9a9a9a9a9a9a9), rs2:x2(0x5656565656565656)
    TEST_RR_OP(aes64es, x15, x17, x2, 0xd3b1b1d3b1b1d3d3, 0xa9a9a9a9a9a9a9a9, 0x5656565656565656, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x2,signature_35_0)


aes64es_02_inst_170:
    // Test 170:  Test with dataset: sbox64
    // result rd:x16(0xacfcfcacfcfcacac), rs1:x16(0xaaaaaaaaaaaaaaaa), rs2:x1(0x5555555555555555)
    TEST_RR_OP(aes64es, x16, x16, x1, 0xacfcfcacfcfcacac, 0xaaaaaaaaaaaaaaaa, 0x5555555555555555, x2, 0, x3)

aes64es_02_inst_171:
    // Test 171:  Test with dataset: sbox64
    // result rd:x17(0x6220206220206262), rs1:x15(0xabababababababab), rs2:x31(0x5454545454545454)
    TEST_RR_OP(aes64es, x17, x15, x31, 0x6220206220206262, 0xabababababababab, 0x5454545454545454, x2, 8, x3)

aes64es_02_inst_172:
    // Test 172:  Test with dataset: sbox64
    // result rd:x18(0x91eded91eded9191), rs1:x14(0xacacacacacacacac), rs2:x30(0x5353535353535353)
    TEST_RR_OP(aes64es, x18, x14, x30, 0x91eded91eded9191, 0xacacacacacacacac, 0x5353535353535353, x2, 16, x3)

aes64es_02_inst_173:
    // Test 173:  Test with dataset: sbox64
    // result rd:x19(0x9500009500009595), rs1:x13(0xadadadadadadadad), rs2:x29(0x5252525252525252)
    TEST_RR_OP(aes64es, x19, x13, x29, 0x9500009500009595, 0xadadadadadadadad, 0x5252525252525252, x2, 24, x3)

aes64es_02_inst_174:
    // Test 174:  Test with dataset: sbox64
    // result rd:x20(0xe4d1d1e4d1d1e4e4), rs1:x12(0xaeaeaeaeaeaeaeae), rs2:x28(0x5151515151515151)
    TEST_RR_OP(aes64es, x20, x12, x28, 0xe4d1d1e4d1d1e4e4, 0xaeaeaeaeaeaeaeae, 0x5151515151515151, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_36_0)


aes64es_02_inst_175:
    // Test 175:  Test with dataset: sbox64
    // result rd:x21(0x7953537953537979), rs1:x11(0xafafafafafafafaf), rs2:x27(0x5050505050505050)
    TEST_RR_OP(aes64es, x21, x11, x27, 0x7953537953537979, 0xafafafafafafafaf, 0x5050505050505050, x1, 0, x2)

aes64es_02_inst_176:
    // Test 176:  Test with dataset: sbox64
    // result rd:x22(0xe78484e78484e7e7), rs1:x10(0xb0b0b0b0b0b0b0b0), rs2:x26(0x4f4f4f4f4f4f4f4f)
    TEST_RR_OP(aes64es, x22, x10, x26, 0xe78484e78484e7e7, 0xb0b0b0b0b0b0b0b0, 0x4f4f4f4f4f4f4f4f, x1, 8, x2)

aes64es_02_inst_177:
    // Test 177:  Test with dataset: sbox64
    // result rd:x23(0xc82f2fc82f2fc8c8), rs1:x9(0xb1b1b1b1b1b1b1b1), rs2:x25(0x4e4e4e4e4e4e4e4e)
    TEST_RR_OP(aes64es, x23, x9, x25, 0xc82f2fc82f2fc8c8, 0xb1b1b1b1b1b1b1b1, 0x4e4e4e4e4e4e4e4e, x1, 16, x2)

aes64es_02_inst_178:
    // Test 178:  Test with dataset: sbox64
    // result rd:x24(0x37e3e337e3e33737), rs1:x8(0xb2b2b2b2b2b2b2b2), rs2:x24(0x4d4d4d4d4d4d4d4d)
    TEST_RR_OP(aes64es, x24, x8, x24, 0x37e3e337e3e33737, 0xb2b2b2b2b2b2b2b2, 0x4d4d4d4d4d4d4d4d, x1, 24, x2)

aes64es_02_inst_179:
    // Test 179:  Test with dataset: sbox64
    // result rd:x25(0x6d29296d29296d6d), rs1:x7(0xb3b3b3b3b3b3b3b3), rs2:x23(0x4c4c4c4c4c4c4c4c)
    TEST_RR_OP(aes64es, x25, x7, x23, 0x6d29296d29296d6d, 0xb3b3b3b3b3b3b3b3, 0x4c4c4c4c4c4c4c4c, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_37_0)


aes64es_02_inst_180:
    // Test 180:  Test with dataset: sbox64
    // result rd:x26(0x8db3b38db3b38d8d), rs1:x6(0xb4b4b4b4b4b4b4b4), rs2:x22(0x4b4b4b4b4b4b4b4b)
    TEST_RR_OP(aes64es, x26, x6, x22, 0x8db3b38db3b38d8d, 0xb4b4b4b4b4b4b4b4, 0x4b4b4b4b4b4b4b4b, x1, 0, x7)

aes64es_02_inst_181:
    // Test 181:  Test with dataset: sbox64
    // result rd:x27(0xd5d6d6d5d6d6d5d5), rs1:x5(0xb5b5b5b5b5b5b5b5), rs2:x21(0x4a4a4a4a4a4a4a4a)
    TEST_RR_OP(aes64es, x27, x5, x21, 0xd5d6d6d5d6d6d5d5, 0xb5b5b5b5b5b5b5b5, 0x4a4a4a4a4a4a4a4a, x1, 8, x7)

aes64es_02_inst_182:
    // Test 182:  Test with dataset: sbox64
    // result rd:x28(0x4e3b3b4e3b3b4e4e), rs1:x4(0xb6b6b6b6b6b6b6b6), rs2:x20(0x4949494949494949)
    TEST_RR_OP(aes64es, x28, x4, x20, 0x4e3b3b4e3b3b4e4e, 0xb6b6b6b6b6b6b6b6, 0x4949494949494949, x1, 16, x7)

aes64es_02_inst_183:
    // Test 183:  Test with dataset: sbox64
    // result rd:x29(0xa95252a95252a9a9), rs1:x3(0xb7b7b7b7b7b7b7b7), rs2:x19(0x4848484848484848)
    TEST_RR_OP(aes64es, x29, x3, x19, 0xa95252a95252a9a9, 0xb7b7b7b7b7b7b7b7, 0x4848484848484848, x1, 24, x7)

aes64es_02_inst_184:
    // Test 184:  Test with dataset: sbox64
    // result rd:x30(0x6ca0a06ca0a06c6c), rs1:x2(0xb8b8b8b8b8b8b8b8), rs2:x18(0x4747474747474747)
    TEST_RR_OP(aes64es, x30, x2, x18, 0x6ca0a06ca0a06c6c, 0xb8b8b8b8b8b8b8b8, 0x4747474747474747, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x5,signature_38_0)


aes64es_02_inst_185:
    // Test 185:  Test with dataset: sbox64
    // result rd:x31(0x565a5a565a5a5656), rs1:x1(0xb9b9b9b9b9b9b9b9), rs2:x17(0x4646464646464646)
    TEST_RR_OP(aes64es, x31, x1, x17, 0x565a5a565a5a5656, 0xb9b9b9b9b9b9b9b9, 0x4646464646464646, x5, 0, x6)

aes64es_02_inst_186:
    // Test 186:  Test with dataset: sbox64
    // result rd:x1(0xf46e6ef46e6ef4f4), rs1:x31(0xbabababababababa), rs2:x16(0x4545454545454545)
    TEST_RR_OP(aes64es, x1, x31, x16, 0xf46e6ef46e6ef4f4, 0xbabababababababa, 0x4545454545454545, x5, 8, x6)

aes64es_02_inst_187:
    // Test 187:  Test with dataset: sbox64
    // result rd:x2(0xea1b1bea1b1beaea), rs1:x30(0xbbbbbbbbbbbbbbbb), rs2:x15(0x4444444444444444)
    TEST_RR_OP(aes64es, x2, x30, x15, 0xea1b1bea1b1beaea, 0xbbbbbbbbbbbbbbbb, 0x4444444444444444, x5, 16, x6)

aes64es_02_inst_188:
    // Test 188:  Test with dataset: sbox64
    // result rd:x3(0x651a1a651a1a6565), rs1:x29(0xbcbcbcbcbcbcbcbc), rs2:x14(0x4343434343434343)
    TEST_RR_OP(aes64es, x3, x29, x14, 0x651a1a651a1a6565, 0xbcbcbcbcbcbcbcbc, 0x4343434343434343, x5, 24, x6)

aes64es_02_inst_189:
    // Test 189:  Test with dataset: sbox64
    // result rd:x4(0x7a2c2c7a2c2c7a7a), rs1:x28(0xbdbdbdbdbdbdbdbd), rs2:x13(0x4242424242424242)
    TEST_RR_OP(aes64es, x4, x28, x13, 0x7a2c2c7a2c2c7a7a, 0xbdbdbdbdbdbdbdbd, 0x4242424242424242, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_39_0)


aes64es_02_inst_190:
    // Test 190:  Test with dataset: sbox64
    // result rd:x5(0xae8383ae8383aeae), rs1:x27(0xbebebebebebebebe), rs2:x12(0x4141414141414141)
    TEST_RR_OP(aes64es, x5, x27, x12, 0xae8383ae8383aeae, 0xbebebebebebebebe, 0x4141414141414141, x1, 0, x2)

aes64es_02_inst_191:
    // Test 191:  Test with dataset: sbox64
    // result rd:x6(0x0809090809090808), rs1:x26(0xbfbfbfbfbfbfbfbf), rs2:x11(0x4040404040404040)
    TEST_RR_OP(aes64es, x6, x26, x11, 0x0809090809090808, 0xbfbfbfbfbfbfbfbf, 0x4040404040404040, x1, 8, x2)

aes64es_02_inst_192:
    // Test 192:  Test with dataset: sbox64
    // result rd:x7(0xba7575ba7575baba), rs1:x25(0xc0c0c0c0c0c0c0c0), rs2:x10(0x3f3f3f3f3f3f3f3f)
    TEST_RR_OP(aes64es, x7, x25, x10, 0xba7575ba7575baba, 0xc0c0c0c0c0c0c0c0, 0x3f3f3f3f3f3f3f3f, x1, 16, x2)

aes64es_02_inst_193:
    // Test 193:  Test with dataset: sbox64
    // result rd:x8(0x78b2b278b2b27878), rs1:x24(0xc1c1c1c1c1c1c1c1), rs2:x9(0x3e3e3e3e3e3e3e3e)
    TEST_RR_OP(aes64es, x8, x24, x9, 0x78b2b278b2b27878, 0xc1c1c1c1c1c1c1c1, 0x3e3e3e3e3e3e3e3e, x1, 24, x2)

aes64es_02_inst_194:
    // Test 194:  Test with dataset: sbox64
    // result rd:x9(0x2527272527272525), rs1:x23(0xc2c2c2c2c2c2c2c2), rs2:x8(0x3d3d3d3d3d3d3d3d)
    TEST_RR_OP(aes64es, x9, x23, x8, 0x2527272527272525, 0xc2c2c2c2c2c2c2c2, 0x3d3d3d3d3d3d3d3d, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_40_0)


aes64es_02_inst_195:
    // Test 195:  Test with dataset: sbox64
    // result rd:x10(0x2eebeb2eebeb2e2e), rs1:x22(0xc3c3c3c3c3c3c3c3), rs2:x7(0x3c3c3c3c3c3c3c3c)
    TEST_RR_OP(aes64es, x10, x22, x7, 0x2eebeb2eebeb2e2e, 0xc3c3c3c3c3c3c3c3, 0x3c3c3c3c3c3c3c3c, x1, 0, x2)

aes64es_02_inst_196:
    // Test 196:  Test with dataset: sbox64
    // result rd:x11(0x1ce2e21ce2e21c1c), rs1:x21(0xc4c4c4c4c4c4c4c4), rs2:x6(0x3b3b3b3b3b3b3b3b)
    TEST_RR_OP(aes64es, x11, x21, x6, 0x1ce2e21ce2e21c1c, 0xc4c4c4c4c4c4c4c4, 0x3b3b3b3b3b3b3b3b, x1, 8, x2)

aes64es_02_inst_197:
    // Test 197:  Test with dataset: sbox64
    // result rd:x12(0xa68080a68080a6a6), rs1:x20(0xc5c5c5c5c5c5c5c5), rs2:x5(0x3a3a3a3a3a3a3a3a)
    TEST_RR_OP(aes64es, x12, x20, x5, 0xa68080a68080a6a6, 0xc5c5c5c5c5c5c5c5, 0x3a3a3a3a3a3a3a3a, x1, 16, x2)

aes64es_02_inst_198:
    // Test 198:  Test with dataset: sbox64
    // result rd:x13(0xb41212b41212b4b4), rs1:x19(0xc6c6c6c6c6c6c6c6), rs2:x4(0x3939393939393939)
    TEST_RR_OP(aes64es, x13, x19, x4, 0xb41212b41212b4b4, 0xc6c6c6c6c6c6c6c6, 0x3939393939393939, x1, 24, x2)

aes64es_02_inst_199:
    // Test 199:  Test with dataset: sbox64
    // result rd:x14(0xc60707c60707c6c6), rs1:x18(0xc7c7c7c7c7c7c7c7), rs2:x3(0x3838383838383838)
    TEST_RR_OP(aes64es, x14, x18, x3, 0xc60707c60707c6c6, 0xc7c7c7c7c7c7c7c7, 0x3838383838383838, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x3,signature_41_0)


aes64es_02_inst_200:
    // Test 200:  Test with dataset: sbox64
    // result rd:x15(0xe89a9ae89a9ae8e8), rs1:x17(0xc8c8c8c8c8c8c8c8), rs2:x2(0x3737373737373737)
    TEST_RR_OP(aes64es, x15, x17, x2, 0xe89a9ae89a9ae8e8, 0xc8c8c8c8c8c8c8c8, 0x3737373737373737, x3, 0, x4)

aes64es_02_inst_201:
    // Test 201:  Test with dataset: sbox64
    // result rd:x16(0xdd0505dd0505dddd), rs1:x16(0xc9c9c9c9c9c9c9c9), rs2:x1(0x3636363636363636)
    TEST_RR_OP(aes64es, x16, x16, x1, 0xdd0505dd0505dddd, 0xc9c9c9c9c9c9c9c9, 0x3636363636363636, x3, 8, x4)

aes64es_02_inst_202:
    // Test 202:  Test with dataset: sbox64
    // result rd:x17(0x7496967496967474), rs1:x15(0xcacacacacacacaca), rs2:x31(0x3535353535353535)
    TEST_RR_OP(aes64es, x17, x15, x31, 0x7496967496967474, 0xcacacacacacacaca, 0x3535353535353535, x3, 16, x4)

aes64es_02_inst_203:
    // Test 203:  Test with dataset: sbox64
    // result rd:x18(0x1f18181f18181f1f), rs1:x14(0xcbcbcbcbcbcbcbcb), rs2:x30(0x3434343434343434)
    TEST_RR_OP(aes64es, x18, x14, x30, 0x1f18181f18181f1f, 0xcbcbcbcbcbcbcbcb, 0x3434343434343434, x3, 24, x4)

aes64es_02_inst_204:
    // Test 204:  Test with dataset: sbox64
    // result rd:x19(0x4bc3c34bc3c34b4b), rs1:x13(0xcccccccccccccccc), rs2:x29(0x3333333333333333)
    TEST_RR_OP(aes64es, x19, x13, x29, 0x4bc3c34bc3c34b4b, 0xcccccccccccccccc, 0x3333333333333333, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_42_0)


aes64es_02_inst_205:
    // Test 205:  Test with dataset: sbox64
    // result rd:x20(0xbd2323bd2323bdbd), rs1:x12(0xcdcdcdcdcdcdcdcd), rs2:x28(0x3232323232323232)
    TEST_RR_OP(aes64es, x20, x12, x28, 0xbd2323bd2323bdbd, 0xcdcdcdcdcdcdcdcd, 0x3232323232323232, x1, 0, x2)

aes64es_02_inst_206:
    // Test 206:  Test with dataset: sbox64
    // result rd:x21(0x8bc7c78bc7c78b8b), rs1:x11(0xcececececececece), rs2:x27(0x3131313131313131)
    TEST_RR_OP(aes64es, x21, x11, x27, 0x8bc7c78bc7c78b8b, 0xcececececececece, 0x3131313131313131, x1, 8, x2)

aes64es_02_inst_207:
    // Test 207:  Test with dataset: sbox64
    // result rd:x22(0x8a04048a04048a8a), rs1:x10(0xcfcfcfcfcfcfcfcf), rs2:x26(0x3030303030303030)
    TEST_RR_OP(aes64es, x22, x10, x26, 0x8a04048a04048a8a, 0xcfcfcfcfcfcfcfcf, 0x3030303030303030, x1, 16, x2)

aes64es_02_inst_208:
    // Test 208:  Test with dataset: sbox64
    // result rd:x23(0x7015157015157070), rs1:x9(0xd0d0d0d0d0d0d0d0), rs2:x25(0x2f2f2f2f2f2f2f2f)
    TEST_RR_OP(aes64es, x23, x9, x25, 0x7015157015157070, 0xd0d0d0d0d0d0d0d0, 0x2f2f2f2f2f2f2f2f, x1, 24, x2)

aes64es_02_inst_209:
    // Test 209:  Test with dataset: sbox64
    // result rd:x24(0x3e31313e31313e3e), rs1:x8(0xd1d1d1d1d1d1d1d1), rs2:x24(0x2e2e2e2e2e2e2e2e)
    TEST_RR_OP(aes64es, x24, x8, x24, 0x3e31313e31313e3e, 0xd1d1d1d1d1d1d1d1, 0x2e2e2e2e2e2e2e2e, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_43_0)


aes64es_02_inst_210:
    // Test 210:  Test with dataset: sbox64
    // result rd:x25(0xb5d8d8b5d8d8b5b5), rs1:x7(0xd2d2d2d2d2d2d2d2), rs2:x23(0x2d2d2d2d2d2d2d2d)
    TEST_RR_OP(aes64es, x25, x7, x23, 0xb5d8d8b5d8d8b5b5, 0xd2d2d2d2d2d2d2d2, 0x2d2d2d2d2d2d2d2d, x1, 0, x2)

aes64es_02_inst_211:
    // Test 211:  Test with dataset: sbox64
    // result rd:x26(0x6671716671716666), rs1:x6(0xd3d3d3d3d3d3d3d3), rs2:x22(0x2c2c2c2c2c2c2c2c)
    TEST_RR_OP(aes64es, x26, x6, x22, 0x6671716671716666, 0xd3d3d3d3d3d3d3d3, 0x2c2c2c2c2c2c2c2c, x1, 8, x2)

aes64es_02_inst_212:
    // Test 212:  Test with dataset: sbox64
    // result rd:x27(0x48f1f148f1f14848), rs1:x5(0xd4d4d4d4d4d4d4d4), rs2:x21(0x2b2b2b2b2b2b2b2b)
    TEST_RR_OP(aes64es, x27, x5, x21, 0x48f1f148f1f14848, 0xd4d4d4d4d4d4d4d4, 0x2b2b2b2b2b2b2b2b, x1, 16, x2)

aes64es_02_inst_213:
    // Test 213:  Test with dataset: sbox64
    // result rd:x28(0x03e5e503e5e50303), rs1:x4(0xd5d5d5d5d5d5d5d5), rs2:x20(0x2a2a2a2a2a2a2a2a)
    TEST_RR_OP(aes64es, x28, x4, x20, 0x03e5e503e5e50303, 0xd5d5d5d5d5d5d5d5, 0x2a2a2a2a2a2a2a2a, x1, 24, x2)

aes64es_02_inst_214:
    // Test 214:  Test with dataset: sbox64
    // result rd:x29(0xf6a5a5f6a5a5f6f6), rs1:x3(0xd6d6d6d6d6d6d6d6), rs2:x19(0x2929292929292929)
    TEST_RR_OP(aes64es, x29, x3, x19, 0xf6a5a5f6a5a5f6f6, 0xd6d6d6d6d6d6d6d6, 0x2929292929292929, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x4,signature_44_0)


aes64es_02_inst_215:
    // Test 215:  Test with dataset: sbox64
    // result rd:x30(0x0e34340e34340e0e), rs1:x2(0xd7d7d7d7d7d7d7d7), rs2:x18(0x2828282828282828)
    TEST_RR_OP(aes64es, x30, x2, x18, 0x0e34340e34340e0e, 0xd7d7d7d7d7d7d7d7, 0x2828282828282828, x4, 0, x5)

aes64es_02_inst_216:
    // Test 216:  Test with dataset: sbox64
    // result rd:x31(0x61cccc61cccc6161), rs1:x1(0xd8d8d8d8d8d8d8d8), rs2:x17(0x2727272727272727)
    TEST_RR_OP(aes64es, x31, x1, x17, 0x61cccc61cccc6161, 0xd8d8d8d8d8d8d8d8, 0x2727272727272727, x4, 8, x5)

aes64es_02_inst_217:
    // Test 217:  Test with dataset: sbox64
    // result rd:x1(0x35f7f735f7f73535), rs1:x31(0xd9d9d9d9d9d9d9d9), rs2:x16(0x2626262626262626)
    TEST_RR_OP(aes64es, x1, x31, x16, 0x35f7f735f7f73535, 0xd9d9d9d9d9d9d9d9, 0x2626262626262626, x4, 16, x5)

aes64es_02_inst_218:
    // Test 218:  Test with dataset: sbox64
    // result rd:x2(0x573f3f573f3f5757), rs1:x30(0xdadadadadadadada), rs2:x15(0x2525252525252525)
    TEST_RR_OP(aes64es, x2, x30, x15, 0x573f3f573f3f5757, 0xdadadadadadadada, 0x2525252525252525, x4, 24, x5)

aes64es_02_inst_219:
    // Test 219:  Test with dataset: sbox64
    // result rd:x3(0xb93636b93636b9b9), rs1:x29(0xdbdbdbdbdbdbdbdb), rs2:x14(0x2424242424242424)
    TEST_RR_OP(aes64es, x3, x29, x14, 0xb93636b93636b9b9, 0xdbdbdbdbdbdbdbdb, 0x2424242424242424, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_45_0)


aes64es_02_inst_220:
    // Test 220:  Test with dataset: sbox64
    // result rd:x4(0x8626268626268686), rs1:x28(0xdcdcdcdcdcdcdcdc), rs2:x13(0x2323232323232323)
    TEST_RR_OP(aes64es, x4, x28, x13, 0x8626268626268686, 0xdcdcdcdcdcdcdcdc, 0x2323232323232323, x1, 0, x2)

aes64es_02_inst_221:
    // Test 221:  Test with dataset: sbox64
    // result rd:x5(0xc19393c19393c1c1), rs1:x27(0xdddddddddddddddd), rs2:x12(0x2222222222222222)
    TEST_RR_OP(aes64es, x5, x27, x12, 0xc19393c19393c1c1, 0xdddddddddddddddd, 0x2222222222222222, x1, 8, x2)

aes64es_02_inst_222:
    // Test 222:  Test with dataset: sbox64
    // result rd:x6(0x1dfdfd1dfdfd1d1d), rs1:x26(0xdededededededede), rs2:x11(0x2121212121212121)
    TEST_RR_OP(aes64es, x6, x26, x11, 0x1dfdfd1dfdfd1d1d, 0xdededededededede, 0x2121212121212121, x1, 16, x2)

aes64es_02_inst_223:
    // Test 223:  Test with dataset: sbox64
    // result rd:x7(0x9eb7b79eb7b79e9e), rs1:x25(0xdfdfdfdfdfdfdfdf), rs2:x10(0x2020202020202020)
    TEST_RR_OP(aes64es, x7, x25, x10, 0x9eb7b79eb7b79e9e, 0xdfdfdfdfdfdfdfdf, 0x2020202020202020, x1, 24, x2)

aes64es_02_inst_224:
    // Test 224:  Test with dataset: sbox64
    // result rd:x8(0xe1c0c0e1c0c0e1e1), rs1:x24(0xe0e0e0e0e0e0e0e0), rs2:x9(0x1f1f1f1f1f1f1f1f)
    TEST_RR_OP(aes64es, x8, x24, x9, 0xe1c0c0e1c0c0e1e1, 0xe0e0e0e0e0e0e0e0, 0x1f1f1f1f1f1f1f1f, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_46_0)


aes64es_02_inst_225:
    // Test 225:  Test with dataset: sbox64
    // result rd:x9(0xf87272f87272f8f8), rs1:x23(0xe1e1e1e1e1e1e1e1), rs2:x8(0x1e1e1e1e1e1e1e1e)
    TEST_RR_OP(aes64es, x9, x23, x8, 0xf87272f87272f8f8, 0xe1e1e1e1e1e1e1e1, 0x1e1e1e1e1e1e1e1e, x1, 0, x2)

aes64es_02_inst_226:
    // Test 226:  Test with dataset: sbox64
    // result rd:x10(0x98a4a498a4a49898), rs1:x22(0xe2e2e2e2e2e2e2e2), rs2:x7(0x1d1d1d1d1d1d1d1d)
    TEST_RR_OP(aes64es, x10, x22, x7, 0x98a4a498a4a49898, 0xe2e2e2e2e2e2e2e2, 0x1d1d1d1d1d1d1d1d, x1, 8, x2)

aes64es_02_inst_227:
    // Test 227:  Test with dataset: sbox64
    // result rd:x11(0x119c9c119c9c1111), rs1:x21(0xe3e3e3e3e3e3e3e3), rs2:x6(0x1c1c1c1c1c1c1c1c)
    TEST_RR_OP(aes64es, x11, x21, x6, 0x119c9c119c9c1111, 0xe3e3e3e3e3e3e3e3, 0x1c1c1c1c1c1c1c1c, x1, 16, x2)

aes64es_02_inst_228:
    // Test 228:  Test with dataset: sbox64
    // result rd:x12(0x69afaf69afaf6969), rs1:x20(0xe4e4e4e4e4e4e4e4), rs2:x5(0x1b1b1b1b1b1b1b1b)
    TEST_RR_OP(aes64es, x12, x20, x5, 0x69afaf69afaf6969, 0xe4e4e4e4e4e4e4e4, 0x1b1b1b1b1b1b1b1b, x1, 24, x2)

aes64es_02_inst_229:
    // Test 229:  Test with dataset: sbox64
    // result rd:x13(0xd9a2a2d9a2a2d9d9), rs1:x19(0xe5e5e5e5e5e5e5e5), rs2:x4(0x1a1a1a1a1a1a1a1a)
    TEST_RR_OP(aes64es, x13, x19, x4, 0xd9a2a2d9a2a2d9d9, 0xe5e5e5e5e5e5e5e5, 0x1a1a1a1a1a1a1a1a, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x4,signature_47_0)


aes64es_02_inst_230:
    // Test 230:  Test with dataset: sbox64
    // result rd:x14(0x8ed4d48ed4d48e8e), rs1:x18(0xe6e6e6e6e6e6e6e6), rs2:x3(0x1919191919191919)
    TEST_RR_OP(aes64es, x14, x18, x3, 0x8ed4d48ed4d48e8e, 0xe6e6e6e6e6e6e6e6, 0x1919191919191919, x4, 0, x5)

aes64es_02_inst_231:
    // Test 231:  Test with dataset: sbox64
    // result rd:x15(0x94adad94adad9494), rs1:x17(0xe7e7e7e7e7e7e7e7), rs2:x2(0x1818181818181818)
    TEST_RR_OP(aes64es, x15, x17, x2, 0x94adad94adad9494, 0xe7e7e7e7e7e7e7e7, 0x1818181818181818, x4, 8, x5)

aes64es_02_inst_232:
    // Test 232:  Test with dataset: sbox64
    // result rd:x16(0x9bf0f09bf0f09b9b), rs1:x16(0xe8e8e8e8e8e8e8e8), rs2:x1(0x1717171717171717)
    TEST_RR_OP(aes64es, x16, x16, x1, 0x9bf0f09bf0f09b9b, 0xe8e8e8e8e8e8e8e8, 0x1717171717171717, x4, 16, x5)

aes64es_02_inst_233:
    // Test 233:  Test with dataset: sbox64
    // result rd:x17(0x1e47471e47471e1e), rs1:x15(0xe9e9e9e9e9e9e9e9), rs2:x31(0x1616161616161616)
    TEST_RR_OP(aes64es, x17, x15, x31, 0x1e47471e47471e1e, 0xe9e9e9e9e9e9e9e9, 0x1616161616161616, x4, 24, x5)

aes64es_02_inst_234:
    // Test 234:  Test with dataset: sbox64
    // result rd:x18(0x8759598759598787), rs1:x14(0xeaeaeaeaeaeaeaea), rs2:x30(0x1515151515151515)
    TEST_RR_OP(aes64es, x18, x14, x30, 0x8759598759598787, 0xeaeaeaeaeaeaeaea, 0x1515151515151515, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_48_0)


aes64es_02_inst_235:
    // Test 235:  Test with dataset: sbox64
    // result rd:x19(0xe9fafae9fafae9e9), rs1:x13(0xebebebebebebebeb), rs2:x29(0x1414141414141414)
    TEST_RR_OP(aes64es, x19, x13, x29, 0xe9fafae9fafae9e9, 0xebebebebebebebeb, 0x1414141414141414, x1, 0, x2)

aes64es_02_inst_236:
    // Test 236:  Test with dataset: sbox64
    // result rd:x20(0xce7d7dce7d7dcece), rs1:x12(0xecececececececec), rs2:x28(0x1313131313131313)
    TEST_RR_OP(aes64es, x20, x12, x28, 0xce7d7dce7d7dcece, 0xecececececececec, 0x1313131313131313, x1, 8, x2)

aes64es_02_inst_237:
    // Test 237:  Test with dataset: sbox64
    // result rd:x21(0x55c9c955c9c95555), rs1:x11(0xedededededededed), rs2:x27(0x1212121212121212)
    TEST_RR_OP(aes64es, x21, x11, x27, 0x55c9c955c9c95555, 0xedededededededed, 0x1212121212121212, x1, 16, x2)

aes64es_02_inst_238:
    // Test 238:  Test with dataset: sbox64
    // result rd:x22(0x2882822882822828), rs1:x10(0xeeeeeeeeeeeeeeee), rs2:x26(0x1111111111111111)
    TEST_RR_OP(aes64es, x22, x10, x26, 0x2882822882822828, 0xeeeeeeeeeeeeeeee, 0x1111111111111111, x1, 24, x2)

aes64es_02_inst_239:
    // Test 239:  Test with dataset: sbox64
    // result rd:x23(0xdfcacadfcacadfdf), rs1:x9(0xefefefefefefefef), rs2:x25(0x1010101010101010)
    TEST_RR_OP(aes64es, x23, x9, x25, 0xdfcacadfcacadfdf, 0xefefefefefefefef, 0x1010101010101010, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_49_0)


aes64es_02_inst_240:
    // Test 240:  Test with dataset: sbox64
    // result rd:x24(0x8c76768c76768c8c), rs1:x8(0xf0f0f0f0f0f0f0f0), rs2:x24(0x0f0f0f0f0f0f0f0f)
    TEST_RR_OP(aes64es, x24, x8, x24, 0x8c76768c76768c8c, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f, x1, 0, x2)

aes64es_02_inst_241:
    // Test 241:  Test with dataset: sbox64
    // result rd:x25(0xa1ababa1ababa1a1), rs1:x7(0xf1f1f1f1f1f1f1f1), rs2:x23(0x0e0e0e0e0e0e0e0e)
    TEST_RR_OP(aes64es, x25, x7, x23, 0xa1ababa1ababa1a1, 0xf1f1f1f1f1f1f1f1, 0xe0e0e0e0e0e0e0e, x1, 8, x2)

aes64es_02_inst_242:
    // Test 242:  Test with dataset: sbox64
    // result rd:x26(0x89d7d789d7d78989), rs1:x6(0xf2f2f2f2f2f2f2f2), rs2:x22(0x0d0d0d0d0d0d0d0d)
    TEST_RR_OP(aes64es, x26, x6, x22, 0x89d7d789d7d78989, 0xf2f2f2f2f2f2f2f2, 0xd0d0d0d0d0d0d0d, x1, 16, x2)

aes64es_02_inst_243:
    // Test 243:  Test with dataset: sbox64
    // result rd:x27(0x0dfefe0dfefe0d0d), rs1:x5(0xf3f3f3f3f3f3f3f3), rs2:x21(0x0c0c0c0c0c0c0c0c)
    TEST_RR_OP(aes64es, x27, x5, x21, 0x0dfefe0dfefe0d0d, 0xf3f3f3f3f3f3f3f3, 0xc0c0c0c0c0c0c0c, x1, 24, x2)

aes64es_02_inst_244:
    // Test 244:  Test with dataset: sbox64
    // result rd:x28(0xbf2b2bbf2b2bbfbf), rs1:x4(0xf4f4f4f4f4f4f4f4), rs2:x20(0x0b0b0b0b0b0b0b0b)
    TEST_RR_OP(aes64es, x28, x4, x20, 0xbf2b2bbf2b2bbfbf, 0xf4f4f4f4f4f4f4f4, 0xb0b0b0b0b0b0b0b, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x4,signature_50_0)


aes64es_02_inst_245:
    // Test 245:  Test with dataset: sbox64
    // result rd:x29(0xe66767e66767e6e6), rs1:x3(0xf5f5f5f5f5f5f5f5), rs2:x19(0x0a0a0a0a0a0a0a0a)
    TEST_RR_OP(aes64es, x29, x3, x19, 0xe66767e66767e6e6, 0xf5f5f5f5f5f5f5f5, 0xa0a0a0a0a0a0a0a, x4, 0, x5)

aes64es_02_inst_246:
    // Test 246:  Test with dataset: sbox64
    // result rd:x30(0x4201014201014242), rs1:x2(0xf6f6f6f6f6f6f6f6), rs2:x18(0x0909090909090909)
    TEST_RR_OP(aes64es, x30, x2, x18, 0x4201014201014242, 0xf6f6f6f6f6f6f6f6, 0x909090909090909, x4, 8, x5)

aes64es_02_inst_247:
    // Test 247:  Test with dataset: sbox64
    // result rd:x31(0x6830306830306868), rs1:x1(0xf7f7f7f7f7f7f7f7), rs2:x17(0x0808080808080808)
    TEST_RR_OP(aes64es, x31, x1, x17, 0x6830306830306868, 0xf7f7f7f7f7f7f7f7, 0x808080808080808, x4, 16, x5)

aes64es_02_inst_248:
    // Test 248:  Test with dataset: sbox64
    // result rd:x1(0x41c5c541c5c54141), rs1:x31(0xf8f8f8f8f8f8f8f8), rs2:x16(0x0707070707070707)
    TEST_RR_OP(aes64es, x1, x31, x16, 0x41c5c541c5c54141, 0xf8f8f8f8f8f8f8f8, 0x707070707070707, x4, 24, x5)

aes64es_02_inst_249:
    // Test 249:  Test with dataset: sbox64
    // result rd:x2(0x996f6f996f6f9999), rs1:x30(0xf9f9f9f9f9f9f9f9), rs2:x15(0x0606060606060606)
    TEST_RR_OP(aes64es, x2, x30, x15, 0x996f6f996f6f9999, 0xf9f9f9f9f9f9f9f9, 0x606060606060606, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_51_0)


aes64es_02_inst_250:
    // Test 250:  Test with dataset: sbox64
    // result rd:x3(0x2d6b6b2d6b6b2d2d), rs1:x29(0xfafafafafafafafa), rs2:x14(0x0505050505050505)
    TEST_RR_OP(aes64es, x3, x29, x14, 0x2d6b6b2d6b6b2d2d, 0xfafafafafafafafa, 0x505050505050505, x1, 0, x2)

aes64es_02_inst_251:
    // Test 251:  Test with dataset: sbox64
    // result rd:x4(0x0ff2f20ff2f20f0f), rs1:x28(0xfbfbfbfbfbfbfbfb), rs2:x13(0x0404040404040404)
    TEST_RR_OP(aes64es, x4, x28, x13, 0x0ff2f20ff2f20f0f, 0xfbfbfbfbfbfbfbfb, 0x404040404040404, x1, 8, x2)

aes64es_02_inst_252:
    // Test 252:  Test with dataset: sbox64
    // result rd:x5(0xb07b7bb07b7bb0b0), rs1:x27(0xfcfcfcfcfcfcfcfc), rs2:x12(0x0303030303030303)
    TEST_RR_OP(aes64es, x5, x27, x12, 0xb07b7bb07b7bb0b0, 0xfcfcfcfcfcfcfcfc, 0x303030303030303, x1, 16, x2)

aes64es_02_inst_253:
    // Test 253:  Test with dataset: sbox64
    // result rd:x6(0x5477775477775454), rs1:x26(0xfdfdfdfdfdfdfdfd), rs2:x11(0x0202020202020202)
    TEST_RR_OP(aes64es, x6, x26, x11, 0x5477775477775454, 0xfdfdfdfdfdfdfdfd, 0x202020202020202, x1, 24, x2)

aes64es_02_inst_254:
    // Test 254:  Test with dataset: sbox64
    // result rd:x7(0xbb7c7cbb7c7cbbbb), rs1:x25(0xfefefefefefefefe), rs2:x10(0x0101010101010101)
    TEST_RR_OP(aes64es, x7, x25, x10, 0xbb7c7cbb7c7cbbbb, 0xfefefefefefefefe, 0x101010101010101, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_52_0)


aes64es_02_inst_255:
    // Test 255:  Test with dataset: sbox64
    // result rd:x8(0x1663631663631616), rs1:x24(0xffffffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64es, x8, x24, x9, 0x1663631663631616, 0xffffffffffffffff, 0x0, x1, 0, x2)
	
#endif


RVTEST_CODE_END aes64es_02_code_end
RVTEST_CODE_BEGIN sha256sig0_01_init sha256sig0_01_code_begin






#ifdef TEST_CASE_1


    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x6,signature_1_0)

 
sha256sig0_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x00000000aa83f5eb), rs1:x31(0x10fd3dedadea5195)
    li  x31, 0x10fd3dedadea5195
    sha256sig0 x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x00000000aa83f5eb)
 
sha256sig0_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x00000000764a7c1a), rs1:x30(0xbd295ce2d2ffbec1)
    li  x30, 0xbd295ce2d2ffbec1
    sha256sig0 x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x00000000764a7c1a)
 
sha256sig0_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0x0000000008631c7e), rs1:x29(0xc9649f05a8e1a8bb)
    li  x29, 0xc9649f05a8e1a8bb
    sha256sig0 x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x0000000008631c7e)
 
sha256sig0_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x00000000f87a72f4), rs1:x28(0x3541291848c99fcb)
    li  x28, 0x3541291848c99fcb
    sha256sig0 x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x00000000f87a72f4)
 
sha256sig0_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x00000000c2dc416a), rs1:x27(0x10a24740461d524f)
    li  x27, 0x10a24740461d524f
    sha256sig0 x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x00000000c2dc416a)


    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_2_0)

 
sha256sig0_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x00000000d0df8296), rs1:x26(0x546b0e54528a10af)
    li  x26, 0x546b0e54528a10af
    sha256sig0 x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x00000000d0df8296)
 
sha256sig0_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x000000006500b0e9), rs1:x25(0x73a92fd4e19bfbc3)
    li  x25, 0x73a92fd4e19bfbc3
    sha256sig0 x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x000000006500b0e9)
 
sha256sig0_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x00000000325fb7a3), rs1:x24(0x82f6747f707af2c0)
    li  x24, 0x82f6747f707af2c0
    sha256sig0 x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000325fb7a3)
 
sha256sig0_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0x00000000e7d1b134), rs1:x23(0xf5adb41aa47d105b)
    li  x23, 0xf5adb41aa47d105b
    sha256sig0 x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000e7d1b134)
 
sha256sig0_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0x00000000b76f8a9a), rs1:x22(0xdf7f3844121bcc23)
    li  x22, 0xdf7f3844121bcc23
    sha256sig0 x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000b76f8a9a)


    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_3_0)

 
sha256sig0_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x0000000002004000), rs1:x21(0x0000000000000001)
    li  x21, 0x1
    sha256sig0 x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x0000000002004000)
 
sha256sig0_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x0000000004008000), rs1:x20(0x0000000000000002)
    li  x20, 0x2
    sha256sig0 x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0000000004008000)
 
sha256sig0_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x0000000008010000), rs1:x19(0x0000000000000004)
    li  x19, 0x4
    sha256sig0 x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0000000008010000)
 
sha256sig0_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0000000010020001), rs1:x18(0x0000000000000008)
    li  x18, 0x8
    sha256sig0 x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0000000010020001)
 
sha256sig0_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x0000000020040002), rs1:x17(0x0000000000000010)
    li  x17, 0x10
    sha256sig0 x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0000000020040002)


    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x2,signature_4_0)

 
sha256sig0_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x0000000040080004), rs1:x16(0x0000000000000020)
    li  x16, 0x20
    sha256sig0 x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0000000040080004)
 
sha256sig0_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x0000000080100008), rs1:x15(0x0000000000000040)
    li  x15, 0x40
    sha256sig0 x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x0000000080100008)
 
sha256sig0_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x0000000000200011), rs1:x14(0x0000000000000080)
    li  x14, 0x80
    sha256sig0 x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x0000000000200011)
 
sha256sig0_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0000000000400022), rs1:x13(0x0000000000000100)
    li  x13, 0x100
    sha256sig0 x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0000000000400022)
 
sha256sig0_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0000000000800044), rs1:x12(0x0000000000000200)
    li  x12, 0x200
    sha256sig0 x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0000000000800044)


    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_5_0)

 
sha256sig0_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x0000000001000088), rs1:x11(0x0000000000000400)
    li  x11, 0x400
    sha256sig0 x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000001000088)
 
sha256sig0_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0000000002000110), rs1:x10(0x0000000000000800)
    li  x10, 0x800
    sha256sig0 x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000002000110)
 
sha256sig0_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x0000000004000220), rs1:x9(0x0000000000001000)
    li  x9, 0x1000
    sha256sig0 x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000004000220)
 
sha256sig0_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0000000008000440), rs1:x8(0x0000000000002000)
    li  x8, 0x2000
    sha256sig0 x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000008000440)
 
sha256sig0_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x0000000010000880), rs1:x7(0x0000000000004000)
    li  x7, 0x4000
    sha256sig0 x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000010000880)


    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_6_0)

 
sha256sig0_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x0000000020001100), rs1:x6(0x0000000000008000)
    li  x6, 0x8000
    sha256sig0 x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x0000000020001100)
 
sha256sig0_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x0000000040002200), rs1:x5(0x0000000000010000)
    li  x5, 0x10000
    sha256sig0 x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000040002200)
 
sha256sig0_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x0000000080004400), rs1:x4(0x0000000000020000)
    li  x4, 0x20000
    sha256sig0 x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000080004400)
 
sha256sig0_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0000000000008801), rs1:x3(0x0000000000040000)
    li  x3, 0x40000
    sha256sig0 x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000000008801)
 
sha256sig0_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0000000000011002), rs1:x2(0x0000000000080000)
    li  x2, 0x80000
    sha256sig0 x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000000011002)


    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x5,signature_7_0)

 
sha256sig0_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0000000000022004), rs1:x1(0x0000000000100000)
    li  x1, 0x100000
    sha256sig0 x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0000000000022004)
 
sha256sig0_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0000000000044008), rs1:x31(0x0000000000200000)
    li  x31, 0x200000
    sha256sig0 x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0000000000044008)
 
sha256sig0_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0000000000088010), rs1:x30(0x0000000000400000)
    li  x30, 0x400000
    sha256sig0 x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0000000000088010)
 
sha256sig0_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0000000000110020), rs1:x29(0x0000000000800000)
    li  x29, 0x800000
    sha256sig0 x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0000000000110020)
 
sha256sig0_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x0000000000220040), rs1:x28(0x0000000001000000)
    li  x28, 0x1000000
    sha256sig0 x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0000000000220040)


    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_8_0)

 
sha256sig0_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x0000000000440080), rs1:x27(0x0000000002000000)
    li  x27, 0x2000000
    sha256sig0 x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000000440080)
 
sha256sig0_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x0000000000880100), rs1:x26(0x0000000004000000)
    li  x26, 0x4000000
    sha256sig0 x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000880100)
 
sha256sig0_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0000000001100200), rs1:x25(0x0000000008000000)
    li  x25, 0x8000000
    sha256sig0 x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000001100200)
 
sha256sig0_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0000000002200400), rs1:x24(0x0000000010000000)
    li  x24, 0x10000000
    sha256sig0 x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000002200400)
 
sha256sig0_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0000000004400800), rs1:x23(0x0000000020000000)
    li  x23, 0x20000000
    sha256sig0 x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000004400800)


    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_9_0)

 
sha256sig0_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x0000000008801000), rs1:x22(0x0000000040000000)
    li  x22, 0x40000000
    sha256sig0 x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000008801000)
 
sha256sig0_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0000000011002000), rs1:x21(0x0000000080000000)
    li  x21, 0x80000000
    sha256sig0 x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000011002000)
 
sha256sig0_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000100000000)
    li  x20, 0x100000000
    sha256sig0 x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000000000000)
 
sha256sig0_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000200000000)
    li  x19, 0x200000000
    sha256sig0 x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)
 
sha256sig0_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0000000400000000)
    li  x18, 0x400000000
    sha256sig0 x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x0000000000000000)


    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x3,signature_10_0)

 
sha256sig0_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x0000000800000000)
    li  x17, 0x800000000
    sha256sig0 x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x0000000000000000)
 
sha256sig0_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x0000001000000000)
    li  x16, 0x1000000000
    sha256sig0 x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0000000000000000)
 
sha256sig0_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000002000000000)
    li  x15, 0x2000000000
    sha256sig0 x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x0000000000000000)
 
sha256sig0_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000004000000000)
    li  x14, 0x4000000000
    sha256sig0 x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x0000000000000000)
 
sha256sig0_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000008000000000)
    li  x13, 0x8000000000
    sha256sig0 x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000000000000000)


    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_11_0)

 
sha256sig0_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000010000000000)
    li  x12, 0x10000000000
    sha256sig0 x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0000000000000000)
 
sha256sig0_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000020000000000)
    li  x11, 0x20000000000
    sha256sig0 x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000000000000)
 
sha256sig0_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000040000000000)
    li  x10, 0x40000000000
    sha256sig0 x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000000000000)
 
sha256sig0_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000080000000000)
    li  x9, 0x80000000000
    sha256sig0 x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000000000000)
 
sha256sig0_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000100000000000)
    li  x8, 0x100000000000
    sha256sig0 x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000000000000)


    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_12_0)

 
sha256sig0_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000200000000000)
    li  x7, 0x200000000000
    sha256sig0 x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000000000000)
 
sha256sig0_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000400000000000)
    li  x6, 0x400000000000
    sha256sig0 x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000000000)
 
sha256sig0_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000800000000000)
    li  x5, 0x800000000000
    sha256sig0 x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x0000000000000000)
 
sha256sig0_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0001000000000000)
    li  x4, 0x1000000000000
    sha256sig0 x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x0000000000000000)
 
sha256sig0_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0002000000000000)
    li  x3, 0x2000000000000
    sha256sig0 x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x0000000000000000)


    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x4,signature_13_0)

 
sha256sig0_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0004000000000000)
    li  x2, 0x4000000000000
    sha256sig0 x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x0000000000000000)
 
sha256sig0_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0008000000000000)
    li  x1, 0x8000000000000
    sha256sig0 x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x0000000000000000)
 
sha256sig0_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0010000000000000)
    li  x31, 0x10000000000000
    sha256sig0 x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x0000000000000000)
 
sha256sig0_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0020000000000000)
    li  x30, 0x20000000000000
    sha256sig0 x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x0000000000000000)
 
sha256sig0_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0040000000000000)
    li  x29, 0x40000000000000
    sha256sig0 x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x0000000000000000)


    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_14_0)

 
sha256sig0_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0080000000000000)
    li  x28, 0x80000000000000
    sha256sig0 x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x0000000000000000)
 
sha256sig0_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0100000000000000)
    li  x27, 0x100000000000000
    sha256sig0 x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000000000000)
 
sha256sig0_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0200000000000000)
    li  x26, 0x200000000000000
    sha256sig0 x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000000000)
 
sha256sig0_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0400000000000000)
    li  x25, 0x400000000000000
    sha256sig0 x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000000000000)
 
sha256sig0_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0800000000000000)
    li  x24, 0x800000000000000
    sha256sig0 x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000000000000)


    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_15_0)

 
sha256sig0_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x1000000000000000)
    li  x23, 0x1000000000000000
    sha256sig0 x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000000000)
 
sha256sig0_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x2000000000000000)
    li  x22, 0x2000000000000000
    sha256sig0 x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000000000000)
 
sha256sig0_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x4000000000000000)
    li  x21, 0x4000000000000000
    sha256sig0 x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)
 
sha256sig0_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x8000000000000000)
    li  x20, 0x8000000000000000
    sha256sig0 x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000000000000)
 
sha256sig0_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000)
    li  x19, 0x0
    sha256sig0 x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)


    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x4,signature_16_0)

 
sha256sig0_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0x000000001dffbfff), rs1:x18(0xfffffffffffffffe)
    li  x18, 0xfffffffffffffffe
    sha256sig0 x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0x000000001dffbfff)
 
sha256sig0_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0x000000001bff7fff), rs1:x17(0xfffffffffffffffd)
    li  x17, 0xfffffffffffffffd
    sha256sig0 x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0x000000001bff7fff)
 
sha256sig0_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0x0000000017feffff), rs1:x16(0xfffffffffffffffb)
    li  x16, 0xfffffffffffffffb
    sha256sig0 x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0x0000000017feffff)
 
sha256sig0_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0x000000000ffdfffe), rs1:x15(0xfffffffffffffff7)
    li  x15, 0xfffffffffffffff7
    sha256sig0 x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0x000000000ffdfffe)
 
sha256sig0_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0x000000003ffbfffd), rs1:x14(0xffffffffffffffef)
    li  x14, 0xffffffffffffffef
    sha256sig0 x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0x000000003ffbfffd)


    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_17_0)

 
sha256sig0_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0x000000005ff7fffb), rs1:x13(0xffffffffffffffdf)
    li  x13, 0xffffffffffffffdf
    sha256sig0 x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x000000005ff7fffb)
 
sha256sig0_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0x000000009feffff7), rs1:x12(0xffffffffffffffbf)
    li  x12, 0xffffffffffffffbf
    sha256sig0 x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x000000009feffff7)
 
sha256sig0_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0x000000001fdfffee), rs1:x11(0xffffffffffffff7f)
    li  x11, 0xffffffffffffff7f
    sha256sig0 x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x000000001fdfffee)
 
sha256sig0_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0x000000001fbfffdd), rs1:x10(0xfffffffffffffeff)
    li  x10, 0xfffffffffffffeff
    sha256sig0 x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x000000001fbfffdd)
 
sha256sig0_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0x000000001f7fffbb), rs1:x9(0xfffffffffffffdff)
    li  x9, 0xfffffffffffffdff
    sha256sig0 x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x000000001f7fffbb)


    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_18_0)

 
sha256sig0_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0x000000001effff77), rs1:x8(0xfffffffffffffbff)
    li  x8, 0xfffffffffffffbff
    sha256sig0 x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x000000001effff77)
 
sha256sig0_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0x000000001dfffeef), rs1:x7(0xfffffffffffff7ff)
    li  x7, 0xfffffffffffff7ff
    sha256sig0 x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x000000001dfffeef)
 
sha256sig0_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0x000000001bfffddf), rs1:x6(0xffffffffffffefff)
    li  x6, 0xffffffffffffefff
    sha256sig0 x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x000000001bfffddf)
 
sha256sig0_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0x0000000017fffbbf), rs1:x5(0xffffffffffffdfff)
    li  x5, 0xffffffffffffdfff
    sha256sig0 x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x0000000017fffbbf)
 
sha256sig0_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0x000000000ffff77f), rs1:x4(0xffffffffffffbfff)
    li  x4, 0xffffffffffffbfff
    sha256sig0 x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x000000000ffff77f)


    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x4,signature_19_0)

 
sha256sig0_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0x000000003fffeeff), rs1:x3(0xffffffffffff7fff)
    li  x3, 0xffffffffffff7fff
    sha256sig0 x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0x000000003fffeeff)
 
sha256sig0_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0x000000005fffddff), rs1:x2(0xfffffffffffeffff)
    li  x2, 0xfffffffffffeffff
    sha256sig0 x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x000000005fffddff)
 
sha256sig0_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0x000000009fffbbff), rs1:x1(0xfffffffffffdffff)
    li  x1, 0xfffffffffffdffff
    sha256sig0 x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x000000009fffbbff)
 
sha256sig0_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0x000000001fff77fe), rs1:x31(0xfffffffffffbffff)
    li  x31, 0xfffffffffffbffff
    sha256sig0 x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x000000001fff77fe)
 
sha256sig0_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0x000000001ffeeffd), rs1:x30(0xfffffffffff7ffff)
    li  x30, 0xfffffffffff7ffff
    sha256sig0 x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x000000001ffeeffd)


    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_20_0)

 
sha256sig0_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0x000000001ffddffb), rs1:x29(0xffffffffffefffff)
    li  x29, 0xffffffffffefffff
    sha256sig0 x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0x000000001ffddffb)
 
sha256sig0_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0x000000001ffbbff7), rs1:x28(0xffffffffffdfffff)
    li  x28, 0xffffffffffdfffff
    sha256sig0 x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x000000001ffbbff7)
 
sha256sig0_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0x000000001ff77fef), rs1:x27(0xffffffffffbfffff)
    li  x27, 0xffffffffffbfffff
    sha256sig0 x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x000000001ff77fef)
 
sha256sig0_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0x000000001feeffdf), rs1:x26(0xffffffffff7fffff)
    li  x26, 0xffffffffff7fffff
    sha256sig0 x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x000000001feeffdf)
 
sha256sig0_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0x000000001fddffbf), rs1:x25(0xfffffffffeffffff)
    li  x25, 0xfffffffffeffffff
    sha256sig0 x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x000000001fddffbf)


    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_21_0)

 
sha256sig0_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0x000000001fbbff7f), rs1:x24(0xfffffffffdffffff)
    li  x24, 0xfffffffffdffffff
    sha256sig0 x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x000000001fbbff7f)
 
sha256sig0_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0x000000001f77feff), rs1:x23(0xfffffffffbffffff)
    li  x23, 0xfffffffffbffffff
    sha256sig0 x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x000000001f77feff)
 
sha256sig0_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0x000000001eeffdff), rs1:x22(0xfffffffff7ffffff)
    li  x22, 0xfffffffff7ffffff
    sha256sig0 x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x000000001eeffdff)
 
sha256sig0_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0x000000001ddffbff), rs1:x21(0xffffffffefffffff)
    li  x21, 0xffffffffefffffff
    sha256sig0 x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x000000001ddffbff)
 
sha256sig0_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0x000000001bbff7ff), rs1:x20(0xffffffffdfffffff)
    li  x20, 0xffffffffdfffffff
    sha256sig0 x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x000000001bbff7ff)


    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x5,signature_22_0)

 
sha256sig0_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0x00000000177fefff), rs1:x19(0xffffffffbfffffff)
    li  x19, 0xffffffffbfffffff
    sha256sig0 x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0x00000000177fefff)
 
sha256sig0_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0x000000000effdfff), rs1:x18(0xffffffff7fffffff)
    li  x18, 0xffffffff7fffffff
    sha256sig0 x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0x000000000effdfff)
 
sha256sig0_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0x000000001fffffff), rs1:x17(0xfffffffeffffffff)
    li  x17, 0xfffffffeffffffff
    sha256sig0 x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0x000000001fffffff)
 
sha256sig0_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0x000000001fffffff), rs1:x16(0xfffffffdffffffff)
    li  x16, 0xfffffffdffffffff
    sha256sig0 x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0x000000001fffffff)
 
sha256sig0_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0x000000001fffffff), rs1:x15(0xfffffffbffffffff)
    li  x15, 0xfffffffbffffffff
    sha256sig0 x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0x000000001fffffff)


    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_23_0)

 
sha256sig0_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0x000000001fffffff), rs1:x14(0xfffffff7ffffffff)
    li  x14, 0xfffffff7ffffffff
    sha256sig0 x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x000000001fffffff)
 
sha256sig0_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0x000000001fffffff), rs1:x13(0xffffffefffffffff)
    li  x13, 0xffffffefffffffff
    sha256sig0 x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x000000001fffffff)
 
sha256sig0_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0x000000001fffffff), rs1:x12(0xffffffdfffffffff)
    li  x12, 0xffffffdfffffffff
    sha256sig0 x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x000000001fffffff)
 
sha256sig0_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0x000000001fffffff), rs1:x11(0xffffffbfffffffff)
    li  x11, 0xffffffbfffffffff
    sha256sig0 x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x000000001fffffff)
 
sha256sig0_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0x000000001fffffff), rs1:x10(0xffffff7fffffffff)
    li  x10, 0xffffff7fffffffff
    sha256sig0 x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x000000001fffffff)


    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_24_0)

 
sha256sig0_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0x000000001fffffff), rs1:x9(0xfffffeffffffffff)
    li  x9, 0xfffffeffffffffff
    sha256sig0 x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x000000001fffffff)
 
sha256sig0_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0x000000001fffffff), rs1:x8(0xfffffdffffffffff)
    li  x8, 0xfffffdffffffffff
    sha256sig0 x24, x8
    sd x24, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x000000001fffffff)
 
sha256sig0_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0x000000001fffffff), rs1:x7(0xfffffbffffffffff)
    li  x7, 0xfffffbffffffffff
    sha256sig0 x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x000000001fffffff)
 
sha256sig0_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0x000000001fffffff), rs1:x6(0xfffff7ffffffffff)
    li  x6, 0xfffff7ffffffffff
    sha256sig0 x26, x6
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x000000001fffffff)
 
sha256sig0_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0x000000001fffffff), rs1:x5(0xffffefffffffffff)
    li  x5, 0xffffefffffffffff
    sha256sig0 x27, x5
    sd x27, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x000000001fffffff)


    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x5,signature_25_0)

 
sha256sig0_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0x000000001fffffff), rs1:x4(0xffffdfffffffffff)
    li  x4, 0xffffdfffffffffff
    sha256sig0 x28, x4
    sd x28, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x28, 0x000000001fffffff)
 
sha256sig0_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0x000000001fffffff), rs1:x3(0xffffbfffffffffff)
    li  x3, 0xffffbfffffffffff
    sha256sig0 x29, x3
    sd x29, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x29, 0x000000001fffffff)
 
sha256sig0_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0x000000001fffffff), rs1:x2(0xffff7fffffffffff)
    li  x2, 0xffff7fffffffffff
    sha256sig0 x30, x2
    sd x30, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x30, 0x000000001fffffff)
 
sha256sig0_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0x000000001fffffff), rs1:x1(0xfffeffffffffffff)
    li  x1, 0xfffeffffffffffff
    sha256sig0 x31, x1
    sd x31, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x000000001fffffff)
 
sha256sig0_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0x000000001fffffff), rs1:x31(0xfffdffffffffffff)
    li  x31, 0xfffdffffffffffff
    sha256sig0 x1, x31
    sd x1, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x000000001fffffff)


    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_26_0)

 
sha256sig0_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0x000000001fffffff), rs1:x30(0xfffbffffffffffff)
    li  x30, 0xfffbffffffffffff
    sha256sig0 x2, x30
    sd x2, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x000000001fffffff)
 
sha256sig0_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0x000000001fffffff), rs1:x29(0xfff7ffffffffffff)
    li  x29, 0xfff7ffffffffffff
    sha256sig0 x3, x29
    sd x3, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x000000001fffffff)
 
sha256sig0_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0x000000001fffffff), rs1:x28(0xffefffffffffffff)
    li  x28, 0xffefffffffffffff
    sha256sig0 x4, x28
    sd x4, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x000000001fffffff)
 
sha256sig0_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0x000000001fffffff), rs1:x27(0xffdfffffffffffff)
    li  x27, 0xffdfffffffffffff
    sha256sig0 x5, x27
    sd x5, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x000000001fffffff)
 
sha256sig0_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0x000000001fffffff), rs1:x26(0xffbfffffffffffff)
    li  x26, 0xffbfffffffffffff
    sha256sig0 x6, x26
    sd x6, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x6, 0x000000001fffffff)


    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_27_0)

 
sha256sig0_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0x000000001fffffff), rs1:x25(0xff7fffffffffffff)
    li  x25, 0xff7fffffffffffff
    sha256sig0 x7, x25
    sd x7, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x000000001fffffff)
 
sha256sig0_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0x000000001fffffff), rs1:x24(0xfeffffffffffffff)
    li  x24, 0xfeffffffffffffff
    sha256sig0 x8, x24
    sd x8, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x000000001fffffff)
 
sha256sig0_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0x000000001fffffff), rs1:x23(0xfdffffffffffffff)
    li  x23, 0xfdffffffffffffff
    sha256sig0 x9, x23
    sd x9, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x000000001fffffff)
 
sha256sig0_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0x000000001fffffff), rs1:x22(0xfbffffffffffffff)
    li  x22, 0xfbffffffffffffff
    sha256sig0 x10, x22
    sd x10, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x000000001fffffff)
 
sha256sig0_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0x000000001fffffff), rs1:x21(0xf7ffffffffffffff)
    li  x21, 0xf7ffffffffffffff
    sha256sig0 x11, x21
    sd x11, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x000000001fffffff)


    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x6,signature_28_0)

 
sha256sig0_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0x000000001fffffff), rs1:x20(0xefffffffffffffff)
    li  x20, 0xefffffffffffffff
    sha256sig0 x12, x20
    sd x12, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x000000001fffffff)
 
sha256sig0_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0x000000001fffffff), rs1:x19(0xdfffffffffffffff)
    li  x19, 0xdfffffffffffffff
    sha256sig0 x13, x19
    sd x13, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x000000001fffffff)
 
sha256sig0_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0x000000001fffffff), rs1:x18(0xbfffffffffffffff)
    li  x18, 0xbfffffffffffffff
    sha256sig0 x14, x18
    sd x14, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x000000001fffffff)
 
sha256sig0_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0x000000001fffffff), rs1:x17(0x7fffffffffffffff)
    li  x17, 0x7fffffffffffffff
    sha256sig0 x15, x17
    sd x15, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x000000001fffffff)
 
sha256sig0_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0x000000001fffffff), rs1:x16(0xffffffffffffffff)
    li  x16, 0xffffffffffffffff
    sha256sig0 x16, x16
    sd x16, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x16, 0x000000001fffffff)


    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_29_0)

 
sha256sig0_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0000000002004000), rs1:x15(0x0000000000000001)
    li  x15, 0x1
    sha256sig0 x17, x15
    sd x17, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x17, 0x0000000002004000)
 
sha256sig0_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0000000004008000), rs1:x14(0x0000000000000002)
    li  x14, 0x2
    sha256sig0 x18, x14
    sd x18, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x0000000004008000)
 
sha256sig0_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0000000008010000), rs1:x13(0x0000000000000004)
    li  x13, 0x4
    sha256sig0 x19, x13
    sd x19, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x0000000008010000)
 
sha256sig0_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0000000010020001), rs1:x12(0x0000000000000008)
    li  x12, 0x8
    sha256sig0 x20, x12
    sd x20, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0000000010020001)
 
sha256sig0_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0000000020040002), rs1:x11(0x0000000000000010)
    li  x11, 0x10
    sha256sig0 x21, x11
    sd x21, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000020040002)


    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_30_0)

 
sha256sig0_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0000000040080004), rs1:x10(0x0000000000000020)
    li  x10, 0x20
    sha256sig0 x22, x10
    sd x22, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000040080004)
 
sha256sig0_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0000000080100008), rs1:x9(0x0000000000000040)
    li  x9, 0x40
    sha256sig0 x23, x9
    sd x23, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000080100008)
 
sha256sig0_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0000000000200011), rs1:x8(0x0000000000000080)
    li  x8, 0x80
    sha256sig0 x24, x8
    sd x24, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000000200011)
 
sha256sig0_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000000400022), rs1:x7(0x0000000000000100)
    li  x7, 0x100
    sha256sig0 x25, x7
    sd x25, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000000400022)
 
sha256sig0_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000000800044), rs1:x6(0x0000000000000200)
    li  x6, 0x200
    sha256sig0 x26, x6
    sd x26, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000800044)


    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x6,signature_31_0)

 
sha256sig0_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000000001000088), rs1:x5(0x0000000000000400)
    li  x5, 0x400
    sha256sig0 x27, x5
    sd x27, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000001000088)
 
sha256sig0_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000002000110), rs1:x4(0x0000000000000800)
    li  x4, 0x800
    sha256sig0 x28, x4
    sd x28, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000002000110)
 
sha256sig0_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0000000004000220), rs1:x3(0x0000000000001000)
    li  x3, 0x1000
    sha256sig0 x29, x3
    sd x29, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000004000220)
 
sha256sig0_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000008000440), rs1:x2(0x0000000000002000)
    li  x2, 0x2000
    sha256sig0 x30, x2
    sd x30, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000008000440)
 
sha256sig0_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0000000010000880), rs1:x1(0x0000000000004000)
    li  x1, 0x4000
    sha256sig0 x31, x1
    sd x31, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x0000000010000880)


    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x6,signature_32_0)

 
sha256sig0_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000020001100), rs1:x31(0x0000000000008000)
    li  x31, 0x8000
    sha256sig0 x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x0000000020001100)
 
sha256sig0_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000000040002200), rs1:x30(0x0000000000010000)
    li  x30, 0x10000
    sha256sig0 x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x0000000040002200)
 
sha256sig0_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000080004400), rs1:x29(0x0000000000020000)
    li  x29, 0x20000
    sha256sig0 x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x0000000080004400)
 
sha256sig0_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000000008801), rs1:x28(0x0000000000040000)
    li  x28, 0x40000
    sha256sig0 x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x0000000000008801)
 
sha256sig0_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000000011002), rs1:x27(0x0000000000080000)
    li  x27, 0x80000
    sha256sig0 x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x0000000000011002)


    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_33_0)

 
sha256sig0_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000000022004), rs1:x26(0x0000000000100000)
    li  x26, 0x100000
    sha256sig0 x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000022004)
 
sha256sig0_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000000044008), rs1:x25(0x0000000000200000)
    li  x25, 0x200000
    sha256sig0 x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000000044008)
 
sha256sig0_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000000088010), rs1:x24(0x0000000000400000)
    li  x24, 0x400000
    sha256sig0 x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000000088010)
 
sha256sig0_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000000110020), rs1:x23(0x0000000000800000)
    li  x23, 0x800000
    sha256sig0 x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000110020)
 
sha256sig0_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000000220040), rs1:x22(0x0000000001000000)
    li  x22, 0x1000000
    sha256sig0 x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000000220040)


    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_34_0)

 
sha256sig0_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000000440080), rs1:x21(0x0000000002000000)
    li  x21, 0x2000000
    sha256sig0 x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x0000000000440080)
 
sha256sig0_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000000880100), rs1:x20(0x0000000004000000)
    li  x20, 0x4000000
    sha256sig0 x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0000000000880100)
 
sha256sig0_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000001100200), rs1:x19(0x0000000008000000)
    li  x19, 0x8000000
    sha256sig0 x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0000000001100200)
 
sha256sig0_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000002200400), rs1:x18(0x0000000010000000)
    li  x18, 0x10000000
    sha256sig0 x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0000000002200400)
 
sha256sig0_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000004400800), rs1:x17(0x0000000020000000)
    li  x17, 0x20000000
    sha256sig0 x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0000000004400800)


    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x2,signature_35_0)

 
sha256sig0_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000008801000), rs1:x16(0x0000000040000000)
    li  x16, 0x40000000
    sha256sig0 x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0000000008801000)
 
sha256sig0_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000000011002000), rs1:x15(0x0000000080000000)
    li  x15, 0x80000000
    sha256sig0 x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x0000000011002000)
 
sha256sig0_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000000100000000)
    li  x14, 0x100000000
    sha256sig0 x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x0000000000000000)
 
sha256sig0_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000200000000)
    li  x13, 0x200000000
    sha256sig0 x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0000000000000000)
 
sha256sig0_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000000400000000)
    li  x12, 0x400000000
    sha256sig0 x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0000000000000000)


    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_36_0)

 
sha256sig0_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000800000000)
    li  x11, 0x800000000
    sha256sig0 x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000000000000)
 
sha256sig0_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000001000000000)
    li  x10, 0x1000000000
    sha256sig0 x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000000000000)
 
sha256sig0_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000002000000000)
    li  x9, 0x2000000000
    sha256sig0 x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000000000000)
 
sha256sig0_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000004000000000)
    li  x8, 0x4000000000
    sha256sig0 x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000000000000)
 
sha256sig0_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000008000000000)
    li  x7, 0x8000000000
    sha256sig0 x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000000000000)


    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_37_0)

 
sha256sig0_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000010000000000)
    li  x6, 0x10000000000
    sha256sig0 x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x0000000000000000)
 
sha256sig0_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000020000000000)
    li  x5, 0x20000000000
    sha256sig0 x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000000000000)
 
sha256sig0_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000040000000000)
    li  x4, 0x40000000000
    sha256sig0 x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000000000000)
 
sha256sig0_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000080000000000)
    li  x3, 0x80000000000
    sha256sig0 x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000000000000)
 
sha256sig0_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000100000000000)
    li  x2, 0x100000000000
    sha256sig0 x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000000000000)


    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x5,signature_38_0)

 
sha256sig0_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000200000000000)
    li  x1, 0x200000000000
    sha256sig0 x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0000000000000000)
 
sha256sig0_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000400000000000)
    li  x31, 0x400000000000
    sha256sig0 x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0000000000000000)
 
sha256sig0_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000800000000000)
    li  x30, 0x800000000000
    sha256sig0 x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0000000000000000)
 
sha256sig0_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0001000000000000)
    li  x29, 0x1000000000000
    sha256sig0 x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0000000000000000)
 
sha256sig0_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0002000000000000)
    li  x28, 0x2000000000000
    sha256sig0 x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0000000000000000)


    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_39_0)

 
sha256sig0_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0004000000000000)
    li  x27, 0x4000000000000
    sha256sig0 x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000000000000)
 
sha256sig0_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0008000000000000)
    li  x26, 0x8000000000000
    sha256sig0 x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000000000)
 
sha256sig0_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0010000000000000)
    li  x25, 0x10000000000000
    sha256sig0 x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000000000000)
 
sha256sig0_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0020000000000000)
    li  x24, 0x20000000000000
    sha256sig0 x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000000000000)
 
sha256sig0_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0040000000000000)
    li  x23, 0x40000000000000
    sha256sig0 x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000000000)


    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_40_0)

 
sha256sig0_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0080000000000000)
    li  x22, 0x80000000000000
    sha256sig0 x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000000000000)
 
sha256sig0_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0100000000000000)
    li  x21, 0x100000000000000
    sha256sig0 x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)
 
sha256sig0_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0200000000000000)
    li  x20, 0x200000000000000
    sha256sig0 x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000000000000)
 
sha256sig0_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0400000000000000)
    li  x19, 0x400000000000000
    sha256sig0 x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)
 
sha256sig0_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0800000000000000)
    li  x18, 0x800000000000000
    sha256sig0 x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x0000000000000000)


    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x3,signature_41_0)

 
sha256sig0_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x1000000000000000)
    li  x17, 0x1000000000000000
    sha256sig0 x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x0000000000000000)
 
sha256sig0_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x2000000000000000)
    li  x16, 0x2000000000000000
    sha256sig0 x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0000000000000000)
 
sha256sig0_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x4000000000000000)
    li  x15, 0x4000000000000000
    sha256sig0 x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x0000000000000000)
 
sha256sig0_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x8000000000000000)
    li  x14, 0x8000000000000000
    sha256sig0 x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x0000000000000000)
 
sha256sig0_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000)
    li  x13, 0x0
    sha256sig0 x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000000000000000)


    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_42_0)

 
sha256sig0_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0x000000001dffbfff), rs1:x12(0xfffffffffffffffe)
    li  x12, 0xfffffffffffffffe
    sha256sig0 x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x000000001dffbfff)
 
sha256sig0_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0x000000001bff7fff), rs1:x11(0xfffffffffffffffd)
    li  x11, 0xfffffffffffffffd
    sha256sig0 x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x000000001bff7fff)
 
sha256sig0_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0x0000000017feffff), rs1:x10(0xfffffffffffffffb)
    li  x10, 0xfffffffffffffffb
    sha256sig0 x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000017feffff)
 
sha256sig0_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0x000000000ffdfffe), rs1:x9(0xfffffffffffffff7)
    li  x9, 0xfffffffffffffff7
    sha256sig0 x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x000000000ffdfffe)
 
sha256sig0_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0x000000003ffbfffd), rs1:x8(0xffffffffffffffef)
    li  x8, 0xffffffffffffffef
    sha256sig0 x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x000000003ffbfffd)


    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_43_0)

 
sha256sig0_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0x000000005ff7fffb), rs1:x7(0xffffffffffffffdf)
    li  x7, 0xffffffffffffffdf
    sha256sig0 x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x000000005ff7fffb)
 
sha256sig0_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0x000000009feffff7), rs1:x6(0xffffffffffffffbf)
    li  x6, 0xffffffffffffffbf
    sha256sig0 x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x000000009feffff7)
 
sha256sig0_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0x000000001fdfffee), rs1:x5(0xffffffffffffff7f)
    li  x5, 0xffffffffffffff7f
    sha256sig0 x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x000000001fdfffee)
 
sha256sig0_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0x000000001fbfffdd), rs1:x4(0xfffffffffffffeff)
    li  x4, 0xfffffffffffffeff
    sha256sig0 x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x000000001fbfffdd)
 
sha256sig0_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0x000000001f7fffbb), rs1:x3(0xfffffffffffffdff)
    li  x3, 0xfffffffffffffdff
    sha256sig0 x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x000000001f7fffbb)


    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x4,signature_44_0)

 
sha256sig0_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0x000000001effff77), rs1:x2(0xfffffffffffffbff)
    li  x2, 0xfffffffffffffbff
    sha256sig0 x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x000000001effff77)
 
sha256sig0_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0x000000001dfffeef), rs1:x1(0xfffffffffffff7ff)
    li  x1, 0xfffffffffffff7ff
    sha256sig0 x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x000000001dfffeef)
 
sha256sig0_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0x000000001bfffddf), rs1:x31(0xffffffffffffefff)
    li  x31, 0xffffffffffffefff
    sha256sig0 x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x000000001bfffddf)
 
sha256sig0_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0x0000000017fffbbf), rs1:x30(0xffffffffffffdfff)
    li  x30, 0xffffffffffffdfff
    sha256sig0 x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x0000000017fffbbf)
 
sha256sig0_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0x000000000ffff77f), rs1:x29(0xffffffffffffbfff)
    li  x29, 0xffffffffffffbfff
    sha256sig0 x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x000000000ffff77f)


    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_45_0)

 
sha256sig0_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0x000000003fffeeff), rs1:x28(0xffffffffffff7fff)
    li  x28, 0xffffffffffff7fff
    sha256sig0 x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x000000003fffeeff)
 
sha256sig0_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0x000000005fffddff), rs1:x27(0xfffffffffffeffff)
    li  x27, 0xfffffffffffeffff
    sha256sig0 x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x000000005fffddff)
 
sha256sig0_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0x000000009fffbbff), rs1:x26(0xfffffffffffdffff)
    li  x26, 0xfffffffffffdffff
    sha256sig0 x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x000000009fffbbff)
 
sha256sig0_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0x000000001fff77fe), rs1:x25(0xfffffffffffbffff)
    li  x25, 0xfffffffffffbffff
    sha256sig0 x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x000000001fff77fe)
 
sha256sig0_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0x000000001ffeeffd), rs1:x24(0xfffffffffff7ffff)
    li  x24, 0xfffffffffff7ffff
    sha256sig0 x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x000000001ffeeffd)


    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_46_0)

 
sha256sig0_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0x000000001ffddffb), rs1:x23(0xffffffffffefffff)
    li  x23, 0xffffffffffefffff
    sha256sig0 x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x000000001ffddffb)
 
sha256sig0_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0x000000001ffbbff7), rs1:x22(0xffffffffffdfffff)
    li  x22, 0xffffffffffdfffff
    sha256sig0 x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x000000001ffbbff7)
 
sha256sig0_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0x000000001ff77fef), rs1:x21(0xffffffffffbfffff)
    li  x21, 0xffffffffffbfffff
    sha256sig0 x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x000000001ff77fef)
 
sha256sig0_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0x000000001feeffdf), rs1:x20(0xffffffffff7fffff)
    li  x20, 0xffffffffff7fffff
    sha256sig0 x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x000000001feeffdf)
 
sha256sig0_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0x000000001fddffbf), rs1:x19(0xfffffffffeffffff)
    li  x19, 0xfffffffffeffffff
    sha256sig0 x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x000000001fddffbf)


    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x4,signature_47_0)

 
sha256sig0_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0x000000001fbbff7f), rs1:x18(0xfffffffffdffffff)
    li  x18, 0xfffffffffdffffff
    sha256sig0 x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0x000000001fbbff7f)
 
sha256sig0_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0x000000001f77feff), rs1:x17(0xfffffffffbffffff)
    li  x17, 0xfffffffffbffffff
    sha256sig0 x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0x000000001f77feff)
 
sha256sig0_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0x000000001eeffdff), rs1:x16(0xfffffffff7ffffff)
    li  x16, 0xfffffffff7ffffff
    sha256sig0 x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0x000000001eeffdff)
 
sha256sig0_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0x000000001ddffbff), rs1:x15(0xffffffffefffffff)
    li  x15, 0xffffffffefffffff
    sha256sig0 x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0x000000001ddffbff)
 
sha256sig0_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0x000000001bbff7ff), rs1:x14(0xffffffffdfffffff)
    li  x14, 0xffffffffdfffffff
    sha256sig0 x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0x000000001bbff7ff)


    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_48_0)

 
sha256sig0_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0x00000000177fefff), rs1:x13(0xffffffffbfffffff)
    li  x13, 0xffffffffbfffffff
    sha256sig0 x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x00000000177fefff)
 
sha256sig0_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0x000000000effdfff), rs1:x12(0xffffffff7fffffff)
    li  x12, 0xffffffff7fffffff
    sha256sig0 x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x000000000effdfff)
 
sha256sig0_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0x000000001fffffff), rs1:x11(0xfffffffeffffffff)
    li  x11, 0xfffffffeffffffff
    sha256sig0 x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x000000001fffffff)
 
sha256sig0_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0x000000001fffffff), rs1:x10(0xfffffffdffffffff)
    li  x10, 0xfffffffdffffffff
    sha256sig0 x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x000000001fffffff)
 
sha256sig0_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0x000000001fffffff), rs1:x9(0xfffffffbffffffff)
    li  x9, 0xfffffffbffffffff
    sha256sig0 x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x000000001fffffff)


    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_49_0)

 
sha256sig0_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0x000000001fffffff), rs1:x8(0xfffffff7ffffffff)
    li  x8, 0xfffffff7ffffffff
    sha256sig0 x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x000000001fffffff)
 
sha256sig0_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0x000000001fffffff), rs1:x7(0xffffffefffffffff)
    li  x7, 0xffffffefffffffff
    sha256sig0 x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x000000001fffffff)
 
sha256sig0_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0x000000001fffffff), rs1:x6(0xffffffdfffffffff)
    li  x6, 0xffffffdfffffffff
    sha256sig0 x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x000000001fffffff)
 
sha256sig0_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0x000000001fffffff), rs1:x5(0xffffffbfffffffff)
    li  x5, 0xffffffbfffffffff
    sha256sig0 x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x000000001fffffff)
 
sha256sig0_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0x000000001fffffff), rs1:x4(0xffffff7fffffffff)
    li  x4, 0xffffff7fffffffff
    sha256sig0 x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x000000001fffffff)


    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x4,signature_50_0)

 
sha256sig0_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0x000000001fffffff), rs1:x3(0xfffffeffffffffff)
    li  x3, 0xfffffeffffffffff
    sha256sig0 x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0x000000001fffffff)
 
sha256sig0_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0x000000001fffffff), rs1:x2(0xfffffdffffffffff)
    li  x2, 0xfffffdffffffffff
    sha256sig0 x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x000000001fffffff)
 
sha256sig0_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0x000000001fffffff), rs1:x1(0xfffffbffffffffff)
    li  x1, 0xfffffbffffffffff
    sha256sig0 x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x000000001fffffff)
 
sha256sig0_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0x000000001fffffff), rs1:x31(0xfffff7ffffffffff)
    li  x31, 0xfffff7ffffffffff
    sha256sig0 x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x000000001fffffff)
 
sha256sig0_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0x000000001fffffff), rs1:x30(0xffffefffffffffff)
    li  x30, 0xffffefffffffffff
    sha256sig0 x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x000000001fffffff)


    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_51_0)

 
sha256sig0_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0x000000001fffffff), rs1:x29(0xffffdfffffffffff)
    li  x29, 0xffffdfffffffffff
    sha256sig0 x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0x000000001fffffff)
 
sha256sig0_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0x000000001fffffff), rs1:x28(0xffffbfffffffffff)
    li  x28, 0xffffbfffffffffff
    sha256sig0 x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x000000001fffffff)
 
sha256sig0_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0x000000001fffffff), rs1:x27(0xffff7fffffffffff)
    li  x27, 0xffff7fffffffffff
    sha256sig0 x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x000000001fffffff)
 
sha256sig0_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0x000000001fffffff), rs1:x26(0xfffeffffffffffff)
    li  x26, 0xfffeffffffffffff
    sha256sig0 x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x000000001fffffff)
 
sha256sig0_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0x000000001fffffff), rs1:x25(0xfffdffffffffffff)
    li  x25, 0xfffdffffffffffff
    sha256sig0 x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x000000001fffffff)


    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_52_0)

 
sha256sig0_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0x000000001fffffff), rs1:x24(0xfffbffffffffffff)
    li  x24, 0xfffbffffffffffff
    sha256sig0 x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x000000001fffffff)
 
sha256sig0_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0x000000001fffffff), rs1:x23(0xfff7ffffffffffff)
    li  x23, 0xfff7ffffffffffff
    sha256sig0 x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x000000001fffffff)
 
sha256sig0_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0x000000001fffffff), rs1:x22(0xffefffffffffffff)
    li  x22, 0xffefffffffffffff
    sha256sig0 x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x000000001fffffff)
 
sha256sig0_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0x000000001fffffff), rs1:x21(0xffdfffffffffffff)
    li  x21, 0xffdfffffffffffff
    sha256sig0 x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x000000001fffffff)
 
sha256sig0_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0x000000001fffffff), rs1:x20(0xffbfffffffffffff)
    li  x20, 0xffbfffffffffffff
    sha256sig0 x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x000000001fffffff)


    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x5,signature_53_0)

 
sha256sig0_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0x000000001fffffff), rs1:x19(0xff7fffffffffffff)
    li  x19, 0xff7fffffffffffff
    sha256sig0 x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0x000000001fffffff)
 
sha256sig0_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0x000000001fffffff), rs1:x18(0xfeffffffffffffff)
    li  x18, 0xfeffffffffffffff
    sha256sig0 x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0x000000001fffffff)
 
sha256sig0_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0x000000001fffffff), rs1:x17(0xfdffffffffffffff)
    li  x17, 0xfdffffffffffffff
    sha256sig0 x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0x000000001fffffff)
 
sha256sig0_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0x000000001fffffff), rs1:x16(0xfbffffffffffffff)
    li  x16, 0xfbffffffffffffff
    sha256sig0 x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0x000000001fffffff)
 
sha256sig0_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0x000000001fffffff), rs1:x15(0xf7ffffffffffffff)
    li  x15, 0xf7ffffffffffffff
    sha256sig0 x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0x000000001fffffff)


    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_54_0)

 
sha256sig0_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0x000000001fffffff), rs1:x14(0xefffffffffffffff)
    li  x14, 0xefffffffffffffff
    sha256sig0 x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x000000001fffffff)
 
sha256sig0_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0x000000001fffffff), rs1:x13(0xdfffffffffffffff)
    li  x13, 0xdfffffffffffffff
    sha256sig0 x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x000000001fffffff)
 
sha256sig0_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0x000000001fffffff), rs1:x12(0xbfffffffffffffff)
    li  x12, 0xbfffffffffffffff
    sha256sig0 x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x000000001fffffff)
 
sha256sig0_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0x000000001fffffff), rs1:x11(0x7fffffffffffffff)
    li  x11, 0x7fffffffffffffff
    sha256sig0 x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x000000001fffffff)
 
sha256sig0_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0x000000001fffffff), rs1:x10(0xffffffffffffffff)
    li  x10, 0xffffffffffffffff
    sha256sig0 x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x000000001fffffff)


    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig0)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig0)

    RVTEST_SIGBASE(x1,signature_55_0)

 
sha256sig0_01_inst_270:
    // Test 270:  Test with random values
    // result rd:x23(0x00000000aa83f5eb), rs1:x9(0x10fd3dedadea5195)
    li  x9, 0x10fd3dedadea5195
    sha256sig0 x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000aa83f5eb)
 
sha256sig0_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1)
    li  x8, 0xbd295ce2d2ffbec1
    sha256sig0 x0, x8
    sd x0, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x0, 0x0000000000000000)
 
sha256sig0_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0x0000000008631c7e), rs1:x7(0xc9649f05a8e1a8bb)
    li  x7, 0xc9649f05a8e1a8bb
    sha256sig0 x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000008631c7e)
 
sha256sig0_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb)
    li  x0, 0x3541291848c99fcb
    sha256sig0 x26, x0
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000000000)
	
#endif


RVTEST_CODE_END sha256sig0_01_code_end
RVTEST_CODE_BEGIN rev_b_01_init rev_b_01_code_begin






#ifdef TEST_CASE_1


    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x6,signature_1_0)

 
rev_b_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x08bfbcb7b5578aa9), rs1:x31(0x10fd3dedadea5195)
    li  x31, 0x10fd3dedadea5195
    rev.b x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x08bfbcb7b5578aa9)
 
rev_b_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0xbd943a474bff7d83), rs1:x30(0xbd295ce2d2ffbec1)
    li  x30, 0xbd295ce2d2ffbec1
    rev.b x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0xbd943a474bff7d83)
 
rev_b_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0x9326f9a0158715dd), rs1:x29(0xc9649f05a8e1a8bb)
    li  x29, 0xc9649f05a8e1a8bb
    rev.b x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x9326f9a0158715dd)
 
rev_b_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0xac8294181293f9d3), rs1:x28(0x3541291848c99fcb)
    li  x28, 0x3541291848c99fcb
    rev.b x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0xac8294181293f9d3)
 
rev_b_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x0845e20262b84af2), rs1:x27(0x10a24740461d524f)
    li  x27, 0x10a24740461d524f
    rev.b x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x0845e20262b84af2)


    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_2_0)

 
rev_b_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x2ad6702a4a5108f5), rs1:x26(0x546b0e54528a10af)
    li  x26, 0x546b0e54528a10af
    rev.b x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x2ad6702a4a5108f5)
 
rev_b_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0xce95f42b87d9dfc3), rs1:x25(0x73a92fd4e19bfbc3)
    li  x25, 0x73a92fd4e19bfbc3
    rev.b x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xce95f42b87d9dfc3)
 
rev_b_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x416f2efe0e5e4f03), rs1:x24(0x82f6747f707af2c0)
    li  x24, 0x82f6747f707af2c0
    rev.b x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x416f2efe0e5e4f03)
 
rev_b_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0xafb52d5825be08da), rs1:x23(0xf5adb41aa47d105b)
    li  x23, 0xf5adb41aa47d105b
    rev.b x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xafb52d5825be08da)
 
rev_b_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0xfbfe1c2248d833c4), rs1:x22(0xdf7f3844121bcc23)
    li  x22, 0xdf7f3844121bcc23
    rev.b x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xfbfe1c2248d833c4)


    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_3_0)

 
rev_b_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000080), rs1:x21(0x0000000000000001)
    li  x21, 0x1
    rev.b x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x0000000000000080)
 
rev_b_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000040), rs1:x20(0x0000000000000002)
    li  x20, 0x2
    rev.b x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0000000000000040)
 
rev_b_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000020), rs1:x19(0x0000000000000004)
    li  x19, 0x4
    rev.b x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0000000000000020)
 
rev_b_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000010), rs1:x18(0x0000000000000008)
    li  x18, 0x8
    rev.b x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0000000000000010)
 
rev_b_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000008), rs1:x17(0x0000000000000010)
    li  x17, 0x10
    rev.b x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0000000000000008)


    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x2,signature_4_0)

 
rev_b_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000004), rs1:x16(0x0000000000000020)
    li  x16, 0x20
    rev.b x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0000000000000004)
 
rev_b_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000002), rs1:x15(0x0000000000000040)
    li  x15, 0x40
    rev.b x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x0000000000000002)
 
rev_b_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000001), rs1:x14(0x0000000000000080)
    li  x14, 0x80
    rev.b x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x0000000000000001)
 
rev_b_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0000000000008000), rs1:x13(0x0000000000000100)
    li  x13, 0x100
    rev.b x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0000000000008000)
 
rev_b_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0000000000004000), rs1:x12(0x0000000000000200)
    li  x12, 0x200
    rev.b x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0000000000004000)


    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_5_0)

 
rev_b_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x0000000000002000), rs1:x11(0x0000000000000400)
    li  x11, 0x400
    rev.b x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000000002000)
 
rev_b_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0000000000001000), rs1:x10(0x0000000000000800)
    li  x10, 0x800
    rev.b x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000000001000)
 
rev_b_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000800), rs1:x9(0x0000000000001000)
    li  x9, 0x1000
    rev.b x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000000000800)
 
rev_b_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000400), rs1:x8(0x0000000000002000)
    li  x8, 0x2000
    rev.b x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000000000400)
 
rev_b_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000200), rs1:x7(0x0000000000004000)
    li  x7, 0x4000
    rev.b x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000000000200)


    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_6_0)

 
rev_b_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000100), rs1:x6(0x0000000000008000)
    li  x6, 0x8000
    rev.b x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x0000000000000100)
 
rev_b_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x0000000000800000), rs1:x5(0x0000000000010000)
    li  x5, 0x10000
    rev.b x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000000800000)
 
rev_b_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x0000000000400000), rs1:x4(0x0000000000020000)
    li  x4, 0x20000
    rev.b x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000000400000)
 
rev_b_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0000000000200000), rs1:x3(0x0000000000040000)
    li  x3, 0x40000
    rev.b x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000000200000)
 
rev_b_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0000000000100000), rs1:x2(0x0000000000080000)
    li  x2, 0x80000
    rev.b x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000000100000)


    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x5,signature_7_0)

 
rev_b_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0000000000080000), rs1:x1(0x0000000000100000)
    li  x1, 0x100000
    rev.b x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0000000000080000)
 
rev_b_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0000000000040000), rs1:x31(0x0000000000200000)
    li  x31, 0x200000
    rev.b x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0000000000040000)
 
rev_b_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0000000000020000), rs1:x30(0x0000000000400000)
    li  x30, 0x400000
    rev.b x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0000000000020000)
 
rev_b_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0000000000010000), rs1:x29(0x0000000000800000)
    li  x29, 0x800000
    rev.b x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0000000000010000)
 
rev_b_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x0000000080000000), rs1:x28(0x0000000001000000)
    li  x28, 0x1000000
    rev.b x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0000000080000000)


    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_8_0)

 
rev_b_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x0000000040000000), rs1:x27(0x0000000002000000)
    li  x27, 0x2000000
    rev.b x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000040000000)
 
rev_b_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x0000000020000000), rs1:x26(0x0000000004000000)
    li  x26, 0x4000000
    rev.b x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000020000000)
 
rev_b_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0000000010000000), rs1:x25(0x0000000008000000)
    li  x25, 0x8000000
    rev.b x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000010000000)
 
rev_b_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0000000008000000), rs1:x24(0x0000000010000000)
    li  x24, 0x10000000
    rev.b x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000008000000)
 
rev_b_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0000000004000000), rs1:x23(0x0000000020000000)
    li  x23, 0x20000000
    rev.b x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000004000000)


    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_9_0)

 
rev_b_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x0000000002000000), rs1:x22(0x0000000040000000)
    li  x22, 0x40000000
    rev.b x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000002000000)
 
rev_b_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0000000001000000), rs1:x21(0x0000000080000000)
    li  x21, 0x80000000
    rev.b x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000001000000)
 
rev_b_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0000008000000000), rs1:x20(0x0000000100000000)
    li  x20, 0x100000000
    rev.b x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000008000000000)
 
rev_b_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x0000004000000000), rs1:x19(0x0000000200000000)
    li  x19, 0x200000000
    rev.b x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000004000000000)
 
rev_b_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x0000002000000000), rs1:x18(0x0000000400000000)
    li  x18, 0x400000000
    rev.b x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x0000002000000000)


    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x3,signature_10_0)

 
rev_b_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x0000001000000000), rs1:x17(0x0000000800000000)
    li  x17, 0x800000000
    rev.b x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x0000001000000000)
 
rev_b_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0000000800000000), rs1:x16(0x0000001000000000)
    li  x16, 0x1000000000
    rev.b x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0000000800000000)
 
rev_b_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0000000400000000), rs1:x15(0x0000002000000000)
    li  x15, 0x2000000000
    rev.b x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x0000000400000000)
 
rev_b_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x0000000200000000), rs1:x14(0x0000004000000000)
    li  x14, 0x4000000000
    rev.b x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x0000000200000000)
 
rev_b_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000000100000000), rs1:x13(0x0000008000000000)
    li  x13, 0x8000000000
    rev.b x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000000100000000)


    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_11_0)

 
rev_b_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0000800000000000), rs1:x12(0x0000010000000000)
    li  x12, 0x10000000000
    rev.b x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0000800000000000)
 
rev_b_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000400000000000), rs1:x11(0x0000020000000000)
    li  x11, 0x20000000000
    rev.b x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000400000000000)
 
rev_b_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000200000000000), rs1:x10(0x0000040000000000)
    li  x10, 0x40000000000
    rev.b x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000200000000000)
 
rev_b_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000100000000000), rs1:x9(0x0000080000000000)
    li  x9, 0x80000000000
    rev.b x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000100000000000)
 
rev_b_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000080000000000), rs1:x8(0x0000100000000000)
    li  x8, 0x100000000000
    rev.b x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000080000000000)


    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_12_0)

 
rev_b_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0000040000000000), rs1:x7(0x0000200000000000)
    li  x7, 0x200000000000
    rev.b x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000040000000000)
 
rev_b_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x0000020000000000), rs1:x6(0x0000400000000000)
    li  x6, 0x400000000000
    rev.b x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000020000000000)
 
rev_b_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0000010000000000), rs1:x5(0x0000800000000000)
    li  x5, 0x800000000000
    rev.b x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x0000010000000000)
 
rev_b_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0080000000000000), rs1:x4(0x0001000000000000)
    li  x4, 0x1000000000000
    rev.b x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x0080000000000000)
 
rev_b_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0040000000000000), rs1:x3(0x0002000000000000)
    li  x3, 0x2000000000000
    rev.b x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x0040000000000000)


    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x4,signature_13_0)

 
rev_b_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0020000000000000), rs1:x2(0x0004000000000000)
    li  x2, 0x4000000000000
    rev.b x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x0020000000000000)
 
rev_b_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0010000000000000), rs1:x1(0x0008000000000000)
    li  x1, 0x8000000000000
    rev.b x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x0010000000000000)
 
rev_b_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0008000000000000), rs1:x31(0x0010000000000000)
    li  x31, 0x10000000000000
    rev.b x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x0008000000000000)
 
rev_b_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0004000000000000), rs1:x30(0x0020000000000000)
    li  x30, 0x20000000000000
    rev.b x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x0004000000000000)
 
rev_b_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0002000000000000), rs1:x29(0x0040000000000000)
    li  x29, 0x40000000000000
    rev.b x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x0002000000000000)


    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_14_0)

 
rev_b_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0001000000000000), rs1:x28(0x0080000000000000)
    li  x28, 0x80000000000000
    rev.b x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x0001000000000000)
 
rev_b_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x8000000000000000), rs1:x27(0x0100000000000000)
    li  x27, 0x100000000000000
    rev.b x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x8000000000000000)
 
rev_b_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x4000000000000000), rs1:x26(0x0200000000000000)
    li  x26, 0x200000000000000
    rev.b x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x4000000000000000)
 
rev_b_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x2000000000000000), rs1:x25(0x0400000000000000)
    li  x25, 0x400000000000000
    rev.b x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x2000000000000000)
 
rev_b_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x1000000000000000), rs1:x24(0x0800000000000000)
    li  x24, 0x800000000000000
    rev.b x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x1000000000000000)


    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_15_0)

 
rev_b_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x0800000000000000), rs1:x23(0x1000000000000000)
    li  x23, 0x1000000000000000
    rev.b x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0800000000000000)
 
rev_b_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x0400000000000000), rs1:x22(0x2000000000000000)
    li  x22, 0x2000000000000000
    rev.b x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0400000000000000)
 
rev_b_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x0200000000000000), rs1:x21(0x4000000000000000)
    li  x21, 0x4000000000000000
    rev.b x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0200000000000000)
 
rev_b_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x0100000000000000), rs1:x20(0x8000000000000000)
    li  x20, 0x8000000000000000
    rev.b x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0100000000000000)
 
rev_b_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000)
    li  x19, 0x0
    rev.b x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)


    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x4,signature_16_0)

 
rev_b_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffff7f), rs1:x18(0xfffffffffffffffe)
    li  x18, 0xfffffffffffffffe
    rev.b x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0xffffffffffffff7f)
 
rev_b_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffbf), rs1:x17(0xfffffffffffffffd)
    li  x17, 0xfffffffffffffffd
    rev.b x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0xffffffffffffffbf)
 
rev_b_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffdf), rs1:x16(0xfffffffffffffffb)
    li  x16, 0xfffffffffffffffb
    rev.b x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0xffffffffffffffdf)
 
rev_b_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffffffef), rs1:x15(0xfffffffffffffff7)
    li  x15, 0xfffffffffffffff7
    rev.b x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0xffffffffffffffef)
 
rev_b_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0xfffffffffffffff7), rs1:x14(0xffffffffffffffef)
    li  x14, 0xffffffffffffffef
    rev.b x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0xfffffffffffffff7)


    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_17_0)

 
rev_b_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0xfffffffffffffffb), rs1:x13(0xffffffffffffffdf)
    li  x13, 0xffffffffffffffdf
    rev.b x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0xfffffffffffffffb)
 
rev_b_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0xfffffffffffffffd), rs1:x12(0xffffffffffffffbf)
    li  x12, 0xffffffffffffffbf
    rev.b x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xfffffffffffffffd)
 
rev_b_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0xfffffffffffffffe), rs1:x11(0xffffffffffffff7f)
    li  x11, 0xffffffffffffff7f
    rev.b x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xfffffffffffffffe)
 
rev_b_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffff7fff), rs1:x10(0xfffffffffffffeff)
    li  x10, 0xfffffffffffffeff
    rev.b x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xffffffffffff7fff)
 
rev_b_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffffbfff), rs1:x9(0xfffffffffffffdff)
    li  x9, 0xfffffffffffffdff
    rev.b x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xffffffffffffbfff)


    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_18_0)

 
rev_b_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffdfff), rs1:x8(0xfffffffffffffbff)
    li  x8, 0xfffffffffffffbff
    rev.b x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xffffffffffffdfff)
 
rev_b_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffefff), rs1:x7(0xfffffffffffff7ff)
    li  x7, 0xfffffffffffff7ff
    rev.b x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xffffffffffffefff)
 
rev_b_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0xfffffffffffff7ff), rs1:x6(0xffffffffffffefff)
    li  x6, 0xffffffffffffefff
    rev.b x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0xfffffffffffff7ff)
 
rev_b_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0xfffffffffffffbff), rs1:x5(0xffffffffffffdfff)
    li  x5, 0xffffffffffffdfff
    rev.b x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0xfffffffffffffbff)
 
rev_b_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0xfffffffffffffdff), rs1:x4(0xffffffffffffbfff)
    li  x4, 0xffffffffffffbfff
    rev.b x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0xfffffffffffffdff)


    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x4,signature_19_0)

 
rev_b_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0xfffffffffffffeff), rs1:x3(0xffffffffffff7fff)
    li  x3, 0xffffffffffff7fff
    rev.b x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0xfffffffffffffeff)
 
rev_b_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0xffffffffff7fffff), rs1:x2(0xfffffffffffeffff)
    li  x2, 0xfffffffffffeffff
    rev.b x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0xffffffffff7fffff)
 
rev_b_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffbfffff), rs1:x1(0xfffffffffffdffff)
    li  x1, 0xfffffffffffdffff
    rev.b x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0xffffffffffbfffff)
 
rev_b_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffdfffff), rs1:x31(0xfffffffffffbffff)
    li  x31, 0xfffffffffffbffff
    rev.b x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0xffffffffffdfffff)
 
rev_b_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffefffff), rs1:x30(0xfffffffffff7ffff)
    li  x30, 0xfffffffffff7ffff
    rev.b x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0xffffffffffefffff)


    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_20_0)

 
rev_b_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0xfffffffffff7ffff), rs1:x29(0xffffffffffefffff)
    li  x29, 0xffffffffffefffff
    rev.b x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0xfffffffffff7ffff)
 
rev_b_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0xfffffffffffbffff), rs1:x28(0xffffffffffdfffff)
    li  x28, 0xffffffffffdfffff
    rev.b x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0xfffffffffffbffff)
 
rev_b_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0xfffffffffffdffff), rs1:x27(0xffffffffffbfffff)
    li  x27, 0xffffffffffbfffff
    rev.b x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0xfffffffffffdffff)
 
rev_b_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0xfffffffffffeffff), rs1:x26(0xffffffffff7fffff)
    li  x26, 0xffffffffff7fffff
    rev.b x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xfffffffffffeffff)
 
rev_b_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0xffffffff7fffffff), rs1:x25(0xfffffffffeffffff)
    li  x25, 0xfffffffffeffffff
    rev.b x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xffffffff7fffffff)


    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_21_0)

 
rev_b_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0xffffffffbfffffff), rs1:x24(0xfffffffffdffffff)
    li  x24, 0xfffffffffdffffff
    rev.b x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xffffffffbfffffff)
 
rev_b_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0xffffffffdfffffff), rs1:x23(0xfffffffffbffffff)
    li  x23, 0xfffffffffbffffff
    rev.b x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xffffffffdfffffff)
 
rev_b_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0xffffffffefffffff), rs1:x22(0xfffffffff7ffffff)
    li  x22, 0xfffffffff7ffffff
    rev.b x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xffffffffefffffff)
 
rev_b_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0xfffffffff7ffffff), rs1:x21(0xffffffffefffffff)
    li  x21, 0xffffffffefffffff
    rev.b x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xfffffffff7ffffff)
 
rev_b_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0xfffffffffbffffff), rs1:x20(0xffffffffdfffffff)
    li  x20, 0xffffffffdfffffff
    rev.b x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0xfffffffffbffffff)


    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x5,signature_22_0)

 
rev_b_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0xfffffffffdffffff), rs1:x19(0xffffffffbfffffff)
    li  x19, 0xffffffffbfffffff
    rev.b x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0xfffffffffdffffff)
 
rev_b_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0xfffffffffeffffff), rs1:x18(0xffffffff7fffffff)
    li  x18, 0xffffffff7fffffff
    rev.b x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0xfffffffffeffffff)
 
rev_b_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0xffffff7fffffffff), rs1:x17(0xfffffffeffffffff)
    li  x17, 0xfffffffeffffffff
    rev.b x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0xffffff7fffffffff)
 
rev_b_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0xffffffbfffffffff), rs1:x16(0xfffffffdffffffff)
    li  x16, 0xfffffffdffffffff
    rev.b x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0xffffffbfffffffff)
 
rev_b_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0xffffffdfffffffff), rs1:x15(0xfffffffbffffffff)
    li  x15, 0xfffffffbffffffff
    rev.b x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0xffffffdfffffffff)


    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_23_0)

 
rev_b_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0xffffffefffffffff), rs1:x14(0xfffffff7ffffffff)
    li  x14, 0xfffffff7ffffffff
    rev.b x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0xffffffefffffffff)
 
rev_b_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0xfffffff7ffffffff), rs1:x13(0xffffffefffffffff)
    li  x13, 0xffffffefffffffff
    rev.b x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0xfffffff7ffffffff)
 
rev_b_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0xfffffffbffffffff), rs1:x12(0xffffffdfffffffff)
    li  x12, 0xffffffdfffffffff
    rev.b x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xfffffffbffffffff)
 
rev_b_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0xfffffffdffffffff), rs1:x11(0xffffffbfffffffff)
    li  x11, 0xffffffbfffffffff
    rev.b x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xfffffffdffffffff)
 
rev_b_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0xfffffffeffffffff), rs1:x10(0xffffff7fffffffff)
    li  x10, 0xffffff7fffffffff
    rev.b x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xfffffffeffffffff)


    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_24_0)

 
rev_b_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0xffff7fffffffffff), rs1:x9(0xfffffeffffffffff)
    li  x9, 0xfffffeffffffffff
    rev.b x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xffff7fffffffffff)
 
rev_b_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0xffffbfffffffffff), rs1:x8(0xfffffdffffffffff)
    li  x8, 0xfffffdffffffffff
    rev.b x24, x8
    sd x24, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xffffbfffffffffff)
 
rev_b_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0xffffdfffffffffff), rs1:x7(0xfffffbffffffffff)
    li  x7, 0xfffffbffffffffff
    rev.b x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xffffdfffffffffff)
 
rev_b_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0xffffefffffffffff), rs1:x6(0xfffff7ffffffffff)
    li  x6, 0xfffff7ffffffffff
    rev.b x26, x6
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0xffffefffffffffff)
 
rev_b_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0xfffff7ffffffffff), rs1:x5(0xffffefffffffffff)
    li  x5, 0xffffefffffffffff
    rev.b x27, x5
    sd x27, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0xfffff7ffffffffff)


    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x5,signature_25_0)

 
rev_b_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0xfffffbffffffffff), rs1:x4(0xffffdfffffffffff)
    li  x4, 0xffffdfffffffffff
    rev.b x28, x4
    sd x28, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x28, 0xfffffbffffffffff)
 
rev_b_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0xfffffdffffffffff), rs1:x3(0xffffbfffffffffff)
    li  x3, 0xffffbfffffffffff
    rev.b x29, x3
    sd x29, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x29, 0xfffffdffffffffff)
 
rev_b_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0xfffffeffffffffff), rs1:x2(0xffff7fffffffffff)
    li  x2, 0xffff7fffffffffff
    rev.b x30, x2
    sd x30, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x30, 0xfffffeffffffffff)
 
rev_b_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0xff7fffffffffffff), rs1:x1(0xfffeffffffffffff)
    li  x1, 0xfffeffffffffffff
    rev.b x31, x1
    sd x31, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0xff7fffffffffffff)
 
rev_b_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0xffbfffffffffffff), rs1:x31(0xfffdffffffffffff)
    li  x31, 0xfffdffffffffffff
    rev.b x1, x31
    sd x1, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0xffbfffffffffffff)


    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_26_0)

 
rev_b_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0xffdfffffffffffff), rs1:x30(0xfffbffffffffffff)
    li  x30, 0xfffbffffffffffff
    rev.b x2, x30
    sd x2, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0xffdfffffffffffff)
 
rev_b_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0xffefffffffffffff), rs1:x29(0xfff7ffffffffffff)
    li  x29, 0xfff7ffffffffffff
    rev.b x3, x29
    sd x3, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0xffefffffffffffff)
 
rev_b_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0xfff7ffffffffffff), rs1:x28(0xffefffffffffffff)
    li  x28, 0xffefffffffffffff
    rev.b x4, x28
    sd x4, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0xfff7ffffffffffff)
 
rev_b_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0xfffbffffffffffff), rs1:x27(0xffdfffffffffffff)
    li  x27, 0xffdfffffffffffff
    rev.b x5, x27
    sd x5, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0xfffbffffffffffff)
 
rev_b_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0xfffdffffffffffff), rs1:x26(0xffbfffffffffffff)
    li  x26, 0xffbfffffffffffff
    rev.b x6, x26
    sd x6, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x6, 0xfffdffffffffffff)


    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_27_0)

 
rev_b_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0xfffeffffffffffff), rs1:x25(0xff7fffffffffffff)
    li  x25, 0xff7fffffffffffff
    rev.b x7, x25
    sd x7, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xfffeffffffffffff)
 
rev_b_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0x7fffffffffffffff), rs1:x24(0xfeffffffffffffff)
    li  x24, 0xfeffffffffffffff
    rev.b x8, x24
    sd x8, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x7fffffffffffffff)
 
rev_b_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0xbfffffffffffffff), rs1:x23(0xfdffffffffffffff)
    li  x23, 0xfdffffffffffffff
    rev.b x9, x23
    sd x9, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xbfffffffffffffff)
 
rev_b_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0xdfffffffffffffff), rs1:x22(0xfbffffffffffffff)
    li  x22, 0xfbffffffffffffff
    rev.b x10, x22
    sd x10, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xdfffffffffffffff)
 
rev_b_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0xefffffffffffffff), rs1:x21(0xf7ffffffffffffff)
    li  x21, 0xf7ffffffffffffff
    rev.b x11, x21
    sd x11, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xefffffffffffffff)


    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x6,signature_28_0)

 
rev_b_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0xf7ffffffffffffff), rs1:x20(0xefffffffffffffff)
    li  x20, 0xefffffffffffffff
    rev.b x12, x20
    sd x12, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0xf7ffffffffffffff)
 
rev_b_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0xfbffffffffffffff), rs1:x19(0xdfffffffffffffff)
    li  x19, 0xdfffffffffffffff
    rev.b x13, x19
    sd x13, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0xfbffffffffffffff)
 
rev_b_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0xfdffffffffffffff), rs1:x18(0xbfffffffffffffff)
    li  x18, 0xbfffffffffffffff
    rev.b x14, x18
    sd x14, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0xfdffffffffffffff)
 
rev_b_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0xfeffffffffffffff), rs1:x17(0x7fffffffffffffff)
    li  x17, 0x7fffffffffffffff
    rev.b x15, x17
    sd x15, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0xfeffffffffffffff)
 
rev_b_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xffffffffffffffff)
    li  x16, 0xffffffffffffffff
    rev.b x16, x16
    sd x16, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x16, 0xffffffffffffffff)


    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_29_0)

 
rev_b_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000080), rs1:x15(0x0000000000000001)
    li  x15, 0x1
    rev.b x17, x15
    sd x17, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x17, 0x0000000000000080)
 
rev_b_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000040), rs1:x14(0x0000000000000002)
    li  x14, 0x2
    rev.b x18, x14
    sd x18, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x0000000000000040)
 
rev_b_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000020), rs1:x13(0x0000000000000004)
    li  x13, 0x4
    rev.b x19, x13
    sd x19, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x0000000000000020)
 
rev_b_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000010), rs1:x12(0x0000000000000008)
    li  x12, 0x8
    rev.b x20, x12
    sd x20, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0000000000000010)
 
rev_b_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000008), rs1:x11(0x0000000000000010)
    li  x11, 0x10
    rev.b x21, x11
    sd x21, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000000000008)


    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_30_0)

 
rev_b_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000004), rs1:x10(0x0000000000000020)
    li  x10, 0x20
    rev.b x22, x10
    sd x22, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000000000004)
 
rev_b_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000002), rs1:x9(0x0000000000000040)
    li  x9, 0x40
    rev.b x23, x9
    sd x23, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000000000002)
 
rev_b_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000001), rs1:x8(0x0000000000000080)
    li  x8, 0x80
    rev.b x24, x8
    sd x24, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000000000001)
 
rev_b_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000000008000), rs1:x7(0x0000000000000100)
    li  x7, 0x100
    rev.b x25, x7
    sd x25, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000000008000)
 
rev_b_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000000004000), rs1:x6(0x0000000000000200)
    li  x6, 0x200
    rev.b x26, x6
    sd x26, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000004000)


    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x6,signature_31_0)

 
rev_b_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000000000002000), rs1:x5(0x0000000000000400)
    li  x5, 0x400
    rev.b x27, x5
    sd x27, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000000002000)
 
rev_b_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000000001000), rs1:x4(0x0000000000000800)
    li  x4, 0x800
    rev.b x28, x4
    sd x28, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000000001000)
 
rev_b_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000800), rs1:x3(0x0000000000001000)
    li  x3, 0x1000
    rev.b x29, x3
    sd x29, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000000000800)
 
rev_b_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000400), rs1:x2(0x0000000000002000)
    li  x2, 0x2000
    rev.b x30, x2
    sd x30, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000000000400)
 
rev_b_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000200), rs1:x1(0x0000000000004000)
    li  x1, 0x4000
    rev.b x31, x1
    sd x31, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x0000000000000200)


    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x6,signature_32_0)

 
rev_b_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000100), rs1:x31(0x0000000000008000)
    li  x31, 0x8000
    rev.b x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x0000000000000100)
 
rev_b_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000000000800000), rs1:x30(0x0000000000010000)
    li  x30, 0x10000
    rev.b x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x0000000000800000)
 
rev_b_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000000400000), rs1:x29(0x0000000000020000)
    li  x29, 0x20000
    rev.b x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x0000000000400000)
 
rev_b_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000000200000), rs1:x28(0x0000000000040000)
    li  x28, 0x40000
    rev.b x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x0000000000200000)
 
rev_b_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000000100000), rs1:x27(0x0000000000080000)
    li  x27, 0x80000
    rev.b x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x0000000000100000)


    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_33_0)

 
rev_b_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000000080000), rs1:x26(0x0000000000100000)
    li  x26, 0x100000
    rev.b x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000080000)
 
rev_b_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000000040000), rs1:x25(0x0000000000200000)
    li  x25, 0x200000
    rev.b x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000000040000)
 
rev_b_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000000020000), rs1:x24(0x0000000000400000)
    li  x24, 0x400000
    rev.b x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000000020000)
 
rev_b_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000000010000), rs1:x23(0x0000000000800000)
    li  x23, 0x800000
    rev.b x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000010000)
 
rev_b_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000080000000), rs1:x22(0x0000000001000000)
    li  x22, 0x1000000
    rev.b x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000080000000)


    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_34_0)

 
rev_b_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000040000000), rs1:x21(0x0000000002000000)
    li  x21, 0x2000000
    rev.b x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x0000000040000000)
 
rev_b_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000020000000), rs1:x20(0x0000000004000000)
    li  x20, 0x4000000
    rev.b x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0000000020000000)
 
rev_b_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000010000000), rs1:x19(0x0000000008000000)
    li  x19, 0x8000000
    rev.b x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0000000010000000)
 
rev_b_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000008000000), rs1:x18(0x0000000010000000)
    li  x18, 0x10000000
    rev.b x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0000000008000000)
 
rev_b_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000004000000), rs1:x17(0x0000000020000000)
    li  x17, 0x20000000
    rev.b x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0000000004000000)


    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x2,signature_35_0)

 
rev_b_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000002000000), rs1:x16(0x0000000040000000)
    li  x16, 0x40000000
    rev.b x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0000000002000000)
 
rev_b_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000000001000000), rs1:x15(0x0000000080000000)
    li  x15, 0x80000000
    rev.b x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x0000000001000000)
 
rev_b_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000008000000000), rs1:x14(0x0000000100000000)
    li  x14, 0x100000000
    rev.b x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x0000008000000000)
 
rev_b_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000004000000000), rs1:x13(0x0000000200000000)
    li  x13, 0x200000000
    rev.b x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0000004000000000)
 
rev_b_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000002000000000), rs1:x12(0x0000000400000000)
    li  x12, 0x400000000
    rev.b x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0000002000000000)


    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_36_0)

 
rev_b_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000001000000000), rs1:x11(0x0000000800000000)
    li  x11, 0x800000000
    rev.b x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000001000000000)
 
rev_b_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000000800000000), rs1:x10(0x0000001000000000)
    li  x10, 0x1000000000
    rev.b x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000800000000)
 
rev_b_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000000400000000), rs1:x9(0x0000002000000000)
    li  x9, 0x2000000000
    rev.b x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000400000000)
 
rev_b_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000000200000000), rs1:x8(0x0000004000000000)
    li  x8, 0x4000000000
    rev.b x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000200000000)
 
rev_b_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000000100000000), rs1:x7(0x0000008000000000)
    li  x7, 0x8000000000
    rev.b x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000100000000)


    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_37_0)

 
rev_b_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000800000000000), rs1:x6(0x0000010000000000)
    li  x6, 0x10000000000
    rev.b x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x0000800000000000)
 
rev_b_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000400000000000), rs1:x5(0x0000020000000000)
    li  x5, 0x20000000000
    rev.b x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000400000000000)
 
rev_b_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000200000000000), rs1:x4(0x0000040000000000)
    li  x4, 0x40000000000
    rev.b x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000200000000000)
 
rev_b_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000100000000000), rs1:x3(0x0000080000000000)
    li  x3, 0x80000000000
    rev.b x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000100000000000)
 
rev_b_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000080000000000), rs1:x2(0x0000100000000000)
    li  x2, 0x100000000000
    rev.b x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000080000000000)


    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x5,signature_38_0)

 
rev_b_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000040000000000), rs1:x1(0x0000200000000000)
    li  x1, 0x200000000000
    rev.b x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0000040000000000)
 
rev_b_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000020000000000), rs1:x31(0x0000400000000000)
    li  x31, 0x400000000000
    rev.b x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0000020000000000)
 
rev_b_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000010000000000), rs1:x30(0x0000800000000000)
    li  x30, 0x800000000000
    rev.b x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0000010000000000)
 
rev_b_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0080000000000000), rs1:x29(0x0001000000000000)
    li  x29, 0x1000000000000
    rev.b x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0080000000000000)
 
rev_b_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0040000000000000), rs1:x28(0x0002000000000000)
    li  x28, 0x2000000000000
    rev.b x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0040000000000000)


    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_39_0)

 
rev_b_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0020000000000000), rs1:x27(0x0004000000000000)
    li  x27, 0x4000000000000
    rev.b x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0020000000000000)
 
rev_b_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0010000000000000), rs1:x26(0x0008000000000000)
    li  x26, 0x8000000000000
    rev.b x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0010000000000000)
 
rev_b_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0008000000000000), rs1:x25(0x0010000000000000)
    li  x25, 0x10000000000000
    rev.b x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0008000000000000)
 
rev_b_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0004000000000000), rs1:x24(0x0020000000000000)
    li  x24, 0x20000000000000
    rev.b x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0004000000000000)
 
rev_b_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0002000000000000), rs1:x23(0x0040000000000000)
    li  x23, 0x40000000000000
    rev.b x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0002000000000000)


    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_40_0)

 
rev_b_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0001000000000000), rs1:x22(0x0080000000000000)
    li  x22, 0x80000000000000
    rev.b x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0001000000000000)
 
rev_b_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x8000000000000000), rs1:x21(0x0100000000000000)
    li  x21, 0x100000000000000
    rev.b x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x8000000000000000)
 
rev_b_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x4000000000000000), rs1:x20(0x0200000000000000)
    li  x20, 0x200000000000000
    rev.b x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x4000000000000000)
 
rev_b_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x2000000000000000), rs1:x19(0x0400000000000000)
    li  x19, 0x400000000000000
    rev.b x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x2000000000000000)
 
rev_b_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x1000000000000000), rs1:x18(0x0800000000000000)
    li  x18, 0x800000000000000
    rev.b x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x1000000000000000)


    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x3,signature_41_0)

 
rev_b_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x0800000000000000), rs1:x17(0x1000000000000000)
    li  x17, 0x1000000000000000
    rev.b x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x0800000000000000)
 
rev_b_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x0400000000000000), rs1:x16(0x2000000000000000)
    li  x16, 0x2000000000000000
    rev.b x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0400000000000000)
 
rev_b_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x0200000000000000), rs1:x15(0x4000000000000000)
    li  x15, 0x4000000000000000
    rev.b x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x0200000000000000)
 
rev_b_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x0100000000000000), rs1:x14(0x8000000000000000)
    li  x14, 0x8000000000000000
    rev.b x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x0100000000000000)
 
rev_b_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000)
    li  x13, 0x0
    rev.b x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000000000000000)


    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_42_0)

 
rev_b_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffff7f), rs1:x12(0xfffffffffffffffe)
    li  x12, 0xfffffffffffffffe
    rev.b x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xffffffffffffff7f)
 
rev_b_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffbf), rs1:x11(0xfffffffffffffffd)
    li  x11, 0xfffffffffffffffd
    rev.b x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xffffffffffffffbf)
 
rev_b_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffdf), rs1:x10(0xfffffffffffffffb)
    li  x10, 0xfffffffffffffffb
    rev.b x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xffffffffffffffdf)
 
rev_b_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffffffef), rs1:x9(0xfffffffffffffff7)
    li  x9, 0xfffffffffffffff7
    rev.b x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xffffffffffffffef)
 
rev_b_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0xfffffffffffffff7), rs1:x8(0xffffffffffffffef)
    li  x8, 0xffffffffffffffef
    rev.b x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xfffffffffffffff7)


    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_43_0)

 
rev_b_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0xfffffffffffffffb), rs1:x7(0xffffffffffffffdf)
    li  x7, 0xffffffffffffffdf
    rev.b x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xfffffffffffffffb)
 
rev_b_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0xfffffffffffffffd), rs1:x6(0xffffffffffffffbf)
    li  x6, 0xffffffffffffffbf
    rev.b x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0xfffffffffffffffd)
 
rev_b_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0xfffffffffffffffe), rs1:x5(0xffffffffffffff7f)
    li  x5, 0xffffffffffffff7f
    rev.b x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0xfffffffffffffffe)
 
rev_b_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffff7fff), rs1:x4(0xfffffffffffffeff)
    li  x4, 0xfffffffffffffeff
    rev.b x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0xffffffffffff7fff)
 
rev_b_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffbfff), rs1:x3(0xfffffffffffffdff)
    li  x3, 0xfffffffffffffdff
    rev.b x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0xffffffffffffbfff)


    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x4,signature_44_0)

 
rev_b_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffdfff), rs1:x2(0xfffffffffffffbff)
    li  x2, 0xfffffffffffffbff
    rev.b x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0xffffffffffffdfff)
 
rev_b_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffefff), rs1:x1(0xfffffffffffff7ff)
    li  x1, 0xfffffffffffff7ff
    rev.b x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0xffffffffffffefff)
 
rev_b_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0xfffffffffffff7ff), rs1:x31(0xffffffffffffefff)
    li  x31, 0xffffffffffffefff
    rev.b x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0xfffffffffffff7ff)
 
rev_b_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0xfffffffffffffbff), rs1:x30(0xffffffffffffdfff)
    li  x30, 0xffffffffffffdfff
    rev.b x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0xfffffffffffffbff)
 
rev_b_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0xfffffffffffffdff), rs1:x29(0xffffffffffffbfff)
    li  x29, 0xffffffffffffbfff
    rev.b x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0xfffffffffffffdff)


    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_45_0)

 
rev_b_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0xfffffffffffffeff), rs1:x28(0xffffffffffff7fff)
    li  x28, 0xffffffffffff7fff
    rev.b x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0xfffffffffffffeff)
 
rev_b_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0xffffffffff7fffff), rs1:x27(0xfffffffffffeffff)
    li  x27, 0xfffffffffffeffff
    rev.b x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0xffffffffff7fffff)
 
rev_b_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffbfffff), rs1:x26(0xfffffffffffdffff)
    li  x26, 0xfffffffffffdffff
    rev.b x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xffffffffffbfffff)
 
rev_b_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffdfffff), rs1:x25(0xfffffffffffbffff)
    li  x25, 0xfffffffffffbffff
    rev.b x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xffffffffffdfffff)
 
rev_b_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffefffff), rs1:x24(0xfffffffffff7ffff)
    li  x24, 0xfffffffffff7ffff
    rev.b x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xffffffffffefffff)


    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_46_0)

 
rev_b_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0xfffffffffff7ffff), rs1:x23(0xffffffffffefffff)
    li  x23, 0xffffffffffefffff
    rev.b x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xfffffffffff7ffff)
 
rev_b_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0xfffffffffffbffff), rs1:x22(0xffffffffffdfffff)
    li  x22, 0xffffffffffdfffff
    rev.b x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xfffffffffffbffff)
 
rev_b_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0xfffffffffffdffff), rs1:x21(0xffffffffffbfffff)
    li  x21, 0xffffffffffbfffff
    rev.b x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xfffffffffffdffff)
 
rev_b_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0xfffffffffffeffff), rs1:x20(0xffffffffff7fffff)
    li  x20, 0xffffffffff7fffff
    rev.b x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0xfffffffffffeffff)
 
rev_b_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0xffffffff7fffffff), rs1:x19(0xfffffffffeffffff)
    li  x19, 0xfffffffffeffffff
    rev.b x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0xffffffff7fffffff)


    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x4,signature_47_0)

 
rev_b_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0xffffffffbfffffff), rs1:x18(0xfffffffffdffffff)
    li  x18, 0xfffffffffdffffff
    rev.b x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0xffffffffbfffffff)
 
rev_b_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0xffffffffdfffffff), rs1:x17(0xfffffffffbffffff)
    li  x17, 0xfffffffffbffffff
    rev.b x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0xffffffffdfffffff)
 
rev_b_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0xffffffffefffffff), rs1:x16(0xfffffffff7ffffff)
    li  x16, 0xfffffffff7ffffff
    rev.b x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0xffffffffefffffff)
 
rev_b_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0xfffffffff7ffffff), rs1:x15(0xffffffffefffffff)
    li  x15, 0xffffffffefffffff
    rev.b x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0xfffffffff7ffffff)
 
rev_b_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0xfffffffffbffffff), rs1:x14(0xffffffffdfffffff)
    li  x14, 0xffffffffdfffffff
    rev.b x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0xfffffffffbffffff)


    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_48_0)

 
rev_b_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0xfffffffffdffffff), rs1:x13(0xffffffffbfffffff)
    li  x13, 0xffffffffbfffffff
    rev.b x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0xfffffffffdffffff)
 
rev_b_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0xfffffffffeffffff), rs1:x12(0xffffffff7fffffff)
    li  x12, 0xffffffff7fffffff
    rev.b x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xfffffffffeffffff)
 
rev_b_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0xffffff7fffffffff), rs1:x11(0xfffffffeffffffff)
    li  x11, 0xfffffffeffffffff
    rev.b x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xffffff7fffffffff)
 
rev_b_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0xffffffbfffffffff), rs1:x10(0xfffffffdffffffff)
    li  x10, 0xfffffffdffffffff
    rev.b x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xffffffbfffffffff)
 
rev_b_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0xffffffdfffffffff), rs1:x9(0xfffffffbffffffff)
    li  x9, 0xfffffffbffffffff
    rev.b x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xffffffdfffffffff)


    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_49_0)

 
rev_b_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0xffffffefffffffff), rs1:x8(0xfffffff7ffffffff)
    li  x8, 0xfffffff7ffffffff
    rev.b x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xffffffefffffffff)
 
rev_b_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0xfffffff7ffffffff), rs1:x7(0xffffffefffffffff)
    li  x7, 0xffffffefffffffff
    rev.b x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xfffffff7ffffffff)
 
rev_b_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0xfffffffbffffffff), rs1:x6(0xffffffdfffffffff)
    li  x6, 0xffffffdfffffffff
    rev.b x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0xfffffffbffffffff)
 
rev_b_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0xfffffffdffffffff), rs1:x5(0xffffffbfffffffff)
    li  x5, 0xffffffbfffffffff
    rev.b x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0xfffffffdffffffff)
 
rev_b_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0xfffffffeffffffff), rs1:x4(0xffffff7fffffffff)
    li  x4, 0xffffff7fffffffff
    rev.b x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0xfffffffeffffffff)


    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x4,signature_50_0)

 
rev_b_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0xffff7fffffffffff), rs1:x3(0xfffffeffffffffff)
    li  x3, 0xfffffeffffffffff
    rev.b x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0xffff7fffffffffff)
 
rev_b_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0xffffbfffffffffff), rs1:x2(0xfffffdffffffffff)
    li  x2, 0xfffffdffffffffff
    rev.b x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0xffffbfffffffffff)
 
rev_b_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0xffffdfffffffffff), rs1:x1(0xfffffbffffffffff)
    li  x1, 0xfffffbffffffffff
    rev.b x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0xffffdfffffffffff)
 
rev_b_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0xffffefffffffffff), rs1:x31(0xfffff7ffffffffff)
    li  x31, 0xfffff7ffffffffff
    rev.b x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0xffffefffffffffff)
 
rev_b_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0xfffff7ffffffffff), rs1:x30(0xffffefffffffffff)
    li  x30, 0xffffefffffffffff
    rev.b x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0xfffff7ffffffffff)


    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_51_0)

 
rev_b_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0xfffffbffffffffff), rs1:x29(0xffffdfffffffffff)
    li  x29, 0xffffdfffffffffff
    rev.b x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0xfffffbffffffffff)
 
rev_b_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0xfffffdffffffffff), rs1:x28(0xffffbfffffffffff)
    li  x28, 0xffffbfffffffffff
    rev.b x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0xfffffdffffffffff)
 
rev_b_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0xfffffeffffffffff), rs1:x27(0xffff7fffffffffff)
    li  x27, 0xffff7fffffffffff
    rev.b x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0xfffffeffffffffff)
 
rev_b_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0xff7fffffffffffff), rs1:x26(0xfffeffffffffffff)
    li  x26, 0xfffeffffffffffff
    rev.b x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xff7fffffffffffff)
 
rev_b_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0xffbfffffffffffff), rs1:x25(0xfffdffffffffffff)
    li  x25, 0xfffdffffffffffff
    rev.b x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xffbfffffffffffff)


    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_52_0)

 
rev_b_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0xffdfffffffffffff), rs1:x24(0xfffbffffffffffff)
    li  x24, 0xfffbffffffffffff
    rev.b x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xffdfffffffffffff)
 
rev_b_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0xffefffffffffffff), rs1:x23(0xfff7ffffffffffff)
    li  x23, 0xfff7ffffffffffff
    rev.b x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xffefffffffffffff)
 
rev_b_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0xfff7ffffffffffff), rs1:x22(0xffefffffffffffff)
    li  x22, 0xffefffffffffffff
    rev.b x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xfff7ffffffffffff)
 
rev_b_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0xfffbffffffffffff), rs1:x21(0xffdfffffffffffff)
    li  x21, 0xffdfffffffffffff
    rev.b x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xfffbffffffffffff)
 
rev_b_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0xfffdffffffffffff), rs1:x20(0xffbfffffffffffff)
    li  x20, 0xffbfffffffffffff
    rev.b x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0xfffdffffffffffff)


    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x5,signature_53_0)

 
rev_b_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0xfffeffffffffffff), rs1:x19(0xff7fffffffffffff)
    li  x19, 0xff7fffffffffffff
    rev.b x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0xfffeffffffffffff)
 
rev_b_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0x7fffffffffffffff), rs1:x18(0xfeffffffffffffff)
    li  x18, 0xfeffffffffffffff
    rev.b x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0x7fffffffffffffff)
 
rev_b_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0xbfffffffffffffff), rs1:x17(0xfdffffffffffffff)
    li  x17, 0xfdffffffffffffff
    rev.b x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0xbfffffffffffffff)
 
rev_b_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0xdfffffffffffffff), rs1:x16(0xfbffffffffffffff)
    li  x16, 0xfbffffffffffffff
    rev.b x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0xdfffffffffffffff)
 
rev_b_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0xefffffffffffffff), rs1:x15(0xf7ffffffffffffff)
    li  x15, 0xf7ffffffffffffff
    rev.b x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0xefffffffffffffff)


    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_54_0)

 
rev_b_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0xf7ffffffffffffff), rs1:x14(0xefffffffffffffff)
    li  x14, 0xefffffffffffffff
    rev.b x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0xf7ffffffffffffff)
 
rev_b_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0xfbffffffffffffff), rs1:x13(0xdfffffffffffffff)
    li  x13, 0xdfffffffffffffff
    rev.b x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0xfbffffffffffffff)
 
rev_b_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0xfdffffffffffffff), rs1:x12(0xbfffffffffffffff)
    li  x12, 0xbfffffffffffffff
    rev.b x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xfdffffffffffffff)
 
rev_b_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0xfeffffffffffffff), rs1:x11(0x7fffffffffffffff)
    li  x11, 0x7fffffffffffffff
    rev.b x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xfeffffffffffffff)
 
rev_b_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xffffffffffffffff)
    li  x10, 0xffffffffffffffff
    rev.b x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xffffffffffffffff)


    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev.b)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev.b)

    RVTEST_SIGBASE(x1,signature_55_0)

 
rev_b_01_inst_270:
    // Test 270:  Test with random values
    // result rd:x23(0x08bfbcb7b5578aa9), rs1:x9(0x10fd3dedadea5195)
    li  x9, 0x10fd3dedadea5195
    rev.b x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x08bfbcb7b5578aa9)
 
rev_b_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1)
    li  x8, 0xbd295ce2d2ffbec1
    rev.b x0, x8
    sd x0, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x0, 0x0000000000000000)
 
rev_b_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0x9326f9a0158715dd), rs1:x7(0xc9649f05a8e1a8bb)
    li  x7, 0xc9649f05a8e1a8bb
    rev.b x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x9326f9a0158715dd)
 
rev_b_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb)
    li  x0, 0x3541291848c99fcb
    rev.b x26, x0
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000000000)
	
#endif


RVTEST_CODE_END rev_b_01_code_end
RVTEST_CODE_BEGIN sha256sum0_01_init sha256sum0_01_code_begin






#ifdef TEST_CASE_1


    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x6,signature_1_0)

 
sha256sum0_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x000000004e91ad80), rs1:x31(0x10fd3dedadea5195)
    li  x31, 0x10fd3dedadea5195
    sha256sum0 x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x000000004e91ad80)
 
sha256sum0_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x000000007c4a7f06), rs1:x30(0xbd295ce2d2ffbec1)
    li  x30, 0xbd295ce2d2ffbec1
    sha256sum0 x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x000000007c4a7f06)
 
sha256sum0_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0x000000002947c380), rs1:x29(0xc9649f05a8e1a8bb)
    li  x29, 0xc9649f05a8e1a8bb
    sha256sum0 x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x000000002947c380)
 
sha256sum0_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x000000000a170c9d), rs1:x28(0x3541291848c99fcb)
    li  x28, 0x3541291848c99fcb
    sha256sum0 x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x000000000a170c9d)
 
sha256sum0_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x0000000036b45961), rs1:x27(0x10a24740461d524f)
    li  x27, 0x10a24740461d524f
    sha256sum0 x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x0000000036b45961)


    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_2_0)

 
sha256sum0_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x00000000799aad31), rs1:x26(0x546b0e54528a10af)
    li  x26, 0x546b0e54528a10af
    sha256sum0 x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x00000000799aad31)
 
sha256sum0_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x000000004996fda9), rs1:x25(0x73a92fd4e19bfbc3)
    li  x25, 0x73a92fd4e19bfbc3
    sha256sum0 x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x000000004996fda9)
 
sha256sum0_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x0000000061d63ea6), rs1:x24(0x82f6747f707af2c0)
    li  x24, 0x82f6747f707af2c0
    sha256sum0 x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000061d63ea6)
 
sha256sum0_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0x000000009f83096f), rs1:x23(0xf5adb41aa47d105b)
    li  x23, 0xf5adb41aa47d105b
    sha256sum0 x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x000000009f83096f)
 
sha256sum0_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0x00000000caaeef9e), rs1:x22(0xdf7f3844121bcc23)
    li  x22, 0xdf7f3844121bcc23
    sha256sum0 x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000caaeef9e)


    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_3_0)

 
sha256sum0_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x0000000040080400), rs1:x21(0x0000000000000001)
    li  x21, 0x1
    sha256sum0 x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x0000000040080400)
 
sha256sum0_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x0000000080100800), rs1:x20(0x0000000000000002)
    li  x20, 0x2
    sha256sum0 x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0000000080100800)
 
sha256sum0_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x0000000000201001), rs1:x19(0x0000000000000004)
    li  x19, 0x4
    sha256sum0 x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0000000000201001)
 
sha256sum0_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0000000000402002), rs1:x18(0x0000000000000008)
    li  x18, 0x8
    sha256sum0 x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0000000000402002)
 
sha256sum0_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x0000000000804004), rs1:x17(0x0000000000000010)
    li  x17, 0x10
    sha256sum0 x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0000000000804004)


    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x2,signature_4_0)

 
sha256sum0_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x0000000001008008), rs1:x16(0x0000000000000020)
    li  x16, 0x20
    sha256sum0 x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0000000001008008)
 
sha256sum0_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x0000000002010010), rs1:x15(0x0000000000000040)
    li  x15, 0x40
    sha256sum0 x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x0000000002010010)
 
sha256sum0_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x0000000004020020), rs1:x14(0x0000000000000080)
    li  x14, 0x80
    sha256sum0 x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x0000000004020020)
 
sha256sum0_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0000000008040040), rs1:x13(0x0000000000000100)
    li  x13, 0x100
    sha256sum0 x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0000000008040040)
 
sha256sum0_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0000000010080080), rs1:x12(0x0000000000000200)
    li  x12, 0x200
    sha256sum0 x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0000000010080080)


    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_5_0)

 
sha256sum0_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x0000000020100100), rs1:x11(0x0000000000000400)
    li  x11, 0x400
    sha256sum0 x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000020100100)
 
sha256sum0_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0000000040200200), rs1:x10(0x0000000000000800)
    li  x10, 0x800
    sha256sum0 x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000040200200)
 
sha256sum0_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x0000000080400400), rs1:x9(0x0000000000001000)
    li  x9, 0x1000
    sha256sum0 x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000080400400)
 
sha256sum0_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0000000000800801), rs1:x8(0x0000000000002000)
    li  x8, 0x2000
    sha256sum0 x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000000800801)
 
sha256sum0_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x0000000001001002), rs1:x7(0x0000000000004000)
    li  x7, 0x4000
    sha256sum0 x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000001001002)


    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_6_0)

 
sha256sum0_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x0000000002002004), rs1:x6(0x0000000000008000)
    li  x6, 0x8000
    sha256sum0 x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x0000000002002004)
 
sha256sum0_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x0000000004004008), rs1:x5(0x0000000000010000)
    li  x5, 0x10000
    sha256sum0 x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000004004008)
 
sha256sum0_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x0000000008008010), rs1:x4(0x0000000000020000)
    li  x4, 0x20000
    sha256sum0 x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000008008010)
 
sha256sum0_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0000000010010020), rs1:x3(0x0000000000040000)
    li  x3, 0x40000
    sha256sum0 x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000010010020)
 
sha256sum0_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0000000020020040), rs1:x2(0x0000000000080000)
    li  x2, 0x80000
    sha256sum0 x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000020020040)


    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x5,signature_7_0)

 
sha256sum0_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0000000040040080), rs1:x1(0x0000000000100000)
    li  x1, 0x100000
    sha256sum0 x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0000000040040080)
 
sha256sum0_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0000000080080100), rs1:x31(0x0000000000200000)
    li  x31, 0x200000
    sha256sum0 x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0000000080080100)
 
sha256sum0_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0000000000100201), rs1:x30(0x0000000000400000)
    li  x30, 0x400000
    sha256sum0 x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0000000000100201)
 
sha256sum0_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0000000000200402), rs1:x29(0x0000000000800000)
    li  x29, 0x800000
    sha256sum0 x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0000000000200402)
 
sha256sum0_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x0000000000400804), rs1:x28(0x0000000001000000)
    li  x28, 0x1000000
    sha256sum0 x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0000000000400804)


    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_8_0)

 
sha256sum0_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x0000000000801008), rs1:x27(0x0000000002000000)
    li  x27, 0x2000000
    sha256sum0 x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000000801008)
 
sha256sum0_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x0000000001002010), rs1:x26(0x0000000004000000)
    li  x26, 0x4000000
    sha256sum0 x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000001002010)
 
sha256sum0_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0000000002004020), rs1:x25(0x0000000008000000)
    li  x25, 0x8000000
    sha256sum0 x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000002004020)
 
sha256sum0_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0000000004008040), rs1:x24(0x0000000010000000)
    li  x24, 0x10000000
    sha256sum0 x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000004008040)
 
sha256sum0_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0000000008010080), rs1:x23(0x0000000020000000)
    li  x23, 0x20000000
    sha256sum0 x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000008010080)


    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_9_0)

 
sha256sum0_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x0000000010020100), rs1:x22(0x0000000040000000)
    li  x22, 0x40000000
    sha256sum0 x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000010020100)
 
sha256sum0_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0000000020040200), rs1:x21(0x0000000080000000)
    li  x21, 0x80000000
    sha256sum0 x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000020040200)
 
sha256sum0_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000100000000)
    li  x20, 0x100000000
    sha256sum0 x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000000000000)
 
sha256sum0_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000200000000)
    li  x19, 0x200000000
    sha256sum0 x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)
 
sha256sum0_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0000000400000000)
    li  x18, 0x400000000
    sha256sum0 x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x0000000000000000)


    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x3,signature_10_0)

 
sha256sum0_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x0000000800000000)
    li  x17, 0x800000000
    sha256sum0 x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x0000000000000000)
 
sha256sum0_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x0000001000000000)
    li  x16, 0x1000000000
    sha256sum0 x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0000000000000000)
 
sha256sum0_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000002000000000)
    li  x15, 0x2000000000
    sha256sum0 x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x0000000000000000)
 
sha256sum0_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000004000000000)
    li  x14, 0x4000000000
    sha256sum0 x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x0000000000000000)
 
sha256sum0_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000008000000000)
    li  x13, 0x8000000000
    sha256sum0 x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000000000000000)


    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_11_0)

 
sha256sum0_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000010000000000)
    li  x12, 0x10000000000
    sha256sum0 x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0000000000000000)
 
sha256sum0_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000020000000000)
    li  x11, 0x20000000000
    sha256sum0 x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000000000000)
 
sha256sum0_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000040000000000)
    li  x10, 0x40000000000
    sha256sum0 x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000000000000)
 
sha256sum0_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000080000000000)
    li  x9, 0x80000000000
    sha256sum0 x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000000000000)
 
sha256sum0_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000100000000000)
    li  x8, 0x100000000000
    sha256sum0 x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000000000000)


    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_12_0)

 
sha256sum0_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000200000000000)
    li  x7, 0x200000000000
    sha256sum0 x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000000000000)
 
sha256sum0_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000400000000000)
    li  x6, 0x400000000000
    sha256sum0 x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000000000)
 
sha256sum0_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000800000000000)
    li  x5, 0x800000000000
    sha256sum0 x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x0000000000000000)
 
sha256sum0_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0001000000000000)
    li  x4, 0x1000000000000
    sha256sum0 x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x0000000000000000)
 
sha256sum0_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0002000000000000)
    li  x3, 0x2000000000000
    sha256sum0 x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x0000000000000000)


    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x4,signature_13_0)

 
sha256sum0_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0004000000000000)
    li  x2, 0x4000000000000
    sha256sum0 x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x0000000000000000)
 
sha256sum0_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0008000000000000)
    li  x1, 0x8000000000000
    sha256sum0 x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x0000000000000000)
 
sha256sum0_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0010000000000000)
    li  x31, 0x10000000000000
    sha256sum0 x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x0000000000000000)
 
sha256sum0_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0020000000000000)
    li  x30, 0x20000000000000
    sha256sum0 x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x0000000000000000)
 
sha256sum0_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0040000000000000)
    li  x29, 0x40000000000000
    sha256sum0 x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x0000000000000000)


    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_14_0)

 
sha256sum0_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0080000000000000)
    li  x28, 0x80000000000000
    sha256sum0 x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x0000000000000000)
 
sha256sum0_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0100000000000000)
    li  x27, 0x100000000000000
    sha256sum0 x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000000000000)
 
sha256sum0_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0200000000000000)
    li  x26, 0x200000000000000
    sha256sum0 x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000000000)
 
sha256sum0_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0400000000000000)
    li  x25, 0x400000000000000
    sha256sum0 x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000000000000)
 
sha256sum0_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0800000000000000)
    li  x24, 0x800000000000000
    sha256sum0 x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000000000000)


    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_15_0)

 
sha256sum0_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x1000000000000000)
    li  x23, 0x1000000000000000
    sha256sum0 x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000000000)
 
sha256sum0_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x2000000000000000)
    li  x22, 0x2000000000000000
    sha256sum0 x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000000000000)
 
sha256sum0_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x4000000000000000)
    li  x21, 0x4000000000000000
    sha256sum0 x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)
 
sha256sum0_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x8000000000000000)
    li  x20, 0x8000000000000000
    sha256sum0 x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000000000000)
 
sha256sum0_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000)
    li  x19, 0x0
    sha256sum0 x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)


    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x4,signature_16_0)

 
sha256sum0_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0x00000000bff7fbff), rs1:x18(0xfffffffffffffffe)
    li  x18, 0xfffffffffffffffe
    sha256sum0 x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0x00000000bff7fbff)
 
sha256sum0_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0x000000007feff7ff), rs1:x17(0xfffffffffffffffd)
    li  x17, 0xfffffffffffffffd
    sha256sum0 x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0x000000007feff7ff)
 
sha256sum0_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0x00000000ffdfeffe), rs1:x16(0xfffffffffffffffb)
    li  x16, 0xfffffffffffffffb
    sha256sum0 x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0x00000000ffdfeffe)
 
sha256sum0_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0x00000000ffbfdffd), rs1:x15(0xfffffffffffffff7)
    li  x15, 0xfffffffffffffff7
    sha256sum0 x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0x00000000ffbfdffd)
 
sha256sum0_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0x00000000ff7fbffb), rs1:x14(0xffffffffffffffef)
    li  x14, 0xffffffffffffffef
    sha256sum0 x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0x00000000ff7fbffb)


    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_17_0)

 
sha256sum0_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0x00000000feff7ff7), rs1:x13(0xffffffffffffffdf)
    li  x13, 0xffffffffffffffdf
    sha256sum0 x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x00000000feff7ff7)
 
sha256sum0_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0x00000000fdfeffef), rs1:x12(0xffffffffffffffbf)
    li  x12, 0xffffffffffffffbf
    sha256sum0 x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000fdfeffef)
 
sha256sum0_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0x00000000fbfdffdf), rs1:x11(0xffffffffffffff7f)
    li  x11, 0xffffffffffffff7f
    sha256sum0 x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000fbfdffdf)
 
sha256sum0_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0x00000000f7fbffbf), rs1:x10(0xfffffffffffffeff)
    li  x10, 0xfffffffffffffeff
    sha256sum0 x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000f7fbffbf)
 
sha256sum0_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0x00000000eff7ff7f), rs1:x9(0xfffffffffffffdff)
    li  x9, 0xfffffffffffffdff
    sha256sum0 x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000eff7ff7f)


    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_18_0)

 
sha256sum0_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0x00000000dfeffeff), rs1:x8(0xfffffffffffffbff)
    li  x8, 0xfffffffffffffbff
    sha256sum0 x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x00000000dfeffeff)
 
sha256sum0_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0x00000000bfdffdff), rs1:x7(0xfffffffffffff7ff)
    li  x7, 0xfffffffffffff7ff
    sha256sum0 x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x00000000bfdffdff)
 
sha256sum0_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0x000000007fbffbff), rs1:x6(0xffffffffffffefff)
    li  x6, 0xffffffffffffefff
    sha256sum0 x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x000000007fbffbff)
 
sha256sum0_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0x00000000ff7ff7fe), rs1:x5(0xffffffffffffdfff)
    li  x5, 0xffffffffffffdfff
    sha256sum0 x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x00000000ff7ff7fe)
 
sha256sum0_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0x00000000feffeffd), rs1:x4(0xffffffffffffbfff)
    li  x4, 0xffffffffffffbfff
    sha256sum0 x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x00000000feffeffd)


    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x4,signature_19_0)

 
sha256sum0_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0x00000000fdffdffb), rs1:x3(0xffffffffffff7fff)
    li  x3, 0xffffffffffff7fff
    sha256sum0 x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0x00000000fdffdffb)
 
sha256sum0_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0x00000000fbffbff7), rs1:x2(0xfffffffffffeffff)
    li  x2, 0xfffffffffffeffff
    sha256sum0 x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x00000000fbffbff7)
 
sha256sum0_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0x00000000f7ff7fef), rs1:x1(0xfffffffffffdffff)
    li  x1, 0xfffffffffffdffff
    sha256sum0 x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x00000000f7ff7fef)
 
sha256sum0_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0x00000000effeffdf), rs1:x31(0xfffffffffffbffff)
    li  x31, 0xfffffffffffbffff
    sha256sum0 x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x00000000effeffdf)
 
sha256sum0_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0x00000000dffdffbf), rs1:x30(0xfffffffffff7ffff)
    li  x30, 0xfffffffffff7ffff
    sha256sum0 x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x00000000dffdffbf)


    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_20_0)

 
sha256sum0_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0x00000000bffbff7f), rs1:x29(0xffffffffffefffff)
    li  x29, 0xffffffffffefffff
    sha256sum0 x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0x00000000bffbff7f)
 
sha256sum0_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0x000000007ff7feff), rs1:x28(0xffffffffffdfffff)
    li  x28, 0xffffffffffdfffff
    sha256sum0 x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x000000007ff7feff)
 
sha256sum0_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0x00000000ffeffdfe), rs1:x27(0xffffffffffbfffff)
    li  x27, 0xffffffffffbfffff
    sha256sum0 x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x00000000ffeffdfe)
 
sha256sum0_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0x00000000ffdffbfd), rs1:x26(0xffffffffff7fffff)
    li  x26, 0xffffffffff7fffff
    sha256sum0 x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x00000000ffdffbfd)
 
sha256sum0_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0x00000000ffbff7fb), rs1:x25(0xfffffffffeffffff)
    li  x25, 0xfffffffffeffffff
    sha256sum0 x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x00000000ffbff7fb)


    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_21_0)

 
sha256sum0_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0x00000000ff7feff7), rs1:x24(0xfffffffffdffffff)
    li  x24, 0xfffffffffdffffff
    sha256sum0 x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000ff7feff7)
 
sha256sum0_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0x00000000feffdfef), rs1:x23(0xfffffffffbffffff)
    li  x23, 0xfffffffffbffffff
    sha256sum0 x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000feffdfef)
 
sha256sum0_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0x00000000fdffbfdf), rs1:x22(0xfffffffff7ffffff)
    li  x22, 0xfffffffff7ffffff
    sha256sum0 x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000fdffbfdf)
 
sha256sum0_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0x00000000fbff7fbf), rs1:x21(0xffffffffefffffff)
    li  x21, 0xffffffffefffffff
    sha256sum0 x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x00000000fbff7fbf)
 
sha256sum0_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0x00000000f7feff7f), rs1:x20(0xffffffffdfffffff)
    li  x20, 0xffffffffdfffffff
    sha256sum0 x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x00000000f7feff7f)


    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x5,signature_22_0)

 
sha256sum0_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0x00000000effdfeff), rs1:x19(0xffffffffbfffffff)
    li  x19, 0xffffffffbfffffff
    sha256sum0 x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0x00000000effdfeff)
 
sha256sum0_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0x00000000dffbfdff), rs1:x18(0xffffffff7fffffff)
    li  x18, 0xffffffff7fffffff
    sha256sum0 x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0x00000000dffbfdff)
 
sha256sum0_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0x00000000ffffffff), rs1:x17(0xfffffffeffffffff)
    li  x17, 0xfffffffeffffffff
    sha256sum0 x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0x00000000ffffffff)
 
sha256sum0_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0x00000000ffffffff), rs1:x16(0xfffffffdffffffff)
    li  x16, 0xfffffffdffffffff
    sha256sum0 x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0x00000000ffffffff)
 
sha256sum0_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0x00000000ffffffff), rs1:x15(0xfffffffbffffffff)
    li  x15, 0xfffffffbffffffff
    sha256sum0 x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0x00000000ffffffff)


    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_23_0)

 
sha256sum0_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0x00000000ffffffff), rs1:x14(0xfffffff7ffffffff)
    li  x14, 0xfffffff7ffffffff
    sha256sum0 x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x00000000ffffffff)
 
sha256sum0_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0x00000000ffffffff), rs1:x13(0xffffffefffffffff)
    li  x13, 0xffffffefffffffff
    sha256sum0 x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x00000000ffffffff)
 
sha256sum0_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0x00000000ffffffff), rs1:x12(0xffffffdfffffffff)
    li  x12, 0xffffffdfffffffff
    sha256sum0 x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000ffffffff)
 
sha256sum0_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0x00000000ffffffff), rs1:x11(0xffffffbfffffffff)
    li  x11, 0xffffffbfffffffff
    sha256sum0 x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000ffffffff)
 
sha256sum0_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0x00000000ffffffff), rs1:x10(0xffffff7fffffffff)
    li  x10, 0xffffff7fffffffff
    sha256sum0 x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000ffffffff)


    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_24_0)

 
sha256sum0_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0x00000000ffffffff), rs1:x9(0xfffffeffffffffff)
    li  x9, 0xfffffeffffffffff
    sha256sum0 x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000ffffffff)
 
sha256sum0_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0x00000000ffffffff), rs1:x8(0xfffffdffffffffff)
    li  x8, 0xfffffdffffffffff
    sha256sum0 x24, x8
    sd x24, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x00000000ffffffff)
 
sha256sum0_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0x00000000ffffffff), rs1:x7(0xfffffbffffffffff)
    li  x7, 0xfffffbffffffffff
    sha256sum0 x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x00000000ffffffff)
 
sha256sum0_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0x00000000ffffffff), rs1:x6(0xfffff7ffffffffff)
    li  x6, 0xfffff7ffffffffff
    sha256sum0 x26, x6
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x00000000ffffffff)
 
sha256sum0_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0x00000000ffffffff), rs1:x5(0xffffefffffffffff)
    li  x5, 0xffffefffffffffff
    sha256sum0 x27, x5
    sd x27, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x00000000ffffffff)


    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x5,signature_25_0)

 
sha256sum0_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0x00000000ffffffff), rs1:x4(0xffffdfffffffffff)
    li  x4, 0xffffdfffffffffff
    sha256sum0 x28, x4
    sd x28, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x28, 0x00000000ffffffff)
 
sha256sum0_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0x00000000ffffffff), rs1:x3(0xffffbfffffffffff)
    li  x3, 0xffffbfffffffffff
    sha256sum0 x29, x3
    sd x29, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x29, 0x00000000ffffffff)
 
sha256sum0_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0x00000000ffffffff), rs1:x2(0xffff7fffffffffff)
    li  x2, 0xffff7fffffffffff
    sha256sum0 x30, x2
    sd x30, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x30, 0x00000000ffffffff)
 
sha256sum0_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0x00000000ffffffff), rs1:x1(0xfffeffffffffffff)
    li  x1, 0xfffeffffffffffff
    sha256sum0 x31, x1
    sd x31, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x00000000ffffffff)
 
sha256sum0_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0x00000000ffffffff), rs1:x31(0xfffdffffffffffff)
    li  x31, 0xfffdffffffffffff
    sha256sum0 x1, x31
    sd x1, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x00000000ffffffff)


    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_26_0)

 
sha256sum0_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0x00000000ffffffff), rs1:x30(0xfffbffffffffffff)
    li  x30, 0xfffbffffffffffff
    sha256sum0 x2, x30
    sd x2, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x00000000ffffffff)
 
sha256sum0_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0x00000000ffffffff), rs1:x29(0xfff7ffffffffffff)
    li  x29, 0xfff7ffffffffffff
    sha256sum0 x3, x29
    sd x3, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x00000000ffffffff)
 
sha256sum0_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0x00000000ffffffff), rs1:x28(0xffefffffffffffff)
    li  x28, 0xffefffffffffffff
    sha256sum0 x4, x28
    sd x4, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x00000000ffffffff)
 
sha256sum0_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0x00000000ffffffff), rs1:x27(0xffdfffffffffffff)
    li  x27, 0xffdfffffffffffff
    sha256sum0 x5, x27
    sd x5, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x00000000ffffffff)
 
sha256sum0_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0x00000000ffffffff), rs1:x26(0xffbfffffffffffff)
    li  x26, 0xffbfffffffffffff
    sha256sum0 x6, x26
    sd x6, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x6, 0x00000000ffffffff)


    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_27_0)

 
sha256sum0_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0x00000000ffffffff), rs1:x25(0xff7fffffffffffff)
    li  x25, 0xff7fffffffffffff
    sha256sum0 x7, x25
    sd x7, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x00000000ffffffff)
 
sha256sum0_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0x00000000ffffffff), rs1:x24(0xfeffffffffffffff)
    li  x24, 0xfeffffffffffffff
    sha256sum0 x8, x24
    sd x8, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000ffffffff)
 
sha256sum0_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0x00000000ffffffff), rs1:x23(0xfdffffffffffffff)
    li  x23, 0xfdffffffffffffff
    sha256sum0 x9, x23
    sd x9, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000ffffffff)
 
sha256sum0_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0x00000000ffffffff), rs1:x22(0xfbffffffffffffff)
    li  x22, 0xfbffffffffffffff
    sha256sum0 x10, x22
    sd x10, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000ffffffff)
 
sha256sum0_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0x00000000ffffffff), rs1:x21(0xf7ffffffffffffff)
    li  x21, 0xf7ffffffffffffff
    sha256sum0 x11, x21
    sd x11, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x00000000ffffffff)


    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x6,signature_28_0)

 
sha256sum0_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0x00000000ffffffff), rs1:x20(0xefffffffffffffff)
    li  x20, 0xefffffffffffffff
    sha256sum0 x12, x20
    sd x12, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x00000000ffffffff)
 
sha256sum0_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0x00000000ffffffff), rs1:x19(0xdfffffffffffffff)
    li  x19, 0xdfffffffffffffff
    sha256sum0 x13, x19
    sd x13, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x00000000ffffffff)
 
sha256sum0_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0x00000000ffffffff), rs1:x18(0xbfffffffffffffff)
    li  x18, 0xbfffffffffffffff
    sha256sum0 x14, x18
    sd x14, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x00000000ffffffff)
 
sha256sum0_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0x00000000ffffffff), rs1:x17(0x7fffffffffffffff)
    li  x17, 0x7fffffffffffffff
    sha256sum0 x15, x17
    sd x15, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x00000000ffffffff)
 
sha256sum0_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0x00000000ffffffff), rs1:x16(0xffffffffffffffff)
    li  x16, 0xffffffffffffffff
    sha256sum0 x16, x16
    sd x16, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x16, 0x00000000ffffffff)


    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_29_0)

 
sha256sum0_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0000000040080400), rs1:x15(0x0000000000000001)
    li  x15, 0x1
    sha256sum0 x17, x15
    sd x17, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x17, 0x0000000040080400)
 
sha256sum0_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0000000080100800), rs1:x14(0x0000000000000002)
    li  x14, 0x2
    sha256sum0 x18, x14
    sd x18, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x0000000080100800)
 
sha256sum0_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0000000000201001), rs1:x13(0x0000000000000004)
    li  x13, 0x4
    sha256sum0 x19, x13
    sd x19, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x0000000000201001)
 
sha256sum0_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0000000000402002), rs1:x12(0x0000000000000008)
    li  x12, 0x8
    sha256sum0 x20, x12
    sd x20, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0000000000402002)
 
sha256sum0_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0000000000804004), rs1:x11(0x0000000000000010)
    li  x11, 0x10
    sha256sum0 x21, x11
    sd x21, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000000804004)


    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_30_0)

 
sha256sum0_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0000000001008008), rs1:x10(0x0000000000000020)
    li  x10, 0x20
    sha256sum0 x22, x10
    sd x22, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000001008008)
 
sha256sum0_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0000000002010010), rs1:x9(0x0000000000000040)
    li  x9, 0x40
    sha256sum0 x23, x9
    sd x23, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000002010010)
 
sha256sum0_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0000000004020020), rs1:x8(0x0000000000000080)
    li  x8, 0x80
    sha256sum0 x24, x8
    sd x24, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000004020020)
 
sha256sum0_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000008040040), rs1:x7(0x0000000000000100)
    li  x7, 0x100
    sha256sum0 x25, x7
    sd x25, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000008040040)
 
sha256sum0_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000010080080), rs1:x6(0x0000000000000200)
    li  x6, 0x200
    sha256sum0 x26, x6
    sd x26, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000010080080)


    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x6,signature_31_0)

 
sha256sum0_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000000020100100), rs1:x5(0x0000000000000400)
    li  x5, 0x400
    sha256sum0 x27, x5
    sd x27, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000020100100)
 
sha256sum0_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000040200200), rs1:x4(0x0000000000000800)
    li  x4, 0x800
    sha256sum0 x28, x4
    sd x28, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000040200200)
 
sha256sum0_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0000000080400400), rs1:x3(0x0000000000001000)
    li  x3, 0x1000
    sha256sum0 x29, x3
    sd x29, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000080400400)
 
sha256sum0_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000000800801), rs1:x2(0x0000000000002000)
    li  x2, 0x2000
    sha256sum0 x30, x2
    sd x30, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000000800801)
 
sha256sum0_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0000000001001002), rs1:x1(0x0000000000004000)
    li  x1, 0x4000
    sha256sum0 x31, x1
    sd x31, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x0000000001001002)


    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x6,signature_32_0)

 
sha256sum0_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000002002004), rs1:x31(0x0000000000008000)
    li  x31, 0x8000
    sha256sum0 x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x0000000002002004)
 
sha256sum0_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000000004004008), rs1:x30(0x0000000000010000)
    li  x30, 0x10000
    sha256sum0 x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x0000000004004008)
 
sha256sum0_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000008008010), rs1:x29(0x0000000000020000)
    li  x29, 0x20000
    sha256sum0 x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x0000000008008010)
 
sha256sum0_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000010010020), rs1:x28(0x0000000000040000)
    li  x28, 0x40000
    sha256sum0 x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x0000000010010020)
 
sha256sum0_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000020020040), rs1:x27(0x0000000000080000)
    li  x27, 0x80000
    sha256sum0 x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x0000000020020040)


    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_33_0)

 
sha256sum0_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000040040080), rs1:x26(0x0000000000100000)
    li  x26, 0x100000
    sha256sum0 x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000040040080)
 
sha256sum0_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000080080100), rs1:x25(0x0000000000200000)
    li  x25, 0x200000
    sha256sum0 x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000080080100)
 
sha256sum0_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000000100201), rs1:x24(0x0000000000400000)
    li  x24, 0x400000
    sha256sum0 x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000000100201)
 
sha256sum0_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000000200402), rs1:x23(0x0000000000800000)
    li  x23, 0x800000
    sha256sum0 x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000200402)
 
sha256sum0_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000000400804), rs1:x22(0x0000000001000000)
    li  x22, 0x1000000
    sha256sum0 x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000000400804)


    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_34_0)

 
sha256sum0_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000000801008), rs1:x21(0x0000000002000000)
    li  x21, 0x2000000
    sha256sum0 x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x0000000000801008)
 
sha256sum0_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000001002010), rs1:x20(0x0000000004000000)
    li  x20, 0x4000000
    sha256sum0 x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0000000001002010)
 
sha256sum0_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000002004020), rs1:x19(0x0000000008000000)
    li  x19, 0x8000000
    sha256sum0 x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0000000002004020)
 
sha256sum0_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000004008040), rs1:x18(0x0000000010000000)
    li  x18, 0x10000000
    sha256sum0 x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0000000004008040)
 
sha256sum0_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000008010080), rs1:x17(0x0000000020000000)
    li  x17, 0x20000000
    sha256sum0 x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0000000008010080)


    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x2,signature_35_0)

 
sha256sum0_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000010020100), rs1:x16(0x0000000040000000)
    li  x16, 0x40000000
    sha256sum0 x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0000000010020100)
 
sha256sum0_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000000020040200), rs1:x15(0x0000000080000000)
    li  x15, 0x80000000
    sha256sum0 x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x0000000020040200)
 
sha256sum0_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000000100000000)
    li  x14, 0x100000000
    sha256sum0 x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x0000000000000000)
 
sha256sum0_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000200000000)
    li  x13, 0x200000000
    sha256sum0 x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0000000000000000)
 
sha256sum0_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000000400000000)
    li  x12, 0x400000000
    sha256sum0 x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0000000000000000)


    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_36_0)

 
sha256sum0_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000800000000)
    li  x11, 0x800000000
    sha256sum0 x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000000000000)
 
sha256sum0_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000001000000000)
    li  x10, 0x1000000000
    sha256sum0 x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000000000000)
 
sha256sum0_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000002000000000)
    li  x9, 0x2000000000
    sha256sum0 x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000000000000)
 
sha256sum0_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000004000000000)
    li  x8, 0x4000000000
    sha256sum0 x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000000000000)
 
sha256sum0_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000008000000000)
    li  x7, 0x8000000000
    sha256sum0 x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000000000000)


    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_37_0)

 
sha256sum0_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000010000000000)
    li  x6, 0x10000000000
    sha256sum0 x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x0000000000000000)
 
sha256sum0_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000020000000000)
    li  x5, 0x20000000000
    sha256sum0 x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000000000000)
 
sha256sum0_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000040000000000)
    li  x4, 0x40000000000
    sha256sum0 x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000000000000)
 
sha256sum0_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000080000000000)
    li  x3, 0x80000000000
    sha256sum0 x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000000000000)
 
sha256sum0_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000100000000000)
    li  x2, 0x100000000000
    sha256sum0 x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000000000000)


    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x5,signature_38_0)

 
sha256sum0_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000200000000000)
    li  x1, 0x200000000000
    sha256sum0 x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0000000000000000)
 
sha256sum0_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000400000000000)
    li  x31, 0x400000000000
    sha256sum0 x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0000000000000000)
 
sha256sum0_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000800000000000)
    li  x30, 0x800000000000
    sha256sum0 x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0000000000000000)
 
sha256sum0_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0001000000000000)
    li  x29, 0x1000000000000
    sha256sum0 x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0000000000000000)
 
sha256sum0_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0002000000000000)
    li  x28, 0x2000000000000
    sha256sum0 x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0000000000000000)


    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_39_0)

 
sha256sum0_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0004000000000000)
    li  x27, 0x4000000000000
    sha256sum0 x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000000000000)
 
sha256sum0_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0008000000000000)
    li  x26, 0x8000000000000
    sha256sum0 x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000000000)
 
sha256sum0_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0010000000000000)
    li  x25, 0x10000000000000
    sha256sum0 x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000000000000)
 
sha256sum0_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0020000000000000)
    li  x24, 0x20000000000000
    sha256sum0 x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000000000000)
 
sha256sum0_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0040000000000000)
    li  x23, 0x40000000000000
    sha256sum0 x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000000000)


    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_40_0)

 
sha256sum0_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0080000000000000)
    li  x22, 0x80000000000000
    sha256sum0 x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000000000000)
 
sha256sum0_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0100000000000000)
    li  x21, 0x100000000000000
    sha256sum0 x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)
 
sha256sum0_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0200000000000000)
    li  x20, 0x200000000000000
    sha256sum0 x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000000000000)
 
sha256sum0_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0400000000000000)
    li  x19, 0x400000000000000
    sha256sum0 x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)
 
sha256sum0_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0800000000000000)
    li  x18, 0x800000000000000
    sha256sum0 x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x0000000000000000)


    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x3,signature_41_0)

 
sha256sum0_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x1000000000000000)
    li  x17, 0x1000000000000000
    sha256sum0 x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x0000000000000000)
 
sha256sum0_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x2000000000000000)
    li  x16, 0x2000000000000000
    sha256sum0 x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0000000000000000)
 
sha256sum0_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x4000000000000000)
    li  x15, 0x4000000000000000
    sha256sum0 x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x0000000000000000)
 
sha256sum0_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x8000000000000000)
    li  x14, 0x8000000000000000
    sha256sum0 x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x0000000000000000)
 
sha256sum0_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000)
    li  x13, 0x0
    sha256sum0 x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000000000000000)


    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_42_0)

 
sha256sum0_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0x00000000bff7fbff), rs1:x12(0xfffffffffffffffe)
    li  x12, 0xfffffffffffffffe
    sha256sum0 x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000bff7fbff)
 
sha256sum0_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0x000000007feff7ff), rs1:x11(0xfffffffffffffffd)
    li  x11, 0xfffffffffffffffd
    sha256sum0 x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x000000007feff7ff)
 
sha256sum0_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0x00000000ffdfeffe), rs1:x10(0xfffffffffffffffb)
    li  x10, 0xfffffffffffffffb
    sha256sum0 x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000ffdfeffe)
 
sha256sum0_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0x00000000ffbfdffd), rs1:x9(0xfffffffffffffff7)
    li  x9, 0xfffffffffffffff7
    sha256sum0 x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000ffbfdffd)
 
sha256sum0_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0x00000000ff7fbffb), rs1:x8(0xffffffffffffffef)
    li  x8, 0xffffffffffffffef
    sha256sum0 x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x00000000ff7fbffb)


    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_43_0)

 
sha256sum0_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0x00000000feff7ff7), rs1:x7(0xffffffffffffffdf)
    li  x7, 0xffffffffffffffdf
    sha256sum0 x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x00000000feff7ff7)
 
sha256sum0_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0x00000000fdfeffef), rs1:x6(0xffffffffffffffbf)
    li  x6, 0xffffffffffffffbf
    sha256sum0 x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x00000000fdfeffef)
 
sha256sum0_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0x00000000fbfdffdf), rs1:x5(0xffffffffffffff7f)
    li  x5, 0xffffffffffffff7f
    sha256sum0 x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x00000000fbfdffdf)
 
sha256sum0_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0x00000000f7fbffbf), rs1:x4(0xfffffffffffffeff)
    li  x4, 0xfffffffffffffeff
    sha256sum0 x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x00000000f7fbffbf)
 
sha256sum0_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0x00000000eff7ff7f), rs1:x3(0xfffffffffffffdff)
    li  x3, 0xfffffffffffffdff
    sha256sum0 x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x00000000eff7ff7f)


    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x4,signature_44_0)

 
sha256sum0_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0x00000000dfeffeff), rs1:x2(0xfffffffffffffbff)
    li  x2, 0xfffffffffffffbff
    sha256sum0 x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x00000000dfeffeff)
 
sha256sum0_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0x00000000bfdffdff), rs1:x1(0xfffffffffffff7ff)
    li  x1, 0xfffffffffffff7ff
    sha256sum0 x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x00000000bfdffdff)
 
sha256sum0_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0x000000007fbffbff), rs1:x31(0xffffffffffffefff)
    li  x31, 0xffffffffffffefff
    sha256sum0 x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x000000007fbffbff)
 
sha256sum0_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0x00000000ff7ff7fe), rs1:x30(0xffffffffffffdfff)
    li  x30, 0xffffffffffffdfff
    sha256sum0 x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x00000000ff7ff7fe)
 
sha256sum0_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0x00000000feffeffd), rs1:x29(0xffffffffffffbfff)
    li  x29, 0xffffffffffffbfff
    sha256sum0 x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x00000000feffeffd)


    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_45_0)

 
sha256sum0_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0x00000000fdffdffb), rs1:x28(0xffffffffffff7fff)
    li  x28, 0xffffffffffff7fff
    sha256sum0 x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x00000000fdffdffb)
 
sha256sum0_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0x00000000fbffbff7), rs1:x27(0xfffffffffffeffff)
    li  x27, 0xfffffffffffeffff
    sha256sum0 x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x00000000fbffbff7)
 
sha256sum0_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0x00000000f7ff7fef), rs1:x26(0xfffffffffffdffff)
    li  x26, 0xfffffffffffdffff
    sha256sum0 x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x00000000f7ff7fef)
 
sha256sum0_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0x00000000effeffdf), rs1:x25(0xfffffffffffbffff)
    li  x25, 0xfffffffffffbffff
    sha256sum0 x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x00000000effeffdf)
 
sha256sum0_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0x00000000dffdffbf), rs1:x24(0xfffffffffff7ffff)
    li  x24, 0xfffffffffff7ffff
    sha256sum0 x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000dffdffbf)


    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_46_0)

 
sha256sum0_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0x00000000bffbff7f), rs1:x23(0xffffffffffefffff)
    li  x23, 0xffffffffffefffff
    sha256sum0 x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000bffbff7f)
 
sha256sum0_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0x000000007ff7feff), rs1:x22(0xffffffffffdfffff)
    li  x22, 0xffffffffffdfffff
    sha256sum0 x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x000000007ff7feff)
 
sha256sum0_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0x00000000ffeffdfe), rs1:x21(0xffffffffffbfffff)
    li  x21, 0xffffffffffbfffff
    sha256sum0 x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x00000000ffeffdfe)
 
sha256sum0_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0x00000000ffdffbfd), rs1:x20(0xffffffffff7fffff)
    li  x20, 0xffffffffff7fffff
    sha256sum0 x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x00000000ffdffbfd)
 
sha256sum0_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0x00000000ffbff7fb), rs1:x19(0xfffffffffeffffff)
    li  x19, 0xfffffffffeffffff
    sha256sum0 x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x00000000ffbff7fb)


    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x4,signature_47_0)

 
sha256sum0_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0x00000000ff7feff7), rs1:x18(0xfffffffffdffffff)
    li  x18, 0xfffffffffdffffff
    sha256sum0 x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0x00000000ff7feff7)
 
sha256sum0_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0x00000000feffdfef), rs1:x17(0xfffffffffbffffff)
    li  x17, 0xfffffffffbffffff
    sha256sum0 x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0x00000000feffdfef)
 
sha256sum0_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0x00000000fdffbfdf), rs1:x16(0xfffffffff7ffffff)
    li  x16, 0xfffffffff7ffffff
    sha256sum0 x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0x00000000fdffbfdf)
 
sha256sum0_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0x00000000fbff7fbf), rs1:x15(0xffffffffefffffff)
    li  x15, 0xffffffffefffffff
    sha256sum0 x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0x00000000fbff7fbf)
 
sha256sum0_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0x00000000f7feff7f), rs1:x14(0xffffffffdfffffff)
    li  x14, 0xffffffffdfffffff
    sha256sum0 x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0x00000000f7feff7f)


    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_48_0)

 
sha256sum0_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0x00000000effdfeff), rs1:x13(0xffffffffbfffffff)
    li  x13, 0xffffffffbfffffff
    sha256sum0 x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x00000000effdfeff)
 
sha256sum0_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0x00000000dffbfdff), rs1:x12(0xffffffff7fffffff)
    li  x12, 0xffffffff7fffffff
    sha256sum0 x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000dffbfdff)
 
sha256sum0_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0x00000000ffffffff), rs1:x11(0xfffffffeffffffff)
    li  x11, 0xfffffffeffffffff
    sha256sum0 x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000ffffffff)
 
sha256sum0_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0x00000000ffffffff), rs1:x10(0xfffffffdffffffff)
    li  x10, 0xfffffffdffffffff
    sha256sum0 x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000ffffffff)
 
sha256sum0_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0x00000000ffffffff), rs1:x9(0xfffffffbffffffff)
    li  x9, 0xfffffffbffffffff
    sha256sum0 x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000ffffffff)


    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_49_0)

 
sha256sum0_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0x00000000ffffffff), rs1:x8(0xfffffff7ffffffff)
    li  x8, 0xfffffff7ffffffff
    sha256sum0 x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x00000000ffffffff)
 
sha256sum0_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0x00000000ffffffff), rs1:x7(0xffffffefffffffff)
    li  x7, 0xffffffefffffffff
    sha256sum0 x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x00000000ffffffff)
 
sha256sum0_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0x00000000ffffffff), rs1:x6(0xffffffdfffffffff)
    li  x6, 0xffffffdfffffffff
    sha256sum0 x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x00000000ffffffff)
 
sha256sum0_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0x00000000ffffffff), rs1:x5(0xffffffbfffffffff)
    li  x5, 0xffffffbfffffffff
    sha256sum0 x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x00000000ffffffff)
 
sha256sum0_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0x00000000ffffffff), rs1:x4(0xffffff7fffffffff)
    li  x4, 0xffffff7fffffffff
    sha256sum0 x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x00000000ffffffff)


    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x4,signature_50_0)

 
sha256sum0_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0x00000000ffffffff), rs1:x3(0xfffffeffffffffff)
    li  x3, 0xfffffeffffffffff
    sha256sum0 x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0x00000000ffffffff)
 
sha256sum0_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0x00000000ffffffff), rs1:x2(0xfffffdffffffffff)
    li  x2, 0xfffffdffffffffff
    sha256sum0 x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x00000000ffffffff)
 
sha256sum0_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0x00000000ffffffff), rs1:x1(0xfffffbffffffffff)
    li  x1, 0xfffffbffffffffff
    sha256sum0 x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x00000000ffffffff)
 
sha256sum0_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0x00000000ffffffff), rs1:x31(0xfffff7ffffffffff)
    li  x31, 0xfffff7ffffffffff
    sha256sum0 x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x00000000ffffffff)
 
sha256sum0_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0x00000000ffffffff), rs1:x30(0xffffefffffffffff)
    li  x30, 0xffffefffffffffff
    sha256sum0 x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x00000000ffffffff)


    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_51_0)

 
sha256sum0_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0x00000000ffffffff), rs1:x29(0xffffdfffffffffff)
    li  x29, 0xffffdfffffffffff
    sha256sum0 x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0x00000000ffffffff)
 
sha256sum0_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0x00000000ffffffff), rs1:x28(0xffffbfffffffffff)
    li  x28, 0xffffbfffffffffff
    sha256sum0 x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x00000000ffffffff)
 
sha256sum0_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0x00000000ffffffff), rs1:x27(0xffff7fffffffffff)
    li  x27, 0xffff7fffffffffff
    sha256sum0 x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x00000000ffffffff)
 
sha256sum0_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0x00000000ffffffff), rs1:x26(0xfffeffffffffffff)
    li  x26, 0xfffeffffffffffff
    sha256sum0 x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x00000000ffffffff)
 
sha256sum0_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0x00000000ffffffff), rs1:x25(0xfffdffffffffffff)
    li  x25, 0xfffdffffffffffff
    sha256sum0 x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x00000000ffffffff)


    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_52_0)

 
sha256sum0_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0x00000000ffffffff), rs1:x24(0xfffbffffffffffff)
    li  x24, 0xfffbffffffffffff
    sha256sum0 x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000ffffffff)
 
sha256sum0_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0x00000000ffffffff), rs1:x23(0xfff7ffffffffffff)
    li  x23, 0xfff7ffffffffffff
    sha256sum0 x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000ffffffff)
 
sha256sum0_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0x00000000ffffffff), rs1:x22(0xffefffffffffffff)
    li  x22, 0xffefffffffffffff
    sha256sum0 x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000ffffffff)
 
sha256sum0_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0x00000000ffffffff), rs1:x21(0xffdfffffffffffff)
    li  x21, 0xffdfffffffffffff
    sha256sum0 x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x00000000ffffffff)
 
sha256sum0_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0x00000000ffffffff), rs1:x20(0xffbfffffffffffff)
    li  x20, 0xffbfffffffffffff
    sha256sum0 x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x00000000ffffffff)


    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x5,signature_53_0)

 
sha256sum0_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0x00000000ffffffff), rs1:x19(0xff7fffffffffffff)
    li  x19, 0xff7fffffffffffff
    sha256sum0 x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0x00000000ffffffff)
 
sha256sum0_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0x00000000ffffffff), rs1:x18(0xfeffffffffffffff)
    li  x18, 0xfeffffffffffffff
    sha256sum0 x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0x00000000ffffffff)
 
sha256sum0_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0x00000000ffffffff), rs1:x17(0xfdffffffffffffff)
    li  x17, 0xfdffffffffffffff
    sha256sum0 x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0x00000000ffffffff)
 
sha256sum0_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0x00000000ffffffff), rs1:x16(0xfbffffffffffffff)
    li  x16, 0xfbffffffffffffff
    sha256sum0 x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0x00000000ffffffff)
 
sha256sum0_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0x00000000ffffffff), rs1:x15(0xf7ffffffffffffff)
    li  x15, 0xf7ffffffffffffff
    sha256sum0 x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0x00000000ffffffff)


    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_54_0)

 
sha256sum0_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0x00000000ffffffff), rs1:x14(0xefffffffffffffff)
    li  x14, 0xefffffffffffffff
    sha256sum0 x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x00000000ffffffff)
 
sha256sum0_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0x00000000ffffffff), rs1:x13(0xdfffffffffffffff)
    li  x13, 0xdfffffffffffffff
    sha256sum0 x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x00000000ffffffff)
 
sha256sum0_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0x00000000ffffffff), rs1:x12(0xbfffffffffffffff)
    li  x12, 0xbfffffffffffffff
    sha256sum0 x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000ffffffff)
 
sha256sum0_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0x00000000ffffffff), rs1:x11(0x7fffffffffffffff)
    li  x11, 0x7fffffffffffffff
    sha256sum0 x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000ffffffff)
 
sha256sum0_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0x00000000ffffffff), rs1:x10(0xffffffffffffffff)
    li  x10, 0xffffffffffffffff
    sha256sum0 x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000ffffffff)


    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum0)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum0)

    RVTEST_SIGBASE(x1,signature_55_0)

 
sha256sum0_01_inst_270:
    // Test 270:  Test with random values
    // result rd:x23(0x000000004e91ad80), rs1:x9(0x10fd3dedadea5195)
    li  x9, 0x10fd3dedadea5195
    sha256sum0 x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x000000004e91ad80)
 
sha256sum0_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1)
    li  x8, 0xbd295ce2d2ffbec1
    sha256sum0 x0, x8
    sd x0, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x0, 0x0000000000000000)
 
sha256sum0_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0x000000002947c380), rs1:x7(0xc9649f05a8e1a8bb)
    li  x7, 0xc9649f05a8e1a8bb
    sha256sum0 x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x000000002947c380)
 
sha256sum0_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb)
    li  x0, 0x3541291848c99fcb
    sha256sum0 x26, x0
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000000000)
	
#endif


RVTEST_CODE_END sha256sum0_01_code_end
RVTEST_CODE_BEGIN sha512sig1_01_init sha512sig1_01_code_begin






#ifdef TEST_CASE_1


    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x6,signature_1_0)

 
sha512sig1_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0xcd98b9857e589053), rs1:x31(0x10fd3dedadea5195)
    li  x31, 0x10fd3dedadea5195
    sha512sig1 x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0xcd98b9857e589053)
 
sha512sig1_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x1c6675c0372a52a9), rs1:x30(0xbd295ce2d2ffbec1)
    li  x30, 0xbd295ce2d2ffbec1
    sha512sig1 x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x1c6675c0372a52a9)
 
sha512sig1_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0x7d16137dc24e7660), rs1:x29(0xc9649f05a8e1a8bb)
    li  x29, 0xc9649f05a8e1a8bb
    sha512sig1 x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x7d16137dc24e7660)
 
sha512sig1_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x99252ace024cd13f), rs1:x28(0x3541291848c99fcb)
    li  x28, 0x3541291848c99fcb
    sha512sig1 x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x99252ace024cd13f)
 
sha512sig1_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x2f19510b791aeff2), rs1:x27(0x10a24740461d524f)
    li  x27, 0x10a24740461d524f
    sha512sig1 x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x2f19510b791aeff2)


    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_2_0)

 
sha512sig1_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0xe01c3416a4d02769), rs1:x26(0x546b0e54528a10af)
    li  x26, 0x546b0e54528a10af
    sha512sig1 x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xe01c3416a4d02769)
 
sha512sig1_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0xe3ffb46d7aa32dc7), rs1:x25(0x73a92fd4e19bfbc3)
    li  x25, 0x73a92fd4e19bfbc3
    sha512sig1 x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xe3ffb46d7aa32dc7)
 
sha512sig1_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x4be06a74b09993c0), rs1:x24(0x82f6747f707af2c0)
    li  x24, 0x82f6747f707af2c0
    sha512sig1 x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x4be06a74b09993c0)
 
sha512sig1_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0x0cb068b0fffa2211), rs1:x23(0xf5adb41aa47d105b)
    li  x23, 0xf5adb41aa47d105b
    sha512sig1 x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0cb068b0fffa2211)
 
sha512sig1_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0x8100452e679e8c6d), rs1:x22(0xdf7f3844121bcc23)
    li  x22, 0xdf7f3844121bcc23
    sha512sig1 x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x8100452e679e8c6d)


    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_3_0)

 
sha512sig1_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x0000200000000008), rs1:x21(0x0000000000000001)
    li  x21, 0x1
    sha512sig1 x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x0000200000000008)
 
sha512sig1_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x0000400000000010), rs1:x20(0x0000000000000002)
    li  x20, 0x2
    sha512sig1 x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0000400000000010)
 
sha512sig1_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x0000800000000020), rs1:x19(0x0000000000000004)
    li  x19, 0x4
    sha512sig1 x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0000800000000020)
 
sha512sig1_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0001000000000040), rs1:x18(0x0000000000000008)
    li  x18, 0x8
    sha512sig1 x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0001000000000040)
 
sha512sig1_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x0002000000000080), rs1:x17(0x0000000000000010)
    li  x17, 0x10
    sha512sig1 x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0002000000000080)


    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x2,signature_4_0)

 
sha512sig1_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x0004000000000100), rs1:x16(0x0000000000000020)
    li  x16, 0x20
    sha512sig1 x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0004000000000100)
 
sha512sig1_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x0008000000000201), rs1:x15(0x0000000000000040)
    li  x15, 0x40
    sha512sig1 x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x0008000000000201)
 
sha512sig1_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x0010000000000402), rs1:x14(0x0000000000000080)
    li  x14, 0x80
    sha512sig1 x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x0010000000000402)
 
sha512sig1_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0020000000000804), rs1:x13(0x0000000000000100)
    li  x13, 0x100
    sha512sig1 x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0020000000000804)
 
sha512sig1_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0040000000001008), rs1:x12(0x0000000000000200)
    li  x12, 0x200
    sha512sig1 x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0040000000001008)


    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_5_0)

 
sha512sig1_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x0080000000002010), rs1:x11(0x0000000000000400)
    li  x11, 0x400
    sha512sig1 x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0080000000002010)
 
sha512sig1_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0100000000004020), rs1:x10(0x0000000000000800)
    li  x10, 0x800
    sha512sig1 x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0100000000004020)
 
sha512sig1_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x0200000000008040), rs1:x9(0x0000000000001000)
    li  x9, 0x1000
    sha512sig1 x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0200000000008040)
 
sha512sig1_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0400000000010080), rs1:x8(0x0000000000002000)
    li  x8, 0x2000
    sha512sig1 x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0400000000010080)
 
sha512sig1_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x0800000000020100), rs1:x7(0x0000000000004000)
    li  x7, 0x4000
    sha512sig1 x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0800000000020100)


    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_6_0)

 
sha512sig1_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x1000000000040200), rs1:x6(0x0000000000008000)
    li  x6, 0x8000
    sha512sig1 x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x1000000000040200)
 
sha512sig1_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x2000000000080400), rs1:x5(0x0000000000010000)
    li  x5, 0x10000
    sha512sig1 x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x2000000000080400)
 
sha512sig1_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x4000000000100800), rs1:x4(0x0000000000020000)
    li  x4, 0x20000
    sha512sig1 x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x4000000000100800)
 
sha512sig1_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x8000000000201000), rs1:x3(0x0000000000040000)
    li  x3, 0x40000
    sha512sig1 x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x8000000000201000)
 
sha512sig1_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0000000000402001), rs1:x2(0x0000000000080000)
    li  x2, 0x80000
    sha512sig1 x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000000402001)


    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x5,signature_7_0)

 
sha512sig1_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0000000000804002), rs1:x1(0x0000000000100000)
    li  x1, 0x100000
    sha512sig1 x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0000000000804002)
 
sha512sig1_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0000000001008004), rs1:x31(0x0000000000200000)
    li  x31, 0x200000
    sha512sig1 x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0000000001008004)
 
sha512sig1_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0000000002010008), rs1:x30(0x0000000000400000)
    li  x30, 0x400000
    sha512sig1 x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0000000002010008)
 
sha512sig1_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0000000004020010), rs1:x29(0x0000000000800000)
    li  x29, 0x800000
    sha512sig1 x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0000000004020010)
 
sha512sig1_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x0000000008040020), rs1:x28(0x0000000001000000)
    li  x28, 0x1000000
    sha512sig1 x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0000000008040020)


    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_8_0)

 
sha512sig1_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x0000000010080040), rs1:x27(0x0000000002000000)
    li  x27, 0x2000000
    sha512sig1 x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000010080040)
 
sha512sig1_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x0000000020100080), rs1:x26(0x0000000004000000)
    li  x26, 0x4000000
    sha512sig1 x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000020100080)
 
sha512sig1_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0000000040200100), rs1:x25(0x0000000008000000)
    li  x25, 0x8000000
    sha512sig1 x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000040200100)
 
sha512sig1_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0000000080400200), rs1:x24(0x0000000010000000)
    li  x24, 0x10000000
    sha512sig1 x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000080400200)
 
sha512sig1_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0000000100800400), rs1:x23(0x0000000020000000)
    li  x23, 0x20000000
    sha512sig1 x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000100800400)


    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_9_0)

 
sha512sig1_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x0000000201000800), rs1:x22(0x0000000040000000)
    li  x22, 0x40000000
    sha512sig1 x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000201000800)
 
sha512sig1_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0000000402001000), rs1:x21(0x0000000080000000)
    li  x21, 0x80000000
    sha512sig1 x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000402001000)
 
sha512sig1_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0000000804002000), rs1:x20(0x0000000100000000)
    li  x20, 0x100000000
    sha512sig1 x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000804002000)
 
sha512sig1_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x0000001008004000), rs1:x19(0x0000000200000000)
    li  x19, 0x200000000
    sha512sig1 x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000001008004000)
 
sha512sig1_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x0000002010008000), rs1:x18(0x0000000400000000)
    li  x18, 0x400000000
    sha512sig1 x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x0000002010008000)


    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x3,signature_10_0)

 
sha512sig1_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x0000004020010000), rs1:x17(0x0000000800000000)
    li  x17, 0x800000000
    sha512sig1 x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x0000004020010000)
 
sha512sig1_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0000008040020000), rs1:x16(0x0000001000000000)
    li  x16, 0x1000000000
    sha512sig1 x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0000008040020000)
 
sha512sig1_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0000010080040000), rs1:x15(0x0000002000000000)
    li  x15, 0x2000000000
    sha512sig1 x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x0000010080040000)
 
sha512sig1_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x0000020100080000), rs1:x14(0x0000004000000000)
    li  x14, 0x4000000000
    sha512sig1 x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x0000020100080000)
 
sha512sig1_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000040200100000), rs1:x13(0x0000008000000000)
    li  x13, 0x8000000000
    sha512sig1 x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000040200100000)


    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_11_0)

 
sha512sig1_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0000080400200000), rs1:x12(0x0000010000000000)
    li  x12, 0x10000000000
    sha512sig1 x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0000080400200000)
 
sha512sig1_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000100800400000), rs1:x11(0x0000020000000000)
    li  x11, 0x20000000000
    sha512sig1 x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000100800400000)
 
sha512sig1_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000201000800000), rs1:x10(0x0000040000000000)
    li  x10, 0x40000000000
    sha512sig1 x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000201000800000)
 
sha512sig1_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000402001000000), rs1:x9(0x0000080000000000)
    li  x9, 0x80000000000
    sha512sig1 x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000402001000000)
 
sha512sig1_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000804002000000), rs1:x8(0x0000100000000000)
    li  x8, 0x100000000000
    sha512sig1 x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000804002000000)


    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_12_0)

 
sha512sig1_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0001008004000000), rs1:x7(0x0000200000000000)
    li  x7, 0x200000000000
    sha512sig1 x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0001008004000000)
 
sha512sig1_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x0002010008000000), rs1:x6(0x0000400000000000)
    li  x6, 0x400000000000
    sha512sig1 x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0002010008000000)
 
sha512sig1_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0004020010000000), rs1:x5(0x0000800000000000)
    li  x5, 0x800000000000
    sha512sig1 x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x0004020010000000)
 
sha512sig1_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0008040020000000), rs1:x4(0x0001000000000000)
    li  x4, 0x1000000000000
    sha512sig1 x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x0008040020000000)
 
sha512sig1_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0010080040000000), rs1:x3(0x0002000000000000)
    li  x3, 0x2000000000000
    sha512sig1 x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x0010080040000000)


    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x4,signature_13_0)

 
sha512sig1_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0020100080000000), rs1:x2(0x0004000000000000)
    li  x2, 0x4000000000000
    sha512sig1 x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x0020100080000000)
 
sha512sig1_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0040200100000000), rs1:x1(0x0008000000000000)
    li  x1, 0x8000000000000
    sha512sig1 x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x0040200100000000)
 
sha512sig1_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0080400200000000), rs1:x31(0x0010000000000000)
    li  x31, 0x10000000000000
    sha512sig1 x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x0080400200000000)
 
sha512sig1_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0100800400000000), rs1:x30(0x0020000000000000)
    li  x30, 0x20000000000000
    sha512sig1 x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x0100800400000000)
 
sha512sig1_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0201000800000000), rs1:x29(0x0040000000000000)
    li  x29, 0x40000000000000
    sha512sig1 x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x0201000800000000)


    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_14_0)

 
sha512sig1_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0402001000000000), rs1:x28(0x0080000000000000)
    li  x28, 0x80000000000000
    sha512sig1 x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x0402001000000000)
 
sha512sig1_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0804002000000000), rs1:x27(0x0100000000000000)
    li  x27, 0x100000000000000
    sha512sig1 x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0804002000000000)
 
sha512sig1_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x1008004000000000), rs1:x26(0x0200000000000000)
    li  x26, 0x200000000000000
    sha512sig1 x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x1008004000000000)
 
sha512sig1_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x2010008000000000), rs1:x25(0x0400000000000000)
    li  x25, 0x400000000000000
    sha512sig1 x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x2010008000000000)
 
sha512sig1_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x4020010000000000), rs1:x24(0x0800000000000000)
    li  x24, 0x800000000000000
    sha512sig1 x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x4020010000000000)


    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_15_0)

 
sha512sig1_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x8040020000000000), rs1:x23(0x1000000000000000)
    li  x23, 0x1000000000000000
    sha512sig1 x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x8040020000000000)
 
sha512sig1_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x0080040000000001), rs1:x22(0x2000000000000000)
    li  x22, 0x2000000000000000
    sha512sig1 x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0080040000000001)
 
sha512sig1_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x0100080000000002), rs1:x21(0x4000000000000000)
    li  x21, 0x4000000000000000
    sha512sig1 x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0100080000000002)
 
sha512sig1_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x0200100000000004), rs1:x20(0x8000000000000000)
    li  x20, 0x8000000000000000
    sha512sig1 x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0200100000000004)
 
sha512sig1_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000)
    li  x19, 0x0
    sha512sig1 x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)


    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x4,signature_16_0)

 
sha512sig1_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0x03ffdffffffffff7), rs1:x18(0xfffffffffffffffe)
    li  x18, 0xfffffffffffffffe
    sha512sig1 x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0x03ffdffffffffff7)
 
sha512sig1_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0x03ffbfffffffffef), rs1:x17(0xfffffffffffffffd)
    li  x17, 0xfffffffffffffffd
    sha512sig1 x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0x03ffbfffffffffef)
 
sha512sig1_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0x03ff7fffffffffdf), rs1:x16(0xfffffffffffffffb)
    li  x16, 0xfffffffffffffffb
    sha512sig1 x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0x03ff7fffffffffdf)
 
sha512sig1_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0x03feffffffffffbf), rs1:x15(0xfffffffffffffff7)
    li  x15, 0xfffffffffffffff7
    sha512sig1 x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0x03feffffffffffbf)
 
sha512sig1_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0x03fdffffffffff7f), rs1:x14(0xffffffffffffffef)
    li  x14, 0xffffffffffffffef
    sha512sig1 x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0x03fdffffffffff7f)


    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_17_0)

 
sha512sig1_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0x03fbfffffffffeff), rs1:x13(0xffffffffffffffdf)
    li  x13, 0xffffffffffffffdf
    sha512sig1 x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x03fbfffffffffeff)
 
sha512sig1_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0x03f7fffffffffdfe), rs1:x12(0xffffffffffffffbf)
    li  x12, 0xffffffffffffffbf
    sha512sig1 x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x03f7fffffffffdfe)
 
sha512sig1_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0x03effffffffffbfd), rs1:x11(0xffffffffffffff7f)
    li  x11, 0xffffffffffffff7f
    sha512sig1 x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x03effffffffffbfd)
 
sha512sig1_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0x03dffffffffff7fb), rs1:x10(0xfffffffffffffeff)
    li  x10, 0xfffffffffffffeff
    sha512sig1 x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x03dffffffffff7fb)
 
sha512sig1_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0x03bfffffffffeff7), rs1:x9(0xfffffffffffffdff)
    li  x9, 0xfffffffffffffdff
    sha512sig1 x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x03bfffffffffeff7)


    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_18_0)

 
sha512sig1_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0x037fffffffffdfef), rs1:x8(0xfffffffffffffbff)
    li  x8, 0xfffffffffffffbff
    sha512sig1 x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x037fffffffffdfef)
 
sha512sig1_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0x02ffffffffffbfdf), rs1:x7(0xfffffffffffff7ff)
    li  x7, 0xfffffffffffff7ff
    sha512sig1 x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x02ffffffffffbfdf)
 
sha512sig1_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0x01ffffffffff7fbf), rs1:x6(0xffffffffffffefff)
    li  x6, 0xffffffffffffefff
    sha512sig1 x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x01ffffffffff7fbf)
 
sha512sig1_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0x07fffffffffeff7f), rs1:x5(0xffffffffffffdfff)
    li  x5, 0xffffffffffffdfff
    sha512sig1 x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x07fffffffffeff7f)
 
sha512sig1_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0x0bfffffffffdfeff), rs1:x4(0xffffffffffffbfff)
    li  x4, 0xffffffffffffbfff
    sha512sig1 x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x0bfffffffffdfeff)


    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x4,signature_19_0)

 
sha512sig1_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0x13fffffffffbfdff), rs1:x3(0xffffffffffff7fff)
    li  x3, 0xffffffffffff7fff
    sha512sig1 x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0x13fffffffffbfdff)
 
sha512sig1_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0x23fffffffff7fbff), rs1:x2(0xfffffffffffeffff)
    li  x2, 0xfffffffffffeffff
    sha512sig1 x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x23fffffffff7fbff)
 
sha512sig1_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0x43ffffffffeff7ff), rs1:x1(0xfffffffffffdffff)
    li  x1, 0xfffffffffffdffff
    sha512sig1 x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x43ffffffffeff7ff)
 
sha512sig1_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0x83ffffffffdfefff), rs1:x31(0xfffffffffffbffff)
    li  x31, 0xfffffffffffbffff
    sha512sig1 x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x83ffffffffdfefff)
 
sha512sig1_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0x03ffffffffbfdffe), rs1:x30(0xfffffffffff7ffff)
    li  x30, 0xfffffffffff7ffff
    sha512sig1 x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x03ffffffffbfdffe)


    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_20_0)

 
sha512sig1_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0x03ffffffff7fbffd), rs1:x29(0xffffffffffefffff)
    li  x29, 0xffffffffffefffff
    sha512sig1 x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0x03ffffffff7fbffd)
 
sha512sig1_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0x03fffffffeff7ffb), rs1:x28(0xffffffffffdfffff)
    li  x28, 0xffffffffffdfffff
    sha512sig1 x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x03fffffffeff7ffb)
 
sha512sig1_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0x03fffffffdfefff7), rs1:x27(0xffffffffffbfffff)
    li  x27, 0xffffffffffbfffff
    sha512sig1 x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x03fffffffdfefff7)
 
sha512sig1_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0x03fffffffbfdffef), rs1:x26(0xffffffffff7fffff)
    li  x26, 0xffffffffff7fffff
    sha512sig1 x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x03fffffffbfdffef)
 
sha512sig1_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0x03fffffff7fbffdf), rs1:x25(0xfffffffffeffffff)
    li  x25, 0xfffffffffeffffff
    sha512sig1 x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x03fffffff7fbffdf)


    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_21_0)

 
sha512sig1_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0x03ffffffeff7ffbf), rs1:x24(0xfffffffffdffffff)
    li  x24, 0xfffffffffdffffff
    sha512sig1 x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x03ffffffeff7ffbf)
 
sha512sig1_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0x03ffffffdfefff7f), rs1:x23(0xfffffffffbffffff)
    li  x23, 0xfffffffffbffffff
    sha512sig1 x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x03ffffffdfefff7f)
 
sha512sig1_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0x03ffffffbfdffeff), rs1:x22(0xfffffffff7ffffff)
    li  x22, 0xfffffffff7ffffff
    sha512sig1 x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x03ffffffbfdffeff)
 
sha512sig1_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0x03ffffff7fbffdff), rs1:x21(0xffffffffefffffff)
    li  x21, 0xffffffffefffffff
    sha512sig1 x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x03ffffff7fbffdff)
 
sha512sig1_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0x03fffffeff7ffbff), rs1:x20(0xffffffffdfffffff)
    li  x20, 0xffffffffdfffffff
    sha512sig1 x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x03fffffeff7ffbff)


    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x5,signature_22_0)

 
sha512sig1_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0x03fffffdfefff7ff), rs1:x19(0xffffffffbfffffff)
    li  x19, 0xffffffffbfffffff
    sha512sig1 x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0x03fffffdfefff7ff)
 
sha512sig1_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0x03fffffbfdffefff), rs1:x18(0xffffffff7fffffff)
    li  x18, 0xffffffff7fffffff
    sha512sig1 x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0x03fffffbfdffefff)
 
sha512sig1_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0x03fffff7fbffdfff), rs1:x17(0xfffffffeffffffff)
    li  x17, 0xfffffffeffffffff
    sha512sig1 x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0x03fffff7fbffdfff)
 
sha512sig1_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0x03ffffeff7ffbfff), rs1:x16(0xfffffffdffffffff)
    li  x16, 0xfffffffdffffffff
    sha512sig1 x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0x03ffffeff7ffbfff)
 
sha512sig1_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0x03ffffdfefff7fff), rs1:x15(0xfffffffbffffffff)
    li  x15, 0xfffffffbffffffff
    sha512sig1 x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0x03ffffdfefff7fff)


    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_23_0)

 
sha512sig1_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0x03ffffbfdffeffff), rs1:x14(0xfffffff7ffffffff)
    li  x14, 0xfffffff7ffffffff
    sha512sig1 x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x03ffffbfdffeffff)
 
sha512sig1_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0x03ffff7fbffdffff), rs1:x13(0xffffffefffffffff)
    li  x13, 0xffffffefffffffff
    sha512sig1 x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x03ffff7fbffdffff)
 
sha512sig1_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0x03fffeff7ffbffff), rs1:x12(0xffffffdfffffffff)
    li  x12, 0xffffffdfffffffff
    sha512sig1 x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x03fffeff7ffbffff)
 
sha512sig1_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0x03fffdfefff7ffff), rs1:x11(0xffffffbfffffffff)
    li  x11, 0xffffffbfffffffff
    sha512sig1 x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x03fffdfefff7ffff)
 
sha512sig1_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0x03fffbfdffefffff), rs1:x10(0xffffff7fffffffff)
    li  x10, 0xffffff7fffffffff
    sha512sig1 x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x03fffbfdffefffff)


    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_24_0)

 
sha512sig1_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0x03fff7fbffdfffff), rs1:x9(0xfffffeffffffffff)
    li  x9, 0xfffffeffffffffff
    sha512sig1 x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x03fff7fbffdfffff)
 
sha512sig1_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0x03ffeff7ffbfffff), rs1:x8(0xfffffdffffffffff)
    li  x8, 0xfffffdffffffffff
    sha512sig1 x24, x8
    sd x24, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x03ffeff7ffbfffff)
 
sha512sig1_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0x03ffdfefff7fffff), rs1:x7(0xfffffbffffffffff)
    li  x7, 0xfffffbffffffffff
    sha512sig1 x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x03ffdfefff7fffff)
 
sha512sig1_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0x03ffbfdffeffffff), rs1:x6(0xfffff7ffffffffff)
    li  x6, 0xfffff7ffffffffff
    sha512sig1 x26, x6
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x03ffbfdffeffffff)
 
sha512sig1_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0x03ff7fbffdffffff), rs1:x5(0xffffefffffffffff)
    li  x5, 0xffffefffffffffff
    sha512sig1 x27, x5
    sd x27, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x03ff7fbffdffffff)


    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x5,signature_25_0)

 
sha512sig1_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0x03feff7ffbffffff), rs1:x4(0xffffdfffffffffff)
    li  x4, 0xffffdfffffffffff
    sha512sig1 x28, x4
    sd x28, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x28, 0x03feff7ffbffffff)
 
sha512sig1_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0x03fdfefff7ffffff), rs1:x3(0xffffbfffffffffff)
    li  x3, 0xffffbfffffffffff
    sha512sig1 x29, x3
    sd x29, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x29, 0x03fdfefff7ffffff)
 
sha512sig1_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0x03fbfdffefffffff), rs1:x2(0xffff7fffffffffff)
    li  x2, 0xffff7fffffffffff
    sha512sig1 x30, x2
    sd x30, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x30, 0x03fbfdffefffffff)
 
sha512sig1_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0x03f7fbffdfffffff), rs1:x1(0xfffeffffffffffff)
    li  x1, 0xfffeffffffffffff
    sha512sig1 x31, x1
    sd x31, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x03f7fbffdfffffff)
 
sha512sig1_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0x03eff7ffbfffffff), rs1:x31(0xfffdffffffffffff)
    li  x31, 0xfffdffffffffffff
    sha512sig1 x1, x31
    sd x1, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x03eff7ffbfffffff)


    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_26_0)

 
sha512sig1_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0x03dfefff7fffffff), rs1:x30(0xfffbffffffffffff)
    li  x30, 0xfffbffffffffffff
    sha512sig1 x2, x30
    sd x2, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x03dfefff7fffffff)
 
sha512sig1_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0x03bfdffeffffffff), rs1:x29(0xfff7ffffffffffff)
    li  x29, 0xfff7ffffffffffff
    sha512sig1 x3, x29
    sd x3, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x03bfdffeffffffff)
 
sha512sig1_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0x037fbffdffffffff), rs1:x28(0xffefffffffffffff)
    li  x28, 0xffefffffffffffff
    sha512sig1 x4, x28
    sd x4, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x037fbffdffffffff)
 
sha512sig1_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0x02ff7ffbffffffff), rs1:x27(0xffdfffffffffffff)
    li  x27, 0xffdfffffffffffff
    sha512sig1 x5, x27
    sd x5, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x02ff7ffbffffffff)
 
sha512sig1_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0x01fefff7ffffffff), rs1:x26(0xffbfffffffffffff)
    li  x26, 0xffbfffffffffffff
    sha512sig1 x6, x26
    sd x6, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x6, 0x01fefff7ffffffff)


    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_27_0)

 
sha512sig1_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0x07fdffefffffffff), rs1:x25(0xff7fffffffffffff)
    li  x25, 0xff7fffffffffffff
    sha512sig1 x7, x25
    sd x7, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x07fdffefffffffff)
 
sha512sig1_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0x0bfbffdfffffffff), rs1:x24(0xfeffffffffffffff)
    li  x24, 0xfeffffffffffffff
    sha512sig1 x8, x24
    sd x8, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0bfbffdfffffffff)
 
sha512sig1_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0x13f7ffbfffffffff), rs1:x23(0xfdffffffffffffff)
    li  x23, 0xfdffffffffffffff
    sha512sig1 x9, x23
    sd x9, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x13f7ffbfffffffff)
 
sha512sig1_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0x23efff7fffffffff), rs1:x22(0xfbffffffffffffff)
    li  x22, 0xfbffffffffffffff
    sha512sig1 x10, x22
    sd x10, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x23efff7fffffffff)
 
sha512sig1_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0x43dffeffffffffff), rs1:x21(0xf7ffffffffffffff)
    li  x21, 0xf7ffffffffffffff
    sha512sig1 x11, x21
    sd x11, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x43dffeffffffffff)


    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x6,signature_28_0)

 
sha512sig1_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0x83bffdffffffffff), rs1:x20(0xefffffffffffffff)
    li  x20, 0xefffffffffffffff
    sha512sig1 x12, x20
    sd x12, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x83bffdffffffffff)
 
sha512sig1_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0x037ffbfffffffffe), rs1:x19(0xdfffffffffffffff)
    li  x19, 0xdfffffffffffffff
    sha512sig1 x13, x19
    sd x13, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x037ffbfffffffffe)
 
sha512sig1_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0x02fff7fffffffffd), rs1:x18(0xbfffffffffffffff)
    li  x18, 0xbfffffffffffffff
    sha512sig1 x14, x18
    sd x14, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x02fff7fffffffffd)
 
sha512sig1_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0x01ffeffffffffffb), rs1:x17(0x7fffffffffffffff)
    li  x17, 0x7fffffffffffffff
    sha512sig1 x15, x17
    sd x15, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x01ffeffffffffffb)
 
sha512sig1_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0x03ffffffffffffff), rs1:x16(0xffffffffffffffff)
    li  x16, 0xffffffffffffffff
    sha512sig1 x16, x16
    sd x16, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x16, 0x03ffffffffffffff)


    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_29_0)

 
sha512sig1_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0000200000000008), rs1:x15(0x0000000000000001)
    li  x15, 0x1
    sha512sig1 x17, x15
    sd x17, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x17, 0x0000200000000008)
 
sha512sig1_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0000400000000010), rs1:x14(0x0000000000000002)
    li  x14, 0x2
    sha512sig1 x18, x14
    sd x18, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x0000400000000010)
 
sha512sig1_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0000800000000020), rs1:x13(0x0000000000000004)
    li  x13, 0x4
    sha512sig1 x19, x13
    sd x19, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x0000800000000020)
 
sha512sig1_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0001000000000040), rs1:x12(0x0000000000000008)
    li  x12, 0x8
    sha512sig1 x20, x12
    sd x20, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0001000000000040)
 
sha512sig1_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0002000000000080), rs1:x11(0x0000000000000010)
    li  x11, 0x10
    sha512sig1 x21, x11
    sd x21, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0002000000000080)


    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_30_0)

 
sha512sig1_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0004000000000100), rs1:x10(0x0000000000000020)
    li  x10, 0x20
    sha512sig1 x22, x10
    sd x22, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0004000000000100)
 
sha512sig1_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0008000000000201), rs1:x9(0x0000000000000040)
    li  x9, 0x40
    sha512sig1 x23, x9
    sd x23, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0008000000000201)
 
sha512sig1_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0010000000000402), rs1:x8(0x0000000000000080)
    li  x8, 0x80
    sha512sig1 x24, x8
    sd x24, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0010000000000402)
 
sha512sig1_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0020000000000804), rs1:x7(0x0000000000000100)
    li  x7, 0x100
    sha512sig1 x25, x7
    sd x25, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0020000000000804)
 
sha512sig1_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0040000000001008), rs1:x6(0x0000000000000200)
    li  x6, 0x200
    sha512sig1 x26, x6
    sd x26, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0040000000001008)


    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x6,signature_31_0)

 
sha512sig1_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0080000000002010), rs1:x5(0x0000000000000400)
    li  x5, 0x400
    sha512sig1 x27, x5
    sd x27, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0080000000002010)
 
sha512sig1_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0100000000004020), rs1:x4(0x0000000000000800)
    li  x4, 0x800
    sha512sig1 x28, x4
    sd x28, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0100000000004020)
 
sha512sig1_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0200000000008040), rs1:x3(0x0000000000001000)
    li  x3, 0x1000
    sha512sig1 x29, x3
    sd x29, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0200000000008040)
 
sha512sig1_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0400000000010080), rs1:x2(0x0000000000002000)
    li  x2, 0x2000
    sha512sig1 x30, x2
    sd x30, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0400000000010080)
 
sha512sig1_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0800000000020100), rs1:x1(0x0000000000004000)
    li  x1, 0x4000
    sha512sig1 x31, x1
    sd x31, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x0800000000020100)


    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x6,signature_32_0)

 
sha512sig1_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x1000000000040200), rs1:x31(0x0000000000008000)
    li  x31, 0x8000
    sha512sig1 x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x1000000000040200)
 
sha512sig1_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x2000000000080400), rs1:x30(0x0000000000010000)
    li  x30, 0x10000
    sha512sig1 x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x2000000000080400)
 
sha512sig1_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x4000000000100800), rs1:x29(0x0000000000020000)
    li  x29, 0x20000
    sha512sig1 x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x4000000000100800)
 
sha512sig1_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x8000000000201000), rs1:x28(0x0000000000040000)
    li  x28, 0x40000
    sha512sig1 x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x8000000000201000)
 
sha512sig1_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000000402001), rs1:x27(0x0000000000080000)
    li  x27, 0x80000
    sha512sig1 x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x0000000000402001)


    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_33_0)

 
sha512sig1_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000000804002), rs1:x26(0x0000000000100000)
    li  x26, 0x100000
    sha512sig1 x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000804002)
 
sha512sig1_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000001008004), rs1:x25(0x0000000000200000)
    li  x25, 0x200000
    sha512sig1 x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000001008004)
 
sha512sig1_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000002010008), rs1:x24(0x0000000000400000)
    li  x24, 0x400000
    sha512sig1 x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000002010008)
 
sha512sig1_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000004020010), rs1:x23(0x0000000000800000)
    li  x23, 0x800000
    sha512sig1 x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000004020010)
 
sha512sig1_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000008040020), rs1:x22(0x0000000001000000)
    li  x22, 0x1000000
    sha512sig1 x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000008040020)


    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_34_0)

 
sha512sig1_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000010080040), rs1:x21(0x0000000002000000)
    li  x21, 0x2000000
    sha512sig1 x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x0000000010080040)
 
sha512sig1_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000020100080), rs1:x20(0x0000000004000000)
    li  x20, 0x4000000
    sha512sig1 x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0000000020100080)
 
sha512sig1_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000040200100), rs1:x19(0x0000000008000000)
    li  x19, 0x8000000
    sha512sig1 x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0000000040200100)
 
sha512sig1_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000080400200), rs1:x18(0x0000000010000000)
    li  x18, 0x10000000
    sha512sig1 x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0000000080400200)
 
sha512sig1_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000100800400), rs1:x17(0x0000000020000000)
    li  x17, 0x20000000
    sha512sig1 x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0000000100800400)


    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x2,signature_35_0)

 
sha512sig1_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000201000800), rs1:x16(0x0000000040000000)
    li  x16, 0x40000000
    sha512sig1 x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0000000201000800)
 
sha512sig1_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000000402001000), rs1:x15(0x0000000080000000)
    li  x15, 0x80000000
    sha512sig1 x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x0000000402001000)
 
sha512sig1_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000804002000), rs1:x14(0x0000000100000000)
    li  x14, 0x100000000
    sha512sig1 x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x0000000804002000)
 
sha512sig1_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000001008004000), rs1:x13(0x0000000200000000)
    li  x13, 0x200000000
    sha512sig1 x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0000001008004000)
 
sha512sig1_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000002010008000), rs1:x12(0x0000000400000000)
    li  x12, 0x400000000
    sha512sig1 x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0000002010008000)


    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_36_0)

 
sha512sig1_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000004020010000), rs1:x11(0x0000000800000000)
    li  x11, 0x800000000
    sha512sig1 x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000004020010000)
 
sha512sig1_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000008040020000), rs1:x10(0x0000001000000000)
    li  x10, 0x1000000000
    sha512sig1 x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000008040020000)
 
sha512sig1_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000010080040000), rs1:x9(0x0000002000000000)
    li  x9, 0x2000000000
    sha512sig1 x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000010080040000)
 
sha512sig1_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000020100080000), rs1:x8(0x0000004000000000)
    li  x8, 0x4000000000
    sha512sig1 x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000020100080000)
 
sha512sig1_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000040200100000), rs1:x7(0x0000008000000000)
    li  x7, 0x8000000000
    sha512sig1 x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000040200100000)


    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_37_0)

 
sha512sig1_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000080400200000), rs1:x6(0x0000010000000000)
    li  x6, 0x10000000000
    sha512sig1 x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x0000080400200000)
 
sha512sig1_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000100800400000), rs1:x5(0x0000020000000000)
    li  x5, 0x20000000000
    sha512sig1 x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000100800400000)
 
sha512sig1_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000201000800000), rs1:x4(0x0000040000000000)
    li  x4, 0x40000000000
    sha512sig1 x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000201000800000)
 
sha512sig1_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000402001000000), rs1:x3(0x0000080000000000)
    li  x3, 0x80000000000
    sha512sig1 x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000402001000000)
 
sha512sig1_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000804002000000), rs1:x2(0x0000100000000000)
    li  x2, 0x100000000000
    sha512sig1 x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000804002000000)


    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x5,signature_38_0)

 
sha512sig1_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0001008004000000), rs1:x1(0x0000200000000000)
    li  x1, 0x200000000000
    sha512sig1 x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0001008004000000)
 
sha512sig1_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0002010008000000), rs1:x31(0x0000400000000000)
    li  x31, 0x400000000000
    sha512sig1 x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0002010008000000)
 
sha512sig1_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0004020010000000), rs1:x30(0x0000800000000000)
    li  x30, 0x800000000000
    sha512sig1 x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0004020010000000)
 
sha512sig1_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0008040020000000), rs1:x29(0x0001000000000000)
    li  x29, 0x1000000000000
    sha512sig1 x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0008040020000000)
 
sha512sig1_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0010080040000000), rs1:x28(0x0002000000000000)
    li  x28, 0x2000000000000
    sha512sig1 x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0010080040000000)


    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_39_0)

 
sha512sig1_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0020100080000000), rs1:x27(0x0004000000000000)
    li  x27, 0x4000000000000
    sha512sig1 x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0020100080000000)
 
sha512sig1_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0040200100000000), rs1:x26(0x0008000000000000)
    li  x26, 0x8000000000000
    sha512sig1 x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0040200100000000)
 
sha512sig1_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0080400200000000), rs1:x25(0x0010000000000000)
    li  x25, 0x10000000000000
    sha512sig1 x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0080400200000000)
 
sha512sig1_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0100800400000000), rs1:x24(0x0020000000000000)
    li  x24, 0x20000000000000
    sha512sig1 x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0100800400000000)
 
sha512sig1_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0201000800000000), rs1:x23(0x0040000000000000)
    li  x23, 0x40000000000000
    sha512sig1 x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0201000800000000)


    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_40_0)

 
sha512sig1_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0402001000000000), rs1:x22(0x0080000000000000)
    li  x22, 0x80000000000000
    sha512sig1 x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0402001000000000)
 
sha512sig1_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0804002000000000), rs1:x21(0x0100000000000000)
    li  x21, 0x100000000000000
    sha512sig1 x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0804002000000000)
 
sha512sig1_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x1008004000000000), rs1:x20(0x0200000000000000)
    li  x20, 0x200000000000000
    sha512sig1 x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x1008004000000000)
 
sha512sig1_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x2010008000000000), rs1:x19(0x0400000000000000)
    li  x19, 0x400000000000000
    sha512sig1 x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x2010008000000000)
 
sha512sig1_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x4020010000000000), rs1:x18(0x0800000000000000)
    li  x18, 0x800000000000000
    sha512sig1 x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x4020010000000000)


    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x3,signature_41_0)

 
sha512sig1_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x8040020000000000), rs1:x17(0x1000000000000000)
    li  x17, 0x1000000000000000
    sha512sig1 x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x8040020000000000)
 
sha512sig1_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x0080040000000001), rs1:x16(0x2000000000000000)
    li  x16, 0x2000000000000000
    sha512sig1 x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0080040000000001)
 
sha512sig1_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x0100080000000002), rs1:x15(0x4000000000000000)
    li  x15, 0x4000000000000000
    sha512sig1 x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x0100080000000002)
 
sha512sig1_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x0200100000000004), rs1:x14(0x8000000000000000)
    li  x14, 0x8000000000000000
    sha512sig1 x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x0200100000000004)
 
sha512sig1_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000)
    li  x13, 0x0
    sha512sig1 x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000000000000000)


    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_42_0)

 
sha512sig1_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0x03ffdffffffffff7), rs1:x12(0xfffffffffffffffe)
    li  x12, 0xfffffffffffffffe
    sha512sig1 x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x03ffdffffffffff7)
 
sha512sig1_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0x03ffbfffffffffef), rs1:x11(0xfffffffffffffffd)
    li  x11, 0xfffffffffffffffd
    sha512sig1 x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x03ffbfffffffffef)
 
sha512sig1_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0x03ff7fffffffffdf), rs1:x10(0xfffffffffffffffb)
    li  x10, 0xfffffffffffffffb
    sha512sig1 x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x03ff7fffffffffdf)
 
sha512sig1_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0x03feffffffffffbf), rs1:x9(0xfffffffffffffff7)
    li  x9, 0xfffffffffffffff7
    sha512sig1 x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x03feffffffffffbf)
 
sha512sig1_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0x03fdffffffffff7f), rs1:x8(0xffffffffffffffef)
    li  x8, 0xffffffffffffffef
    sha512sig1 x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x03fdffffffffff7f)


    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_43_0)

 
sha512sig1_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0x03fbfffffffffeff), rs1:x7(0xffffffffffffffdf)
    li  x7, 0xffffffffffffffdf
    sha512sig1 x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x03fbfffffffffeff)
 
sha512sig1_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0x03f7fffffffffdfe), rs1:x6(0xffffffffffffffbf)
    li  x6, 0xffffffffffffffbf
    sha512sig1 x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x03f7fffffffffdfe)
 
sha512sig1_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0x03effffffffffbfd), rs1:x5(0xffffffffffffff7f)
    li  x5, 0xffffffffffffff7f
    sha512sig1 x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x03effffffffffbfd)
 
sha512sig1_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0x03dffffffffff7fb), rs1:x4(0xfffffffffffffeff)
    li  x4, 0xfffffffffffffeff
    sha512sig1 x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x03dffffffffff7fb)
 
sha512sig1_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0x03bfffffffffeff7), rs1:x3(0xfffffffffffffdff)
    li  x3, 0xfffffffffffffdff
    sha512sig1 x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x03bfffffffffeff7)


    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x4,signature_44_0)

 
sha512sig1_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0x037fffffffffdfef), rs1:x2(0xfffffffffffffbff)
    li  x2, 0xfffffffffffffbff
    sha512sig1 x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x037fffffffffdfef)
 
sha512sig1_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0x02ffffffffffbfdf), rs1:x1(0xfffffffffffff7ff)
    li  x1, 0xfffffffffffff7ff
    sha512sig1 x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x02ffffffffffbfdf)
 
sha512sig1_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0x01ffffffffff7fbf), rs1:x31(0xffffffffffffefff)
    li  x31, 0xffffffffffffefff
    sha512sig1 x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x01ffffffffff7fbf)
 
sha512sig1_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0x07fffffffffeff7f), rs1:x30(0xffffffffffffdfff)
    li  x30, 0xffffffffffffdfff
    sha512sig1 x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x07fffffffffeff7f)
 
sha512sig1_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0x0bfffffffffdfeff), rs1:x29(0xffffffffffffbfff)
    li  x29, 0xffffffffffffbfff
    sha512sig1 x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x0bfffffffffdfeff)


    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_45_0)

 
sha512sig1_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0x13fffffffffbfdff), rs1:x28(0xffffffffffff7fff)
    li  x28, 0xffffffffffff7fff
    sha512sig1 x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x13fffffffffbfdff)
 
sha512sig1_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0x23fffffffff7fbff), rs1:x27(0xfffffffffffeffff)
    li  x27, 0xfffffffffffeffff
    sha512sig1 x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x23fffffffff7fbff)
 
sha512sig1_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0x43ffffffffeff7ff), rs1:x26(0xfffffffffffdffff)
    li  x26, 0xfffffffffffdffff
    sha512sig1 x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x43ffffffffeff7ff)
 
sha512sig1_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0x83ffffffffdfefff), rs1:x25(0xfffffffffffbffff)
    li  x25, 0xfffffffffffbffff
    sha512sig1 x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x83ffffffffdfefff)
 
sha512sig1_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0x03ffffffffbfdffe), rs1:x24(0xfffffffffff7ffff)
    li  x24, 0xfffffffffff7ffff
    sha512sig1 x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x03ffffffffbfdffe)


    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_46_0)

 
sha512sig1_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0x03ffffffff7fbffd), rs1:x23(0xffffffffffefffff)
    li  x23, 0xffffffffffefffff
    sha512sig1 x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x03ffffffff7fbffd)
 
sha512sig1_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0x03fffffffeff7ffb), rs1:x22(0xffffffffffdfffff)
    li  x22, 0xffffffffffdfffff
    sha512sig1 x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x03fffffffeff7ffb)
 
sha512sig1_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0x03fffffffdfefff7), rs1:x21(0xffffffffffbfffff)
    li  x21, 0xffffffffffbfffff
    sha512sig1 x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x03fffffffdfefff7)
 
sha512sig1_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0x03fffffffbfdffef), rs1:x20(0xffffffffff7fffff)
    li  x20, 0xffffffffff7fffff
    sha512sig1 x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x03fffffffbfdffef)
 
sha512sig1_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0x03fffffff7fbffdf), rs1:x19(0xfffffffffeffffff)
    li  x19, 0xfffffffffeffffff
    sha512sig1 x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x03fffffff7fbffdf)


    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x4,signature_47_0)

 
sha512sig1_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0x03ffffffeff7ffbf), rs1:x18(0xfffffffffdffffff)
    li  x18, 0xfffffffffdffffff
    sha512sig1 x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0x03ffffffeff7ffbf)
 
sha512sig1_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0x03ffffffdfefff7f), rs1:x17(0xfffffffffbffffff)
    li  x17, 0xfffffffffbffffff
    sha512sig1 x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0x03ffffffdfefff7f)
 
sha512sig1_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0x03ffffffbfdffeff), rs1:x16(0xfffffffff7ffffff)
    li  x16, 0xfffffffff7ffffff
    sha512sig1 x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0x03ffffffbfdffeff)
 
sha512sig1_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0x03ffffff7fbffdff), rs1:x15(0xffffffffefffffff)
    li  x15, 0xffffffffefffffff
    sha512sig1 x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0x03ffffff7fbffdff)
 
sha512sig1_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0x03fffffeff7ffbff), rs1:x14(0xffffffffdfffffff)
    li  x14, 0xffffffffdfffffff
    sha512sig1 x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0x03fffffeff7ffbff)


    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_48_0)

 
sha512sig1_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0x03fffffdfefff7ff), rs1:x13(0xffffffffbfffffff)
    li  x13, 0xffffffffbfffffff
    sha512sig1 x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x03fffffdfefff7ff)
 
sha512sig1_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0x03fffffbfdffefff), rs1:x12(0xffffffff7fffffff)
    li  x12, 0xffffffff7fffffff
    sha512sig1 x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x03fffffbfdffefff)
 
sha512sig1_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0x03fffff7fbffdfff), rs1:x11(0xfffffffeffffffff)
    li  x11, 0xfffffffeffffffff
    sha512sig1 x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x03fffff7fbffdfff)
 
sha512sig1_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0x03ffffeff7ffbfff), rs1:x10(0xfffffffdffffffff)
    li  x10, 0xfffffffdffffffff
    sha512sig1 x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x03ffffeff7ffbfff)
 
sha512sig1_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0x03ffffdfefff7fff), rs1:x9(0xfffffffbffffffff)
    li  x9, 0xfffffffbffffffff
    sha512sig1 x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x03ffffdfefff7fff)


    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_49_0)

 
sha512sig1_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0x03ffffbfdffeffff), rs1:x8(0xfffffff7ffffffff)
    li  x8, 0xfffffff7ffffffff
    sha512sig1 x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x03ffffbfdffeffff)
 
sha512sig1_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0x03ffff7fbffdffff), rs1:x7(0xffffffefffffffff)
    li  x7, 0xffffffefffffffff
    sha512sig1 x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x03ffff7fbffdffff)
 
sha512sig1_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0x03fffeff7ffbffff), rs1:x6(0xffffffdfffffffff)
    li  x6, 0xffffffdfffffffff
    sha512sig1 x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x03fffeff7ffbffff)
 
sha512sig1_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0x03fffdfefff7ffff), rs1:x5(0xffffffbfffffffff)
    li  x5, 0xffffffbfffffffff
    sha512sig1 x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x03fffdfefff7ffff)
 
sha512sig1_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0x03fffbfdffefffff), rs1:x4(0xffffff7fffffffff)
    li  x4, 0xffffff7fffffffff
    sha512sig1 x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x03fffbfdffefffff)


    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x4,signature_50_0)

 
sha512sig1_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0x03fff7fbffdfffff), rs1:x3(0xfffffeffffffffff)
    li  x3, 0xfffffeffffffffff
    sha512sig1 x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0x03fff7fbffdfffff)
 
sha512sig1_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0x03ffeff7ffbfffff), rs1:x2(0xfffffdffffffffff)
    li  x2, 0xfffffdffffffffff
    sha512sig1 x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x03ffeff7ffbfffff)
 
sha512sig1_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0x03ffdfefff7fffff), rs1:x1(0xfffffbffffffffff)
    li  x1, 0xfffffbffffffffff
    sha512sig1 x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x03ffdfefff7fffff)
 
sha512sig1_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0x03ffbfdffeffffff), rs1:x31(0xfffff7ffffffffff)
    li  x31, 0xfffff7ffffffffff
    sha512sig1 x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x03ffbfdffeffffff)
 
sha512sig1_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0x03ff7fbffdffffff), rs1:x30(0xffffefffffffffff)
    li  x30, 0xffffefffffffffff
    sha512sig1 x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x03ff7fbffdffffff)


    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_51_0)

 
sha512sig1_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0x03feff7ffbffffff), rs1:x29(0xffffdfffffffffff)
    li  x29, 0xffffdfffffffffff
    sha512sig1 x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0x03feff7ffbffffff)
 
sha512sig1_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0x03fdfefff7ffffff), rs1:x28(0xffffbfffffffffff)
    li  x28, 0xffffbfffffffffff
    sha512sig1 x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x03fdfefff7ffffff)
 
sha512sig1_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0x03fbfdffefffffff), rs1:x27(0xffff7fffffffffff)
    li  x27, 0xffff7fffffffffff
    sha512sig1 x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x03fbfdffefffffff)
 
sha512sig1_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0x03f7fbffdfffffff), rs1:x26(0xfffeffffffffffff)
    li  x26, 0xfffeffffffffffff
    sha512sig1 x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x03f7fbffdfffffff)
 
sha512sig1_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0x03eff7ffbfffffff), rs1:x25(0xfffdffffffffffff)
    li  x25, 0xfffdffffffffffff
    sha512sig1 x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x03eff7ffbfffffff)


    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_52_0)

 
sha512sig1_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0x03dfefff7fffffff), rs1:x24(0xfffbffffffffffff)
    li  x24, 0xfffbffffffffffff
    sha512sig1 x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x03dfefff7fffffff)
 
sha512sig1_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0x03bfdffeffffffff), rs1:x23(0xfff7ffffffffffff)
    li  x23, 0xfff7ffffffffffff
    sha512sig1 x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x03bfdffeffffffff)
 
sha512sig1_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0x037fbffdffffffff), rs1:x22(0xffefffffffffffff)
    li  x22, 0xffefffffffffffff
    sha512sig1 x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x037fbffdffffffff)
 
sha512sig1_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0x02ff7ffbffffffff), rs1:x21(0xffdfffffffffffff)
    li  x21, 0xffdfffffffffffff
    sha512sig1 x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x02ff7ffbffffffff)
 
sha512sig1_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0x01fefff7ffffffff), rs1:x20(0xffbfffffffffffff)
    li  x20, 0xffbfffffffffffff
    sha512sig1 x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x01fefff7ffffffff)


    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x5,signature_53_0)

 
sha512sig1_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0x07fdffefffffffff), rs1:x19(0xff7fffffffffffff)
    li  x19, 0xff7fffffffffffff
    sha512sig1 x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0x07fdffefffffffff)
 
sha512sig1_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0x0bfbffdfffffffff), rs1:x18(0xfeffffffffffffff)
    li  x18, 0xfeffffffffffffff
    sha512sig1 x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0x0bfbffdfffffffff)
 
sha512sig1_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0x13f7ffbfffffffff), rs1:x17(0xfdffffffffffffff)
    li  x17, 0xfdffffffffffffff
    sha512sig1 x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0x13f7ffbfffffffff)
 
sha512sig1_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0x23efff7fffffffff), rs1:x16(0xfbffffffffffffff)
    li  x16, 0xfbffffffffffffff
    sha512sig1 x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0x23efff7fffffffff)
 
sha512sig1_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0x43dffeffffffffff), rs1:x15(0xf7ffffffffffffff)
    li  x15, 0xf7ffffffffffffff
    sha512sig1 x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0x43dffeffffffffff)


    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_54_0)

 
sha512sig1_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0x83bffdffffffffff), rs1:x14(0xefffffffffffffff)
    li  x14, 0xefffffffffffffff
    sha512sig1 x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x83bffdffffffffff)
 
sha512sig1_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0x037ffbfffffffffe), rs1:x13(0xdfffffffffffffff)
    li  x13, 0xdfffffffffffffff
    sha512sig1 x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x037ffbfffffffffe)
 
sha512sig1_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0x02fff7fffffffffd), rs1:x12(0xbfffffffffffffff)
    li  x12, 0xbfffffffffffffff
    sha512sig1 x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x02fff7fffffffffd)
 
sha512sig1_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0x01ffeffffffffffb), rs1:x11(0x7fffffffffffffff)
    li  x11, 0x7fffffffffffffff
    sha512sig1 x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x01ffeffffffffffb)
 
sha512sig1_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0x03ffffffffffffff), rs1:x10(0xffffffffffffffff)
    li  x10, 0xffffffffffffffff
    sha512sig1 x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x03ffffffffffffff)


    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sig1)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sig1)

    RVTEST_SIGBASE(x1,signature_55_0)

 
sha512sig1_01_inst_270:
    // Test 270:  Test with random values
    // result rd:x23(0xcd98b9857e589053), rs1:x9(0x10fd3dedadea5195)
    li  x9, 0x10fd3dedadea5195
    sha512sig1 x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xcd98b9857e589053)
 
sha512sig1_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1)
    li  x8, 0xbd295ce2d2ffbec1
    sha512sig1 x0, x8
    sd x0, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x0, 0x0000000000000000)
 
sha512sig1_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0x7d16137dc24e7660), rs1:x7(0xc9649f05a8e1a8bb)
    li  x7, 0xc9649f05a8e1a8bb
    sha512sig1 x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x7d16137dc24e7660)
 
sha512sig1_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb)
    li  x0, 0x3541291848c99fcb
    sha512sig1 x26, x0
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000000000)
	
#endif


RVTEST_CODE_END sha512sig1_01_code_end
RVTEST_CODE_BEGIN sm3p1_01_init sm3p1_01_code_begin






#ifdef TEST_CASE_1


    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x6,signature_1_0)

 
sm3p1_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x000000004ff67248), rs1:x31(0x10fd3dedadea5195)
    li  x31, 0x10fd3dedadea5195
    sm3p1 x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x000000004ff67248)
 
sm3p1_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x000000006d762861), rs1:x30(0xbd295ce2d2ffbec1)
    li  x30, 0xbd295ce2d2ffbec1
    sm3p1 x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x000000006d762861)
 
sm3p1_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0x0000000021680c1f), rs1:x29(0xc9649f05a8e1a8bb)
    li  x29, 0xc9649f05a8e1a8bb
    sm3p1 x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x0000000021680c1f)
 
sm3p1_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x0000000062885f60), rs1:x28(0x3541291848c99fcb)
    li  x28, 0x3541291848c99fcb
    sm3p1 x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x0000000062885f60)
 
sm3p1_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x00000000c899ffe8), rs1:x27(0x10a24740461d524f)
    li  x27, 0x10a24740461d524f
    sm3p1 x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x00000000c899ffe8)


    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_2_0)

 
sm3p1_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x000000000d74fce2), rs1:x26(0x546b0e54528a10af)
    li  x26, 0x546b0e54528a10af
    sm3p1 x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x000000000d74fce2)
 
sm3p1_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x00000000fd8ac6f3), rs1:x25(0x73a92fd4e19bfbc3)
    li  x25, 0x73a92fd4e19bfbc3
    sm3p1 x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x00000000fd8ac6f3)
 
sm3p1_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x000000006922f784), rs1:x24(0x82f6747f707af2c0)
    li  x24, 0x82f6747f707af2c0
    sm3p1 x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x000000006922f784)
 
sm3p1_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0x000000000182fced), rs1:x23(0xf5adb41aa47d105b)
    li  x23, 0xf5adb41aa47d105b
    sm3p1 x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x000000000182fced)
 
sm3p1_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0x00000000e58348c8), rs1:x22(0xdf7f3844121bcc23)
    li  x22, 0xdf7f3844121bcc23
    sm3p1 x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000e58348c8)


    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_3_0)

 
sm3p1_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x0000000000808001), rs1:x21(0x0000000000000001)
    li  x21, 0x1
    sm3p1 x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x0000000000808001)
 
sm3p1_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x0000000001010002), rs1:x20(0x0000000000000002)
    li  x20, 0x2
    sm3p1 x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0000000001010002)
 
sm3p1_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x0000000002020004), rs1:x19(0x0000000000000004)
    li  x19, 0x4
    sm3p1 x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0000000002020004)
 
sm3p1_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0000000004040008), rs1:x18(0x0000000000000008)
    li  x18, 0x8
    sm3p1 x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0000000004040008)
 
sm3p1_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x0000000008080010), rs1:x17(0x0000000000000010)
    li  x17, 0x10
    sm3p1 x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0000000008080010)


    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x2,signature_4_0)

 
sm3p1_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x0000000010100020), rs1:x16(0x0000000000000020)
    li  x16, 0x20
    sm3p1 x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0000000010100020)
 
sm3p1_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x0000000020200040), rs1:x15(0x0000000000000040)
    li  x15, 0x40
    sm3p1 x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x0000000020200040)
 
sm3p1_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x0000000040400080), rs1:x14(0x0000000000000080)
    li  x14, 0x80
    sm3p1 x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x0000000040400080)
 
sm3p1_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0000000080800100), rs1:x13(0x0000000000000100)
    li  x13, 0x100
    sm3p1 x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0000000080800100)
 
sm3p1_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0000000001000201), rs1:x12(0x0000000000000200)
    li  x12, 0x200
    sm3p1 x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0000000001000201)


    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_5_0)

 
sm3p1_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x0000000002000402), rs1:x11(0x0000000000000400)
    li  x11, 0x400
    sm3p1 x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000002000402)
 
sm3p1_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0000000004000804), rs1:x10(0x0000000000000800)
    li  x10, 0x800
    sm3p1 x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000004000804)
 
sm3p1_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x0000000008001008), rs1:x9(0x0000000000001000)
    li  x9, 0x1000
    sm3p1 x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000008001008)
 
sm3p1_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0000000010002010), rs1:x8(0x0000000000002000)
    li  x8, 0x2000
    sm3p1 x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000010002010)
 
sm3p1_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x0000000020004020), rs1:x7(0x0000000000004000)
    li  x7, 0x4000
    sm3p1 x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000020004020)


    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_6_0)

 
sm3p1_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x0000000040008040), rs1:x6(0x0000000000008000)
    li  x6, 0x8000
    sm3p1 x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x0000000040008040)
 
sm3p1_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x0000000080010080), rs1:x5(0x0000000000010000)
    li  x5, 0x10000
    sm3p1 x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000080010080)
 
sm3p1_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x0000000000020101), rs1:x4(0x0000000000020000)
    li  x4, 0x20000
    sm3p1 x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000000020101)
 
sm3p1_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0000000000040202), rs1:x3(0x0000000000040000)
    li  x3, 0x40000
    sm3p1 x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000000040202)
 
sm3p1_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0000000000080404), rs1:x2(0x0000000000080000)
    li  x2, 0x80000
    sm3p1 x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000000080404)


    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x5,signature_7_0)

 
sm3p1_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0000000000100808), rs1:x1(0x0000000000100000)
    li  x1, 0x100000
    sm3p1 x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0000000000100808)
 
sm3p1_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0000000000201010), rs1:x31(0x0000000000200000)
    li  x31, 0x200000
    sm3p1 x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0000000000201010)
 
sm3p1_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0000000000402020), rs1:x30(0x0000000000400000)
    li  x30, 0x400000
    sm3p1 x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0000000000402020)
 
sm3p1_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0000000000804040), rs1:x29(0x0000000000800000)
    li  x29, 0x800000
    sm3p1 x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0000000000804040)
 
sm3p1_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x0000000001008080), rs1:x28(0x0000000001000000)
    li  x28, 0x1000000
    sm3p1 x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0000000001008080)


    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_8_0)

 
sm3p1_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x0000000002010100), rs1:x27(0x0000000002000000)
    li  x27, 0x2000000
    sm3p1 x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000002010100)
 
sm3p1_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x0000000004020200), rs1:x26(0x0000000004000000)
    li  x26, 0x4000000
    sm3p1 x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000004020200)
 
sm3p1_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0000000008040400), rs1:x25(0x0000000008000000)
    li  x25, 0x8000000
    sm3p1 x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000008040400)
 
sm3p1_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0000000010080800), rs1:x24(0x0000000010000000)
    li  x24, 0x10000000
    sm3p1 x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000010080800)
 
sm3p1_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0000000020101000), rs1:x23(0x0000000020000000)
    li  x23, 0x20000000
    sm3p1 x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000020101000)


    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_9_0)

 
sm3p1_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x0000000040202000), rs1:x22(0x0000000040000000)
    li  x22, 0x40000000
    sm3p1 x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000040202000)
 
sm3p1_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0000000080404000), rs1:x21(0x0000000080000000)
    li  x21, 0x80000000
    sm3p1 x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000080404000)
 
sm3p1_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000100000000)
    li  x20, 0x100000000
    sm3p1 x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000000000000)
 
sm3p1_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000200000000)
    li  x19, 0x200000000
    sm3p1 x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)
 
sm3p1_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0000000400000000)
    li  x18, 0x400000000
    sm3p1 x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x0000000000000000)


    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x3,signature_10_0)

 
sm3p1_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x0000000800000000)
    li  x17, 0x800000000
    sm3p1 x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x0000000000000000)
 
sm3p1_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x0000001000000000)
    li  x16, 0x1000000000
    sm3p1 x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0000000000000000)
 
sm3p1_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000002000000000)
    li  x15, 0x2000000000
    sm3p1 x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x0000000000000000)
 
sm3p1_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000004000000000)
    li  x14, 0x4000000000
    sm3p1 x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x0000000000000000)
 
sm3p1_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000008000000000)
    li  x13, 0x8000000000
    sm3p1 x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000000000000000)


    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_11_0)

 
sm3p1_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000010000000000)
    li  x12, 0x10000000000
    sm3p1 x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0000000000000000)
 
sm3p1_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000020000000000)
    li  x11, 0x20000000000
    sm3p1 x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000000000000)
 
sm3p1_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000040000000000)
    li  x10, 0x40000000000
    sm3p1 x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000000000000)
 
sm3p1_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000080000000000)
    li  x9, 0x80000000000
    sm3p1 x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000000000000)
 
sm3p1_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000100000000000)
    li  x8, 0x100000000000
    sm3p1 x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000000000000)


    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_12_0)

 
sm3p1_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000200000000000)
    li  x7, 0x200000000000
    sm3p1 x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000000000000)
 
sm3p1_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000400000000000)
    li  x6, 0x400000000000
    sm3p1 x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000000000)
 
sm3p1_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000800000000000)
    li  x5, 0x800000000000
    sm3p1 x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x0000000000000000)
 
sm3p1_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0001000000000000)
    li  x4, 0x1000000000000
    sm3p1 x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x0000000000000000)
 
sm3p1_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0002000000000000)
    li  x3, 0x2000000000000
    sm3p1 x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x0000000000000000)


    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x4,signature_13_0)

 
sm3p1_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0004000000000000)
    li  x2, 0x4000000000000
    sm3p1 x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x0000000000000000)
 
sm3p1_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0008000000000000)
    li  x1, 0x8000000000000
    sm3p1 x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x0000000000000000)
 
sm3p1_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0010000000000000)
    li  x31, 0x10000000000000
    sm3p1 x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x0000000000000000)
 
sm3p1_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0020000000000000)
    li  x30, 0x20000000000000
    sm3p1 x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x0000000000000000)
 
sm3p1_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0040000000000000)
    li  x29, 0x40000000000000
    sm3p1 x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x0000000000000000)


    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_14_0)

 
sm3p1_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0080000000000000)
    li  x28, 0x80000000000000
    sm3p1 x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x0000000000000000)
 
sm3p1_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0100000000000000)
    li  x27, 0x100000000000000
    sm3p1 x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000000000000)
 
sm3p1_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0200000000000000)
    li  x26, 0x200000000000000
    sm3p1 x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000000000)
 
sm3p1_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0400000000000000)
    li  x25, 0x400000000000000
    sm3p1 x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000000000000)
 
sm3p1_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0800000000000000)
    li  x24, 0x800000000000000
    sm3p1 x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000000000000)


    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_15_0)

 
sm3p1_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x1000000000000000)
    li  x23, 0x1000000000000000
    sm3p1 x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000000000)
 
sm3p1_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x2000000000000000)
    li  x22, 0x2000000000000000
    sm3p1 x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000000000000)
 
sm3p1_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x4000000000000000)
    li  x21, 0x4000000000000000
    sm3p1 x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)
 
sm3p1_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x8000000000000000)
    li  x20, 0x8000000000000000
    sm3p1 x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000000000000)
 
sm3p1_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000)
    li  x19, 0x0
    sm3p1 x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)


    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x4,signature_16_0)

 
sm3p1_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0x00000000ff7f7ffe), rs1:x18(0xfffffffffffffffe)
    li  x18, 0xfffffffffffffffe
    sm3p1 x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0x00000000ff7f7ffe)
 
sm3p1_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0x00000000fefefffd), rs1:x17(0xfffffffffffffffd)
    li  x17, 0xfffffffffffffffd
    sm3p1 x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0x00000000fefefffd)
 
sm3p1_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0x00000000fdfdfffb), rs1:x16(0xfffffffffffffffb)
    li  x16, 0xfffffffffffffffb
    sm3p1 x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0x00000000fdfdfffb)
 
sm3p1_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0x00000000fbfbfff7), rs1:x15(0xfffffffffffffff7)
    li  x15, 0xfffffffffffffff7
    sm3p1 x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0x00000000fbfbfff7)
 
sm3p1_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0x00000000f7f7ffef), rs1:x14(0xffffffffffffffef)
    li  x14, 0xffffffffffffffef
    sm3p1 x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0x00000000f7f7ffef)


    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_17_0)

 
sm3p1_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0x00000000efefffdf), rs1:x13(0xffffffffffffffdf)
    li  x13, 0xffffffffffffffdf
    sm3p1 x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x00000000efefffdf)
 
sm3p1_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0x00000000dfdfffbf), rs1:x12(0xffffffffffffffbf)
    li  x12, 0xffffffffffffffbf
    sm3p1 x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000dfdfffbf)
 
sm3p1_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0x00000000bfbfff7f), rs1:x11(0xffffffffffffff7f)
    li  x11, 0xffffffffffffff7f
    sm3p1 x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000bfbfff7f)
 
sm3p1_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0x000000007f7ffeff), rs1:x10(0xfffffffffffffeff)
    li  x10, 0xfffffffffffffeff
    sm3p1 x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x000000007f7ffeff)
 
sm3p1_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0x00000000fefffdfe), rs1:x9(0xfffffffffffffdff)
    li  x9, 0xfffffffffffffdff
    sm3p1 x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000fefffdfe)


    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_18_0)

 
sm3p1_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0x00000000fdfffbfd), rs1:x8(0xfffffffffffffbff)
    li  x8, 0xfffffffffffffbff
    sm3p1 x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x00000000fdfffbfd)
 
sm3p1_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0x00000000fbfff7fb), rs1:x7(0xfffffffffffff7ff)
    li  x7, 0xfffffffffffff7ff
    sm3p1 x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x00000000fbfff7fb)
 
sm3p1_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0x00000000f7ffeff7), rs1:x6(0xffffffffffffefff)
    li  x6, 0xffffffffffffefff
    sm3p1 x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x00000000f7ffeff7)
 
sm3p1_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0x00000000efffdfef), rs1:x5(0xffffffffffffdfff)
    li  x5, 0xffffffffffffdfff
    sm3p1 x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x00000000efffdfef)
 
sm3p1_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0x00000000dfffbfdf), rs1:x4(0xffffffffffffbfff)
    li  x4, 0xffffffffffffbfff
    sm3p1 x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x00000000dfffbfdf)


    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x4,signature_19_0)

 
sm3p1_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0x00000000bfff7fbf), rs1:x3(0xffffffffffff7fff)
    li  x3, 0xffffffffffff7fff
    sm3p1 x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0x00000000bfff7fbf)
 
sm3p1_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0x000000007ffeff7f), rs1:x2(0xfffffffffffeffff)
    li  x2, 0xfffffffffffeffff
    sm3p1 x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x000000007ffeff7f)
 
sm3p1_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0x00000000fffdfefe), rs1:x1(0xfffffffffffdffff)
    li  x1, 0xfffffffffffdffff
    sm3p1 x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x00000000fffdfefe)
 
sm3p1_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0x00000000fffbfdfd), rs1:x31(0xfffffffffffbffff)
    li  x31, 0xfffffffffffbffff
    sm3p1 x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x00000000fffbfdfd)
 
sm3p1_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0x00000000fff7fbfb), rs1:x30(0xfffffffffff7ffff)
    li  x30, 0xfffffffffff7ffff
    sm3p1 x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x00000000fff7fbfb)


    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_20_0)

 
sm3p1_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0x00000000ffeff7f7), rs1:x29(0xffffffffffefffff)
    li  x29, 0xffffffffffefffff
    sm3p1 x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0x00000000ffeff7f7)
 
sm3p1_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0x00000000ffdfefef), rs1:x28(0xffffffffffdfffff)
    li  x28, 0xffffffffffdfffff
    sm3p1 x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x00000000ffdfefef)
 
sm3p1_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0x00000000ffbfdfdf), rs1:x27(0xffffffffffbfffff)
    li  x27, 0xffffffffffbfffff
    sm3p1 x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x00000000ffbfdfdf)
 
sm3p1_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0x00000000ff7fbfbf), rs1:x26(0xffffffffff7fffff)
    li  x26, 0xffffffffff7fffff
    sm3p1 x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x00000000ff7fbfbf)
 
sm3p1_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0x00000000feff7f7f), rs1:x25(0xfffffffffeffffff)
    li  x25, 0xfffffffffeffffff
    sm3p1 x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x00000000feff7f7f)


    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_21_0)

 
sm3p1_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0x00000000fdfefeff), rs1:x24(0xfffffffffdffffff)
    li  x24, 0xfffffffffdffffff
    sm3p1 x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000fdfefeff)
 
sm3p1_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0x00000000fbfdfdff), rs1:x23(0xfffffffffbffffff)
    li  x23, 0xfffffffffbffffff
    sm3p1 x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000fbfdfdff)
 
sm3p1_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0x00000000f7fbfbff), rs1:x22(0xfffffffff7ffffff)
    li  x22, 0xfffffffff7ffffff
    sm3p1 x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000f7fbfbff)
 
sm3p1_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0x00000000eff7f7ff), rs1:x21(0xffffffffefffffff)
    li  x21, 0xffffffffefffffff
    sm3p1 x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x00000000eff7f7ff)
 
sm3p1_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0x00000000dfefefff), rs1:x20(0xffffffffdfffffff)
    li  x20, 0xffffffffdfffffff
    sm3p1 x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x00000000dfefefff)


    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x5,signature_22_0)

 
sm3p1_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0x00000000bfdfdfff), rs1:x19(0xffffffffbfffffff)
    li  x19, 0xffffffffbfffffff
    sm3p1 x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0x00000000bfdfdfff)
 
sm3p1_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0x000000007fbfbfff), rs1:x18(0xffffffff7fffffff)
    li  x18, 0xffffffff7fffffff
    sm3p1 x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0x000000007fbfbfff)
 
sm3p1_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0x00000000ffffffff), rs1:x17(0xfffffffeffffffff)
    li  x17, 0xfffffffeffffffff
    sm3p1 x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0x00000000ffffffff)
 
sm3p1_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0x00000000ffffffff), rs1:x16(0xfffffffdffffffff)
    li  x16, 0xfffffffdffffffff
    sm3p1 x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0x00000000ffffffff)
 
sm3p1_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0x00000000ffffffff), rs1:x15(0xfffffffbffffffff)
    li  x15, 0xfffffffbffffffff
    sm3p1 x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0x00000000ffffffff)


    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_23_0)

 
sm3p1_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0x00000000ffffffff), rs1:x14(0xfffffff7ffffffff)
    li  x14, 0xfffffff7ffffffff
    sm3p1 x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x00000000ffffffff)
 
sm3p1_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0x00000000ffffffff), rs1:x13(0xffffffefffffffff)
    li  x13, 0xffffffefffffffff
    sm3p1 x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x00000000ffffffff)
 
sm3p1_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0x00000000ffffffff), rs1:x12(0xffffffdfffffffff)
    li  x12, 0xffffffdfffffffff
    sm3p1 x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000ffffffff)
 
sm3p1_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0x00000000ffffffff), rs1:x11(0xffffffbfffffffff)
    li  x11, 0xffffffbfffffffff
    sm3p1 x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000ffffffff)
 
sm3p1_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0x00000000ffffffff), rs1:x10(0xffffff7fffffffff)
    li  x10, 0xffffff7fffffffff
    sm3p1 x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000ffffffff)


    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_24_0)

 
sm3p1_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0x00000000ffffffff), rs1:x9(0xfffffeffffffffff)
    li  x9, 0xfffffeffffffffff
    sm3p1 x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000ffffffff)
 
sm3p1_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0x00000000ffffffff), rs1:x8(0xfffffdffffffffff)
    li  x8, 0xfffffdffffffffff
    sm3p1 x24, x8
    sd x24, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x00000000ffffffff)
 
sm3p1_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0x00000000ffffffff), rs1:x7(0xfffffbffffffffff)
    li  x7, 0xfffffbffffffffff
    sm3p1 x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x00000000ffffffff)
 
sm3p1_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0x00000000ffffffff), rs1:x6(0xfffff7ffffffffff)
    li  x6, 0xfffff7ffffffffff
    sm3p1 x26, x6
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x00000000ffffffff)
 
sm3p1_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0x00000000ffffffff), rs1:x5(0xffffefffffffffff)
    li  x5, 0xffffefffffffffff
    sm3p1 x27, x5
    sd x27, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x00000000ffffffff)


    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x5,signature_25_0)

 
sm3p1_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0x00000000ffffffff), rs1:x4(0xffffdfffffffffff)
    li  x4, 0xffffdfffffffffff
    sm3p1 x28, x4
    sd x28, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x28, 0x00000000ffffffff)
 
sm3p1_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0x00000000ffffffff), rs1:x3(0xffffbfffffffffff)
    li  x3, 0xffffbfffffffffff
    sm3p1 x29, x3
    sd x29, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x29, 0x00000000ffffffff)
 
sm3p1_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0x00000000ffffffff), rs1:x2(0xffff7fffffffffff)
    li  x2, 0xffff7fffffffffff
    sm3p1 x30, x2
    sd x30, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x30, 0x00000000ffffffff)
 
sm3p1_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0x00000000ffffffff), rs1:x1(0xfffeffffffffffff)
    li  x1, 0xfffeffffffffffff
    sm3p1 x31, x1
    sd x31, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x00000000ffffffff)
 
sm3p1_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0x00000000ffffffff), rs1:x31(0xfffdffffffffffff)
    li  x31, 0xfffdffffffffffff
    sm3p1 x1, x31
    sd x1, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x00000000ffffffff)


    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_26_0)

 
sm3p1_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0x00000000ffffffff), rs1:x30(0xfffbffffffffffff)
    li  x30, 0xfffbffffffffffff
    sm3p1 x2, x30
    sd x2, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x00000000ffffffff)
 
sm3p1_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0x00000000ffffffff), rs1:x29(0xfff7ffffffffffff)
    li  x29, 0xfff7ffffffffffff
    sm3p1 x3, x29
    sd x3, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x00000000ffffffff)
 
sm3p1_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0x00000000ffffffff), rs1:x28(0xffefffffffffffff)
    li  x28, 0xffefffffffffffff
    sm3p1 x4, x28
    sd x4, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x00000000ffffffff)
 
sm3p1_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0x00000000ffffffff), rs1:x27(0xffdfffffffffffff)
    li  x27, 0xffdfffffffffffff
    sm3p1 x5, x27
    sd x5, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x00000000ffffffff)
 
sm3p1_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0x00000000ffffffff), rs1:x26(0xffbfffffffffffff)
    li  x26, 0xffbfffffffffffff
    sm3p1 x6, x26
    sd x6, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x6, 0x00000000ffffffff)


    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_27_0)

 
sm3p1_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0x00000000ffffffff), rs1:x25(0xff7fffffffffffff)
    li  x25, 0xff7fffffffffffff
    sm3p1 x7, x25
    sd x7, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x00000000ffffffff)
 
sm3p1_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0x00000000ffffffff), rs1:x24(0xfeffffffffffffff)
    li  x24, 0xfeffffffffffffff
    sm3p1 x8, x24
    sd x8, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000ffffffff)
 
sm3p1_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0x00000000ffffffff), rs1:x23(0xfdffffffffffffff)
    li  x23, 0xfdffffffffffffff
    sm3p1 x9, x23
    sd x9, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000ffffffff)
 
sm3p1_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0x00000000ffffffff), rs1:x22(0xfbffffffffffffff)
    li  x22, 0xfbffffffffffffff
    sm3p1 x10, x22
    sd x10, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000ffffffff)
 
sm3p1_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0x00000000ffffffff), rs1:x21(0xf7ffffffffffffff)
    li  x21, 0xf7ffffffffffffff
    sm3p1 x11, x21
    sd x11, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x00000000ffffffff)


    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x6,signature_28_0)

 
sm3p1_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0x00000000ffffffff), rs1:x20(0xefffffffffffffff)
    li  x20, 0xefffffffffffffff
    sm3p1 x12, x20
    sd x12, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x00000000ffffffff)
 
sm3p1_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0x00000000ffffffff), rs1:x19(0xdfffffffffffffff)
    li  x19, 0xdfffffffffffffff
    sm3p1 x13, x19
    sd x13, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x00000000ffffffff)
 
sm3p1_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0x00000000ffffffff), rs1:x18(0xbfffffffffffffff)
    li  x18, 0xbfffffffffffffff
    sm3p1 x14, x18
    sd x14, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x00000000ffffffff)
 
sm3p1_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0x00000000ffffffff), rs1:x17(0x7fffffffffffffff)
    li  x17, 0x7fffffffffffffff
    sm3p1 x15, x17
    sd x15, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x00000000ffffffff)
 
sm3p1_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0x00000000ffffffff), rs1:x16(0xffffffffffffffff)
    li  x16, 0xffffffffffffffff
    sm3p1 x16, x16
    sd x16, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x16, 0x00000000ffffffff)


    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_29_0)

 
sm3p1_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0000000000808001), rs1:x15(0x0000000000000001)
    li  x15, 0x1
    sm3p1 x17, x15
    sd x17, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x17, 0x0000000000808001)
 
sm3p1_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0000000001010002), rs1:x14(0x0000000000000002)
    li  x14, 0x2
    sm3p1 x18, x14
    sd x18, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x0000000001010002)
 
sm3p1_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0000000002020004), rs1:x13(0x0000000000000004)
    li  x13, 0x4
    sm3p1 x19, x13
    sd x19, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x0000000002020004)
 
sm3p1_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0000000004040008), rs1:x12(0x0000000000000008)
    li  x12, 0x8
    sm3p1 x20, x12
    sd x20, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0000000004040008)
 
sm3p1_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0000000008080010), rs1:x11(0x0000000000000010)
    li  x11, 0x10
    sm3p1 x21, x11
    sd x21, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000008080010)


    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_30_0)

 
sm3p1_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0000000010100020), rs1:x10(0x0000000000000020)
    li  x10, 0x20
    sm3p1 x22, x10
    sd x22, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000010100020)
 
sm3p1_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0000000020200040), rs1:x9(0x0000000000000040)
    li  x9, 0x40
    sm3p1 x23, x9
    sd x23, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000020200040)
 
sm3p1_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0000000040400080), rs1:x8(0x0000000000000080)
    li  x8, 0x80
    sm3p1 x24, x8
    sd x24, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000040400080)
 
sm3p1_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000080800100), rs1:x7(0x0000000000000100)
    li  x7, 0x100
    sm3p1 x25, x7
    sd x25, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000080800100)
 
sm3p1_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000001000201), rs1:x6(0x0000000000000200)
    li  x6, 0x200
    sm3p1 x26, x6
    sd x26, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000001000201)


    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x6,signature_31_0)

 
sm3p1_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000000002000402), rs1:x5(0x0000000000000400)
    li  x5, 0x400
    sm3p1 x27, x5
    sd x27, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000002000402)
 
sm3p1_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000004000804), rs1:x4(0x0000000000000800)
    li  x4, 0x800
    sm3p1 x28, x4
    sd x28, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000004000804)
 
sm3p1_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0000000008001008), rs1:x3(0x0000000000001000)
    li  x3, 0x1000
    sm3p1 x29, x3
    sd x29, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000008001008)
 
sm3p1_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000010002010), rs1:x2(0x0000000000002000)
    li  x2, 0x2000
    sm3p1 x30, x2
    sd x30, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000010002010)
 
sm3p1_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0000000020004020), rs1:x1(0x0000000000004000)
    li  x1, 0x4000
    sm3p1 x31, x1
    sd x31, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x0000000020004020)


    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x6,signature_32_0)

 
sm3p1_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000040008040), rs1:x31(0x0000000000008000)
    li  x31, 0x8000
    sm3p1 x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x0000000040008040)
 
sm3p1_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000000080010080), rs1:x30(0x0000000000010000)
    li  x30, 0x10000
    sm3p1 x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x0000000080010080)
 
sm3p1_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000000020101), rs1:x29(0x0000000000020000)
    li  x29, 0x20000
    sm3p1 x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x0000000000020101)
 
sm3p1_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000000040202), rs1:x28(0x0000000000040000)
    li  x28, 0x40000
    sm3p1 x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x0000000000040202)
 
sm3p1_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000000080404), rs1:x27(0x0000000000080000)
    li  x27, 0x80000
    sm3p1 x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x0000000000080404)


    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_33_0)

 
sm3p1_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000000100808), rs1:x26(0x0000000000100000)
    li  x26, 0x100000
    sm3p1 x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000100808)
 
sm3p1_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000000201010), rs1:x25(0x0000000000200000)
    li  x25, 0x200000
    sm3p1 x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000000201010)
 
sm3p1_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000000402020), rs1:x24(0x0000000000400000)
    li  x24, 0x400000
    sm3p1 x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000000402020)
 
sm3p1_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000000804040), rs1:x23(0x0000000000800000)
    li  x23, 0x800000
    sm3p1 x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000804040)
 
sm3p1_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000001008080), rs1:x22(0x0000000001000000)
    li  x22, 0x1000000
    sm3p1 x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000001008080)


    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_34_0)

 
sm3p1_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000002010100), rs1:x21(0x0000000002000000)
    li  x21, 0x2000000
    sm3p1 x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x0000000002010100)
 
sm3p1_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000004020200), rs1:x20(0x0000000004000000)
    li  x20, 0x4000000
    sm3p1 x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0000000004020200)
 
sm3p1_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000008040400), rs1:x19(0x0000000008000000)
    li  x19, 0x8000000
    sm3p1 x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0000000008040400)
 
sm3p1_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000010080800), rs1:x18(0x0000000010000000)
    li  x18, 0x10000000
    sm3p1 x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0000000010080800)
 
sm3p1_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000020101000), rs1:x17(0x0000000020000000)
    li  x17, 0x20000000
    sm3p1 x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0000000020101000)


    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x2,signature_35_0)

 
sm3p1_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000040202000), rs1:x16(0x0000000040000000)
    li  x16, 0x40000000
    sm3p1 x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0000000040202000)
 
sm3p1_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000000080404000), rs1:x15(0x0000000080000000)
    li  x15, 0x80000000
    sm3p1 x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x0000000080404000)
 
sm3p1_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000000100000000)
    li  x14, 0x100000000
    sm3p1 x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x0000000000000000)
 
sm3p1_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000200000000)
    li  x13, 0x200000000
    sm3p1 x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0000000000000000)
 
sm3p1_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000000400000000)
    li  x12, 0x400000000
    sm3p1 x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0000000000000000)


    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_36_0)

 
sm3p1_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000800000000)
    li  x11, 0x800000000
    sm3p1 x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000000000000)
 
sm3p1_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000001000000000)
    li  x10, 0x1000000000
    sm3p1 x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000000000000)
 
sm3p1_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000002000000000)
    li  x9, 0x2000000000
    sm3p1 x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000000000000)
 
sm3p1_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000004000000000)
    li  x8, 0x4000000000
    sm3p1 x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000000000000)
 
sm3p1_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000008000000000)
    li  x7, 0x8000000000
    sm3p1 x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000000000000)


    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_37_0)

 
sm3p1_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000010000000000)
    li  x6, 0x10000000000
    sm3p1 x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x0000000000000000)
 
sm3p1_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000020000000000)
    li  x5, 0x20000000000
    sm3p1 x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000000000000)
 
sm3p1_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000040000000000)
    li  x4, 0x40000000000
    sm3p1 x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000000000000)
 
sm3p1_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000080000000000)
    li  x3, 0x80000000000
    sm3p1 x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000000000000)
 
sm3p1_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000100000000000)
    li  x2, 0x100000000000
    sm3p1 x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000000000000)


    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x5,signature_38_0)

 
sm3p1_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000200000000000)
    li  x1, 0x200000000000
    sm3p1 x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0000000000000000)
 
sm3p1_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000400000000000)
    li  x31, 0x400000000000
    sm3p1 x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0000000000000000)
 
sm3p1_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000800000000000)
    li  x30, 0x800000000000
    sm3p1 x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0000000000000000)
 
sm3p1_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0001000000000000)
    li  x29, 0x1000000000000
    sm3p1 x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0000000000000000)
 
sm3p1_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0002000000000000)
    li  x28, 0x2000000000000
    sm3p1 x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0000000000000000)


    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_39_0)

 
sm3p1_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0004000000000000)
    li  x27, 0x4000000000000
    sm3p1 x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000000000000)
 
sm3p1_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0008000000000000)
    li  x26, 0x8000000000000
    sm3p1 x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000000000)
 
sm3p1_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0010000000000000)
    li  x25, 0x10000000000000
    sm3p1 x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000000000000)
 
sm3p1_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0020000000000000)
    li  x24, 0x20000000000000
    sm3p1 x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000000000000)
 
sm3p1_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0040000000000000)
    li  x23, 0x40000000000000
    sm3p1 x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000000000)


    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_40_0)

 
sm3p1_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0080000000000000)
    li  x22, 0x80000000000000
    sm3p1 x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000000000000)
 
sm3p1_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0100000000000000)
    li  x21, 0x100000000000000
    sm3p1 x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)
 
sm3p1_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0200000000000000)
    li  x20, 0x200000000000000
    sm3p1 x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000000000000)
 
sm3p1_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0400000000000000)
    li  x19, 0x400000000000000
    sm3p1 x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)
 
sm3p1_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0800000000000000)
    li  x18, 0x800000000000000
    sm3p1 x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x0000000000000000)


    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x3,signature_41_0)

 
sm3p1_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x1000000000000000)
    li  x17, 0x1000000000000000
    sm3p1 x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x0000000000000000)
 
sm3p1_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x2000000000000000)
    li  x16, 0x2000000000000000
    sm3p1 x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0000000000000000)
 
sm3p1_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x4000000000000000)
    li  x15, 0x4000000000000000
    sm3p1 x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x0000000000000000)
 
sm3p1_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x8000000000000000)
    li  x14, 0x8000000000000000
    sm3p1 x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x0000000000000000)
 
sm3p1_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000)
    li  x13, 0x0
    sm3p1 x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000000000000000)


    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_42_0)

 
sm3p1_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0x00000000ff7f7ffe), rs1:x12(0xfffffffffffffffe)
    li  x12, 0xfffffffffffffffe
    sm3p1 x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000ff7f7ffe)
 
sm3p1_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0x00000000fefefffd), rs1:x11(0xfffffffffffffffd)
    li  x11, 0xfffffffffffffffd
    sm3p1 x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000fefefffd)
 
sm3p1_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0x00000000fdfdfffb), rs1:x10(0xfffffffffffffffb)
    li  x10, 0xfffffffffffffffb
    sm3p1 x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000fdfdfffb)
 
sm3p1_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0x00000000fbfbfff7), rs1:x9(0xfffffffffffffff7)
    li  x9, 0xfffffffffffffff7
    sm3p1 x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000fbfbfff7)
 
sm3p1_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0x00000000f7f7ffef), rs1:x8(0xffffffffffffffef)
    li  x8, 0xffffffffffffffef
    sm3p1 x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x00000000f7f7ffef)


    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_43_0)

 
sm3p1_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0x00000000efefffdf), rs1:x7(0xffffffffffffffdf)
    li  x7, 0xffffffffffffffdf
    sm3p1 x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x00000000efefffdf)
 
sm3p1_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0x00000000dfdfffbf), rs1:x6(0xffffffffffffffbf)
    li  x6, 0xffffffffffffffbf
    sm3p1 x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x00000000dfdfffbf)
 
sm3p1_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0x00000000bfbfff7f), rs1:x5(0xffffffffffffff7f)
    li  x5, 0xffffffffffffff7f
    sm3p1 x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x00000000bfbfff7f)
 
sm3p1_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0x000000007f7ffeff), rs1:x4(0xfffffffffffffeff)
    li  x4, 0xfffffffffffffeff
    sm3p1 x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x000000007f7ffeff)
 
sm3p1_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0x00000000fefffdfe), rs1:x3(0xfffffffffffffdff)
    li  x3, 0xfffffffffffffdff
    sm3p1 x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x00000000fefffdfe)


    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x4,signature_44_0)

 
sm3p1_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0x00000000fdfffbfd), rs1:x2(0xfffffffffffffbff)
    li  x2, 0xfffffffffffffbff
    sm3p1 x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x00000000fdfffbfd)
 
sm3p1_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0x00000000fbfff7fb), rs1:x1(0xfffffffffffff7ff)
    li  x1, 0xfffffffffffff7ff
    sm3p1 x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x00000000fbfff7fb)
 
sm3p1_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0x00000000f7ffeff7), rs1:x31(0xffffffffffffefff)
    li  x31, 0xffffffffffffefff
    sm3p1 x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x00000000f7ffeff7)
 
sm3p1_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0x00000000efffdfef), rs1:x30(0xffffffffffffdfff)
    li  x30, 0xffffffffffffdfff
    sm3p1 x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x00000000efffdfef)
 
sm3p1_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0x00000000dfffbfdf), rs1:x29(0xffffffffffffbfff)
    li  x29, 0xffffffffffffbfff
    sm3p1 x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x00000000dfffbfdf)


    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_45_0)

 
sm3p1_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0x00000000bfff7fbf), rs1:x28(0xffffffffffff7fff)
    li  x28, 0xffffffffffff7fff
    sm3p1 x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x00000000bfff7fbf)
 
sm3p1_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0x000000007ffeff7f), rs1:x27(0xfffffffffffeffff)
    li  x27, 0xfffffffffffeffff
    sm3p1 x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x000000007ffeff7f)
 
sm3p1_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0x00000000fffdfefe), rs1:x26(0xfffffffffffdffff)
    li  x26, 0xfffffffffffdffff
    sm3p1 x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x00000000fffdfefe)
 
sm3p1_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0x00000000fffbfdfd), rs1:x25(0xfffffffffffbffff)
    li  x25, 0xfffffffffffbffff
    sm3p1 x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x00000000fffbfdfd)
 
sm3p1_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0x00000000fff7fbfb), rs1:x24(0xfffffffffff7ffff)
    li  x24, 0xfffffffffff7ffff
    sm3p1 x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000fff7fbfb)


    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_46_0)

 
sm3p1_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0x00000000ffeff7f7), rs1:x23(0xffffffffffefffff)
    li  x23, 0xffffffffffefffff
    sm3p1 x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000ffeff7f7)
 
sm3p1_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0x00000000ffdfefef), rs1:x22(0xffffffffffdfffff)
    li  x22, 0xffffffffffdfffff
    sm3p1 x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000ffdfefef)
 
sm3p1_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0x00000000ffbfdfdf), rs1:x21(0xffffffffffbfffff)
    li  x21, 0xffffffffffbfffff
    sm3p1 x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x00000000ffbfdfdf)
 
sm3p1_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0x00000000ff7fbfbf), rs1:x20(0xffffffffff7fffff)
    li  x20, 0xffffffffff7fffff
    sm3p1 x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x00000000ff7fbfbf)
 
sm3p1_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0x00000000feff7f7f), rs1:x19(0xfffffffffeffffff)
    li  x19, 0xfffffffffeffffff
    sm3p1 x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x00000000feff7f7f)


    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x4,signature_47_0)

 
sm3p1_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0x00000000fdfefeff), rs1:x18(0xfffffffffdffffff)
    li  x18, 0xfffffffffdffffff
    sm3p1 x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0x00000000fdfefeff)
 
sm3p1_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0x00000000fbfdfdff), rs1:x17(0xfffffffffbffffff)
    li  x17, 0xfffffffffbffffff
    sm3p1 x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0x00000000fbfdfdff)
 
sm3p1_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0x00000000f7fbfbff), rs1:x16(0xfffffffff7ffffff)
    li  x16, 0xfffffffff7ffffff
    sm3p1 x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0x00000000f7fbfbff)
 
sm3p1_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0x00000000eff7f7ff), rs1:x15(0xffffffffefffffff)
    li  x15, 0xffffffffefffffff
    sm3p1 x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0x00000000eff7f7ff)
 
sm3p1_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0x00000000dfefefff), rs1:x14(0xffffffffdfffffff)
    li  x14, 0xffffffffdfffffff
    sm3p1 x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0x00000000dfefefff)


    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_48_0)

 
sm3p1_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0x00000000bfdfdfff), rs1:x13(0xffffffffbfffffff)
    li  x13, 0xffffffffbfffffff
    sm3p1 x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x00000000bfdfdfff)
 
sm3p1_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0x000000007fbfbfff), rs1:x12(0xffffffff7fffffff)
    li  x12, 0xffffffff7fffffff
    sm3p1 x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x000000007fbfbfff)
 
sm3p1_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0x00000000ffffffff), rs1:x11(0xfffffffeffffffff)
    li  x11, 0xfffffffeffffffff
    sm3p1 x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000ffffffff)
 
sm3p1_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0x00000000ffffffff), rs1:x10(0xfffffffdffffffff)
    li  x10, 0xfffffffdffffffff
    sm3p1 x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000ffffffff)
 
sm3p1_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0x00000000ffffffff), rs1:x9(0xfffffffbffffffff)
    li  x9, 0xfffffffbffffffff
    sm3p1 x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000ffffffff)


    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_49_0)

 
sm3p1_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0x00000000ffffffff), rs1:x8(0xfffffff7ffffffff)
    li  x8, 0xfffffff7ffffffff
    sm3p1 x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x00000000ffffffff)
 
sm3p1_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0x00000000ffffffff), rs1:x7(0xffffffefffffffff)
    li  x7, 0xffffffefffffffff
    sm3p1 x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x00000000ffffffff)
 
sm3p1_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0x00000000ffffffff), rs1:x6(0xffffffdfffffffff)
    li  x6, 0xffffffdfffffffff
    sm3p1 x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x00000000ffffffff)
 
sm3p1_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0x00000000ffffffff), rs1:x5(0xffffffbfffffffff)
    li  x5, 0xffffffbfffffffff
    sm3p1 x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x00000000ffffffff)
 
sm3p1_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0x00000000ffffffff), rs1:x4(0xffffff7fffffffff)
    li  x4, 0xffffff7fffffffff
    sm3p1 x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x00000000ffffffff)


    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x4,signature_50_0)

 
sm3p1_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0x00000000ffffffff), rs1:x3(0xfffffeffffffffff)
    li  x3, 0xfffffeffffffffff
    sm3p1 x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0x00000000ffffffff)
 
sm3p1_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0x00000000ffffffff), rs1:x2(0xfffffdffffffffff)
    li  x2, 0xfffffdffffffffff
    sm3p1 x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x00000000ffffffff)
 
sm3p1_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0x00000000ffffffff), rs1:x1(0xfffffbffffffffff)
    li  x1, 0xfffffbffffffffff
    sm3p1 x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x00000000ffffffff)
 
sm3p1_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0x00000000ffffffff), rs1:x31(0xfffff7ffffffffff)
    li  x31, 0xfffff7ffffffffff
    sm3p1 x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x00000000ffffffff)
 
sm3p1_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0x00000000ffffffff), rs1:x30(0xffffefffffffffff)
    li  x30, 0xffffefffffffffff
    sm3p1 x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x00000000ffffffff)


    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_51_0)

 
sm3p1_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0x00000000ffffffff), rs1:x29(0xffffdfffffffffff)
    li  x29, 0xffffdfffffffffff
    sm3p1 x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0x00000000ffffffff)
 
sm3p1_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0x00000000ffffffff), rs1:x28(0xffffbfffffffffff)
    li  x28, 0xffffbfffffffffff
    sm3p1 x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x00000000ffffffff)
 
sm3p1_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0x00000000ffffffff), rs1:x27(0xffff7fffffffffff)
    li  x27, 0xffff7fffffffffff
    sm3p1 x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x00000000ffffffff)
 
sm3p1_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0x00000000ffffffff), rs1:x26(0xfffeffffffffffff)
    li  x26, 0xfffeffffffffffff
    sm3p1 x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x00000000ffffffff)
 
sm3p1_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0x00000000ffffffff), rs1:x25(0xfffdffffffffffff)
    li  x25, 0xfffdffffffffffff
    sm3p1 x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x00000000ffffffff)


    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_52_0)

 
sm3p1_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0x00000000ffffffff), rs1:x24(0xfffbffffffffffff)
    li  x24, 0xfffbffffffffffff
    sm3p1 x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000ffffffff)
 
sm3p1_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0x00000000ffffffff), rs1:x23(0xfff7ffffffffffff)
    li  x23, 0xfff7ffffffffffff
    sm3p1 x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000ffffffff)
 
sm3p1_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0x00000000ffffffff), rs1:x22(0xffefffffffffffff)
    li  x22, 0xffefffffffffffff
    sm3p1 x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000ffffffff)
 
sm3p1_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0x00000000ffffffff), rs1:x21(0xffdfffffffffffff)
    li  x21, 0xffdfffffffffffff
    sm3p1 x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x00000000ffffffff)
 
sm3p1_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0x00000000ffffffff), rs1:x20(0xffbfffffffffffff)
    li  x20, 0xffbfffffffffffff
    sm3p1 x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x00000000ffffffff)


    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x5,signature_53_0)

 
sm3p1_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0x00000000ffffffff), rs1:x19(0xff7fffffffffffff)
    li  x19, 0xff7fffffffffffff
    sm3p1 x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0x00000000ffffffff)
 
sm3p1_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0x00000000ffffffff), rs1:x18(0xfeffffffffffffff)
    li  x18, 0xfeffffffffffffff
    sm3p1 x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0x00000000ffffffff)
 
sm3p1_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0x00000000ffffffff), rs1:x17(0xfdffffffffffffff)
    li  x17, 0xfdffffffffffffff
    sm3p1 x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0x00000000ffffffff)
 
sm3p1_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0x00000000ffffffff), rs1:x16(0xfbffffffffffffff)
    li  x16, 0xfbffffffffffffff
    sm3p1 x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0x00000000ffffffff)
 
sm3p1_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0x00000000ffffffff), rs1:x15(0xf7ffffffffffffff)
    li  x15, 0xf7ffffffffffffff
    sm3p1 x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0x00000000ffffffff)


    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_54_0)

 
sm3p1_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0x00000000ffffffff), rs1:x14(0xefffffffffffffff)
    li  x14, 0xefffffffffffffff
    sm3p1 x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x00000000ffffffff)
 
sm3p1_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0x00000000ffffffff), rs1:x13(0xdfffffffffffffff)
    li  x13, 0xdfffffffffffffff
    sm3p1 x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x00000000ffffffff)
 
sm3p1_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0x00000000ffffffff), rs1:x12(0xbfffffffffffffff)
    li  x12, 0xbfffffffffffffff
    sm3p1 x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000ffffffff)
 
sm3p1_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0x00000000ffffffff), rs1:x11(0x7fffffffffffffff)
    li  x11, 0x7fffffffffffffff
    sm3p1 x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000ffffffff)
 
sm3p1_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0x00000000ffffffff), rs1:x10(0xffffffffffffffff)
    li  x10, 0xffffffffffffffff
    sm3p1 x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000ffffffff)


    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p1)

    RVTEST_SIGBASE(x1,signature_55_0)

 
sm3p1_01_inst_270:
    // Test 270:  Test with random values
    // result rd:x23(0x000000004ff67248), rs1:x9(0x10fd3dedadea5195)
    li  x9, 0x10fd3dedadea5195
    sm3p1 x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x000000004ff67248)
 
sm3p1_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1)
    li  x8, 0xbd295ce2d2ffbec1
    sm3p1 x0, x8
    sd x0, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x0, 0x0000000000000000)
 
sm3p1_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0x0000000021680c1f), rs1:x7(0xc9649f05a8e1a8bb)
    li  x7, 0xc9649f05a8e1a8bb
    sm3p1 x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000021680c1f)
 
sm3p1_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb)
    li  x0, 0x3541291848c99fcb
    sm3p1 x26, x0
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000000000)
	
#endif


RVTEST_CODE_END sm3p1_01_code_end
RVTEST_CODE_BEGIN aes64ks1i_01_init aes64ks1i_01_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x6,signature_1_0)


aes64ks1i_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x55ca542f55ca542f), rs1:x31(0x10fd3dedadea5195), imm:0x3
    TEST_IMM_OP(aes64ks1i, x1, x31, 0x55ca542f55ca542f, 0x10fd3dedadea5195, 0x3, x6, 0, x7)

aes64ks1i_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x987aa548987aa548), rs1:x30(0xbd295ce2d2ffbec1), imm:0x1
    TEST_IMM_OP(aes64ks1i, x2, x30, 0x987aa548987aa548, 0xbd295ce2d2ffbec1, 0x1, x6, 8, x7)

aes64ks1i_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0x6bdd43da6bdd43da), rs1:x29(0xc9649f05a8e1a8bb), imm:0x0
    TEST_IMM_OP(aes64ks1i, x3, x29, 0x6bdd43da6bdd43da, 0xc9649f05a8e1a8bb, 0x0, x6, 16, x7)

aes64ks1i_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0xad9683adad9683ad), rs1:x28(0x3541291848c99fcb), imm:0x3
    TEST_IMM_OP(aes64ks1i, x4, x28, 0xad9683adad9683ad, 0x3541291848c99fcb, 0x3, x6, 24, x7)

aes64ks1i_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x09ca3a8009ca3a80), rs1:x27(0x10a24740461d524f), imm:0x5
    TEST_IMM_OP(aes64ks1i, x5, x27, 0x09ca3a8009ca3a80, 0x10a24740461d524f, 0x5, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_2_0)


aes64ks1i_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x20207f8b20207f8b), rs1:x26(0x546b0e54528a10af), imm:0x5
    TEST_IMM_OP(aes64ks1i, x6, x26, 0x20207f8b20207f8b, 0x546b0e54528a10af, 0x5, x1, 0, x2)

aes64ks1i_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x488fd317488fd317), rs1:x25(0x73a92fd4e19bfbc3), imm:0x1
    TEST_IMM_OP(aes64ks1i, x7, x25, 0x488fd317488fd317, 0x73a92fd4e19bfbc3, 0x1, x1, 8, x2)

aes64ks1i_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0xd2134290d2134290), rs1:x24(0x82f6747f707af2c0), imm:0x1
    TEST_IMM_OP(aes64ks1i, x8, x24, 0xd2134290d2134290, 0x82f6747f707af2c0, 0x1, x1, 16, x2)

aes64ks1i_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0xa2e6958fa2e6958f), rs1:x23(0xf5adb41aa47d105b), imm:0x1
    TEST_IMM_OP(aes64ks1i, x9, x23, 0xa2e6958fa2e6958f, 0xf5adb41aa47d105b, 0x1, x1, 24, x2)

aes64ks1i_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0x1b9ed2271b9ed227), rs1:x22(0xdf7f3844121bcc23), imm:0x5
    TEST_IMM_OP(aes64ks1i, x10, x22, 0x1b9ed2271b9ed227, 0xdf7f3844121bcc23, 0x5, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_3_0)


aes64ks1i_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x6363634363636343), rs1:x21(0x0000000000000001), imm:0x5
    TEST_IMM_OP(aes64ks1i, x11, x21, 0x6363634363636343, 0x1, 0x5, x1, 0, x7)

aes64ks1i_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x636363e3636363e3), rs1:x20(0x0000000000000002), imm:0x7
    TEST_IMM_OP(aes64ks1i, x12, x20, 0x636363e3636363e3, 0x2, 0x7, x1, 8, x7)

aes64ks1i_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x6363636163636361), rs1:x19(0x0000000000000004), imm:0x1
    TEST_IMM_OP(aes64ks1i, x13, x19, 0x6363636163636361, 0x4, 0x1, x1, 16, x7)

aes64ks1i_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x6363636b6363636b), rs1:x18(0x0000000000000008), imm:0x3
    TEST_IMM_OP(aes64ks1i, x14, x18, 0x6363636b6363636b, 0x8, 0x3, x1, 24, x7)

aes64ks1i_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x6363637363636373), rs1:x17(0x0000000000000010), imm:0x4
    TEST_IMM_OP(aes64ks1i, x15, x17, 0x6363637363636373, 0x10, 0x4, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x2,signature_4_0)


aes64ks1i_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x6363636263636362), rs1:x16(0x0000000000000020), imm:0x0
    TEST_IMM_OP(aes64ks1i, x16, x16, 0x6363636263636362, 0x20, 0x0, x2, 0, x3)

aes64ks1i_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x6363637863636378), rs1:x15(0x0000000000000040), imm:0x8
    TEST_IMM_OP(aes64ks1i, x17, x15, 0x6363637863636378, 0x40, 0x8, x2, 8, x3)

aes64ks1i_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x6363637363636373), rs1:x14(0x0000000000000080), imm:0x4
    TEST_IMM_OP(aes64ks1i, x18, x14, 0x6363637363636373, 0x80, 0x4, x2, 16, x3)

aes64ks1i_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x6363636763636367), rs1:x13(0x0000000000000100), imm:0x2
    TEST_IMM_OP(aes64ks1i, x19, x13, 0x6363636763636367, 0x100, 0x2, x2, 24, x3)

aes64ks1i_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x6363636163636361), rs1:x12(0x0000000000000200), imm:0x1
    TEST_IMM_OP(aes64ks1i, x20, x12, 0x6363636163636361, 0x200, 0x1, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_5_0)


aes64ks1i_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x6363636b6363636b), rs1:x11(0x0000000000000400), imm:0x3
    TEST_IMM_OP(aes64ks1i, x21, x11, 0x6363636b6363636b, 0x400, 0x3, x1, 0, x2)

aes64ks1i_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x6363636163636361), rs1:x10(0x0000000000000800), imm:0x1
    TEST_IMM_OP(aes64ks1i, x22, x10, 0x6363636163636361, 0x800, 0x1, x1, 8, x2)

aes64ks1i_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x6363636263636362), rs1:x9(0x0000000000001000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x23, x9, 0x6363636263636362, 0x1000, 0x0, x1, 16, x2)

aes64ks1i_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x6363636b6363636b), rs1:x8(0x0000000000002000), imm:0x3
    TEST_IMM_OP(aes64ks1i, x24, x8, 0x6363636b6363636b, 0x2000, 0x3, x1, 24, x2)

aes64ks1i_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x6363634363636343), rs1:x7(0x0000000000004000), imm:0x5
    TEST_IMM_OP(aes64ks1i, x25, x7, 0x6363634363636343, 0x4000, 0x5, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_6_0)


aes64ks1i_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x6363634363636343), rs1:x6(0x0000000000008000), imm:0x5
    TEST_IMM_OP(aes64ks1i, x26, x6, 0x6363634363636343, 0x8000, 0x5, x1, 0, x7)

aes64ks1i_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x6363636163636361), rs1:x5(0x0000000000010000), imm:0x1
    TEST_IMM_OP(aes64ks1i, x27, x5, 0x6363636163636361, 0x10000, 0x1, x1, 8, x7)

aes64ks1i_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x6363636163636361), rs1:x4(0x0000000000020000), imm:0x1
    TEST_IMM_OP(aes64ks1i, x28, x4, 0x6363636163636361, 0x20000, 0x1, x1, 16, x7)

aes64ks1i_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x6363636163636361), rs1:x3(0x0000000000040000), imm:0x1
    TEST_IMM_OP(aes64ks1i, x29, x3, 0x6363636163636361, 0x40000, 0x1, x1, 24, x7)

aes64ks1i_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x6363634363636343), rs1:x2(0x0000000000080000), imm:0x5
    TEST_IMM_OP(aes64ks1i, x30, x2, 0x6363634363636343, 0x80000, 0x5, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x5,signature_7_0)


aes64ks1i_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x6363634363636343), rs1:x1(0x0000000000100000), imm:0x5
    TEST_IMM_OP(aes64ks1i, x31, x1, 0x6363634363636343, 0x100000, 0x5, x5, 0, x6)

aes64ks1i_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x636363e3636363e3), rs1:x31(0x0000000000200000), imm:0x7
    TEST_IMM_OP(aes64ks1i, x1, x31, 0x636363e3636363e3, 0x200000, 0x7, x5, 8, x6)

aes64ks1i_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x6363636163636361), rs1:x30(0x0000000000400000), imm:0x1
    TEST_IMM_OP(aes64ks1i, x2, x30, 0x6363636163636361, 0x400000, 0x1, x5, 16, x6)

aes64ks1i_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x6363636b6363636b), rs1:x29(0x0000000000800000), imm:0x3
    TEST_IMM_OP(aes64ks1i, x3, x29, 0x6363636b6363636b, 0x800000, 0x3, x5, 24, x6)

aes64ks1i_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x6363637363636373), rs1:x28(0x0000000001000000), imm:0x4
    TEST_IMM_OP(aes64ks1i, x4, x28, 0x6363637363636373, 0x1000000, 0x4, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_8_0)


aes64ks1i_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x6363636263636362), rs1:x27(0x0000000002000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x5, x27, 0x6363636263636362, 0x2000000, 0x0, x1, 0, x2)

aes64ks1i_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x6363637863636378), rs1:x26(0x0000000004000000), imm:0x8
    TEST_IMM_OP(aes64ks1i, x6, x26, 0x6363637863636378, 0x4000000, 0x8, x1, 8, x2)

aes64ks1i_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x6363637363636373), rs1:x25(0x0000000008000000), imm:0x4
    TEST_IMM_OP(aes64ks1i, x7, x25, 0x6363637363636373, 0x8000000, 0x4, x1, 16, x2)

aes64ks1i_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x6363636763636367), rs1:x24(0x0000000010000000), imm:0x2
    TEST_IMM_OP(aes64ks1i, x8, x24, 0x6363636763636367, 0x10000000, 0x2, x1, 24, x2)

aes64ks1i_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x6363636163636361), rs1:x23(0x0000000020000000), imm:0x1
    TEST_IMM_OP(aes64ks1i, x9, x23, 0x6363636163636361, 0x20000000, 0x1, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_9_0)


aes64ks1i_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x6363636b6363636b), rs1:x22(0x0000000040000000), imm:0x3
    TEST_IMM_OP(aes64ks1i, x10, x22, 0x6363636b6363636b, 0x40000000, 0x3, x1, 0, x2)

aes64ks1i_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x6363636163636361), rs1:x21(0x0000000080000000), imm:0x1
    TEST_IMM_OP(aes64ks1i, x11, x21, 0x6363636163636361, 0x80000000, 0x1, x1, 8, x2)

aes64ks1i_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x7c6363627c636362), rs1:x20(0x0000000100000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x12, x20, 0x7c6363627c636362, 0x100000000, 0x0, x1, 16, x2)

aes64ks1i_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x7763636b7763636b), rs1:x19(0x0000000200000000), imm:0x3
    TEST_IMM_OP(aes64ks1i, x13, x19, 0x7763636b7763636b, 0x200000000, 0x3, x1, 24, x2)

aes64ks1i_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0xf2636343f2636343), rs1:x18(0x0000000400000000), imm:0x5
    TEST_IMM_OP(aes64ks1i, x14, x18, 0xf2636343f2636343, 0x400000000, 0x5, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x3,signature_10_0)


aes64ks1i_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x3063634330636343), rs1:x17(0x0000000800000000), imm:0x5
    TEST_IMM_OP(aes64ks1i, x15, x17, 0x3063634330636343, 0x800000000, 0x5, x3, 0, x4)

aes64ks1i_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0xca636361ca636361), rs1:x16(0x0000001000000000), imm:0x1
    TEST_IMM_OP(aes64ks1i, x16, x16, 0xca636361ca636361, 0x1000000000, 0x1, x3, 8, x4)

aes64ks1i_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0xb7636361b7636361), rs1:x15(0x0000002000000000), imm:0x1
    TEST_IMM_OP(aes64ks1i, x17, x15, 0xb7636361b7636361, 0x2000000000, 0x1, x3, 16, x4)

aes64ks1i_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x0963636109636361), rs1:x14(0x0000004000000000), imm:0x1
    TEST_IMM_OP(aes64ks1i, x18, x14, 0x0963636109636361, 0x4000000000, 0x1, x3, 24, x4)

aes64ks1i_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0xcd636343cd636343), rs1:x13(0x0000008000000000), imm:0x5
    TEST_IMM_OP(aes64ks1i, x19, x13, 0xcd636343cd636343, 0x8000000000, 0x5, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_11_0)


aes64ks1i_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x6363635c6363635c), rs1:x12(0x0000010000000000), imm:0x5
    TEST_IMM_OP(aes64ks1i, x20, x12, 0x6363635c6363635c, 0x10000000000, 0x5, x1, 0, x2)

aes64ks1i_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x636363f7636363f7), rs1:x11(0x0000020000000000), imm:0x7
    TEST_IMM_OP(aes64ks1i, x21, x11, 0x636363f7636363f7, 0x20000000000, 0x7, x1, 8, x2)

aes64ks1i_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x636363f0636363f0), rs1:x10(0x0000040000000000), imm:0x1
    TEST_IMM_OP(aes64ks1i, x22, x10, 0x636363f0636363f0, 0x40000000000, 0x1, x1, 16, x2)

aes64ks1i_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x6363633863636338), rs1:x9(0x0000080000000000), imm:0x3
    TEST_IMM_OP(aes64ks1i, x23, x9, 0x6363633863636338, 0x80000000000, 0x3, x1, 24, x2)

aes64ks1i_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x636363da636363da), rs1:x8(0x0000100000000000), imm:0x4
    TEST_IMM_OP(aes64ks1i, x24, x8, 0x636363da636363da, 0x100000000000, 0x4, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_12_0)


aes64ks1i_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x636363b6636363b6), rs1:x7(0x0000200000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x25, x7, 0x636363b6636363b6, 0x200000000000, 0x0, x1, 0, x2)

aes64ks1i_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x6363631263636312), rs1:x6(0x0000400000000000), imm:0x8
    TEST_IMM_OP(aes64ks1i, x26, x6, 0x6363631263636312, 0x400000000000, 0x8, x1, 8, x2)

aes64ks1i_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x636363dd636363dd), rs1:x5(0x0000800000000000), imm:0x4
    TEST_IMM_OP(aes64ks1i, x27, x5, 0x636363dd636363dd, 0x800000000000, 0x4, x1, 16, x2)

aes64ks1i_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x63637c6763637c67), rs1:x4(0x0001000000000000), imm:0x2
    TEST_IMM_OP(aes64ks1i, x28, x4, 0x63637c6763637c67, 0x1000000000000, 0x2, x1, 24, x2)

aes64ks1i_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x6363776163637761), rs1:x3(0x0002000000000000), imm:0x1
    TEST_IMM_OP(aes64ks1i, x29, x3, 0x6363776163637761, 0x2000000000000, 0x1, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x4,signature_13_0)


aes64ks1i_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x6363f26b6363f26b), rs1:x2(0x0004000000000000), imm:0x3
    TEST_IMM_OP(aes64ks1i, x30, x2, 0x6363f26b6363f26b, 0x4000000000000, 0x3, x4, 0, x5)

aes64ks1i_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x6363306163633061), rs1:x1(0x0008000000000000), imm:0x1
    TEST_IMM_OP(aes64ks1i, x31, x1, 0x6363306163633061, 0x8000000000000, 0x1, x4, 8, x5)

aes64ks1i_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x6363ca626363ca62), rs1:x31(0x0010000000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x1, x31, 0x6363ca626363ca62, 0x10000000000000, 0x0, x4, 16, x5)

aes64ks1i_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x6363b76b6363b76b), rs1:x30(0x0020000000000000), imm:0x3
    TEST_IMM_OP(aes64ks1i, x2, x30, 0x6363b76b6363b76b, 0x20000000000000, 0x3, x4, 24, x5)

aes64ks1i_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x6363094363630943), rs1:x29(0x0040000000000000), imm:0x5
    TEST_IMM_OP(aes64ks1i, x3, x29, 0x6363094363630943, 0x40000000000000, 0x5, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_14_0)


aes64ks1i_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x6363cd436363cd43), rs1:x28(0x0080000000000000), imm:0x5
    TEST_IMM_OP(aes64ks1i, x4, x28, 0x6363cd436363cd43, 0x80000000000000, 0x5, x1, 0, x2)

aes64ks1i_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x637c6361637c6361), rs1:x27(0x0100000000000000), imm:0x1
    TEST_IMM_OP(aes64ks1i, x5, x27, 0x637c6361637c6361, 0x100000000000000, 0x1, x1, 8, x2)

aes64ks1i_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x6377636163776361), rs1:x26(0x0200000000000000), imm:0x1
    TEST_IMM_OP(aes64ks1i, x6, x26, 0x6377636163776361, 0x200000000000000, 0x1, x1, 16, x2)

aes64ks1i_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x63f2636163f26361), rs1:x25(0x0400000000000000), imm:0x1
    TEST_IMM_OP(aes64ks1i, x7, x25, 0x63f2636163f26361, 0x400000000000000, 0x1, x1, 24, x2)

aes64ks1i_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x6330634363306343), rs1:x24(0x0800000000000000), imm:0x5
    TEST_IMM_OP(aes64ks1i, x8, x24, 0x6330634363306343, 0x800000000000000, 0x5, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_15_0)


aes64ks1i_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x63ca634363ca6343), rs1:x23(0x1000000000000000), imm:0x5
    TEST_IMM_OP(aes64ks1i, x9, x23, 0x63ca634363ca6343, 0x1000000000000000, 0x5, x1, 0, x2)

aes64ks1i_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x63b763e363b763e3), rs1:x22(0x2000000000000000), imm:0x7
    TEST_IMM_OP(aes64ks1i, x10, x22, 0x63b763e363b763e3, 0x2000000000000000, 0x7, x1, 8, x2)

aes64ks1i_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x6309636163096361), rs1:x21(0x4000000000000000), imm:0x1
    TEST_IMM_OP(aes64ks1i, x11, x21, 0x6309636163096361, 0x4000000000000000, 0x1, x1, 16, x2)

aes64ks1i_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x63cd636b63cd636b), rs1:x20(0x8000000000000000), imm:0x3
    TEST_IMM_OP(aes64ks1i, x12, x20, 0x63cd636b63cd636b, 0x8000000000000000, 0x3, x1, 24, x2)

aes64ks1i_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x6363637363636373), rs1:x19(0x0000000000000000), imm:0x4
    TEST_IMM_OP(aes64ks1i, x13, x19, 0x6363637363636373, 0x0, 0x4, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x4,signature_16_0)


aes64ks1i_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0x1616161716161617), rs1:x18(0xfffffffffffffffe), imm:0x0
    TEST_IMM_OP(aes64ks1i, x14, x18, 0x1616161716161617, 0xfffffffffffffffe, 0x0, x4, 0, x5)

aes64ks1i_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0x1616160d1616160d), rs1:x17(0xfffffffffffffffd), imm:0x8
    TEST_IMM_OP(aes64ks1i, x15, x17, 0x1616160d1616160d, 0xfffffffffffffffd, 0x8, x4, 8, x5)

aes64ks1i_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0x1616160616161606), rs1:x16(0xfffffffffffffffb), imm:0x4
    TEST_IMM_OP(aes64ks1i, x16, x16, 0x1616160616161606, 0xfffffffffffffffb, 0x4, x4, 16, x5)

aes64ks1i_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0x1616161216161612), rs1:x15(0xfffffffffffffff7), imm:0x2
    TEST_IMM_OP(aes64ks1i, x17, x15, 0x1616161216161612, 0xfffffffffffffff7, 0x2, x4, 24, x5)

aes64ks1i_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0x1616161416161614), rs1:x14(0xffffffffffffffef), imm:0x1
    TEST_IMM_OP(aes64ks1i, x18, x14, 0x1616161416161614, 0xffffffffffffffef, 0x1, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_17_0)


aes64ks1i_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0x1616161e1616161e), rs1:x13(0xffffffffffffffdf), imm:0x3
    TEST_IMM_OP(aes64ks1i, x19, x13, 0x1616161e1616161e, 0xffffffffffffffdf, 0x3, x1, 0, x2)

aes64ks1i_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0x1616161416161614), rs1:x12(0xffffffffffffffbf), imm:0x1
    TEST_IMM_OP(aes64ks1i, x20, x12, 0x1616161416161614, 0xffffffffffffffbf, 0x1, x1, 8, x2)

aes64ks1i_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0x1616161716161617), rs1:x11(0xffffffffffffff7f), imm:0x0
    TEST_IMM_OP(aes64ks1i, x21, x11, 0x1616161716161617, 0xffffffffffffff7f, 0x0, x1, 16, x2)

aes64ks1i_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0x1616161e1616161e), rs1:x10(0xfffffffffffffeff), imm:0x3
    TEST_IMM_OP(aes64ks1i, x22, x10, 0x1616161e1616161e, 0xfffffffffffffeff, 0x3, x1, 24, x2)

aes64ks1i_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0x1616163616161636), rs1:x9(0xfffffffffffffdff), imm:0x5
    TEST_IMM_OP(aes64ks1i, x23, x9, 0x1616163616161636, 0xfffffffffffffdff, 0x5, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_18_0)


aes64ks1i_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0x1616163616161636), rs1:x8(0xfffffffffffffbff), imm:0x5
    TEST_IMM_OP(aes64ks1i, x24, x8, 0x1616163616161636, 0xfffffffffffffbff, 0x5, x1, 0, x2)

aes64ks1i_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0x1616161416161614), rs1:x7(0xfffffffffffff7ff), imm:0x1
    TEST_IMM_OP(aes64ks1i, x25, x7, 0x1616161416161614, 0xfffffffffffff7ff, 0x1, x1, 8, x2)

aes64ks1i_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0x1616161416161614), rs1:x6(0xffffffffffffefff), imm:0x1
    TEST_IMM_OP(aes64ks1i, x26, x6, 0x1616161416161614, 0xffffffffffffefff, 0x1, x1, 16, x2)

aes64ks1i_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0x1616161416161614), rs1:x5(0xffffffffffffdfff), imm:0x1
    TEST_IMM_OP(aes64ks1i, x27, x5, 0x1616161416161614, 0xffffffffffffdfff, 0x1, x1, 24, x2)

aes64ks1i_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0x1616163616161636), rs1:x4(0xffffffffffffbfff), imm:0x5
    TEST_IMM_OP(aes64ks1i, x28, x4, 0x1616163616161636, 0xffffffffffffbfff, 0x5, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x4,signature_19_0)


aes64ks1i_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0x1616163616161636), rs1:x3(0xffffffffffff7fff), imm:0x5
    TEST_IMM_OP(aes64ks1i, x29, x3, 0x1616163616161636, 0xffffffffffff7fff, 0x5, x4, 0, x5)

aes64ks1i_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0x1616169616161696), rs1:x2(0xfffffffffffeffff), imm:0x7
    TEST_IMM_OP(aes64ks1i, x30, x2, 0x1616169616161696, 0xfffffffffffeffff, 0x7, x4, 8, x5)

aes64ks1i_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0x1616161416161614), rs1:x1(0xfffffffffffdffff), imm:0x1
    TEST_IMM_OP(aes64ks1i, x31, x1, 0x1616161416161614, 0xfffffffffffdffff, 0x1, x4, 16, x5)

aes64ks1i_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0x1616161e1616161e), rs1:x31(0xfffffffffffbffff), imm:0x3
    TEST_IMM_OP(aes64ks1i, x1, x31, 0x1616161e1616161e, 0xfffffffffffbffff, 0x3, x4, 24, x5)

aes64ks1i_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0x1616160616161606), rs1:x30(0xfffffffffff7ffff), imm:0x4
    TEST_IMM_OP(aes64ks1i, x2, x30, 0x1616160616161606, 0xfffffffffff7ffff, 0x4, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_20_0)


aes64ks1i_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0x1616161716161617), rs1:x29(0xffffffffffefffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x3, x29, 0x1616161716161617, 0xffffffffffefffff, 0x0, x1, 0, x2)

aes64ks1i_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0x1616160d1616160d), rs1:x28(0xffffffffffdfffff), imm:0x8
    TEST_IMM_OP(aes64ks1i, x4, x28, 0x1616160d1616160d, 0xffffffffffdfffff, 0x8, x1, 8, x2)

aes64ks1i_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0x1616160616161606), rs1:x27(0xffffffffffbfffff), imm:0x4
    TEST_IMM_OP(aes64ks1i, x5, x27, 0x1616160616161606, 0xffffffffffbfffff, 0x4, x1, 16, x2)

aes64ks1i_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0x1616161216161612), rs1:x26(0xffffffffff7fffff), imm:0x2
    TEST_IMM_OP(aes64ks1i, x6, x26, 0x1616161216161612, 0xffffffffff7fffff, 0x2, x1, 24, x2)

aes64ks1i_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0x1616161416161614), rs1:x25(0xfffffffffeffffff), imm:0x1
    TEST_IMM_OP(aes64ks1i, x7, x25, 0x1616161416161614, 0xfffffffffeffffff, 0x1, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_21_0)


aes64ks1i_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0x1616161e1616161e), rs1:x24(0xfffffffffdffffff), imm:0x3
    TEST_IMM_OP(aes64ks1i, x8, x24, 0x1616161e1616161e, 0xfffffffffdffffff, 0x3, x1, 0, x2)

aes64ks1i_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0x1616161416161614), rs1:x23(0xfffffffffbffffff), imm:0x1
    TEST_IMM_OP(aes64ks1i, x9, x23, 0x1616161416161614, 0xfffffffffbffffff, 0x1, x1, 8, x2)

aes64ks1i_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0x1616161716161617), rs1:x22(0xfffffffff7ffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x10, x22, 0x1616161716161617, 0xfffffffff7ffffff, 0x0, x1, 16, x2)

aes64ks1i_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0x1616161e1616161e), rs1:x21(0xffffffffefffffff), imm:0x3
    TEST_IMM_OP(aes64ks1i, x11, x21, 0x1616161e1616161e, 0xffffffffefffffff, 0x3, x1, 24, x2)

aes64ks1i_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0x1616163616161636), rs1:x20(0xffffffffdfffffff), imm:0x5
    TEST_IMM_OP(aes64ks1i, x12, x20, 0x1616163616161636, 0xffffffffdfffffff, 0x5, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x5,signature_22_0)


aes64ks1i_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0x1616163616161636), rs1:x19(0xffffffffbfffffff), imm:0x5
    TEST_IMM_OP(aes64ks1i, x13, x19, 0x1616163616161636, 0xffffffffbfffffff, 0x5, x5, 0, x6)

aes64ks1i_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0x1616161416161614), rs1:x18(0xffffffff7fffffff), imm:0x1
    TEST_IMM_OP(aes64ks1i, x14, x18, 0x1616161416161614, 0xffffffff7fffffff, 0x1, x5, 8, x6)

aes64ks1i_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0xbb161614bb161614), rs1:x17(0xfffffffeffffffff), imm:0x1
    TEST_IMM_OP(aes64ks1i, x15, x17, 0xbb161614bb161614, 0xfffffffeffffffff, 0x1, x5, 16, x6)

aes64ks1i_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0x5416161454161614), rs1:x16(0xfffffffdffffffff), imm:0x1
    TEST_IMM_OP(aes64ks1i, x16, x16, 0x5416161454161614, 0xfffffffdffffffff, 0x1, x5, 24, x6)

aes64ks1i_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0x0f1616360f161636), rs1:x15(0xfffffffbffffffff), imm:0x5
    TEST_IMM_OP(aes64ks1i, x17, x15, 0x0f1616360f161636, 0xfffffffbffffffff, 0x5, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_23_0)


aes64ks1i_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0x6816163668161636), rs1:x14(0xfffffff7ffffffff), imm:0x5
    TEST_IMM_OP(aes64ks1i, x18, x14, 0x6816163668161636, 0xfffffff7ffffffff, 0x5, x1, 0, x2)

aes64ks1i_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0xdf161696df161696), rs1:x13(0xffffffefffffffff), imm:0x7
    TEST_IMM_OP(aes64ks1i, x19, x13, 0xdf161696df161696, 0xffffffefffffffff, 0x7, x1, 8, x2)

aes64ks1i_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0x9e1616149e161614), rs1:x12(0xffffffdfffffffff), imm:0x1
    TEST_IMM_OP(aes64ks1i, x20, x12, 0x9e1616149e161614, 0xffffffdfffffffff, 0x1, x1, 16, x2)

aes64ks1i_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0x0816161e0816161e), rs1:x11(0xffffffbfffffffff), imm:0x3
    TEST_IMM_OP(aes64ks1i, x21, x11, 0x0816161e0816161e, 0xffffffbfffffffff, 0x3, x1, 24, x2)

aes64ks1i_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0xd2161606d2161606), rs1:x10(0xffffff7fffffffff), imm:0x4
    TEST_IMM_OP(aes64ks1i, x22, x10, 0xd2161606d2161606, 0xffffff7fffffffff, 0x4, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_24_0)


aes64ks1i_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0x161616ba161616ba), rs1:x9(0xfffffeffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x23, x9, 0x161616ba161616ba, 0xfffffeffffffffff, 0x0, x1, 0, x2)

aes64ks1i_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0x1616164f1616164f), rs1:x8(0xfffffdffffffffff), imm:0x8
    TEST_IMM_OP(aes64ks1i, x24, x8, 0x1616164f1616164f, 0xfffffdffffffffff, 0x8, x1, 8, x2)

aes64ks1i_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0x1616161f1616161f), rs1:x7(0xfffffbffffffffff), imm:0x4
    TEST_IMM_OP(aes64ks1i, x25, x7, 0x1616161f1616161f, 0xfffffbffffffffff, 0x4, x1, 16, x2)

aes64ks1i_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0x1616166c1616166c), rs1:x6(0xfffff7ffffffffff), imm:0x2
    TEST_IMM_OP(aes64ks1i, x26, x6, 0x1616166c1616166c, 0xfffff7ffffffffff, 0x2, x1, 24, x2)

aes64ks1i_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0x161616dd161616dd), rs1:x5(0xffffefffffffffff), imm:0x1
    TEST_IMM_OP(aes64ks1i, x27, x5, 0x161616dd161616dd, 0xffffefffffffffff, 0x1, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x5,signature_25_0)


aes64ks1i_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0x1616169616161696), rs1:x4(0xffffdfffffffffff), imm:0x3
    TEST_IMM_OP(aes64ks1i, x28, x4, 0x1616169616161696, 0xffffdfffffffffff, 0x3, x5, 0, x6)

aes64ks1i_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0x1616160a1616160a), rs1:x3(0xffffbfffffffffff), imm:0x1
    TEST_IMM_OP(aes64ks1i, x29, x3, 0x1616160a1616160a, 0xffffbfffffffffff, 0x1, x5, 8, x6)

aes64ks1i_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0x161616d3161616d3), rs1:x2(0xffff7fffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x30, x2, 0x161616d3161616d3, 0xffff7fffffffffff, 0x0, x5, 16, x6)

aes64ks1i_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0x1616bb1e1616bb1e), rs1:x1(0xfffeffffffffffff), imm:0x3
    TEST_IMM_OP(aes64ks1i, x31, x1, 0x1616bb1e1616bb1e, 0xfffeffffffffffff, 0x3, x5, 24, x6)

aes64ks1i_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0x1616543616165436), rs1:x31(0xfffdffffffffffff), imm:0x5
    TEST_IMM_OP(aes64ks1i, x1, x31, 0x1616543616165436, 0xfffdffffffffffff, 0x5, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_26_0)


aes64ks1i_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0x16160f3616160f36), rs1:x30(0xfffbffffffffffff), imm:0x5
    TEST_IMM_OP(aes64ks1i, x2, x30, 0x16160f3616160f36, 0xfffbffffffffffff, 0x5, x1, 0, x7)

aes64ks1i_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0x1616681416166814), rs1:x29(0xfff7ffffffffffff), imm:0x1
    TEST_IMM_OP(aes64ks1i, x3, x29, 0x1616681416166814, 0xfff7ffffffffffff, 0x1, x1, 8, x7)

aes64ks1i_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0x1616df141616df14), rs1:x28(0xffefffffffffffff), imm:0x1
    TEST_IMM_OP(aes64ks1i, x4, x28, 0x1616df141616df14, 0xffefffffffffffff, 0x1, x1, 16, x7)

aes64ks1i_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0x16169e1416169e14), rs1:x27(0xffdfffffffffffff), imm:0x1
    TEST_IMM_OP(aes64ks1i, x5, x27, 0x16169e1416169e14, 0xffdfffffffffffff, 0x1, x1, 24, x7)

aes64ks1i_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0x1616083616160836), rs1:x26(0xffbfffffffffffff), imm:0x5
    TEST_IMM_OP(aes64ks1i, x6, x26, 0x1616083616160836, 0xffbfffffffffffff, 0x5, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_27_0)


aes64ks1i_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0x1616d2171616d217), rs1:x25(0xff7fffffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x7, x25, 0x1616d2171616d217, 0xff7fffffffffffff, 0x0, x1, 0, x2)

aes64ks1i_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0x16bb161716bb1617), rs1:x24(0xfeffffffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x8, x24, 0x16bb161716bb1617, 0xfeffffffffffffff, 0x0, x1, 8, x2)

aes64ks1i_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0x1654161716541617), rs1:x23(0xfdffffffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x9, x23, 0x1654161716541617, 0xfdffffffffffffff, 0x0, x1, 16, x2)

aes64ks1i_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0x160f1617160f1617), rs1:x22(0xfbffffffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x10, x22, 0x160f1617160f1617, 0xfbffffffffffffff, 0x0, x1, 24, x2)

aes64ks1i_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0x1668161716681617), rs1:x21(0xf7ffffffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x11, x21, 0x1668161716681617, 0xf7ffffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x6,signature_28_0)


aes64ks1i_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0x16df161716df1617), rs1:x20(0xefffffffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x12, x20, 0x16df161716df1617, 0xefffffffffffffff, 0x0, x6, 0, x7)

aes64ks1i_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0x169e1617169e1617), rs1:x19(0xdfffffffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x13, x19, 0x169e1617169e1617, 0xdfffffffffffffff, 0x0, x6, 8, x7)

aes64ks1i_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0x1608161716081617), rs1:x18(0xbfffffffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x14, x18, 0x1608161716081617, 0xbfffffffffffffff, 0x0, x6, 16, x7)

aes64ks1i_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0x16d2161716d21617), rs1:x17(0x7fffffffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x15, x17, 0x16d2161716d21617, 0x7fffffffffffffff, 0x0, x6, 24, x7)

aes64ks1i_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0x1616161716161617), rs1:x16(0xffffffffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x16, x16, 0x1616161716161617, 0xffffffffffffffff, 0x0, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_29_0)


aes64ks1i_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x6363636263636362), rs1:x15(0x0000000000000001), imm:0x0
    TEST_IMM_OP(aes64ks1i, x17, x15, 0x6363636263636362, 0x1, 0x0, x1, 0, x2)

aes64ks1i_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x6363636263636362), rs1:x14(0x0000000000000002), imm:0x0
    TEST_IMM_OP(aes64ks1i, x18, x14, 0x6363636263636362, 0x2, 0x0, x1, 8, x2)

aes64ks1i_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x6363636263636362), rs1:x13(0x0000000000000004), imm:0x0
    TEST_IMM_OP(aes64ks1i, x19, x13, 0x6363636263636362, 0x4, 0x0, x1, 16, x2)

aes64ks1i_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x6363636263636362), rs1:x12(0x0000000000000008), imm:0x0
    TEST_IMM_OP(aes64ks1i, x20, x12, 0x6363636263636362, 0x8, 0x0, x1, 24, x2)

aes64ks1i_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x6363636263636362), rs1:x11(0x0000000000000010), imm:0x0
    TEST_IMM_OP(aes64ks1i, x21, x11, 0x6363636263636362, 0x10, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_30_0)


aes64ks1i_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x6363636263636362), rs1:x10(0x0000000000000020), imm:0x0
    TEST_IMM_OP(aes64ks1i, x22, x10, 0x6363636263636362, 0x20, 0x0, x1, 0, x2)

aes64ks1i_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x6363636263636362), rs1:x9(0x0000000000000040), imm:0x0
    TEST_IMM_OP(aes64ks1i, x23, x9, 0x6363636263636362, 0x40, 0x0, x1, 8, x2)

aes64ks1i_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x6363636263636362), rs1:x8(0x0000000000000080), imm:0x0
    TEST_IMM_OP(aes64ks1i, x24, x8, 0x6363636263636362, 0x80, 0x0, x1, 16, x2)

aes64ks1i_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x6363636263636362), rs1:x7(0x0000000000000100), imm:0x0
    TEST_IMM_OP(aes64ks1i, x25, x7, 0x6363636263636362, 0x100, 0x0, x1, 24, x2)

aes64ks1i_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x6363636263636362), rs1:x6(0x0000000000000200), imm:0x0
    TEST_IMM_OP(aes64ks1i, x26, x6, 0x6363636263636362, 0x200, 0x0, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x6,signature_31_0)


aes64ks1i_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x6363636263636362), rs1:x5(0x0000000000000400), imm:0x0
    TEST_IMM_OP(aes64ks1i, x27, x5, 0x6363636263636362, 0x400, 0x0, x6, 0, x7)

aes64ks1i_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x6363636263636362), rs1:x4(0x0000000000000800), imm:0x0
    TEST_IMM_OP(aes64ks1i, x28, x4, 0x6363636263636362, 0x800, 0x0, x6, 8, x7)

aes64ks1i_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x6363636263636362), rs1:x3(0x0000000000001000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x29, x3, 0x6363636263636362, 0x1000, 0x0, x6, 16, x7)

aes64ks1i_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x6363636263636362), rs1:x2(0x0000000000002000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x30, x2, 0x6363636263636362, 0x2000, 0x0, x6, 24, x7)

aes64ks1i_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x6363636263636362), rs1:x1(0x0000000000004000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x31, x1, 0x6363636263636362, 0x4000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x6,signature_32_0)


aes64ks1i_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x6363636263636362), rs1:x31(0x0000000000008000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x1, x31, 0x6363636263636362, 0x8000, 0x0, x6, 0, x7)

aes64ks1i_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x6363636263636362), rs1:x30(0x0000000000010000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x2, x30, 0x6363636263636362, 0x10000, 0x0, x6, 8, x7)

aes64ks1i_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x6363636263636362), rs1:x29(0x0000000000020000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x3, x29, 0x6363636263636362, 0x20000, 0x0, x6, 16, x7)

aes64ks1i_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x6363636263636362), rs1:x28(0x0000000000040000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x4, x28, 0x6363636263636362, 0x40000, 0x0, x6, 24, x7)

aes64ks1i_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x6363636263636362), rs1:x27(0x0000000000080000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x5, x27, 0x6363636263636362, 0x80000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_33_0)


aes64ks1i_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x6363636263636362), rs1:x26(0x0000000000100000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x6, x26, 0x6363636263636362, 0x100000, 0x0, x1, 0, x2)

aes64ks1i_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x6363636263636362), rs1:x25(0x0000000000200000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x7, x25, 0x6363636263636362, 0x200000, 0x0, x1, 8, x2)

aes64ks1i_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x6363636263636362), rs1:x24(0x0000000000400000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x8, x24, 0x6363636263636362, 0x400000, 0x0, x1, 16, x2)

aes64ks1i_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x6363636263636362), rs1:x23(0x0000000000800000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x9, x23, 0x6363636263636362, 0x800000, 0x0, x1, 24, x2)

aes64ks1i_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x6363636263636362), rs1:x22(0x0000000001000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x10, x22, 0x6363636263636362, 0x1000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_34_0)


aes64ks1i_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x6363636263636362), rs1:x21(0x0000000002000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x11, x21, 0x6363636263636362, 0x2000000, 0x0, x1, 0, x7)

aes64ks1i_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x6363636263636362), rs1:x20(0x0000000004000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x12, x20, 0x6363636263636362, 0x4000000, 0x0, x1, 8, x7)

aes64ks1i_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x6363636263636362), rs1:x19(0x0000000008000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x13, x19, 0x6363636263636362, 0x8000000, 0x0, x1, 16, x7)

aes64ks1i_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x6363636263636362), rs1:x18(0x0000000010000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x14, x18, 0x6363636263636362, 0x10000000, 0x0, x1, 24, x7)

aes64ks1i_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x6363636263636362), rs1:x17(0x0000000020000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x15, x17, 0x6363636263636362, 0x20000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x2,signature_35_0)


aes64ks1i_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x6363636263636362), rs1:x16(0x0000000040000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x16, x16, 0x6363636263636362, 0x40000000, 0x0, x2, 0, x3)

aes64ks1i_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x6363636263636362), rs1:x15(0x0000000080000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x17, x15, 0x6363636263636362, 0x80000000, 0x0, x2, 8, x3)

aes64ks1i_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x7c6363627c636362), rs1:x14(0x0000000100000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x18, x14, 0x7c6363627c636362, 0x100000000, 0x0, x2, 16, x3)

aes64ks1i_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x7763636277636362), rs1:x13(0x0000000200000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x19, x13, 0x7763636277636362, 0x200000000, 0x0, x2, 24, x3)

aes64ks1i_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0xf2636362f2636362), rs1:x12(0x0000000400000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x20, x12, 0xf2636362f2636362, 0x400000000, 0x0, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_36_0)


aes64ks1i_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x3063636230636362), rs1:x11(0x0000000800000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x21, x11, 0x3063636230636362, 0x800000000, 0x0, x1, 0, x2)

aes64ks1i_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0xca636362ca636362), rs1:x10(0x0000001000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x22, x10, 0xca636362ca636362, 0x1000000000, 0x0, x1, 8, x2)

aes64ks1i_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0xb7636362b7636362), rs1:x9(0x0000002000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x23, x9, 0xb7636362b7636362, 0x2000000000, 0x0, x1, 16, x2)

aes64ks1i_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0963636209636362), rs1:x8(0x0000004000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x24, x8, 0x0963636209636362, 0x4000000000, 0x0, x1, 24, x2)

aes64ks1i_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0xcd636362cd636362), rs1:x7(0x0000008000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x25, x7, 0xcd636362cd636362, 0x8000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_37_0)


aes64ks1i_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x6363637d6363637d), rs1:x6(0x0000010000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x26, x6, 0x6363637d6363637d, 0x10000000000, 0x0, x1, 0, x7)

aes64ks1i_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x6363637663636376), rs1:x5(0x0000020000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x27, x5, 0x6363637663636376, 0x20000000000, 0x0, x1, 8, x7)

aes64ks1i_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x636363f3636363f3), rs1:x4(0x0000040000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x28, x4, 0x636363f3636363f3, 0x40000000000, 0x0, x1, 16, x7)

aes64ks1i_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x6363633163636331), rs1:x3(0x0000080000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x29, x3, 0x6363633163636331, 0x80000000000, 0x0, x1, 24, x7)

aes64ks1i_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x636363cb636363cb), rs1:x2(0x0000100000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x30, x2, 0x636363cb636363cb, 0x100000000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x5,signature_38_0)


aes64ks1i_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x636363b6636363b6), rs1:x1(0x0000200000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x31, x1, 0x636363b6636363b6, 0x200000000000, 0x0, x5, 0, x6)

aes64ks1i_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x6363630863636308), rs1:x31(0x0000400000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x1, x31, 0x6363630863636308, 0x400000000000, 0x0, x5, 8, x6)

aes64ks1i_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x636363cc636363cc), rs1:x30(0x0000800000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x2, x30, 0x636363cc636363cc, 0x800000000000, 0x0, x5, 16, x6)

aes64ks1i_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x63637c6263637c62), rs1:x29(0x0001000000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x3, x29, 0x63637c6263637c62, 0x1000000000000, 0x0, x5, 24, x6)

aes64ks1i_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x6363776263637762), rs1:x28(0x0002000000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x4, x28, 0x6363776263637762, 0x2000000000000, 0x0, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_39_0)


aes64ks1i_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x6363f2626363f262), rs1:x27(0x0004000000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x5, x27, 0x6363f2626363f262, 0x4000000000000, 0x0, x1, 0, x2)

aes64ks1i_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x6363306263633062), rs1:x26(0x0008000000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x6, x26, 0x6363306263633062, 0x8000000000000, 0x0, x1, 8, x2)

aes64ks1i_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x6363ca626363ca62), rs1:x25(0x0010000000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x7, x25, 0x6363ca626363ca62, 0x10000000000000, 0x0, x1, 16, x2)

aes64ks1i_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x6363b7626363b762), rs1:x24(0x0020000000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x8, x24, 0x6363b7626363b762, 0x20000000000000, 0x0, x1, 24, x2)

aes64ks1i_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x6363096263630962), rs1:x23(0x0040000000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x9, x23, 0x6363096263630962, 0x40000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_40_0)


aes64ks1i_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x6363cd626363cd62), rs1:x22(0x0080000000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x10, x22, 0x6363cd626363cd62, 0x80000000000000, 0x0, x1, 0, x2)

aes64ks1i_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x637c6362637c6362), rs1:x21(0x0100000000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x11, x21, 0x637c6362637c6362, 0x100000000000000, 0x0, x1, 8, x2)

aes64ks1i_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x6377636263776362), rs1:x20(0x0200000000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x12, x20, 0x6377636263776362, 0x200000000000000, 0x0, x1, 16, x2)

aes64ks1i_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x63f2636263f26362), rs1:x19(0x0400000000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x13, x19, 0x63f2636263f26362, 0x400000000000000, 0x0, x1, 24, x2)

aes64ks1i_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x6330636263306362), rs1:x18(0x0800000000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x14, x18, 0x6330636263306362, 0x800000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x3,signature_41_0)


aes64ks1i_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x63ca636263ca6362), rs1:x17(0x1000000000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x15, x17, 0x63ca636263ca6362, 0x1000000000000000, 0x0, x3, 0, x4)

aes64ks1i_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x63b7636263b76362), rs1:x16(0x2000000000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x16, x16, 0x63b7636263b76362, 0x2000000000000000, 0x0, x3, 8, x4)

aes64ks1i_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x6309636263096362), rs1:x15(0x4000000000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x17, x15, 0x6309636263096362, 0x4000000000000000, 0x0, x3, 16, x4)

aes64ks1i_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x63cd636263cd6362), rs1:x14(0x8000000000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x18, x14, 0x63cd636263cd6362, 0x8000000000000000, 0x0, x3, 24, x4)

aes64ks1i_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x6363636263636362), rs1:x13(0x0000000000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x19, x13, 0x6363636263636362, 0x0, 0x0, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_42_0)


aes64ks1i_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0x1616161716161617), rs1:x12(0xfffffffffffffffe), imm:0x0
    TEST_IMM_OP(aes64ks1i, x20, x12, 0x1616161716161617, 0xfffffffffffffffe, 0x0, x1, 0, x2)

aes64ks1i_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0x1616161716161617), rs1:x11(0xfffffffffffffffd), imm:0x0
    TEST_IMM_OP(aes64ks1i, x21, x11, 0x1616161716161617, 0xfffffffffffffffd, 0x0, x1, 8, x2)

aes64ks1i_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0x1616161716161617), rs1:x10(0xfffffffffffffffb), imm:0x0
    TEST_IMM_OP(aes64ks1i, x22, x10, 0x1616161716161617, 0xfffffffffffffffb, 0x0, x1, 16, x2)

aes64ks1i_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0x1616161716161617), rs1:x9(0xfffffffffffffff7), imm:0x0
    TEST_IMM_OP(aes64ks1i, x23, x9, 0x1616161716161617, 0xfffffffffffffff7, 0x0, x1, 24, x2)

aes64ks1i_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0x1616161716161617), rs1:x8(0xffffffffffffffef), imm:0x0
    TEST_IMM_OP(aes64ks1i, x24, x8, 0x1616161716161617, 0xffffffffffffffef, 0x0, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_43_0)


aes64ks1i_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0x1616161716161617), rs1:x7(0xffffffffffffffdf), imm:0x0
    TEST_IMM_OP(aes64ks1i, x25, x7, 0x1616161716161617, 0xffffffffffffffdf, 0x0, x1, 0, x2)

aes64ks1i_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0x1616161716161617), rs1:x6(0xffffffffffffffbf), imm:0x0
    TEST_IMM_OP(aes64ks1i, x26, x6, 0x1616161716161617, 0xffffffffffffffbf, 0x0, x1, 8, x2)

aes64ks1i_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0x1616161716161617), rs1:x5(0xffffffffffffff7f), imm:0x0
    TEST_IMM_OP(aes64ks1i, x27, x5, 0x1616161716161617, 0xffffffffffffff7f, 0x0, x1, 16, x2)

aes64ks1i_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0x1616161716161617), rs1:x4(0xfffffffffffffeff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x28, x4, 0x1616161716161617, 0xfffffffffffffeff, 0x0, x1, 24, x2)

aes64ks1i_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0x1616161716161617), rs1:x3(0xfffffffffffffdff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x29, x3, 0x1616161716161617, 0xfffffffffffffdff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x4,signature_44_0)


aes64ks1i_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0x1616161716161617), rs1:x2(0xfffffffffffffbff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x30, x2, 0x1616161716161617, 0xfffffffffffffbff, 0x0, x4, 0, x5)

aes64ks1i_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0x1616161716161617), rs1:x1(0xfffffffffffff7ff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x31, x1, 0x1616161716161617, 0xfffffffffffff7ff, 0x0, x4, 8, x5)

aes64ks1i_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0x1616161716161617), rs1:x31(0xffffffffffffefff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x1, x31, 0x1616161716161617, 0xffffffffffffefff, 0x0, x4, 16, x5)

aes64ks1i_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0x1616161716161617), rs1:x30(0xffffffffffffdfff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x2, x30, 0x1616161716161617, 0xffffffffffffdfff, 0x0, x4, 24, x5)

aes64ks1i_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0x1616161716161617), rs1:x29(0xffffffffffffbfff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x3, x29, 0x1616161716161617, 0xffffffffffffbfff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_45_0)


aes64ks1i_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0x1616161716161617), rs1:x28(0xffffffffffff7fff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x4, x28, 0x1616161716161617, 0xffffffffffff7fff, 0x0, x1, 0, x2)

aes64ks1i_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0x1616161716161617), rs1:x27(0xfffffffffffeffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x5, x27, 0x1616161716161617, 0xfffffffffffeffff, 0x0, x1, 8, x2)

aes64ks1i_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0x1616161716161617), rs1:x26(0xfffffffffffdffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x6, x26, 0x1616161716161617, 0xfffffffffffdffff, 0x0, x1, 16, x2)

aes64ks1i_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0x1616161716161617), rs1:x25(0xfffffffffffbffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x7, x25, 0x1616161716161617, 0xfffffffffffbffff, 0x0, x1, 24, x2)

aes64ks1i_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0x1616161716161617), rs1:x24(0xfffffffffff7ffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x8, x24, 0x1616161716161617, 0xfffffffffff7ffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_46_0)


aes64ks1i_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0x1616161716161617), rs1:x23(0xffffffffffefffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x9, x23, 0x1616161716161617, 0xffffffffffefffff, 0x0, x1, 0, x2)

aes64ks1i_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0x1616161716161617), rs1:x22(0xffffffffffdfffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x10, x22, 0x1616161716161617, 0xffffffffffdfffff, 0x0, x1, 8, x2)

aes64ks1i_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0x1616161716161617), rs1:x21(0xffffffffffbfffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x11, x21, 0x1616161716161617, 0xffffffffffbfffff, 0x0, x1, 16, x2)

aes64ks1i_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0x1616161716161617), rs1:x20(0xffffffffff7fffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x12, x20, 0x1616161716161617, 0xffffffffff7fffff, 0x0, x1, 24, x2)

aes64ks1i_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0x1616161716161617), rs1:x19(0xfffffffffeffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x13, x19, 0x1616161716161617, 0xfffffffffeffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x4,signature_47_0)


aes64ks1i_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0x1616161716161617), rs1:x18(0xfffffffffdffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x14, x18, 0x1616161716161617, 0xfffffffffdffffff, 0x0, x4, 0, x5)

aes64ks1i_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0x1616161716161617), rs1:x17(0xfffffffffbffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x15, x17, 0x1616161716161617, 0xfffffffffbffffff, 0x0, x4, 8, x5)

aes64ks1i_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0x1616161716161617), rs1:x16(0xfffffffff7ffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x16, x16, 0x1616161716161617, 0xfffffffff7ffffff, 0x0, x4, 16, x5)

aes64ks1i_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0x1616161716161617), rs1:x15(0xffffffffefffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x17, x15, 0x1616161716161617, 0xffffffffefffffff, 0x0, x4, 24, x5)

aes64ks1i_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0x1616161716161617), rs1:x14(0xffffffffdfffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x18, x14, 0x1616161716161617, 0xffffffffdfffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_48_0)


aes64ks1i_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0x1616161716161617), rs1:x13(0xffffffffbfffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x19, x13, 0x1616161716161617, 0xffffffffbfffffff, 0x0, x1, 0, x2)

aes64ks1i_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0x1616161716161617), rs1:x12(0xffffffff7fffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x20, x12, 0x1616161716161617, 0xffffffff7fffffff, 0x0, x1, 8, x2)

aes64ks1i_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0xbb161617bb161617), rs1:x11(0xfffffffeffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x21, x11, 0xbb161617bb161617, 0xfffffffeffffffff, 0x0, x1, 16, x2)

aes64ks1i_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0x5416161754161617), rs1:x10(0xfffffffdffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x22, x10, 0x5416161754161617, 0xfffffffdffffffff, 0x0, x1, 24, x2)

aes64ks1i_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0x0f1616170f161617), rs1:x9(0xfffffffbffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x23, x9, 0x0f1616170f161617, 0xfffffffbffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_49_0)


aes64ks1i_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0x6816161768161617), rs1:x8(0xfffffff7ffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x24, x8, 0x6816161768161617, 0xfffffff7ffffffff, 0x0, x1, 0, x2)

aes64ks1i_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0xdf161617df161617), rs1:x7(0xffffffefffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x25, x7, 0xdf161617df161617, 0xffffffefffffffff, 0x0, x1, 8, x2)

aes64ks1i_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0x9e1616179e161617), rs1:x6(0xffffffdfffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x26, x6, 0x9e1616179e161617, 0xffffffdfffffffff, 0x0, x1, 16, x2)

aes64ks1i_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0x0816161708161617), rs1:x5(0xffffffbfffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x27, x5, 0x0816161708161617, 0xffffffbfffffffff, 0x0, x1, 24, x2)

aes64ks1i_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0xd2161617d2161617), rs1:x4(0xffffff7fffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x28, x4, 0xd2161617d2161617, 0xffffff7fffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x4,signature_50_0)


aes64ks1i_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0x161616ba161616ba), rs1:x3(0xfffffeffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x29, x3, 0x161616ba161616ba, 0xfffffeffffffffff, 0x0, x4, 0, x5)

aes64ks1i_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0x1616165516161655), rs1:x2(0xfffffdffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x30, x2, 0x1616165516161655, 0xfffffdffffffffff, 0x0, x4, 8, x5)

aes64ks1i_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0x1616160e1616160e), rs1:x1(0xfffffbffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x31, x1, 0x1616160e1616160e, 0xfffffbffffffffff, 0x0, x4, 16, x5)

aes64ks1i_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0x1616166916161669), rs1:x31(0xfffff7ffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x1, x31, 0x1616166916161669, 0xfffff7ffffffffff, 0x0, x4, 24, x5)

aes64ks1i_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0x161616de161616de), rs1:x30(0xffffefffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x2, x30, 0x161616de161616de, 0xffffefffffffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_51_0)


aes64ks1i_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0x1616169f1616169f), rs1:x29(0xffffdfffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x3, x29, 0x1616169f1616169f, 0xffffdfffffffffff, 0x0, x1, 0, x2)

aes64ks1i_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0x1616160916161609), rs1:x28(0xffffbfffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x4, x28, 0x1616160916161609, 0xffffbfffffffffff, 0x0, x1, 8, x2)

aes64ks1i_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0x161616d3161616d3), rs1:x27(0xffff7fffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x5, x27, 0x161616d3161616d3, 0xffff7fffffffffff, 0x0, x1, 16, x2)

aes64ks1i_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0x1616bb171616bb17), rs1:x26(0xfffeffffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x6, x26, 0x1616bb171616bb17, 0xfffeffffffffffff, 0x0, x1, 24, x2)

aes64ks1i_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0x1616541716165417), rs1:x25(0xfffdffffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x7, x25, 0x1616541716165417, 0xfffdffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_52_0)


aes64ks1i_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0x16160f1716160f17), rs1:x24(0xfffbffffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x8, x24, 0x16160f1716160f17, 0xfffbffffffffffff, 0x0, x1, 0, x2)

aes64ks1i_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0x1616681716166817), rs1:x23(0xfff7ffffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x9, x23, 0x1616681716166817, 0xfff7ffffffffffff, 0x0, x1, 8, x2)

aes64ks1i_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0x1616df171616df17), rs1:x22(0xffefffffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x10, x22, 0x1616df171616df17, 0xffefffffffffffff, 0x0, x1, 16, x2)

aes64ks1i_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0x16169e1716169e17), rs1:x21(0xffdfffffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x11, x21, 0x16169e1716169e17, 0xffdfffffffffffff, 0x0, x1, 24, x2)

aes64ks1i_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0x1616081716160817), rs1:x20(0xffbfffffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x12, x20, 0x1616081716160817, 0xffbfffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x5,signature_53_0)


aes64ks1i_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0x1616d21e1616d21e), rs1:x19(0xff7fffffffffffff), imm:0x3
    TEST_IMM_OP(aes64ks1i, x13, x19, 0x1616d21e1616d21e, 0xff7fffffffffffff, 0x3, x5, 0, x6)

aes64ks1i_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0x16bb161416bb1614), rs1:x18(0xfeffffffffffffff), imm:0x1
    TEST_IMM_OP(aes64ks1i, x14, x18, 0x16bb161416bb1614, 0xfeffffffffffffff, 0x1, x5, 8, x6)

aes64ks1i_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0x1654161716541617), rs1:x17(0xfdffffffffffffff), imm:0x0
    TEST_IMM_OP(aes64ks1i, x15, x17, 0x1654161716541617, 0xfdffffffffffffff, 0x0, x5, 16, x6)

aes64ks1i_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0x160f161e160f161e), rs1:x16(0xfbffffffffffffff), imm:0x3
    TEST_IMM_OP(aes64ks1i, x16, x16, 0x160f161e160f161e, 0xfbffffffffffffff, 0x3, x5, 24, x6)

aes64ks1i_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0x1668163616681636), rs1:x15(0xf7ffffffffffffff), imm:0x5
    TEST_IMM_OP(aes64ks1i, x17, x15, 0x1668163616681636, 0xf7ffffffffffffff, 0x5, x5, 32, x6)

    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_54_0)


aes64ks1i_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0x16df163616df1636), rs1:x14(0xefffffffffffffff), imm:0x5
    TEST_IMM_OP(aes64ks1i, x18, x14, 0x16df163616df1636, 0xefffffffffffffff, 0x5, x1, 0, x2)

aes64ks1i_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0x169e1614169e1614), rs1:x13(0xdfffffffffffffff), imm:0x1
    TEST_IMM_OP(aes64ks1i, x19, x13, 0x169e1614169e1614, 0xdfffffffffffffff, 0x1, x1, 8, x2)

aes64ks1i_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0x1608161416081614), rs1:x12(0xbfffffffffffffff), imm:0x1
    TEST_IMM_OP(aes64ks1i, x20, x12, 0x1608161416081614, 0xbfffffffffffffff, 0x1, x1, 16, x2)

aes64ks1i_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0x16d2161416d21614), rs1:x11(0x7fffffffffffffff), imm:0x1
    TEST_IMM_OP(aes64ks1i, x21, x11, 0x16d2161416d21614, 0x7fffffffffffffff, 0x1, x1, 24, x2)

aes64ks1i_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0x1616163616161636), rs1:x10(0xffffffffffffffff), imm:0x5
    TEST_IMM_OP(aes64ks1i, x22, x10, 0x1616163616161636, 0xffffffffffffffff, 0x5, x1, 32, x2)

    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_55_0)


aes64ks1i_01_inst_270:
    // Test 270:  Test with random values
    // result rd:x23(0x55ca540755ca5407), rs1:x9(0x10fd3dedadea5195), imm:0x5
    TEST_IMM_OP(aes64ks1i, x23, x9, 0x55ca540755ca5407, 0x10fd3dedadea5195, 0x5, x1, 0, x2)

aes64ks1i_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1), imm:0x7
    TEST_IMM_OP(aes64ks1i, x0, x8, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0x7, x1, 8, x2)

aes64ks1i_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0x6bdd43d96bdd43d9), rs1:x7(0xc9649f05a8e1a8bb), imm:0x1
    TEST_IMM_OP(aes64ks1i, x25, x7, 0x6bdd43d96bdd43d9, 0xc9649f05a8e1a8bb, 0x1, x1, 16, x2)

aes64ks1i_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x6363636b6363636b), rs1:x0(0x3541291848c99fcb), imm:0x3
    TEST_IMM_OP(aes64ks1i, x26, x0, 0x6363636b6363636b, 0x3541291848c99fcb, 0x3, x1, 24, x2)
	
#endif


RVTEST_CODE_END aes64ks1i_01_code_end
RVTEST_CODE_BEGIN clmul_01_init clmul_01_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x6,signature_1_0)


clmul_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x4158d0b31156fc1f), rs1:x31(0x10fd3dedadea5195), rs2:x16(0xdf7f3844121bcc23)
    TEST_RR_OP(clmul, x1, x31, x16, 0x4158d0b31156fc1f, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x6, 0, x7)

clmul_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x37d11d4118b8791b), rs1:x30(0xbd295ce2d2ffbec1), rs2:x15(0xf5adb41aa47d105b)
    TEST_RR_OP(clmul, x2, x30, x15, 0x37d11d4118b8791b, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x6, 8, x7)

clmul_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0x9cfab0e5acbe9540), rs1:x29(0xc9649f05a8e1a8bb), rs2:x14(0x82f6747f707af2c0)
    TEST_RR_OP(clmul, x3, x29, x14, 0x9cfab0e5acbe9540, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x6, 16, x7)

clmul_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x4fa718af378b221d), rs1:x28(0x3541291848c99fcb), rs2:x13(0x73a92fd4e19bfbc3)
    TEST_RR_OP(clmul, x4, x28, x13, 0x4fa718af378b221d, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x6, 24, x7)

clmul_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0xffab8fef45f9b3f5), rs1:x27(0x10a24740461d524f), rs2:x12(0x546b0e54528a10af)
    TEST_RR_OP(clmul, x5, x27, x12, 0xffab8fef45f9b3f5, 0x10a24740461d524f, 0x546b0e54528a10af, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_2_0)


clmul_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0xffab8fef45f9b3f5), rs1:x26(0x546b0e54528a10af), rs2:x11(0x10a24740461d524f)
    TEST_RR_OP(clmul, x6, x26, x11, 0xffab8fef45f9b3f5, 0x546b0e54528a10af, 0x10a24740461d524f, x1, 0, x2)

clmul_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x4fa718af378b221d), rs1:x25(0x73a92fd4e19bfbc3), rs2:x10(0x3541291848c99fcb)
    TEST_RR_OP(clmul, x7, x25, x10, 0x4fa718af378b221d, 0x73a92fd4e19bfbc3, 0x3541291848c99fcb, x1, 8, x2)

clmul_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x9cfab0e5acbe9540), rs1:x24(0x82f6747f707af2c0), rs2:x9(0xc9649f05a8e1a8bb)
    TEST_RR_OP(clmul, x8, x24, x9, 0x9cfab0e5acbe9540, 0x82f6747f707af2c0, 0xc9649f05a8e1a8bb, x1, 16, x2)

clmul_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0x37d11d4118b8791b), rs1:x23(0xf5adb41aa47d105b), rs2:x8(0xbd295ce2d2ffbec1)
    TEST_RR_OP(clmul, x9, x23, x8, 0x37d11d4118b8791b, 0xf5adb41aa47d105b, 0xbd295ce2d2ffbec1, x1, 24, x2)

clmul_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0x4158d0b31156fc1f), rs1:x22(0xdf7f3844121bcc23), rs2:x7(0x10fd3dedadea5195)
    TEST_RR_OP(clmul, x10, x22, x7, 0x4158d0b31156fc1f, 0xdf7f3844121bcc23, 0x10fd3dedadea5195, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_3_0)


clmul_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffffff), rs1:x21(0x0000000000000001), rs2:x6(0xffffffffffffffff)
    TEST_RR_OP(clmul, x11, x21, x6, 0xffffffffffffffff, 0x1, 0xffffffffffffffff, x1, 0, x7)

clmul_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0xfffffffffffffffe), rs1:x20(0x0000000000000002), rs2:x5(0x7fffffffffffffff)
    TEST_RR_OP(clmul, x12, x20, x5, 0xfffffffffffffffe, 0x2, 0x7fffffffffffffff, x1, 8, x7)

clmul_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0xfffffffffffffffc), rs1:x19(0x0000000000000004), rs2:x4(0xbfffffffffffffff)
    TEST_RR_OP(clmul, x13, x19, x4, 0xfffffffffffffffc, 0x4, 0xbfffffffffffffff, x1, 16, x7)

clmul_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0xfffffffffffffff8), rs1:x18(0x0000000000000008), rs2:x3(0xdfffffffffffffff)
    TEST_RR_OP(clmul, x14, x18, x3, 0xfffffffffffffff8, 0x8, 0xdfffffffffffffff, x1, 24, x7)

clmul_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0xfffffffffffffff0), rs1:x17(0x0000000000000010), rs2:x2(0xefffffffffffffff)
    TEST_RR_OP(clmul, x15, x17, x2, 0xfffffffffffffff0, 0x10, 0xefffffffffffffff, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x2,signature_4_0)


clmul_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffe0), rs1:x16(0x0000000000000020), rs2:x1(0xf7ffffffffffffff)
    TEST_RR_OP(clmul, x16, x16, x1, 0xffffffffffffffe0, 0x20, 0xf7ffffffffffffff, x2, 0, x3)

clmul_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffffffc0), rs1:x15(0x0000000000000040), rs2:x31(0xfbffffffffffffff)
    TEST_RR_OP(clmul, x17, x15, x31, 0xffffffffffffffc0, 0x40, 0xfbffffffffffffff, x2, 8, x3)

clmul_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffff80), rs1:x14(0x0000000000000080), rs2:x30(0xfdffffffffffffff)
    TEST_RR_OP(clmul, x18, x14, x30, 0xffffffffffffff80, 0x80, 0xfdffffffffffffff, x2, 16, x3)

clmul_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffff00), rs1:x13(0x0000000000000100), rs2:x29(0xfeffffffffffffff)
    TEST_RR_OP(clmul, x19, x13, x29, 0xffffffffffffff00, 0x100, 0xfeffffffffffffff, x2, 24, x3)

clmul_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0xfffffffffffffe00), rs1:x12(0x0000000000000200), rs2:x28(0xff7fffffffffffff)
    TEST_RR_OP(clmul, x20, x12, x28, 0xfffffffffffffe00, 0x200, 0xff7fffffffffffff, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_5_0)


clmul_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0xfffffffffffffc00), rs1:x11(0x0000000000000400), rs2:x27(0xffbfffffffffffff)
    TEST_RR_OP(clmul, x21, x11, x27, 0xfffffffffffffc00, 0x400, 0xffbfffffffffffff, x1, 0, x2)

clmul_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0xfffffffffffff800), rs1:x10(0x0000000000000800), rs2:x26(0xffdfffffffffffff)
    TEST_RR_OP(clmul, x22, x10, x26, 0xfffffffffffff800, 0x800, 0xffdfffffffffffff, x1, 8, x2)

clmul_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0xfffffffffffff000), rs1:x9(0x0000000000001000), rs2:x25(0xffefffffffffffff)
    TEST_RR_OP(clmul, x23, x9, x25, 0xfffffffffffff000, 0x1000, 0xffefffffffffffff, x1, 16, x2)

clmul_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffe000), rs1:x8(0x0000000000002000), rs2:x24(0xfff7ffffffffffff)
    TEST_RR_OP(clmul, x24, x8, x24, 0xffffffffffffe000, 0x2000, 0xfff7ffffffffffff, x1, 24, x2)

clmul_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffc000), rs1:x7(0x0000000000004000), rs2:x23(0xfffbffffffffffff)
    TEST_RR_OP(clmul, x25, x7, x23, 0xffffffffffffc000, 0x4000, 0xfffbffffffffffff, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_6_0)


clmul_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffff8000), rs1:x6(0x0000000000008000), rs2:x22(0xfffdffffffffffff)
    TEST_RR_OP(clmul, x26, x6, x22, 0xffffffffffff8000, 0x8000, 0xfffdffffffffffff, x1, 0, x7)

clmul_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffff0000), rs1:x5(0x0000000000010000), rs2:x21(0xfffeffffffffffff)
    TEST_RR_OP(clmul, x27, x5, x21, 0xffffffffffff0000, 0x10000, 0xfffeffffffffffff, x1, 8, x7)

clmul_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0xfffffffffffe0000), rs1:x4(0x0000000000020000), rs2:x20(0xffff7fffffffffff)
    TEST_RR_OP(clmul, x28, x4, x20, 0xfffffffffffe0000, 0x20000, 0xffff7fffffffffff, x1, 16, x7)

clmul_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0xfffffffffffc0000), rs1:x3(0x0000000000040000), rs2:x19(0xffffbfffffffffff)
    TEST_RR_OP(clmul, x29, x3, x19, 0xfffffffffffc0000, 0x40000, 0xffffbfffffffffff, x1, 24, x7)

clmul_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0xfffffffffff80000), rs1:x2(0x0000000000080000), rs2:x18(0xffffdfffffffffff)
    TEST_RR_OP(clmul, x30, x2, x18, 0xfffffffffff80000, 0x80000, 0xffffdfffffffffff, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x5,signature_7_0)


clmul_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0xfffffffffff00000), rs1:x1(0x0000000000100000), rs2:x17(0xffffefffffffffff)
    TEST_RR_OP(clmul, x31, x1, x17, 0xfffffffffff00000, 0x100000, 0xffffefffffffffff, x5, 0, x6)

clmul_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffe00000), rs1:x31(0x0000000000200000), rs2:x16(0xfffff7ffffffffff)
    TEST_RR_OP(clmul, x1, x31, x16, 0xffffffffffe00000, 0x200000, 0xfffff7ffffffffff, x5, 8, x6)

clmul_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffc00000), rs1:x30(0x0000000000400000), rs2:x15(0xfffffbffffffffff)
    TEST_RR_OP(clmul, x2, x30, x15, 0xffffffffffc00000, 0x400000, 0xfffffbffffffffff, x5, 16, x6)

clmul_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0xffffffffff800000), rs1:x29(0x0000000000800000), rs2:x14(0xfffffdffffffffff)
    TEST_RR_OP(clmul, x3, x29, x14, 0xffffffffff800000, 0x800000, 0xfffffdffffffffff, x5, 24, x6)

clmul_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0xffffffffff000000), rs1:x28(0x0000000001000000), rs2:x13(0xfffffeffffffffff)
    TEST_RR_OP(clmul, x4, x28, x13, 0xffffffffff000000, 0x1000000, 0xfffffeffffffffff, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_8_0)


clmul_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0xfffffffffe000000), rs1:x27(0x0000000002000000), rs2:x12(0xffffff7fffffffff)
    TEST_RR_OP(clmul, x5, x27, x12, 0xfffffffffe000000, 0x2000000, 0xffffff7fffffffff, x1, 0, x2)

clmul_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0xfffffffffc000000), rs1:x26(0x0000000004000000), rs2:x11(0xffffffbfffffffff)
    TEST_RR_OP(clmul, x6, x26, x11, 0xfffffffffc000000, 0x4000000, 0xffffffbfffffffff, x1, 8, x2)

clmul_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0xfffffffff8000000), rs1:x25(0x0000000008000000), rs2:x10(0xffffffdfffffffff)
    TEST_RR_OP(clmul, x7, x25, x10, 0xfffffffff8000000, 0x8000000, 0xffffffdfffffffff, x1, 16, x2)

clmul_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0xfffffffff0000000), rs1:x24(0x0000000010000000), rs2:x9(0xffffffefffffffff)
    TEST_RR_OP(clmul, x8, x24, x9, 0xfffffffff0000000, 0x10000000, 0xffffffefffffffff, x1, 24, x2)

clmul_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0xffffffffe0000000), rs1:x23(0x0000000020000000), rs2:x8(0xfffffff7ffffffff)
    TEST_RR_OP(clmul, x9, x23, x8, 0xffffffffe0000000, 0x20000000, 0xfffffff7ffffffff, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_9_0)


clmul_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0xffffffffc0000000), rs1:x22(0x0000000040000000), rs2:x7(0xfffffffbffffffff)
    TEST_RR_OP(clmul, x10, x22, x7, 0xffffffffc0000000, 0x40000000, 0xfffffffbffffffff, x1, 0, x2)

clmul_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0xffffffff80000000), rs1:x21(0x0000000080000000), rs2:x6(0xfffffffdffffffff)
    TEST_RR_OP(clmul, x11, x21, x6, 0xffffffff80000000, 0x80000000, 0xfffffffdffffffff, x1, 8, x2)

clmul_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0xffffffff00000000), rs1:x20(0x0000000100000000), rs2:x5(0xfffffffeffffffff)
    TEST_RR_OP(clmul, x12, x20, x5, 0xffffffff00000000, 0x100000000, 0xfffffffeffffffff, x1, 16, x2)

clmul_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0xfffffffe00000000), rs1:x19(0x0000000200000000), rs2:x4(0xffffffff7fffffff)
    TEST_RR_OP(clmul, x13, x19, x4, 0xfffffffe00000000, 0x200000000, 0xffffffff7fffffff, x1, 24, x2)

clmul_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0xfffffffc00000000), rs1:x18(0x0000000400000000), rs2:x3(0xffffffffbfffffff)
    TEST_RR_OP(clmul, x14, x18, x3, 0xfffffffc00000000, 0x400000000, 0xffffffffbfffffff, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x3,signature_10_0)


clmul_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0xfffffff800000000), rs1:x17(0x0000000800000000), rs2:x2(0xffffffffdfffffff)
    TEST_RR_OP(clmul, x15, x17, x2, 0xfffffff800000000, 0x800000000, 0xffffffffdfffffff, x3, 0, x4)

clmul_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0xfffffff000000000), rs1:x16(0x0000001000000000), rs2:x1(0xffffffffefffffff)
    TEST_RR_OP(clmul, x16, x16, x1, 0xfffffff000000000, 0x1000000000, 0xffffffffefffffff, x3, 8, x4)

clmul_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0xffffffe000000000), rs1:x15(0x0000002000000000), rs2:x31(0xfffffffff7ffffff)
    TEST_RR_OP(clmul, x17, x15, x31, 0xffffffe000000000, 0x2000000000, 0xfffffffff7ffffff, x3, 16, x4)

clmul_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0xffffffc000000000), rs1:x14(0x0000004000000000), rs2:x30(0xfffffffffbffffff)
    TEST_RR_OP(clmul, x18, x14, x30, 0xffffffc000000000, 0x4000000000, 0xfffffffffbffffff, x3, 24, x4)

clmul_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0xffffff8000000000), rs1:x13(0x0000008000000000), rs2:x29(0xfffffffffdffffff)
    TEST_RR_OP(clmul, x19, x13, x29, 0xffffff8000000000, 0x8000000000, 0xfffffffffdffffff, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_11_0)


clmul_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0xffffff0000000000), rs1:x12(0x0000010000000000), rs2:x28(0xfffffffffeffffff)
    TEST_RR_OP(clmul, x20, x12, x28, 0xffffff0000000000, 0x10000000000, 0xfffffffffeffffff, x1, 0, x2)

clmul_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0xfffffe0000000000), rs1:x11(0x0000020000000000), rs2:x27(0xffffffffff7fffff)
    TEST_RR_OP(clmul, x21, x11, x27, 0xfffffe0000000000, 0x20000000000, 0xffffffffff7fffff, x1, 8, x2)

clmul_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0xfffffc0000000000), rs1:x10(0x0000040000000000), rs2:x26(0xffffffffffbfffff)
    TEST_RR_OP(clmul, x22, x10, x26, 0xfffffc0000000000, 0x40000000000, 0xffffffffffbfffff, x1, 16, x2)

clmul_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0xfffff80000000000), rs1:x9(0x0000080000000000), rs2:x25(0xffffffffffdfffff)
    TEST_RR_OP(clmul, x23, x9, x25, 0xfffff80000000000, 0x80000000000, 0xffffffffffdfffff, x1, 24, x2)

clmul_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0xfffff00000000000), rs1:x8(0x0000100000000000), rs2:x24(0xffffffffffefffff)
    TEST_RR_OP(clmul, x24, x8, x24, 0xfffff00000000000, 0x100000000000, 0xffffffffffefffff, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_12_0)


clmul_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0xffffe00000000000), rs1:x7(0x0000200000000000), rs2:x23(0xfffffffffff7ffff)
    TEST_RR_OP(clmul, x25, x7, x23, 0xffffe00000000000, 0x200000000000, 0xfffffffffff7ffff, x1, 0, x2)

clmul_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0xffffc00000000000), rs1:x6(0x0000400000000000), rs2:x22(0xfffffffffffbffff)
    TEST_RR_OP(clmul, x26, x6, x22, 0xffffc00000000000, 0x400000000000, 0xfffffffffffbffff, x1, 8, x2)

clmul_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0xffff800000000000), rs1:x5(0x0000800000000000), rs2:x21(0xfffffffffffdffff)
    TEST_RR_OP(clmul, x27, x5, x21, 0xffff800000000000, 0x800000000000, 0xfffffffffffdffff, x1, 16, x2)

clmul_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0xffff000000000000), rs1:x4(0x0001000000000000), rs2:x20(0xfffffffffffeffff)
    TEST_RR_OP(clmul, x28, x4, x20, 0xffff000000000000, 0x1000000000000, 0xfffffffffffeffff, x1, 24, x2)

clmul_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0xfffe000000000000), rs1:x3(0x0002000000000000), rs2:x19(0xffffffffffff7fff)
    TEST_RR_OP(clmul, x29, x3, x19, 0xfffe000000000000, 0x2000000000000, 0xffffffffffff7fff, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x4,signature_13_0)


clmul_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0xfffc000000000000), rs1:x2(0x0004000000000000), rs2:x18(0xffffffffffffbfff)
    TEST_RR_OP(clmul, x30, x2, x18, 0xfffc000000000000, 0x4000000000000, 0xffffffffffffbfff, x4, 0, x5)

clmul_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0xfff8000000000000), rs1:x1(0x0008000000000000), rs2:x17(0xffffffffffffdfff)
    TEST_RR_OP(clmul, x31, x1, x17, 0xfff8000000000000, 0x8000000000000, 0xffffffffffffdfff, x4, 8, x5)

clmul_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0xfff0000000000000), rs1:x31(0x0010000000000000), rs2:x16(0xffffffffffffefff)
    TEST_RR_OP(clmul, x1, x31, x16, 0xfff0000000000000, 0x10000000000000, 0xffffffffffffefff, x4, 16, x5)

clmul_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0xffe0000000000000), rs1:x30(0x0020000000000000), rs2:x15(0xfffffffffffff7ff)
    TEST_RR_OP(clmul, x2, x30, x15, 0xffe0000000000000, 0x20000000000000, 0xfffffffffffff7ff, x4, 24, x5)

clmul_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0xffc0000000000000), rs1:x29(0x0040000000000000), rs2:x14(0xfffffffffffffbff)
    TEST_RR_OP(clmul, x3, x29, x14, 0xffc0000000000000, 0x40000000000000, 0xfffffffffffffbff, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_14_0)


clmul_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0xff80000000000000), rs1:x28(0x0080000000000000), rs2:x13(0xfffffffffffffdff)
    TEST_RR_OP(clmul, x4, x28, x13, 0xff80000000000000, 0x80000000000000, 0xfffffffffffffdff, x1, 0, x2)

clmul_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0xff00000000000000), rs1:x27(0x0100000000000000), rs2:x12(0xfffffffffffffeff)
    TEST_RR_OP(clmul, x5, x27, x12, 0xff00000000000000, 0x100000000000000, 0xfffffffffffffeff, x1, 8, x2)

clmul_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0xfe00000000000000), rs1:x26(0x0200000000000000), rs2:x11(0xffffffffffffff7f)
    TEST_RR_OP(clmul, x6, x26, x11, 0xfe00000000000000, 0x200000000000000, 0xffffffffffffff7f, x1, 16, x2)

clmul_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0xfc00000000000000), rs1:x25(0x0400000000000000), rs2:x10(0xffffffffffffffbf)
    TEST_RR_OP(clmul, x7, x25, x10, 0xfc00000000000000, 0x400000000000000, 0xffffffffffffffbf, x1, 24, x2)

clmul_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0xf800000000000000), rs1:x24(0x0800000000000000), rs2:x9(0xffffffffffffffdf)
    TEST_RR_OP(clmul, x8, x24, x9, 0xf800000000000000, 0x800000000000000, 0xffffffffffffffdf, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_15_0)


clmul_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0xf000000000000000), rs1:x23(0x1000000000000000), rs2:x8(0xffffffffffffffef)
    TEST_RR_OP(clmul, x9, x23, x8, 0xf000000000000000, 0x1000000000000000, 0xffffffffffffffef, x1, 0, x2)

clmul_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0xe000000000000000), rs1:x22(0x2000000000000000), rs2:x7(0xfffffffffffffff7)
    TEST_RR_OP(clmul, x10, x22, x7, 0xe000000000000000, 0x2000000000000000, 0xfffffffffffffff7, x1, 8, x2)

clmul_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0xc000000000000000), rs1:x21(0x4000000000000000), rs2:x6(0xfffffffffffffffb)
    TEST_RR_OP(clmul, x11, x21, x6, 0xc000000000000000, 0x4000000000000000, 0xfffffffffffffffb, x1, 16, x2)

clmul_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x8000000000000000), rs1:x20(0x8000000000000000), rs2:x5(0xfffffffffffffffd)
    TEST_RR_OP(clmul, x12, x20, x5, 0x8000000000000000, 0x8000000000000000, 0xfffffffffffffffd, x1, 24, x2)

clmul_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000), rs2:x4(0xfffffffffffffffe)
    TEST_RR_OP(clmul, x13, x19, x4, 0x0000000000000000, 0x0, 0xfffffffffffffffe, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x4,signature_16_0)


clmul_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0xfffffffffffffffe), rs2:x3(0x0000000000000000)
    TEST_RR_OP(clmul, x14, x18, x3, 0x0000000000000000, 0xfffffffffffffffe, 0x0, x4, 0, x5)

clmul_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0x8000000000000000), rs1:x17(0xfffffffffffffffd), rs2:x2(0x8000000000000000)
    TEST_RR_OP(clmul, x15, x17, x2, 0x8000000000000000, 0xfffffffffffffffd, 0x8000000000000000, x4, 8, x5)

clmul_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0xc000000000000000), rs1:x16(0xfffffffffffffffb), rs2:x1(0x4000000000000000)
    TEST_RR_OP(clmul, x16, x16, x1, 0xc000000000000000, 0xfffffffffffffffb, 0x4000000000000000, x4, 16, x5)

clmul_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0xe000000000000000), rs1:x15(0xfffffffffffffff7), rs2:x31(0x2000000000000000)
    TEST_RR_OP(clmul, x17, x15, x31, 0xe000000000000000, 0xfffffffffffffff7, 0x2000000000000000, x4, 24, x5)

clmul_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0xf000000000000000), rs1:x14(0xffffffffffffffef), rs2:x30(0x1000000000000000)
    TEST_RR_OP(clmul, x18, x14, x30, 0xf000000000000000, 0xffffffffffffffef, 0x1000000000000000, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_17_0)


clmul_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0xf800000000000000), rs1:x13(0xffffffffffffffdf), rs2:x29(0x0800000000000000)
    TEST_RR_OP(clmul, x19, x13, x29, 0xf800000000000000, 0xffffffffffffffdf, 0x800000000000000, x1, 0, x2)

clmul_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0xfc00000000000000), rs1:x12(0xffffffffffffffbf), rs2:x28(0x0400000000000000)
    TEST_RR_OP(clmul, x20, x12, x28, 0xfc00000000000000, 0xffffffffffffffbf, 0x400000000000000, x1, 8, x2)

clmul_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0xfe00000000000000), rs1:x11(0xffffffffffffff7f), rs2:x27(0x0200000000000000)
    TEST_RR_OP(clmul, x21, x11, x27, 0xfe00000000000000, 0xffffffffffffff7f, 0x200000000000000, x1, 16, x2)

clmul_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0xff00000000000000), rs1:x10(0xfffffffffffffeff), rs2:x26(0x0100000000000000)
    TEST_RR_OP(clmul, x22, x10, x26, 0xff00000000000000, 0xfffffffffffffeff, 0x100000000000000, x1, 24, x2)

clmul_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0xff80000000000000), rs1:x9(0xfffffffffffffdff), rs2:x25(0x0080000000000000)
    TEST_RR_OP(clmul, x23, x9, x25, 0xff80000000000000, 0xfffffffffffffdff, 0x80000000000000, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_18_0)


clmul_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0xffc0000000000000), rs1:x8(0xfffffffffffffbff), rs2:x24(0x0040000000000000)
    TEST_RR_OP(clmul, x24, x8, x24, 0xffc0000000000000, 0xfffffffffffffbff, 0x40000000000000, x1, 0, x2)

clmul_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0xffe0000000000000), rs1:x7(0xfffffffffffff7ff), rs2:x23(0x0020000000000000)
    TEST_RR_OP(clmul, x25, x7, x23, 0xffe0000000000000, 0xfffffffffffff7ff, 0x20000000000000, x1, 8, x2)

clmul_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0xfff0000000000000), rs1:x6(0xffffffffffffefff), rs2:x22(0x0010000000000000)
    TEST_RR_OP(clmul, x26, x6, x22, 0xfff0000000000000, 0xffffffffffffefff, 0x10000000000000, x1, 16, x2)

clmul_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0xfff8000000000000), rs1:x5(0xffffffffffffdfff), rs2:x21(0x0008000000000000)
    TEST_RR_OP(clmul, x27, x5, x21, 0xfff8000000000000, 0xffffffffffffdfff, 0x8000000000000, x1, 24, x2)

clmul_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0xfffc000000000000), rs1:x4(0xffffffffffffbfff), rs2:x20(0x0004000000000000)
    TEST_RR_OP(clmul, x28, x4, x20, 0xfffc000000000000, 0xffffffffffffbfff, 0x4000000000000, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x4,signature_19_0)


clmul_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0xfffe000000000000), rs1:x3(0xffffffffffff7fff), rs2:x19(0x0002000000000000)
    TEST_RR_OP(clmul, x29, x3, x19, 0xfffe000000000000, 0xffffffffffff7fff, 0x2000000000000, x4, 0, x5)

clmul_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0xffff000000000000), rs1:x2(0xfffffffffffeffff), rs2:x18(0x0001000000000000)
    TEST_RR_OP(clmul, x30, x2, x18, 0xffff000000000000, 0xfffffffffffeffff, 0x1000000000000, x4, 8, x5)

clmul_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0xffff800000000000), rs1:x1(0xfffffffffffdffff), rs2:x17(0x0000800000000000)
    TEST_RR_OP(clmul, x31, x1, x17, 0xffff800000000000, 0xfffffffffffdffff, 0x800000000000, x4, 16, x5)

clmul_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0xffffc00000000000), rs1:x31(0xfffffffffffbffff), rs2:x16(0x0000400000000000)
    TEST_RR_OP(clmul, x1, x31, x16, 0xffffc00000000000, 0xfffffffffffbffff, 0x400000000000, x4, 24, x5)

clmul_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0xffffe00000000000), rs1:x30(0xfffffffffff7ffff), rs2:x15(0x0000200000000000)
    TEST_RR_OP(clmul, x2, x30, x15, 0xffffe00000000000, 0xfffffffffff7ffff, 0x200000000000, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_20_0)


clmul_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0xfffff00000000000), rs1:x29(0xffffffffffefffff), rs2:x14(0x0000100000000000)
    TEST_RR_OP(clmul, x3, x29, x14, 0xfffff00000000000, 0xffffffffffefffff, 0x100000000000, x1, 0, x2)

clmul_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0xfffff80000000000), rs1:x28(0xffffffffffdfffff), rs2:x13(0x0000080000000000)
    TEST_RR_OP(clmul, x4, x28, x13, 0xfffff80000000000, 0xffffffffffdfffff, 0x80000000000, x1, 8, x2)

clmul_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0xfffffc0000000000), rs1:x27(0xffffffffffbfffff), rs2:x12(0x0000040000000000)
    TEST_RR_OP(clmul, x5, x27, x12, 0xfffffc0000000000, 0xffffffffffbfffff, 0x40000000000, x1, 16, x2)

clmul_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0xfffffe0000000000), rs1:x26(0xffffffffff7fffff), rs2:x11(0x0000020000000000)
    TEST_RR_OP(clmul, x6, x26, x11, 0xfffffe0000000000, 0xffffffffff7fffff, 0x20000000000, x1, 24, x2)

clmul_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0xffffff0000000000), rs1:x25(0xfffffffffeffffff), rs2:x10(0x0000010000000000)
    TEST_RR_OP(clmul, x7, x25, x10, 0xffffff0000000000, 0xfffffffffeffffff, 0x10000000000, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_21_0)


clmul_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0xffffff8000000000), rs1:x24(0xfffffffffdffffff), rs2:x9(0x0000008000000000)
    TEST_RR_OP(clmul, x8, x24, x9, 0xffffff8000000000, 0xfffffffffdffffff, 0x8000000000, x1, 0, x2)

clmul_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0xffffffc000000000), rs1:x23(0xfffffffffbffffff), rs2:x8(0x0000004000000000)
    TEST_RR_OP(clmul, x9, x23, x8, 0xffffffc000000000, 0xfffffffffbffffff, 0x4000000000, x1, 8, x2)

clmul_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0xffffffe000000000), rs1:x22(0xfffffffff7ffffff), rs2:x7(0x0000002000000000)
    TEST_RR_OP(clmul, x10, x22, x7, 0xffffffe000000000, 0xfffffffff7ffffff, 0x2000000000, x1, 16, x2)

clmul_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0xfffffff000000000), rs1:x21(0xffffffffefffffff), rs2:x6(0x0000001000000000)
    TEST_RR_OP(clmul, x11, x21, x6, 0xfffffff000000000, 0xffffffffefffffff, 0x1000000000, x1, 24, x2)

clmul_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0xfffffff800000000), rs1:x20(0xffffffffdfffffff), rs2:x5(0x0000000800000000)
    TEST_RR_OP(clmul, x12, x20, x5, 0xfffffff800000000, 0xffffffffdfffffff, 0x800000000, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x5,signature_22_0)


clmul_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0xfffffffc00000000), rs1:x19(0xffffffffbfffffff), rs2:x4(0x0000000400000000)
    TEST_RR_OP(clmul, x13, x19, x4, 0xfffffffc00000000, 0xffffffffbfffffff, 0x400000000, x5, 0, x6)

clmul_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0xfffffffe00000000), rs1:x18(0xffffffff7fffffff), rs2:x3(0x0000000200000000)
    TEST_RR_OP(clmul, x14, x18, x3, 0xfffffffe00000000, 0xffffffff7fffffff, 0x200000000, x5, 8, x6)

clmul_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0xffffffff00000000), rs1:x17(0xfffffffeffffffff), rs2:x2(0x0000000100000000)
    TEST_RR_OP(clmul, x15, x17, x2, 0xffffffff00000000, 0xfffffffeffffffff, 0x100000000, x5, 16, x6)

clmul_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0xffffffff80000000), rs1:x16(0xfffffffdffffffff), rs2:x1(0x0000000080000000)
    TEST_RR_OP(clmul, x16, x16, x1, 0xffffffff80000000, 0xfffffffdffffffff, 0x80000000, x5, 24, x6)

clmul_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0xffffffffc0000000), rs1:x15(0xfffffffbffffffff), rs2:x31(0x0000000040000000)
    TEST_RR_OP(clmul, x17, x15, x31, 0xffffffffc0000000, 0xfffffffbffffffff, 0x40000000, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_23_0)


clmul_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0xffffffffe0000000), rs1:x14(0xfffffff7ffffffff), rs2:x30(0x0000000020000000)
    TEST_RR_OP(clmul, x18, x14, x30, 0xffffffffe0000000, 0xfffffff7ffffffff, 0x20000000, x1, 0, x2)

clmul_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0xfffffffff0000000), rs1:x13(0xffffffefffffffff), rs2:x29(0x0000000010000000)
    TEST_RR_OP(clmul, x19, x13, x29, 0xfffffffff0000000, 0xffffffefffffffff, 0x10000000, x1, 8, x2)

clmul_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0xfffffffff8000000), rs1:x12(0xffffffdfffffffff), rs2:x28(0x0000000008000000)
    TEST_RR_OP(clmul, x20, x12, x28, 0xfffffffff8000000, 0xffffffdfffffffff, 0x8000000, x1, 16, x2)

clmul_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0xfffffffffc000000), rs1:x11(0xffffffbfffffffff), rs2:x27(0x0000000004000000)
    TEST_RR_OP(clmul, x21, x11, x27, 0xfffffffffc000000, 0xffffffbfffffffff, 0x4000000, x1, 24, x2)

clmul_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0xfffffffffe000000), rs1:x10(0xffffff7fffffffff), rs2:x26(0x0000000002000000)
    TEST_RR_OP(clmul, x22, x10, x26, 0xfffffffffe000000, 0xffffff7fffffffff, 0x2000000, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_24_0)


clmul_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0xffffffffff000000), rs1:x9(0xfffffeffffffffff), rs2:x25(0x0000000001000000)
    TEST_RR_OP(clmul, x23, x9, x25, 0xffffffffff000000, 0xfffffeffffffffff, 0x1000000, x1, 0, x2)

clmul_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0xffffffffff800000), rs1:x8(0xfffffdffffffffff), rs2:x24(0x0000000000800000)
    TEST_RR_OP(clmul, x24, x8, x24, 0xffffffffff800000, 0xfffffdffffffffff, 0x800000, x1, 8, x2)

clmul_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffc00000), rs1:x7(0xfffffbffffffffff), rs2:x23(0x0000000000400000)
    TEST_RR_OP(clmul, x25, x7, x23, 0xffffffffffc00000, 0xfffffbffffffffff, 0x400000, x1, 16, x2)

clmul_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffe00000), rs1:x6(0xfffff7ffffffffff), rs2:x22(0x0000000000200000)
    TEST_RR_OP(clmul, x26, x6, x22, 0xffffffffffe00000, 0xfffff7ffffffffff, 0x200000, x1, 24, x2)

clmul_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0xfffffffffff00000), rs1:x5(0xffffefffffffffff), rs2:x21(0x0000000000100000)
    TEST_RR_OP(clmul, x27, x5, x21, 0xfffffffffff00000, 0xffffefffffffffff, 0x100000, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x5,signature_25_0)


clmul_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0xfffffffffff80000), rs1:x4(0xffffdfffffffffff), rs2:x20(0x0000000000080000)
    TEST_RR_OP(clmul, x28, x4, x20, 0xfffffffffff80000, 0xffffdfffffffffff, 0x80000, x5, 0, x6)

clmul_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0xfffffffffffc0000), rs1:x3(0xffffbfffffffffff), rs2:x19(0x0000000000040000)
    TEST_RR_OP(clmul, x29, x3, x19, 0xfffffffffffc0000, 0xffffbfffffffffff, 0x40000, x5, 8, x6)

clmul_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0xfffffffffffe0000), rs1:x2(0xffff7fffffffffff), rs2:x18(0x0000000000020000)
    TEST_RR_OP(clmul, x30, x2, x18, 0xfffffffffffe0000, 0xffff7fffffffffff, 0x20000, x5, 16, x6)

clmul_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffff0000), rs1:x1(0xfffeffffffffffff), rs2:x17(0x0000000000010000)
    TEST_RR_OP(clmul, x31, x1, x17, 0xffffffffffff0000, 0xfffeffffffffffff, 0x10000, x5, 24, x6)

clmul_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffff8000), rs1:x31(0xfffdffffffffffff), rs2:x16(0x0000000000008000)
    TEST_RR_OP(clmul, x1, x31, x16, 0xffffffffffff8000, 0xfffdffffffffffff, 0x8000, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_26_0)


clmul_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffc000), rs1:x30(0xfffbffffffffffff), rs2:x15(0x0000000000004000)
    TEST_RR_OP(clmul, x2, x30, x15, 0xffffffffffffc000, 0xfffbffffffffffff, 0x4000, x1, 0, x7)

clmul_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffe000), rs1:x29(0xfff7ffffffffffff), rs2:x14(0x0000000000002000)
    TEST_RR_OP(clmul, x3, x29, x14, 0xffffffffffffe000, 0xfff7ffffffffffff, 0x2000, x1, 8, x7)

clmul_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0xfffffffffffff000), rs1:x28(0xffefffffffffffff), rs2:x13(0x0000000000001000)
    TEST_RR_OP(clmul, x4, x28, x13, 0xfffffffffffff000, 0xffefffffffffffff, 0x1000, x1, 16, x7)

clmul_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0xfffffffffffff800), rs1:x27(0xffdfffffffffffff), rs2:x12(0x0000000000000800)
    TEST_RR_OP(clmul, x5, x27, x12, 0xfffffffffffff800, 0xffdfffffffffffff, 0x800, x1, 24, x7)

clmul_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0xfffffffffffffc00), rs1:x26(0xffbfffffffffffff), rs2:x11(0x0000000000000400)
    TEST_RR_OP(clmul, x6, x26, x11, 0xfffffffffffffc00, 0xffbfffffffffffff, 0x400, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_27_0)


clmul_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0xfffffffffffffe00), rs1:x25(0xff7fffffffffffff), rs2:x10(0x0000000000000200)
    TEST_RR_OP(clmul, x7, x25, x10, 0xfffffffffffffe00, 0xff7fffffffffffff, 0x200, x1, 0, x2)

clmul_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffffff00), rs1:x24(0xfeffffffffffffff), rs2:x9(0x0000000000000100)
    TEST_RR_OP(clmul, x8, x24, x9, 0xffffffffffffff00, 0xfeffffffffffffff, 0x100, x1, 8, x2)

clmul_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffffff80), rs1:x23(0xfdffffffffffffff), rs2:x8(0x0000000000000080)
    TEST_RR_OP(clmul, x9, x23, x8, 0xffffffffffffff80, 0xfdffffffffffffff, 0x80, x1, 16, x2)

clmul_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffffffc0), rs1:x22(0xfbffffffffffffff), rs2:x7(0x0000000000000040)
    TEST_RR_OP(clmul, x10, x22, x7, 0xffffffffffffffc0, 0xfbffffffffffffff, 0x40, x1, 24, x2)

clmul_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffffe0), rs1:x21(0xf7ffffffffffffff), rs2:x6(0x0000000000000020)
    TEST_RR_OP(clmul, x11, x21, x6, 0xffffffffffffffe0, 0xf7ffffffffffffff, 0x20, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x6,signature_28_0)


clmul_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0xfffffffffffffff0), rs1:x20(0xefffffffffffffff), rs2:x5(0x0000000000000010)
    TEST_RR_OP(clmul, x12, x20, x5, 0xfffffffffffffff0, 0xefffffffffffffff, 0x10, x6, 0, x7)

clmul_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0xfffffffffffffff8), rs1:x19(0xdfffffffffffffff), rs2:x4(0x0000000000000008)
    TEST_RR_OP(clmul, x13, x19, x4, 0xfffffffffffffff8, 0xdfffffffffffffff, 0x8, x6, 8, x7)

clmul_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0xfffffffffffffffc), rs1:x18(0xbfffffffffffffff), rs2:x3(0x0000000000000004)
    TEST_RR_OP(clmul, x14, x18, x3, 0xfffffffffffffffc, 0xbfffffffffffffff, 0x4, x6, 16, x7)

clmul_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0xfffffffffffffffe), rs1:x17(0x7fffffffffffffff), rs2:x2(0x0000000000000002)
    TEST_RR_OP(clmul, x15, x17, x2, 0xfffffffffffffffe, 0x7fffffffffffffff, 0x2, x6, 24, x7)

clmul_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xffffffffffffffff), rs2:x1(0x0000000000000001)
    TEST_RR_OP(clmul, x16, x16, x1, 0xffffffffffffffff, 0xffffffffffffffff, 0x1, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_29_0)


clmul_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000000000000001), rs2:x31(0x0000000000000000)
    TEST_RR_OP(clmul, x17, x15, x31, 0x0000000000000000, 0x1, 0x0, x1, 0, x2)

clmul_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000000000000002), rs2:x30(0x0000000000000000)
    TEST_RR_OP(clmul, x18, x14, x30, 0x0000000000000000, 0x2, 0x0, x1, 8, x2)

clmul_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000004), rs2:x29(0x0000000000000000)
    TEST_RR_OP(clmul, x19, x13, x29, 0x0000000000000000, 0x4, 0x0, x1, 16, x2)

clmul_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000000000000008), rs2:x28(0x0000000000000000)
    TEST_RR_OP(clmul, x20, x12, x28, 0x0000000000000000, 0x8, 0x0, x1, 24, x2)

clmul_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000000000010), rs2:x27(0x0000000000000000)
    TEST_RR_OP(clmul, x21, x11, x27, 0x0000000000000000, 0x10, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_30_0)


clmul_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000000000000020), rs2:x26(0x0000000000000000)
    TEST_RR_OP(clmul, x22, x10, x26, 0x0000000000000000, 0x20, 0x0, x1, 0, x2)

clmul_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000000000000040), rs2:x25(0x0000000000000000)
    TEST_RR_OP(clmul, x23, x9, x25, 0x0000000000000000, 0x40, 0x0, x1, 8, x2)

clmul_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000000000000080), rs2:x24(0x0000000000000000)
    TEST_RR_OP(clmul, x24, x8, x24, 0x0000000000000000, 0x80, 0x0, x1, 16, x2)

clmul_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000000000000100), rs2:x23(0x0000000000000000)
    TEST_RR_OP(clmul, x25, x7, x23, 0x0000000000000000, 0x100, 0x0, x1, 24, x2)

clmul_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000000000000200), rs2:x22(0x0000000000000000)
    TEST_RR_OP(clmul, x26, x6, x22, 0x0000000000000000, 0x200, 0x0, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x6,signature_31_0)


clmul_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000000000000400), rs2:x21(0x0000000000000000)
    TEST_RR_OP(clmul, x27, x5, x21, 0x0000000000000000, 0x400, 0x0, x6, 0, x7)

clmul_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000000000000800), rs2:x20(0x0000000000000000)
    TEST_RR_OP(clmul, x28, x4, x20, 0x0000000000000000, 0x800, 0x0, x6, 8, x7)

clmul_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000000000001000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(clmul, x29, x3, x19, 0x0000000000000000, 0x1000, 0x0, x6, 16, x7)

clmul_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000000000002000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(clmul, x30, x2, x18, 0x0000000000000000, 0x2000, 0x0, x6, 24, x7)

clmul_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000000000004000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(clmul, x31, x1, x17, 0x0000000000000000, 0x4000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x6,signature_32_0)


clmul_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000000000008000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(clmul, x1, x31, x16, 0x0000000000000000, 0x8000, 0x0, x6, 0, x7)

clmul_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000000000010000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(clmul, x2, x30, x15, 0x0000000000000000, 0x10000, 0x0, x6, 8, x7)

clmul_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0000000000020000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(clmul, x3, x29, x14, 0x0000000000000000, 0x20000, 0x0, x6, 16, x7)

clmul_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0000000000040000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(clmul, x4, x28, x13, 0x0000000000000000, 0x40000, 0x0, x6, 24, x7)

clmul_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0000000000080000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(clmul, x5, x27, x12, 0x0000000000000000, 0x80000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_33_0)


clmul_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0000000000100000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(clmul, x6, x26, x11, 0x0000000000000000, 0x100000, 0x0, x1, 0, x2)

clmul_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0000000000200000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(clmul, x7, x25, x10, 0x0000000000000000, 0x200000, 0x0, x1, 8, x2)

clmul_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0000000000400000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(clmul, x8, x24, x9, 0x0000000000000000, 0x400000, 0x0, x1, 16, x2)

clmul_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0000000000800000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(clmul, x9, x23, x8, 0x0000000000000000, 0x800000, 0x0, x1, 24, x2)

clmul_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0000000001000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(clmul, x10, x22, x7, 0x0000000000000000, 0x1000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_34_0)


clmul_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0000000002000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(clmul, x11, x21, x6, 0x0000000000000000, 0x2000000, 0x0, x1, 0, x7)

clmul_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000004000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(clmul, x12, x20, x5, 0x0000000000000000, 0x4000000, 0x0, x1, 8, x7)

clmul_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000008000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(clmul, x13, x19, x4, 0x0000000000000000, 0x8000000, 0x0, x1, 16, x7)

clmul_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0000000010000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(clmul, x14, x18, x3, 0x0000000000000000, 0x10000000, 0x0, x1, 24, x7)

clmul_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x0000000020000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(clmul, x15, x17, x2, 0x0000000000000000, 0x20000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x2,signature_35_0)


clmul_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x0000000040000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(clmul, x16, x16, x1, 0x0000000000000000, 0x40000000, 0x0, x2, 0, x3)

clmul_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000000080000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(clmul, x17, x15, x31, 0x0000000000000000, 0x80000000, 0x0, x2, 8, x3)

clmul_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000000100000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(clmul, x18, x14, x30, 0x0000000000000000, 0x100000000, 0x0, x2, 16, x3)

clmul_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000200000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(clmul, x19, x13, x29, 0x0000000000000000, 0x200000000, 0x0, x2, 24, x3)

clmul_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000000400000000), rs2:x28(0x0000000000000000)
    TEST_RR_OP(clmul, x20, x12, x28, 0x0000000000000000, 0x400000000, 0x0, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_36_0)


clmul_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000800000000), rs2:x27(0x0000000000000000)
    TEST_RR_OP(clmul, x21, x11, x27, 0x0000000000000000, 0x800000000, 0x0, x1, 0, x2)

clmul_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000001000000000), rs2:x26(0x0000000000000000)
    TEST_RR_OP(clmul, x22, x10, x26, 0x0000000000000000, 0x1000000000, 0x0, x1, 8, x2)

clmul_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000002000000000), rs2:x25(0x0000000000000000)
    TEST_RR_OP(clmul, x23, x9, x25, 0x0000000000000000, 0x2000000000, 0x0, x1, 16, x2)

clmul_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000004000000000), rs2:x24(0x0000000000000000)
    TEST_RR_OP(clmul, x24, x8, x24, 0x0000000000000000, 0x4000000000, 0x0, x1, 24, x2)

clmul_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000008000000000), rs2:x23(0x0000000000000000)
    TEST_RR_OP(clmul, x25, x7, x23, 0x0000000000000000, 0x8000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_37_0)


clmul_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000010000000000), rs2:x22(0x0000000000000000)
    TEST_RR_OP(clmul, x26, x6, x22, 0x0000000000000000, 0x10000000000, 0x0, x1, 0, x7)

clmul_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000020000000000), rs2:x21(0x0000000000000000)
    TEST_RR_OP(clmul, x27, x5, x21, 0x0000000000000000, 0x20000000000, 0x0, x1, 8, x7)

clmul_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000040000000000), rs2:x20(0x0000000000000000)
    TEST_RR_OP(clmul, x28, x4, x20, 0x0000000000000000, 0x40000000000, 0x0, x1, 16, x7)

clmul_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000080000000000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(clmul, x29, x3, x19, 0x0000000000000000, 0x80000000000, 0x0, x1, 24, x7)

clmul_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000100000000000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(clmul, x30, x2, x18, 0x0000000000000000, 0x100000000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x5,signature_38_0)


clmul_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000200000000000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(clmul, x31, x1, x17, 0x0000000000000000, 0x200000000000, 0x0, x5, 0, x6)

clmul_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000400000000000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(clmul, x1, x31, x16, 0x0000000000000000, 0x400000000000, 0x0, x5, 8, x6)

clmul_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000800000000000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(clmul, x2, x30, x15, 0x0000000000000000, 0x800000000000, 0x0, x5, 16, x6)

clmul_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0001000000000000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(clmul, x3, x29, x14, 0x0000000000000000, 0x1000000000000, 0x0, x5, 24, x6)

clmul_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0002000000000000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(clmul, x4, x28, x13, 0x0000000000000000, 0x2000000000000, 0x0, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_39_0)


clmul_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0004000000000000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(clmul, x5, x27, x12, 0x0000000000000000, 0x4000000000000, 0x0, x1, 0, x2)

clmul_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0008000000000000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(clmul, x6, x26, x11, 0x0000000000000000, 0x8000000000000, 0x0, x1, 8, x2)

clmul_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0010000000000000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(clmul, x7, x25, x10, 0x0000000000000000, 0x10000000000000, 0x0, x1, 16, x2)

clmul_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0020000000000000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(clmul, x8, x24, x9, 0x0000000000000000, 0x20000000000000, 0x0, x1, 24, x2)

clmul_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0040000000000000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(clmul, x9, x23, x8, 0x0000000000000000, 0x40000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_40_0)


clmul_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0080000000000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(clmul, x10, x22, x7, 0x0000000000000000, 0x80000000000000, 0x0, x1, 0, x2)

clmul_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0100000000000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(clmul, x11, x21, x6, 0x0000000000000000, 0x100000000000000, 0x0, x1, 8, x2)

clmul_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0200000000000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(clmul, x12, x20, x5, 0x0000000000000000, 0x200000000000000, 0x0, x1, 16, x2)

clmul_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0400000000000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(clmul, x13, x19, x4, 0x0000000000000000, 0x400000000000000, 0x0, x1, 24, x2)

clmul_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0800000000000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(clmul, x14, x18, x3, 0x0000000000000000, 0x800000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x3,signature_41_0)


clmul_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x1000000000000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(clmul, x15, x17, x2, 0x0000000000000000, 0x1000000000000000, 0x0, x3, 0, x4)

clmul_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x2000000000000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(clmul, x16, x16, x1, 0x0000000000000000, 0x2000000000000000, 0x0, x3, 8, x4)

clmul_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x4000000000000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(clmul, x17, x15, x31, 0x0000000000000000, 0x4000000000000000, 0x0, x3, 16, x4)

clmul_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x8000000000000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(clmul, x18, x14, x30, 0x0000000000000000, 0x8000000000000000, 0x0, x3, 24, x4)

clmul_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(clmul, x19, x13, x29, 0x0000000000000000, 0x0, 0x0, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_42_0)


clmul_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0xfffffffffffffffe), rs2:x28(0x0000000000000000)
    TEST_RR_OP(clmul, x20, x12, x28, 0x0000000000000000, 0xfffffffffffffffe, 0x0, x1, 0, x2)

clmul_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0xfffffffffffffffd), rs2:x27(0x0000000000000000)
    TEST_RR_OP(clmul, x21, x11, x27, 0x0000000000000000, 0xfffffffffffffffd, 0x0, x1, 8, x2)

clmul_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0xfffffffffffffffb), rs2:x26(0x0000000000000000)
    TEST_RR_OP(clmul, x22, x10, x26, 0x0000000000000000, 0xfffffffffffffffb, 0x0, x1, 16, x2)

clmul_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0xfffffffffffffff7), rs2:x25(0x0000000000000000)
    TEST_RR_OP(clmul, x23, x9, x25, 0x0000000000000000, 0xfffffffffffffff7, 0x0, x1, 24, x2)

clmul_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0xffffffffffffffef), rs2:x24(0x0000000000000000)
    TEST_RR_OP(clmul, x24, x8, x24, 0x0000000000000000, 0xffffffffffffffef, 0x0, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_43_0)


clmul_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0xffffffffffffffdf), rs2:x23(0x0000000000000000)
    TEST_RR_OP(clmul, x25, x7, x23, 0x0000000000000000, 0xffffffffffffffdf, 0x0, x1, 0, x2)

clmul_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0xffffffffffffffbf), rs2:x22(0x0000000000000000)
    TEST_RR_OP(clmul, x26, x6, x22, 0x0000000000000000, 0xffffffffffffffbf, 0x0, x1, 8, x2)

clmul_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0xffffffffffffff7f), rs2:x21(0x0000000000000000)
    TEST_RR_OP(clmul, x27, x5, x21, 0x0000000000000000, 0xffffffffffffff7f, 0x0, x1, 16, x2)

clmul_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0xfffffffffffffeff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(clmul, x28, x4, x20, 0x0000000000000000, 0xfffffffffffffeff, 0x0, x1, 24, x2)

clmul_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0xfffffffffffffdff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(clmul, x29, x3, x19, 0x0000000000000000, 0xfffffffffffffdff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x4,signature_44_0)


clmul_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0xfffffffffffffbff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(clmul, x30, x2, x18, 0x0000000000000000, 0xfffffffffffffbff, 0x0, x4, 0, x5)

clmul_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0xfffffffffffff7ff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(clmul, x31, x1, x17, 0x0000000000000000, 0xfffffffffffff7ff, 0x0, x4, 8, x5)

clmul_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0xffffffffffffefff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(clmul, x1, x31, x16, 0x0000000000000000, 0xffffffffffffefff, 0x0, x4, 16, x5)

clmul_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0xffffffffffffdfff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(clmul, x2, x30, x15, 0x0000000000000000, 0xffffffffffffdfff, 0x0, x4, 24, x5)

clmul_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0xffffffffffffbfff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(clmul, x3, x29, x14, 0x0000000000000000, 0xffffffffffffbfff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_45_0)


clmul_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0xffffffffffff7fff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(clmul, x4, x28, x13, 0x0000000000000000, 0xffffffffffff7fff, 0x0, x1, 0, x2)

clmul_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0xfffffffffffeffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(clmul, x5, x27, x12, 0x0000000000000000, 0xfffffffffffeffff, 0x0, x1, 8, x2)

clmul_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0xfffffffffffdffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(clmul, x6, x26, x11, 0x0000000000000000, 0xfffffffffffdffff, 0x0, x1, 16, x2)

clmul_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0xfffffffffffbffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(clmul, x7, x25, x10, 0x0000000000000000, 0xfffffffffffbffff, 0x0, x1, 24, x2)

clmul_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0xfffffffffff7ffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(clmul, x8, x24, x9, 0x0000000000000000, 0xfffffffffff7ffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_46_0)


clmul_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0xffffffffffefffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(clmul, x9, x23, x8, 0x0000000000000000, 0xffffffffffefffff, 0x0, x1, 0, x2)

clmul_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0xffffffffffdfffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(clmul, x10, x22, x7, 0x0000000000000000, 0xffffffffffdfffff, 0x0, x1, 8, x2)

clmul_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0xffffffffffbfffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(clmul, x11, x21, x6, 0x0000000000000000, 0xffffffffffbfffff, 0x0, x1, 16, x2)

clmul_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0xffffffffff7fffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(clmul, x12, x20, x5, 0x0000000000000000, 0xffffffffff7fffff, 0x0, x1, 24, x2)

clmul_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0xfffffffffeffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(clmul, x13, x19, x4, 0x0000000000000000, 0xfffffffffeffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x4,signature_47_0)


clmul_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0xfffffffffdffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(clmul, x14, x18, x3, 0x0000000000000000, 0xfffffffffdffffff, 0x0, x4, 0, x5)

clmul_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0xfffffffffbffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(clmul, x15, x17, x2, 0x0000000000000000, 0xfffffffffbffffff, 0x0, x4, 8, x5)

clmul_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0xfffffffff7ffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(clmul, x16, x16, x1, 0x0000000000000000, 0xfffffffff7ffffff, 0x0, x4, 16, x5)

clmul_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0xffffffffefffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(clmul, x17, x15, x31, 0x0000000000000000, 0xffffffffefffffff, 0x0, x4, 24, x5)

clmul_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0xffffffffdfffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(clmul, x18, x14, x30, 0x0000000000000000, 0xffffffffdfffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_48_0)


clmul_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0xffffffffbfffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(clmul, x19, x13, x29, 0x0000000000000000, 0xffffffffbfffffff, 0x0, x1, 0, x2)

clmul_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0xffffffff7fffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(clmul, x20, x12, x28, 0x0000000000000000, 0xffffffff7fffffff, 0x0, x1, 8, x2)

clmul_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0xfffffffeffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(clmul, x21, x11, x27, 0x0000000000000000, 0xfffffffeffffffff, 0x0, x1, 16, x2)

clmul_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0xfffffffdffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(clmul, x22, x10, x26, 0x0000000000000000, 0xfffffffdffffffff, 0x0, x1, 24, x2)

clmul_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0xfffffffbffffffff), rs2:x25(0x0000000000000000)
    TEST_RR_OP(clmul, x23, x9, x25, 0x0000000000000000, 0xfffffffbffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_49_0)


clmul_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0xfffffff7ffffffff), rs2:x24(0x0000000000000000)
    TEST_RR_OP(clmul, x24, x8, x24, 0x0000000000000000, 0xfffffff7ffffffff, 0x0, x1, 0, x2)

clmul_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0xffffffefffffffff), rs2:x23(0x0000000000000000)
    TEST_RR_OP(clmul, x25, x7, x23, 0x0000000000000000, 0xffffffefffffffff, 0x0, x1, 8, x2)

clmul_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0xffffffdfffffffff), rs2:x22(0x0000000000000000)
    TEST_RR_OP(clmul, x26, x6, x22, 0x0000000000000000, 0xffffffdfffffffff, 0x0, x1, 16, x2)

clmul_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0xffffffbfffffffff), rs2:x21(0x0000000000000000)
    TEST_RR_OP(clmul, x27, x5, x21, 0x0000000000000000, 0xffffffbfffffffff, 0x0, x1, 24, x2)

clmul_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0xffffff7fffffffff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(clmul, x28, x4, x20, 0x0000000000000000, 0xffffff7fffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x4,signature_50_0)


clmul_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0xfffffeffffffffff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(clmul, x29, x3, x19, 0x0000000000000000, 0xfffffeffffffffff, 0x0, x4, 0, x5)

clmul_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0xfffffdffffffffff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(clmul, x30, x2, x18, 0x0000000000000000, 0xfffffdffffffffff, 0x0, x4, 8, x5)

clmul_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0xfffffbffffffffff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(clmul, x31, x1, x17, 0x0000000000000000, 0xfffffbffffffffff, 0x0, x4, 16, x5)

clmul_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0xfffff7ffffffffff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(clmul, x1, x31, x16, 0x0000000000000000, 0xfffff7ffffffffff, 0x0, x4, 24, x5)

clmul_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0xffffefffffffffff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(clmul, x2, x30, x15, 0x0000000000000000, 0xffffefffffffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_51_0)


clmul_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0xffffdfffffffffff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(clmul, x3, x29, x14, 0x0000000000000000, 0xffffdfffffffffff, 0x0, x1, 0, x2)

clmul_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0xffffbfffffffffff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(clmul, x4, x28, x13, 0x0000000000000000, 0xffffbfffffffffff, 0x0, x1, 8, x2)

clmul_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0xffff7fffffffffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(clmul, x5, x27, x12, 0x0000000000000000, 0xffff7fffffffffff, 0x0, x1, 16, x2)

clmul_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0xfffeffffffffffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(clmul, x6, x26, x11, 0x0000000000000000, 0xfffeffffffffffff, 0x0, x1, 24, x2)

clmul_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0xfffdffffffffffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(clmul, x7, x25, x10, 0x0000000000000000, 0xfffdffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_52_0)


clmul_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0xfffbffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(clmul, x8, x24, x9, 0x0000000000000000, 0xfffbffffffffffff, 0x0, x1, 0, x2)

clmul_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0xfff7ffffffffffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(clmul, x9, x23, x8, 0x0000000000000000, 0xfff7ffffffffffff, 0x0, x1, 8, x2)

clmul_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0xffefffffffffffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(clmul, x10, x22, x7, 0x0000000000000000, 0xffefffffffffffff, 0x0, x1, 16, x2)

clmul_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0xffdfffffffffffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(clmul, x11, x21, x6, 0x0000000000000000, 0xffdfffffffffffff, 0x0, x1, 24, x2)

clmul_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0xffbfffffffffffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(clmul, x12, x20, x5, 0x0000000000000000, 0xffbfffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x5,signature_53_0)


clmul_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0xff7fffffffffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(clmul, x13, x19, x4, 0x0000000000000000, 0xff7fffffffffffff, 0x0, x5, 0, x6)

clmul_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0xfeffffffffffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(clmul, x14, x18, x3, 0x0000000000000000, 0xfeffffffffffffff, 0x0, x5, 8, x6)

clmul_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0xfdffffffffffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(clmul, x15, x17, x2, 0x0000000000000000, 0xfdffffffffffffff, 0x0, x5, 16, x6)

clmul_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0xfbffffffffffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(clmul, x16, x16, x1, 0x0000000000000000, 0xfbffffffffffffff, 0x0, x5, 24, x6)

clmul_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0xf7ffffffffffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(clmul, x17, x15, x31, 0x0000000000000000, 0xf7ffffffffffffff, 0x0, x5, 32, x6)

    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_54_0)


clmul_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0xefffffffffffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(clmul, x18, x14, x30, 0x0000000000000000, 0xefffffffffffffff, 0x0, x1, 0, x2)

clmul_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0xdfffffffffffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(clmul, x19, x13, x29, 0x0000000000000000, 0xdfffffffffffffff, 0x0, x1, 8, x2)

clmul_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0xbfffffffffffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(clmul, x20, x12, x28, 0x0000000000000000, 0xbfffffffffffffff, 0x0, x1, 16, x2)

clmul_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x7fffffffffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(clmul, x21, x11, x27, 0x0000000000000000, 0x7fffffffffffffff, 0x0, x1, 24, x2)

clmul_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0xffffffffffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(clmul, x22, x10, x26, 0x0000000000000000, 0xffffffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmul)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmul)

	RVTEST_SIGBASE(x1,signature_55_0)


clmul_01_inst_270:
    // Test 270:  Test with rs1 == rs2
    // result rd:x23(0x0104014550500405), rs1:x25(0x10fd3dedadea5195), rs2:x25(0xdf7f3844121bcc23)
    TEST_RR_OP(clmul, x23, x25, x25, 0x0104014550500405, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x1, 0, x2)

clmul_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1), rs2:x24(0xf5adb41aa47d105b)
    TEST_RR_OP(clmul, x0, x8, x24, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x1, 8, x2)

clmul_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0x0000000000000000), rs1:x7(0xc9649f05a8e1a8bb), rs2:x0(0x82f6747f707af2c0)
    TEST_RR_OP(clmul, x25, x7, x0, 0x0000000000000000, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x1, 16, x2)

clmul_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb), rs2:x22(0x73a92fd4e19bfbc3)
    TEST_RR_OP(clmul, x26, x0, x22, 0x0000000000000000, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x1, 24, x2)
	
#endif


RVTEST_CODE_END clmul_01_code_end
RVTEST_CODE_BEGIN aes64es_01_init aes64es_01_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x6,signature_1_0)


aes64es_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x95d24b559eaf272a), rs1:x31(0x10fd3dedadea5195), rs2:x16(0xdf7f3844121bcc23)
    TEST_RR_OP(aes64es, x1, x31, x16, 0x95d24b559eaf272a, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x6, 0, x7)

aes64es_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0xb595ca98e6ff4a78), rs1:x30(0xbd295ce2d2ffbec1), rs2:x15(0xf5adb41aa47d105b)
    TEST_RR_OP(aes64es, x2, x30, x15, 0xb595ca98e6ff4a78, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x6, 8, x7)

aes64es_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0xc242896b13dadbea), rs1:x29(0xc9649f05a8e1a8bb), rs2:x14(0x82f6747f707af2c0)
    TEST_RR_OP(aes64es, x3, x29, x14, 0xc242896b13dadbea, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x6, 16, x7)

aes64es_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x52d30fad8f14a51f), rs1:x28(0x3541291848c99fcb), rs2:x13(0x73a92fd4e19bfbc3)
    TEST_RR_OP(aes64es, x4, x28, x13, 0x52d30fad8f14a51f, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x6, 24, x7)

aes64es_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x5a7fca09207ea084), rs1:x27(0x10a24740461d524f), rs2:x12(0x546b0e54528a10af)
    TEST_RR_OP(aes64es, x5, x27, x12, 0x5a7fca09207ea084, 0x10a24740461d524f, 0x546b0e54528a10af, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_2_0)


aes64es_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x003a0020caa4ab79), rs1:x26(0x546b0e54528a10af), rs2:x11(0x10a24740461d524f)
    TEST_RR_OP(aes64es, x6, x26, x11, 0x003a0020caa4ab79, 0x546b0e54528a10af, 0x10a24740461d524f, x1, 0, x2)

aes64es_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0xf883db4896dd152e), rs1:x25(0x73a92fd4e19bfbc3), rs2:x10(0x3541291848c99fcb)
    TEST_RR_OP(aes64es, x7, x25, x10, 0xf883db4896dd152e, 0x73a92fd4e19bfbc3, 0x3541291848c99fcb, x1, 8, x2)

aes64es_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x5143c2d2ddf892ba), rs1:x24(0x82f6747f707af2c0), rs2:x9(0xc9649f05a8e1a8bb)
    TEST_RR_OP(aes64es, x8, x24, x9, 0x5143c2d2ddf892ba, 0x82f6747f707af2c0, 0xc9649f05a8e1a8bb, x1, 16, x2)

aes64es_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0x49a5aea27a168d39), rs1:x23(0xf5adb41aa47d105b), rs2:x8(0xbd295ce2d2ffbec1)
    TEST_RR_OP(aes64es, x9, x23, x8, 0x49a5aea27a168d39, 0xf5adb41aa47d105b, 0xbd295ce2d2ffbec1, x1, 24, x2)

aes64es_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0xc954d11bca870726), rs1:x22(0xdf7f3844121bcc23), rs2:x7(0x10fd3dedadea5195)
    TEST_RR_OP(aes64es, x10, x22, x7, 0xc954d11bca870726, 0xdf7f3844121bcc23, 0x10fd3dedadea5195, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_3_0)


aes64es_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x631616631616637c), rs1:x21(0x0000000000000001), rs2:x6(0xffffffffffffffff)
    TEST_RR_OP(aes64es, x11, x21, x6, 0x631616631616637c, 0x1, 0xffffffffffffffff, x1, 0, x7)

aes64es_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x63161663d2166377), rs1:x20(0x0000000000000002), rs2:x5(0x7fffffffffffffff)
    TEST_RR_OP(aes64es, x12, x20, x5, 0x63161663d2166377, 0x2, 0x7fffffffffffffff, x1, 8, x7)

aes64es_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x63161663081663f2), rs1:x19(0x0000000000000004), rs2:x4(0xbfffffffffffffff)
    TEST_RR_OP(aes64es, x13, x19, x4, 0x63161663081663f2, 0x4, 0xbfffffffffffffff, x1, 16, x7)

aes64es_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x631616639e166330), rs1:x18(0x0000000000000008), rs2:x3(0xdfffffffffffffff)
    TEST_RR_OP(aes64es, x14, x18, x3, 0x631616639e166330, 0x8, 0xdfffffffffffffff, x1, 24, x7)

aes64es_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x63161663df1663ca), rs1:x17(0x0000000000000010), rs2:x2(0xefffffffffffffff)
    TEST_RR_OP(aes64es, x15, x17, x2, 0x63161663df1663ca, 0x10, 0xefffffffffffffff, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x2,signature_4_0)


aes64es_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x63161663681663b7), rs1:x16(0x0000000000000020), rs2:x1(0xf7ffffffffffffff)
    TEST_RR_OP(aes64es, x16, x16, x1, 0x63161663681663b7, 0x20, 0xf7ffffffffffffff, x2, 0, x3)

aes64es_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x631616630f166309), rs1:x15(0x0000000000000040), rs2:x31(0xfbffffffffffffff)
    TEST_RR_OP(aes64es, x17, x15, x31, 0x631616630f166309, 0x40, 0xfbffffffffffffff, x2, 8, x3)

aes64es_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x63161663541663cd), rs1:x14(0x0000000000000080), rs2:x30(0xfdffffffffffffff)
    TEST_RR_OP(aes64es, x18, x14, x30, 0x63161663541663cd, 0x80, 0xfdffffffffffffff, x2, 16, x3)

aes64es_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x63161663bb166363), rs1:x13(0x0000000000000100), rs2:x29(0xfeffffffffffffff)
    TEST_RR_OP(aes64es, x19, x13, x29, 0x63161663bb166363, 0x100, 0xfeffffffffffffff, x2, 24, x3)

aes64es_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x63d2166316166363), rs1:x12(0x0000000000000200), rs2:x28(0xff7fffffffffffff)
    TEST_RR_OP(aes64es, x20, x12, x28, 0x63d2166316166363, 0x200, 0xff7fffffffffffff, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_5_0)


aes64es_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x6308166316166363), rs1:x11(0x0000000000000400), rs2:x27(0xffbfffffffffffff)
    TEST_RR_OP(aes64es, x21, x11, x27, 0x6308166316166363, 0x400, 0xffbfffffffffffff, x1, 0, x2)

aes64es_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x639e166316166363), rs1:x10(0x0000000000000800), rs2:x26(0xffdfffffffffffff)
    TEST_RR_OP(aes64es, x22, x10, x26, 0x639e166316166363, 0x800, 0xffdfffffffffffff, x1, 8, x2)

aes64es_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x63df166316166363), rs1:x9(0x0000000000001000), rs2:x25(0xffefffffffffffff)
    TEST_RR_OP(aes64es, x23, x9, x25, 0x63df166316166363, 0x1000, 0xffefffffffffffff, x1, 16, x2)

aes64es_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x6368166316166363), rs1:x8(0x0000000000002000), rs2:x24(0xfff7ffffffffffff)
    TEST_RR_OP(aes64es, x24, x8, x24, 0x6368166316166363, 0x2000, 0xfff7ffffffffffff, x1, 24, x2)

aes64es_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x630f166316166363), rs1:x7(0x0000000000004000), rs2:x23(0xfffbffffffffffff)
    TEST_RR_OP(aes64es, x25, x7, x23, 0x630f166316166363, 0x4000, 0xfffbffffffffffff, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_6_0)


aes64es_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x6354166316166363), rs1:x6(0x0000000000008000), rs2:x22(0xfffdffffffffffff)
    TEST_RR_OP(aes64es, x26, x6, x22, 0x6354166316166363, 0x8000, 0xfffdffffffffffff, x1, 0, x7)

aes64es_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x63bb166316166363), rs1:x5(0x0000000000010000), rs2:x21(0xfffeffffffffffff)
    TEST_RR_OP(aes64es, x27, x5, x21, 0x63bb166316166363, 0x10000, 0xfffeffffffffffff, x1, 8, x7)

aes64es_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x6316166316166363), rs1:x4(0x0000000000020000), rs2:x20(0xffff7fffffffffff)
    TEST_RR_OP(aes64es, x28, x4, x20, 0x6316166316166363, 0x20000, 0xffff7fffffffffff, x1, 16, x7)

aes64es_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x6316166316166363), rs1:x3(0x0000000000040000), rs2:x19(0xffffbfffffffffff)
    TEST_RR_OP(aes64es, x29, x3, x19, 0x6316166316166363, 0x40000, 0xffffbfffffffffff, x1, 24, x7)

aes64es_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x6316166316166363), rs1:x2(0x0000000000080000), rs2:x18(0xffffdfffffffffff)
    TEST_RR_OP(aes64es, x30, x2, x18, 0x6316166316166363, 0x80000, 0xffffdfffffffffff, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x5,signature_7_0)


aes64es_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x6316166316166363), rs1:x1(0x0000000000100000), rs2:x17(0xffffefffffffffff)
    TEST_RR_OP(aes64es, x31, x1, x17, 0x6316166316166363, 0x100000, 0xffffefffffffffff, x5, 0, x6)

aes64es_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x6316166316166363), rs1:x31(0x0000000000200000), rs2:x16(0xfffff7ffffffffff)
    TEST_RR_OP(aes64es, x1, x31, x16, 0x6316166316166363, 0x200000, 0xfffff7ffffffffff, x5, 8, x6)

aes64es_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x6316166316166363), rs1:x30(0x0000000000400000), rs2:x15(0xfffffbffffffffff)
    TEST_RR_OP(aes64es, x2, x30, x15, 0x6316166316166363, 0x400000, 0xfffffbffffffffff, x5, 16, x6)

aes64es_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x6316166316166363), rs1:x29(0x0000000000800000), rs2:x14(0xfffffdffffffffff)
    TEST_RR_OP(aes64es, x3, x29, x14, 0x6316166316166363, 0x800000, 0xfffffdffffffffff, x5, 24, x6)

aes64es_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x7c16166316166363), rs1:x28(0x0000000001000000), rs2:x13(0xfffffeffffffffff)
    TEST_RR_OP(aes64es, x4, x28, x13, 0x7c16166316166363, 0x1000000, 0xfffffeffffffffff, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_8_0)


aes64es_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x7716166316166363), rs1:x27(0x0000000002000000), rs2:x12(0xffffff7fffffffff)
    TEST_RR_OP(aes64es, x5, x27, x12, 0x7716166316166363, 0x2000000, 0xffffff7fffffffff, x1, 0, x2)

aes64es_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0xf216166316166363), rs1:x26(0x0000000004000000), rs2:x11(0xffffffbfffffffff)
    TEST_RR_OP(aes64es, x6, x26, x11, 0xf216166316166363, 0x4000000, 0xffffffbfffffffff, x1, 8, x2)

aes64es_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x3016166316166363), rs1:x25(0x0000000008000000), rs2:x10(0xffffffdfffffffff)
    TEST_RR_OP(aes64es, x7, x25, x10, 0x3016166316166363, 0x8000000, 0xffffffdfffffffff, x1, 16, x2)

aes64es_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0xca16166316166363), rs1:x24(0x0000000010000000), rs2:x9(0xffffffefffffffff)
    TEST_RR_OP(aes64es, x8, x24, x9, 0xca16166316166363, 0x10000000, 0xffffffefffffffff, x1, 24, x2)

aes64es_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0xb716166316166363), rs1:x23(0x0000000020000000), rs2:x8(0xfffffff7ffffffff)
    TEST_RR_OP(aes64es, x9, x23, x8, 0xb716166316166363, 0x20000000, 0xfffffff7ffffffff, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_9_0)


aes64es_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x0916166316166363), rs1:x22(0x0000000040000000), rs2:x7(0xfffffffbffffffff)
    TEST_RR_OP(aes64es, x10, x22, x7, 0x0916166316166363, 0x40000000, 0xfffffffbffffffff, x1, 0, x2)

aes64es_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0xcd16166316166363), rs1:x21(0x0000000080000000), rs2:x6(0xfffffffdffffffff)
    TEST_RR_OP(aes64es, x11, x21, x6, 0xcd16166316166363, 0x80000000, 0xfffffffdffffffff, x1, 8, x2)

aes64es_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x6316167c16166363), rs1:x20(0x0000000100000000), rs2:x5(0xfffffffeffffffff)
    TEST_RR_OP(aes64es, x12, x20, x5, 0x6316167c16166363, 0x100000000, 0xfffffffeffffffff, x1, 16, x2)

aes64es_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x6316167716166363), rs1:x19(0x0000000200000000), rs2:x4(0xffffffff7fffffff)
    TEST_RR_OP(aes64es, x13, x19, x4, 0x6316167716166363, 0x200000000, 0xffffffff7fffffff, x1, 24, x2)

aes64es_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x631616f216166363), rs1:x18(0x0000000400000000), rs2:x3(0xffffffffbfffffff)
    TEST_RR_OP(aes64es, x14, x18, x3, 0x631616f216166363, 0x400000000, 0xffffffffbfffffff, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x3,signature_10_0)


aes64es_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x6316163016166363), rs1:x17(0x0000000800000000), rs2:x2(0xffffffffdfffffff)
    TEST_RR_OP(aes64es, x15, x17, x2, 0x6316163016166363, 0x800000000, 0xffffffffdfffffff, x3, 0, x4)

aes64es_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x631616ca16166363), rs1:x16(0x0000001000000000), rs2:x1(0xffffffffefffffff)
    TEST_RR_OP(aes64es, x16, x16, x1, 0x631616ca16166363, 0x1000000000, 0xffffffffefffffff, x3, 8, x4)

aes64es_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x631616b716166363), rs1:x15(0x0000002000000000), rs2:x31(0xfffffffff7ffffff)
    TEST_RR_OP(aes64es, x17, x15, x31, 0x631616b716166363, 0x2000000000, 0xfffffffff7ffffff, x3, 16, x4)

aes64es_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x6316160916166363), rs1:x14(0x0000004000000000), rs2:x30(0xfffffffffbffffff)
    TEST_RR_OP(aes64es, x18, x14, x30, 0x6316160916166363, 0x4000000000, 0xfffffffffbffffff, x3, 24, x4)

aes64es_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x631616cd16166363), rs1:x13(0x0000008000000000), rs2:x29(0xfffffffffdffffff)
    TEST_RR_OP(aes64es, x19, x13, x29, 0x631616cd16166363, 0x8000000000, 0xfffffffffdffffff, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_11_0)


aes64es_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x6316166316167c63), rs1:x12(0x0000010000000000), rs2:x28(0xfffffffffeffffff)
    TEST_RR_OP(aes64es, x20, x12, x28, 0x6316166316167c63, 0x10000000000, 0xfffffffffeffffff, x1, 0, x2)

aes64es_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x6316166316d27763), rs1:x11(0x0000020000000000), rs2:x27(0xffffffffff7fffff)
    TEST_RR_OP(aes64es, x21, x11, x27, 0x6316166316d27763, 0x20000000000, 0xffffffffff7fffff, x1, 8, x2)

aes64es_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x631616631608f263), rs1:x10(0x0000040000000000), rs2:x26(0xffffffffffbfffff)
    TEST_RR_OP(aes64es, x22, x10, x26, 0x631616631608f263, 0x40000000000, 0xffffffffffbfffff, x1, 16, x2)

aes64es_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x63161663169e3063), rs1:x9(0x0000080000000000), rs2:x25(0xffffffffffdfffff)
    TEST_RR_OP(aes64es, x23, x9, x25, 0x63161663169e3063, 0x80000000000, 0xffffffffffdfffff, x1, 24, x2)

aes64es_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x6316166316dfca63), rs1:x8(0x0000100000000000), rs2:x24(0xffffffffffefffff)
    TEST_RR_OP(aes64es, x24, x8, x24, 0x6316166316dfca63, 0x100000000000, 0xffffffffffefffff, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_12_0)


aes64es_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x631616631668b763), rs1:x7(0x0000200000000000), rs2:x23(0xfffffffffff7ffff)
    TEST_RR_OP(aes64es, x25, x7, x23, 0x631616631668b763, 0x200000000000, 0xfffffffffff7ffff, x1, 0, x2)

aes64es_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x63161663160f0963), rs1:x6(0x0000400000000000), rs2:x22(0xfffffffffffbffff)
    TEST_RR_OP(aes64es, x26, x6, x22, 0x63161663160f0963, 0x400000000000, 0xfffffffffffbffff, x1, 8, x2)

aes64es_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x631616631654cd63), rs1:x5(0x0000800000000000), rs2:x21(0xfffffffffffdffff)
    TEST_RR_OP(aes64es, x27, x5, x21, 0x631616631654cd63, 0x800000000000, 0xfffffffffffdffff, x1, 16, x2)

aes64es_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x6316166316bb6363), rs1:x4(0x0001000000000000), rs2:x20(0xfffffffffffeffff)
    TEST_RR_OP(aes64es, x28, x4, x20, 0x6316166316bb6363, 0x1000000000000, 0xfffffffffffeffff, x1, 24, x2)

aes64es_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x6316d26316166363), rs1:x3(0x0002000000000000), rs2:x19(0xffffffffffff7fff)
    TEST_RR_OP(aes64es, x29, x3, x19, 0x6316d26316166363, 0x2000000000000, 0xffffffffffff7fff, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x4,signature_13_0)


aes64es_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x6316086316166363), rs1:x2(0x0004000000000000), rs2:x18(0xffffffffffffbfff)
    TEST_RR_OP(aes64es, x30, x2, x18, 0x6316086316166363, 0x4000000000000, 0xffffffffffffbfff, x4, 0, x5)

aes64es_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x63169e6316166363), rs1:x1(0x0008000000000000), rs2:x17(0xffffffffffffdfff)
    TEST_RR_OP(aes64es, x31, x1, x17, 0x63169e6316166363, 0x8000000000000, 0xffffffffffffdfff, x4, 8, x5)

aes64es_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x6316df6316166363), rs1:x31(0x0010000000000000), rs2:x16(0xffffffffffffefff)
    TEST_RR_OP(aes64es, x1, x31, x16, 0x6316df6316166363, 0x10000000000000, 0xffffffffffffefff, x4, 16, x5)

aes64es_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x6316686316166363), rs1:x30(0x0020000000000000), rs2:x15(0xfffffffffffff7ff)
    TEST_RR_OP(aes64es, x2, x30, x15, 0x6316686316166363, 0x20000000000000, 0xfffffffffffff7ff, x4, 24, x5)

aes64es_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x63160f6316166363), rs1:x29(0x0040000000000000), rs2:x14(0xfffffffffffffbff)
    TEST_RR_OP(aes64es, x3, x29, x14, 0x63160f6316166363, 0x40000000000000, 0xfffffffffffffbff, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_14_0)


aes64es_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x6316546316166363), rs1:x28(0x0080000000000000), rs2:x13(0xfffffffffffffdff)
    TEST_RR_OP(aes64es, x4, x28, x13, 0x6316546316166363, 0x80000000000000, 0xfffffffffffffdff, x1, 0, x2)

aes64es_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x6316bb6316166363), rs1:x27(0x0100000000000000), rs2:x12(0xfffffffffffffeff)
    TEST_RR_OP(aes64es, x5, x27, x12, 0x6316bb6316166363, 0x100000000000000, 0xfffffffffffffeff, x1, 8, x2)

aes64es_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x6316166316166363), rs1:x26(0x0200000000000000), rs2:x11(0xffffffffffffff7f)
    TEST_RR_OP(aes64es, x6, x26, x11, 0x6316166316166363, 0x200000000000000, 0xffffffffffffff7f, x1, 16, x2)

aes64es_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x6316166316166363), rs1:x25(0x0400000000000000), rs2:x10(0xffffffffffffffbf)
    TEST_RR_OP(aes64es, x7, x25, x10, 0x6316166316166363, 0x400000000000000, 0xffffffffffffffbf, x1, 24, x2)

aes64es_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x6316166316166363), rs1:x24(0x0800000000000000), rs2:x9(0xffffffffffffffdf)
    TEST_RR_OP(aes64es, x8, x24, x9, 0x6316166316166363, 0x800000000000000, 0xffffffffffffffdf, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_15_0)


aes64es_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x6316166316166363), rs1:x23(0x1000000000000000), rs2:x8(0xffffffffffffffef)
    TEST_RR_OP(aes64es, x9, x23, x8, 0x6316166316166363, 0x1000000000000000, 0xffffffffffffffef, x1, 0, x2)

aes64es_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x6316166316166363), rs1:x22(0x2000000000000000), rs2:x7(0xfffffffffffffff7)
    TEST_RR_OP(aes64es, x10, x22, x7, 0x6316166316166363, 0x2000000000000000, 0xfffffffffffffff7, x1, 8, x2)

aes64es_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x6316166316166363), rs1:x21(0x4000000000000000), rs2:x6(0xfffffffffffffffb)
    TEST_RR_OP(aes64es, x11, x21, x6, 0x6316166316166363, 0x4000000000000000, 0xfffffffffffffffb, x1, 16, x2)

aes64es_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x6316166316166363), rs1:x20(0x8000000000000000), rs2:x5(0xfffffffffffffffd)
    TEST_RR_OP(aes64es, x12, x20, x5, 0x6316166316166363, 0x8000000000000000, 0xfffffffffffffffd, x1, 24, x2)

aes64es_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x6316166316166363), rs1:x19(0x0000000000000000), rs2:x4(0xfffffffffffffffe)
    TEST_RR_OP(aes64es, x13, x19, x4, 0x6316166316166363, 0x0, 0xfffffffffffffffe, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x4,signature_16_0)


aes64es_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0x16636316636316bb), rs1:x18(0xfffffffffffffffe), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64es, x14, x18, x3, 0x16636316636316bb, 0xfffffffffffffffe, 0x0, x4, 0, x5)

aes64es_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0x16636316cd631654), rs1:x17(0xfffffffffffffffd), rs2:x2(0x8000000000000000)
    TEST_RR_OP(aes64es, x15, x17, x2, 0x16636316cd631654, 0xfffffffffffffffd, 0x8000000000000000, x4, 8, x5)

aes64es_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0x166363160963160f), rs1:x16(0xfffffffffffffffb), rs2:x1(0x4000000000000000)
    TEST_RR_OP(aes64es, x16, x16, x1, 0x166363160963160f, 0xfffffffffffffffb, 0x4000000000000000, x4, 16, x5)

aes64es_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0x16636316b7631668), rs1:x15(0xfffffffffffffff7), rs2:x31(0x2000000000000000)
    TEST_RR_OP(aes64es, x17, x15, x31, 0x16636316b7631668, 0xfffffffffffffff7, 0x2000000000000000, x4, 24, x5)

aes64es_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0x16636316ca6316df), rs1:x14(0xffffffffffffffef), rs2:x30(0x1000000000000000)
    TEST_RR_OP(aes64es, x18, x14, x30, 0x16636316ca6316df, 0xffffffffffffffef, 0x1000000000000000, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_17_0)


aes64es_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0x166363163063169e), rs1:x13(0xffffffffffffffdf), rs2:x29(0x0800000000000000)
    TEST_RR_OP(aes64es, x19, x13, x29, 0x166363163063169e, 0xffffffffffffffdf, 0x800000000000000, x1, 0, x2)

aes64es_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0x16636316f2631608), rs1:x12(0xffffffffffffffbf), rs2:x28(0x0400000000000000)
    TEST_RR_OP(aes64es, x20, x12, x28, 0x16636316f2631608, 0xffffffffffffffbf, 0x400000000000000, x1, 8, x2)

aes64es_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0x16636316776316d2), rs1:x11(0xffffffffffffff7f), rs2:x27(0x0200000000000000)
    TEST_RR_OP(aes64es, x21, x11, x27, 0x16636316776316d2, 0xffffffffffffff7f, 0x200000000000000, x1, 16, x2)

aes64es_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0x166363167c631616), rs1:x10(0xfffffffffffffeff), rs2:x26(0x0100000000000000)
    TEST_RR_OP(aes64es, x22, x10, x26, 0x166363167c631616, 0xfffffffffffffeff, 0x100000000000000, x1, 24, x2)

aes64es_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0x16cd631663631616), rs1:x9(0xfffffffffffffdff), rs2:x25(0x0080000000000000)
    TEST_RR_OP(aes64es, x23, x9, x25, 0x16cd631663631616, 0xfffffffffffffdff, 0x80000000000000, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_18_0)


aes64es_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0x1609631663631616), rs1:x8(0xfffffffffffffbff), rs2:x24(0x0040000000000000)
    TEST_RR_OP(aes64es, x24, x8, x24, 0x1609631663631616, 0xfffffffffffffbff, 0x40000000000000, x1, 0, x2)

aes64es_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0x16b7631663631616), rs1:x7(0xfffffffffffff7ff), rs2:x23(0x0020000000000000)
    TEST_RR_OP(aes64es, x25, x7, x23, 0x16b7631663631616, 0xfffffffffffff7ff, 0x20000000000000, x1, 8, x2)

aes64es_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0x16ca631663631616), rs1:x6(0xffffffffffffefff), rs2:x22(0x0010000000000000)
    TEST_RR_OP(aes64es, x26, x6, x22, 0x16ca631663631616, 0xffffffffffffefff, 0x10000000000000, x1, 16, x2)

aes64es_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0x1630631663631616), rs1:x5(0xffffffffffffdfff), rs2:x21(0x0008000000000000)
    TEST_RR_OP(aes64es, x27, x5, x21, 0x1630631663631616, 0xffffffffffffdfff, 0x8000000000000, x1, 24, x2)

aes64es_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0x16f2631663631616), rs1:x4(0xffffffffffffbfff), rs2:x20(0x0004000000000000)
    TEST_RR_OP(aes64es, x28, x4, x20, 0x16f2631663631616, 0xffffffffffffbfff, 0x4000000000000, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x4,signature_19_0)


aes64es_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0x1677631663631616), rs1:x3(0xffffffffffff7fff), rs2:x19(0x0002000000000000)
    TEST_RR_OP(aes64es, x29, x3, x19, 0x1677631663631616, 0xffffffffffff7fff, 0x2000000000000, x4, 0, x5)

aes64es_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0x167c631663631616), rs1:x2(0xfffffffffffeffff), rs2:x18(0x0001000000000000)
    TEST_RR_OP(aes64es, x30, x2, x18, 0x167c631663631616, 0xfffffffffffeffff, 0x1000000000000, x4, 8, x5)

aes64es_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0x1663631663631616), rs1:x1(0xfffffffffffdffff), rs2:x17(0x0000800000000000)
    TEST_RR_OP(aes64es, x31, x1, x17, 0x1663631663631616, 0xfffffffffffdffff, 0x800000000000, x4, 16, x5)

aes64es_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0x1663631663631616), rs1:x31(0xfffffffffffbffff), rs2:x16(0x0000400000000000)
    TEST_RR_OP(aes64es, x1, x31, x16, 0x1663631663631616, 0xfffffffffffbffff, 0x400000000000, x4, 24, x5)

aes64es_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0x1663631663631616), rs1:x30(0xfffffffffff7ffff), rs2:x15(0x0000200000000000)
    TEST_RR_OP(aes64es, x2, x30, x15, 0x1663631663631616, 0xfffffffffff7ffff, 0x200000000000, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_20_0)


aes64es_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0x1663631663631616), rs1:x29(0xffffffffffefffff), rs2:x14(0x0000100000000000)
    TEST_RR_OP(aes64es, x3, x29, x14, 0x1663631663631616, 0xffffffffffefffff, 0x100000000000, x1, 0, x2)

aes64es_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0x1663631663631616), rs1:x28(0xffffffffffdfffff), rs2:x13(0x0000080000000000)
    TEST_RR_OP(aes64es, x4, x28, x13, 0x1663631663631616, 0xffffffffffdfffff, 0x80000000000, x1, 8, x2)

aes64es_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0x1663631663631616), rs1:x27(0xffffffffffbfffff), rs2:x12(0x0000040000000000)
    TEST_RR_OP(aes64es, x5, x27, x12, 0x1663631663631616, 0xffffffffffbfffff, 0x40000000000, x1, 16, x2)

aes64es_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0x1663631663631616), rs1:x26(0xffffffffff7fffff), rs2:x11(0x0000020000000000)
    TEST_RR_OP(aes64es, x6, x26, x11, 0x1663631663631616, 0xffffffffff7fffff, 0x20000000000, x1, 24, x2)

aes64es_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0xbb63631663631616), rs1:x25(0xfffffffffeffffff), rs2:x10(0x0000010000000000)
    TEST_RR_OP(aes64es, x7, x25, x10, 0xbb63631663631616, 0xfffffffffeffffff, 0x10000000000, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_21_0)


aes64es_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0x5463631663631616), rs1:x24(0xfffffffffdffffff), rs2:x9(0x0000008000000000)
    TEST_RR_OP(aes64es, x8, x24, x9, 0x5463631663631616, 0xfffffffffdffffff, 0x8000000000, x1, 0, x2)

aes64es_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0x0f63631663631616), rs1:x23(0xfffffffffbffffff), rs2:x8(0x0000004000000000)
    TEST_RR_OP(aes64es, x9, x23, x8, 0x0f63631663631616, 0xfffffffffbffffff, 0x4000000000, x1, 8, x2)

aes64es_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0x6863631663631616), rs1:x22(0xfffffffff7ffffff), rs2:x7(0x0000002000000000)
    TEST_RR_OP(aes64es, x10, x22, x7, 0x6863631663631616, 0xfffffffff7ffffff, 0x2000000000, x1, 16, x2)

aes64es_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0xdf63631663631616), rs1:x21(0xffffffffefffffff), rs2:x6(0x0000001000000000)
    TEST_RR_OP(aes64es, x11, x21, x6, 0xdf63631663631616, 0xffffffffefffffff, 0x1000000000, x1, 24, x2)

aes64es_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0x9e63631663631616), rs1:x20(0xffffffffdfffffff), rs2:x5(0x0000000800000000)
    TEST_RR_OP(aes64es, x12, x20, x5, 0x9e63631663631616, 0xffffffffdfffffff, 0x800000000, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x5,signature_22_0)


aes64es_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0x0863631663631616), rs1:x19(0xffffffffbfffffff), rs2:x4(0x0000000400000000)
    TEST_RR_OP(aes64es, x13, x19, x4, 0x0863631663631616, 0xffffffffbfffffff, 0x400000000, x5, 0, x6)

aes64es_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0xd263631663631616), rs1:x18(0xffffffff7fffffff), rs2:x3(0x0000000200000000)
    TEST_RR_OP(aes64es, x14, x18, x3, 0xd263631663631616, 0xffffffff7fffffff, 0x200000000, x5, 8, x6)

aes64es_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0x166363bb63631616), rs1:x17(0xfffffffeffffffff), rs2:x2(0x0000000100000000)
    TEST_RR_OP(aes64es, x15, x17, x2, 0x166363bb63631616, 0xfffffffeffffffff, 0x100000000, x5, 16, x6)

aes64es_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0x1663635463631616), rs1:x16(0xfffffffdffffffff), rs2:x1(0x0000000080000000)
    TEST_RR_OP(aes64es, x16, x16, x1, 0x1663635463631616, 0xfffffffdffffffff, 0x80000000, x5, 24, x6)

aes64es_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0x1663630f63631616), rs1:x15(0xfffffffbffffffff), rs2:x31(0x0000000040000000)
    TEST_RR_OP(aes64es, x17, x15, x31, 0x1663630f63631616, 0xfffffffbffffffff, 0x40000000, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_23_0)


aes64es_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0x1663636863631616), rs1:x14(0xfffffff7ffffffff), rs2:x30(0x0000000020000000)
    TEST_RR_OP(aes64es, x18, x14, x30, 0x1663636863631616, 0xfffffff7ffffffff, 0x20000000, x1, 0, x2)

aes64es_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0x166363df63631616), rs1:x13(0xffffffefffffffff), rs2:x29(0x0000000010000000)
    TEST_RR_OP(aes64es, x19, x13, x29, 0x166363df63631616, 0xffffffefffffffff, 0x10000000, x1, 8, x2)

aes64es_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0x1663639e63631616), rs1:x12(0xffffffdfffffffff), rs2:x28(0x0000000008000000)
    TEST_RR_OP(aes64es, x20, x12, x28, 0x1663639e63631616, 0xffffffdfffffffff, 0x8000000, x1, 16, x2)

aes64es_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0x1663630863631616), rs1:x11(0xffffffbfffffffff), rs2:x27(0x0000000004000000)
    TEST_RR_OP(aes64es, x21, x11, x27, 0x1663630863631616, 0xffffffbfffffffff, 0x4000000, x1, 24, x2)

aes64es_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0x166363d263631616), rs1:x10(0xffffff7fffffffff), rs2:x26(0x0000000002000000)
    TEST_RR_OP(aes64es, x22, x10, x26, 0x166363d263631616, 0xffffff7fffffffff, 0x2000000, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_24_0)


aes64es_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0x166363166363bb16), rs1:x9(0xfffffeffffffffff), rs2:x25(0x0000000001000000)
    TEST_RR_OP(aes64es, x23, x9, x25, 0x166363166363bb16, 0xfffffeffffffffff, 0x1000000, x1, 0, x2)

aes64es_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0x1663631663cd5416), rs1:x8(0xfffffdffffffffff), rs2:x24(0x0000000000800000)
    TEST_RR_OP(aes64es, x24, x8, x24, 0x1663631663cd5416, 0xfffffdffffffffff, 0x800000, x1, 8, x2)

aes64es_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0x1663631663090f16), rs1:x7(0xfffffbffffffffff), rs2:x23(0x0000000000400000)
    TEST_RR_OP(aes64es, x25, x7, x23, 0x1663631663090f16, 0xfffffbffffffffff, 0x400000, x1, 16, x2)

aes64es_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0x1663631663b76816), rs1:x6(0xfffff7ffffffffff), rs2:x22(0x0000000000200000)
    TEST_RR_OP(aes64es, x26, x6, x22, 0x1663631663b76816, 0xfffff7ffffffffff, 0x200000, x1, 24, x2)

aes64es_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0x1663631663cadf16), rs1:x5(0xffffefffffffffff), rs2:x21(0x0000000000100000)
    TEST_RR_OP(aes64es, x27, x5, x21, 0x1663631663cadf16, 0xffffefffffffffff, 0x100000, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x5,signature_25_0)


aes64es_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0x1663631663309e16), rs1:x4(0xffffdfffffffffff), rs2:x20(0x0000000000080000)
    TEST_RR_OP(aes64es, x28, x4, x20, 0x1663631663309e16, 0xffffdfffffffffff, 0x80000, x5, 0, x6)

aes64es_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0x1663631663f20816), rs1:x3(0xffffbfffffffffff), rs2:x19(0x0000000000040000)
    TEST_RR_OP(aes64es, x29, x3, x19, 0x1663631663f20816, 0xffffbfffffffffff, 0x40000, x5, 8, x6)

aes64es_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0x166363166377d216), rs1:x2(0xffff7fffffffffff), rs2:x18(0x0000000000020000)
    TEST_RR_OP(aes64es, x30, x2, x18, 0x166363166377d216, 0xffff7fffffffffff, 0x20000, x5, 16, x6)

aes64es_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0x16636316637c1616), rs1:x1(0xfffeffffffffffff), rs2:x17(0x0000000000010000)
    TEST_RR_OP(aes64es, x31, x1, x17, 0x16636316637c1616, 0xfffeffffffffffff, 0x10000, x5, 24, x6)

aes64es_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0x1663cd1663631616), rs1:x31(0xfffdffffffffffff), rs2:x16(0x0000000000008000)
    TEST_RR_OP(aes64es, x1, x31, x16, 0x1663cd1663631616, 0xfffdffffffffffff, 0x8000, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_26_0)


aes64es_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0x1663091663631616), rs1:x30(0xfffbffffffffffff), rs2:x15(0x0000000000004000)
    TEST_RR_OP(aes64es, x2, x30, x15, 0x1663091663631616, 0xfffbffffffffffff, 0x4000, x1, 0, x7)

aes64es_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0x1663b71663631616), rs1:x29(0xfff7ffffffffffff), rs2:x14(0x0000000000002000)
    TEST_RR_OP(aes64es, x3, x29, x14, 0x1663b71663631616, 0xfff7ffffffffffff, 0x2000, x1, 8, x7)

aes64es_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0x1663ca1663631616), rs1:x28(0xffefffffffffffff), rs2:x13(0x0000000000001000)
    TEST_RR_OP(aes64es, x4, x28, x13, 0x1663ca1663631616, 0xffefffffffffffff, 0x1000, x1, 16, x7)

aes64es_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0x1663301663631616), rs1:x27(0xffdfffffffffffff), rs2:x12(0x0000000000000800)
    TEST_RR_OP(aes64es, x5, x27, x12, 0x1663301663631616, 0xffdfffffffffffff, 0x800, x1, 24, x7)

aes64es_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0x1663f21663631616), rs1:x26(0xffbfffffffffffff), rs2:x11(0x0000000000000400)
    TEST_RR_OP(aes64es, x6, x26, x11, 0x1663f21663631616, 0xffbfffffffffffff, 0x400, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_27_0)


aes64es_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0x1663771663631616), rs1:x25(0xff7fffffffffffff), rs2:x10(0x0000000000000200)
    TEST_RR_OP(aes64es, x7, x25, x10, 0x1663771663631616, 0xff7fffffffffffff, 0x200, x1, 0, x2)

aes64es_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0x16637c1663631616), rs1:x24(0xfeffffffffffffff), rs2:x9(0x0000000000000100)
    TEST_RR_OP(aes64es, x8, x24, x9, 0x16637c1663631616, 0xfeffffffffffffff, 0x100, x1, 8, x2)

aes64es_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0x1663631663631616), rs1:x23(0xfdffffffffffffff), rs2:x8(0x0000000000000080)
    TEST_RR_OP(aes64es, x9, x23, x8, 0x1663631663631616, 0xfdffffffffffffff, 0x80, x1, 16, x2)

aes64es_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0x1663631663631616), rs1:x22(0xfbffffffffffffff), rs2:x7(0x0000000000000040)
    TEST_RR_OP(aes64es, x10, x22, x7, 0x1663631663631616, 0xfbffffffffffffff, 0x40, x1, 24, x2)

aes64es_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0x1663631663631616), rs1:x21(0xf7ffffffffffffff), rs2:x6(0x0000000000000020)
    TEST_RR_OP(aes64es, x11, x21, x6, 0x1663631663631616, 0xf7ffffffffffffff, 0x20, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x6,signature_28_0)


aes64es_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0x1663631663631616), rs1:x20(0xefffffffffffffff), rs2:x5(0x0000000000000010)
    TEST_RR_OP(aes64es, x12, x20, x5, 0x1663631663631616, 0xefffffffffffffff, 0x10, x6, 0, x7)

aes64es_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0x1663631663631616), rs1:x19(0xdfffffffffffffff), rs2:x4(0x0000000000000008)
    TEST_RR_OP(aes64es, x13, x19, x4, 0x1663631663631616, 0xdfffffffffffffff, 0x8, x6, 8, x7)

aes64es_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0x1663631663631616), rs1:x18(0xbfffffffffffffff), rs2:x3(0x0000000000000004)
    TEST_RR_OP(aes64es, x14, x18, x3, 0x1663631663631616, 0xbfffffffffffffff, 0x4, x6, 16, x7)

aes64es_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0x1663631663631616), rs1:x17(0x7fffffffffffffff), rs2:x2(0x0000000000000002)
    TEST_RR_OP(aes64es, x15, x17, x2, 0x1663631663631616, 0x7fffffffffffffff, 0x2, x6, 24, x7)

aes64es_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0x1663631663631616), rs1:x16(0xffffffffffffffff), rs2:x1(0x0000000000000001)
    TEST_RR_OP(aes64es, x16, x16, x1, 0x1663631663631616, 0xffffffffffffffff, 0x1, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_29_0)


aes64es_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x636363636363637c), rs1:x15(0x0000000000000001), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64es, x17, x15, x31, 0x636363636363637c, 0x1, 0x0, x1, 0, x2)

aes64es_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x6363636363636377), rs1:x14(0x0000000000000002), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64es, x18, x14, x30, 0x6363636363636377, 0x2, 0x0, x1, 8, x2)

aes64es_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x63636363636363f2), rs1:x13(0x0000000000000004), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64es, x19, x13, x29, 0x63636363636363f2, 0x4, 0x0, x1, 16, x2)

aes64es_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x6363636363636330), rs1:x12(0x0000000000000008), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64es, x20, x12, x28, 0x6363636363636330, 0x8, 0x0, x1, 24, x2)

aes64es_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x63636363636363ca), rs1:x11(0x0000000000000010), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64es, x21, x11, x27, 0x63636363636363ca, 0x10, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_30_0)


aes64es_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x63636363636363b7), rs1:x10(0x0000000000000020), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64es, x22, x10, x26, 0x63636363636363b7, 0x20, 0x0, x1, 0, x2)

aes64es_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x6363636363636309), rs1:x9(0x0000000000000040), rs2:x25(0x0000000000000000)
    TEST_RR_OP(aes64es, x23, x9, x25, 0x6363636363636309, 0x40, 0x0, x1, 8, x2)

aes64es_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x63636363636363cd), rs1:x8(0x0000000000000080), rs2:x24(0x0000000000000000)
    TEST_RR_OP(aes64es, x24, x8, x24, 0x63636363636363cd, 0x80, 0x0, x1, 16, x2)

aes64es_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x6363636363636363), rs1:x7(0x0000000000000100), rs2:x23(0x0000000000000000)
    TEST_RR_OP(aes64es, x25, x7, x23, 0x6363636363636363, 0x100, 0x0, x1, 24, x2)

aes64es_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x6363636363636363), rs1:x6(0x0000000000000200), rs2:x22(0x0000000000000000)
    TEST_RR_OP(aes64es, x26, x6, x22, 0x6363636363636363, 0x200, 0x0, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x6,signature_31_0)


aes64es_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x6363636363636363), rs1:x5(0x0000000000000400), rs2:x21(0x0000000000000000)
    TEST_RR_OP(aes64es, x27, x5, x21, 0x6363636363636363, 0x400, 0x0, x6, 0, x7)

aes64es_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x6363636363636363), rs1:x4(0x0000000000000800), rs2:x20(0x0000000000000000)
    TEST_RR_OP(aes64es, x28, x4, x20, 0x6363636363636363, 0x800, 0x0, x6, 8, x7)

aes64es_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x6363636363636363), rs1:x3(0x0000000000001000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(aes64es, x29, x3, x19, 0x6363636363636363, 0x1000, 0x0, x6, 16, x7)

aes64es_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x6363636363636363), rs1:x2(0x0000000000002000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(aes64es, x30, x2, x18, 0x6363636363636363, 0x2000, 0x0, x6, 24, x7)

aes64es_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x6363636363636363), rs1:x1(0x0000000000004000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(aes64es, x31, x1, x17, 0x6363636363636363, 0x4000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x6,signature_32_0)


aes64es_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x6363636363636363), rs1:x31(0x0000000000008000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(aes64es, x1, x31, x16, 0x6363636363636363, 0x8000, 0x0, x6, 0, x7)

aes64es_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x6363636363636363), rs1:x30(0x0000000000010000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(aes64es, x2, x30, x15, 0x6363636363636363, 0x10000, 0x0, x6, 8, x7)

aes64es_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x6363636363636363), rs1:x29(0x0000000000020000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(aes64es, x3, x29, x14, 0x6363636363636363, 0x20000, 0x0, x6, 16, x7)

aes64es_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x6363636363636363), rs1:x28(0x0000000000040000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(aes64es, x4, x28, x13, 0x6363636363636363, 0x40000, 0x0, x6, 24, x7)

aes64es_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x6363636363636363), rs1:x27(0x0000000000080000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(aes64es, x5, x27, x12, 0x6363636363636363, 0x80000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_33_0)


aes64es_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x6363636363636363), rs1:x26(0x0000000000100000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(aes64es, x6, x26, x11, 0x6363636363636363, 0x100000, 0x0, x1, 0, x2)

aes64es_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x6363636363636363), rs1:x25(0x0000000000200000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(aes64es, x7, x25, x10, 0x6363636363636363, 0x200000, 0x0, x1, 8, x2)

aes64es_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x6363636363636363), rs1:x24(0x0000000000400000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64es, x8, x24, x9, 0x6363636363636363, 0x400000, 0x0, x1, 16, x2)

aes64es_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x6363636363636363), rs1:x23(0x0000000000800000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(aes64es, x9, x23, x8, 0x6363636363636363, 0x800000, 0x0, x1, 24, x2)

aes64es_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x7c63636363636363), rs1:x22(0x0000000001000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(aes64es, x10, x22, x7, 0x7c63636363636363, 0x1000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_34_0)


aes64es_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x7763636363636363), rs1:x21(0x0000000002000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(aes64es, x11, x21, x6, 0x7763636363636363, 0x2000000, 0x0, x1, 0, x7)

aes64es_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0xf263636363636363), rs1:x20(0x0000000004000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(aes64es, x12, x20, x5, 0xf263636363636363, 0x4000000, 0x0, x1, 8, x7)

aes64es_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x3063636363636363), rs1:x19(0x0000000008000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(aes64es, x13, x19, x4, 0x3063636363636363, 0x8000000, 0x0, x1, 16, x7)

aes64es_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0xca63636363636363), rs1:x18(0x0000000010000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64es, x14, x18, x3, 0xca63636363636363, 0x10000000, 0x0, x1, 24, x7)

aes64es_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0xb763636363636363), rs1:x17(0x0000000020000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(aes64es, x15, x17, x2, 0xb763636363636363, 0x20000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x2,signature_35_0)


aes64es_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0963636363636363), rs1:x16(0x0000000040000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(aes64es, x16, x16, x1, 0x0963636363636363, 0x40000000, 0x0, x2, 0, x3)

aes64es_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0xcd63636363636363), rs1:x15(0x0000000080000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64es, x17, x15, x31, 0xcd63636363636363, 0x80000000, 0x0, x2, 8, x3)

aes64es_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x6363637c63636363), rs1:x14(0x0000000100000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64es, x18, x14, x30, 0x6363637c63636363, 0x100000000, 0x0, x2, 16, x3)

aes64es_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x6363637763636363), rs1:x13(0x0000000200000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64es, x19, x13, x29, 0x6363637763636363, 0x200000000, 0x0, x2, 24, x3)

aes64es_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x636363f263636363), rs1:x12(0x0000000400000000), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64es, x20, x12, x28, 0x636363f263636363, 0x400000000, 0x0, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_36_0)


aes64es_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x6363633063636363), rs1:x11(0x0000000800000000), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64es, x21, x11, x27, 0x6363633063636363, 0x800000000, 0x0, x1, 0, x2)

aes64es_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x636363ca63636363), rs1:x10(0x0000001000000000), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64es, x22, x10, x26, 0x636363ca63636363, 0x1000000000, 0x0, x1, 8, x2)

aes64es_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x636363b763636363), rs1:x9(0x0000002000000000), rs2:x25(0x0000000000000000)
    TEST_RR_OP(aes64es, x23, x9, x25, 0x636363b763636363, 0x2000000000, 0x0, x1, 16, x2)

aes64es_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x6363630963636363), rs1:x8(0x0000004000000000), rs2:x24(0x0000000000000000)
    TEST_RR_OP(aes64es, x24, x8, x24, 0x6363630963636363, 0x4000000000, 0x0, x1, 24, x2)

aes64es_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x636363cd63636363), rs1:x7(0x0000008000000000), rs2:x23(0x0000000000000000)
    TEST_RR_OP(aes64es, x25, x7, x23, 0x636363cd63636363, 0x8000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_37_0)


aes64es_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x6363636363637c63), rs1:x6(0x0000010000000000), rs2:x22(0x0000000000000000)
    TEST_RR_OP(aes64es, x26, x6, x22, 0x6363636363637c63, 0x10000000000, 0x0, x1, 0, x7)

aes64es_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x6363636363637763), rs1:x5(0x0000020000000000), rs2:x21(0x0000000000000000)
    TEST_RR_OP(aes64es, x27, x5, x21, 0x6363636363637763, 0x20000000000, 0x0, x1, 8, x7)

aes64es_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x636363636363f263), rs1:x4(0x0000040000000000), rs2:x20(0x0000000000000000)
    TEST_RR_OP(aes64es, x28, x4, x20, 0x636363636363f263, 0x40000000000, 0x0, x1, 16, x7)

aes64es_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x6363636363633063), rs1:x3(0x0000080000000000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(aes64es, x29, x3, x19, 0x6363636363633063, 0x80000000000, 0x0, x1, 24, x7)

aes64es_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x636363636363ca63), rs1:x2(0x0000100000000000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(aes64es, x30, x2, x18, 0x636363636363ca63, 0x100000000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x5,signature_38_0)


aes64es_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x636363636363b763), rs1:x1(0x0000200000000000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(aes64es, x31, x1, x17, 0x636363636363b763, 0x200000000000, 0x0, x5, 0, x6)

aes64es_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x6363636363630963), rs1:x31(0x0000400000000000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(aes64es, x1, x31, x16, 0x6363636363630963, 0x400000000000, 0x0, x5, 8, x6)

aes64es_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x636363636363cd63), rs1:x30(0x0000800000000000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(aes64es, x2, x30, x15, 0x636363636363cd63, 0x800000000000, 0x0, x5, 16, x6)

aes64es_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x6363636363636363), rs1:x29(0x0001000000000000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(aes64es, x3, x29, x14, 0x6363636363636363, 0x1000000000000, 0x0, x5, 24, x6)

aes64es_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x6363636363636363), rs1:x28(0x0002000000000000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(aes64es, x4, x28, x13, 0x6363636363636363, 0x2000000000000, 0x0, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_39_0)


aes64es_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x6363636363636363), rs1:x27(0x0004000000000000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(aes64es, x5, x27, x12, 0x6363636363636363, 0x4000000000000, 0x0, x1, 0, x2)

aes64es_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x6363636363636363), rs1:x26(0x0008000000000000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(aes64es, x6, x26, x11, 0x6363636363636363, 0x8000000000000, 0x0, x1, 8, x2)

aes64es_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x6363636363636363), rs1:x25(0x0010000000000000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(aes64es, x7, x25, x10, 0x6363636363636363, 0x10000000000000, 0x0, x1, 16, x2)

aes64es_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x6363636363636363), rs1:x24(0x0020000000000000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64es, x8, x24, x9, 0x6363636363636363, 0x20000000000000, 0x0, x1, 24, x2)

aes64es_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x6363636363636363), rs1:x23(0x0040000000000000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(aes64es, x9, x23, x8, 0x6363636363636363, 0x40000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_40_0)


aes64es_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x6363636363636363), rs1:x22(0x0080000000000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(aes64es, x10, x22, x7, 0x6363636363636363, 0x80000000000000, 0x0, x1, 0, x2)

aes64es_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x6363636363636363), rs1:x21(0x0100000000000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(aes64es, x11, x21, x6, 0x6363636363636363, 0x100000000000000, 0x0, x1, 8, x2)

aes64es_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x6363636363636363), rs1:x20(0x0200000000000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(aes64es, x12, x20, x5, 0x6363636363636363, 0x200000000000000, 0x0, x1, 16, x2)

aes64es_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x6363636363636363), rs1:x19(0x0400000000000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(aes64es, x13, x19, x4, 0x6363636363636363, 0x400000000000000, 0x0, x1, 24, x2)

aes64es_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x6363636363636363), rs1:x18(0x0800000000000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64es, x14, x18, x3, 0x6363636363636363, 0x800000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x3,signature_41_0)


aes64es_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x6363636363636363), rs1:x17(0x1000000000000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(aes64es, x15, x17, x2, 0x6363636363636363, 0x1000000000000000, 0x0, x3, 0, x4)

aes64es_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x6363636363636363), rs1:x16(0x2000000000000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(aes64es, x16, x16, x1, 0x6363636363636363, 0x2000000000000000, 0x0, x3, 8, x4)

aes64es_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x6363636363636363), rs1:x15(0x4000000000000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64es, x17, x15, x31, 0x6363636363636363, 0x4000000000000000, 0x0, x3, 16, x4)

aes64es_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x6363636363636363), rs1:x14(0x8000000000000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64es, x18, x14, x30, 0x6363636363636363, 0x8000000000000000, 0x0, x3, 24, x4)

aes64es_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x6363636363636363), rs1:x13(0x0000000000000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64es, x19, x13, x29, 0x6363636363636363, 0x0, 0x0, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_42_0)


aes64es_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0x16636316636316bb), rs1:x12(0xfffffffffffffffe), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64es, x20, x12, x28, 0x16636316636316bb, 0xfffffffffffffffe, 0x0, x1, 0, x2)

aes64es_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0x1663631663631654), rs1:x11(0xfffffffffffffffd), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64es, x21, x11, x27, 0x1663631663631654, 0xfffffffffffffffd, 0x0, x1, 8, x2)

aes64es_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0x166363166363160f), rs1:x10(0xfffffffffffffffb), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64es, x22, x10, x26, 0x166363166363160f, 0xfffffffffffffffb, 0x0, x1, 16, x2)

aes64es_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0x1663631663631668), rs1:x9(0xfffffffffffffff7), rs2:x25(0x0000000000000000)
    TEST_RR_OP(aes64es, x23, x9, x25, 0x1663631663631668, 0xfffffffffffffff7, 0x0, x1, 24, x2)

aes64es_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0x16636316636316df), rs1:x8(0xffffffffffffffef), rs2:x24(0x0000000000000000)
    TEST_RR_OP(aes64es, x24, x8, x24, 0x16636316636316df, 0xffffffffffffffef, 0x0, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_43_0)


aes64es_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0x166363166363169e), rs1:x7(0xffffffffffffffdf), rs2:x23(0x0000000000000000)
    TEST_RR_OP(aes64es, x25, x7, x23, 0x166363166363169e, 0xffffffffffffffdf, 0x0, x1, 0, x2)

aes64es_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0x1663631663631608), rs1:x6(0xffffffffffffffbf), rs2:x22(0x0000000000000000)
    TEST_RR_OP(aes64es, x26, x6, x22, 0x1663631663631608, 0xffffffffffffffbf, 0x0, x1, 8, x2)

aes64es_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0x16636316636316d2), rs1:x5(0xffffffffffffff7f), rs2:x21(0x0000000000000000)
    TEST_RR_OP(aes64es, x27, x5, x21, 0x16636316636316d2, 0xffffffffffffff7f, 0x0, x1, 16, x2)

aes64es_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0x1663631663631616), rs1:x4(0xfffffffffffffeff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(aes64es, x28, x4, x20, 0x1663631663631616, 0xfffffffffffffeff, 0x0, x1, 24, x2)

aes64es_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0x1663631663631616), rs1:x3(0xfffffffffffffdff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(aes64es, x29, x3, x19, 0x1663631663631616, 0xfffffffffffffdff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x4,signature_44_0)


aes64es_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0x1663631663631616), rs1:x2(0xfffffffffffffbff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(aes64es, x30, x2, x18, 0x1663631663631616, 0xfffffffffffffbff, 0x0, x4, 0, x5)

aes64es_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0x1663631663631616), rs1:x1(0xfffffffffffff7ff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(aes64es, x31, x1, x17, 0x1663631663631616, 0xfffffffffffff7ff, 0x0, x4, 8, x5)

aes64es_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0x1663631663631616), rs1:x31(0xffffffffffffefff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(aes64es, x1, x31, x16, 0x1663631663631616, 0xffffffffffffefff, 0x0, x4, 16, x5)

aes64es_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0x1663631663631616), rs1:x30(0xffffffffffffdfff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(aes64es, x2, x30, x15, 0x1663631663631616, 0xffffffffffffdfff, 0x0, x4, 24, x5)

aes64es_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0x1663631663631616), rs1:x29(0xffffffffffffbfff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(aes64es, x3, x29, x14, 0x1663631663631616, 0xffffffffffffbfff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_45_0)


aes64es_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0x1663631663631616), rs1:x28(0xffffffffffff7fff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(aes64es, x4, x28, x13, 0x1663631663631616, 0xffffffffffff7fff, 0x0, x1, 0, x2)

aes64es_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0x1663631663631616), rs1:x27(0xfffffffffffeffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(aes64es, x5, x27, x12, 0x1663631663631616, 0xfffffffffffeffff, 0x0, x1, 8, x2)

aes64es_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0x1663631663631616), rs1:x26(0xfffffffffffdffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(aes64es, x6, x26, x11, 0x1663631663631616, 0xfffffffffffdffff, 0x0, x1, 16, x2)

aes64es_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0x1663631663631616), rs1:x25(0xfffffffffffbffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(aes64es, x7, x25, x10, 0x1663631663631616, 0xfffffffffffbffff, 0x0, x1, 24, x2)

aes64es_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0x1663631663631616), rs1:x24(0xfffffffffff7ffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64es, x8, x24, x9, 0x1663631663631616, 0xfffffffffff7ffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_46_0)


aes64es_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0x1663631663631616), rs1:x23(0xffffffffffefffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(aes64es, x9, x23, x8, 0x1663631663631616, 0xffffffffffefffff, 0x0, x1, 0, x2)

aes64es_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0x1663631663631616), rs1:x22(0xffffffffffdfffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(aes64es, x10, x22, x7, 0x1663631663631616, 0xffffffffffdfffff, 0x0, x1, 8, x2)

aes64es_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0x1663631663631616), rs1:x21(0xffffffffffbfffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(aes64es, x11, x21, x6, 0x1663631663631616, 0xffffffffffbfffff, 0x0, x1, 16, x2)

aes64es_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0x1663631663631616), rs1:x20(0xffffffffff7fffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(aes64es, x12, x20, x5, 0x1663631663631616, 0xffffffffff7fffff, 0x0, x1, 24, x2)

aes64es_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0xbb63631663631616), rs1:x19(0xfffffffffeffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(aes64es, x13, x19, x4, 0xbb63631663631616, 0xfffffffffeffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x4,signature_47_0)


aes64es_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0x5463631663631616), rs1:x18(0xfffffffffdffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64es, x14, x18, x3, 0x5463631663631616, 0xfffffffffdffffff, 0x0, x4, 0, x5)

aes64es_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0x0f63631663631616), rs1:x17(0xfffffffffbffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(aes64es, x15, x17, x2, 0x0f63631663631616, 0xfffffffffbffffff, 0x0, x4, 8, x5)

aes64es_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0x6863631663631616), rs1:x16(0xfffffffff7ffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(aes64es, x16, x16, x1, 0x6863631663631616, 0xfffffffff7ffffff, 0x0, x4, 16, x5)

aes64es_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0xdf63631663631616), rs1:x15(0xffffffffefffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64es, x17, x15, x31, 0xdf63631663631616, 0xffffffffefffffff, 0x0, x4, 24, x5)

aes64es_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0x9e63631663631616), rs1:x14(0xffffffffdfffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64es, x18, x14, x30, 0x9e63631663631616, 0xffffffffdfffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_48_0)


aes64es_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0x0863631663631616), rs1:x13(0xffffffffbfffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64es, x19, x13, x29, 0x0863631663631616, 0xffffffffbfffffff, 0x0, x1, 0, x2)

aes64es_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0xd263631663631616), rs1:x12(0xffffffff7fffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64es, x20, x12, x28, 0xd263631663631616, 0xffffffff7fffffff, 0x0, x1, 8, x2)

aes64es_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0x166363bb63631616), rs1:x11(0xfffffffeffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64es, x21, x11, x27, 0x166363bb63631616, 0xfffffffeffffffff, 0x0, x1, 16, x2)

aes64es_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0x1663635463631616), rs1:x10(0xfffffffdffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64es, x22, x10, x26, 0x1663635463631616, 0xfffffffdffffffff, 0x0, x1, 24, x2)

aes64es_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0x1663630f63631616), rs1:x9(0xfffffffbffffffff), rs2:x25(0x0000000000000000)
    TEST_RR_OP(aes64es, x23, x9, x25, 0x1663630f63631616, 0xfffffffbffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_49_0)


aes64es_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0x1663636863631616), rs1:x8(0xfffffff7ffffffff), rs2:x24(0x0000000000000000)
    TEST_RR_OP(aes64es, x24, x8, x24, 0x1663636863631616, 0xfffffff7ffffffff, 0x0, x1, 0, x2)

aes64es_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0x166363df63631616), rs1:x7(0xffffffefffffffff), rs2:x23(0x0000000000000000)
    TEST_RR_OP(aes64es, x25, x7, x23, 0x166363df63631616, 0xffffffefffffffff, 0x0, x1, 8, x2)

aes64es_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0x1663639e63631616), rs1:x6(0xffffffdfffffffff), rs2:x22(0x0000000000000000)
    TEST_RR_OP(aes64es, x26, x6, x22, 0x1663639e63631616, 0xffffffdfffffffff, 0x0, x1, 16, x2)

aes64es_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0x1663630863631616), rs1:x5(0xffffffbfffffffff), rs2:x21(0x0000000000000000)
    TEST_RR_OP(aes64es, x27, x5, x21, 0x1663630863631616, 0xffffffbfffffffff, 0x0, x1, 24, x2)

aes64es_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0x166363d263631616), rs1:x4(0xffffff7fffffffff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(aes64es, x28, x4, x20, 0x166363d263631616, 0xffffff7fffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x4,signature_50_0)


aes64es_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0x166363166363bb16), rs1:x3(0xfffffeffffffffff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(aes64es, x29, x3, x19, 0x166363166363bb16, 0xfffffeffffffffff, 0x0, x4, 0, x5)

aes64es_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0x1663631663635416), rs1:x2(0xfffffdffffffffff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(aes64es, x30, x2, x18, 0x1663631663635416, 0xfffffdffffffffff, 0x0, x4, 8, x5)

aes64es_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0x1663631663630f16), rs1:x1(0xfffffbffffffffff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(aes64es, x31, x1, x17, 0x1663631663630f16, 0xfffffbffffffffff, 0x0, x4, 16, x5)

aes64es_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0x1663631663636816), rs1:x31(0xfffff7ffffffffff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(aes64es, x1, x31, x16, 0x1663631663636816, 0xfffff7ffffffffff, 0x0, x4, 24, x5)

aes64es_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0x166363166363df16), rs1:x30(0xffffefffffffffff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(aes64es, x2, x30, x15, 0x166363166363df16, 0xffffefffffffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_51_0)


aes64es_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0x1663631663639e16), rs1:x29(0xffffdfffffffffff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(aes64es, x3, x29, x14, 0x1663631663639e16, 0xffffdfffffffffff, 0x0, x1, 0, x2)

aes64es_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0x1663631663630816), rs1:x28(0xffffbfffffffffff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(aes64es, x4, x28, x13, 0x1663631663630816, 0xffffbfffffffffff, 0x0, x1, 8, x2)

aes64es_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0x166363166363d216), rs1:x27(0xffff7fffffffffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(aes64es, x5, x27, x12, 0x166363166363d216, 0xffff7fffffffffff, 0x0, x1, 16, x2)

aes64es_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0x1663631663631616), rs1:x26(0xfffeffffffffffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(aes64es, x6, x26, x11, 0x1663631663631616, 0xfffeffffffffffff, 0x0, x1, 24, x2)

aes64es_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0x1663631663631616), rs1:x25(0xfffdffffffffffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(aes64es, x7, x25, x10, 0x1663631663631616, 0xfffdffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_52_0)


aes64es_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0x1663631663631616), rs1:x24(0xfffbffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64es, x8, x24, x9, 0x1663631663631616, 0xfffbffffffffffff, 0x0, x1, 0, x2)

aes64es_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0x1663631663631616), rs1:x23(0xfff7ffffffffffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(aes64es, x9, x23, x8, 0x1663631663631616, 0xfff7ffffffffffff, 0x0, x1, 8, x2)

aes64es_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0x1663631663631616), rs1:x22(0xffefffffffffffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(aes64es, x10, x22, x7, 0x1663631663631616, 0xffefffffffffffff, 0x0, x1, 16, x2)

aes64es_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0x1663631663631616), rs1:x21(0xffdfffffffffffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(aes64es, x11, x21, x6, 0x1663631663631616, 0xffdfffffffffffff, 0x0, x1, 24, x2)

aes64es_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0x1663631663631616), rs1:x20(0xffbfffffffffffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(aes64es, x12, x20, x5, 0x1663631663631616, 0xffbfffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x5,signature_53_0)


aes64es_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0x1663631663631616), rs1:x19(0xff7fffffffffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(aes64es, x13, x19, x4, 0x1663631663631616, 0xff7fffffffffffff, 0x0, x5, 0, x6)

aes64es_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0x1663631663631616), rs1:x18(0xfeffffffffffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64es, x14, x18, x3, 0x1663631663631616, 0xfeffffffffffffff, 0x0, x5, 8, x6)

aes64es_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0x1663631663631616), rs1:x17(0xfdffffffffffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(aes64es, x15, x17, x2, 0x1663631663631616, 0xfdffffffffffffff, 0x0, x5, 16, x6)

aes64es_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0x1663631663631616), rs1:x16(0xfbffffffffffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(aes64es, x16, x16, x1, 0x1663631663631616, 0xfbffffffffffffff, 0x0, x5, 24, x6)

aes64es_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0x1663631663631616), rs1:x15(0xf7ffffffffffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64es, x17, x15, x31, 0x1663631663631616, 0xf7ffffffffffffff, 0x0, x5, 32, x6)

    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_54_0)


aes64es_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0x1663631663631616), rs1:x14(0xefffffffffffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64es, x18, x14, x30, 0x1663631663631616, 0xefffffffffffffff, 0x0, x1, 0, x2)

aes64es_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0x1663631663631616), rs1:x13(0xdfffffffffffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64es, x19, x13, x29, 0x1663631663631616, 0xdfffffffffffffff, 0x0, x1, 8, x2)

aes64es_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0x1663631663631616), rs1:x12(0xbfffffffffffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64es, x20, x12, x28, 0x1663631663631616, 0xbfffffffffffffff, 0x0, x1, 16, x2)

aes64es_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0x1663631663631616), rs1:x11(0x7fffffffffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64es, x21, x11, x27, 0x1663631663631616, 0x7fffffffffffffff, 0x0, x1, 24, x2)

aes64es_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0x1663631663631616), rs1:x10(0xffffffffffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64es, x22, x10, x26, 0x1663631663631616, 0xffffffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64es)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64es)

	RVTEST_SIGBASE(x1,signature_55_0)


aes64es_01_inst_270:
    // Test 270:  Test with rs1 == rs2
    // result rd:x23(0xc9d24b1b9eaf0726), rs1:x25(0x10fd3dedadea5195), rs2:x25(0xdf7f3844121bcc23)
    TEST_RR_OP(aes64es, x23, x25, x25, 0xc9d24b1b9eaf0726, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x1, 0, x2)

aes64es_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1), rs2:x24(0xf5adb41aa47d105b)
    TEST_RR_OP(aes64es, x0, x8, x24, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x1, 8, x2)

aes64es_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0xc263636b6363dbea), rs1:x7(0xc9649f05a8e1a8bb), rs2:x0(0x82f6747f707af2c0)
    TEST_RR_OP(aes64es, x25, x7, x0, 0xc263636b6363dbea, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x1, 16, x2)

aes64es_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x63d30f638f146363), rs1:x0(0x3541291848c99fcb), rs2:x22(0x73a92fd4e19bfbc3)
    TEST_RR_OP(aes64es, x26, x0, x22, 0x63d30f638f146363, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x1, 24, x2)
	
#endif


RVTEST_CODE_END aes64es_01_code_end
RVTEST_CODE_BEGIN clmulh_01_init clmulh_01_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x6,signature_1_0)


clmulh_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x0dbcc1bf2c8ef9fe), rs1:x31(0x10fd3dedadea5195), rs2:x16(0xdf7f3844121bcc23)
    TEST_RR_OP(clmulh, x1, x31, x16, 0x0dbcc1bf2c8ef9fe, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x6, 0, x7)

clmulh_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x6fae1a6f5949a08c), rs1:x30(0xbd295ce2d2ffbec1), rs2:x15(0xf5adb41aa47d105b)
    TEST_RR_OP(clmulh, x2, x30, x15, 0x6fae1a6f5949a08c, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x6, 8, x7)

clmulh_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0x656144b050e5dd35), rs1:x29(0xc9649f05a8e1a8bb), rs2:x14(0x82f6747f707af2c0)
    TEST_RR_OP(clmulh, x3, x29, x14, 0x656144b050e5dd35, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x6, 16, x7)

clmulh_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x08ee2eeaf280313a), rs1:x28(0x3541291848c99fcb), rs2:x13(0x73a92fd4e19bfbc3)
    TEST_RR_OP(clmulh, x4, x28, x13, 0x08ee2eeaf280313a, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x6, 24, x7)

clmulh_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x0566b47765bb7522), rs1:x27(0x10a24740461d524f), rs2:x12(0x546b0e54528a10af)
    TEST_RR_OP(clmulh, x5, x27, x12, 0x0566b47765bb7522, 0x10a24740461d524f, 0x546b0e54528a10af, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_2_0)


clmulh_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x0566b47765bb7522), rs1:x26(0x546b0e54528a10af), rs2:x11(0x10a24740461d524f)
    TEST_RR_OP(clmulh, x6, x26, x11, 0x0566b47765bb7522, 0x546b0e54528a10af, 0x10a24740461d524f, x1, 0, x2)

clmulh_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x08ee2eeaf280313a), rs1:x25(0x73a92fd4e19bfbc3), rs2:x10(0x3541291848c99fcb)
    TEST_RR_OP(clmulh, x7, x25, x10, 0x08ee2eeaf280313a, 0x73a92fd4e19bfbc3, 0x3541291848c99fcb, x1, 8, x2)

clmulh_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x656144b050e5dd35), rs1:x24(0x82f6747f707af2c0), rs2:x9(0xc9649f05a8e1a8bb)
    TEST_RR_OP(clmulh, x8, x24, x9, 0x656144b050e5dd35, 0x82f6747f707af2c0, 0xc9649f05a8e1a8bb, x1, 16, x2)

clmulh_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0x6fae1a6f5949a08c), rs1:x23(0xf5adb41aa47d105b), rs2:x8(0xbd295ce2d2ffbec1)
    TEST_RR_OP(clmulh, x9, x23, x8, 0x6fae1a6f5949a08c, 0xf5adb41aa47d105b, 0xbd295ce2d2ffbec1, x1, 24, x2)

clmulh_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0x0dbcc1bf2c8ef9fe), rs1:x22(0xdf7f3844121bcc23), rs2:x7(0x10fd3dedadea5195)
    TEST_RR_OP(clmulh, x10, x22, x7, 0x0dbcc1bf2c8ef9fe, 0xdf7f3844121bcc23, 0x10fd3dedadea5195, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_3_0)


clmulh_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0000000000000001), rs2:x6(0xffffffffffffffff)
    TEST_RR_OP(clmulh, x11, x21, x6, 0x0000000000000000, 0x1, 0xffffffffffffffff, x1, 0, x7)

clmulh_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000000000002), rs2:x5(0x7fffffffffffffff)
    TEST_RR_OP(clmulh, x12, x20, x5, 0x0000000000000000, 0x2, 0x7fffffffffffffff, x1, 8, x7)

clmulh_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000002), rs1:x19(0x0000000000000004), rs2:x4(0xbfffffffffffffff)
    TEST_RR_OP(clmulh, x13, x19, x4, 0x0000000000000002, 0x4, 0xbfffffffffffffff, x1, 16, x7)

clmulh_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000006), rs1:x18(0x0000000000000008), rs2:x3(0xdfffffffffffffff)
    TEST_RR_OP(clmulh, x14, x18, x3, 0x0000000000000006, 0x8, 0xdfffffffffffffff, x1, 24, x7)

clmulh_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x000000000000000e), rs1:x17(0x0000000000000010), rs2:x2(0xefffffffffffffff)
    TEST_RR_OP(clmulh, x15, x17, x2, 0x000000000000000e, 0x10, 0xefffffffffffffff, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x2,signature_4_0)


clmulh_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x000000000000001e), rs1:x16(0x0000000000000020), rs2:x1(0xf7ffffffffffffff)
    TEST_RR_OP(clmulh, x16, x16, x1, 0x000000000000001e, 0x20, 0xf7ffffffffffffff, x2, 0, x3)

clmulh_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x000000000000003e), rs1:x15(0x0000000000000040), rs2:x31(0xfbffffffffffffff)
    TEST_RR_OP(clmulh, x17, x15, x31, 0x000000000000003e, 0x40, 0xfbffffffffffffff, x2, 8, x3)

clmulh_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x000000000000007e), rs1:x14(0x0000000000000080), rs2:x30(0xfdffffffffffffff)
    TEST_RR_OP(clmulh, x18, x14, x30, 0x000000000000007e, 0x80, 0xfdffffffffffffff, x2, 16, x3)

clmulh_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x00000000000000fe), rs1:x13(0x0000000000000100), rs2:x29(0xfeffffffffffffff)
    TEST_RR_OP(clmulh, x19, x13, x29, 0x00000000000000fe, 0x100, 0xfeffffffffffffff, x2, 24, x3)

clmulh_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x00000000000001fe), rs1:x12(0x0000000000000200), rs2:x28(0xff7fffffffffffff)
    TEST_RR_OP(clmulh, x20, x12, x28, 0x00000000000001fe, 0x200, 0xff7fffffffffffff, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_5_0)


clmulh_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x00000000000003fe), rs1:x11(0x0000000000000400), rs2:x27(0xffbfffffffffffff)
    TEST_RR_OP(clmulh, x21, x11, x27, 0x00000000000003fe, 0x400, 0xffbfffffffffffff, x1, 0, x2)

clmulh_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x00000000000007fe), rs1:x10(0x0000000000000800), rs2:x26(0xffdfffffffffffff)
    TEST_RR_OP(clmulh, x22, x10, x26, 0x00000000000007fe, 0x800, 0xffdfffffffffffff, x1, 8, x2)

clmulh_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000ffe), rs1:x9(0x0000000000001000), rs2:x25(0xffefffffffffffff)
    TEST_RR_OP(clmulh, x23, x9, x25, 0x0000000000000ffe, 0x1000, 0xffefffffffffffff, x1, 16, x2)

clmulh_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0000000000001ffe), rs1:x8(0x0000000000002000), rs2:x24(0xfff7ffffffffffff)
    TEST_RR_OP(clmulh, x24, x8, x24, 0x0000000000001ffe, 0x2000, 0xfff7ffffffffffff, x1, 24, x2)

clmulh_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x0000000000003ffe), rs1:x7(0x0000000000004000), rs2:x23(0xfffbffffffffffff)
    TEST_RR_OP(clmulh, x25, x7, x23, 0x0000000000003ffe, 0x4000, 0xfffbffffffffffff, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_6_0)


clmulh_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x0000000000007ffe), rs1:x6(0x0000000000008000), rs2:x22(0xfffdffffffffffff)
    TEST_RR_OP(clmulh, x26, x6, x22, 0x0000000000007ffe, 0x8000, 0xfffdffffffffffff, x1, 0, x7)

clmulh_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x000000000000fffe), rs1:x5(0x0000000000010000), rs2:x21(0xfffeffffffffffff)
    TEST_RR_OP(clmulh, x27, x5, x21, 0x000000000000fffe, 0x10000, 0xfffeffffffffffff, x1, 8, x7)

clmulh_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x000000000001fffe), rs1:x4(0x0000000000020000), rs2:x20(0xffff7fffffffffff)
    TEST_RR_OP(clmulh, x28, x4, x20, 0x000000000001fffe, 0x20000, 0xffff7fffffffffff, x1, 16, x7)

clmulh_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x000000000003fffe), rs1:x3(0x0000000000040000), rs2:x19(0xffffbfffffffffff)
    TEST_RR_OP(clmulh, x29, x3, x19, 0x000000000003fffe, 0x40000, 0xffffbfffffffffff, x1, 24, x7)

clmulh_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x000000000007fffe), rs1:x2(0x0000000000080000), rs2:x18(0xffffdfffffffffff)
    TEST_RR_OP(clmulh, x30, x2, x18, 0x000000000007fffe, 0x80000, 0xffffdfffffffffff, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x5,signature_7_0)


clmulh_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x00000000000ffffe), rs1:x1(0x0000000000100000), rs2:x17(0xffffefffffffffff)
    TEST_RR_OP(clmulh, x31, x1, x17, 0x00000000000ffffe, 0x100000, 0xffffefffffffffff, x5, 0, x6)

clmulh_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x00000000001ffffe), rs1:x31(0x0000000000200000), rs2:x16(0xfffff7ffffffffff)
    TEST_RR_OP(clmulh, x1, x31, x16, 0x00000000001ffffe, 0x200000, 0xfffff7ffffffffff, x5, 8, x6)

clmulh_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x00000000003ffffe), rs1:x30(0x0000000000400000), rs2:x15(0xfffffbffffffffff)
    TEST_RR_OP(clmulh, x2, x30, x15, 0x00000000003ffffe, 0x400000, 0xfffffbffffffffff, x5, 16, x6)

clmulh_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x00000000007ffffe), rs1:x29(0x0000000000800000), rs2:x14(0xfffffdffffffffff)
    TEST_RR_OP(clmulh, x3, x29, x14, 0x00000000007ffffe, 0x800000, 0xfffffdffffffffff, x5, 24, x6)

clmulh_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x0000000000fffffe), rs1:x28(0x0000000001000000), rs2:x13(0xfffffeffffffffff)
    TEST_RR_OP(clmulh, x4, x28, x13, 0x0000000000fffffe, 0x1000000, 0xfffffeffffffffff, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_8_0)


clmulh_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x0000000001fffffe), rs1:x27(0x0000000002000000), rs2:x12(0xffffff7fffffffff)
    TEST_RR_OP(clmulh, x5, x27, x12, 0x0000000001fffffe, 0x2000000, 0xffffff7fffffffff, x1, 0, x2)

clmulh_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x0000000003fffffe), rs1:x26(0x0000000004000000), rs2:x11(0xffffffbfffffffff)
    TEST_RR_OP(clmulh, x6, x26, x11, 0x0000000003fffffe, 0x4000000, 0xffffffbfffffffff, x1, 8, x2)

clmulh_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0000000007fffffe), rs1:x25(0x0000000008000000), rs2:x10(0xffffffdfffffffff)
    TEST_RR_OP(clmulh, x7, x25, x10, 0x0000000007fffffe, 0x8000000, 0xffffffdfffffffff, x1, 16, x2)

clmulh_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x000000000ffffffe), rs1:x24(0x0000000010000000), rs2:x9(0xffffffefffffffff)
    TEST_RR_OP(clmulh, x8, x24, x9, 0x000000000ffffffe, 0x10000000, 0xffffffefffffffff, x1, 24, x2)

clmulh_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x000000001ffffffe), rs1:x23(0x0000000020000000), rs2:x8(0xfffffff7ffffffff)
    TEST_RR_OP(clmulh, x9, x23, x8, 0x000000001ffffffe, 0x20000000, 0xfffffff7ffffffff, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_9_0)


clmulh_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x000000003ffffffe), rs1:x22(0x0000000040000000), rs2:x7(0xfffffffbffffffff)
    TEST_RR_OP(clmulh, x10, x22, x7, 0x000000003ffffffe, 0x40000000, 0xfffffffbffffffff, x1, 0, x2)

clmulh_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x000000007ffffffe), rs1:x21(0x0000000080000000), rs2:x6(0xfffffffdffffffff)
    TEST_RR_OP(clmulh, x11, x21, x6, 0x000000007ffffffe, 0x80000000, 0xfffffffdffffffff, x1, 8, x2)

clmulh_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x00000000fffffffe), rs1:x20(0x0000000100000000), rs2:x5(0xfffffffeffffffff)
    TEST_RR_OP(clmulh, x12, x20, x5, 0x00000000fffffffe, 0x100000000, 0xfffffffeffffffff, x1, 16, x2)

clmulh_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x00000001fffffffe), rs1:x19(0x0000000200000000), rs2:x4(0xffffffff7fffffff)
    TEST_RR_OP(clmulh, x13, x19, x4, 0x00000001fffffffe, 0x200000000, 0xffffffff7fffffff, x1, 24, x2)

clmulh_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x00000003fffffffe), rs1:x18(0x0000000400000000), rs2:x3(0xffffffffbfffffff)
    TEST_RR_OP(clmulh, x14, x18, x3, 0x00000003fffffffe, 0x400000000, 0xffffffffbfffffff, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x3,signature_10_0)


clmulh_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x00000007fffffffe), rs1:x17(0x0000000800000000), rs2:x2(0xffffffffdfffffff)
    TEST_RR_OP(clmulh, x15, x17, x2, 0x00000007fffffffe, 0x800000000, 0xffffffffdfffffff, x3, 0, x4)

clmulh_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0000000ffffffffe), rs1:x16(0x0000001000000000), rs2:x1(0xffffffffefffffff)
    TEST_RR_OP(clmulh, x16, x16, x1, 0x0000000ffffffffe, 0x1000000000, 0xffffffffefffffff, x3, 8, x4)

clmulh_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0000001ffffffffe), rs1:x15(0x0000002000000000), rs2:x31(0xfffffffff7ffffff)
    TEST_RR_OP(clmulh, x17, x15, x31, 0x0000001ffffffffe, 0x2000000000, 0xfffffffff7ffffff, x3, 16, x4)

clmulh_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x0000003ffffffffe), rs1:x14(0x0000004000000000), rs2:x30(0xfffffffffbffffff)
    TEST_RR_OP(clmulh, x18, x14, x30, 0x0000003ffffffffe, 0x4000000000, 0xfffffffffbffffff, x3, 24, x4)

clmulh_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000007ffffffffe), rs1:x13(0x0000008000000000), rs2:x29(0xfffffffffdffffff)
    TEST_RR_OP(clmulh, x19, x13, x29, 0x0000007ffffffffe, 0x8000000000, 0xfffffffffdffffff, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_11_0)


clmulh_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x000000fffffffffe), rs1:x12(0x0000010000000000), rs2:x28(0xfffffffffeffffff)
    TEST_RR_OP(clmulh, x20, x12, x28, 0x000000fffffffffe, 0x10000000000, 0xfffffffffeffffff, x1, 0, x2)

clmulh_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x000001fffffffffe), rs1:x11(0x0000020000000000), rs2:x27(0xffffffffff7fffff)
    TEST_RR_OP(clmulh, x21, x11, x27, 0x000001fffffffffe, 0x20000000000, 0xffffffffff7fffff, x1, 8, x2)

clmulh_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x000003fffffffffe), rs1:x10(0x0000040000000000), rs2:x26(0xffffffffffbfffff)
    TEST_RR_OP(clmulh, x22, x10, x26, 0x000003fffffffffe, 0x40000000000, 0xffffffffffbfffff, x1, 16, x2)

clmulh_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x000007fffffffffe), rs1:x9(0x0000080000000000), rs2:x25(0xffffffffffdfffff)
    TEST_RR_OP(clmulh, x23, x9, x25, 0x000007fffffffffe, 0x80000000000, 0xffffffffffdfffff, x1, 24, x2)

clmulh_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x00000ffffffffffe), rs1:x8(0x0000100000000000), rs2:x24(0xffffffffffefffff)
    TEST_RR_OP(clmulh, x24, x8, x24, 0x00000ffffffffffe, 0x100000000000, 0xffffffffffefffff, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_12_0)


clmulh_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x00001ffffffffffe), rs1:x7(0x0000200000000000), rs2:x23(0xfffffffffff7ffff)
    TEST_RR_OP(clmulh, x25, x7, x23, 0x00001ffffffffffe, 0x200000000000, 0xfffffffffff7ffff, x1, 0, x2)

clmulh_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x00003ffffffffffe), rs1:x6(0x0000400000000000), rs2:x22(0xfffffffffffbffff)
    TEST_RR_OP(clmulh, x26, x6, x22, 0x00003ffffffffffe, 0x400000000000, 0xfffffffffffbffff, x1, 8, x2)

clmulh_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x00007ffffffffffe), rs1:x5(0x0000800000000000), rs2:x21(0xfffffffffffdffff)
    TEST_RR_OP(clmulh, x27, x5, x21, 0x00007ffffffffffe, 0x800000000000, 0xfffffffffffdffff, x1, 16, x2)

clmulh_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0000fffffffffffe), rs1:x4(0x0001000000000000), rs2:x20(0xfffffffffffeffff)
    TEST_RR_OP(clmulh, x28, x4, x20, 0x0000fffffffffffe, 0x1000000000000, 0xfffffffffffeffff, x1, 24, x2)

clmulh_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0001fffffffffffe), rs1:x3(0x0002000000000000), rs2:x19(0xffffffffffff7fff)
    TEST_RR_OP(clmulh, x29, x3, x19, 0x0001fffffffffffe, 0x2000000000000, 0xffffffffffff7fff, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x4,signature_13_0)


clmulh_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0003fffffffffffe), rs1:x2(0x0004000000000000), rs2:x18(0xffffffffffffbfff)
    TEST_RR_OP(clmulh, x30, x2, x18, 0x0003fffffffffffe, 0x4000000000000, 0xffffffffffffbfff, x4, 0, x5)

clmulh_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0007fffffffffffe), rs1:x1(0x0008000000000000), rs2:x17(0xffffffffffffdfff)
    TEST_RR_OP(clmulh, x31, x1, x17, 0x0007fffffffffffe, 0x8000000000000, 0xffffffffffffdfff, x4, 8, x5)

clmulh_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x000ffffffffffffe), rs1:x31(0x0010000000000000), rs2:x16(0xffffffffffffefff)
    TEST_RR_OP(clmulh, x1, x31, x16, 0x000ffffffffffffe, 0x10000000000000, 0xffffffffffffefff, x4, 16, x5)

clmulh_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x001ffffffffffffe), rs1:x30(0x0020000000000000), rs2:x15(0xfffffffffffff7ff)
    TEST_RR_OP(clmulh, x2, x30, x15, 0x001ffffffffffffe, 0x20000000000000, 0xfffffffffffff7ff, x4, 24, x5)

clmulh_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x003ffffffffffffe), rs1:x29(0x0040000000000000), rs2:x14(0xfffffffffffffbff)
    TEST_RR_OP(clmulh, x3, x29, x14, 0x003ffffffffffffe, 0x40000000000000, 0xfffffffffffffbff, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_14_0)


clmulh_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x007ffffffffffffe), rs1:x28(0x0080000000000000), rs2:x13(0xfffffffffffffdff)
    TEST_RR_OP(clmulh, x4, x28, x13, 0x007ffffffffffffe, 0x80000000000000, 0xfffffffffffffdff, x1, 0, x2)

clmulh_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x00fffffffffffffe), rs1:x27(0x0100000000000000), rs2:x12(0xfffffffffffffeff)
    TEST_RR_OP(clmulh, x5, x27, x12, 0x00fffffffffffffe, 0x100000000000000, 0xfffffffffffffeff, x1, 8, x2)

clmulh_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x01fffffffffffffe), rs1:x26(0x0200000000000000), rs2:x11(0xffffffffffffff7f)
    TEST_RR_OP(clmulh, x6, x26, x11, 0x01fffffffffffffe, 0x200000000000000, 0xffffffffffffff7f, x1, 16, x2)

clmulh_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x03fffffffffffffe), rs1:x25(0x0400000000000000), rs2:x10(0xffffffffffffffbf)
    TEST_RR_OP(clmulh, x7, x25, x10, 0x03fffffffffffffe, 0x400000000000000, 0xffffffffffffffbf, x1, 24, x2)

clmulh_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x07fffffffffffffe), rs1:x24(0x0800000000000000), rs2:x9(0xffffffffffffffdf)
    TEST_RR_OP(clmulh, x8, x24, x9, 0x07fffffffffffffe, 0x800000000000000, 0xffffffffffffffdf, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_15_0)


clmulh_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x0ffffffffffffffe), rs1:x23(0x1000000000000000), rs2:x8(0xffffffffffffffef)
    TEST_RR_OP(clmulh, x9, x23, x8, 0x0ffffffffffffffe, 0x1000000000000000, 0xffffffffffffffef, x1, 0, x2)

clmulh_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x1ffffffffffffffe), rs1:x22(0x2000000000000000), rs2:x7(0xfffffffffffffff7)
    TEST_RR_OP(clmulh, x10, x22, x7, 0x1ffffffffffffffe, 0x2000000000000000, 0xfffffffffffffff7, x1, 8, x2)

clmulh_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x3ffffffffffffffe), rs1:x21(0x4000000000000000), rs2:x6(0xfffffffffffffffb)
    TEST_RR_OP(clmulh, x11, x21, x6, 0x3ffffffffffffffe, 0x4000000000000000, 0xfffffffffffffffb, x1, 16, x2)

clmulh_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x7ffffffffffffffe), rs1:x20(0x8000000000000000), rs2:x5(0xfffffffffffffffd)
    TEST_RR_OP(clmulh, x12, x20, x5, 0x7ffffffffffffffe, 0x8000000000000000, 0xfffffffffffffffd, x1, 24, x2)

clmulh_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000), rs2:x4(0xfffffffffffffffe)
    TEST_RR_OP(clmulh, x13, x19, x4, 0x0000000000000000, 0x0, 0xfffffffffffffffe, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x4,signature_16_0)


clmulh_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0xfffffffffffffffe), rs2:x3(0x0000000000000000)
    TEST_RR_OP(clmulh, x14, x18, x3, 0x0000000000000000, 0xfffffffffffffffe, 0x0, x4, 0, x5)

clmulh_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0x7ffffffffffffffe), rs1:x17(0xfffffffffffffffd), rs2:x2(0x8000000000000000)
    TEST_RR_OP(clmulh, x15, x17, x2, 0x7ffffffffffffffe, 0xfffffffffffffffd, 0x8000000000000000, x4, 8, x5)

clmulh_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0x3ffffffffffffffe), rs1:x16(0xfffffffffffffffb), rs2:x1(0x4000000000000000)
    TEST_RR_OP(clmulh, x16, x16, x1, 0x3ffffffffffffffe, 0xfffffffffffffffb, 0x4000000000000000, x4, 16, x5)

clmulh_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0x1ffffffffffffffe), rs1:x15(0xfffffffffffffff7), rs2:x31(0x2000000000000000)
    TEST_RR_OP(clmulh, x17, x15, x31, 0x1ffffffffffffffe, 0xfffffffffffffff7, 0x2000000000000000, x4, 24, x5)

clmulh_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0x0ffffffffffffffe), rs1:x14(0xffffffffffffffef), rs2:x30(0x1000000000000000)
    TEST_RR_OP(clmulh, x18, x14, x30, 0x0ffffffffffffffe, 0xffffffffffffffef, 0x1000000000000000, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_17_0)


clmulh_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0x07fffffffffffffe), rs1:x13(0xffffffffffffffdf), rs2:x29(0x0800000000000000)
    TEST_RR_OP(clmulh, x19, x13, x29, 0x07fffffffffffffe, 0xffffffffffffffdf, 0x800000000000000, x1, 0, x2)

clmulh_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0x03fffffffffffffe), rs1:x12(0xffffffffffffffbf), rs2:x28(0x0400000000000000)
    TEST_RR_OP(clmulh, x20, x12, x28, 0x03fffffffffffffe, 0xffffffffffffffbf, 0x400000000000000, x1, 8, x2)

clmulh_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0x01fffffffffffffe), rs1:x11(0xffffffffffffff7f), rs2:x27(0x0200000000000000)
    TEST_RR_OP(clmulh, x21, x11, x27, 0x01fffffffffffffe, 0xffffffffffffff7f, 0x200000000000000, x1, 16, x2)

clmulh_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0x00fffffffffffffe), rs1:x10(0xfffffffffffffeff), rs2:x26(0x0100000000000000)
    TEST_RR_OP(clmulh, x22, x10, x26, 0x00fffffffffffffe, 0xfffffffffffffeff, 0x100000000000000, x1, 24, x2)

clmulh_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0x007ffffffffffffe), rs1:x9(0xfffffffffffffdff), rs2:x25(0x0080000000000000)
    TEST_RR_OP(clmulh, x23, x9, x25, 0x007ffffffffffffe, 0xfffffffffffffdff, 0x80000000000000, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_18_0)


clmulh_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0x003ffffffffffffe), rs1:x8(0xfffffffffffffbff), rs2:x24(0x0040000000000000)
    TEST_RR_OP(clmulh, x24, x8, x24, 0x003ffffffffffffe, 0xfffffffffffffbff, 0x40000000000000, x1, 0, x2)

clmulh_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0x001ffffffffffffe), rs1:x7(0xfffffffffffff7ff), rs2:x23(0x0020000000000000)
    TEST_RR_OP(clmulh, x25, x7, x23, 0x001ffffffffffffe, 0xfffffffffffff7ff, 0x20000000000000, x1, 8, x2)

clmulh_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0x000ffffffffffffe), rs1:x6(0xffffffffffffefff), rs2:x22(0x0010000000000000)
    TEST_RR_OP(clmulh, x26, x6, x22, 0x000ffffffffffffe, 0xffffffffffffefff, 0x10000000000000, x1, 16, x2)

clmulh_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0x0007fffffffffffe), rs1:x5(0xffffffffffffdfff), rs2:x21(0x0008000000000000)
    TEST_RR_OP(clmulh, x27, x5, x21, 0x0007fffffffffffe, 0xffffffffffffdfff, 0x8000000000000, x1, 24, x2)

clmulh_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0x0003fffffffffffe), rs1:x4(0xffffffffffffbfff), rs2:x20(0x0004000000000000)
    TEST_RR_OP(clmulh, x28, x4, x20, 0x0003fffffffffffe, 0xffffffffffffbfff, 0x4000000000000, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x4,signature_19_0)


clmulh_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0x0001fffffffffffe), rs1:x3(0xffffffffffff7fff), rs2:x19(0x0002000000000000)
    TEST_RR_OP(clmulh, x29, x3, x19, 0x0001fffffffffffe, 0xffffffffffff7fff, 0x2000000000000, x4, 0, x5)

clmulh_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0x0000fffffffffffe), rs1:x2(0xfffffffffffeffff), rs2:x18(0x0001000000000000)
    TEST_RR_OP(clmulh, x30, x2, x18, 0x0000fffffffffffe, 0xfffffffffffeffff, 0x1000000000000, x4, 8, x5)

clmulh_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0x00007ffffffffffe), rs1:x1(0xfffffffffffdffff), rs2:x17(0x0000800000000000)
    TEST_RR_OP(clmulh, x31, x1, x17, 0x00007ffffffffffe, 0xfffffffffffdffff, 0x800000000000, x4, 16, x5)

clmulh_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0x00003ffffffffffe), rs1:x31(0xfffffffffffbffff), rs2:x16(0x0000400000000000)
    TEST_RR_OP(clmulh, x1, x31, x16, 0x00003ffffffffffe, 0xfffffffffffbffff, 0x400000000000, x4, 24, x5)

clmulh_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0x00001ffffffffffe), rs1:x30(0xfffffffffff7ffff), rs2:x15(0x0000200000000000)
    TEST_RR_OP(clmulh, x2, x30, x15, 0x00001ffffffffffe, 0xfffffffffff7ffff, 0x200000000000, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_20_0)


clmulh_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0x00000ffffffffffe), rs1:x29(0xffffffffffefffff), rs2:x14(0x0000100000000000)
    TEST_RR_OP(clmulh, x3, x29, x14, 0x00000ffffffffffe, 0xffffffffffefffff, 0x100000000000, x1, 0, x2)

clmulh_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0x000007fffffffffe), rs1:x28(0xffffffffffdfffff), rs2:x13(0x0000080000000000)
    TEST_RR_OP(clmulh, x4, x28, x13, 0x000007fffffffffe, 0xffffffffffdfffff, 0x80000000000, x1, 8, x2)

clmulh_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0x000003fffffffffe), rs1:x27(0xffffffffffbfffff), rs2:x12(0x0000040000000000)
    TEST_RR_OP(clmulh, x5, x27, x12, 0x000003fffffffffe, 0xffffffffffbfffff, 0x40000000000, x1, 16, x2)

clmulh_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0x000001fffffffffe), rs1:x26(0xffffffffff7fffff), rs2:x11(0x0000020000000000)
    TEST_RR_OP(clmulh, x6, x26, x11, 0x000001fffffffffe, 0xffffffffff7fffff, 0x20000000000, x1, 24, x2)

clmulh_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0x000000fffffffffe), rs1:x25(0xfffffffffeffffff), rs2:x10(0x0000010000000000)
    TEST_RR_OP(clmulh, x7, x25, x10, 0x000000fffffffffe, 0xfffffffffeffffff, 0x10000000000, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_21_0)


clmulh_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0x0000007ffffffffe), rs1:x24(0xfffffffffdffffff), rs2:x9(0x0000008000000000)
    TEST_RR_OP(clmulh, x8, x24, x9, 0x0000007ffffffffe, 0xfffffffffdffffff, 0x8000000000, x1, 0, x2)

clmulh_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0x0000003ffffffffe), rs1:x23(0xfffffffffbffffff), rs2:x8(0x0000004000000000)
    TEST_RR_OP(clmulh, x9, x23, x8, 0x0000003ffffffffe, 0xfffffffffbffffff, 0x4000000000, x1, 8, x2)

clmulh_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0x0000001ffffffffe), rs1:x22(0xfffffffff7ffffff), rs2:x7(0x0000002000000000)
    TEST_RR_OP(clmulh, x10, x22, x7, 0x0000001ffffffffe, 0xfffffffff7ffffff, 0x2000000000, x1, 16, x2)

clmulh_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0x0000000ffffffffe), rs1:x21(0xffffffffefffffff), rs2:x6(0x0000001000000000)
    TEST_RR_OP(clmulh, x11, x21, x6, 0x0000000ffffffffe, 0xffffffffefffffff, 0x1000000000, x1, 24, x2)

clmulh_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0x00000007fffffffe), rs1:x20(0xffffffffdfffffff), rs2:x5(0x0000000800000000)
    TEST_RR_OP(clmulh, x12, x20, x5, 0x00000007fffffffe, 0xffffffffdfffffff, 0x800000000, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x5,signature_22_0)


clmulh_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0x00000003fffffffe), rs1:x19(0xffffffffbfffffff), rs2:x4(0x0000000400000000)
    TEST_RR_OP(clmulh, x13, x19, x4, 0x00000003fffffffe, 0xffffffffbfffffff, 0x400000000, x5, 0, x6)

clmulh_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0x00000001fffffffe), rs1:x18(0xffffffff7fffffff), rs2:x3(0x0000000200000000)
    TEST_RR_OP(clmulh, x14, x18, x3, 0x00000001fffffffe, 0xffffffff7fffffff, 0x200000000, x5, 8, x6)

clmulh_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0x00000000fffffffe), rs1:x17(0xfffffffeffffffff), rs2:x2(0x0000000100000000)
    TEST_RR_OP(clmulh, x15, x17, x2, 0x00000000fffffffe, 0xfffffffeffffffff, 0x100000000, x5, 16, x6)

clmulh_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0x000000007ffffffe), rs1:x16(0xfffffffdffffffff), rs2:x1(0x0000000080000000)
    TEST_RR_OP(clmulh, x16, x16, x1, 0x000000007ffffffe, 0xfffffffdffffffff, 0x80000000, x5, 24, x6)

clmulh_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0x000000003ffffffe), rs1:x15(0xfffffffbffffffff), rs2:x31(0x0000000040000000)
    TEST_RR_OP(clmulh, x17, x15, x31, 0x000000003ffffffe, 0xfffffffbffffffff, 0x40000000, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_23_0)


clmulh_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0x000000001ffffffe), rs1:x14(0xfffffff7ffffffff), rs2:x30(0x0000000020000000)
    TEST_RR_OP(clmulh, x18, x14, x30, 0x000000001ffffffe, 0xfffffff7ffffffff, 0x20000000, x1, 0, x2)

clmulh_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0x000000000ffffffe), rs1:x13(0xffffffefffffffff), rs2:x29(0x0000000010000000)
    TEST_RR_OP(clmulh, x19, x13, x29, 0x000000000ffffffe, 0xffffffefffffffff, 0x10000000, x1, 8, x2)

clmulh_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0x0000000007fffffe), rs1:x12(0xffffffdfffffffff), rs2:x28(0x0000000008000000)
    TEST_RR_OP(clmulh, x20, x12, x28, 0x0000000007fffffe, 0xffffffdfffffffff, 0x8000000, x1, 16, x2)

clmulh_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0x0000000003fffffe), rs1:x11(0xffffffbfffffffff), rs2:x27(0x0000000004000000)
    TEST_RR_OP(clmulh, x21, x11, x27, 0x0000000003fffffe, 0xffffffbfffffffff, 0x4000000, x1, 24, x2)

clmulh_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0x0000000001fffffe), rs1:x10(0xffffff7fffffffff), rs2:x26(0x0000000002000000)
    TEST_RR_OP(clmulh, x22, x10, x26, 0x0000000001fffffe, 0xffffff7fffffffff, 0x2000000, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_24_0)


clmulh_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0x0000000000fffffe), rs1:x9(0xfffffeffffffffff), rs2:x25(0x0000000001000000)
    TEST_RR_OP(clmulh, x23, x9, x25, 0x0000000000fffffe, 0xfffffeffffffffff, 0x1000000, x1, 0, x2)

clmulh_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0x00000000007ffffe), rs1:x8(0xfffffdffffffffff), rs2:x24(0x0000000000800000)
    TEST_RR_OP(clmulh, x24, x8, x24, 0x00000000007ffffe, 0xfffffdffffffffff, 0x800000, x1, 8, x2)

clmulh_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0x00000000003ffffe), rs1:x7(0xfffffbffffffffff), rs2:x23(0x0000000000400000)
    TEST_RR_OP(clmulh, x25, x7, x23, 0x00000000003ffffe, 0xfffffbffffffffff, 0x400000, x1, 16, x2)

clmulh_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0x00000000001ffffe), rs1:x6(0xfffff7ffffffffff), rs2:x22(0x0000000000200000)
    TEST_RR_OP(clmulh, x26, x6, x22, 0x00000000001ffffe, 0xfffff7ffffffffff, 0x200000, x1, 24, x2)

clmulh_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0x00000000000ffffe), rs1:x5(0xffffefffffffffff), rs2:x21(0x0000000000100000)
    TEST_RR_OP(clmulh, x27, x5, x21, 0x00000000000ffffe, 0xffffefffffffffff, 0x100000, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x5,signature_25_0)


clmulh_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0x000000000007fffe), rs1:x4(0xffffdfffffffffff), rs2:x20(0x0000000000080000)
    TEST_RR_OP(clmulh, x28, x4, x20, 0x000000000007fffe, 0xffffdfffffffffff, 0x80000, x5, 0, x6)

clmulh_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0x000000000003fffe), rs1:x3(0xffffbfffffffffff), rs2:x19(0x0000000000040000)
    TEST_RR_OP(clmulh, x29, x3, x19, 0x000000000003fffe, 0xffffbfffffffffff, 0x40000, x5, 8, x6)

clmulh_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0x000000000001fffe), rs1:x2(0xffff7fffffffffff), rs2:x18(0x0000000000020000)
    TEST_RR_OP(clmulh, x30, x2, x18, 0x000000000001fffe, 0xffff7fffffffffff, 0x20000, x5, 16, x6)

clmulh_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0x000000000000fffe), rs1:x1(0xfffeffffffffffff), rs2:x17(0x0000000000010000)
    TEST_RR_OP(clmulh, x31, x1, x17, 0x000000000000fffe, 0xfffeffffffffffff, 0x10000, x5, 24, x6)

clmulh_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0x0000000000007ffe), rs1:x31(0xfffdffffffffffff), rs2:x16(0x0000000000008000)
    TEST_RR_OP(clmulh, x1, x31, x16, 0x0000000000007ffe, 0xfffdffffffffffff, 0x8000, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_26_0)


clmulh_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0x0000000000003ffe), rs1:x30(0xfffbffffffffffff), rs2:x15(0x0000000000004000)
    TEST_RR_OP(clmulh, x2, x30, x15, 0x0000000000003ffe, 0xfffbffffffffffff, 0x4000, x1, 0, x7)

clmulh_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0x0000000000001ffe), rs1:x29(0xfff7ffffffffffff), rs2:x14(0x0000000000002000)
    TEST_RR_OP(clmulh, x3, x29, x14, 0x0000000000001ffe, 0xfff7ffffffffffff, 0x2000, x1, 8, x7)

clmulh_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000ffe), rs1:x28(0xffefffffffffffff), rs2:x13(0x0000000000001000)
    TEST_RR_OP(clmulh, x4, x28, x13, 0x0000000000000ffe, 0xffefffffffffffff, 0x1000, x1, 16, x7)

clmulh_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0x00000000000007fe), rs1:x27(0xffdfffffffffffff), rs2:x12(0x0000000000000800)
    TEST_RR_OP(clmulh, x5, x27, x12, 0x00000000000007fe, 0xffdfffffffffffff, 0x800, x1, 24, x7)

clmulh_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0x00000000000003fe), rs1:x26(0xffbfffffffffffff), rs2:x11(0x0000000000000400)
    TEST_RR_OP(clmulh, x6, x26, x11, 0x00000000000003fe, 0xffbfffffffffffff, 0x400, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_27_0)


clmulh_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0x00000000000001fe), rs1:x25(0xff7fffffffffffff), rs2:x10(0x0000000000000200)
    TEST_RR_OP(clmulh, x7, x25, x10, 0x00000000000001fe, 0xff7fffffffffffff, 0x200, x1, 0, x2)

clmulh_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0x00000000000000fe), rs1:x24(0xfeffffffffffffff), rs2:x9(0x0000000000000100)
    TEST_RR_OP(clmulh, x8, x24, x9, 0x00000000000000fe, 0xfeffffffffffffff, 0x100, x1, 8, x2)

clmulh_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0x000000000000007e), rs1:x23(0xfdffffffffffffff), rs2:x8(0x0000000000000080)
    TEST_RR_OP(clmulh, x9, x23, x8, 0x000000000000007e, 0xfdffffffffffffff, 0x80, x1, 16, x2)

clmulh_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0x000000000000003e), rs1:x22(0xfbffffffffffffff), rs2:x7(0x0000000000000040)
    TEST_RR_OP(clmulh, x10, x22, x7, 0x000000000000003e, 0xfbffffffffffffff, 0x40, x1, 24, x2)

clmulh_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0x000000000000001e), rs1:x21(0xf7ffffffffffffff), rs2:x6(0x0000000000000020)
    TEST_RR_OP(clmulh, x11, x21, x6, 0x000000000000001e, 0xf7ffffffffffffff, 0x20, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x6,signature_28_0)


clmulh_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0x000000000000000e), rs1:x20(0xefffffffffffffff), rs2:x5(0x0000000000000010)
    TEST_RR_OP(clmulh, x12, x20, x5, 0x000000000000000e, 0xefffffffffffffff, 0x10, x6, 0, x7)

clmulh_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000006), rs1:x19(0xdfffffffffffffff), rs2:x4(0x0000000000000008)
    TEST_RR_OP(clmulh, x13, x19, x4, 0x0000000000000006, 0xdfffffffffffffff, 0x8, x6, 8, x7)

clmulh_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000002), rs1:x18(0xbfffffffffffffff), rs2:x3(0x0000000000000004)
    TEST_RR_OP(clmulh, x14, x18, x3, 0x0000000000000002, 0xbfffffffffffffff, 0x4, x6, 16, x7)

clmulh_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x7fffffffffffffff), rs2:x2(0x0000000000000002)
    TEST_RR_OP(clmulh, x15, x17, x2, 0x0000000000000000, 0x7fffffffffffffff, 0x2, x6, 24, x7)

clmulh_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0xffffffffffffffff), rs2:x1(0x0000000000000001)
    TEST_RR_OP(clmulh, x16, x16, x1, 0x0000000000000000, 0xffffffffffffffff, 0x1, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_29_0)


clmulh_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000000000000001), rs2:x31(0x0000000000000000)
    TEST_RR_OP(clmulh, x17, x15, x31, 0x0000000000000000, 0x1, 0x0, x1, 0, x2)

clmulh_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000000000000002), rs2:x30(0x0000000000000000)
    TEST_RR_OP(clmulh, x18, x14, x30, 0x0000000000000000, 0x2, 0x0, x1, 8, x2)

clmulh_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000004), rs2:x29(0x0000000000000000)
    TEST_RR_OP(clmulh, x19, x13, x29, 0x0000000000000000, 0x4, 0x0, x1, 16, x2)

clmulh_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000000000000008), rs2:x28(0x0000000000000000)
    TEST_RR_OP(clmulh, x20, x12, x28, 0x0000000000000000, 0x8, 0x0, x1, 24, x2)

clmulh_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000000000010), rs2:x27(0x0000000000000000)
    TEST_RR_OP(clmulh, x21, x11, x27, 0x0000000000000000, 0x10, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_30_0)


clmulh_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000000000000020), rs2:x26(0x0000000000000000)
    TEST_RR_OP(clmulh, x22, x10, x26, 0x0000000000000000, 0x20, 0x0, x1, 0, x2)

clmulh_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000000000000040), rs2:x25(0x0000000000000000)
    TEST_RR_OP(clmulh, x23, x9, x25, 0x0000000000000000, 0x40, 0x0, x1, 8, x2)

clmulh_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000000000000080), rs2:x24(0x0000000000000000)
    TEST_RR_OP(clmulh, x24, x8, x24, 0x0000000000000000, 0x80, 0x0, x1, 16, x2)

clmulh_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000000000000100), rs2:x23(0x0000000000000000)
    TEST_RR_OP(clmulh, x25, x7, x23, 0x0000000000000000, 0x100, 0x0, x1, 24, x2)

clmulh_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000000000000200), rs2:x22(0x0000000000000000)
    TEST_RR_OP(clmulh, x26, x6, x22, 0x0000000000000000, 0x200, 0x0, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x6,signature_31_0)


clmulh_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000000000000400), rs2:x21(0x0000000000000000)
    TEST_RR_OP(clmulh, x27, x5, x21, 0x0000000000000000, 0x400, 0x0, x6, 0, x7)

clmulh_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000000000000800), rs2:x20(0x0000000000000000)
    TEST_RR_OP(clmulh, x28, x4, x20, 0x0000000000000000, 0x800, 0x0, x6, 8, x7)

clmulh_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000000000001000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(clmulh, x29, x3, x19, 0x0000000000000000, 0x1000, 0x0, x6, 16, x7)

clmulh_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000000000002000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(clmulh, x30, x2, x18, 0x0000000000000000, 0x2000, 0x0, x6, 24, x7)

clmulh_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000000000004000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(clmulh, x31, x1, x17, 0x0000000000000000, 0x4000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x6,signature_32_0)


clmulh_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000000000008000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(clmulh, x1, x31, x16, 0x0000000000000000, 0x8000, 0x0, x6, 0, x7)

clmulh_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000000000010000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(clmulh, x2, x30, x15, 0x0000000000000000, 0x10000, 0x0, x6, 8, x7)

clmulh_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0000000000020000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(clmulh, x3, x29, x14, 0x0000000000000000, 0x20000, 0x0, x6, 16, x7)

clmulh_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0000000000040000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(clmulh, x4, x28, x13, 0x0000000000000000, 0x40000, 0x0, x6, 24, x7)

clmulh_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0000000000080000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(clmulh, x5, x27, x12, 0x0000000000000000, 0x80000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_33_0)


clmulh_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0000000000100000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(clmulh, x6, x26, x11, 0x0000000000000000, 0x100000, 0x0, x1, 0, x2)

clmulh_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0000000000200000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(clmulh, x7, x25, x10, 0x0000000000000000, 0x200000, 0x0, x1, 8, x2)

clmulh_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0000000000400000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(clmulh, x8, x24, x9, 0x0000000000000000, 0x400000, 0x0, x1, 16, x2)

clmulh_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0000000000800000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(clmulh, x9, x23, x8, 0x0000000000000000, 0x800000, 0x0, x1, 24, x2)

clmulh_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0000000001000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(clmulh, x10, x22, x7, 0x0000000000000000, 0x1000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_34_0)


clmulh_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0000000002000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(clmulh, x11, x21, x6, 0x0000000000000000, 0x2000000, 0x0, x1, 0, x7)

clmulh_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000004000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(clmulh, x12, x20, x5, 0x0000000000000000, 0x4000000, 0x0, x1, 8, x7)

clmulh_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000008000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(clmulh, x13, x19, x4, 0x0000000000000000, 0x8000000, 0x0, x1, 16, x7)

clmulh_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0000000010000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(clmulh, x14, x18, x3, 0x0000000000000000, 0x10000000, 0x0, x1, 24, x7)

clmulh_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x0000000020000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(clmulh, x15, x17, x2, 0x0000000000000000, 0x20000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x2,signature_35_0)


clmulh_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x0000000040000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(clmulh, x16, x16, x1, 0x0000000000000000, 0x40000000, 0x0, x2, 0, x3)

clmulh_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000000080000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(clmulh, x17, x15, x31, 0x0000000000000000, 0x80000000, 0x0, x2, 8, x3)

clmulh_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000000100000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(clmulh, x18, x14, x30, 0x0000000000000000, 0x100000000, 0x0, x2, 16, x3)

clmulh_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000200000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(clmulh, x19, x13, x29, 0x0000000000000000, 0x200000000, 0x0, x2, 24, x3)

clmulh_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000000400000000), rs2:x28(0x0000000000000000)
    TEST_RR_OP(clmulh, x20, x12, x28, 0x0000000000000000, 0x400000000, 0x0, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_36_0)


clmulh_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000800000000), rs2:x27(0x0000000000000000)
    TEST_RR_OP(clmulh, x21, x11, x27, 0x0000000000000000, 0x800000000, 0x0, x1, 0, x2)

clmulh_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000001000000000), rs2:x26(0x0000000000000000)
    TEST_RR_OP(clmulh, x22, x10, x26, 0x0000000000000000, 0x1000000000, 0x0, x1, 8, x2)

clmulh_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000002000000000), rs2:x25(0x0000000000000000)
    TEST_RR_OP(clmulh, x23, x9, x25, 0x0000000000000000, 0x2000000000, 0x0, x1, 16, x2)

clmulh_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000004000000000), rs2:x24(0x0000000000000000)
    TEST_RR_OP(clmulh, x24, x8, x24, 0x0000000000000000, 0x4000000000, 0x0, x1, 24, x2)

clmulh_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000008000000000), rs2:x23(0x0000000000000000)
    TEST_RR_OP(clmulh, x25, x7, x23, 0x0000000000000000, 0x8000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_37_0)


clmulh_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000010000000000), rs2:x22(0x0000000000000000)
    TEST_RR_OP(clmulh, x26, x6, x22, 0x0000000000000000, 0x10000000000, 0x0, x1, 0, x7)

clmulh_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000020000000000), rs2:x21(0x0000000000000000)
    TEST_RR_OP(clmulh, x27, x5, x21, 0x0000000000000000, 0x20000000000, 0x0, x1, 8, x7)

clmulh_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000040000000000), rs2:x20(0x0000000000000000)
    TEST_RR_OP(clmulh, x28, x4, x20, 0x0000000000000000, 0x40000000000, 0x0, x1, 16, x7)

clmulh_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000080000000000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(clmulh, x29, x3, x19, 0x0000000000000000, 0x80000000000, 0x0, x1, 24, x7)

clmulh_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000100000000000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(clmulh, x30, x2, x18, 0x0000000000000000, 0x100000000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x5,signature_38_0)


clmulh_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000200000000000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(clmulh, x31, x1, x17, 0x0000000000000000, 0x200000000000, 0x0, x5, 0, x6)

clmulh_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000400000000000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(clmulh, x1, x31, x16, 0x0000000000000000, 0x400000000000, 0x0, x5, 8, x6)

clmulh_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000800000000000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(clmulh, x2, x30, x15, 0x0000000000000000, 0x800000000000, 0x0, x5, 16, x6)

clmulh_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0001000000000000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(clmulh, x3, x29, x14, 0x0000000000000000, 0x1000000000000, 0x0, x5, 24, x6)

clmulh_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0002000000000000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(clmulh, x4, x28, x13, 0x0000000000000000, 0x2000000000000, 0x0, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_39_0)


clmulh_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0004000000000000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(clmulh, x5, x27, x12, 0x0000000000000000, 0x4000000000000, 0x0, x1, 0, x2)

clmulh_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0008000000000000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(clmulh, x6, x26, x11, 0x0000000000000000, 0x8000000000000, 0x0, x1, 8, x2)

clmulh_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0010000000000000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(clmulh, x7, x25, x10, 0x0000000000000000, 0x10000000000000, 0x0, x1, 16, x2)

clmulh_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0020000000000000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(clmulh, x8, x24, x9, 0x0000000000000000, 0x20000000000000, 0x0, x1, 24, x2)

clmulh_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0040000000000000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(clmulh, x9, x23, x8, 0x0000000000000000, 0x40000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_40_0)


clmulh_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0080000000000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(clmulh, x10, x22, x7, 0x0000000000000000, 0x80000000000000, 0x0, x1, 0, x2)

clmulh_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0100000000000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(clmulh, x11, x21, x6, 0x0000000000000000, 0x100000000000000, 0x0, x1, 8, x2)

clmulh_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0200000000000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(clmulh, x12, x20, x5, 0x0000000000000000, 0x200000000000000, 0x0, x1, 16, x2)

clmulh_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0400000000000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(clmulh, x13, x19, x4, 0x0000000000000000, 0x400000000000000, 0x0, x1, 24, x2)

clmulh_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0800000000000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(clmulh, x14, x18, x3, 0x0000000000000000, 0x800000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x3,signature_41_0)


clmulh_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x1000000000000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(clmulh, x15, x17, x2, 0x0000000000000000, 0x1000000000000000, 0x0, x3, 0, x4)

clmulh_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x2000000000000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(clmulh, x16, x16, x1, 0x0000000000000000, 0x2000000000000000, 0x0, x3, 8, x4)

clmulh_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x4000000000000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(clmulh, x17, x15, x31, 0x0000000000000000, 0x4000000000000000, 0x0, x3, 16, x4)

clmulh_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x8000000000000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(clmulh, x18, x14, x30, 0x0000000000000000, 0x8000000000000000, 0x0, x3, 24, x4)

clmulh_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(clmulh, x19, x13, x29, 0x0000000000000000, 0x0, 0x0, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_42_0)


clmulh_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0xfffffffffffffffe), rs2:x28(0x0000000000000000)
    TEST_RR_OP(clmulh, x20, x12, x28, 0x0000000000000000, 0xfffffffffffffffe, 0x0, x1, 0, x2)

clmulh_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0xfffffffffffffffd), rs2:x27(0x0000000000000000)
    TEST_RR_OP(clmulh, x21, x11, x27, 0x0000000000000000, 0xfffffffffffffffd, 0x0, x1, 8, x2)

clmulh_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0xfffffffffffffffb), rs2:x26(0x0000000000000000)
    TEST_RR_OP(clmulh, x22, x10, x26, 0x0000000000000000, 0xfffffffffffffffb, 0x0, x1, 16, x2)

clmulh_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0xfffffffffffffff7), rs2:x25(0x0000000000000000)
    TEST_RR_OP(clmulh, x23, x9, x25, 0x0000000000000000, 0xfffffffffffffff7, 0x0, x1, 24, x2)

clmulh_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0xffffffffffffffef), rs2:x24(0x0000000000000000)
    TEST_RR_OP(clmulh, x24, x8, x24, 0x0000000000000000, 0xffffffffffffffef, 0x0, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_43_0)


clmulh_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0xffffffffffffffdf), rs2:x23(0x0000000000000000)
    TEST_RR_OP(clmulh, x25, x7, x23, 0x0000000000000000, 0xffffffffffffffdf, 0x0, x1, 0, x2)

clmulh_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0xffffffffffffffbf), rs2:x22(0x0000000000000000)
    TEST_RR_OP(clmulh, x26, x6, x22, 0x0000000000000000, 0xffffffffffffffbf, 0x0, x1, 8, x2)

clmulh_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0xffffffffffffff7f), rs2:x21(0x0000000000000000)
    TEST_RR_OP(clmulh, x27, x5, x21, 0x0000000000000000, 0xffffffffffffff7f, 0x0, x1, 16, x2)

clmulh_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0xfffffffffffffeff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(clmulh, x28, x4, x20, 0x0000000000000000, 0xfffffffffffffeff, 0x0, x1, 24, x2)

clmulh_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0xfffffffffffffdff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(clmulh, x29, x3, x19, 0x0000000000000000, 0xfffffffffffffdff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x4,signature_44_0)


clmulh_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0xfffffffffffffbff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(clmulh, x30, x2, x18, 0x0000000000000000, 0xfffffffffffffbff, 0x0, x4, 0, x5)

clmulh_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0xfffffffffffff7ff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(clmulh, x31, x1, x17, 0x0000000000000000, 0xfffffffffffff7ff, 0x0, x4, 8, x5)

clmulh_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0xffffffffffffefff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(clmulh, x1, x31, x16, 0x0000000000000000, 0xffffffffffffefff, 0x0, x4, 16, x5)

clmulh_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0xffffffffffffdfff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(clmulh, x2, x30, x15, 0x0000000000000000, 0xffffffffffffdfff, 0x0, x4, 24, x5)

clmulh_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0xffffffffffffbfff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(clmulh, x3, x29, x14, 0x0000000000000000, 0xffffffffffffbfff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_45_0)


clmulh_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0xffffffffffff7fff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(clmulh, x4, x28, x13, 0x0000000000000000, 0xffffffffffff7fff, 0x0, x1, 0, x2)

clmulh_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0xfffffffffffeffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(clmulh, x5, x27, x12, 0x0000000000000000, 0xfffffffffffeffff, 0x0, x1, 8, x2)

clmulh_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0xfffffffffffdffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(clmulh, x6, x26, x11, 0x0000000000000000, 0xfffffffffffdffff, 0x0, x1, 16, x2)

clmulh_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0xfffffffffffbffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(clmulh, x7, x25, x10, 0x0000000000000000, 0xfffffffffffbffff, 0x0, x1, 24, x2)

clmulh_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0xfffffffffff7ffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(clmulh, x8, x24, x9, 0x0000000000000000, 0xfffffffffff7ffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_46_0)


clmulh_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0xffffffffffefffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(clmulh, x9, x23, x8, 0x0000000000000000, 0xffffffffffefffff, 0x0, x1, 0, x2)

clmulh_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0xffffffffffdfffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(clmulh, x10, x22, x7, 0x0000000000000000, 0xffffffffffdfffff, 0x0, x1, 8, x2)

clmulh_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0xffffffffffbfffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(clmulh, x11, x21, x6, 0x0000000000000000, 0xffffffffffbfffff, 0x0, x1, 16, x2)

clmulh_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0xffffffffff7fffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(clmulh, x12, x20, x5, 0x0000000000000000, 0xffffffffff7fffff, 0x0, x1, 24, x2)

clmulh_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0xfffffffffeffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(clmulh, x13, x19, x4, 0x0000000000000000, 0xfffffffffeffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x4,signature_47_0)


clmulh_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0xfffffffffdffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(clmulh, x14, x18, x3, 0x0000000000000000, 0xfffffffffdffffff, 0x0, x4, 0, x5)

clmulh_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0xfffffffffbffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(clmulh, x15, x17, x2, 0x0000000000000000, 0xfffffffffbffffff, 0x0, x4, 8, x5)

clmulh_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0xfffffffff7ffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(clmulh, x16, x16, x1, 0x0000000000000000, 0xfffffffff7ffffff, 0x0, x4, 16, x5)

clmulh_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0xffffffffefffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(clmulh, x17, x15, x31, 0x0000000000000000, 0xffffffffefffffff, 0x0, x4, 24, x5)

clmulh_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0xffffffffdfffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(clmulh, x18, x14, x30, 0x0000000000000000, 0xffffffffdfffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_48_0)


clmulh_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0xffffffffbfffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(clmulh, x19, x13, x29, 0x0000000000000000, 0xffffffffbfffffff, 0x0, x1, 0, x2)

clmulh_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0xffffffff7fffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(clmulh, x20, x12, x28, 0x0000000000000000, 0xffffffff7fffffff, 0x0, x1, 8, x2)

clmulh_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0xfffffffeffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(clmulh, x21, x11, x27, 0x0000000000000000, 0xfffffffeffffffff, 0x0, x1, 16, x2)

clmulh_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0xfffffffdffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(clmulh, x22, x10, x26, 0x0000000000000000, 0xfffffffdffffffff, 0x0, x1, 24, x2)

clmulh_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0xfffffffbffffffff), rs2:x25(0x0000000000000000)
    TEST_RR_OP(clmulh, x23, x9, x25, 0x0000000000000000, 0xfffffffbffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_49_0)


clmulh_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0xfffffff7ffffffff), rs2:x24(0x0000000000000000)
    TEST_RR_OP(clmulh, x24, x8, x24, 0x0000000000000000, 0xfffffff7ffffffff, 0x0, x1, 0, x2)

clmulh_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0xffffffefffffffff), rs2:x23(0x0000000000000000)
    TEST_RR_OP(clmulh, x25, x7, x23, 0x0000000000000000, 0xffffffefffffffff, 0x0, x1, 8, x2)

clmulh_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0xffffffdfffffffff), rs2:x22(0x0000000000000000)
    TEST_RR_OP(clmulh, x26, x6, x22, 0x0000000000000000, 0xffffffdfffffffff, 0x0, x1, 16, x2)

clmulh_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0xffffffbfffffffff), rs2:x21(0x0000000000000000)
    TEST_RR_OP(clmulh, x27, x5, x21, 0x0000000000000000, 0xffffffbfffffffff, 0x0, x1, 24, x2)

clmulh_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0xffffff7fffffffff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(clmulh, x28, x4, x20, 0x0000000000000000, 0xffffff7fffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x4,signature_50_0)


clmulh_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0xfffffeffffffffff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(clmulh, x29, x3, x19, 0x0000000000000000, 0xfffffeffffffffff, 0x0, x4, 0, x5)

clmulh_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0xfffffdffffffffff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(clmulh, x30, x2, x18, 0x0000000000000000, 0xfffffdffffffffff, 0x0, x4, 8, x5)

clmulh_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0xfffffbffffffffff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(clmulh, x31, x1, x17, 0x0000000000000000, 0xfffffbffffffffff, 0x0, x4, 16, x5)

clmulh_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0xfffff7ffffffffff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(clmulh, x1, x31, x16, 0x0000000000000000, 0xfffff7ffffffffff, 0x0, x4, 24, x5)

clmulh_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0xffffefffffffffff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(clmulh, x2, x30, x15, 0x0000000000000000, 0xffffefffffffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_51_0)


clmulh_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0xffffdfffffffffff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(clmulh, x3, x29, x14, 0x0000000000000000, 0xffffdfffffffffff, 0x0, x1, 0, x2)

clmulh_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0xffffbfffffffffff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(clmulh, x4, x28, x13, 0x0000000000000000, 0xffffbfffffffffff, 0x0, x1, 8, x2)

clmulh_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0xffff7fffffffffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(clmulh, x5, x27, x12, 0x0000000000000000, 0xffff7fffffffffff, 0x0, x1, 16, x2)

clmulh_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0xfffeffffffffffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(clmulh, x6, x26, x11, 0x0000000000000000, 0xfffeffffffffffff, 0x0, x1, 24, x2)

clmulh_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0xfffdffffffffffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(clmulh, x7, x25, x10, 0x0000000000000000, 0xfffdffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_52_0)


clmulh_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0xfffbffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(clmulh, x8, x24, x9, 0x0000000000000000, 0xfffbffffffffffff, 0x0, x1, 0, x2)

clmulh_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0xfff7ffffffffffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(clmulh, x9, x23, x8, 0x0000000000000000, 0xfff7ffffffffffff, 0x0, x1, 8, x2)

clmulh_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0xffefffffffffffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(clmulh, x10, x22, x7, 0x0000000000000000, 0xffefffffffffffff, 0x0, x1, 16, x2)

clmulh_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0xffdfffffffffffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(clmulh, x11, x21, x6, 0x0000000000000000, 0xffdfffffffffffff, 0x0, x1, 24, x2)

clmulh_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0xffbfffffffffffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(clmulh, x12, x20, x5, 0x0000000000000000, 0xffbfffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x5,signature_53_0)


clmulh_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0xff7fffffffffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(clmulh, x13, x19, x4, 0x0000000000000000, 0xff7fffffffffffff, 0x0, x5, 0, x6)

clmulh_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0xfeffffffffffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(clmulh, x14, x18, x3, 0x0000000000000000, 0xfeffffffffffffff, 0x0, x5, 8, x6)

clmulh_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0xfdffffffffffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(clmulh, x15, x17, x2, 0x0000000000000000, 0xfdffffffffffffff, 0x0, x5, 16, x6)

clmulh_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0xfbffffffffffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(clmulh, x16, x16, x1, 0x0000000000000000, 0xfbffffffffffffff, 0x0, x5, 24, x6)

clmulh_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0xf7ffffffffffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(clmulh, x17, x15, x31, 0x0000000000000000, 0xf7ffffffffffffff, 0x0, x5, 32, x6)

    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_54_0)


clmulh_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0xefffffffffffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(clmulh, x18, x14, x30, 0x0000000000000000, 0xefffffffffffffff, 0x0, x1, 0, x2)

clmulh_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0xdfffffffffffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(clmulh, x19, x13, x29, 0x0000000000000000, 0xdfffffffffffffff, 0x0, x1, 8, x2)

clmulh_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0xbfffffffffffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(clmulh, x20, x12, x28, 0x0000000000000000, 0xbfffffffffffffff, 0x0, x1, 16, x2)

clmulh_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x7fffffffffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(clmulh, x21, x11, x27, 0x0000000000000000, 0x7fffffffffffffff, 0x0, x1, 24, x2)

clmulh_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0xffffffffffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(clmulh, x22, x10, x26, 0x0000000000000000, 0xffffffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

	RVTEST_SIGBASE(x1,signature_55_0)


clmulh_01_inst_270:
    // Test 270:  Test with rs1 == rs2
    // result rd:x23(0x5155155505401010), rs1:x25(0x10fd3dedadea5195), rs2:x25(0xdf7f3844121bcc23)
    TEST_RR_OP(clmulh, x23, x25, x25, 0x5155155505401010, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x1, 0, x2)

clmulh_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1), rs2:x24(0xf5adb41aa47d105b)
    TEST_RR_OP(clmulh, x0, x8, x24, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x1, 8, x2)

clmulh_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0x0000000000000000), rs1:x7(0xc9649f05a8e1a8bb), rs2:x0(0x82f6747f707af2c0)
    TEST_RR_OP(clmulh, x25, x7, x0, 0x0000000000000000, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x1, 16, x2)

clmulh_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb), rs2:x22(0x73a92fd4e19bfbc3)
    TEST_RR_OP(clmulh, x26, x0, x22, 0x0000000000000000, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x1, 24, x2)
	
#endif


RVTEST_CODE_END clmulh_01_code_end
RVTEST_CODE_BEGIN aes64ds_01_init aes64ds_01_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x6,signature_1_0)


aes64ds_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x396b70537c4476ad), rs1:x31(0x10fd3dedadea5195), rs2:x16(0xdf7f3844121bcc23)
    TEST_RR_OP(aes64ds, x1, x31, x16, 0x396b70537c4476ad, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x6, 0, x7)

aes64ds_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x1d185a3bcd13c6dd), rs1:x30(0xbd295ce2d2ffbec1), rs2:x15(0xf5adb41aa47d105b)
    TEST_RR_OP(aes64ds, x2, x30, x15, 0x1d185a3bcd13c6dd, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x6, 8, x7)

aes64ds_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0xd0d66f3612bdcafe), rs1:x29(0xc9649f05a8e1a8bb), rs2:x14(0x82f6747f707af2c0)
    TEST_RR_OP(aes64ds, x3, x29, x14, 0xd0d66f3612bdcafe, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x6, 16, x7)

aes64ds_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0xe0b76e34d9e84e59), rs1:x28(0x3541291848c99fcb), rs2:x13(0x73a92fd4e19bfbc3)
    TEST_RR_OP(aes64ds, x4, x28, x13, 0xe0b76e34d9e84e59, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x6, 24, x7)

aes64ds_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x480548727ccfd792), rs1:x27(0x10a24740461d524f), rs2:x12(0x546b0e54528a10af)
    TEST_RR_OP(aes64ds, x5, x27, x12, 0x480548727ccfd792, 0x10a24740461d524f, 0x546b0e54528a10af, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_2_0)


aes64ds_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x981a7cfdfdde161b), rs1:x26(0x546b0e54528a10af), rs2:x11(0x10a24740461d524f)
    TEST_RR_OP(aes64ds, x6, x26, x11, 0x981a7cfdfdde161b, 0x546b0e54528a10af, 0x10a24740461d524f, x1, 0, x2)

aes64ds_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0xd4f863198f124c33), rs1:x25(0x73a92fd4e19bfbc3), rs2:x10(0x3541291848c99fcb)
    TEST_RR_OP(aes64ds, x7, x25, x10, 0xd4f863198f124c33, 0x73a92fd4e19bfbc3, 0x3541291848c99fcb, x1, 8, x2)

aes64ds_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x6f8c046b11e06e1f), rs1:x24(0x82f6747f707af2c0), rs2:x9(0xc9649f05a8e1a8bb)
    TEST_RR_OP(aes64ds, x8, x24, x9, 0x6f8c046b11e06e1f, 0x82f6747f707af2c0, 0xc9649f05a8e1a8bb, x1, 16, x2)

aes64ds_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0x7f4c7c43777da757), rs1:x23(0xf5adb41aa47d105b), rs2:x8(0xbd295ce2d2ffbec1)
    TEST_RR_OP(aes64ds, x9, x23, x8, 0x7f4c7c43777da757, 0xf5adb41aa47d105b, 0xbd295ce2d2ffbec1, x1, 24, x2)

aes64ds_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0x18212786efbb8b32), rs1:x22(0xdf7f3844121bcc23), rs2:x7(0x10fd3dedadea5195)
    TEST_RR_OP(aes64ds, x10, x22, x7, 0x18212786efbb8b32, 0xdf7f3844121bcc23, 0x10fd3dedadea5195, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_3_0)


aes64ds_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x7d7d5252527d7d09), rs1:x21(0x0000000000000001), rs2:x6(0xffffffffffffffff)
    TEST_RR_OP(aes64ds, x11, x21, x6, 0x7d7d5252527d7d09, 0x1, 0xffffffffffffffff, x1, 0, x7)

aes64ds_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x7d7d5252527d7d6a), rs1:x20(0x0000000000000002), rs2:x5(0x7fffffffffffffff)
    TEST_RR_OP(aes64ds, x12, x20, x5, 0x7d7d5252527d7d6a, 0x2, 0x7fffffffffffffff, x1, 8, x7)

aes64ds_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x7d7d5252527d7d30), rs1:x19(0x0000000000000004), rs2:x4(0xbfffffffffffffff)
    TEST_RR_OP(aes64ds, x13, x19, x4, 0x7d7d5252527d7d30, 0x4, 0xbfffffffffffffff, x1, 16, x7)

aes64ds_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x7d7d5252527d7dbf), rs1:x18(0x0000000000000008), rs2:x3(0xdfffffffffffffff)
    TEST_RR_OP(aes64ds, x14, x18, x3, 0x7d7d5252527d7dbf, 0x8, 0xdfffffffffffffff, x1, 24, x7)

aes64ds_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x7d7d5252527d7d7c), rs1:x17(0x0000000000000010), rs2:x2(0xefffffffffffffff)
    TEST_RR_OP(aes64ds, x15, x17, x2, 0x7d7d5252527d7d7c, 0x10, 0xefffffffffffffff, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x2,signature_4_0)


aes64ds_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x7d7d5252527d7d54), rs1:x16(0x0000000000000020), rs2:x1(0xf7ffffffffffffff)
    TEST_RR_OP(aes64ds, x16, x16, x1, 0x7d7d5252527d7d54, 0x20, 0xf7ffffffffffffff, x2, 0, x3)

aes64ds_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x7d7d5252527d7d72), rs1:x15(0x0000000000000040), rs2:x31(0xfbffffffffffffff)
    TEST_RR_OP(aes64ds, x17, x15, x31, 0x7d7d5252527d7d72, 0x40, 0xfbffffffffffffff, x2, 8, x3)

aes64ds_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x7d7d5252527d7d3a), rs1:x14(0x0000000000000080), rs2:x30(0xfdffffffffffffff)
    TEST_RR_OP(aes64ds, x18, x14, x30, 0x7d7d5252527d7d3a, 0x80, 0xfdffffffffffffff, x2, 16, x3)

aes64ds_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x7d7d0952527d7d52), rs1:x13(0x0000000000000100), rs2:x29(0xfeffffffffffffff)
    TEST_RR_OP(aes64ds, x19, x13, x29, 0x7d7d0952527d7d52, 0x100, 0xfeffffffffffffff, x2, 24, x3)

aes64ds_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x7d6b6a52527d7d52), rs1:x12(0x0000000000000200), rs2:x28(0xff7fffffffffffff)
    TEST_RR_OP(aes64ds, x20, x12, x28, 0x7d6b6a52527d7d52, 0x200, 0xff7fffffffffffff, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_5_0)


aes64ds_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x7df43052527d7d52), rs1:x11(0x0000000000000400), rs2:x27(0xffbfffffffffffff)
    TEST_RR_OP(aes64ds, x21, x11, x27, 0x7df43052527d7d52, 0x400, 0xffbfffffffffffff, x1, 0, x2)

aes64ds_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x7defbf52527d7d52), rs1:x10(0x0000000000000800), rs2:x26(0xffdfffffffffffff)
    TEST_RR_OP(aes64ds, x22, x10, x26, 0x7defbf52527d7d52, 0x800, 0xffdfffffffffffff, x1, 8, x2)

aes64ds_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x7d617c52527d7d52), rs1:x9(0x0000000000001000), rs2:x25(0xffefffffffffffff)
    TEST_RR_OP(aes64ds, x23, x9, x25, 0x7d617c52527d7d52, 0x1000, 0xffefffffffffffff, x1, 16, x2)

aes64ds_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x7d265452527d7d52), rs1:x8(0x0000000000002000), rs2:x24(0xfff7ffffffffffff)
    TEST_RR_OP(aes64ds, x24, x8, x24, 0x7d265452527d7d52, 0x2000, 0xfff7ffffffffffff, x1, 24, x2)

aes64ds_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x7d637252527d7d52), rs1:x7(0x0000000000004000), rs2:x23(0xfffbffffffffffff)
    TEST_RR_OP(aes64ds, x25, x7, x23, 0x7d637252527d7d52, 0x4000, 0xfffbffffffffffff, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_6_0)


aes64ds_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x7d213a52527d7d52), rs1:x6(0x0000000000008000), rs2:x22(0xfffdffffffffffff)
    TEST_RR_OP(aes64ds, x26, x6, x22, 0x7d213a52527d7d52, 0x8000, 0xfffdffffffffffff, x1, 0, x7)

aes64ds_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x7d0c5252527d7d52), rs1:x5(0x0000000000010000), rs2:x21(0xfffeffffffffffff)
    TEST_RR_OP(aes64ds, x27, x5, x21, 0x7d0c5252527d7d52, 0x10000, 0xfffeffffffffffff, x1, 8, x7)

aes64ds_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x7d7d5252527d6b52), rs1:x4(0x0000000000020000), rs2:x20(0xffff7fffffffffff)
    TEST_RR_OP(aes64ds, x28, x4, x20, 0x7d7d5252527d6b52, 0x20000, 0xffff7fffffffffff, x1, 16, x7)

aes64ds_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x7d7d5252527df452), rs1:x3(0x0000000000040000), rs2:x19(0xffffbfffffffffff)
    TEST_RR_OP(aes64ds, x29, x3, x19, 0x7d7d5252527df452, 0x40000, 0xffffbfffffffffff, x1, 24, x7)

aes64ds_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x7d7d5252527def52), rs1:x2(0x0000000000080000), rs2:x18(0xffffdfffffffffff)
    TEST_RR_OP(aes64ds, x30, x2, x18, 0x7d7d5252527def52, 0x80000, 0xffffdfffffffffff, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x5,signature_7_0)


aes64ds_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x7d7d5252527d6152), rs1:x1(0x0000000000100000), rs2:x17(0xffffefffffffffff)
    TEST_RR_OP(aes64ds, x31, x1, x17, 0x7d7d5252527d6152, 0x100000, 0xffffefffffffffff, x5, 0, x6)

aes64ds_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x7d7d5252527d2652), rs1:x31(0x0000000000200000), rs2:x16(0xfffff7ffffffffff)
    TEST_RR_OP(aes64ds, x1, x31, x16, 0x7d7d5252527d2652, 0x200000, 0xfffff7ffffffffff, x5, 8, x6)

aes64ds_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x7d7d5252527d6352), rs1:x30(0x0000000000400000), rs2:x15(0xfffffbffffffffff)
    TEST_RR_OP(aes64ds, x2, x30, x15, 0x7d7d5252527d6352, 0x400000, 0xfffffbffffffffff, x5, 16, x6)

aes64ds_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x7d7d5252527d2152), rs1:x29(0x0000000000800000), rs2:x14(0xfffffdffffffffff)
    TEST_RR_OP(aes64ds, x3, x29, x14, 0x7d7d5252527d2152, 0x800000, 0xfffffdffffffffff, x5, 24, x6)

aes64ds_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x7d7d5252527d0c52), rs1:x28(0x0000000001000000), rs2:x13(0xfffffeffffffffff)
    TEST_RR_OP(aes64ds, x4, x28, x13, 0x7d7d5252527d0c52, 0x1000000, 0xfffffeffffffffff, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_8_0)


aes64ds_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x7d7d5252527d7d52), rs1:x27(0x0000000002000000), rs2:x12(0xffffff7fffffffff)
    TEST_RR_OP(aes64ds, x5, x27, x12, 0x7d7d5252527d7d52, 0x2000000, 0xffffff7fffffffff, x1, 0, x2)

aes64ds_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x7d7d5252527d7d52), rs1:x26(0x0000000004000000), rs2:x11(0xffffffbfffffffff)
    TEST_RR_OP(aes64ds, x6, x26, x11, 0x7d7d5252527d7d52, 0x4000000, 0xffffffbfffffffff, x1, 8, x2)

aes64ds_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x7d7d5252527d7d52), rs1:x25(0x0000000008000000), rs2:x10(0xffffffdfffffffff)
    TEST_RR_OP(aes64ds, x7, x25, x10, 0x7d7d5252527d7d52, 0x8000000, 0xffffffdfffffffff, x1, 16, x2)

aes64ds_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x7d7d5252527d7d52), rs1:x24(0x0000000010000000), rs2:x9(0xffffffefffffffff)
    TEST_RR_OP(aes64ds, x8, x24, x9, 0x7d7d5252527d7d52, 0x10000000, 0xffffffefffffffff, x1, 24, x2)

aes64ds_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x7d7d5252527d7d52), rs1:x23(0x0000000020000000), rs2:x8(0xfffffff7ffffffff)
    TEST_RR_OP(aes64ds, x9, x23, x8, 0x7d7d5252527d7d52, 0x20000000, 0xfffffff7ffffffff, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_9_0)


aes64ds_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x7d7d5252527d7d52), rs1:x22(0x0000000040000000), rs2:x7(0xfffffffbffffffff)
    TEST_RR_OP(aes64ds, x10, x22, x7, 0x7d7d5252527d7d52, 0x40000000, 0xfffffffbffffffff, x1, 0, x2)

aes64ds_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x7d7d5252527d7d52), rs1:x21(0x0000000080000000), rs2:x6(0xfffffffdffffffff)
    TEST_RR_OP(aes64ds, x11, x21, x6, 0x7d7d5252527d7d52, 0x80000000, 0xfffffffdffffffff, x1, 8, x2)

aes64ds_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x7d7d5209527d7d52), rs1:x20(0x0000000100000000), rs2:x5(0xfffffffeffffffff)
    TEST_RR_OP(aes64ds, x12, x20, x5, 0x7d7d5209527d7d52, 0x100000000, 0xfffffffeffffffff, x1, 16, x2)

aes64ds_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x6b7d526a527d7d52), rs1:x19(0x0000000200000000), rs2:x4(0xffffffff7fffffff)
    TEST_RR_OP(aes64ds, x13, x19, x4, 0x6b7d526a527d7d52, 0x200000000, 0xffffffff7fffffff, x1, 24, x2)

aes64ds_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0xf47d5230527d7d52), rs1:x18(0x0000000400000000), rs2:x3(0xffffffffbfffffff)
    TEST_RR_OP(aes64ds, x14, x18, x3, 0xf47d5230527d7d52, 0x400000000, 0xffffffffbfffffff, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x3,signature_10_0)


aes64ds_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0xef7d52bf527d7d52), rs1:x17(0x0000000800000000), rs2:x2(0xffffffffdfffffff)
    TEST_RR_OP(aes64ds, x15, x17, x2, 0xef7d52bf527d7d52, 0x800000000, 0xffffffffdfffffff, x3, 0, x4)

aes64ds_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x617d527c527d7d52), rs1:x16(0x0000001000000000), rs2:x1(0xffffffffefffffff)
    TEST_RR_OP(aes64ds, x16, x16, x1, 0x617d527c527d7d52, 0x1000000000, 0xffffffffefffffff, x3, 8, x4)

aes64ds_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x267d5254527d7d52), rs1:x15(0x0000002000000000), rs2:x31(0xfffffffff7ffffff)
    TEST_RR_OP(aes64ds, x17, x15, x31, 0x267d5254527d7d52, 0x2000000000, 0xfffffffff7ffffff, x3, 16, x4)

aes64ds_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x637d5272527d7d52), rs1:x14(0x0000004000000000), rs2:x30(0xfffffffffbffffff)
    TEST_RR_OP(aes64ds, x18, x14, x30, 0x637d5272527d7d52, 0x4000000000, 0xfffffffffbffffff, x3, 24, x4)

aes64ds_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x217d523a527d7d52), rs1:x13(0x0000008000000000), rs2:x29(0xfffffffffdffffff)
    TEST_RR_OP(aes64ds, x19, x13, x29, 0x217d523a527d7d52, 0x8000000000, 0xfffffffffdffffff, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_11_0)


aes64ds_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0c7d5252527d7d52), rs1:x12(0x0000010000000000), rs2:x28(0xfffffffffeffffff)
    TEST_RR_OP(aes64ds, x20, x12, x28, 0x0c7d5252527d7d52, 0x10000000000, 0xfffffffffeffffff, x1, 0, x2)

aes64ds_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x7d7d5252526b7d52), rs1:x11(0x0000020000000000), rs2:x27(0xffffffffff7fffff)
    TEST_RR_OP(aes64ds, x21, x11, x27, 0x7d7d5252526b7d52, 0x20000000000, 0xffffffffff7fffff, x1, 8, x2)

aes64ds_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x7d7d525252f47d52), rs1:x10(0x0000040000000000), rs2:x26(0xffffffffffbfffff)
    TEST_RR_OP(aes64ds, x22, x10, x26, 0x7d7d525252f47d52, 0x40000000000, 0xffffffffffbfffff, x1, 16, x2)

aes64ds_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x7d7d525252ef7d52), rs1:x9(0x0000080000000000), rs2:x25(0xffffffffffdfffff)
    TEST_RR_OP(aes64ds, x23, x9, x25, 0x7d7d525252ef7d52, 0x80000000000, 0xffffffffffdfffff, x1, 24, x2)

aes64ds_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x7d7d525252617d52), rs1:x8(0x0000100000000000), rs2:x24(0xffffffffffefffff)
    TEST_RR_OP(aes64ds, x24, x8, x24, 0x7d7d525252617d52, 0x100000000000, 0xffffffffffefffff, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_12_0)


aes64ds_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x7d7d525252267d52), rs1:x7(0x0000200000000000), rs2:x23(0xfffffffffff7ffff)
    TEST_RR_OP(aes64ds, x25, x7, x23, 0x7d7d525252267d52, 0x200000000000, 0xfffffffffff7ffff, x1, 0, x2)

aes64ds_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x7d7d525252637d52), rs1:x6(0x0000400000000000), rs2:x22(0xfffffffffffbffff)
    TEST_RR_OP(aes64ds, x26, x6, x22, 0x7d7d525252637d52, 0x400000000000, 0xfffffffffffbffff, x1, 8, x2)

aes64ds_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x7d7d525252217d52), rs1:x5(0x0000800000000000), rs2:x21(0xfffffffffffdffff)
    TEST_RR_OP(aes64ds, x27, x5, x21, 0x7d7d525252217d52, 0x800000000000, 0xfffffffffffdffff, x1, 16, x2)

aes64ds_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x7d7d5252520c7d52), rs1:x4(0x0001000000000000), rs2:x20(0xfffffffffffeffff)
    TEST_RR_OP(aes64ds, x28, x4, x20, 0x7d7d5252520c7d52, 0x1000000000000, 0xfffffffffffeffff, x1, 24, x2)

aes64ds_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x7d7d5252527d7d52), rs1:x3(0x0002000000000000), rs2:x19(0xffffffffffff7fff)
    TEST_RR_OP(aes64ds, x29, x3, x19, 0x7d7d5252527d7d52, 0x2000000000000, 0xffffffffffff7fff, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x4,signature_13_0)


aes64ds_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x7d7d5252527d7d52), rs1:x2(0x0004000000000000), rs2:x18(0xffffffffffffbfff)
    TEST_RR_OP(aes64ds, x30, x2, x18, 0x7d7d5252527d7d52, 0x4000000000000, 0xffffffffffffbfff, x4, 0, x5)

aes64ds_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x7d7d5252527d7d52), rs1:x1(0x0008000000000000), rs2:x17(0xffffffffffffdfff)
    TEST_RR_OP(aes64ds, x31, x1, x17, 0x7d7d5252527d7d52, 0x8000000000000, 0xffffffffffffdfff, x4, 8, x5)

aes64ds_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x7d7d5252527d7d52), rs1:x31(0x0010000000000000), rs2:x16(0xffffffffffffefff)
    TEST_RR_OP(aes64ds, x1, x31, x16, 0x7d7d5252527d7d52, 0x10000000000000, 0xffffffffffffefff, x4, 16, x5)

aes64ds_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x7d7d5252527d7d52), rs1:x30(0x0020000000000000), rs2:x15(0xfffffffffffff7ff)
    TEST_RR_OP(aes64ds, x2, x30, x15, 0x7d7d5252527d7d52, 0x20000000000000, 0xfffffffffffff7ff, x4, 24, x5)

aes64ds_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x7d7d5252527d7d52), rs1:x29(0x0040000000000000), rs2:x14(0xfffffffffffffbff)
    TEST_RR_OP(aes64ds, x3, x29, x14, 0x7d7d5252527d7d52, 0x40000000000000, 0xfffffffffffffbff, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_14_0)


aes64ds_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x7d7d5252527d7d52), rs1:x28(0x0080000000000000), rs2:x13(0xfffffffffffffdff)
    TEST_RR_OP(aes64ds, x4, x28, x13, 0x7d7d5252527d7d52, 0x80000000000000, 0xfffffffffffffdff, x1, 0, x2)

aes64ds_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x7d7d5252097d7d52), rs1:x27(0x0100000000000000), rs2:x12(0xfffffffffffffeff)
    TEST_RR_OP(aes64ds, x5, x27, x12, 0x7d7d5252097d7d52, 0x100000000000000, 0xfffffffffffffeff, x1, 8, x2)

aes64ds_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x7d7d52526a7d7d52), rs1:x26(0x0200000000000000), rs2:x11(0xffffffffffffff7f)
    TEST_RR_OP(aes64ds, x6, x26, x11, 0x7d7d52526a7d7d52, 0x200000000000000, 0xffffffffffffff7f, x1, 16, x2)

aes64ds_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x7d7d5252307d7d52), rs1:x25(0x0400000000000000), rs2:x10(0xffffffffffffffbf)
    TEST_RR_OP(aes64ds, x7, x25, x10, 0x7d7d5252307d7d52, 0x400000000000000, 0xffffffffffffffbf, x1, 24, x2)

aes64ds_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x7d7d5252bf7d7d52), rs1:x24(0x0800000000000000), rs2:x9(0xffffffffffffffdf)
    TEST_RR_OP(aes64ds, x8, x24, x9, 0x7d7d5252bf7d7d52, 0x800000000000000, 0xffffffffffffffdf, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_15_0)


aes64ds_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x7d7d52527c7d7d52), rs1:x23(0x1000000000000000), rs2:x8(0xffffffffffffffef)
    TEST_RR_OP(aes64ds, x9, x23, x8, 0x7d7d52527c7d7d52, 0x1000000000000000, 0xffffffffffffffef, x1, 0, x2)

aes64ds_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x7d7d5252547d7d52), rs1:x22(0x2000000000000000), rs2:x7(0xfffffffffffffff7)
    TEST_RR_OP(aes64ds, x10, x22, x7, 0x7d7d5252547d7d52, 0x2000000000000000, 0xfffffffffffffff7, x1, 8, x2)

aes64ds_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x7d7d5252727d7d52), rs1:x21(0x4000000000000000), rs2:x6(0xfffffffffffffffb)
    TEST_RR_OP(aes64ds, x11, x21, x6, 0x7d7d5252727d7d52, 0x4000000000000000, 0xfffffffffffffffb, x1, 16, x2)

aes64ds_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x7d7d52523a7d7d52), rs1:x20(0x8000000000000000), rs2:x5(0xfffffffffffffffd)
    TEST_RR_OP(aes64ds, x12, x20, x5, 0x7d7d52523a7d7d52, 0x8000000000000000, 0xfffffffffffffffd, x1, 24, x2)

aes64ds_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x7d7d5252527d7d52), rs1:x19(0x0000000000000000), rs2:x4(0xfffffffffffffffe)
    TEST_RR_OP(aes64ds, x13, x19, x4, 0x7d7d5252527d7d52, 0x0, 0xfffffffffffffffe, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x4,signature_16_0)


aes64ds_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0x52527d7d7d52520c), rs1:x18(0xfffffffffffffffe), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64ds, x14, x18, x3, 0x52527d7d7d52520c, 0xfffffffffffffffe, 0x0, x4, 0, x5)

aes64ds_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0x52527d7d7d525221), rs1:x17(0xfffffffffffffffd), rs2:x2(0x8000000000000000)
    TEST_RR_OP(aes64ds, x15, x17, x2, 0x52527d7d7d525221, 0xfffffffffffffffd, 0x8000000000000000, x4, 8, x5)

aes64ds_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0x52527d7d7d525263), rs1:x16(0xfffffffffffffffb), rs2:x1(0x4000000000000000)
    TEST_RR_OP(aes64ds, x16, x16, x1, 0x52527d7d7d525263, 0xfffffffffffffffb, 0x4000000000000000, x4, 16, x5)

aes64ds_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0x52527d7d7d525226), rs1:x15(0xfffffffffffffff7), rs2:x31(0x2000000000000000)
    TEST_RR_OP(aes64ds, x17, x15, x31, 0x52527d7d7d525226, 0xfffffffffffffff7, 0x2000000000000000, x4, 24, x5)

aes64ds_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0x52527d7d7d525261), rs1:x14(0xffffffffffffffef), rs2:x30(0x1000000000000000)
    TEST_RR_OP(aes64ds, x18, x14, x30, 0x52527d7d7d525261, 0xffffffffffffffef, 0x1000000000000000, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_17_0)


aes64ds_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0x52527d7d7d5252ef), rs1:x13(0xffffffffffffffdf), rs2:x29(0x0800000000000000)
    TEST_RR_OP(aes64ds, x19, x13, x29, 0x52527d7d7d5252ef, 0xffffffffffffffdf, 0x800000000000000, x1, 0, x2)

aes64ds_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0x52527d7d7d5252f4), rs1:x12(0xffffffffffffffbf), rs2:x28(0x0400000000000000)
    TEST_RR_OP(aes64ds, x20, x12, x28, 0x52527d7d7d5252f4, 0xffffffffffffffbf, 0x400000000000000, x1, 8, x2)

aes64ds_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0x52527d7d7d52526b), rs1:x11(0xffffffffffffff7f), rs2:x27(0x0200000000000000)
    TEST_RR_OP(aes64ds, x21, x11, x27, 0x52527d7d7d52526b, 0xffffffffffffff7f, 0x200000000000000, x1, 16, x2)

aes64ds_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0x52520c7d7d52527d), rs1:x10(0xfffffffffffffeff), rs2:x26(0x0100000000000000)
    TEST_RR_OP(aes64ds, x22, x10, x26, 0x52520c7d7d52527d, 0xfffffffffffffeff, 0x100000000000000, x1, 24, x2)

aes64ds_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0x523a217d7d52527d), rs1:x9(0xfffffffffffffdff), rs2:x25(0x0080000000000000)
    TEST_RR_OP(aes64ds, x23, x9, x25, 0x523a217d7d52527d, 0xfffffffffffffdff, 0x80000000000000, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_18_0)


aes64ds_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0x5272637d7d52527d), rs1:x8(0xfffffffffffffbff), rs2:x24(0x0040000000000000)
    TEST_RR_OP(aes64ds, x24, x8, x24, 0x5272637d7d52527d, 0xfffffffffffffbff, 0x40000000000000, x1, 0, x2)

aes64ds_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0x5254267d7d52527d), rs1:x7(0xfffffffffffff7ff), rs2:x23(0x0020000000000000)
    TEST_RR_OP(aes64ds, x25, x7, x23, 0x5254267d7d52527d, 0xfffffffffffff7ff, 0x20000000000000, x1, 8, x2)

aes64ds_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0x527c617d7d52527d), rs1:x6(0xffffffffffffefff), rs2:x22(0x0010000000000000)
    TEST_RR_OP(aes64ds, x26, x6, x22, 0x527c617d7d52527d, 0xffffffffffffefff, 0x10000000000000, x1, 16, x2)

aes64ds_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0x52bfef7d7d52527d), rs1:x5(0xffffffffffffdfff), rs2:x21(0x0008000000000000)
    TEST_RR_OP(aes64ds, x27, x5, x21, 0x52bfef7d7d52527d, 0xffffffffffffdfff, 0x8000000000000, x1, 24, x2)

aes64ds_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0x5230f47d7d52527d), rs1:x4(0xffffffffffffbfff), rs2:x20(0x0004000000000000)
    TEST_RR_OP(aes64ds, x28, x4, x20, 0x5230f47d7d52527d, 0xffffffffffffbfff, 0x4000000000000, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x4,signature_19_0)


aes64ds_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0x526a6b7d7d52527d), rs1:x3(0xffffffffffff7fff), rs2:x19(0x0002000000000000)
    TEST_RR_OP(aes64ds, x29, x3, x19, 0x526a6b7d7d52527d, 0xffffffffffff7fff, 0x2000000000000, x4, 0, x5)

aes64ds_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0x52097d7d7d52527d), rs1:x2(0xfffffffffffeffff), rs2:x18(0x0001000000000000)
    TEST_RR_OP(aes64ds, x30, x2, x18, 0x52097d7d7d52527d, 0xfffffffffffeffff, 0x1000000000000, x4, 8, x5)

aes64ds_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0x52527d7d7d523a7d), rs1:x1(0xfffffffffffdffff), rs2:x17(0x0000800000000000)
    TEST_RR_OP(aes64ds, x31, x1, x17, 0x52527d7d7d523a7d, 0xfffffffffffdffff, 0x800000000000, x4, 16, x5)

aes64ds_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0x52527d7d7d52727d), rs1:x31(0xfffffffffffbffff), rs2:x16(0x0000400000000000)
    TEST_RR_OP(aes64ds, x1, x31, x16, 0x52527d7d7d52727d, 0xfffffffffffbffff, 0x400000000000, x4, 24, x5)

aes64ds_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0x52527d7d7d52547d), rs1:x30(0xfffffffffff7ffff), rs2:x15(0x0000200000000000)
    TEST_RR_OP(aes64ds, x2, x30, x15, 0x52527d7d7d52547d, 0xfffffffffff7ffff, 0x200000000000, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_20_0)


aes64ds_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0x52527d7d7d527c7d), rs1:x29(0xffffffffffefffff), rs2:x14(0x0000100000000000)
    TEST_RR_OP(aes64ds, x3, x29, x14, 0x52527d7d7d527c7d, 0xffffffffffefffff, 0x100000000000, x1, 0, x2)

aes64ds_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0x52527d7d7d52bf7d), rs1:x28(0xffffffffffdfffff), rs2:x13(0x0000080000000000)
    TEST_RR_OP(aes64ds, x4, x28, x13, 0x52527d7d7d52bf7d, 0xffffffffffdfffff, 0x80000000000, x1, 8, x2)

aes64ds_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0x52527d7d7d52307d), rs1:x27(0xffffffffffbfffff), rs2:x12(0x0000040000000000)
    TEST_RR_OP(aes64ds, x5, x27, x12, 0x52527d7d7d52307d, 0xffffffffffbfffff, 0x40000000000, x1, 16, x2)

aes64ds_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0x52527d7d7d526a7d), rs1:x26(0xffffffffff7fffff), rs2:x11(0x0000020000000000)
    TEST_RR_OP(aes64ds, x6, x26, x11, 0x52527d7d7d526a7d, 0xffffffffff7fffff, 0x20000000000, x1, 24, x2)

aes64ds_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0x52527d7d7d52097d), rs1:x25(0xfffffffffeffffff), rs2:x10(0x0000010000000000)
    TEST_RR_OP(aes64ds, x7, x25, x10, 0x52527d7d7d52097d, 0xfffffffffeffffff, 0x10000000000, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_21_0)


aes64ds_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0x52527d7d7d52527d), rs1:x24(0xfffffffffdffffff), rs2:x9(0x0000008000000000)
    TEST_RR_OP(aes64ds, x8, x24, x9, 0x52527d7d7d52527d, 0xfffffffffdffffff, 0x8000000000, x1, 0, x2)

aes64ds_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0x52527d7d7d52527d), rs1:x23(0xfffffffffbffffff), rs2:x8(0x0000004000000000)
    TEST_RR_OP(aes64ds, x9, x23, x8, 0x52527d7d7d52527d, 0xfffffffffbffffff, 0x4000000000, x1, 8, x2)

aes64ds_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0x52527d7d7d52527d), rs1:x22(0xfffffffff7ffffff), rs2:x7(0x0000002000000000)
    TEST_RR_OP(aes64ds, x10, x22, x7, 0x52527d7d7d52527d, 0xfffffffff7ffffff, 0x2000000000, x1, 16, x2)

aes64ds_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0x52527d7d7d52527d), rs1:x21(0xffffffffefffffff), rs2:x6(0x0000001000000000)
    TEST_RR_OP(aes64ds, x11, x21, x6, 0x52527d7d7d52527d, 0xffffffffefffffff, 0x1000000000, x1, 24, x2)

aes64ds_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0x52527d7d7d52527d), rs1:x20(0xffffffffdfffffff), rs2:x5(0x0000000800000000)
    TEST_RR_OP(aes64ds, x12, x20, x5, 0x52527d7d7d52527d, 0xffffffffdfffffff, 0x800000000, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x5,signature_22_0)


aes64ds_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0x52527d7d7d52527d), rs1:x19(0xffffffffbfffffff), rs2:x4(0x0000000400000000)
    TEST_RR_OP(aes64ds, x13, x19, x4, 0x52527d7d7d52527d, 0xffffffffbfffffff, 0x400000000, x5, 0, x6)

aes64ds_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0x52527d7d7d52527d), rs1:x18(0xffffffff7fffffff), rs2:x3(0x0000000200000000)
    TEST_RR_OP(aes64ds, x14, x18, x3, 0x52527d7d7d52527d, 0xffffffff7fffffff, 0x200000000, x5, 8, x6)

aes64ds_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0x52527d0c7d52527d), rs1:x17(0xfffffffeffffffff), rs2:x2(0x0000000100000000)
    TEST_RR_OP(aes64ds, x15, x17, x2, 0x52527d0c7d52527d, 0xfffffffeffffffff, 0x100000000, x5, 16, x6)

aes64ds_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0x3a527d217d52527d), rs1:x16(0xfffffffdffffffff), rs2:x1(0x0000000080000000)
    TEST_RR_OP(aes64ds, x16, x16, x1, 0x3a527d217d52527d, 0xfffffffdffffffff, 0x80000000, x5, 24, x6)

aes64ds_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0x72527d637d52527d), rs1:x15(0xfffffffbffffffff), rs2:x31(0x0000000040000000)
    TEST_RR_OP(aes64ds, x17, x15, x31, 0x72527d637d52527d, 0xfffffffbffffffff, 0x40000000, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_23_0)


aes64ds_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0x54527d267d52527d), rs1:x14(0xfffffff7ffffffff), rs2:x30(0x0000000020000000)
    TEST_RR_OP(aes64ds, x18, x14, x30, 0x54527d267d52527d, 0xfffffff7ffffffff, 0x20000000, x1, 0, x2)

aes64ds_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0x7c527d617d52527d), rs1:x13(0xffffffefffffffff), rs2:x29(0x0000000010000000)
    TEST_RR_OP(aes64ds, x19, x13, x29, 0x7c527d617d52527d, 0xffffffefffffffff, 0x10000000, x1, 8, x2)

aes64ds_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0xbf527def7d52527d), rs1:x12(0xffffffdfffffffff), rs2:x28(0x0000000008000000)
    TEST_RR_OP(aes64ds, x20, x12, x28, 0xbf527def7d52527d, 0xffffffdfffffffff, 0x8000000, x1, 16, x2)

aes64ds_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0x30527df47d52527d), rs1:x11(0xffffffbfffffffff), rs2:x27(0x0000000004000000)
    TEST_RR_OP(aes64ds, x21, x11, x27, 0x30527df47d52527d, 0xffffffbfffffffff, 0x4000000, x1, 24, x2)

aes64ds_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0x6a527d6b7d52527d), rs1:x10(0xffffff7fffffffff), rs2:x26(0x0000000002000000)
    TEST_RR_OP(aes64ds, x22, x10, x26, 0x6a527d6b7d52527d, 0xffffff7fffffffff, 0x2000000, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_24_0)


aes64ds_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0x09527d7d7d52527d), rs1:x9(0xfffffeffffffffff), rs2:x25(0x0000000001000000)
    TEST_RR_OP(aes64ds, x23, x9, x25, 0x09527d7d7d52527d, 0xfffffeffffffffff, 0x1000000, x1, 0, x2)

aes64ds_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0x52527d7d7d3a527d), rs1:x8(0xfffffdffffffffff), rs2:x24(0x0000000000800000)
    TEST_RR_OP(aes64ds, x24, x8, x24, 0x52527d7d7d3a527d, 0xfffffdffffffffff, 0x800000, x1, 8, x2)

aes64ds_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0x52527d7d7d72527d), rs1:x7(0xfffffbffffffffff), rs2:x23(0x0000000000400000)
    TEST_RR_OP(aes64ds, x25, x7, x23, 0x52527d7d7d72527d, 0xfffffbffffffffff, 0x400000, x1, 16, x2)

aes64ds_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0x52527d7d7d54527d), rs1:x6(0xfffff7ffffffffff), rs2:x22(0x0000000000200000)
    TEST_RR_OP(aes64ds, x26, x6, x22, 0x52527d7d7d54527d, 0xfffff7ffffffffff, 0x200000, x1, 24, x2)

aes64ds_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0x52527d7d7d7c527d), rs1:x5(0xffffefffffffffff), rs2:x21(0x0000000000100000)
    TEST_RR_OP(aes64ds, x27, x5, x21, 0x52527d7d7d7c527d, 0xffffefffffffffff, 0x100000, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x5,signature_25_0)


aes64ds_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0x52527d7d7dbf527d), rs1:x4(0xffffdfffffffffff), rs2:x20(0x0000000000080000)
    TEST_RR_OP(aes64ds, x28, x4, x20, 0x52527d7d7dbf527d, 0xffffdfffffffffff, 0x80000, x5, 0, x6)

aes64ds_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0x52527d7d7d30527d), rs1:x3(0xffffbfffffffffff), rs2:x19(0x0000000000040000)
    TEST_RR_OP(aes64ds, x29, x3, x19, 0x52527d7d7d30527d, 0xffffbfffffffffff, 0x40000, x5, 8, x6)

aes64ds_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0x52527d7d7d6a527d), rs1:x2(0xffff7fffffffffff), rs2:x18(0x0000000000020000)
    TEST_RR_OP(aes64ds, x30, x2, x18, 0x52527d7d7d6a527d, 0xffff7fffffffffff, 0x20000, x5, 16, x6)

aes64ds_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0x52527d7d7d09527d), rs1:x1(0xfffeffffffffffff), rs2:x17(0x0000000000010000)
    TEST_RR_OP(aes64ds, x31, x1, x17, 0x52527d7d7d09527d, 0xfffeffffffffffff, 0x10000, x5, 24, x6)

aes64ds_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0x52527d7d7d52527d), rs1:x31(0xfffdffffffffffff), rs2:x16(0x0000000000008000)
    TEST_RR_OP(aes64ds, x1, x31, x16, 0x52527d7d7d52527d, 0xfffdffffffffffff, 0x8000, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_26_0)


aes64ds_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0x52527d7d7d52527d), rs1:x30(0xfffbffffffffffff), rs2:x15(0x0000000000004000)
    TEST_RR_OP(aes64ds, x2, x30, x15, 0x52527d7d7d52527d, 0xfffbffffffffffff, 0x4000, x1, 0, x7)

aes64ds_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0x52527d7d7d52527d), rs1:x29(0xfff7ffffffffffff), rs2:x14(0x0000000000002000)
    TEST_RR_OP(aes64ds, x3, x29, x14, 0x52527d7d7d52527d, 0xfff7ffffffffffff, 0x2000, x1, 8, x7)

aes64ds_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0x52527d7d7d52527d), rs1:x28(0xffefffffffffffff), rs2:x13(0x0000000000001000)
    TEST_RR_OP(aes64ds, x4, x28, x13, 0x52527d7d7d52527d, 0xffefffffffffffff, 0x1000, x1, 16, x7)

aes64ds_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0x52527d7d7d52527d), rs1:x27(0xffdfffffffffffff), rs2:x12(0x0000000000000800)
    TEST_RR_OP(aes64ds, x5, x27, x12, 0x52527d7d7d52527d, 0xffdfffffffffffff, 0x800, x1, 24, x7)

aes64ds_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0x52527d7d7d52527d), rs1:x26(0xffbfffffffffffff), rs2:x11(0x0000000000000400)
    TEST_RR_OP(aes64ds, x6, x26, x11, 0x52527d7d7d52527d, 0xffbfffffffffffff, 0x400, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_27_0)


aes64ds_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0x52527d7d7d52527d), rs1:x25(0xff7fffffffffffff), rs2:x10(0x0000000000000200)
    TEST_RR_OP(aes64ds, x7, x25, x10, 0x52527d7d7d52527d, 0xff7fffffffffffff, 0x200, x1, 0, x2)

aes64ds_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0x52527d7d0c52527d), rs1:x24(0xfeffffffffffffff), rs2:x9(0x0000000000000100)
    TEST_RR_OP(aes64ds, x8, x24, x9, 0x52527d7d0c52527d, 0xfeffffffffffffff, 0x100, x1, 8, x2)

aes64ds_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0x52527d7d2152527d), rs1:x23(0xfdffffffffffffff), rs2:x8(0x0000000000000080)
    TEST_RR_OP(aes64ds, x9, x23, x8, 0x52527d7d2152527d, 0xfdffffffffffffff, 0x80, x1, 16, x2)

aes64ds_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0x52527d7d6352527d), rs1:x22(0xfbffffffffffffff), rs2:x7(0x0000000000000040)
    TEST_RR_OP(aes64ds, x10, x22, x7, 0x52527d7d6352527d, 0xfbffffffffffffff, 0x40, x1, 24, x2)

aes64ds_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0x52527d7d2652527d), rs1:x21(0xf7ffffffffffffff), rs2:x6(0x0000000000000020)
    TEST_RR_OP(aes64ds, x11, x21, x6, 0x52527d7d2652527d, 0xf7ffffffffffffff, 0x20, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x6,signature_28_0)


aes64ds_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0x52527d7d6152527d), rs1:x20(0xefffffffffffffff), rs2:x5(0x0000000000000010)
    TEST_RR_OP(aes64ds, x12, x20, x5, 0x52527d7d6152527d, 0xefffffffffffffff, 0x10, x6, 0, x7)

aes64ds_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0x52527d7def52527d), rs1:x19(0xdfffffffffffffff), rs2:x4(0x0000000000000008)
    TEST_RR_OP(aes64ds, x13, x19, x4, 0x52527d7def52527d, 0xdfffffffffffffff, 0x8, x6, 8, x7)

aes64ds_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0x52527d7df452527d), rs1:x18(0xbfffffffffffffff), rs2:x3(0x0000000000000004)
    TEST_RR_OP(aes64ds, x14, x18, x3, 0x52527d7df452527d, 0xbfffffffffffffff, 0x4, x6, 16, x7)

aes64ds_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0x52527d7d6b52527d), rs1:x17(0x7fffffffffffffff), rs2:x2(0x0000000000000002)
    TEST_RR_OP(aes64ds, x15, x17, x2, 0x52527d7d6b52527d, 0x7fffffffffffffff, 0x2, x6, 24, x7)

aes64ds_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0x52527d7d7d52527d), rs1:x16(0xffffffffffffffff), rs2:x1(0x0000000000000001)
    TEST_RR_OP(aes64ds, x16, x16, x1, 0x52527d7d7d52527d, 0xffffffffffffffff, 0x1, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_29_0)


aes64ds_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x5252525252525209), rs1:x15(0x0000000000000001), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64ds, x17, x15, x31, 0x5252525252525209, 0x1, 0x0, x1, 0, x2)

aes64ds_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x525252525252526a), rs1:x14(0x0000000000000002), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64ds, x18, x14, x30, 0x525252525252526a, 0x2, 0x0, x1, 8, x2)

aes64ds_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x5252525252525230), rs1:x13(0x0000000000000004), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64ds, x19, x13, x29, 0x5252525252525230, 0x4, 0x0, x1, 16, x2)

aes64ds_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x52525252525252bf), rs1:x12(0x0000000000000008), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64ds, x20, x12, x28, 0x52525252525252bf, 0x8, 0x0, x1, 24, x2)

aes64ds_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x525252525252527c), rs1:x11(0x0000000000000010), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64ds, x21, x11, x27, 0x525252525252527c, 0x10, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_30_0)


aes64ds_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x5252525252525254), rs1:x10(0x0000000000000020), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64ds, x22, x10, x26, 0x5252525252525254, 0x20, 0x0, x1, 0, x2)

aes64ds_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x5252525252525272), rs1:x9(0x0000000000000040), rs2:x25(0x0000000000000000)
    TEST_RR_OP(aes64ds, x23, x9, x25, 0x5252525252525272, 0x40, 0x0, x1, 8, x2)

aes64ds_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x525252525252523a), rs1:x8(0x0000000000000080), rs2:x24(0x0000000000000000)
    TEST_RR_OP(aes64ds, x24, x8, x24, 0x525252525252523a, 0x80, 0x0, x1, 16, x2)

aes64ds_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x5252095252525252), rs1:x7(0x0000000000000100), rs2:x23(0x0000000000000000)
    TEST_RR_OP(aes64ds, x25, x7, x23, 0x5252095252525252, 0x100, 0x0, x1, 24, x2)

aes64ds_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x52526a5252525252), rs1:x6(0x0000000000000200), rs2:x22(0x0000000000000000)
    TEST_RR_OP(aes64ds, x26, x6, x22, 0x52526a5252525252, 0x200, 0x0, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x6,signature_31_0)


aes64ds_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x5252305252525252), rs1:x5(0x0000000000000400), rs2:x21(0x0000000000000000)
    TEST_RR_OP(aes64ds, x27, x5, x21, 0x5252305252525252, 0x400, 0x0, x6, 0, x7)

aes64ds_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x5252bf5252525252), rs1:x4(0x0000000000000800), rs2:x20(0x0000000000000000)
    TEST_RR_OP(aes64ds, x28, x4, x20, 0x5252bf5252525252, 0x800, 0x0, x6, 8, x7)

aes64ds_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x52527c5252525252), rs1:x3(0x0000000000001000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(aes64ds, x29, x3, x19, 0x52527c5252525252, 0x1000, 0x0, x6, 16, x7)

aes64ds_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x5252545252525252), rs1:x2(0x0000000000002000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(aes64ds, x30, x2, x18, 0x5252545252525252, 0x2000, 0x0, x6, 24, x7)

aes64ds_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x5252725252525252), rs1:x1(0x0000000000004000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(aes64ds, x31, x1, x17, 0x5252725252525252, 0x4000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x6,signature_32_0)


aes64ds_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x52523a5252525252), rs1:x31(0x0000000000008000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(aes64ds, x1, x31, x16, 0x52523a5252525252, 0x8000, 0x0, x6, 0, x7)

aes64ds_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x5252525252525252), rs1:x30(0x0000000000010000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(aes64ds, x2, x30, x15, 0x5252525252525252, 0x10000, 0x0, x6, 8, x7)

aes64ds_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x5252525252525252), rs1:x29(0x0000000000020000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(aes64ds, x3, x29, x14, 0x5252525252525252, 0x20000, 0x0, x6, 16, x7)

aes64ds_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x5252525252525252), rs1:x28(0x0000000000040000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(aes64ds, x4, x28, x13, 0x5252525252525252, 0x40000, 0x0, x6, 24, x7)

aes64ds_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x5252525252525252), rs1:x27(0x0000000000080000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(aes64ds, x5, x27, x12, 0x5252525252525252, 0x80000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_33_0)


aes64ds_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x5252525252525252), rs1:x26(0x0000000000100000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(aes64ds, x6, x26, x11, 0x5252525252525252, 0x100000, 0x0, x1, 0, x2)

aes64ds_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x5252525252525252), rs1:x25(0x0000000000200000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(aes64ds, x7, x25, x10, 0x5252525252525252, 0x200000, 0x0, x1, 8, x2)

aes64ds_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x5252525252525252), rs1:x24(0x0000000000400000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64ds, x8, x24, x9, 0x5252525252525252, 0x400000, 0x0, x1, 16, x2)

aes64ds_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x5252525252525252), rs1:x23(0x0000000000800000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(aes64ds, x9, x23, x8, 0x5252525252525252, 0x800000, 0x0, x1, 24, x2)

aes64ds_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x5252525252525252), rs1:x22(0x0000000001000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(aes64ds, x10, x22, x7, 0x5252525252525252, 0x1000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_34_0)


aes64ds_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x5252525252525252), rs1:x21(0x0000000002000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(aes64ds, x11, x21, x6, 0x5252525252525252, 0x2000000, 0x0, x1, 0, x7)

aes64ds_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x5252525252525252), rs1:x20(0x0000000004000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(aes64ds, x12, x20, x5, 0x5252525252525252, 0x4000000, 0x0, x1, 8, x7)

aes64ds_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x5252525252525252), rs1:x19(0x0000000008000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(aes64ds, x13, x19, x4, 0x5252525252525252, 0x8000000, 0x0, x1, 16, x7)

aes64ds_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x5252525252525252), rs1:x18(0x0000000010000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64ds, x14, x18, x3, 0x5252525252525252, 0x10000000, 0x0, x1, 24, x7)

aes64ds_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x5252525252525252), rs1:x17(0x0000000020000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(aes64ds, x15, x17, x2, 0x5252525252525252, 0x20000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x2,signature_35_0)


aes64ds_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x5252525252525252), rs1:x16(0x0000000040000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(aes64ds, x16, x16, x1, 0x5252525252525252, 0x40000000, 0x0, x2, 0, x3)

aes64ds_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x5252525252525252), rs1:x15(0x0000000080000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64ds, x17, x15, x31, 0x5252525252525252, 0x80000000, 0x0, x2, 8, x3)

aes64ds_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x5252520952525252), rs1:x14(0x0000000100000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64ds, x18, x14, x30, 0x5252520952525252, 0x100000000, 0x0, x2, 16, x3)

aes64ds_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x5252526a52525252), rs1:x13(0x0000000200000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64ds, x19, x13, x29, 0x5252526a52525252, 0x200000000, 0x0, x2, 24, x3)

aes64ds_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x5252523052525252), rs1:x12(0x0000000400000000), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64ds, x20, x12, x28, 0x5252523052525252, 0x400000000, 0x0, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_36_0)


aes64ds_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x525252bf52525252), rs1:x11(0x0000000800000000), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64ds, x21, x11, x27, 0x525252bf52525252, 0x800000000, 0x0, x1, 0, x2)

aes64ds_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x5252527c52525252), rs1:x10(0x0000001000000000), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64ds, x22, x10, x26, 0x5252527c52525252, 0x1000000000, 0x0, x1, 8, x2)

aes64ds_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x5252525452525252), rs1:x9(0x0000002000000000), rs2:x25(0x0000000000000000)
    TEST_RR_OP(aes64ds, x23, x9, x25, 0x5252525452525252, 0x2000000000, 0x0, x1, 16, x2)

aes64ds_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x5252527252525252), rs1:x8(0x0000004000000000), rs2:x24(0x0000000000000000)
    TEST_RR_OP(aes64ds, x24, x8, x24, 0x5252527252525252, 0x4000000000, 0x0, x1, 24, x2)

aes64ds_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x5252523a52525252), rs1:x7(0x0000008000000000), rs2:x23(0x0000000000000000)
    TEST_RR_OP(aes64ds, x25, x7, x23, 0x5252523a52525252, 0x8000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_37_0)


aes64ds_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x5252525252525252), rs1:x6(0x0000010000000000), rs2:x22(0x0000000000000000)
    TEST_RR_OP(aes64ds, x26, x6, x22, 0x5252525252525252, 0x10000000000, 0x0, x1, 0, x7)

aes64ds_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x5252525252525252), rs1:x5(0x0000020000000000), rs2:x21(0x0000000000000000)
    TEST_RR_OP(aes64ds, x27, x5, x21, 0x5252525252525252, 0x20000000000, 0x0, x1, 8, x7)

aes64ds_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x5252525252525252), rs1:x4(0x0000040000000000), rs2:x20(0x0000000000000000)
    TEST_RR_OP(aes64ds, x28, x4, x20, 0x5252525252525252, 0x40000000000, 0x0, x1, 16, x7)

aes64ds_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x5252525252525252), rs1:x3(0x0000080000000000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(aes64ds, x29, x3, x19, 0x5252525252525252, 0x80000000000, 0x0, x1, 24, x7)

aes64ds_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x5252525252525252), rs1:x2(0x0000100000000000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(aes64ds, x30, x2, x18, 0x5252525252525252, 0x100000000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x5,signature_38_0)


aes64ds_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x5252525252525252), rs1:x1(0x0000200000000000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(aes64ds, x31, x1, x17, 0x5252525252525252, 0x200000000000, 0x0, x5, 0, x6)

aes64ds_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x5252525252525252), rs1:x31(0x0000400000000000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(aes64ds, x1, x31, x16, 0x5252525252525252, 0x400000000000, 0x0, x5, 8, x6)

aes64ds_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x5252525252525252), rs1:x30(0x0000800000000000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(aes64ds, x2, x30, x15, 0x5252525252525252, 0x800000000000, 0x0, x5, 16, x6)

aes64ds_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x5252525252525252), rs1:x29(0x0001000000000000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(aes64ds, x3, x29, x14, 0x5252525252525252, 0x1000000000000, 0x0, x5, 24, x6)

aes64ds_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x5252525252525252), rs1:x28(0x0002000000000000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(aes64ds, x4, x28, x13, 0x5252525252525252, 0x2000000000000, 0x0, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_39_0)


aes64ds_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x5252525252525252), rs1:x27(0x0004000000000000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(aes64ds, x5, x27, x12, 0x5252525252525252, 0x4000000000000, 0x0, x1, 0, x2)

aes64ds_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x5252525252525252), rs1:x26(0x0008000000000000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(aes64ds, x6, x26, x11, 0x5252525252525252, 0x8000000000000, 0x0, x1, 8, x2)

aes64ds_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x5252525252525252), rs1:x25(0x0010000000000000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(aes64ds, x7, x25, x10, 0x5252525252525252, 0x10000000000000, 0x0, x1, 16, x2)

aes64ds_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x5252525252525252), rs1:x24(0x0020000000000000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64ds, x8, x24, x9, 0x5252525252525252, 0x20000000000000, 0x0, x1, 24, x2)

aes64ds_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x5252525252525252), rs1:x23(0x0040000000000000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(aes64ds, x9, x23, x8, 0x5252525252525252, 0x40000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_40_0)


aes64ds_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x5252525252525252), rs1:x22(0x0080000000000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(aes64ds, x10, x22, x7, 0x5252525252525252, 0x80000000000000, 0x0, x1, 0, x2)

aes64ds_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x5252525209525252), rs1:x21(0x0100000000000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(aes64ds, x11, x21, x6, 0x5252525209525252, 0x100000000000000, 0x0, x1, 8, x2)

aes64ds_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x525252526a525252), rs1:x20(0x0200000000000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(aes64ds, x12, x20, x5, 0x525252526a525252, 0x200000000000000, 0x0, x1, 16, x2)

aes64ds_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x5252525230525252), rs1:x19(0x0400000000000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(aes64ds, x13, x19, x4, 0x5252525230525252, 0x400000000000000, 0x0, x1, 24, x2)

aes64ds_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x52525252bf525252), rs1:x18(0x0800000000000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64ds, x14, x18, x3, 0x52525252bf525252, 0x800000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x3,signature_41_0)


aes64ds_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x525252527c525252), rs1:x17(0x1000000000000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(aes64ds, x15, x17, x2, 0x525252527c525252, 0x1000000000000000, 0x0, x3, 0, x4)

aes64ds_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x5252525254525252), rs1:x16(0x2000000000000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(aes64ds, x16, x16, x1, 0x5252525254525252, 0x2000000000000000, 0x0, x3, 8, x4)

aes64ds_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x5252525272525252), rs1:x15(0x4000000000000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64ds, x17, x15, x31, 0x5252525272525252, 0x4000000000000000, 0x0, x3, 16, x4)

aes64ds_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x525252523a525252), rs1:x14(0x8000000000000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64ds, x18, x14, x30, 0x525252523a525252, 0x8000000000000000, 0x0, x3, 24, x4)

aes64ds_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x5252525252525252), rs1:x13(0x0000000000000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64ds, x19, x13, x29, 0x5252525252525252, 0x0, 0x0, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_42_0)


aes64ds_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0x52527d7d7d52520c), rs1:x12(0xfffffffffffffffe), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64ds, x20, x12, x28, 0x52527d7d7d52520c, 0xfffffffffffffffe, 0x0, x1, 0, x2)

aes64ds_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0x52527d7d7d525221), rs1:x11(0xfffffffffffffffd), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64ds, x21, x11, x27, 0x52527d7d7d525221, 0xfffffffffffffffd, 0x0, x1, 8, x2)

aes64ds_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0x52527d7d7d525263), rs1:x10(0xfffffffffffffffb), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64ds, x22, x10, x26, 0x52527d7d7d525263, 0xfffffffffffffffb, 0x0, x1, 16, x2)

aes64ds_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0x52527d7d7d525226), rs1:x9(0xfffffffffffffff7), rs2:x25(0x0000000000000000)
    TEST_RR_OP(aes64ds, x23, x9, x25, 0x52527d7d7d525226, 0xfffffffffffffff7, 0x0, x1, 24, x2)

aes64ds_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0x52527d7d7d525261), rs1:x8(0xffffffffffffffef), rs2:x24(0x0000000000000000)
    TEST_RR_OP(aes64ds, x24, x8, x24, 0x52527d7d7d525261, 0xffffffffffffffef, 0x0, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_43_0)


aes64ds_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0x52527d7d7d5252ef), rs1:x7(0xffffffffffffffdf), rs2:x23(0x0000000000000000)
    TEST_RR_OP(aes64ds, x25, x7, x23, 0x52527d7d7d5252ef, 0xffffffffffffffdf, 0x0, x1, 0, x2)

aes64ds_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0x52527d7d7d5252f4), rs1:x6(0xffffffffffffffbf), rs2:x22(0x0000000000000000)
    TEST_RR_OP(aes64ds, x26, x6, x22, 0x52527d7d7d5252f4, 0xffffffffffffffbf, 0x0, x1, 8, x2)

aes64ds_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0x52527d7d7d52526b), rs1:x5(0xffffffffffffff7f), rs2:x21(0x0000000000000000)
    TEST_RR_OP(aes64ds, x27, x5, x21, 0x52527d7d7d52526b, 0xffffffffffffff7f, 0x0, x1, 16, x2)

aes64ds_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0x52520c7d7d52527d), rs1:x4(0xfffffffffffffeff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(aes64ds, x28, x4, x20, 0x52520c7d7d52527d, 0xfffffffffffffeff, 0x0, x1, 24, x2)

aes64ds_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0x5252217d7d52527d), rs1:x3(0xfffffffffffffdff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(aes64ds, x29, x3, x19, 0x5252217d7d52527d, 0xfffffffffffffdff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x4,signature_44_0)


aes64ds_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0x5252637d7d52527d), rs1:x2(0xfffffffffffffbff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(aes64ds, x30, x2, x18, 0x5252637d7d52527d, 0xfffffffffffffbff, 0x0, x4, 0, x5)

aes64ds_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0x5252267d7d52527d), rs1:x1(0xfffffffffffff7ff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(aes64ds, x31, x1, x17, 0x5252267d7d52527d, 0xfffffffffffff7ff, 0x0, x4, 8, x5)

aes64ds_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0x5252617d7d52527d), rs1:x31(0xffffffffffffefff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(aes64ds, x1, x31, x16, 0x5252617d7d52527d, 0xffffffffffffefff, 0x0, x4, 16, x5)

aes64ds_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0x5252ef7d7d52527d), rs1:x30(0xffffffffffffdfff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(aes64ds, x2, x30, x15, 0x5252ef7d7d52527d, 0xffffffffffffdfff, 0x0, x4, 24, x5)

aes64ds_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0x5252f47d7d52527d), rs1:x29(0xffffffffffffbfff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(aes64ds, x3, x29, x14, 0x5252f47d7d52527d, 0xffffffffffffbfff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_45_0)


aes64ds_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0x52526b7d7d52527d), rs1:x28(0xffffffffffff7fff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(aes64ds, x4, x28, x13, 0x52526b7d7d52527d, 0xffffffffffff7fff, 0x0, x1, 0, x2)

aes64ds_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0x52527d7d7d52527d), rs1:x27(0xfffffffffffeffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(aes64ds, x5, x27, x12, 0x52527d7d7d52527d, 0xfffffffffffeffff, 0x0, x1, 8, x2)

aes64ds_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0x52527d7d7d52527d), rs1:x26(0xfffffffffffdffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(aes64ds, x6, x26, x11, 0x52527d7d7d52527d, 0xfffffffffffdffff, 0x0, x1, 16, x2)

aes64ds_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0x52527d7d7d52527d), rs1:x25(0xfffffffffffbffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(aes64ds, x7, x25, x10, 0x52527d7d7d52527d, 0xfffffffffffbffff, 0x0, x1, 24, x2)

aes64ds_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0x52527d7d7d52527d), rs1:x24(0xfffffffffff7ffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64ds, x8, x24, x9, 0x52527d7d7d52527d, 0xfffffffffff7ffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_46_0)


aes64ds_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0x52527d7d7d52527d), rs1:x23(0xffffffffffefffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(aes64ds, x9, x23, x8, 0x52527d7d7d52527d, 0xffffffffffefffff, 0x0, x1, 0, x2)

aes64ds_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0x52527d7d7d52527d), rs1:x22(0xffffffffffdfffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(aes64ds, x10, x22, x7, 0x52527d7d7d52527d, 0xffffffffffdfffff, 0x0, x1, 8, x2)

aes64ds_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0x52527d7d7d52527d), rs1:x21(0xffffffffffbfffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(aes64ds, x11, x21, x6, 0x52527d7d7d52527d, 0xffffffffffbfffff, 0x0, x1, 16, x2)

aes64ds_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0x52527d7d7d52527d), rs1:x20(0xffffffffff7fffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(aes64ds, x12, x20, x5, 0x52527d7d7d52527d, 0xffffffffff7fffff, 0x0, x1, 24, x2)

aes64ds_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0x52527d7d7d52527d), rs1:x19(0xfffffffffeffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(aes64ds, x13, x19, x4, 0x52527d7d7d52527d, 0xfffffffffeffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x4,signature_47_0)


aes64ds_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0x52527d7d7d52527d), rs1:x18(0xfffffffffdffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64ds, x14, x18, x3, 0x52527d7d7d52527d, 0xfffffffffdffffff, 0x0, x4, 0, x5)

aes64ds_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0x52527d7d7d52527d), rs1:x17(0xfffffffffbffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(aes64ds, x15, x17, x2, 0x52527d7d7d52527d, 0xfffffffffbffffff, 0x0, x4, 8, x5)

aes64ds_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0x52527d7d7d52527d), rs1:x16(0xfffffffff7ffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(aes64ds, x16, x16, x1, 0x52527d7d7d52527d, 0xfffffffff7ffffff, 0x0, x4, 16, x5)

aes64ds_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0x52527d7d7d52527d), rs1:x15(0xffffffffefffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64ds, x17, x15, x31, 0x52527d7d7d52527d, 0xffffffffefffffff, 0x0, x4, 24, x5)

aes64ds_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0x52527d7d7d52527d), rs1:x14(0xffffffffdfffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64ds, x18, x14, x30, 0x52527d7d7d52527d, 0xffffffffdfffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_48_0)


aes64ds_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0x52527d7d7d52527d), rs1:x13(0xffffffffbfffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64ds, x19, x13, x29, 0x52527d7d7d52527d, 0xffffffffbfffffff, 0x0, x1, 0, x2)

aes64ds_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0x52527d7d7d52527d), rs1:x12(0xffffffff7fffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64ds, x20, x12, x28, 0x52527d7d7d52527d, 0xffffffff7fffffff, 0x0, x1, 8, x2)

aes64ds_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0x52527d0c7d52527d), rs1:x11(0xfffffffeffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64ds, x21, x11, x27, 0x52527d0c7d52527d, 0xfffffffeffffffff, 0x0, x1, 16, x2)

aes64ds_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0x52527d217d52527d), rs1:x10(0xfffffffdffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64ds, x22, x10, x26, 0x52527d217d52527d, 0xfffffffdffffffff, 0x0, x1, 24, x2)

aes64ds_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0x52527d637d52527d), rs1:x9(0xfffffffbffffffff), rs2:x25(0x0000000000000000)
    TEST_RR_OP(aes64ds, x23, x9, x25, 0x52527d637d52527d, 0xfffffffbffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_49_0)


aes64ds_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0x52527d267d52527d), rs1:x8(0xfffffff7ffffffff), rs2:x24(0x0000000000000000)
    TEST_RR_OP(aes64ds, x24, x8, x24, 0x52527d267d52527d, 0xfffffff7ffffffff, 0x0, x1, 0, x2)

aes64ds_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0x52527d617d52527d), rs1:x7(0xffffffefffffffff), rs2:x23(0x0000000000000000)
    TEST_RR_OP(aes64ds, x25, x7, x23, 0x52527d617d52527d, 0xffffffefffffffff, 0x0, x1, 8, x2)

aes64ds_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0x52527def7d52527d), rs1:x6(0xffffffdfffffffff), rs2:x22(0x0000000000000000)
    TEST_RR_OP(aes64ds, x26, x6, x22, 0x52527def7d52527d, 0xffffffdfffffffff, 0x0, x1, 16, x2)

aes64ds_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0x52527df47d52527d), rs1:x5(0xffffffbfffffffff), rs2:x21(0x0000000000000000)
    TEST_RR_OP(aes64ds, x27, x5, x21, 0x52527df47d52527d, 0xffffffbfffffffff, 0x0, x1, 24, x2)

aes64ds_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0x52527d6b7d52527d), rs1:x4(0xffffff7fffffffff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(aes64ds, x28, x4, x20, 0x52527d6b7d52527d, 0xffffff7fffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x4,signature_50_0)


aes64ds_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0x52527d7d7d52527d), rs1:x3(0xfffffeffffffffff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(aes64ds, x29, x3, x19, 0x52527d7d7d52527d, 0xfffffeffffffffff, 0x0, x4, 0, x5)

aes64ds_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0x52527d7d7d52527d), rs1:x2(0xfffffdffffffffff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(aes64ds, x30, x2, x18, 0x52527d7d7d52527d, 0xfffffdffffffffff, 0x0, x4, 8, x5)

aes64ds_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0x52527d7d7d52527d), rs1:x1(0xfffffbffffffffff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(aes64ds, x31, x1, x17, 0x52527d7d7d52527d, 0xfffffbffffffffff, 0x0, x4, 16, x5)

aes64ds_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0x52527d7d7d52527d), rs1:x31(0xfffff7ffffffffff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(aes64ds, x1, x31, x16, 0x52527d7d7d52527d, 0xfffff7ffffffffff, 0x0, x4, 24, x5)

aes64ds_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0x52527d7d7d52527d), rs1:x30(0xffffefffffffffff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(aes64ds, x2, x30, x15, 0x52527d7d7d52527d, 0xffffefffffffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_51_0)


aes64ds_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0x52527d7d7d52527d), rs1:x29(0xffffdfffffffffff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(aes64ds, x3, x29, x14, 0x52527d7d7d52527d, 0xffffdfffffffffff, 0x0, x1, 0, x2)

aes64ds_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0x52527d7d7d52527d), rs1:x28(0xffffbfffffffffff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(aes64ds, x4, x28, x13, 0x52527d7d7d52527d, 0xffffbfffffffffff, 0x0, x1, 8, x2)

aes64ds_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0x52527d7d7d52527d), rs1:x27(0xffff7fffffffffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(aes64ds, x5, x27, x12, 0x52527d7d7d52527d, 0xffff7fffffffffff, 0x0, x1, 16, x2)

aes64ds_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0x52527d7d7d52527d), rs1:x26(0xfffeffffffffffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(aes64ds, x6, x26, x11, 0x52527d7d7d52527d, 0xfffeffffffffffff, 0x0, x1, 24, x2)

aes64ds_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0x52527d7d7d52527d), rs1:x25(0xfffdffffffffffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(aes64ds, x7, x25, x10, 0x52527d7d7d52527d, 0xfffdffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_52_0)


aes64ds_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0x52527d7d7d52527d), rs1:x24(0xfffbffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64ds, x8, x24, x9, 0x52527d7d7d52527d, 0xfffbffffffffffff, 0x0, x1, 0, x2)

aes64ds_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0x52527d7d7d52527d), rs1:x23(0xfff7ffffffffffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(aes64ds, x9, x23, x8, 0x52527d7d7d52527d, 0xfff7ffffffffffff, 0x0, x1, 8, x2)

aes64ds_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0x52527d7d7d52527d), rs1:x22(0xffefffffffffffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(aes64ds, x10, x22, x7, 0x52527d7d7d52527d, 0xffefffffffffffff, 0x0, x1, 16, x2)

aes64ds_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0x52527d7d7d52527d), rs1:x21(0xffdfffffffffffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(aes64ds, x11, x21, x6, 0x52527d7d7d52527d, 0xffdfffffffffffff, 0x0, x1, 24, x2)

aes64ds_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0x52527d7d7d52527d), rs1:x20(0xffbfffffffffffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(aes64ds, x12, x20, x5, 0x52527d7d7d52527d, 0xffbfffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x5,signature_53_0)


aes64ds_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0x52527d7d7d52527d), rs1:x19(0xff7fffffffffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(aes64ds, x13, x19, x4, 0x52527d7d7d52527d, 0xff7fffffffffffff, 0x0, x5, 0, x6)

aes64ds_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0x52527d7d0c52527d), rs1:x18(0xfeffffffffffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64ds, x14, x18, x3, 0x52527d7d0c52527d, 0xfeffffffffffffff, 0x0, x5, 8, x6)

aes64ds_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0x52527d7d2152527d), rs1:x17(0xfdffffffffffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(aes64ds, x15, x17, x2, 0x52527d7d2152527d, 0xfdffffffffffffff, 0x0, x5, 16, x6)

aes64ds_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0x52527d7d6352527d), rs1:x16(0xfbffffffffffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(aes64ds, x16, x16, x1, 0x52527d7d6352527d, 0xfbffffffffffffff, 0x0, x5, 24, x6)

aes64ds_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0x52527d7d2652527d), rs1:x15(0xf7ffffffffffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64ds, x17, x15, x31, 0x52527d7d2652527d, 0xf7ffffffffffffff, 0x0, x5, 32, x6)

    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_54_0)


aes64ds_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0x52527d7d6152527d), rs1:x14(0xefffffffffffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64ds, x18, x14, x30, 0x52527d7d6152527d, 0xefffffffffffffff, 0x0, x1, 0, x2)

aes64ds_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0x52527d7def52527d), rs1:x13(0xdfffffffffffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64ds, x19, x13, x29, 0x52527d7def52527d, 0xdfffffffffffffff, 0x0, x1, 8, x2)

aes64ds_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0x52527d7df452527d), rs1:x12(0xbfffffffffffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64ds, x20, x12, x28, 0x52527d7df452527d, 0xbfffffffffffffff, 0x0, x1, 16, x2)

aes64ds_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0x52527d7d6b52527d), rs1:x11(0x7fffffffffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64ds, x21, x11, x27, 0x52527d7d6b52527d, 0x7fffffffffffffff, 0x0, x1, 24, x2)

aes64ds_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0x52527d7d7d52527d), rs1:x10(0xffffffffffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64ds, x22, x10, x26, 0x52527d7d7d52527d, 0xffffffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ds)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ds)

	RVTEST_SIGBASE(x1,signature_55_0)


aes64ds_01_inst_270:
    // Test 270:  Test with rs1 == rs2
    // result rd:x23(0x396b2786ef447632), rs1:x25(0x10fd3dedadea5195), rs2:x25(0xdf7f3844121bcc23)
    TEST_RR_OP(aes64ds, x23, x25, x25, 0x396b2786ef447632, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x1, 0, x2)

aes64ds_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1), rs2:x24(0xf5adb41aa47d105b)
    TEST_RR_OP(aes64ds, x0, x8, x24, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x1, 8, x2)

aes64ds_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0x52526f36125252fe), rs1:x7(0xc9649f05a8e1a8bb), rs2:x0(0x82f6747f707af2c0)
    TEST_RR_OP(aes64ds, x25, x7, x0, 0x52526f36125252fe, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x1, 16, x2)

aes64ds_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0xe0b7525252e84e52), rs1:x0(0x3541291848c99fcb), rs2:x22(0x73a92fd4e19bfbc3)
    TEST_RR_OP(aes64ds, x26, x0, x22, 0xe0b7525252e84e52, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x1, 24, x2)
	
#endif


RVTEST_CODE_END aes64ds_01_code_end
RVTEST_CODE_BEGIN sha256sum1_01_init sha256sum1_01_code_begin






#ifdef TEST_CASE_1


    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x6,signature_1_0)

 
sha256sum1_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x00000000912adeda), rs1:x31(0x10fd3dedadea5195)
    li  x31, 0x10fd3dedadea5195
    sha256sum1 x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x00000000912adeda)
 
sha256sum1_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x00000000a0aec1e5), rs1:x30(0xbd295ce2d2ffbec1)
    li  x30, 0xbd295ce2d2ffbec1
    sha256sum1 x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x00000000a0aec1e5)
 
sha256sum1_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0x000000008902c743), rs1:x29(0xc9649f05a8e1a8bb)
    li  x29, 0xc9649f05a8e1a8bb
    sha256sum1 x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x000000008902c743)
 
sha256sum1_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x00000000b085dae8), rs1:x28(0x3541291848c99fcb)
    li  x28, 0x3541291848c99fcb
    sha256sum1 x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x00000000b085dae8)
 
sha256sum1_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x000000007a599140), rs1:x27(0x10a24740461d524f)
    li  x27, 0x10a24740461d524f
    sha256sum1 x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x000000007a599140)


    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_2_0)

 
sha256sum1_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x00000000eda82ea9), rs1:x26(0x546b0e54528a10af)
    li  x26, 0x546b0e54528a10af
    sha256sum1 x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x00000000eda82ea9)
 
sha256sum1_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x00000000ba07bd60), rs1:x25(0x73a92fd4e19bfbc3)
    li  x25, 0x73a92fd4e19bfbc3
    sha256sum1 x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x00000000ba07bd60)
 
sha256sum1_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x0000000064b684ad), rs1:x24(0x82f6747f707af2c0)
    li  x24, 0x82f6747f707af2c0
    sha256sum1 x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000064b684ad)
 
sha256sum1_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0x000000005b6d5631), rs1:x23(0xf5adb41aa47d105b)
    li  x23, 0xf5adb41aa47d105b
    sha256sum1 x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x000000005b6d5631)
 
sha256sum1_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0x0000000005cc3dc0), rs1:x22(0xdf7f3844121bcc23)
    li  x22, 0xdf7f3844121bcc23
    sha256sum1 x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000005cc3dc0)


    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_3_0)

 
sha256sum1_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x0000000004200080), rs1:x21(0x0000000000000001)
    li  x21, 0x1
    sha256sum1 x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x0000000004200080)
 
sha256sum1_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x0000000008400100), rs1:x20(0x0000000000000002)
    li  x20, 0x2
    sha256sum1 x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0000000008400100)
 
sha256sum1_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x0000000010800200), rs1:x19(0x0000000000000004)
    li  x19, 0x4
    sha256sum1 x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0000000010800200)
 
sha256sum1_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0000000021000400), rs1:x18(0x0000000000000008)
    li  x18, 0x8
    sha256sum1 x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0000000021000400)
 
sha256sum1_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x0000000042000800), rs1:x17(0x0000000000000010)
    li  x17, 0x10
    sha256sum1 x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0000000042000800)


    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x2,signature_4_0)

 
sha256sum1_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x0000000084001000), rs1:x16(0x0000000000000020)
    li  x16, 0x20
    sha256sum1 x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0000000084001000)
 
sha256sum1_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x0000000008002001), rs1:x15(0x0000000000000040)
    li  x15, 0x40
    sha256sum1 x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x0000000008002001)
 
sha256sum1_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x0000000010004002), rs1:x14(0x0000000000000080)
    li  x14, 0x80
    sha256sum1 x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x0000000010004002)
 
sha256sum1_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0000000020008004), rs1:x13(0x0000000000000100)
    li  x13, 0x100
    sha256sum1 x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0000000020008004)
 
sha256sum1_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0000000040010008), rs1:x12(0x0000000000000200)
    li  x12, 0x200
    sha256sum1 x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0000000040010008)


    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_5_0)

 
sha256sum1_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x0000000080020010), rs1:x11(0x0000000000000400)
    li  x11, 0x400
    sha256sum1 x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000080020010)
 
sha256sum1_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0000000000040021), rs1:x10(0x0000000000000800)
    li  x10, 0x800
    sha256sum1 x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000000040021)
 
sha256sum1_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x0000000000080042), rs1:x9(0x0000000000001000)
    li  x9, 0x1000
    sha256sum1 x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000000080042)
 
sha256sum1_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0000000000100084), rs1:x8(0x0000000000002000)
    li  x8, 0x2000
    sha256sum1 x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000000100084)
 
sha256sum1_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x0000000000200108), rs1:x7(0x0000000000004000)
    li  x7, 0x4000
    sha256sum1 x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000000200108)


    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_6_0)

 
sha256sum1_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x0000000000400210), rs1:x6(0x0000000000008000)
    li  x6, 0x8000
    sha256sum1 x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x0000000000400210)
 
sha256sum1_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x0000000000800420), rs1:x5(0x0000000000010000)
    li  x5, 0x10000
    sha256sum1 x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000000800420)
 
sha256sum1_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x0000000001000840), rs1:x4(0x0000000000020000)
    li  x4, 0x20000
    sha256sum1 x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000001000840)
 
sha256sum1_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0000000002001080), rs1:x3(0x0000000000040000)
    li  x3, 0x40000
    sha256sum1 x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000002001080)
 
sha256sum1_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0000000004002100), rs1:x2(0x0000000000080000)
    li  x2, 0x80000
    sha256sum1 x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000004002100)


    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x5,signature_7_0)

 
sha256sum1_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0000000008004200), rs1:x1(0x0000000000100000)
    li  x1, 0x100000
    sha256sum1 x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0000000008004200)
 
sha256sum1_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0000000010008400), rs1:x31(0x0000000000200000)
    li  x31, 0x200000
    sha256sum1 x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0000000010008400)
 
sha256sum1_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0000000020010800), rs1:x30(0x0000000000400000)
    li  x30, 0x400000
    sha256sum1 x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0000000020010800)
 
sha256sum1_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0000000040021000), rs1:x29(0x0000000000800000)
    li  x29, 0x800000
    sha256sum1 x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0000000040021000)
 
sha256sum1_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x0000000080042000), rs1:x28(0x0000000001000000)
    li  x28, 0x1000000
    sha256sum1 x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0000000080042000)


    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_8_0)

 
sha256sum1_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x0000000000084001), rs1:x27(0x0000000002000000)
    li  x27, 0x2000000
    sha256sum1 x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000000084001)
 
sha256sum1_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x0000000000108002), rs1:x26(0x0000000004000000)
    li  x26, 0x4000000
    sha256sum1 x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000108002)
 
sha256sum1_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0000000000210004), rs1:x25(0x0000000008000000)
    li  x25, 0x8000000
    sha256sum1 x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000000210004)
 
sha256sum1_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0000000000420008), rs1:x24(0x0000000010000000)
    li  x24, 0x10000000
    sha256sum1 x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000000420008)
 
sha256sum1_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0000000000840010), rs1:x23(0x0000000020000000)
    li  x23, 0x20000000
    sha256sum1 x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000840010)


    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_9_0)

 
sha256sum1_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x0000000001080020), rs1:x22(0x0000000040000000)
    li  x22, 0x40000000
    sha256sum1 x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000001080020)
 
sha256sum1_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0000000002100040), rs1:x21(0x0000000080000000)
    li  x21, 0x80000000
    sha256sum1 x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000002100040)
 
sha256sum1_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000100000000)
    li  x20, 0x100000000
    sha256sum1 x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000000000000)
 
sha256sum1_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000200000000)
    li  x19, 0x200000000
    sha256sum1 x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)
 
sha256sum1_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0000000400000000)
    li  x18, 0x400000000
    sha256sum1 x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x0000000000000000)


    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x3,signature_10_0)

 
sha256sum1_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x0000000800000000)
    li  x17, 0x800000000
    sha256sum1 x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x0000000000000000)
 
sha256sum1_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x0000001000000000)
    li  x16, 0x1000000000
    sha256sum1 x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0000000000000000)
 
sha256sum1_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000002000000000)
    li  x15, 0x2000000000
    sha256sum1 x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x0000000000000000)
 
sha256sum1_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000004000000000)
    li  x14, 0x4000000000
    sha256sum1 x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x0000000000000000)
 
sha256sum1_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000008000000000)
    li  x13, 0x8000000000
    sha256sum1 x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000000000000000)


    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_11_0)

 
sha256sum1_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000010000000000)
    li  x12, 0x10000000000
    sha256sum1 x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0000000000000000)
 
sha256sum1_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000020000000000)
    li  x11, 0x20000000000
    sha256sum1 x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000000000000)
 
sha256sum1_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000040000000000)
    li  x10, 0x40000000000
    sha256sum1 x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000000000000)
 
sha256sum1_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000080000000000)
    li  x9, 0x80000000000
    sha256sum1 x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000000000000)
 
sha256sum1_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000100000000000)
    li  x8, 0x100000000000
    sha256sum1 x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000000000000)


    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_12_0)

 
sha256sum1_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000200000000000)
    li  x7, 0x200000000000
    sha256sum1 x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000000000000)
 
sha256sum1_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000400000000000)
    li  x6, 0x400000000000
    sha256sum1 x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000000000)
 
sha256sum1_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000800000000000)
    li  x5, 0x800000000000
    sha256sum1 x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x0000000000000000)
 
sha256sum1_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0001000000000000)
    li  x4, 0x1000000000000
    sha256sum1 x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x0000000000000000)
 
sha256sum1_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0002000000000000)
    li  x3, 0x2000000000000
    sha256sum1 x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x0000000000000000)


    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x4,signature_13_0)

 
sha256sum1_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0004000000000000)
    li  x2, 0x4000000000000
    sha256sum1 x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x0000000000000000)
 
sha256sum1_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0008000000000000)
    li  x1, 0x8000000000000
    sha256sum1 x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x0000000000000000)
 
sha256sum1_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0010000000000000)
    li  x31, 0x10000000000000
    sha256sum1 x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x0000000000000000)
 
sha256sum1_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0020000000000000)
    li  x30, 0x20000000000000
    sha256sum1 x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x0000000000000000)
 
sha256sum1_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0040000000000000)
    li  x29, 0x40000000000000
    sha256sum1 x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x0000000000000000)


    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_14_0)

 
sha256sum1_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0080000000000000)
    li  x28, 0x80000000000000
    sha256sum1 x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x0000000000000000)
 
sha256sum1_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0100000000000000)
    li  x27, 0x100000000000000
    sha256sum1 x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000000000000)
 
sha256sum1_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0200000000000000)
    li  x26, 0x200000000000000
    sha256sum1 x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000000000)
 
sha256sum1_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0400000000000000)
    li  x25, 0x400000000000000
    sha256sum1 x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000000000000)
 
sha256sum1_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0800000000000000)
    li  x24, 0x800000000000000
    sha256sum1 x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000000000000)


    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_15_0)

 
sha256sum1_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x1000000000000000)
    li  x23, 0x1000000000000000
    sha256sum1 x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000000000)
 
sha256sum1_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x2000000000000000)
    li  x22, 0x2000000000000000
    sha256sum1 x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000000000000)
 
sha256sum1_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x4000000000000000)
    li  x21, 0x4000000000000000
    sha256sum1 x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)
 
sha256sum1_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x8000000000000000)
    li  x20, 0x8000000000000000
    sha256sum1 x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000000000000)
 
sha256sum1_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000)
    li  x19, 0x0
    sha256sum1 x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)


    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x4,signature_16_0)

 
sha256sum1_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0x00000000fbdfff7f), rs1:x18(0xfffffffffffffffe)
    li  x18, 0xfffffffffffffffe
    sha256sum1 x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0x00000000fbdfff7f)
 
sha256sum1_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0x00000000f7bffeff), rs1:x17(0xfffffffffffffffd)
    li  x17, 0xfffffffffffffffd
    sha256sum1 x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0x00000000f7bffeff)
 
sha256sum1_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0x00000000ef7ffdff), rs1:x16(0xfffffffffffffffb)
    li  x16, 0xfffffffffffffffb
    sha256sum1 x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0x00000000ef7ffdff)
 
sha256sum1_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0x00000000defffbff), rs1:x15(0xfffffffffffffff7)
    li  x15, 0xfffffffffffffff7
    sha256sum1 x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0x00000000defffbff)
 
sha256sum1_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0x00000000bdfff7ff), rs1:x14(0xffffffffffffffef)
    li  x14, 0xffffffffffffffef
    sha256sum1 x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0x00000000bdfff7ff)


    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_17_0)

 
sha256sum1_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0x000000007bffefff), rs1:x13(0xffffffffffffffdf)
    li  x13, 0xffffffffffffffdf
    sha256sum1 x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x000000007bffefff)
 
sha256sum1_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0x00000000f7ffdffe), rs1:x12(0xffffffffffffffbf)
    li  x12, 0xffffffffffffffbf
    sha256sum1 x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000f7ffdffe)
 
sha256sum1_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0x00000000efffbffd), rs1:x11(0xffffffffffffff7f)
    li  x11, 0xffffffffffffff7f
    sha256sum1 x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000efffbffd)
 
sha256sum1_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0x00000000dfff7ffb), rs1:x10(0xfffffffffffffeff)
    li  x10, 0xfffffffffffffeff
    sha256sum1 x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000dfff7ffb)
 
sha256sum1_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0x00000000bffefff7), rs1:x9(0xfffffffffffffdff)
    li  x9, 0xfffffffffffffdff
    sha256sum1 x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000bffefff7)


    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_18_0)

 
sha256sum1_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0x000000007ffdffef), rs1:x8(0xfffffffffffffbff)
    li  x8, 0xfffffffffffffbff
    sha256sum1 x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x000000007ffdffef)
 
sha256sum1_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0x00000000fffbffde), rs1:x7(0xfffffffffffff7ff)
    li  x7, 0xfffffffffffff7ff
    sha256sum1 x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x00000000fffbffde)
 
sha256sum1_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0x00000000fff7ffbd), rs1:x6(0xffffffffffffefff)
    li  x6, 0xffffffffffffefff
    sha256sum1 x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x00000000fff7ffbd)
 
sha256sum1_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0x00000000ffefff7b), rs1:x5(0xffffffffffffdfff)
    li  x5, 0xffffffffffffdfff
    sha256sum1 x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x00000000ffefff7b)
 
sha256sum1_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0x00000000ffdffef7), rs1:x4(0xffffffffffffbfff)
    li  x4, 0xffffffffffffbfff
    sha256sum1 x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x00000000ffdffef7)


    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x4,signature_19_0)

 
sha256sum1_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0x00000000ffbffdef), rs1:x3(0xffffffffffff7fff)
    li  x3, 0xffffffffffff7fff
    sha256sum1 x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0x00000000ffbffdef)
 
sha256sum1_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0x00000000ff7ffbdf), rs1:x2(0xfffffffffffeffff)
    li  x2, 0xfffffffffffeffff
    sha256sum1 x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x00000000ff7ffbdf)
 
sha256sum1_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0x00000000fefff7bf), rs1:x1(0xfffffffffffdffff)
    li  x1, 0xfffffffffffdffff
    sha256sum1 x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x00000000fefff7bf)
 
sha256sum1_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0x00000000fdffef7f), rs1:x31(0xfffffffffffbffff)
    li  x31, 0xfffffffffffbffff
    sha256sum1 x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x00000000fdffef7f)
 
sha256sum1_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0x00000000fbffdeff), rs1:x30(0xfffffffffff7ffff)
    li  x30, 0xfffffffffff7ffff
    sha256sum1 x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x00000000fbffdeff)


    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_20_0)

 
sha256sum1_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0x00000000f7ffbdff), rs1:x29(0xffffffffffefffff)
    li  x29, 0xffffffffffefffff
    sha256sum1 x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0x00000000f7ffbdff)
 
sha256sum1_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0x00000000efff7bff), rs1:x28(0xffffffffffdfffff)
    li  x28, 0xffffffffffdfffff
    sha256sum1 x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x00000000efff7bff)
 
sha256sum1_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0x00000000dffef7ff), rs1:x27(0xffffffffffbfffff)
    li  x27, 0xffffffffffbfffff
    sha256sum1 x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x00000000dffef7ff)
 
sha256sum1_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0x00000000bffdefff), rs1:x26(0xffffffffff7fffff)
    li  x26, 0xffffffffff7fffff
    sha256sum1 x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x00000000bffdefff)
 
sha256sum1_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0x000000007ffbdfff), rs1:x25(0xfffffffffeffffff)
    li  x25, 0xfffffffffeffffff
    sha256sum1 x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x000000007ffbdfff)


    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_21_0)

 
sha256sum1_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0x00000000fff7bffe), rs1:x24(0xfffffffffdffffff)
    li  x24, 0xfffffffffdffffff
    sha256sum1 x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000fff7bffe)
 
sha256sum1_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0x00000000ffef7ffd), rs1:x23(0xfffffffffbffffff)
    li  x23, 0xfffffffffbffffff
    sha256sum1 x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000ffef7ffd)
 
sha256sum1_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0x00000000ffdefffb), rs1:x22(0xfffffffff7ffffff)
    li  x22, 0xfffffffff7ffffff
    sha256sum1 x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000ffdefffb)
 
sha256sum1_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0x00000000ffbdfff7), rs1:x21(0xffffffffefffffff)
    li  x21, 0xffffffffefffffff
    sha256sum1 x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x00000000ffbdfff7)
 
sha256sum1_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0x00000000ff7bffef), rs1:x20(0xffffffffdfffffff)
    li  x20, 0xffffffffdfffffff
    sha256sum1 x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x00000000ff7bffef)


    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x5,signature_22_0)

 
sha256sum1_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0x00000000fef7ffdf), rs1:x19(0xffffffffbfffffff)
    li  x19, 0xffffffffbfffffff
    sha256sum1 x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0x00000000fef7ffdf)
 
sha256sum1_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0x00000000fdefffbf), rs1:x18(0xffffffff7fffffff)
    li  x18, 0xffffffff7fffffff
    sha256sum1 x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0x00000000fdefffbf)
 
sha256sum1_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0x00000000ffffffff), rs1:x17(0xfffffffeffffffff)
    li  x17, 0xfffffffeffffffff
    sha256sum1 x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0x00000000ffffffff)
 
sha256sum1_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0x00000000ffffffff), rs1:x16(0xfffffffdffffffff)
    li  x16, 0xfffffffdffffffff
    sha256sum1 x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0x00000000ffffffff)
 
sha256sum1_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0x00000000ffffffff), rs1:x15(0xfffffffbffffffff)
    li  x15, 0xfffffffbffffffff
    sha256sum1 x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0x00000000ffffffff)


    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_23_0)

 
sha256sum1_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0x00000000ffffffff), rs1:x14(0xfffffff7ffffffff)
    li  x14, 0xfffffff7ffffffff
    sha256sum1 x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x00000000ffffffff)
 
sha256sum1_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0x00000000ffffffff), rs1:x13(0xffffffefffffffff)
    li  x13, 0xffffffefffffffff
    sha256sum1 x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x00000000ffffffff)
 
sha256sum1_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0x00000000ffffffff), rs1:x12(0xffffffdfffffffff)
    li  x12, 0xffffffdfffffffff
    sha256sum1 x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000ffffffff)
 
sha256sum1_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0x00000000ffffffff), rs1:x11(0xffffffbfffffffff)
    li  x11, 0xffffffbfffffffff
    sha256sum1 x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000ffffffff)
 
sha256sum1_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0x00000000ffffffff), rs1:x10(0xffffff7fffffffff)
    li  x10, 0xffffff7fffffffff
    sha256sum1 x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000ffffffff)


    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_24_0)

 
sha256sum1_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0x00000000ffffffff), rs1:x9(0xfffffeffffffffff)
    li  x9, 0xfffffeffffffffff
    sha256sum1 x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000ffffffff)
 
sha256sum1_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0x00000000ffffffff), rs1:x8(0xfffffdffffffffff)
    li  x8, 0xfffffdffffffffff
    sha256sum1 x24, x8
    sd x24, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x00000000ffffffff)
 
sha256sum1_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0x00000000ffffffff), rs1:x7(0xfffffbffffffffff)
    li  x7, 0xfffffbffffffffff
    sha256sum1 x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x00000000ffffffff)
 
sha256sum1_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0x00000000ffffffff), rs1:x6(0xfffff7ffffffffff)
    li  x6, 0xfffff7ffffffffff
    sha256sum1 x26, x6
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x00000000ffffffff)
 
sha256sum1_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0x00000000ffffffff), rs1:x5(0xffffefffffffffff)
    li  x5, 0xffffefffffffffff
    sha256sum1 x27, x5
    sd x27, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x00000000ffffffff)


    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x5,signature_25_0)

 
sha256sum1_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0x00000000ffffffff), rs1:x4(0xffffdfffffffffff)
    li  x4, 0xffffdfffffffffff
    sha256sum1 x28, x4
    sd x28, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x28, 0x00000000ffffffff)
 
sha256sum1_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0x00000000ffffffff), rs1:x3(0xffffbfffffffffff)
    li  x3, 0xffffbfffffffffff
    sha256sum1 x29, x3
    sd x29, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x29, 0x00000000ffffffff)
 
sha256sum1_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0x00000000ffffffff), rs1:x2(0xffff7fffffffffff)
    li  x2, 0xffff7fffffffffff
    sha256sum1 x30, x2
    sd x30, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x30, 0x00000000ffffffff)
 
sha256sum1_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0x00000000ffffffff), rs1:x1(0xfffeffffffffffff)
    li  x1, 0xfffeffffffffffff
    sha256sum1 x31, x1
    sd x31, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x00000000ffffffff)
 
sha256sum1_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0x00000000ffffffff), rs1:x31(0xfffdffffffffffff)
    li  x31, 0xfffdffffffffffff
    sha256sum1 x1, x31
    sd x1, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x00000000ffffffff)


    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_26_0)

 
sha256sum1_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0x00000000ffffffff), rs1:x30(0xfffbffffffffffff)
    li  x30, 0xfffbffffffffffff
    sha256sum1 x2, x30
    sd x2, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x00000000ffffffff)
 
sha256sum1_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0x00000000ffffffff), rs1:x29(0xfff7ffffffffffff)
    li  x29, 0xfff7ffffffffffff
    sha256sum1 x3, x29
    sd x3, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x00000000ffffffff)
 
sha256sum1_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0x00000000ffffffff), rs1:x28(0xffefffffffffffff)
    li  x28, 0xffefffffffffffff
    sha256sum1 x4, x28
    sd x4, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x00000000ffffffff)
 
sha256sum1_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0x00000000ffffffff), rs1:x27(0xffdfffffffffffff)
    li  x27, 0xffdfffffffffffff
    sha256sum1 x5, x27
    sd x5, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x00000000ffffffff)
 
sha256sum1_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0x00000000ffffffff), rs1:x26(0xffbfffffffffffff)
    li  x26, 0xffbfffffffffffff
    sha256sum1 x6, x26
    sd x6, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x6, 0x00000000ffffffff)


    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_27_0)

 
sha256sum1_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0x00000000ffffffff), rs1:x25(0xff7fffffffffffff)
    li  x25, 0xff7fffffffffffff
    sha256sum1 x7, x25
    sd x7, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x00000000ffffffff)
 
sha256sum1_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0x00000000ffffffff), rs1:x24(0xfeffffffffffffff)
    li  x24, 0xfeffffffffffffff
    sha256sum1 x8, x24
    sd x8, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000ffffffff)
 
sha256sum1_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0x00000000ffffffff), rs1:x23(0xfdffffffffffffff)
    li  x23, 0xfdffffffffffffff
    sha256sum1 x9, x23
    sd x9, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000ffffffff)
 
sha256sum1_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0x00000000ffffffff), rs1:x22(0xfbffffffffffffff)
    li  x22, 0xfbffffffffffffff
    sha256sum1 x10, x22
    sd x10, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000ffffffff)
 
sha256sum1_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0x00000000ffffffff), rs1:x21(0xf7ffffffffffffff)
    li  x21, 0xf7ffffffffffffff
    sha256sum1 x11, x21
    sd x11, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x00000000ffffffff)


    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x6,signature_28_0)

 
sha256sum1_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0x00000000ffffffff), rs1:x20(0xefffffffffffffff)
    li  x20, 0xefffffffffffffff
    sha256sum1 x12, x20
    sd x12, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x00000000ffffffff)
 
sha256sum1_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0x00000000ffffffff), rs1:x19(0xdfffffffffffffff)
    li  x19, 0xdfffffffffffffff
    sha256sum1 x13, x19
    sd x13, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x00000000ffffffff)
 
sha256sum1_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0x00000000ffffffff), rs1:x18(0xbfffffffffffffff)
    li  x18, 0xbfffffffffffffff
    sha256sum1 x14, x18
    sd x14, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x00000000ffffffff)
 
sha256sum1_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0x00000000ffffffff), rs1:x17(0x7fffffffffffffff)
    li  x17, 0x7fffffffffffffff
    sha256sum1 x15, x17
    sd x15, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x00000000ffffffff)
 
sha256sum1_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0x00000000ffffffff), rs1:x16(0xffffffffffffffff)
    li  x16, 0xffffffffffffffff
    sha256sum1 x16, x16
    sd x16, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x16, 0x00000000ffffffff)


    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_29_0)

 
sha256sum1_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0000000004200080), rs1:x15(0x0000000000000001)
    li  x15, 0x1
    sha256sum1 x17, x15
    sd x17, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x17, 0x0000000004200080)
 
sha256sum1_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0000000008400100), rs1:x14(0x0000000000000002)
    li  x14, 0x2
    sha256sum1 x18, x14
    sd x18, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x0000000008400100)
 
sha256sum1_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0000000010800200), rs1:x13(0x0000000000000004)
    li  x13, 0x4
    sha256sum1 x19, x13
    sd x19, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x0000000010800200)
 
sha256sum1_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0000000021000400), rs1:x12(0x0000000000000008)
    li  x12, 0x8
    sha256sum1 x20, x12
    sd x20, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0000000021000400)
 
sha256sum1_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0000000042000800), rs1:x11(0x0000000000000010)
    li  x11, 0x10
    sha256sum1 x21, x11
    sd x21, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000042000800)


    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_30_0)

 
sha256sum1_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0000000084001000), rs1:x10(0x0000000000000020)
    li  x10, 0x20
    sha256sum1 x22, x10
    sd x22, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000084001000)
 
sha256sum1_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0000000008002001), rs1:x9(0x0000000000000040)
    li  x9, 0x40
    sha256sum1 x23, x9
    sd x23, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000008002001)
 
sha256sum1_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0000000010004002), rs1:x8(0x0000000000000080)
    li  x8, 0x80
    sha256sum1 x24, x8
    sd x24, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000010004002)
 
sha256sum1_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000020008004), rs1:x7(0x0000000000000100)
    li  x7, 0x100
    sha256sum1 x25, x7
    sd x25, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000020008004)
 
sha256sum1_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000040010008), rs1:x6(0x0000000000000200)
    li  x6, 0x200
    sha256sum1 x26, x6
    sd x26, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000040010008)


    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x6,signature_31_0)

 
sha256sum1_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000000080020010), rs1:x5(0x0000000000000400)
    li  x5, 0x400
    sha256sum1 x27, x5
    sd x27, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000080020010)
 
sha256sum1_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000000040021), rs1:x4(0x0000000000000800)
    li  x4, 0x800
    sha256sum1 x28, x4
    sd x28, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000000040021)
 
sha256sum1_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0000000000080042), rs1:x3(0x0000000000001000)
    li  x3, 0x1000
    sha256sum1 x29, x3
    sd x29, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000000080042)
 
sha256sum1_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000000100084), rs1:x2(0x0000000000002000)
    li  x2, 0x2000
    sha256sum1 x30, x2
    sd x30, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000000100084)
 
sha256sum1_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0000000000200108), rs1:x1(0x0000000000004000)
    li  x1, 0x4000
    sha256sum1 x31, x1
    sd x31, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x0000000000200108)


    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x6,signature_32_0)

 
sha256sum1_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000000400210), rs1:x31(0x0000000000008000)
    li  x31, 0x8000
    sha256sum1 x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x0000000000400210)
 
sha256sum1_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000000000800420), rs1:x30(0x0000000000010000)
    li  x30, 0x10000
    sha256sum1 x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x0000000000800420)
 
sha256sum1_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000001000840), rs1:x29(0x0000000000020000)
    li  x29, 0x20000
    sha256sum1 x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x0000000001000840)
 
sha256sum1_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000002001080), rs1:x28(0x0000000000040000)
    li  x28, 0x40000
    sha256sum1 x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x0000000002001080)
 
sha256sum1_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000004002100), rs1:x27(0x0000000000080000)
    li  x27, 0x80000
    sha256sum1 x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x0000000004002100)


    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_33_0)

 
sha256sum1_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000008004200), rs1:x26(0x0000000000100000)
    li  x26, 0x100000
    sha256sum1 x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000008004200)
 
sha256sum1_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000010008400), rs1:x25(0x0000000000200000)
    li  x25, 0x200000
    sha256sum1 x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000010008400)
 
sha256sum1_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000020010800), rs1:x24(0x0000000000400000)
    li  x24, 0x400000
    sha256sum1 x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000020010800)
 
sha256sum1_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000040021000), rs1:x23(0x0000000000800000)
    li  x23, 0x800000
    sha256sum1 x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000040021000)
 
sha256sum1_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000080042000), rs1:x22(0x0000000001000000)
    li  x22, 0x1000000
    sha256sum1 x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000080042000)


    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_34_0)

 
sha256sum1_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000000084001), rs1:x21(0x0000000002000000)
    li  x21, 0x2000000
    sha256sum1 x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x0000000000084001)
 
sha256sum1_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000000108002), rs1:x20(0x0000000004000000)
    li  x20, 0x4000000
    sha256sum1 x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0000000000108002)
 
sha256sum1_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000000210004), rs1:x19(0x0000000008000000)
    li  x19, 0x8000000
    sha256sum1 x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0000000000210004)
 
sha256sum1_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000000420008), rs1:x18(0x0000000010000000)
    li  x18, 0x10000000
    sha256sum1 x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0000000000420008)
 
sha256sum1_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000000840010), rs1:x17(0x0000000020000000)
    li  x17, 0x20000000
    sha256sum1 x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0000000000840010)


    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x2,signature_35_0)

 
sha256sum1_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000001080020), rs1:x16(0x0000000040000000)
    li  x16, 0x40000000
    sha256sum1 x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0000000001080020)
 
sha256sum1_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000000002100040), rs1:x15(0x0000000080000000)
    li  x15, 0x80000000
    sha256sum1 x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x0000000002100040)
 
sha256sum1_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000000100000000)
    li  x14, 0x100000000
    sha256sum1 x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x0000000000000000)
 
sha256sum1_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000200000000)
    li  x13, 0x200000000
    sha256sum1 x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0000000000000000)
 
sha256sum1_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000000400000000)
    li  x12, 0x400000000
    sha256sum1 x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0000000000000000)


    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_36_0)

 
sha256sum1_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000800000000)
    li  x11, 0x800000000
    sha256sum1 x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000000000000)
 
sha256sum1_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000001000000000)
    li  x10, 0x1000000000
    sha256sum1 x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000000000000)
 
sha256sum1_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000002000000000)
    li  x9, 0x2000000000
    sha256sum1 x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000000000000)
 
sha256sum1_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000004000000000)
    li  x8, 0x4000000000
    sha256sum1 x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000000000000)
 
sha256sum1_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000008000000000)
    li  x7, 0x8000000000
    sha256sum1 x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000000000000)


    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_37_0)

 
sha256sum1_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000010000000000)
    li  x6, 0x10000000000
    sha256sum1 x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x0000000000000000)
 
sha256sum1_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000020000000000)
    li  x5, 0x20000000000
    sha256sum1 x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000000000000)
 
sha256sum1_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000040000000000)
    li  x4, 0x40000000000
    sha256sum1 x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000000000000)
 
sha256sum1_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000080000000000)
    li  x3, 0x80000000000
    sha256sum1 x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000000000000)
 
sha256sum1_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000100000000000)
    li  x2, 0x100000000000
    sha256sum1 x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000000000000)


    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x5,signature_38_0)

 
sha256sum1_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000200000000000)
    li  x1, 0x200000000000
    sha256sum1 x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0000000000000000)
 
sha256sum1_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000400000000000)
    li  x31, 0x400000000000
    sha256sum1 x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0000000000000000)
 
sha256sum1_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000800000000000)
    li  x30, 0x800000000000
    sha256sum1 x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0000000000000000)
 
sha256sum1_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0001000000000000)
    li  x29, 0x1000000000000
    sha256sum1 x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0000000000000000)
 
sha256sum1_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0002000000000000)
    li  x28, 0x2000000000000
    sha256sum1 x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0000000000000000)


    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_39_0)

 
sha256sum1_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0004000000000000)
    li  x27, 0x4000000000000
    sha256sum1 x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000000000000)
 
sha256sum1_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0008000000000000)
    li  x26, 0x8000000000000
    sha256sum1 x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000000000)
 
sha256sum1_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0010000000000000)
    li  x25, 0x10000000000000
    sha256sum1 x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000000000000)
 
sha256sum1_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0020000000000000)
    li  x24, 0x20000000000000
    sha256sum1 x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000000000000)
 
sha256sum1_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0040000000000000)
    li  x23, 0x40000000000000
    sha256sum1 x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000000000)


    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_40_0)

 
sha256sum1_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0080000000000000)
    li  x22, 0x80000000000000
    sha256sum1 x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000000000000)
 
sha256sum1_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0100000000000000)
    li  x21, 0x100000000000000
    sha256sum1 x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)
 
sha256sum1_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0200000000000000)
    li  x20, 0x200000000000000
    sha256sum1 x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000000000000)
 
sha256sum1_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0400000000000000)
    li  x19, 0x400000000000000
    sha256sum1 x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)
 
sha256sum1_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0800000000000000)
    li  x18, 0x800000000000000
    sha256sum1 x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x0000000000000000)


    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x3,signature_41_0)

 
sha256sum1_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x1000000000000000)
    li  x17, 0x1000000000000000
    sha256sum1 x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x0000000000000000)
 
sha256sum1_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x2000000000000000)
    li  x16, 0x2000000000000000
    sha256sum1 x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0000000000000000)
 
sha256sum1_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x4000000000000000)
    li  x15, 0x4000000000000000
    sha256sum1 x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x0000000000000000)
 
sha256sum1_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x8000000000000000)
    li  x14, 0x8000000000000000
    sha256sum1 x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x0000000000000000)
 
sha256sum1_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000)
    li  x13, 0x0
    sha256sum1 x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000000000000000)


    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_42_0)

 
sha256sum1_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0x00000000fbdfff7f), rs1:x12(0xfffffffffffffffe)
    li  x12, 0xfffffffffffffffe
    sha256sum1 x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000fbdfff7f)
 
sha256sum1_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0x00000000f7bffeff), rs1:x11(0xfffffffffffffffd)
    li  x11, 0xfffffffffffffffd
    sha256sum1 x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000f7bffeff)
 
sha256sum1_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0x00000000ef7ffdff), rs1:x10(0xfffffffffffffffb)
    li  x10, 0xfffffffffffffffb
    sha256sum1 x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000ef7ffdff)
 
sha256sum1_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0x00000000defffbff), rs1:x9(0xfffffffffffffff7)
    li  x9, 0xfffffffffffffff7
    sha256sum1 x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000defffbff)
 
sha256sum1_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0x00000000bdfff7ff), rs1:x8(0xffffffffffffffef)
    li  x8, 0xffffffffffffffef
    sha256sum1 x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x00000000bdfff7ff)


    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_43_0)

 
sha256sum1_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0x000000007bffefff), rs1:x7(0xffffffffffffffdf)
    li  x7, 0xffffffffffffffdf
    sha256sum1 x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x000000007bffefff)
 
sha256sum1_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0x00000000f7ffdffe), rs1:x6(0xffffffffffffffbf)
    li  x6, 0xffffffffffffffbf
    sha256sum1 x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x00000000f7ffdffe)
 
sha256sum1_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0x00000000efffbffd), rs1:x5(0xffffffffffffff7f)
    li  x5, 0xffffffffffffff7f
    sha256sum1 x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x00000000efffbffd)
 
sha256sum1_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0x00000000dfff7ffb), rs1:x4(0xfffffffffffffeff)
    li  x4, 0xfffffffffffffeff
    sha256sum1 x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x00000000dfff7ffb)
 
sha256sum1_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0x00000000bffefff7), rs1:x3(0xfffffffffffffdff)
    li  x3, 0xfffffffffffffdff
    sha256sum1 x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x00000000bffefff7)


    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x4,signature_44_0)

 
sha256sum1_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0x000000007ffdffef), rs1:x2(0xfffffffffffffbff)
    li  x2, 0xfffffffffffffbff
    sha256sum1 x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x000000007ffdffef)
 
sha256sum1_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0x00000000fffbffde), rs1:x1(0xfffffffffffff7ff)
    li  x1, 0xfffffffffffff7ff
    sha256sum1 x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x00000000fffbffde)
 
sha256sum1_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0x00000000fff7ffbd), rs1:x31(0xffffffffffffefff)
    li  x31, 0xffffffffffffefff
    sha256sum1 x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x00000000fff7ffbd)
 
sha256sum1_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0x00000000ffefff7b), rs1:x30(0xffffffffffffdfff)
    li  x30, 0xffffffffffffdfff
    sha256sum1 x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x00000000ffefff7b)
 
sha256sum1_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0x00000000ffdffef7), rs1:x29(0xffffffffffffbfff)
    li  x29, 0xffffffffffffbfff
    sha256sum1 x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x00000000ffdffef7)


    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_45_0)

 
sha256sum1_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0x00000000ffbffdef), rs1:x28(0xffffffffffff7fff)
    li  x28, 0xffffffffffff7fff
    sha256sum1 x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x00000000ffbffdef)
 
sha256sum1_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0x00000000ff7ffbdf), rs1:x27(0xfffffffffffeffff)
    li  x27, 0xfffffffffffeffff
    sha256sum1 x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x00000000ff7ffbdf)
 
sha256sum1_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0x00000000fefff7bf), rs1:x26(0xfffffffffffdffff)
    li  x26, 0xfffffffffffdffff
    sha256sum1 x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x00000000fefff7bf)
 
sha256sum1_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0x00000000fdffef7f), rs1:x25(0xfffffffffffbffff)
    li  x25, 0xfffffffffffbffff
    sha256sum1 x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x00000000fdffef7f)
 
sha256sum1_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0x00000000fbffdeff), rs1:x24(0xfffffffffff7ffff)
    li  x24, 0xfffffffffff7ffff
    sha256sum1 x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000fbffdeff)


    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_46_0)

 
sha256sum1_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0x00000000f7ffbdff), rs1:x23(0xffffffffffefffff)
    li  x23, 0xffffffffffefffff
    sha256sum1 x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000f7ffbdff)
 
sha256sum1_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0x00000000efff7bff), rs1:x22(0xffffffffffdfffff)
    li  x22, 0xffffffffffdfffff
    sha256sum1 x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000efff7bff)
 
sha256sum1_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0x00000000dffef7ff), rs1:x21(0xffffffffffbfffff)
    li  x21, 0xffffffffffbfffff
    sha256sum1 x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x00000000dffef7ff)
 
sha256sum1_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0x00000000bffdefff), rs1:x20(0xffffffffff7fffff)
    li  x20, 0xffffffffff7fffff
    sha256sum1 x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x00000000bffdefff)
 
sha256sum1_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0x000000007ffbdfff), rs1:x19(0xfffffffffeffffff)
    li  x19, 0xfffffffffeffffff
    sha256sum1 x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x000000007ffbdfff)


    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x4,signature_47_0)

 
sha256sum1_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0x00000000fff7bffe), rs1:x18(0xfffffffffdffffff)
    li  x18, 0xfffffffffdffffff
    sha256sum1 x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0x00000000fff7bffe)
 
sha256sum1_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0x00000000ffef7ffd), rs1:x17(0xfffffffffbffffff)
    li  x17, 0xfffffffffbffffff
    sha256sum1 x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0x00000000ffef7ffd)
 
sha256sum1_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0x00000000ffdefffb), rs1:x16(0xfffffffff7ffffff)
    li  x16, 0xfffffffff7ffffff
    sha256sum1 x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0x00000000ffdefffb)
 
sha256sum1_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0x00000000ffbdfff7), rs1:x15(0xffffffffefffffff)
    li  x15, 0xffffffffefffffff
    sha256sum1 x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0x00000000ffbdfff7)
 
sha256sum1_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0x00000000ff7bffef), rs1:x14(0xffffffffdfffffff)
    li  x14, 0xffffffffdfffffff
    sha256sum1 x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0x00000000ff7bffef)


    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_48_0)

 
sha256sum1_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0x00000000fef7ffdf), rs1:x13(0xffffffffbfffffff)
    li  x13, 0xffffffffbfffffff
    sha256sum1 x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x00000000fef7ffdf)
 
sha256sum1_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0x00000000fdefffbf), rs1:x12(0xffffffff7fffffff)
    li  x12, 0xffffffff7fffffff
    sha256sum1 x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000fdefffbf)
 
sha256sum1_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0x00000000ffffffff), rs1:x11(0xfffffffeffffffff)
    li  x11, 0xfffffffeffffffff
    sha256sum1 x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000ffffffff)
 
sha256sum1_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0x00000000ffffffff), rs1:x10(0xfffffffdffffffff)
    li  x10, 0xfffffffdffffffff
    sha256sum1 x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000ffffffff)
 
sha256sum1_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0x00000000ffffffff), rs1:x9(0xfffffffbffffffff)
    li  x9, 0xfffffffbffffffff
    sha256sum1 x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000ffffffff)


    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_49_0)

 
sha256sum1_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0x00000000ffffffff), rs1:x8(0xfffffff7ffffffff)
    li  x8, 0xfffffff7ffffffff
    sha256sum1 x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x00000000ffffffff)
 
sha256sum1_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0x00000000ffffffff), rs1:x7(0xffffffefffffffff)
    li  x7, 0xffffffefffffffff
    sha256sum1 x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x00000000ffffffff)
 
sha256sum1_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0x00000000ffffffff), rs1:x6(0xffffffdfffffffff)
    li  x6, 0xffffffdfffffffff
    sha256sum1 x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x00000000ffffffff)
 
sha256sum1_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0x00000000ffffffff), rs1:x5(0xffffffbfffffffff)
    li  x5, 0xffffffbfffffffff
    sha256sum1 x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x00000000ffffffff)
 
sha256sum1_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0x00000000ffffffff), rs1:x4(0xffffff7fffffffff)
    li  x4, 0xffffff7fffffffff
    sha256sum1 x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x00000000ffffffff)


    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x4,signature_50_0)

 
sha256sum1_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0x00000000ffffffff), rs1:x3(0xfffffeffffffffff)
    li  x3, 0xfffffeffffffffff
    sha256sum1 x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0x00000000ffffffff)
 
sha256sum1_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0x00000000ffffffff), rs1:x2(0xfffffdffffffffff)
    li  x2, 0xfffffdffffffffff
    sha256sum1 x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x00000000ffffffff)
 
sha256sum1_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0x00000000ffffffff), rs1:x1(0xfffffbffffffffff)
    li  x1, 0xfffffbffffffffff
    sha256sum1 x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x00000000ffffffff)
 
sha256sum1_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0x00000000ffffffff), rs1:x31(0xfffff7ffffffffff)
    li  x31, 0xfffff7ffffffffff
    sha256sum1 x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x00000000ffffffff)
 
sha256sum1_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0x00000000ffffffff), rs1:x30(0xffffefffffffffff)
    li  x30, 0xffffefffffffffff
    sha256sum1 x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x00000000ffffffff)


    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_51_0)

 
sha256sum1_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0x00000000ffffffff), rs1:x29(0xffffdfffffffffff)
    li  x29, 0xffffdfffffffffff
    sha256sum1 x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0x00000000ffffffff)
 
sha256sum1_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0x00000000ffffffff), rs1:x28(0xffffbfffffffffff)
    li  x28, 0xffffbfffffffffff
    sha256sum1 x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x00000000ffffffff)
 
sha256sum1_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0x00000000ffffffff), rs1:x27(0xffff7fffffffffff)
    li  x27, 0xffff7fffffffffff
    sha256sum1 x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x00000000ffffffff)
 
sha256sum1_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0x00000000ffffffff), rs1:x26(0xfffeffffffffffff)
    li  x26, 0xfffeffffffffffff
    sha256sum1 x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x00000000ffffffff)
 
sha256sum1_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0x00000000ffffffff), rs1:x25(0xfffdffffffffffff)
    li  x25, 0xfffdffffffffffff
    sha256sum1 x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x00000000ffffffff)


    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_52_0)

 
sha256sum1_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0x00000000ffffffff), rs1:x24(0xfffbffffffffffff)
    li  x24, 0xfffbffffffffffff
    sha256sum1 x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000ffffffff)
 
sha256sum1_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0x00000000ffffffff), rs1:x23(0xfff7ffffffffffff)
    li  x23, 0xfff7ffffffffffff
    sha256sum1 x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000ffffffff)
 
sha256sum1_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0x00000000ffffffff), rs1:x22(0xffefffffffffffff)
    li  x22, 0xffefffffffffffff
    sha256sum1 x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000ffffffff)
 
sha256sum1_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0x00000000ffffffff), rs1:x21(0xffdfffffffffffff)
    li  x21, 0xffdfffffffffffff
    sha256sum1 x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x00000000ffffffff)
 
sha256sum1_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0x00000000ffffffff), rs1:x20(0xffbfffffffffffff)
    li  x20, 0xffbfffffffffffff
    sha256sum1 x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x00000000ffffffff)


    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x5,signature_53_0)

 
sha256sum1_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0x00000000ffffffff), rs1:x19(0xff7fffffffffffff)
    li  x19, 0xff7fffffffffffff
    sha256sum1 x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0x00000000ffffffff)
 
sha256sum1_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0x00000000ffffffff), rs1:x18(0xfeffffffffffffff)
    li  x18, 0xfeffffffffffffff
    sha256sum1 x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0x00000000ffffffff)
 
sha256sum1_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0x00000000ffffffff), rs1:x17(0xfdffffffffffffff)
    li  x17, 0xfdffffffffffffff
    sha256sum1 x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0x00000000ffffffff)
 
sha256sum1_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0x00000000ffffffff), rs1:x16(0xfbffffffffffffff)
    li  x16, 0xfbffffffffffffff
    sha256sum1 x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0x00000000ffffffff)
 
sha256sum1_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0x00000000ffffffff), rs1:x15(0xf7ffffffffffffff)
    li  x15, 0xf7ffffffffffffff
    sha256sum1 x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0x00000000ffffffff)


    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_54_0)

 
sha256sum1_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0x00000000ffffffff), rs1:x14(0xefffffffffffffff)
    li  x14, 0xefffffffffffffff
    sha256sum1 x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x00000000ffffffff)
 
sha256sum1_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0x00000000ffffffff), rs1:x13(0xdfffffffffffffff)
    li  x13, 0xdfffffffffffffff
    sha256sum1 x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x00000000ffffffff)
 
sha256sum1_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0x00000000ffffffff), rs1:x12(0xbfffffffffffffff)
    li  x12, 0xbfffffffffffffff
    sha256sum1 x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000ffffffff)
 
sha256sum1_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0x00000000ffffffff), rs1:x11(0x7fffffffffffffff)
    li  x11, 0x7fffffffffffffff
    sha256sum1 x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000ffffffff)
 
sha256sum1_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0x00000000ffffffff), rs1:x10(0xffffffffffffffff)
    li  x10, 0xffffffffffffffff
    sha256sum1 x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000ffffffff)


    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sum1)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sum1)

    RVTEST_SIGBASE(x1,signature_55_0)

 
sha256sum1_01_inst_270:
    // Test 270:  Test with random values
    // result rd:x23(0x00000000912adeda), rs1:x9(0x10fd3dedadea5195)
    li  x9, 0x10fd3dedadea5195
    sha256sum1 x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000912adeda)
 
sha256sum1_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1)
    li  x8, 0xbd295ce2d2ffbec1
    sha256sum1 x0, x8
    sd x0, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x0, 0x0000000000000000)
 
sha256sum1_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0x000000008902c743), rs1:x7(0xc9649f05a8e1a8bb)
    li  x7, 0xc9649f05a8e1a8bb
    sha256sum1 x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x000000008902c743)
 
sha256sum1_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb)
    li  x0, 0x3541291848c99fcb
    sha256sum1 x26, x0
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000000000)
	
#endif


RVTEST_CODE_END sha256sum1_01_code_end
RVTEST_CODE_BEGIN sha256sig1_01_init sha256sig1_01_code_begin






#ifdef TEST_CASE_1


    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x6,signature_1_0)

 
sha256sig1_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x0000000062d319dc), rs1:x31(0x10fd3dedadea5195)
    li  x31, 0x10fd3dedadea5195
    sha256sig1 x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x0000000062d319dc)
 
sha256sig1_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x00000000288c6ccf), rs1:x30(0xbd295ce2d2ffbec1)
    li  x30, 0xbd295ce2d2ffbec1
    sha256sig1 x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x00000000288c6ccf)
 
sha256sig1_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0x00000000e1609906), rs1:x29(0xc9649f05a8e1a8bb)
    li  x29, 0xc9649f05a8e1a8bb
    sha256sig1 x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x00000000e1609906)
 
sha256sig1_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x00000000fc0eff1a), rs1:x28(0x3541291848c99fcb)
    li  x28, 0x3541291848c99fcb
    sha256sig1 x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x00000000fc0eff1a)
 
sha256sig1_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x00000000037fcc99), rs1:x27(0x10a24740461d524f)
    li  x27, 0x10a24740461d524f
    sha256sig1 x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x00000000037fcc99)


    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_2_0)

 
sha256sig1_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x000000004a56e190), rs1:x26(0x546b0e54528a10af)
    li  x26, 0x546b0e54528a10af
    sha256sig1 x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x000000004a56e190)
 
sha256sig1_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x0000000082a1ea00), rs1:x25(0x73a92fd4e19bfbc3)
    li  x25, 0x73a92fd4e19bfbc3
    sha256sig1 x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000082a1ea00)
 
sha256sig1_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x000000002724288e), rs1:x24(0x82f6747f707af2c0)
    li  x24, 0x82f6747f707af2c0
    sha256sig1 x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x000000002724288e)
 
sha256sig1_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0x000000002a0fb9f5), rs1:x23(0xf5adb41aa47d105b)
    li  x23, 0xf5adb41aa47d105b
    sha256sig1 x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x000000002a0fb9f5)
 
sha256sig1_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0x000000009f916dbd), rs1:x22(0xdf7f3844121bcc23)
    li  x22, 0xdf7f3844121bcc23
    sha256sig1 x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x000000009f916dbd)


    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_3_0)

 
sha256sig1_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x000000000000a000), rs1:x21(0x0000000000000001)
    li  x21, 0x1
    sha256sig1 x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x000000000000a000)
 
sha256sig1_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x0000000000014000), rs1:x20(0x0000000000000002)
    li  x20, 0x2
    sha256sig1 x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0000000000014000)
 
sha256sig1_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x0000000000028000), rs1:x19(0x0000000000000004)
    li  x19, 0x4
    sha256sig1 x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0000000000028000)
 
sha256sig1_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0000000000050000), rs1:x18(0x0000000000000008)
    li  x18, 0x8
    sha256sig1 x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0000000000050000)
 
sha256sig1_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x00000000000a0000), rs1:x17(0x0000000000000010)
    li  x17, 0x10
    sha256sig1 x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x00000000000a0000)


    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x2,signature_4_0)

 
sha256sig1_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x0000000000140000), rs1:x16(0x0000000000000020)
    li  x16, 0x20
    sha256sig1 x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0000000000140000)
 
sha256sig1_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x0000000000280000), rs1:x15(0x0000000000000040)
    li  x15, 0x40
    sha256sig1 x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x0000000000280000)
 
sha256sig1_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x0000000000500000), rs1:x14(0x0000000000000080)
    li  x14, 0x80
    sha256sig1 x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x0000000000500000)
 
sha256sig1_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0000000000a00000), rs1:x13(0x0000000000000100)
    li  x13, 0x100
    sha256sig1 x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0000000000a00000)
 
sha256sig1_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0000000001400000), rs1:x12(0x0000000000000200)
    li  x12, 0x200
    sha256sig1 x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0000000001400000)


    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_5_0)

 
sha256sig1_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x0000000002800001), rs1:x11(0x0000000000000400)
    li  x11, 0x400
    sha256sig1 x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000002800001)
 
sha256sig1_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0000000005000002), rs1:x10(0x0000000000000800)
    li  x10, 0x800
    sha256sig1 x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000005000002)
 
sha256sig1_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x000000000a000004), rs1:x9(0x0000000000001000)
    li  x9, 0x1000
    sha256sig1 x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x000000000a000004)
 
sha256sig1_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0000000014000008), rs1:x8(0x0000000000002000)
    li  x8, 0x2000
    sha256sig1 x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000014000008)
 
sha256sig1_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x0000000028000010), rs1:x7(0x0000000000004000)
    li  x7, 0x4000
    sha256sig1 x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000028000010)


    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_6_0)

 
sha256sig1_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x0000000050000020), rs1:x6(0x0000000000008000)
    li  x6, 0x8000
    sha256sig1 x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x0000000050000020)
 
sha256sig1_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x00000000a0000040), rs1:x5(0x0000000000010000)
    li  x5, 0x10000
    sha256sig1 x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x00000000a0000040)
 
sha256sig1_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x0000000040000081), rs1:x4(0x0000000000020000)
    li  x4, 0x20000
    sha256sig1 x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000040000081)
 
sha256sig1_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0000000080000102), rs1:x3(0x0000000000040000)
    li  x3, 0x40000
    sha256sig1 x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000080000102)
 
sha256sig1_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000205), rs1:x2(0x0000000000080000)
    li  x2, 0x80000
    sha256sig1 x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000000000205)


    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x5,signature_7_0)

 
sha256sig1_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x000000000000040a), rs1:x1(0x0000000000100000)
    li  x1, 0x100000
    sha256sig1 x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x000000000000040a)
 
sha256sig1_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000814), rs1:x31(0x0000000000200000)
    li  x31, 0x200000
    sha256sig1 x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0000000000000814)
 
sha256sig1_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0000000000001028), rs1:x30(0x0000000000400000)
    li  x30, 0x400000
    sha256sig1 x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0000000000001028)
 
sha256sig1_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0000000000002050), rs1:x29(0x0000000000800000)
    li  x29, 0x800000
    sha256sig1 x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0000000000002050)
 
sha256sig1_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x00000000000040a0), rs1:x28(0x0000000001000000)
    li  x28, 0x1000000
    sha256sig1 x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x00000000000040a0)


    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_8_0)

 
sha256sig1_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x0000000000008140), rs1:x27(0x0000000002000000)
    li  x27, 0x2000000
    sha256sig1 x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000000008140)
 
sha256sig1_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x0000000000010280), rs1:x26(0x0000000004000000)
    li  x26, 0x4000000
    sha256sig1 x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000010280)
 
sha256sig1_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0000000000020500), rs1:x25(0x0000000008000000)
    li  x25, 0x8000000
    sha256sig1 x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000000020500)
 
sha256sig1_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0000000000040a00), rs1:x24(0x0000000010000000)
    li  x24, 0x10000000
    sha256sig1 x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000000040a00)
 
sha256sig1_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0000000000081400), rs1:x23(0x0000000020000000)
    li  x23, 0x20000000
    sha256sig1 x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000081400)


    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_9_0)

 
sha256sig1_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x0000000000102800), rs1:x22(0x0000000040000000)
    li  x22, 0x40000000
    sha256sig1 x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000000102800)
 
sha256sig1_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0000000000205000), rs1:x21(0x0000000080000000)
    li  x21, 0x80000000
    sha256sig1 x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000205000)
 
sha256sig1_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000100000000)
    li  x20, 0x100000000
    sha256sig1 x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000000000000)
 
sha256sig1_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000200000000)
    li  x19, 0x200000000
    sha256sig1 x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)
 
sha256sig1_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0000000400000000)
    li  x18, 0x400000000
    sha256sig1 x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x0000000000000000)


    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x3,signature_10_0)

 
sha256sig1_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x0000000800000000)
    li  x17, 0x800000000
    sha256sig1 x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x0000000000000000)
 
sha256sig1_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x0000001000000000)
    li  x16, 0x1000000000
    sha256sig1 x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0000000000000000)
 
sha256sig1_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000002000000000)
    li  x15, 0x2000000000
    sha256sig1 x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x0000000000000000)
 
sha256sig1_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000004000000000)
    li  x14, 0x4000000000
    sha256sig1 x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x0000000000000000)
 
sha256sig1_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000008000000000)
    li  x13, 0x8000000000
    sha256sig1 x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000000000000000)


    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_11_0)

 
sha256sig1_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000010000000000)
    li  x12, 0x10000000000
    sha256sig1 x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0000000000000000)
 
sha256sig1_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000020000000000)
    li  x11, 0x20000000000
    sha256sig1 x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000000000000)
 
sha256sig1_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000040000000000)
    li  x10, 0x40000000000
    sha256sig1 x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000000000000)
 
sha256sig1_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000080000000000)
    li  x9, 0x80000000000
    sha256sig1 x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000000000000)
 
sha256sig1_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000100000000000)
    li  x8, 0x100000000000
    sha256sig1 x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000000000000)


    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_12_0)

 
sha256sig1_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000200000000000)
    li  x7, 0x200000000000
    sha256sig1 x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000000000000)
 
sha256sig1_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000400000000000)
    li  x6, 0x400000000000
    sha256sig1 x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000000000)
 
sha256sig1_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000800000000000)
    li  x5, 0x800000000000
    sha256sig1 x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x0000000000000000)
 
sha256sig1_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0001000000000000)
    li  x4, 0x1000000000000
    sha256sig1 x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x0000000000000000)
 
sha256sig1_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0002000000000000)
    li  x3, 0x2000000000000
    sha256sig1 x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x0000000000000000)


    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x4,signature_13_0)

 
sha256sig1_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0004000000000000)
    li  x2, 0x4000000000000
    sha256sig1 x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x0000000000000000)
 
sha256sig1_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0008000000000000)
    li  x1, 0x8000000000000
    sha256sig1 x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x0000000000000000)
 
sha256sig1_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0010000000000000)
    li  x31, 0x10000000000000
    sha256sig1 x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x0000000000000000)
 
sha256sig1_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0020000000000000)
    li  x30, 0x20000000000000
    sha256sig1 x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x0000000000000000)
 
sha256sig1_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0040000000000000)
    li  x29, 0x40000000000000
    sha256sig1 x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x0000000000000000)


    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_14_0)

 
sha256sig1_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0080000000000000)
    li  x28, 0x80000000000000
    sha256sig1 x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x0000000000000000)
 
sha256sig1_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0100000000000000)
    li  x27, 0x100000000000000
    sha256sig1 x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000000000000)
 
sha256sig1_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0200000000000000)
    li  x26, 0x200000000000000
    sha256sig1 x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000000000)
 
sha256sig1_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0400000000000000)
    li  x25, 0x400000000000000
    sha256sig1 x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000000000000)
 
sha256sig1_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0800000000000000)
    li  x24, 0x800000000000000
    sha256sig1 x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000000000000)


    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_15_0)

 
sha256sig1_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x1000000000000000)
    li  x23, 0x1000000000000000
    sha256sig1 x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000000000)
 
sha256sig1_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x2000000000000000)
    li  x22, 0x2000000000000000
    sha256sig1 x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000000000000)
 
sha256sig1_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x4000000000000000)
    li  x21, 0x4000000000000000
    sha256sig1 x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)
 
sha256sig1_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x8000000000000000)
    li  x20, 0x8000000000000000
    sha256sig1 x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000000000000)
 
sha256sig1_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000)
    li  x19, 0x0
    sha256sig1 x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)


    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x4,signature_16_0)

 
sha256sig1_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0x00000000003f5fff), rs1:x18(0xfffffffffffffffe)
    li  x18, 0xfffffffffffffffe
    sha256sig1 x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0x00000000003f5fff)
 
sha256sig1_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0x00000000003ebfff), rs1:x17(0xfffffffffffffffd)
    li  x17, 0xfffffffffffffffd
    sha256sig1 x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0x00000000003ebfff)
 
sha256sig1_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0x00000000003d7fff), rs1:x16(0xfffffffffffffffb)
    li  x16, 0xfffffffffffffffb
    sha256sig1 x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0x00000000003d7fff)
 
sha256sig1_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0x00000000003affff), rs1:x15(0xfffffffffffffff7)
    li  x15, 0xfffffffffffffff7
    sha256sig1 x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0x00000000003affff)
 
sha256sig1_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0x000000000035ffff), rs1:x14(0xffffffffffffffef)
    li  x14, 0xffffffffffffffef
    sha256sig1 x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0x000000000035ffff)


    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_17_0)

 
sha256sig1_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0x00000000002bffff), rs1:x13(0xffffffffffffffdf)
    li  x13, 0xffffffffffffffdf
    sha256sig1 x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x00000000002bffff)
 
sha256sig1_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0x000000000017ffff), rs1:x12(0xffffffffffffffbf)
    li  x12, 0xffffffffffffffbf
    sha256sig1 x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x000000000017ffff)
 
sha256sig1_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0x00000000006fffff), rs1:x11(0xffffffffffffff7f)
    li  x11, 0xffffffffffffff7f
    sha256sig1 x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000006fffff)
 
sha256sig1_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0x00000000009fffff), rs1:x10(0xfffffffffffffeff)
    li  x10, 0xfffffffffffffeff
    sha256sig1 x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000009fffff)
 
sha256sig1_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0x00000000017fffff), rs1:x9(0xfffffffffffffdff)
    li  x9, 0xfffffffffffffdff
    sha256sig1 x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000017fffff)


    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_18_0)

 
sha256sig1_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0x0000000002bffffe), rs1:x8(0xfffffffffffffbff)
    li  x8, 0xfffffffffffffbff
    sha256sig1 x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000002bffffe)
 
sha256sig1_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0x00000000053ffffd), rs1:x7(0xfffffffffffff7ff)
    li  x7, 0xfffffffffffff7ff
    sha256sig1 x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x00000000053ffffd)
 
sha256sig1_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0x000000000a3ffffb), rs1:x6(0xffffffffffffefff)
    li  x6, 0xffffffffffffefff
    sha256sig1 x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x000000000a3ffffb)
 
sha256sig1_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0x00000000143ffff7), rs1:x5(0xffffffffffffdfff)
    li  x5, 0xffffffffffffdfff
    sha256sig1 x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x00000000143ffff7)
 
sha256sig1_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0x00000000283fffef), rs1:x4(0xffffffffffffbfff)
    li  x4, 0xffffffffffffbfff
    sha256sig1 x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x00000000283fffef)


    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x4,signature_19_0)

 
sha256sig1_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0x00000000503fffdf), rs1:x3(0xffffffffffff7fff)
    li  x3, 0xffffffffffff7fff
    sha256sig1 x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0x00000000503fffdf)
 
sha256sig1_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0x00000000a03fffbf), rs1:x2(0xfffffffffffeffff)
    li  x2, 0xfffffffffffeffff
    sha256sig1 x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x00000000a03fffbf)
 
sha256sig1_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0x00000000403fff7e), rs1:x1(0xfffffffffffdffff)
    li  x1, 0xfffffffffffdffff
    sha256sig1 x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x00000000403fff7e)
 
sha256sig1_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0x00000000803ffefd), rs1:x31(0xfffffffffffbffff)
    li  x31, 0xfffffffffffbffff
    sha256sig1 x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x00000000803ffefd)
 
sha256sig1_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0x00000000003ffdfa), rs1:x30(0xfffffffffff7ffff)
    li  x30, 0xfffffffffff7ffff
    sha256sig1 x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x00000000003ffdfa)


    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_20_0)

 
sha256sig1_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0x00000000003ffbf5), rs1:x29(0xffffffffffefffff)
    li  x29, 0xffffffffffefffff
    sha256sig1 x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0x00000000003ffbf5)
 
sha256sig1_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0x00000000003ff7eb), rs1:x28(0xffffffffffdfffff)
    li  x28, 0xffffffffffdfffff
    sha256sig1 x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x00000000003ff7eb)
 
sha256sig1_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0x00000000003fefd7), rs1:x27(0xffffffffffbfffff)
    li  x27, 0xffffffffffbfffff
    sha256sig1 x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x00000000003fefd7)
 
sha256sig1_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0x00000000003fdfaf), rs1:x26(0xffffffffff7fffff)
    li  x26, 0xffffffffff7fffff
    sha256sig1 x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x00000000003fdfaf)
 
sha256sig1_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0x00000000003fbf5f), rs1:x25(0xfffffffffeffffff)
    li  x25, 0xfffffffffeffffff
    sha256sig1 x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x00000000003fbf5f)


    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_21_0)

 
sha256sig1_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0x00000000003f7ebf), rs1:x24(0xfffffffffdffffff)
    li  x24, 0xfffffffffdffffff
    sha256sig1 x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000003f7ebf)
 
sha256sig1_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0x00000000003efd7f), rs1:x23(0xfffffffffbffffff)
    li  x23, 0xfffffffffbffffff
    sha256sig1 x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000003efd7f)
 
sha256sig1_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0x00000000003dfaff), rs1:x22(0xfffffffff7ffffff)
    li  x22, 0xfffffffff7ffffff
    sha256sig1 x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000003dfaff)
 
sha256sig1_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0x00000000003bf5ff), rs1:x21(0xffffffffefffffff)
    li  x21, 0xffffffffefffffff
    sha256sig1 x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x00000000003bf5ff)
 
sha256sig1_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0x000000000037ebff), rs1:x20(0xffffffffdfffffff)
    li  x20, 0xffffffffdfffffff
    sha256sig1 x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x000000000037ebff)


    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x5,signature_22_0)

 
sha256sig1_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0x00000000002fd7ff), rs1:x19(0xffffffffbfffffff)
    li  x19, 0xffffffffbfffffff
    sha256sig1 x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0x00000000002fd7ff)
 
sha256sig1_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0x00000000001fafff), rs1:x18(0xffffffff7fffffff)
    li  x18, 0xffffffff7fffffff
    sha256sig1 x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0x00000000001fafff)
 
sha256sig1_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0x00000000003fffff), rs1:x17(0xfffffffeffffffff)
    li  x17, 0xfffffffeffffffff
    sha256sig1 x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0x00000000003fffff)
 
sha256sig1_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0x00000000003fffff), rs1:x16(0xfffffffdffffffff)
    li  x16, 0xfffffffdffffffff
    sha256sig1 x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0x00000000003fffff)
 
sha256sig1_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0x00000000003fffff), rs1:x15(0xfffffffbffffffff)
    li  x15, 0xfffffffbffffffff
    sha256sig1 x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0x00000000003fffff)


    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_23_0)

 
sha256sig1_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0x00000000003fffff), rs1:x14(0xfffffff7ffffffff)
    li  x14, 0xfffffff7ffffffff
    sha256sig1 x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x00000000003fffff)
 
sha256sig1_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0x00000000003fffff), rs1:x13(0xffffffefffffffff)
    li  x13, 0xffffffefffffffff
    sha256sig1 x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x00000000003fffff)
 
sha256sig1_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0x00000000003fffff), rs1:x12(0xffffffdfffffffff)
    li  x12, 0xffffffdfffffffff
    sha256sig1 x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000003fffff)
 
sha256sig1_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0x00000000003fffff), rs1:x11(0xffffffbfffffffff)
    li  x11, 0xffffffbfffffffff
    sha256sig1 x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000003fffff)
 
sha256sig1_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0x00000000003fffff), rs1:x10(0xffffff7fffffffff)
    li  x10, 0xffffff7fffffffff
    sha256sig1 x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000003fffff)


    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_24_0)

 
sha256sig1_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0x00000000003fffff), rs1:x9(0xfffffeffffffffff)
    li  x9, 0xfffffeffffffffff
    sha256sig1 x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000003fffff)
 
sha256sig1_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0x00000000003fffff), rs1:x8(0xfffffdffffffffff)
    li  x8, 0xfffffdffffffffff
    sha256sig1 x24, x8
    sd x24, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x00000000003fffff)
 
sha256sig1_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0x00000000003fffff), rs1:x7(0xfffffbffffffffff)
    li  x7, 0xfffffbffffffffff
    sha256sig1 x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x00000000003fffff)
 
sha256sig1_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0x00000000003fffff), rs1:x6(0xfffff7ffffffffff)
    li  x6, 0xfffff7ffffffffff
    sha256sig1 x26, x6
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x00000000003fffff)
 
sha256sig1_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0x00000000003fffff), rs1:x5(0xffffefffffffffff)
    li  x5, 0xffffefffffffffff
    sha256sig1 x27, x5
    sd x27, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x00000000003fffff)


    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x5,signature_25_0)

 
sha256sig1_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0x00000000003fffff), rs1:x4(0xffffdfffffffffff)
    li  x4, 0xffffdfffffffffff
    sha256sig1 x28, x4
    sd x28, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x28, 0x00000000003fffff)
 
sha256sig1_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0x00000000003fffff), rs1:x3(0xffffbfffffffffff)
    li  x3, 0xffffbfffffffffff
    sha256sig1 x29, x3
    sd x29, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x29, 0x00000000003fffff)
 
sha256sig1_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0x00000000003fffff), rs1:x2(0xffff7fffffffffff)
    li  x2, 0xffff7fffffffffff
    sha256sig1 x30, x2
    sd x30, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x30, 0x00000000003fffff)
 
sha256sig1_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0x00000000003fffff), rs1:x1(0xfffeffffffffffff)
    li  x1, 0xfffeffffffffffff
    sha256sig1 x31, x1
    sd x31, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x00000000003fffff)
 
sha256sig1_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0x00000000003fffff), rs1:x31(0xfffdffffffffffff)
    li  x31, 0xfffdffffffffffff
    sha256sig1 x1, x31
    sd x1, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x00000000003fffff)


    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_26_0)

 
sha256sig1_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0x00000000003fffff), rs1:x30(0xfffbffffffffffff)
    li  x30, 0xfffbffffffffffff
    sha256sig1 x2, x30
    sd x2, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x00000000003fffff)
 
sha256sig1_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0x00000000003fffff), rs1:x29(0xfff7ffffffffffff)
    li  x29, 0xfff7ffffffffffff
    sha256sig1 x3, x29
    sd x3, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x00000000003fffff)
 
sha256sig1_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0x00000000003fffff), rs1:x28(0xffefffffffffffff)
    li  x28, 0xffefffffffffffff
    sha256sig1 x4, x28
    sd x4, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x00000000003fffff)
 
sha256sig1_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0x00000000003fffff), rs1:x27(0xffdfffffffffffff)
    li  x27, 0xffdfffffffffffff
    sha256sig1 x5, x27
    sd x5, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x00000000003fffff)
 
sha256sig1_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0x00000000003fffff), rs1:x26(0xffbfffffffffffff)
    li  x26, 0xffbfffffffffffff
    sha256sig1 x6, x26
    sd x6, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x6, 0x00000000003fffff)


    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_27_0)

 
sha256sig1_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0x00000000003fffff), rs1:x25(0xff7fffffffffffff)
    li  x25, 0xff7fffffffffffff
    sha256sig1 x7, x25
    sd x7, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x00000000003fffff)
 
sha256sig1_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0x00000000003fffff), rs1:x24(0xfeffffffffffffff)
    li  x24, 0xfeffffffffffffff
    sha256sig1 x8, x24
    sd x8, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000003fffff)
 
sha256sig1_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0x00000000003fffff), rs1:x23(0xfdffffffffffffff)
    li  x23, 0xfdffffffffffffff
    sha256sig1 x9, x23
    sd x9, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000003fffff)
 
sha256sig1_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0x00000000003fffff), rs1:x22(0xfbffffffffffffff)
    li  x22, 0xfbffffffffffffff
    sha256sig1 x10, x22
    sd x10, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000003fffff)
 
sha256sig1_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0x00000000003fffff), rs1:x21(0xf7ffffffffffffff)
    li  x21, 0xf7ffffffffffffff
    sha256sig1 x11, x21
    sd x11, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x00000000003fffff)


    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x6,signature_28_0)

 
sha256sig1_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0x00000000003fffff), rs1:x20(0xefffffffffffffff)
    li  x20, 0xefffffffffffffff
    sha256sig1 x12, x20
    sd x12, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x00000000003fffff)
 
sha256sig1_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0x00000000003fffff), rs1:x19(0xdfffffffffffffff)
    li  x19, 0xdfffffffffffffff
    sha256sig1 x13, x19
    sd x13, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x00000000003fffff)
 
sha256sig1_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0x00000000003fffff), rs1:x18(0xbfffffffffffffff)
    li  x18, 0xbfffffffffffffff
    sha256sig1 x14, x18
    sd x14, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x00000000003fffff)
 
sha256sig1_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0x00000000003fffff), rs1:x17(0x7fffffffffffffff)
    li  x17, 0x7fffffffffffffff
    sha256sig1 x15, x17
    sd x15, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x00000000003fffff)
 
sha256sig1_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0x00000000003fffff), rs1:x16(0xffffffffffffffff)
    li  x16, 0xffffffffffffffff
    sha256sig1 x16, x16
    sd x16, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x16, 0x00000000003fffff)


    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_29_0)

 
sha256sig1_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x000000000000a000), rs1:x15(0x0000000000000001)
    li  x15, 0x1
    sha256sig1 x17, x15
    sd x17, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x17, 0x000000000000a000)
 
sha256sig1_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0000000000014000), rs1:x14(0x0000000000000002)
    li  x14, 0x2
    sha256sig1 x18, x14
    sd x18, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x0000000000014000)
 
sha256sig1_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0000000000028000), rs1:x13(0x0000000000000004)
    li  x13, 0x4
    sha256sig1 x19, x13
    sd x19, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x0000000000028000)
 
sha256sig1_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0000000000050000), rs1:x12(0x0000000000000008)
    li  x12, 0x8
    sha256sig1 x20, x12
    sd x20, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0000000000050000)
 
sha256sig1_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x00000000000a0000), rs1:x11(0x0000000000000010)
    li  x11, 0x10
    sha256sig1 x21, x11
    sd x21, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000000a0000)


    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_30_0)

 
sha256sig1_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0000000000140000), rs1:x10(0x0000000000000020)
    li  x10, 0x20
    sha256sig1 x22, x10
    sd x22, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000000140000)
 
sha256sig1_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0000000000280000), rs1:x9(0x0000000000000040)
    li  x9, 0x40
    sha256sig1 x23, x9
    sd x23, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000000280000)
 
sha256sig1_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0000000000500000), rs1:x8(0x0000000000000080)
    li  x8, 0x80
    sha256sig1 x24, x8
    sd x24, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000000500000)
 
sha256sig1_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000000a00000), rs1:x7(0x0000000000000100)
    li  x7, 0x100
    sha256sig1 x25, x7
    sd x25, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000000a00000)
 
sha256sig1_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000001400000), rs1:x6(0x0000000000000200)
    li  x6, 0x200
    sha256sig1 x26, x6
    sd x26, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000001400000)


    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x6,signature_31_0)

 
sha256sig1_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000000002800001), rs1:x5(0x0000000000000400)
    li  x5, 0x400
    sha256sig1 x27, x5
    sd x27, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000002800001)
 
sha256sig1_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000005000002), rs1:x4(0x0000000000000800)
    li  x4, 0x800
    sha256sig1 x28, x4
    sd x28, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000005000002)
 
sha256sig1_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x000000000a000004), rs1:x3(0x0000000000001000)
    li  x3, 0x1000
    sha256sig1 x29, x3
    sd x29, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x000000000a000004)
 
sha256sig1_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000014000008), rs1:x2(0x0000000000002000)
    li  x2, 0x2000
    sha256sig1 x30, x2
    sd x30, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000014000008)
 
sha256sig1_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0000000028000010), rs1:x1(0x0000000000004000)
    li  x1, 0x4000
    sha256sig1 x31, x1
    sd x31, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x0000000028000010)


    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x6,signature_32_0)

 
sha256sig1_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000050000020), rs1:x31(0x0000000000008000)
    li  x31, 0x8000
    sha256sig1 x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x0000000050000020)
 
sha256sig1_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x00000000a0000040), rs1:x30(0x0000000000010000)
    li  x30, 0x10000
    sha256sig1 x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x00000000a0000040)
 
sha256sig1_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000040000081), rs1:x29(0x0000000000020000)
    li  x29, 0x20000
    sha256sig1 x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x0000000040000081)
 
sha256sig1_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000080000102), rs1:x28(0x0000000000040000)
    li  x28, 0x40000
    sha256sig1 x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x0000000080000102)
 
sha256sig1_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000205), rs1:x27(0x0000000000080000)
    li  x27, 0x80000
    sha256sig1 x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x0000000000000205)


    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_33_0)

 
sha256sig1_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x000000000000040a), rs1:x26(0x0000000000100000)
    li  x26, 0x100000
    sha256sig1 x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x000000000000040a)
 
sha256sig1_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000814), rs1:x25(0x0000000000200000)
    li  x25, 0x200000
    sha256sig1 x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000000000814)
 
sha256sig1_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000000001028), rs1:x24(0x0000000000400000)
    li  x24, 0x400000
    sha256sig1 x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000000001028)
 
sha256sig1_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000000002050), rs1:x23(0x0000000000800000)
    li  x23, 0x800000
    sha256sig1 x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000002050)
 
sha256sig1_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x00000000000040a0), rs1:x22(0x0000000001000000)
    li  x22, 0x1000000
    sha256sig1 x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000000040a0)


    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_34_0)

 
sha256sig1_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000000008140), rs1:x21(0x0000000002000000)
    li  x21, 0x2000000
    sha256sig1 x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x0000000000008140)
 
sha256sig1_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000000010280), rs1:x20(0x0000000004000000)
    li  x20, 0x4000000
    sha256sig1 x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0000000000010280)
 
sha256sig1_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000000020500), rs1:x19(0x0000000008000000)
    li  x19, 0x8000000
    sha256sig1 x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0000000000020500)
 
sha256sig1_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000000040a00), rs1:x18(0x0000000010000000)
    li  x18, 0x10000000
    sha256sig1 x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0000000000040a00)
 
sha256sig1_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000000081400), rs1:x17(0x0000000020000000)
    li  x17, 0x20000000
    sha256sig1 x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0000000000081400)


    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x2,signature_35_0)

 
sha256sig1_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000000102800), rs1:x16(0x0000000040000000)
    li  x16, 0x40000000
    sha256sig1 x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0000000000102800)
 
sha256sig1_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000000000205000), rs1:x15(0x0000000080000000)
    li  x15, 0x80000000
    sha256sig1 x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x0000000000205000)
 
sha256sig1_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000000100000000)
    li  x14, 0x100000000
    sha256sig1 x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x0000000000000000)
 
sha256sig1_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000200000000)
    li  x13, 0x200000000
    sha256sig1 x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0000000000000000)
 
sha256sig1_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000000400000000)
    li  x12, 0x400000000
    sha256sig1 x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0000000000000000)


    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_36_0)

 
sha256sig1_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000800000000)
    li  x11, 0x800000000
    sha256sig1 x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000000000000)
 
sha256sig1_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000001000000000)
    li  x10, 0x1000000000
    sha256sig1 x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000000000000)
 
sha256sig1_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000002000000000)
    li  x9, 0x2000000000
    sha256sig1 x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000000000000)
 
sha256sig1_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000004000000000)
    li  x8, 0x4000000000
    sha256sig1 x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000000000000)
 
sha256sig1_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000008000000000)
    li  x7, 0x8000000000
    sha256sig1 x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000000000000)


    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_37_0)

 
sha256sig1_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000010000000000)
    li  x6, 0x10000000000
    sha256sig1 x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x0000000000000000)
 
sha256sig1_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000020000000000)
    li  x5, 0x20000000000
    sha256sig1 x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000000000000)
 
sha256sig1_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000040000000000)
    li  x4, 0x40000000000
    sha256sig1 x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000000000000)
 
sha256sig1_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000080000000000)
    li  x3, 0x80000000000
    sha256sig1 x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000000000000)
 
sha256sig1_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000100000000000)
    li  x2, 0x100000000000
    sha256sig1 x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000000000000)


    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x5,signature_38_0)

 
sha256sig1_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000200000000000)
    li  x1, 0x200000000000
    sha256sig1 x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0000000000000000)
 
sha256sig1_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000400000000000)
    li  x31, 0x400000000000
    sha256sig1 x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0000000000000000)
 
sha256sig1_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000800000000000)
    li  x30, 0x800000000000
    sha256sig1 x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0000000000000000)
 
sha256sig1_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0001000000000000)
    li  x29, 0x1000000000000
    sha256sig1 x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0000000000000000)
 
sha256sig1_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0002000000000000)
    li  x28, 0x2000000000000
    sha256sig1 x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0000000000000000)


    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_39_0)

 
sha256sig1_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0004000000000000)
    li  x27, 0x4000000000000
    sha256sig1 x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000000000000)
 
sha256sig1_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0008000000000000)
    li  x26, 0x8000000000000
    sha256sig1 x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000000000)
 
sha256sig1_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0010000000000000)
    li  x25, 0x10000000000000
    sha256sig1 x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000000000000)
 
sha256sig1_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0020000000000000)
    li  x24, 0x20000000000000
    sha256sig1 x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000000000000)
 
sha256sig1_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0040000000000000)
    li  x23, 0x40000000000000
    sha256sig1 x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000000000)


    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_40_0)

 
sha256sig1_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0080000000000000)
    li  x22, 0x80000000000000
    sha256sig1 x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000000000000)
 
sha256sig1_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0100000000000000)
    li  x21, 0x100000000000000
    sha256sig1 x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)
 
sha256sig1_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0200000000000000)
    li  x20, 0x200000000000000
    sha256sig1 x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000000000000)
 
sha256sig1_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0400000000000000)
    li  x19, 0x400000000000000
    sha256sig1 x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)
 
sha256sig1_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0800000000000000)
    li  x18, 0x800000000000000
    sha256sig1 x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x0000000000000000)


    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x3,signature_41_0)

 
sha256sig1_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x1000000000000000)
    li  x17, 0x1000000000000000
    sha256sig1 x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x0000000000000000)
 
sha256sig1_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x2000000000000000)
    li  x16, 0x2000000000000000
    sha256sig1 x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0000000000000000)
 
sha256sig1_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x4000000000000000)
    li  x15, 0x4000000000000000
    sha256sig1 x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x0000000000000000)
 
sha256sig1_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x8000000000000000)
    li  x14, 0x8000000000000000
    sha256sig1 x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x0000000000000000)
 
sha256sig1_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000)
    li  x13, 0x0
    sha256sig1 x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000000000000000)


    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_42_0)

 
sha256sig1_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0x00000000003f5fff), rs1:x12(0xfffffffffffffffe)
    li  x12, 0xfffffffffffffffe
    sha256sig1 x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000003f5fff)
 
sha256sig1_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0x00000000003ebfff), rs1:x11(0xfffffffffffffffd)
    li  x11, 0xfffffffffffffffd
    sha256sig1 x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000003ebfff)
 
sha256sig1_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0x00000000003d7fff), rs1:x10(0xfffffffffffffffb)
    li  x10, 0xfffffffffffffffb
    sha256sig1 x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000003d7fff)
 
sha256sig1_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0x00000000003affff), rs1:x9(0xfffffffffffffff7)
    li  x9, 0xfffffffffffffff7
    sha256sig1 x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000003affff)
 
sha256sig1_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0x000000000035ffff), rs1:x8(0xffffffffffffffef)
    li  x8, 0xffffffffffffffef
    sha256sig1 x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x000000000035ffff)


    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_43_0)

 
sha256sig1_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0x00000000002bffff), rs1:x7(0xffffffffffffffdf)
    li  x7, 0xffffffffffffffdf
    sha256sig1 x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x00000000002bffff)
 
sha256sig1_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0x000000000017ffff), rs1:x6(0xffffffffffffffbf)
    li  x6, 0xffffffffffffffbf
    sha256sig1 x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x000000000017ffff)
 
sha256sig1_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0x00000000006fffff), rs1:x5(0xffffffffffffff7f)
    li  x5, 0xffffffffffffff7f
    sha256sig1 x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x00000000006fffff)
 
sha256sig1_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0x00000000009fffff), rs1:x4(0xfffffffffffffeff)
    li  x4, 0xfffffffffffffeff
    sha256sig1 x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x00000000009fffff)
 
sha256sig1_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0x00000000017fffff), rs1:x3(0xfffffffffffffdff)
    li  x3, 0xfffffffffffffdff
    sha256sig1 x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x00000000017fffff)


    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x4,signature_44_0)

 
sha256sig1_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0x0000000002bffffe), rs1:x2(0xfffffffffffffbff)
    li  x2, 0xfffffffffffffbff
    sha256sig1 x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x0000000002bffffe)
 
sha256sig1_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0x00000000053ffffd), rs1:x1(0xfffffffffffff7ff)
    li  x1, 0xfffffffffffff7ff
    sha256sig1 x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x00000000053ffffd)
 
sha256sig1_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0x000000000a3ffffb), rs1:x31(0xffffffffffffefff)
    li  x31, 0xffffffffffffefff
    sha256sig1 x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x000000000a3ffffb)
 
sha256sig1_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0x00000000143ffff7), rs1:x30(0xffffffffffffdfff)
    li  x30, 0xffffffffffffdfff
    sha256sig1 x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x00000000143ffff7)
 
sha256sig1_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0x00000000283fffef), rs1:x29(0xffffffffffffbfff)
    li  x29, 0xffffffffffffbfff
    sha256sig1 x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x00000000283fffef)


    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_45_0)

 
sha256sig1_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0x00000000503fffdf), rs1:x28(0xffffffffffff7fff)
    li  x28, 0xffffffffffff7fff
    sha256sig1 x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x00000000503fffdf)
 
sha256sig1_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0x00000000a03fffbf), rs1:x27(0xfffffffffffeffff)
    li  x27, 0xfffffffffffeffff
    sha256sig1 x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x00000000a03fffbf)
 
sha256sig1_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0x00000000403fff7e), rs1:x26(0xfffffffffffdffff)
    li  x26, 0xfffffffffffdffff
    sha256sig1 x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x00000000403fff7e)
 
sha256sig1_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0x00000000803ffefd), rs1:x25(0xfffffffffffbffff)
    li  x25, 0xfffffffffffbffff
    sha256sig1 x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x00000000803ffefd)
 
sha256sig1_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0x00000000003ffdfa), rs1:x24(0xfffffffffff7ffff)
    li  x24, 0xfffffffffff7ffff
    sha256sig1 x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000003ffdfa)


    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_46_0)

 
sha256sig1_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0x00000000003ffbf5), rs1:x23(0xffffffffffefffff)
    li  x23, 0xffffffffffefffff
    sha256sig1 x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000003ffbf5)
 
sha256sig1_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0x00000000003ff7eb), rs1:x22(0xffffffffffdfffff)
    li  x22, 0xffffffffffdfffff
    sha256sig1 x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000003ff7eb)
 
sha256sig1_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0x00000000003fefd7), rs1:x21(0xffffffffffbfffff)
    li  x21, 0xffffffffffbfffff
    sha256sig1 x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x00000000003fefd7)
 
sha256sig1_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0x00000000003fdfaf), rs1:x20(0xffffffffff7fffff)
    li  x20, 0xffffffffff7fffff
    sha256sig1 x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x00000000003fdfaf)
 
sha256sig1_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0x00000000003fbf5f), rs1:x19(0xfffffffffeffffff)
    li  x19, 0xfffffffffeffffff
    sha256sig1 x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x00000000003fbf5f)


    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x4,signature_47_0)

 
sha256sig1_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0x00000000003f7ebf), rs1:x18(0xfffffffffdffffff)
    li  x18, 0xfffffffffdffffff
    sha256sig1 x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0x00000000003f7ebf)
 
sha256sig1_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0x00000000003efd7f), rs1:x17(0xfffffffffbffffff)
    li  x17, 0xfffffffffbffffff
    sha256sig1 x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0x00000000003efd7f)
 
sha256sig1_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0x00000000003dfaff), rs1:x16(0xfffffffff7ffffff)
    li  x16, 0xfffffffff7ffffff
    sha256sig1 x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0x00000000003dfaff)
 
sha256sig1_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0x00000000003bf5ff), rs1:x15(0xffffffffefffffff)
    li  x15, 0xffffffffefffffff
    sha256sig1 x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0x00000000003bf5ff)
 
sha256sig1_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0x000000000037ebff), rs1:x14(0xffffffffdfffffff)
    li  x14, 0xffffffffdfffffff
    sha256sig1 x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0x000000000037ebff)


    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_48_0)

 
sha256sig1_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0x00000000002fd7ff), rs1:x13(0xffffffffbfffffff)
    li  x13, 0xffffffffbfffffff
    sha256sig1 x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x00000000002fd7ff)
 
sha256sig1_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0x00000000001fafff), rs1:x12(0xffffffff7fffffff)
    li  x12, 0xffffffff7fffffff
    sha256sig1 x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000001fafff)
 
sha256sig1_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0x00000000003fffff), rs1:x11(0xfffffffeffffffff)
    li  x11, 0xfffffffeffffffff
    sha256sig1 x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000003fffff)
 
sha256sig1_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0x00000000003fffff), rs1:x10(0xfffffffdffffffff)
    li  x10, 0xfffffffdffffffff
    sha256sig1 x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000003fffff)
 
sha256sig1_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0x00000000003fffff), rs1:x9(0xfffffffbffffffff)
    li  x9, 0xfffffffbffffffff
    sha256sig1 x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000003fffff)


    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_49_0)

 
sha256sig1_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0x00000000003fffff), rs1:x8(0xfffffff7ffffffff)
    li  x8, 0xfffffff7ffffffff
    sha256sig1 x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x00000000003fffff)
 
sha256sig1_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0x00000000003fffff), rs1:x7(0xffffffefffffffff)
    li  x7, 0xffffffefffffffff
    sha256sig1 x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x00000000003fffff)
 
sha256sig1_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0x00000000003fffff), rs1:x6(0xffffffdfffffffff)
    li  x6, 0xffffffdfffffffff
    sha256sig1 x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x00000000003fffff)
 
sha256sig1_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0x00000000003fffff), rs1:x5(0xffffffbfffffffff)
    li  x5, 0xffffffbfffffffff
    sha256sig1 x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x00000000003fffff)
 
sha256sig1_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0x00000000003fffff), rs1:x4(0xffffff7fffffffff)
    li  x4, 0xffffff7fffffffff
    sha256sig1 x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x00000000003fffff)


    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x4,signature_50_0)

 
sha256sig1_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0x00000000003fffff), rs1:x3(0xfffffeffffffffff)
    li  x3, 0xfffffeffffffffff
    sha256sig1 x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0x00000000003fffff)
 
sha256sig1_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0x00000000003fffff), rs1:x2(0xfffffdffffffffff)
    li  x2, 0xfffffdffffffffff
    sha256sig1 x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x00000000003fffff)
 
sha256sig1_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0x00000000003fffff), rs1:x1(0xfffffbffffffffff)
    li  x1, 0xfffffbffffffffff
    sha256sig1 x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x00000000003fffff)
 
sha256sig1_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0x00000000003fffff), rs1:x31(0xfffff7ffffffffff)
    li  x31, 0xfffff7ffffffffff
    sha256sig1 x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x00000000003fffff)
 
sha256sig1_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0x00000000003fffff), rs1:x30(0xffffefffffffffff)
    li  x30, 0xffffefffffffffff
    sha256sig1 x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x00000000003fffff)


    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_51_0)

 
sha256sig1_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0x00000000003fffff), rs1:x29(0xffffdfffffffffff)
    li  x29, 0xffffdfffffffffff
    sha256sig1 x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0x00000000003fffff)
 
sha256sig1_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0x00000000003fffff), rs1:x28(0xffffbfffffffffff)
    li  x28, 0xffffbfffffffffff
    sha256sig1 x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x00000000003fffff)
 
sha256sig1_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0x00000000003fffff), rs1:x27(0xffff7fffffffffff)
    li  x27, 0xffff7fffffffffff
    sha256sig1 x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x00000000003fffff)
 
sha256sig1_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0x00000000003fffff), rs1:x26(0xfffeffffffffffff)
    li  x26, 0xfffeffffffffffff
    sha256sig1 x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x00000000003fffff)
 
sha256sig1_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0x00000000003fffff), rs1:x25(0xfffdffffffffffff)
    li  x25, 0xfffdffffffffffff
    sha256sig1 x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x00000000003fffff)


    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_52_0)

 
sha256sig1_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0x00000000003fffff), rs1:x24(0xfffbffffffffffff)
    li  x24, 0xfffbffffffffffff
    sha256sig1 x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000003fffff)
 
sha256sig1_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0x00000000003fffff), rs1:x23(0xfff7ffffffffffff)
    li  x23, 0xfff7ffffffffffff
    sha256sig1 x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000003fffff)
 
sha256sig1_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0x00000000003fffff), rs1:x22(0xffefffffffffffff)
    li  x22, 0xffefffffffffffff
    sha256sig1 x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000003fffff)
 
sha256sig1_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0x00000000003fffff), rs1:x21(0xffdfffffffffffff)
    li  x21, 0xffdfffffffffffff
    sha256sig1 x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x00000000003fffff)
 
sha256sig1_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0x00000000003fffff), rs1:x20(0xffbfffffffffffff)
    li  x20, 0xffbfffffffffffff
    sha256sig1 x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x00000000003fffff)


    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x5,signature_53_0)

 
sha256sig1_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0x00000000003fffff), rs1:x19(0xff7fffffffffffff)
    li  x19, 0xff7fffffffffffff
    sha256sig1 x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0x00000000003fffff)
 
sha256sig1_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0x00000000003fffff), rs1:x18(0xfeffffffffffffff)
    li  x18, 0xfeffffffffffffff
    sha256sig1 x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0x00000000003fffff)
 
sha256sig1_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0x00000000003fffff), rs1:x17(0xfdffffffffffffff)
    li  x17, 0xfdffffffffffffff
    sha256sig1 x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0x00000000003fffff)
 
sha256sig1_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0x00000000003fffff), rs1:x16(0xfbffffffffffffff)
    li  x16, 0xfbffffffffffffff
    sha256sig1 x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0x00000000003fffff)
 
sha256sig1_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0x00000000003fffff), rs1:x15(0xf7ffffffffffffff)
    li  x15, 0xf7ffffffffffffff
    sha256sig1 x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0x00000000003fffff)


    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_54_0)

 
sha256sig1_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0x00000000003fffff), rs1:x14(0xefffffffffffffff)
    li  x14, 0xefffffffffffffff
    sha256sig1 x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x00000000003fffff)
 
sha256sig1_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0x00000000003fffff), rs1:x13(0xdfffffffffffffff)
    li  x13, 0xdfffffffffffffff
    sha256sig1 x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x00000000003fffff)
 
sha256sig1_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0x00000000003fffff), rs1:x12(0xbfffffffffffffff)
    li  x12, 0xbfffffffffffffff
    sha256sig1 x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000003fffff)
 
sha256sig1_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0x00000000003fffff), rs1:x11(0x7fffffffffffffff)
    li  x11, 0x7fffffffffffffff
    sha256sig1 x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000003fffff)
 
sha256sig1_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0x00000000003fffff), rs1:x10(0xffffffffffffffff)
    li  x10, 0xffffffffffffffff
    sha256sig1 x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000003fffff)


    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha256sig1)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha256sig1)

    RVTEST_SIGBASE(x1,signature_55_0)

 
sha256sig1_01_inst_270:
    // Test 270:  Test with random values
    // result rd:x23(0x0000000062d319dc), rs1:x9(0x10fd3dedadea5195)
    li  x9, 0x10fd3dedadea5195
    sha256sig1 x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000062d319dc)
 
sha256sig1_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1)
    li  x8, 0xbd295ce2d2ffbec1
    sha256sig1 x0, x8
    sd x0, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x0, 0x0000000000000000)
 
sha256sig1_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0x00000000e1609906), rs1:x7(0xc9649f05a8e1a8bb)
    li  x7, 0xc9649f05a8e1a8bb
    sha256sig1 x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x00000000e1609906)
 
sha256sig1_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb)
    li  x0, 0x3541291848c99fcb
    sha256sig1 x26, x0
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000000000)
	
#endif


RVTEST_CODE_END sha256sig1_01_code_end
RVTEST_CODE_BEGIN sm3p0_01_init sm3p0_01_code_begin






#ifdef TEST_CASE_1


    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x6,signature_1_0)

 
sm3p0_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x00000000da62211a), rs1:x31(0x10fd3dedadea5195)
    li  x31, 0x10fd3dedadea5195
    sm3p0 x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x00000000da62211a)
 
sm3p0_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x000000005001989b), rs1:x30(0xbd295ce2d2ffbec1)
    li  x30, 0xbd295ce2d2ffbec1
    sm3p0 x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x000000005001989b)
 
sm3p0_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0x000000003ac78e29), rs1:x29(0xc9649f05a8e1a8bb)
    li  x29, 0xc9649f05a8e1a8bb
    sm3p0 x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x000000003ac78e29)
 
sm3p0_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x00000000e46098c9), rs1:x28(0x3541291848c99fcb)
    li  x28, 0x3541291848c99fcb
    sm3p0 x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x00000000e46098c9)
 
sm3p0_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x00000000d82740f9), rs1:x27(0x10a24740461d524f)
    li  x27, 0x10a24740461d524f
    sm3p0 x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x00000000d82740f9)


    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_2_0)

 
sm3p0_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x0000000067f5eb1e), rs1:x26(0x546b0e54528a10af)
    li  x26, 0x546b0e54528a10af
    sm3p0 x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000067f5eb1e)
 
sm3p0_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x0000000021ebbf37), rs1:x25(0x73a92fd4e19bfbc3)
    li  x25, 0x73a92fd4e19bfbc3
    sm3p0 x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000021ebbf37)
 
sm3p0_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x00000000601f92d5), rs1:x24(0x82f6747f707af2c0)
    li  x24, 0x82f6747f707af2c0
    sm3p0 x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000601f92d5)
 
sm3p0_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0x000000007eeaefe9), rs1:x23(0xf5adb41aa47d105b)
    li  x23, 0xf5adb41aa47d105b
    sm3p0 x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x000000007eeaefe9)
 
sm3p0_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0x00000000bdc5ae30), rs1:x22(0xdf7f3844121bcc23)
    li  x22, 0xdf7f3844121bcc23
    sm3p0 x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000bdc5ae30)


    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_3_0)

 
sm3p0_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x0000000000020201), rs1:x21(0x0000000000000001)
    li  x21, 0x1
    sm3p0 x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x0000000000020201)
 
sm3p0_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x0000000000040402), rs1:x20(0x0000000000000002)
    li  x20, 0x2
    sm3p0 x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0000000000040402)
 
sm3p0_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x0000000000080804), rs1:x19(0x0000000000000004)
    li  x19, 0x4
    sm3p0 x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0000000000080804)
 
sm3p0_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0000000000101008), rs1:x18(0x0000000000000008)
    li  x18, 0x8
    sm3p0 x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0000000000101008)
 
sm3p0_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x0000000000202010), rs1:x17(0x0000000000000010)
    li  x17, 0x10
    sm3p0 x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0000000000202010)


    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x2,signature_4_0)

 
sm3p0_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x0000000000404020), rs1:x16(0x0000000000000020)
    li  x16, 0x20
    sm3p0 x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0000000000404020)
 
sm3p0_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x0000000000808040), rs1:x15(0x0000000000000040)
    li  x15, 0x40
    sm3p0 x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x0000000000808040)
 
sm3p0_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x0000000001010080), rs1:x14(0x0000000000000080)
    li  x14, 0x80
    sm3p0 x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x0000000001010080)
 
sm3p0_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0000000002020100), rs1:x13(0x0000000000000100)
    li  x13, 0x100
    sm3p0 x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0000000002020100)
 
sm3p0_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0000000004040200), rs1:x12(0x0000000000000200)
    li  x12, 0x200
    sm3p0 x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0000000004040200)


    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_5_0)

 
sm3p0_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x0000000008080400), rs1:x11(0x0000000000000400)
    li  x11, 0x400
    sm3p0 x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000008080400)
 
sm3p0_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0000000010100800), rs1:x10(0x0000000000000800)
    li  x10, 0x800
    sm3p0 x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000010100800)
 
sm3p0_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x0000000020201000), rs1:x9(0x0000000000001000)
    li  x9, 0x1000
    sm3p0 x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000020201000)
 
sm3p0_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0000000040402000), rs1:x8(0x0000000000002000)
    li  x8, 0x2000
    sm3p0 x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000040402000)
 
sm3p0_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x0000000080804000), rs1:x7(0x0000000000004000)
    li  x7, 0x4000
    sm3p0 x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000080804000)


    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_6_0)

 
sm3p0_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x0000000001008001), rs1:x6(0x0000000000008000)
    li  x6, 0x8000
    sm3p0 x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x0000000001008001)
 
sm3p0_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x0000000002010002), rs1:x5(0x0000000000010000)
    li  x5, 0x10000
    sm3p0 x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000002010002)
 
sm3p0_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x0000000004020004), rs1:x4(0x0000000000020000)
    li  x4, 0x20000
    sm3p0 x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000004020004)
 
sm3p0_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0000000008040008), rs1:x3(0x0000000000040000)
    li  x3, 0x40000
    sm3p0 x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000008040008)
 
sm3p0_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0000000010080010), rs1:x2(0x0000000000080000)
    li  x2, 0x80000
    sm3p0 x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000010080010)


    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x5,signature_7_0)

 
sm3p0_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0000000020100020), rs1:x1(0x0000000000100000)
    li  x1, 0x100000
    sm3p0 x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0000000020100020)
 
sm3p0_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0000000040200040), rs1:x31(0x0000000000200000)
    li  x31, 0x200000
    sm3p0 x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0000000040200040)
 
sm3p0_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0000000080400080), rs1:x30(0x0000000000400000)
    li  x30, 0x400000
    sm3p0 x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0000000080400080)
 
sm3p0_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0000000000800101), rs1:x29(0x0000000000800000)
    li  x29, 0x800000
    sm3p0 x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0000000000800101)
 
sm3p0_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x0000000001000202), rs1:x28(0x0000000001000000)
    li  x28, 0x1000000
    sm3p0 x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0000000001000202)


    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_8_0)

 
sm3p0_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x0000000002000404), rs1:x27(0x0000000002000000)
    li  x27, 0x2000000
    sm3p0 x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000002000404)
 
sm3p0_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x0000000004000808), rs1:x26(0x0000000004000000)
    li  x26, 0x4000000
    sm3p0 x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000004000808)
 
sm3p0_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0000000008001010), rs1:x25(0x0000000008000000)
    li  x25, 0x8000000
    sm3p0 x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000008001010)
 
sm3p0_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0000000010002020), rs1:x24(0x0000000010000000)
    li  x24, 0x10000000
    sm3p0 x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000010002020)
 
sm3p0_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0000000020004040), rs1:x23(0x0000000020000000)
    li  x23, 0x20000000
    sm3p0 x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000020004040)


    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_9_0)

 
sm3p0_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x0000000040008080), rs1:x22(0x0000000040000000)
    li  x22, 0x40000000
    sm3p0 x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000040008080)
 
sm3p0_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0000000080010100), rs1:x21(0x0000000080000000)
    li  x21, 0x80000000
    sm3p0 x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000080010100)
 
sm3p0_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000100000000)
    li  x20, 0x100000000
    sm3p0 x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000000000000)
 
sm3p0_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000200000000)
    li  x19, 0x200000000
    sm3p0 x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)
 
sm3p0_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0000000400000000)
    li  x18, 0x400000000
    sm3p0 x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x0000000000000000)


    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x3,signature_10_0)

 
sm3p0_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x0000000800000000)
    li  x17, 0x800000000
    sm3p0 x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x0000000000000000)
 
sm3p0_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x0000001000000000)
    li  x16, 0x1000000000
    sm3p0 x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0000000000000000)
 
sm3p0_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000002000000000)
    li  x15, 0x2000000000
    sm3p0 x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x0000000000000000)
 
sm3p0_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000004000000000)
    li  x14, 0x4000000000
    sm3p0 x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x0000000000000000)
 
sm3p0_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000008000000000)
    li  x13, 0x8000000000
    sm3p0 x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000000000000000)


    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_11_0)

 
sm3p0_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000010000000000)
    li  x12, 0x10000000000
    sm3p0 x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0000000000000000)
 
sm3p0_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000020000000000)
    li  x11, 0x20000000000
    sm3p0 x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000000000000)
 
sm3p0_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000040000000000)
    li  x10, 0x40000000000
    sm3p0 x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000000000000)
 
sm3p0_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000080000000000)
    li  x9, 0x80000000000
    sm3p0 x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000000000000)
 
sm3p0_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000100000000000)
    li  x8, 0x100000000000
    sm3p0 x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000000000000)


    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_12_0)

 
sm3p0_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000200000000000)
    li  x7, 0x200000000000
    sm3p0 x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000000000000)
 
sm3p0_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000400000000000)
    li  x6, 0x400000000000
    sm3p0 x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000000000)
 
sm3p0_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000800000000000)
    li  x5, 0x800000000000
    sm3p0 x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x0000000000000000)
 
sm3p0_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0001000000000000)
    li  x4, 0x1000000000000
    sm3p0 x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x0000000000000000)
 
sm3p0_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0002000000000000)
    li  x3, 0x2000000000000
    sm3p0 x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x0000000000000000)


    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x4,signature_13_0)

 
sm3p0_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0004000000000000)
    li  x2, 0x4000000000000
    sm3p0 x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x0000000000000000)
 
sm3p0_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0008000000000000)
    li  x1, 0x8000000000000
    sm3p0 x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x0000000000000000)
 
sm3p0_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0010000000000000)
    li  x31, 0x10000000000000
    sm3p0 x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x0000000000000000)
 
sm3p0_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0020000000000000)
    li  x30, 0x20000000000000
    sm3p0 x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x0000000000000000)
 
sm3p0_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0040000000000000)
    li  x29, 0x40000000000000
    sm3p0 x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x0000000000000000)


    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_14_0)

 
sm3p0_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0080000000000000)
    li  x28, 0x80000000000000
    sm3p0 x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x0000000000000000)
 
sm3p0_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0100000000000000)
    li  x27, 0x100000000000000
    sm3p0 x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000000000000)
 
sm3p0_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0200000000000000)
    li  x26, 0x200000000000000
    sm3p0 x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000000000)
 
sm3p0_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0400000000000000)
    li  x25, 0x400000000000000
    sm3p0 x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000000000000)
 
sm3p0_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0800000000000000)
    li  x24, 0x800000000000000
    sm3p0 x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000000000000)


    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_15_0)

 
sm3p0_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x1000000000000000)
    li  x23, 0x1000000000000000
    sm3p0 x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000000000)
 
sm3p0_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x2000000000000000)
    li  x22, 0x2000000000000000
    sm3p0 x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000000000000)
 
sm3p0_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x4000000000000000)
    li  x21, 0x4000000000000000
    sm3p0 x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)
 
sm3p0_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x8000000000000000)
    li  x20, 0x8000000000000000
    sm3p0 x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000000000000)
 
sm3p0_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000)
    li  x19, 0x0
    sm3p0 x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)


    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x4,signature_16_0)

 
sm3p0_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0x00000000fffdfdfe), rs1:x18(0xfffffffffffffffe)
    li  x18, 0xfffffffffffffffe
    sm3p0 x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0x00000000fffdfdfe)
 
sm3p0_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0x00000000fffbfbfd), rs1:x17(0xfffffffffffffffd)
    li  x17, 0xfffffffffffffffd
    sm3p0 x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0x00000000fffbfbfd)
 
sm3p0_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0x00000000fff7f7fb), rs1:x16(0xfffffffffffffffb)
    li  x16, 0xfffffffffffffffb
    sm3p0 x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0x00000000fff7f7fb)
 
sm3p0_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0x00000000ffefeff7), rs1:x15(0xfffffffffffffff7)
    li  x15, 0xfffffffffffffff7
    sm3p0 x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0x00000000ffefeff7)
 
sm3p0_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0x00000000ffdfdfef), rs1:x14(0xffffffffffffffef)
    li  x14, 0xffffffffffffffef
    sm3p0 x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0x00000000ffdfdfef)


    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_17_0)

 
sm3p0_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0x00000000ffbfbfdf), rs1:x13(0xffffffffffffffdf)
    li  x13, 0xffffffffffffffdf
    sm3p0 x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x00000000ffbfbfdf)
 
sm3p0_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0x00000000ff7f7fbf), rs1:x12(0xffffffffffffffbf)
    li  x12, 0xffffffffffffffbf
    sm3p0 x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000ff7f7fbf)
 
sm3p0_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0x00000000fefeff7f), rs1:x11(0xffffffffffffff7f)
    li  x11, 0xffffffffffffff7f
    sm3p0 x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000fefeff7f)
 
sm3p0_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0x00000000fdfdfeff), rs1:x10(0xfffffffffffffeff)
    li  x10, 0xfffffffffffffeff
    sm3p0 x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000fdfdfeff)
 
sm3p0_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0x00000000fbfbfdff), rs1:x9(0xfffffffffffffdff)
    li  x9, 0xfffffffffffffdff
    sm3p0 x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000fbfbfdff)


    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_18_0)

 
sm3p0_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0x00000000f7f7fbff), rs1:x8(0xfffffffffffffbff)
    li  x8, 0xfffffffffffffbff
    sm3p0 x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x00000000f7f7fbff)
 
sm3p0_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0x00000000efeff7ff), rs1:x7(0xfffffffffffff7ff)
    li  x7, 0xfffffffffffff7ff
    sm3p0 x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x00000000efeff7ff)
 
sm3p0_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0x00000000dfdfefff), rs1:x6(0xffffffffffffefff)
    li  x6, 0xffffffffffffefff
    sm3p0 x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x00000000dfdfefff)
 
sm3p0_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0x00000000bfbfdfff), rs1:x5(0xffffffffffffdfff)
    li  x5, 0xffffffffffffdfff
    sm3p0 x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x00000000bfbfdfff)
 
sm3p0_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0x000000007f7fbfff), rs1:x4(0xffffffffffffbfff)
    li  x4, 0xffffffffffffbfff
    sm3p0 x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x000000007f7fbfff)


    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x4,signature_19_0)

 
sm3p0_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0x00000000feff7ffe), rs1:x3(0xffffffffffff7fff)
    li  x3, 0xffffffffffff7fff
    sm3p0 x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0x00000000feff7ffe)
 
sm3p0_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0x00000000fdfefffd), rs1:x2(0xfffffffffffeffff)
    li  x2, 0xfffffffffffeffff
    sm3p0 x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x00000000fdfefffd)
 
sm3p0_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0x00000000fbfdfffb), rs1:x1(0xfffffffffffdffff)
    li  x1, 0xfffffffffffdffff
    sm3p0 x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x00000000fbfdfffb)
 
sm3p0_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0x00000000f7fbfff7), rs1:x31(0xfffffffffffbffff)
    li  x31, 0xfffffffffffbffff
    sm3p0 x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x00000000f7fbfff7)
 
sm3p0_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0x00000000eff7ffef), rs1:x30(0xfffffffffff7ffff)
    li  x30, 0xfffffffffff7ffff
    sm3p0 x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x00000000eff7ffef)


    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_20_0)

 
sm3p0_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0x00000000dfefffdf), rs1:x29(0xffffffffffefffff)
    li  x29, 0xffffffffffefffff
    sm3p0 x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0x00000000dfefffdf)
 
sm3p0_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0x00000000bfdfffbf), rs1:x28(0xffffffffffdfffff)
    li  x28, 0xffffffffffdfffff
    sm3p0 x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x00000000bfdfffbf)
 
sm3p0_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0x000000007fbfff7f), rs1:x27(0xffffffffffbfffff)
    li  x27, 0xffffffffffbfffff
    sm3p0 x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x000000007fbfff7f)
 
sm3p0_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0x00000000ff7ffefe), rs1:x26(0xffffffffff7fffff)
    li  x26, 0xffffffffff7fffff
    sm3p0 x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x00000000ff7ffefe)
 
sm3p0_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0x00000000fefffdfd), rs1:x25(0xfffffffffeffffff)
    li  x25, 0xfffffffffeffffff
    sm3p0 x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x00000000fefffdfd)


    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_21_0)

 
sm3p0_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0x00000000fdfffbfb), rs1:x24(0xfffffffffdffffff)
    li  x24, 0xfffffffffdffffff
    sm3p0 x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000fdfffbfb)
 
sm3p0_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0x00000000fbfff7f7), rs1:x23(0xfffffffffbffffff)
    li  x23, 0xfffffffffbffffff
    sm3p0 x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000fbfff7f7)
 
sm3p0_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0x00000000f7ffefef), rs1:x22(0xfffffffff7ffffff)
    li  x22, 0xfffffffff7ffffff
    sm3p0 x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000f7ffefef)
 
sm3p0_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0x00000000efffdfdf), rs1:x21(0xffffffffefffffff)
    li  x21, 0xffffffffefffffff
    sm3p0 x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x00000000efffdfdf)
 
sm3p0_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0x00000000dfffbfbf), rs1:x20(0xffffffffdfffffff)
    li  x20, 0xffffffffdfffffff
    sm3p0 x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x00000000dfffbfbf)


    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x5,signature_22_0)

 
sm3p0_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0x00000000bfff7f7f), rs1:x19(0xffffffffbfffffff)
    li  x19, 0xffffffffbfffffff
    sm3p0 x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0x00000000bfff7f7f)
 
sm3p0_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0x000000007ffefeff), rs1:x18(0xffffffff7fffffff)
    li  x18, 0xffffffff7fffffff
    sm3p0 x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0x000000007ffefeff)
 
sm3p0_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0x00000000ffffffff), rs1:x17(0xfffffffeffffffff)
    li  x17, 0xfffffffeffffffff
    sm3p0 x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0x00000000ffffffff)
 
sm3p0_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0x00000000ffffffff), rs1:x16(0xfffffffdffffffff)
    li  x16, 0xfffffffdffffffff
    sm3p0 x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0x00000000ffffffff)
 
sm3p0_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0x00000000ffffffff), rs1:x15(0xfffffffbffffffff)
    li  x15, 0xfffffffbffffffff
    sm3p0 x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0x00000000ffffffff)


    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_23_0)

 
sm3p0_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0x00000000ffffffff), rs1:x14(0xfffffff7ffffffff)
    li  x14, 0xfffffff7ffffffff
    sm3p0 x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x00000000ffffffff)
 
sm3p0_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0x00000000ffffffff), rs1:x13(0xffffffefffffffff)
    li  x13, 0xffffffefffffffff
    sm3p0 x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x00000000ffffffff)
 
sm3p0_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0x00000000ffffffff), rs1:x12(0xffffffdfffffffff)
    li  x12, 0xffffffdfffffffff
    sm3p0 x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000ffffffff)
 
sm3p0_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0x00000000ffffffff), rs1:x11(0xffffffbfffffffff)
    li  x11, 0xffffffbfffffffff
    sm3p0 x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000ffffffff)
 
sm3p0_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0x00000000ffffffff), rs1:x10(0xffffff7fffffffff)
    li  x10, 0xffffff7fffffffff
    sm3p0 x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000ffffffff)


    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_24_0)

 
sm3p0_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0x00000000ffffffff), rs1:x9(0xfffffeffffffffff)
    li  x9, 0xfffffeffffffffff
    sm3p0 x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000ffffffff)
 
sm3p0_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0x00000000ffffffff), rs1:x8(0xfffffdffffffffff)
    li  x8, 0xfffffdffffffffff
    sm3p0 x24, x8
    sd x24, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x00000000ffffffff)
 
sm3p0_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0x00000000ffffffff), rs1:x7(0xfffffbffffffffff)
    li  x7, 0xfffffbffffffffff
    sm3p0 x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x00000000ffffffff)
 
sm3p0_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0x00000000ffffffff), rs1:x6(0xfffff7ffffffffff)
    li  x6, 0xfffff7ffffffffff
    sm3p0 x26, x6
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x00000000ffffffff)
 
sm3p0_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0x00000000ffffffff), rs1:x5(0xffffefffffffffff)
    li  x5, 0xffffefffffffffff
    sm3p0 x27, x5
    sd x27, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x00000000ffffffff)


    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x5,signature_25_0)

 
sm3p0_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0x00000000ffffffff), rs1:x4(0xffffdfffffffffff)
    li  x4, 0xffffdfffffffffff
    sm3p0 x28, x4
    sd x28, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x28, 0x00000000ffffffff)
 
sm3p0_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0x00000000ffffffff), rs1:x3(0xffffbfffffffffff)
    li  x3, 0xffffbfffffffffff
    sm3p0 x29, x3
    sd x29, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x29, 0x00000000ffffffff)
 
sm3p0_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0x00000000ffffffff), rs1:x2(0xffff7fffffffffff)
    li  x2, 0xffff7fffffffffff
    sm3p0 x30, x2
    sd x30, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x30, 0x00000000ffffffff)
 
sm3p0_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0x00000000ffffffff), rs1:x1(0xfffeffffffffffff)
    li  x1, 0xfffeffffffffffff
    sm3p0 x31, x1
    sd x31, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x00000000ffffffff)
 
sm3p0_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0x00000000ffffffff), rs1:x31(0xfffdffffffffffff)
    li  x31, 0xfffdffffffffffff
    sm3p0 x1, x31
    sd x1, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x00000000ffffffff)


    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_26_0)

 
sm3p0_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0x00000000ffffffff), rs1:x30(0xfffbffffffffffff)
    li  x30, 0xfffbffffffffffff
    sm3p0 x2, x30
    sd x2, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x00000000ffffffff)
 
sm3p0_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0x00000000ffffffff), rs1:x29(0xfff7ffffffffffff)
    li  x29, 0xfff7ffffffffffff
    sm3p0 x3, x29
    sd x3, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x00000000ffffffff)
 
sm3p0_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0x00000000ffffffff), rs1:x28(0xffefffffffffffff)
    li  x28, 0xffefffffffffffff
    sm3p0 x4, x28
    sd x4, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x00000000ffffffff)
 
sm3p0_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0x00000000ffffffff), rs1:x27(0xffdfffffffffffff)
    li  x27, 0xffdfffffffffffff
    sm3p0 x5, x27
    sd x5, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x00000000ffffffff)
 
sm3p0_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0x00000000ffffffff), rs1:x26(0xffbfffffffffffff)
    li  x26, 0xffbfffffffffffff
    sm3p0 x6, x26
    sd x6, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x6, 0x00000000ffffffff)


    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_27_0)

 
sm3p0_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0x00000000ffffffff), rs1:x25(0xff7fffffffffffff)
    li  x25, 0xff7fffffffffffff
    sm3p0 x7, x25
    sd x7, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x00000000ffffffff)
 
sm3p0_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0x00000000ffffffff), rs1:x24(0xfeffffffffffffff)
    li  x24, 0xfeffffffffffffff
    sm3p0 x8, x24
    sd x8, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000ffffffff)
 
sm3p0_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0x00000000ffffffff), rs1:x23(0xfdffffffffffffff)
    li  x23, 0xfdffffffffffffff
    sm3p0 x9, x23
    sd x9, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000ffffffff)
 
sm3p0_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0x00000000ffffffff), rs1:x22(0xfbffffffffffffff)
    li  x22, 0xfbffffffffffffff
    sm3p0 x10, x22
    sd x10, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000ffffffff)
 
sm3p0_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0x00000000ffffffff), rs1:x21(0xf7ffffffffffffff)
    li  x21, 0xf7ffffffffffffff
    sm3p0 x11, x21
    sd x11, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x00000000ffffffff)


    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x6,signature_28_0)

 
sm3p0_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0x00000000ffffffff), rs1:x20(0xefffffffffffffff)
    li  x20, 0xefffffffffffffff
    sm3p0 x12, x20
    sd x12, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x00000000ffffffff)
 
sm3p0_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0x00000000ffffffff), rs1:x19(0xdfffffffffffffff)
    li  x19, 0xdfffffffffffffff
    sm3p0 x13, x19
    sd x13, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x00000000ffffffff)
 
sm3p0_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0x00000000ffffffff), rs1:x18(0xbfffffffffffffff)
    li  x18, 0xbfffffffffffffff
    sm3p0 x14, x18
    sd x14, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x00000000ffffffff)
 
sm3p0_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0x00000000ffffffff), rs1:x17(0x7fffffffffffffff)
    li  x17, 0x7fffffffffffffff
    sm3p0 x15, x17
    sd x15, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x00000000ffffffff)
 
sm3p0_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0x00000000ffffffff), rs1:x16(0xffffffffffffffff)
    li  x16, 0xffffffffffffffff
    sm3p0 x16, x16
    sd x16, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x16, 0x00000000ffffffff)


    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_29_0)

 
sm3p0_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0000000000020201), rs1:x15(0x0000000000000001)
    li  x15, 0x1
    sm3p0 x17, x15
    sd x17, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x17, 0x0000000000020201)
 
sm3p0_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0000000000040402), rs1:x14(0x0000000000000002)
    li  x14, 0x2
    sm3p0 x18, x14
    sd x18, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x0000000000040402)
 
sm3p0_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0000000000080804), rs1:x13(0x0000000000000004)
    li  x13, 0x4
    sm3p0 x19, x13
    sd x19, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x0000000000080804)
 
sm3p0_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0000000000101008), rs1:x12(0x0000000000000008)
    li  x12, 0x8
    sm3p0 x20, x12
    sd x20, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0000000000101008)
 
sm3p0_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0000000000202010), rs1:x11(0x0000000000000010)
    li  x11, 0x10
    sm3p0 x21, x11
    sd x21, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000000202010)


    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_30_0)

 
sm3p0_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0000000000404020), rs1:x10(0x0000000000000020)
    li  x10, 0x20
    sm3p0 x22, x10
    sd x22, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000000404020)
 
sm3p0_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0000000000808040), rs1:x9(0x0000000000000040)
    li  x9, 0x40
    sm3p0 x23, x9
    sd x23, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000000808040)
 
sm3p0_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0000000001010080), rs1:x8(0x0000000000000080)
    li  x8, 0x80
    sm3p0 x24, x8
    sd x24, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000001010080)
 
sm3p0_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000002020100), rs1:x7(0x0000000000000100)
    li  x7, 0x100
    sm3p0 x25, x7
    sd x25, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000002020100)
 
sm3p0_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000004040200), rs1:x6(0x0000000000000200)
    li  x6, 0x200
    sm3p0 x26, x6
    sd x26, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000004040200)


    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x6,signature_31_0)

 
sm3p0_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000000008080400), rs1:x5(0x0000000000000400)
    li  x5, 0x400
    sm3p0 x27, x5
    sd x27, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000008080400)
 
sm3p0_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000010100800), rs1:x4(0x0000000000000800)
    li  x4, 0x800
    sm3p0 x28, x4
    sd x28, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000010100800)
 
sm3p0_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0000000020201000), rs1:x3(0x0000000000001000)
    li  x3, 0x1000
    sm3p0 x29, x3
    sd x29, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000020201000)
 
sm3p0_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000040402000), rs1:x2(0x0000000000002000)
    li  x2, 0x2000
    sm3p0 x30, x2
    sd x30, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000040402000)
 
sm3p0_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0000000080804000), rs1:x1(0x0000000000004000)
    li  x1, 0x4000
    sm3p0 x31, x1
    sd x31, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x0000000080804000)


    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x6,signature_32_0)

 
sm3p0_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000001008001), rs1:x31(0x0000000000008000)
    li  x31, 0x8000
    sm3p0 x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x0000000001008001)
 
sm3p0_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000000002010002), rs1:x30(0x0000000000010000)
    li  x30, 0x10000
    sm3p0 x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x0000000002010002)
 
sm3p0_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000004020004), rs1:x29(0x0000000000020000)
    li  x29, 0x20000
    sm3p0 x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x0000000004020004)
 
sm3p0_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000008040008), rs1:x28(0x0000000000040000)
    li  x28, 0x40000
    sm3p0 x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x0000000008040008)
 
sm3p0_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000010080010), rs1:x27(0x0000000000080000)
    li  x27, 0x80000
    sm3p0 x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x0000000010080010)


    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_33_0)

 
sm3p0_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000020100020), rs1:x26(0x0000000000100000)
    li  x26, 0x100000
    sm3p0 x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000020100020)
 
sm3p0_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000040200040), rs1:x25(0x0000000000200000)
    li  x25, 0x200000
    sm3p0 x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000040200040)
 
sm3p0_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000080400080), rs1:x24(0x0000000000400000)
    li  x24, 0x400000
    sm3p0 x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000080400080)
 
sm3p0_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000000800101), rs1:x23(0x0000000000800000)
    li  x23, 0x800000
    sm3p0 x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000800101)
 
sm3p0_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000001000202), rs1:x22(0x0000000001000000)
    li  x22, 0x1000000
    sm3p0 x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000001000202)


    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_34_0)

 
sm3p0_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000002000404), rs1:x21(0x0000000002000000)
    li  x21, 0x2000000
    sm3p0 x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x0000000002000404)
 
sm3p0_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000004000808), rs1:x20(0x0000000004000000)
    li  x20, 0x4000000
    sm3p0 x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0000000004000808)
 
sm3p0_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000008001010), rs1:x19(0x0000000008000000)
    li  x19, 0x8000000
    sm3p0 x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0000000008001010)
 
sm3p0_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000010002020), rs1:x18(0x0000000010000000)
    li  x18, 0x10000000
    sm3p0 x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0000000010002020)
 
sm3p0_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000020004040), rs1:x17(0x0000000020000000)
    li  x17, 0x20000000
    sm3p0 x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0000000020004040)


    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x2,signature_35_0)

 
sm3p0_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000040008080), rs1:x16(0x0000000040000000)
    li  x16, 0x40000000
    sm3p0 x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0000000040008080)
 
sm3p0_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000000080010100), rs1:x15(0x0000000080000000)
    li  x15, 0x80000000
    sm3p0 x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x0000000080010100)
 
sm3p0_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000000100000000)
    li  x14, 0x100000000
    sm3p0 x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x0000000000000000)
 
sm3p0_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000200000000)
    li  x13, 0x200000000
    sm3p0 x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0000000000000000)
 
sm3p0_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000000400000000)
    li  x12, 0x400000000
    sm3p0 x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0000000000000000)


    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_36_0)

 
sm3p0_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000800000000)
    li  x11, 0x800000000
    sm3p0 x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000000000000)
 
sm3p0_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000001000000000)
    li  x10, 0x1000000000
    sm3p0 x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000000000000)
 
sm3p0_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000002000000000)
    li  x9, 0x2000000000
    sm3p0 x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000000000000)
 
sm3p0_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000004000000000)
    li  x8, 0x4000000000
    sm3p0 x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000000000000)
 
sm3p0_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000008000000000)
    li  x7, 0x8000000000
    sm3p0 x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000000000000)


    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_37_0)

 
sm3p0_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000010000000000)
    li  x6, 0x10000000000
    sm3p0 x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x0000000000000000)
 
sm3p0_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000020000000000)
    li  x5, 0x20000000000
    sm3p0 x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000000000000)
 
sm3p0_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000040000000000)
    li  x4, 0x40000000000
    sm3p0 x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000000000000)
 
sm3p0_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000080000000000)
    li  x3, 0x80000000000
    sm3p0 x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000000000000)
 
sm3p0_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000100000000000)
    li  x2, 0x100000000000
    sm3p0 x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000000000000)


    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x5,signature_38_0)

 
sm3p0_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000200000000000)
    li  x1, 0x200000000000
    sm3p0 x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0000000000000000)
 
sm3p0_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000400000000000)
    li  x31, 0x400000000000
    sm3p0 x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0000000000000000)
 
sm3p0_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000800000000000)
    li  x30, 0x800000000000
    sm3p0 x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0000000000000000)
 
sm3p0_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0001000000000000)
    li  x29, 0x1000000000000
    sm3p0 x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0000000000000000)
 
sm3p0_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0002000000000000)
    li  x28, 0x2000000000000
    sm3p0 x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0000000000000000)


    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_39_0)

 
sm3p0_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0004000000000000)
    li  x27, 0x4000000000000
    sm3p0 x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000000000000)
 
sm3p0_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0008000000000000)
    li  x26, 0x8000000000000
    sm3p0 x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000000000)
 
sm3p0_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0010000000000000)
    li  x25, 0x10000000000000
    sm3p0 x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000000000000)
 
sm3p0_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0020000000000000)
    li  x24, 0x20000000000000
    sm3p0 x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000000000000)
 
sm3p0_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0040000000000000)
    li  x23, 0x40000000000000
    sm3p0 x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000000000000)


    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_40_0)

 
sm3p0_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0080000000000000)
    li  x22, 0x80000000000000
    sm3p0 x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000000000000)
 
sm3p0_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0100000000000000)
    li  x21, 0x100000000000000
    sm3p0 x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000000000000)
 
sm3p0_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0200000000000000)
    li  x20, 0x200000000000000
    sm3p0 x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000000000000)
 
sm3p0_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0400000000000000)
    li  x19, 0x400000000000000
    sm3p0 x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)
 
sm3p0_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0800000000000000)
    li  x18, 0x800000000000000
    sm3p0 x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x0000000000000000)


    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x3,signature_41_0)

 
sm3p0_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x1000000000000000)
    li  x17, 0x1000000000000000
    sm3p0 x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x0000000000000000)
 
sm3p0_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x2000000000000000)
    li  x16, 0x2000000000000000
    sm3p0 x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0000000000000000)
 
sm3p0_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x4000000000000000)
    li  x15, 0x4000000000000000
    sm3p0 x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x0000000000000000)
 
sm3p0_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x8000000000000000)
    li  x14, 0x8000000000000000
    sm3p0 x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x0000000000000000)
 
sm3p0_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000)
    li  x13, 0x0
    sm3p0 x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000000000000000)


    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_42_0)

 
sm3p0_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0x00000000fffdfdfe), rs1:x12(0xfffffffffffffffe)
    li  x12, 0xfffffffffffffffe
    sm3p0 x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000fffdfdfe)
 
sm3p0_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0x00000000fffbfbfd), rs1:x11(0xfffffffffffffffd)
    li  x11, 0xfffffffffffffffd
    sm3p0 x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000fffbfbfd)
 
sm3p0_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0x00000000fff7f7fb), rs1:x10(0xfffffffffffffffb)
    li  x10, 0xfffffffffffffffb
    sm3p0 x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000fff7f7fb)
 
sm3p0_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0x00000000ffefeff7), rs1:x9(0xfffffffffffffff7)
    li  x9, 0xfffffffffffffff7
    sm3p0 x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000ffefeff7)
 
sm3p0_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0x00000000ffdfdfef), rs1:x8(0xffffffffffffffef)
    li  x8, 0xffffffffffffffef
    sm3p0 x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x00000000ffdfdfef)


    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_43_0)

 
sm3p0_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0x00000000ffbfbfdf), rs1:x7(0xffffffffffffffdf)
    li  x7, 0xffffffffffffffdf
    sm3p0 x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x00000000ffbfbfdf)
 
sm3p0_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0x00000000ff7f7fbf), rs1:x6(0xffffffffffffffbf)
    li  x6, 0xffffffffffffffbf
    sm3p0 x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x00000000ff7f7fbf)
 
sm3p0_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0x00000000fefeff7f), rs1:x5(0xffffffffffffff7f)
    li  x5, 0xffffffffffffff7f
    sm3p0 x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x00000000fefeff7f)
 
sm3p0_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0x00000000fdfdfeff), rs1:x4(0xfffffffffffffeff)
    li  x4, 0xfffffffffffffeff
    sm3p0 x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x00000000fdfdfeff)
 
sm3p0_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0x00000000fbfbfdff), rs1:x3(0xfffffffffffffdff)
    li  x3, 0xfffffffffffffdff
    sm3p0 x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x00000000fbfbfdff)


    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x4,signature_44_0)

 
sm3p0_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0x00000000f7f7fbff), rs1:x2(0xfffffffffffffbff)
    li  x2, 0xfffffffffffffbff
    sm3p0 x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x00000000f7f7fbff)
 
sm3p0_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0x00000000efeff7ff), rs1:x1(0xfffffffffffff7ff)
    li  x1, 0xfffffffffffff7ff
    sm3p0 x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x00000000efeff7ff)
 
sm3p0_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0x00000000dfdfefff), rs1:x31(0xffffffffffffefff)
    li  x31, 0xffffffffffffefff
    sm3p0 x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x00000000dfdfefff)
 
sm3p0_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0x00000000bfbfdfff), rs1:x30(0xffffffffffffdfff)
    li  x30, 0xffffffffffffdfff
    sm3p0 x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x00000000bfbfdfff)
 
sm3p0_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0x000000007f7fbfff), rs1:x29(0xffffffffffffbfff)
    li  x29, 0xffffffffffffbfff
    sm3p0 x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x000000007f7fbfff)


    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_45_0)

 
sm3p0_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0x00000000feff7ffe), rs1:x28(0xffffffffffff7fff)
    li  x28, 0xffffffffffff7fff
    sm3p0 x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x00000000feff7ffe)
 
sm3p0_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0x00000000fdfefffd), rs1:x27(0xfffffffffffeffff)
    li  x27, 0xfffffffffffeffff
    sm3p0 x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x00000000fdfefffd)
 
sm3p0_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0x00000000fbfdfffb), rs1:x26(0xfffffffffffdffff)
    li  x26, 0xfffffffffffdffff
    sm3p0 x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x00000000fbfdfffb)
 
sm3p0_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0x00000000f7fbfff7), rs1:x25(0xfffffffffffbffff)
    li  x25, 0xfffffffffffbffff
    sm3p0 x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x00000000f7fbfff7)
 
sm3p0_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0x00000000eff7ffef), rs1:x24(0xfffffffffff7ffff)
    li  x24, 0xfffffffffff7ffff
    sm3p0 x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000eff7ffef)


    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_46_0)

 
sm3p0_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0x00000000dfefffdf), rs1:x23(0xffffffffffefffff)
    li  x23, 0xffffffffffefffff
    sm3p0 x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000dfefffdf)
 
sm3p0_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0x00000000bfdfffbf), rs1:x22(0xffffffffffdfffff)
    li  x22, 0xffffffffffdfffff
    sm3p0 x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000bfdfffbf)
 
sm3p0_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0x000000007fbfff7f), rs1:x21(0xffffffffffbfffff)
    li  x21, 0xffffffffffbfffff
    sm3p0 x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x000000007fbfff7f)
 
sm3p0_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0x00000000ff7ffefe), rs1:x20(0xffffffffff7fffff)
    li  x20, 0xffffffffff7fffff
    sm3p0 x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x00000000ff7ffefe)
 
sm3p0_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0x00000000fefffdfd), rs1:x19(0xfffffffffeffffff)
    li  x19, 0xfffffffffeffffff
    sm3p0 x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x00000000fefffdfd)


    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x4,signature_47_0)

 
sm3p0_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0x00000000fdfffbfb), rs1:x18(0xfffffffffdffffff)
    li  x18, 0xfffffffffdffffff
    sm3p0 x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0x00000000fdfffbfb)
 
sm3p0_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0x00000000fbfff7f7), rs1:x17(0xfffffffffbffffff)
    li  x17, 0xfffffffffbffffff
    sm3p0 x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0x00000000fbfff7f7)
 
sm3p0_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0x00000000f7ffefef), rs1:x16(0xfffffffff7ffffff)
    li  x16, 0xfffffffff7ffffff
    sm3p0 x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0x00000000f7ffefef)
 
sm3p0_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0x00000000efffdfdf), rs1:x15(0xffffffffefffffff)
    li  x15, 0xffffffffefffffff
    sm3p0 x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0x00000000efffdfdf)
 
sm3p0_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0x00000000dfffbfbf), rs1:x14(0xffffffffdfffffff)
    li  x14, 0xffffffffdfffffff
    sm3p0 x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0x00000000dfffbfbf)


    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_48_0)

 
sm3p0_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0x00000000bfff7f7f), rs1:x13(0xffffffffbfffffff)
    li  x13, 0xffffffffbfffffff
    sm3p0 x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x00000000bfff7f7f)
 
sm3p0_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0x000000007ffefeff), rs1:x12(0xffffffff7fffffff)
    li  x12, 0xffffffff7fffffff
    sm3p0 x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x000000007ffefeff)
 
sm3p0_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0x00000000ffffffff), rs1:x11(0xfffffffeffffffff)
    li  x11, 0xfffffffeffffffff
    sm3p0 x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000ffffffff)
 
sm3p0_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0x00000000ffffffff), rs1:x10(0xfffffffdffffffff)
    li  x10, 0xfffffffdffffffff
    sm3p0 x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000ffffffff)
 
sm3p0_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0x00000000ffffffff), rs1:x9(0xfffffffbffffffff)
    li  x9, 0xfffffffbffffffff
    sm3p0 x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000ffffffff)


    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_49_0)

 
sm3p0_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0x00000000ffffffff), rs1:x8(0xfffffff7ffffffff)
    li  x8, 0xfffffff7ffffffff
    sm3p0 x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x00000000ffffffff)
 
sm3p0_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0x00000000ffffffff), rs1:x7(0xffffffefffffffff)
    li  x7, 0xffffffefffffffff
    sm3p0 x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x00000000ffffffff)
 
sm3p0_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0x00000000ffffffff), rs1:x6(0xffffffdfffffffff)
    li  x6, 0xffffffdfffffffff
    sm3p0 x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x00000000ffffffff)
 
sm3p0_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0x00000000ffffffff), rs1:x5(0xffffffbfffffffff)
    li  x5, 0xffffffbfffffffff
    sm3p0 x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x00000000ffffffff)
 
sm3p0_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0x00000000ffffffff), rs1:x4(0xffffff7fffffffff)
    li  x4, 0xffffff7fffffffff
    sm3p0 x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x00000000ffffffff)


    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x4,signature_50_0)

 
sm3p0_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0x00000000ffffffff), rs1:x3(0xfffffeffffffffff)
    li  x3, 0xfffffeffffffffff
    sm3p0 x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0x00000000ffffffff)
 
sm3p0_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0x00000000ffffffff), rs1:x2(0xfffffdffffffffff)
    li  x2, 0xfffffdffffffffff
    sm3p0 x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x00000000ffffffff)
 
sm3p0_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0x00000000ffffffff), rs1:x1(0xfffffbffffffffff)
    li  x1, 0xfffffbffffffffff
    sm3p0 x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x00000000ffffffff)
 
sm3p0_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0x00000000ffffffff), rs1:x31(0xfffff7ffffffffff)
    li  x31, 0xfffff7ffffffffff
    sm3p0 x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x00000000ffffffff)
 
sm3p0_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0x00000000ffffffff), rs1:x30(0xffffefffffffffff)
    li  x30, 0xffffefffffffffff
    sm3p0 x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x00000000ffffffff)


    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_51_0)

 
sm3p0_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0x00000000ffffffff), rs1:x29(0xffffdfffffffffff)
    li  x29, 0xffffdfffffffffff
    sm3p0 x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0x00000000ffffffff)
 
sm3p0_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0x00000000ffffffff), rs1:x28(0xffffbfffffffffff)
    li  x28, 0xffffbfffffffffff
    sm3p0 x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x00000000ffffffff)
 
sm3p0_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0x00000000ffffffff), rs1:x27(0xffff7fffffffffff)
    li  x27, 0xffff7fffffffffff
    sm3p0 x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x00000000ffffffff)
 
sm3p0_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0x00000000ffffffff), rs1:x26(0xfffeffffffffffff)
    li  x26, 0xfffeffffffffffff
    sm3p0 x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x00000000ffffffff)
 
sm3p0_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0x00000000ffffffff), rs1:x25(0xfffdffffffffffff)
    li  x25, 0xfffdffffffffffff
    sm3p0 x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x00000000ffffffff)


    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_52_0)

 
sm3p0_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0x00000000ffffffff), rs1:x24(0xfffbffffffffffff)
    li  x24, 0xfffbffffffffffff
    sm3p0 x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x00000000ffffffff)
 
sm3p0_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0x00000000ffffffff), rs1:x23(0xfff7ffffffffffff)
    li  x23, 0xfff7ffffffffffff
    sm3p0 x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x00000000ffffffff)
 
sm3p0_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0x00000000ffffffff), rs1:x22(0xffefffffffffffff)
    li  x22, 0xffefffffffffffff
    sm3p0 x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x00000000ffffffff)
 
sm3p0_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0x00000000ffffffff), rs1:x21(0xffdfffffffffffff)
    li  x21, 0xffdfffffffffffff
    sm3p0 x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x00000000ffffffff)
 
sm3p0_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0x00000000ffffffff), rs1:x20(0xffbfffffffffffff)
    li  x20, 0xffbfffffffffffff
    sm3p0 x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x00000000ffffffff)


    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x5,signature_53_0)

 
sm3p0_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0x00000000ffffffff), rs1:x19(0xff7fffffffffffff)
    li  x19, 0xff7fffffffffffff
    sm3p0 x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0x00000000ffffffff)
 
sm3p0_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0x00000000ffffffff), rs1:x18(0xfeffffffffffffff)
    li  x18, 0xfeffffffffffffff
    sm3p0 x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0x00000000ffffffff)
 
sm3p0_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0x00000000ffffffff), rs1:x17(0xfdffffffffffffff)
    li  x17, 0xfdffffffffffffff
    sm3p0 x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0x00000000ffffffff)
 
sm3p0_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0x00000000ffffffff), rs1:x16(0xfbffffffffffffff)
    li  x16, 0xfbffffffffffffff
    sm3p0 x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0x00000000ffffffff)
 
sm3p0_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0x00000000ffffffff), rs1:x15(0xf7ffffffffffffff)
    li  x15, 0xf7ffffffffffffff
    sm3p0 x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0x00000000ffffffff)


    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_54_0)

 
sm3p0_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0x00000000ffffffff), rs1:x14(0xefffffffffffffff)
    li  x14, 0xefffffffffffffff
    sm3p0 x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x00000000ffffffff)
 
sm3p0_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0x00000000ffffffff), rs1:x13(0xdfffffffffffffff)
    li  x13, 0xdfffffffffffffff
    sm3p0 x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x00000000ffffffff)
 
sm3p0_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0x00000000ffffffff), rs1:x12(0xbfffffffffffffff)
    li  x12, 0xbfffffffffffffff
    sm3p0 x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x00000000ffffffff)
 
sm3p0_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0x00000000ffffffff), rs1:x11(0x7fffffffffffffff)
    li  x11, 0x7fffffffffffffff
    sm3p0 x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x00000000ffffffff)
 
sm3p0_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0x00000000ffffffff), rs1:x10(0xffffffffffffffff)
    li  x10, 0xffffffffffffffff
    sm3p0 x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x00000000ffffffff)


    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm3p0)

    RVTEST_SIGBASE(x1,signature_55_0)

 
sm3p0_01_inst_270:
    // Test 270:  Test with random values
    // result rd:x23(0x00000000da62211a), rs1:x9(0x10fd3dedadea5195)
    li  x9, 0x10fd3dedadea5195
    sm3p0 x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x00000000da62211a)
 
sm3p0_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1)
    li  x8, 0xbd295ce2d2ffbec1
    sm3p0 x0, x8
    sd x0, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x0, 0x0000000000000000)
 
sm3p0_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0x000000003ac78e29), rs1:x7(0xc9649f05a8e1a8bb)
    li  x7, 0xc9649f05a8e1a8bb
    sm3p0 x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x000000003ac78e29)
 
sm3p0_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb)
    li  x0, 0x3541291848c99fcb
    sm3p0 x26, x0
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000000000)
	
#endif


RVTEST_CODE_END sm3p0_01_code_end
RVTEST_CODE_BEGIN sha512sum1_01_init sha512sum1_01_code_begin






#ifdef TEST_CASE_1


    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x6,signature_1_0)

 
sha512sum1_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x24e7f2e37245a24d), rs1:x31(0x10fd3dedadea5195)
    li  x31, 0x10fd3dedadea5195
    sha512sum1 x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x24e7f2e37245a24d)
 
sha512sum1_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x65dfe430446d6bef), rs1:x30(0xbd295ce2d2ffbec1)
    li  x30, 0xbd295ce2d2ffbec1
    sha512sum1 x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x65dfe430446d6bef)
 
sha512sum1_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0x4a15a71f06337bf1), rs1:x29(0xc9649f05a8e1a8bb)
    li  x29, 0xc9649f05a8e1a8bb
    sha512sum1 x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x4a15a71f06337bf1)
 
sha512sum1_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x94fa7c9b0bbd9180), rs1:x28(0x3541291848c99fcb)
    li  x28, 0x3541291848c99fcb
    sha512sum1 x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x94fa7c9b0bbd9180)
 
sha512sum1_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0xbd8c8808ab5958d1), rs1:x27(0x10a24740461d524f)
    li  x27, 0x10a24740461d524f
    sha512sum1 x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0xbd8c8808ab5958d1)


    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_2_0)

 
sha512sum1_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0xecbfc1bead6e6b0d), rs1:x26(0x546b0e54528a10af)
    li  x26, 0x546b0e54528a10af
    sha512sum1 x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xecbfc1bead6e6b0d)
 
sha512sum1_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0xfb8ddfb3151f6a9e), rs1:x25(0x73a92fd4e19bfbc3)
    li  x25, 0x73a92fd4e19bfbc3
    sha512sum1 x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xfb8ddfb3151f6a9e)
 
sha512sum1_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x480a161d2ca366cf), rs1:x24(0x82f6747f707af2c0)
    li  x24, 0x82f6747f707af2c0
    sha512sum1 x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x480a161d2ca366cf)
 
sha512sum1_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0x082b15559096ee31), rs1:x23(0xf5adb41aa47d105b)
    li  x23, 0xf5adb41aa47d105b
    sha512sum1 x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x082b15559096ee31)
 
sha512sum1_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0xe18e87c53eeef375), rs1:x22(0xdf7f3844121bcc23)
    li  x22, 0xdf7f3844121bcc23
    sha512sum1 x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xe18e87c53eeef375)


    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_3_0)

 
sha512sum1_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x0004400000800000), rs1:x21(0x0000000000000001)
    li  x21, 0x1
    sha512sum1 x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x0004400000800000)
 
sha512sum1_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x0008800001000000), rs1:x20(0x0000000000000002)
    li  x20, 0x2
    sha512sum1 x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0008800001000000)
 
sha512sum1_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x0011000002000000), rs1:x19(0x0000000000000004)
    li  x19, 0x4
    sha512sum1 x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0011000002000000)
 
sha512sum1_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0022000004000000), rs1:x18(0x0000000000000008)
    li  x18, 0x8
    sha512sum1 x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0022000004000000)
 
sha512sum1_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x0044000008000000), rs1:x17(0x0000000000000010)
    li  x17, 0x10
    sha512sum1 x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0044000008000000)


    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x2,signature_4_0)

 
sha512sum1_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x0088000010000000), rs1:x16(0x0000000000000020)
    li  x16, 0x20
    sha512sum1 x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0088000010000000)
 
sha512sum1_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x0110000020000000), rs1:x15(0x0000000000000040)
    li  x15, 0x40
    sha512sum1 x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x0110000020000000)
 
sha512sum1_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x0220000040000000), rs1:x14(0x0000000000000080)
    li  x14, 0x80
    sha512sum1 x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x0220000040000000)
 
sha512sum1_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0440000080000000), rs1:x13(0x0000000000000100)
    li  x13, 0x100
    sha512sum1 x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0440000080000000)
 
sha512sum1_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0880000100000000), rs1:x12(0x0000000000000200)
    li  x12, 0x200
    sha512sum1 x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0880000100000000)


    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_5_0)

 
sha512sum1_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x1100000200000000), rs1:x11(0x0000000000000400)
    li  x11, 0x400
    sha512sum1 x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x1100000200000000)
 
sha512sum1_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x2200000400000000), rs1:x10(0x0000000000000800)
    li  x10, 0x800
    sha512sum1 x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x2200000400000000)
 
sha512sum1_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x4400000800000000), rs1:x9(0x0000000000001000)
    li  x9, 0x1000
    sha512sum1 x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x4400000800000000)
 
sha512sum1_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x8800001000000000), rs1:x8(0x0000000000002000)
    li  x8, 0x2000
    sha512sum1 x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x8800001000000000)
 
sha512sum1_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x1000002000000001), rs1:x7(0x0000000000004000)
    li  x7, 0x4000
    sha512sum1 x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x1000002000000001)


    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_6_0)

 
sha512sum1_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x2000004000000002), rs1:x6(0x0000000000008000)
    li  x6, 0x8000
    sha512sum1 x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x2000004000000002)
 
sha512sum1_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x4000008000000004), rs1:x5(0x0000000000010000)
    li  x5, 0x10000
    sha512sum1 x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x4000008000000004)
 
sha512sum1_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x8000010000000008), rs1:x4(0x0000000000020000)
    li  x4, 0x20000
    sha512sum1 x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x8000010000000008)
 
sha512sum1_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0000020000000011), rs1:x3(0x0000000000040000)
    li  x3, 0x40000
    sha512sum1 x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000020000000011)
 
sha512sum1_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0000040000000022), rs1:x2(0x0000000000080000)
    li  x2, 0x80000
    sha512sum1 x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000040000000022)


    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x5,signature_7_0)

 
sha512sum1_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0000080000000044), rs1:x1(0x0000000000100000)
    li  x1, 0x100000
    sha512sum1 x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0000080000000044)
 
sha512sum1_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0000100000000088), rs1:x31(0x0000000000200000)
    li  x31, 0x200000
    sha512sum1 x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0000100000000088)
 
sha512sum1_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0000200000000110), rs1:x30(0x0000000000400000)
    li  x30, 0x400000
    sha512sum1 x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0000200000000110)
 
sha512sum1_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0000400000000220), rs1:x29(0x0000000000800000)
    li  x29, 0x800000
    sha512sum1 x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0000400000000220)
 
sha512sum1_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x0000800000000440), rs1:x28(0x0000000001000000)
    li  x28, 0x1000000
    sha512sum1 x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0000800000000440)


    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_8_0)

 
sha512sum1_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x0001000000000880), rs1:x27(0x0000000002000000)
    li  x27, 0x2000000
    sha512sum1 x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0001000000000880)
 
sha512sum1_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x0002000000001100), rs1:x26(0x0000000004000000)
    li  x26, 0x4000000
    sha512sum1 x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0002000000001100)
 
sha512sum1_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0004000000002200), rs1:x25(0x0000000008000000)
    li  x25, 0x8000000
    sha512sum1 x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0004000000002200)
 
sha512sum1_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0008000000004400), rs1:x24(0x0000000010000000)
    li  x24, 0x10000000
    sha512sum1 x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0008000000004400)
 
sha512sum1_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0010000000008800), rs1:x23(0x0000000020000000)
    li  x23, 0x20000000
    sha512sum1 x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0010000000008800)


    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_9_0)

 
sha512sum1_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x0020000000011000), rs1:x22(0x0000000040000000)
    li  x22, 0x40000000
    sha512sum1 x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0020000000011000)
 
sha512sum1_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0040000000022000), rs1:x21(0x0000000080000000)
    li  x21, 0x80000000
    sha512sum1 x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0040000000022000)
 
sha512sum1_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0080000000044000), rs1:x20(0x0000000100000000)
    li  x20, 0x100000000
    sha512sum1 x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0080000000044000)
 
sha512sum1_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x0100000000088000), rs1:x19(0x0000000200000000)
    li  x19, 0x200000000
    sha512sum1 x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0100000000088000)
 
sha512sum1_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x0200000000110000), rs1:x18(0x0000000400000000)
    li  x18, 0x400000000
    sha512sum1 x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x0200000000110000)


    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x3,signature_10_0)

 
sha512sum1_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x0400000000220000), rs1:x17(0x0000000800000000)
    li  x17, 0x800000000
    sha512sum1 x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x0400000000220000)
 
sha512sum1_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0800000000440000), rs1:x16(0x0000001000000000)
    li  x16, 0x1000000000
    sha512sum1 x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0800000000440000)
 
sha512sum1_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x1000000000880000), rs1:x15(0x0000002000000000)
    li  x15, 0x2000000000
    sha512sum1 x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x1000000000880000)
 
sha512sum1_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x2000000001100000), rs1:x14(0x0000004000000000)
    li  x14, 0x4000000000
    sha512sum1 x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x2000000001100000)
 
sha512sum1_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x4000000002200000), rs1:x13(0x0000008000000000)
    li  x13, 0x8000000000
    sha512sum1 x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x4000000002200000)


    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_11_0)

 
sha512sum1_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x8000000004400000), rs1:x12(0x0000010000000000)
    li  x12, 0x10000000000
    sha512sum1 x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x8000000004400000)
 
sha512sum1_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000000008800001), rs1:x11(0x0000020000000000)
    li  x11, 0x20000000000
    sha512sum1 x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000008800001)
 
sha512sum1_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000000011000002), rs1:x10(0x0000040000000000)
    li  x10, 0x40000000000
    sha512sum1 x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000011000002)
 
sha512sum1_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000000022000004), rs1:x9(0x0000080000000000)
    li  x9, 0x80000000000
    sha512sum1 x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000022000004)
 
sha512sum1_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000000044000008), rs1:x8(0x0000100000000000)
    li  x8, 0x100000000000
    sha512sum1 x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000044000008)


    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_12_0)

 
sha512sum1_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0000000088000010), rs1:x7(0x0000200000000000)
    li  x7, 0x200000000000
    sha512sum1 x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000088000010)
 
sha512sum1_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x0000000110000020), rs1:x6(0x0000400000000000)
    li  x6, 0x400000000000
    sha512sum1 x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000110000020)
 
sha512sum1_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0000000220000040), rs1:x5(0x0000800000000000)
    li  x5, 0x800000000000
    sha512sum1 x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x0000000220000040)
 
sha512sum1_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0000000440000080), rs1:x4(0x0001000000000000)
    li  x4, 0x1000000000000
    sha512sum1 x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x0000000440000080)
 
sha512sum1_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0000000880000100), rs1:x3(0x0002000000000000)
    li  x3, 0x2000000000000
    sha512sum1 x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x0000000880000100)


    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x4,signature_13_0)

 
sha512sum1_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0000001100000200), rs1:x2(0x0004000000000000)
    li  x2, 0x4000000000000
    sha512sum1 x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x0000001100000200)
 
sha512sum1_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0000002200000400), rs1:x1(0x0008000000000000)
    li  x1, 0x8000000000000
    sha512sum1 x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x0000002200000400)
 
sha512sum1_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0000004400000800), rs1:x31(0x0010000000000000)
    li  x31, 0x10000000000000
    sha512sum1 x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x0000004400000800)
 
sha512sum1_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0000008800001000), rs1:x30(0x0020000000000000)
    li  x30, 0x20000000000000
    sha512sum1 x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x0000008800001000)
 
sha512sum1_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0000011000002000), rs1:x29(0x0040000000000000)
    li  x29, 0x40000000000000
    sha512sum1 x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x0000011000002000)


    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_14_0)

 
sha512sum1_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0000022000004000), rs1:x28(0x0080000000000000)
    li  x28, 0x80000000000000
    sha512sum1 x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x0000022000004000)
 
sha512sum1_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0000044000008000), rs1:x27(0x0100000000000000)
    li  x27, 0x100000000000000
    sha512sum1 x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000044000008000)
 
sha512sum1_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x0000088000010000), rs1:x26(0x0200000000000000)
    li  x26, 0x200000000000000
    sha512sum1 x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000088000010000)
 
sha512sum1_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x0000110000020000), rs1:x25(0x0400000000000000)
    li  x25, 0x400000000000000
    sha512sum1 x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000110000020000)
 
sha512sum1_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x0000220000040000), rs1:x24(0x0800000000000000)
    li  x24, 0x800000000000000
    sha512sum1 x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000220000040000)


    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_15_0)

 
sha512sum1_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x0000440000080000), rs1:x23(0x1000000000000000)
    li  x23, 0x1000000000000000
    sha512sum1 x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000440000080000)
 
sha512sum1_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x0000880000100000), rs1:x22(0x2000000000000000)
    li  x22, 0x2000000000000000
    sha512sum1 x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000880000100000)
 
sha512sum1_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x0001100000200000), rs1:x21(0x4000000000000000)
    li  x21, 0x4000000000000000
    sha512sum1 x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0001100000200000)
 
sha512sum1_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x0002200000400000), rs1:x20(0x8000000000000000)
    li  x20, 0x8000000000000000
    sha512sum1 x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0002200000400000)
 
sha512sum1_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000)
    li  x19, 0x0
    sha512sum1 x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)


    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x4,signature_16_0)

 
sha512sum1_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0xfffbbfffff7fffff), rs1:x18(0xfffffffffffffffe)
    li  x18, 0xfffffffffffffffe
    sha512sum1 x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0xfffbbfffff7fffff)
 
sha512sum1_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0xfff77ffffeffffff), rs1:x17(0xfffffffffffffffd)
    li  x17, 0xfffffffffffffffd
    sha512sum1 x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0xfff77ffffeffffff)
 
sha512sum1_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0xffeefffffdffffff), rs1:x16(0xfffffffffffffffb)
    li  x16, 0xfffffffffffffffb
    sha512sum1 x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0xffeefffffdffffff)
 
sha512sum1_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0xffddfffffbffffff), rs1:x15(0xfffffffffffffff7)
    li  x15, 0xfffffffffffffff7
    sha512sum1 x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0xffddfffffbffffff)
 
sha512sum1_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0xffbbfffff7ffffff), rs1:x14(0xffffffffffffffef)
    li  x14, 0xffffffffffffffef
    sha512sum1 x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0xffbbfffff7ffffff)


    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_17_0)

 
sha512sum1_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0xff77ffffefffffff), rs1:x13(0xffffffffffffffdf)
    li  x13, 0xffffffffffffffdf
    sha512sum1 x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0xff77ffffefffffff)
 
sha512sum1_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0xfeefffffdfffffff), rs1:x12(0xffffffffffffffbf)
    li  x12, 0xffffffffffffffbf
    sha512sum1 x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xfeefffffdfffffff)
 
sha512sum1_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0xfddfffffbfffffff), rs1:x11(0xffffffffffffff7f)
    li  x11, 0xffffffffffffff7f
    sha512sum1 x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xfddfffffbfffffff)
 
sha512sum1_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0xfbbfffff7fffffff), rs1:x10(0xfffffffffffffeff)
    li  x10, 0xfffffffffffffeff
    sha512sum1 x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xfbbfffff7fffffff)
 
sha512sum1_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0xf77ffffeffffffff), rs1:x9(0xfffffffffffffdff)
    li  x9, 0xfffffffffffffdff
    sha512sum1 x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xf77ffffeffffffff)


    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_18_0)

 
sha512sum1_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0xeefffffdffffffff), rs1:x8(0xfffffffffffffbff)
    li  x8, 0xfffffffffffffbff
    sha512sum1 x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xeefffffdffffffff)
 
sha512sum1_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0xddfffffbffffffff), rs1:x7(0xfffffffffffff7ff)
    li  x7, 0xfffffffffffff7ff
    sha512sum1 x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xddfffffbffffffff)
 
sha512sum1_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0xbbfffff7ffffffff), rs1:x6(0xffffffffffffefff)
    li  x6, 0xffffffffffffefff
    sha512sum1 x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0xbbfffff7ffffffff)
 
sha512sum1_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0x77ffffefffffffff), rs1:x5(0xffffffffffffdfff)
    li  x5, 0xffffffffffffdfff
    sha512sum1 x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x77ffffefffffffff)
 
sha512sum1_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0xefffffdffffffffe), rs1:x4(0xffffffffffffbfff)
    li  x4, 0xffffffffffffbfff
    sha512sum1 x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0xefffffdffffffffe)


    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x4,signature_19_0)

 
sha512sum1_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0xdfffffbffffffffd), rs1:x3(0xffffffffffff7fff)
    li  x3, 0xffffffffffff7fff
    sha512sum1 x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0xdfffffbffffffffd)
 
sha512sum1_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0xbfffff7ffffffffb), rs1:x2(0xfffffffffffeffff)
    li  x2, 0xfffffffffffeffff
    sha512sum1 x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0xbfffff7ffffffffb)
 
sha512sum1_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0x7ffffefffffffff7), rs1:x1(0xfffffffffffdffff)
    li  x1, 0xfffffffffffdffff
    sha512sum1 x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x7ffffefffffffff7)
 
sha512sum1_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0xfffffdffffffffee), rs1:x31(0xfffffffffffbffff)
    li  x31, 0xfffffffffffbffff
    sha512sum1 x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0xfffffdffffffffee)
 
sha512sum1_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0xfffffbffffffffdd), rs1:x30(0xfffffffffff7ffff)
    li  x30, 0xfffffffffff7ffff
    sha512sum1 x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0xfffffbffffffffdd)


    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_20_0)

 
sha512sum1_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0xfffff7ffffffffbb), rs1:x29(0xffffffffffefffff)
    li  x29, 0xffffffffffefffff
    sha512sum1 x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0xfffff7ffffffffbb)
 
sha512sum1_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0xffffefffffffff77), rs1:x28(0xffffffffffdfffff)
    li  x28, 0xffffffffffdfffff
    sha512sum1 x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0xffffefffffffff77)
 
sha512sum1_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0xffffdffffffffeef), rs1:x27(0xffffffffffbfffff)
    li  x27, 0xffffffffffbfffff
    sha512sum1 x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0xffffdffffffffeef)
 
sha512sum1_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0xffffbffffffffddf), rs1:x26(0xffffffffff7fffff)
    li  x26, 0xffffffffff7fffff
    sha512sum1 x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xffffbffffffffddf)
 
sha512sum1_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0xffff7ffffffffbbf), rs1:x25(0xfffffffffeffffff)
    li  x25, 0xfffffffffeffffff
    sha512sum1 x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xffff7ffffffffbbf)


    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_21_0)

 
sha512sum1_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0xfffefffffffff77f), rs1:x24(0xfffffffffdffffff)
    li  x24, 0xfffffffffdffffff
    sha512sum1 x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xfffefffffffff77f)
 
sha512sum1_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0xfffdffffffffeeff), rs1:x23(0xfffffffffbffffff)
    li  x23, 0xfffffffffbffffff
    sha512sum1 x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xfffdffffffffeeff)
 
sha512sum1_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0xfffbffffffffddff), rs1:x22(0xfffffffff7ffffff)
    li  x22, 0xfffffffff7ffffff
    sha512sum1 x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xfffbffffffffddff)
 
sha512sum1_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0xfff7ffffffffbbff), rs1:x21(0xffffffffefffffff)
    li  x21, 0xffffffffefffffff
    sha512sum1 x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xfff7ffffffffbbff)
 
sha512sum1_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0xffefffffffff77ff), rs1:x20(0xffffffffdfffffff)
    li  x20, 0xffffffffdfffffff
    sha512sum1 x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0xffefffffffff77ff)


    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x5,signature_22_0)

 
sha512sum1_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0xffdffffffffeefff), rs1:x19(0xffffffffbfffffff)
    li  x19, 0xffffffffbfffffff
    sha512sum1 x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0xffdffffffffeefff)
 
sha512sum1_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0xffbffffffffddfff), rs1:x18(0xffffffff7fffffff)
    li  x18, 0xffffffff7fffffff
    sha512sum1 x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0xffbffffffffddfff)
 
sha512sum1_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0xff7ffffffffbbfff), rs1:x17(0xfffffffeffffffff)
    li  x17, 0xfffffffeffffffff
    sha512sum1 x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0xff7ffffffffbbfff)
 
sha512sum1_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0xfefffffffff77fff), rs1:x16(0xfffffffdffffffff)
    li  x16, 0xfffffffdffffffff
    sha512sum1 x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0xfefffffffff77fff)
 
sha512sum1_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0xfdffffffffeeffff), rs1:x15(0xfffffffbffffffff)
    li  x15, 0xfffffffbffffffff
    sha512sum1 x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0xfdffffffffeeffff)


    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_23_0)

 
sha512sum1_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0xfbffffffffddffff), rs1:x14(0xfffffff7ffffffff)
    li  x14, 0xfffffff7ffffffff
    sha512sum1 x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0xfbffffffffddffff)
 
sha512sum1_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0xf7ffffffffbbffff), rs1:x13(0xffffffefffffffff)
    li  x13, 0xffffffefffffffff
    sha512sum1 x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0xf7ffffffffbbffff)
 
sha512sum1_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0xefffffffff77ffff), rs1:x12(0xffffffdfffffffff)
    li  x12, 0xffffffdfffffffff
    sha512sum1 x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xefffffffff77ffff)
 
sha512sum1_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0xdffffffffeefffff), rs1:x11(0xffffffbfffffffff)
    li  x11, 0xffffffbfffffffff
    sha512sum1 x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xdffffffffeefffff)
 
sha512sum1_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0xbffffffffddfffff), rs1:x10(0xffffff7fffffffff)
    li  x10, 0xffffff7fffffffff
    sha512sum1 x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xbffffffffddfffff)


    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_24_0)

 
sha512sum1_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0x7ffffffffbbfffff), rs1:x9(0xfffffeffffffffff)
    li  x9, 0xfffffeffffffffff
    sha512sum1 x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x7ffffffffbbfffff)
 
sha512sum1_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0xfffffffff77ffffe), rs1:x8(0xfffffdffffffffff)
    li  x8, 0xfffffdffffffffff
    sha512sum1 x24, x8
    sd x24, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xfffffffff77ffffe)
 
sha512sum1_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0xffffffffeefffffd), rs1:x7(0xfffffbffffffffff)
    li  x7, 0xfffffbffffffffff
    sha512sum1 x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xffffffffeefffffd)
 
sha512sum1_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0xffffffffddfffffb), rs1:x6(0xfffff7ffffffffff)
    li  x6, 0xfffff7ffffffffff
    sha512sum1 x26, x6
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0xffffffffddfffffb)
 
sha512sum1_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0xffffffffbbfffff7), rs1:x5(0xffffefffffffffff)
    li  x5, 0xffffefffffffffff
    sha512sum1 x27, x5
    sd x27, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0xffffffffbbfffff7)


    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x5,signature_25_0)

 
sha512sum1_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0xffffffff77ffffef), rs1:x4(0xffffdfffffffffff)
    li  x4, 0xffffdfffffffffff
    sha512sum1 x28, x4
    sd x28, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x28, 0xffffffff77ffffef)
 
sha512sum1_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0xfffffffeefffffdf), rs1:x3(0xffffbfffffffffff)
    li  x3, 0xffffbfffffffffff
    sha512sum1 x29, x3
    sd x29, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x29, 0xfffffffeefffffdf)
 
sha512sum1_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0xfffffffddfffffbf), rs1:x2(0xffff7fffffffffff)
    li  x2, 0xffff7fffffffffff
    sha512sum1 x30, x2
    sd x30, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x30, 0xfffffffddfffffbf)
 
sha512sum1_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0xfffffffbbfffff7f), rs1:x1(0xfffeffffffffffff)
    li  x1, 0xfffeffffffffffff
    sha512sum1 x31, x1
    sd x31, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0xfffffffbbfffff7f)
 
sha512sum1_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0xfffffff77ffffeff), rs1:x31(0xfffdffffffffffff)
    li  x31, 0xfffdffffffffffff
    sha512sum1 x1, x31
    sd x1, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0xfffffff77ffffeff)


    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_26_0)

 
sha512sum1_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0xffffffeefffffdff), rs1:x30(0xfffbffffffffffff)
    li  x30, 0xfffbffffffffffff
    sha512sum1 x2, x30
    sd x2, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0xffffffeefffffdff)
 
sha512sum1_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0xffffffddfffffbff), rs1:x29(0xfff7ffffffffffff)
    li  x29, 0xfff7ffffffffffff
    sha512sum1 x3, x29
    sd x3, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0xffffffddfffffbff)
 
sha512sum1_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0xffffffbbfffff7ff), rs1:x28(0xffefffffffffffff)
    li  x28, 0xffefffffffffffff
    sha512sum1 x4, x28
    sd x4, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0xffffffbbfffff7ff)
 
sha512sum1_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0xffffff77ffffefff), rs1:x27(0xffdfffffffffffff)
    li  x27, 0xffdfffffffffffff
    sha512sum1 x5, x27
    sd x5, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0xffffff77ffffefff)
 
sha512sum1_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0xfffffeefffffdfff), rs1:x26(0xffbfffffffffffff)
    li  x26, 0xffbfffffffffffff
    sha512sum1 x6, x26
    sd x6, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x6, 0xfffffeefffffdfff)


    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_27_0)

 
sha512sum1_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0xfffffddfffffbfff), rs1:x25(0xff7fffffffffffff)
    li  x25, 0xff7fffffffffffff
    sha512sum1 x7, x25
    sd x7, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xfffffddfffffbfff)
 
sha512sum1_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0xfffffbbfffff7fff), rs1:x24(0xfeffffffffffffff)
    li  x24, 0xfeffffffffffffff
    sha512sum1 x8, x24
    sd x8, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xfffffbbfffff7fff)
 
sha512sum1_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0xfffff77ffffeffff), rs1:x23(0xfdffffffffffffff)
    li  x23, 0xfdffffffffffffff
    sha512sum1 x9, x23
    sd x9, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xfffff77ffffeffff)
 
sha512sum1_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0xffffeefffffdffff), rs1:x22(0xfbffffffffffffff)
    li  x22, 0xfbffffffffffffff
    sha512sum1 x10, x22
    sd x10, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xffffeefffffdffff)
 
sha512sum1_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0xffffddfffffbffff), rs1:x21(0xf7ffffffffffffff)
    li  x21, 0xf7ffffffffffffff
    sha512sum1 x11, x21
    sd x11, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xffffddfffffbffff)


    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x6,signature_28_0)

 
sha512sum1_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0xffffbbfffff7ffff), rs1:x20(0xefffffffffffffff)
    li  x20, 0xefffffffffffffff
    sha512sum1 x12, x20
    sd x12, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0xffffbbfffff7ffff)
 
sha512sum1_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0xffff77ffffefffff), rs1:x19(0xdfffffffffffffff)
    li  x19, 0xdfffffffffffffff
    sha512sum1 x13, x19
    sd x13, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0xffff77ffffefffff)
 
sha512sum1_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0xfffeefffffdfffff), rs1:x18(0xbfffffffffffffff)
    li  x18, 0xbfffffffffffffff
    sha512sum1 x14, x18
    sd x14, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0xfffeefffffdfffff)
 
sha512sum1_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0xfffddfffffbfffff), rs1:x17(0x7fffffffffffffff)
    li  x17, 0x7fffffffffffffff
    sha512sum1 x15, x17
    sd x15, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0xfffddfffffbfffff)
 
sha512sum1_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xffffffffffffffff)
    li  x16, 0xffffffffffffffff
    sha512sum1 x16, x16
    sd x16, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x16, 0xffffffffffffffff)


    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_29_0)

 
sha512sum1_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0004400000800000), rs1:x15(0x0000000000000001)
    li  x15, 0x1
    sha512sum1 x17, x15
    sd x17, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x17, 0x0004400000800000)
 
sha512sum1_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0008800001000000), rs1:x14(0x0000000000000002)
    li  x14, 0x2
    sha512sum1 x18, x14
    sd x18, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x0008800001000000)
 
sha512sum1_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0011000002000000), rs1:x13(0x0000000000000004)
    li  x13, 0x4
    sha512sum1 x19, x13
    sd x19, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x0011000002000000)
 
sha512sum1_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0022000004000000), rs1:x12(0x0000000000000008)
    li  x12, 0x8
    sha512sum1 x20, x12
    sd x20, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0022000004000000)
 
sha512sum1_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0044000008000000), rs1:x11(0x0000000000000010)
    li  x11, 0x10
    sha512sum1 x21, x11
    sd x21, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0044000008000000)


    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_30_0)

 
sha512sum1_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0088000010000000), rs1:x10(0x0000000000000020)
    li  x10, 0x20
    sha512sum1 x22, x10
    sd x22, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0088000010000000)
 
sha512sum1_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0110000020000000), rs1:x9(0x0000000000000040)
    li  x9, 0x40
    sha512sum1 x23, x9
    sd x23, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0110000020000000)
 
sha512sum1_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0220000040000000), rs1:x8(0x0000000000000080)
    li  x8, 0x80
    sha512sum1 x24, x8
    sd x24, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0220000040000000)
 
sha512sum1_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0440000080000000), rs1:x7(0x0000000000000100)
    li  x7, 0x100
    sha512sum1 x25, x7
    sd x25, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0440000080000000)
 
sha512sum1_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0880000100000000), rs1:x6(0x0000000000000200)
    li  x6, 0x200
    sha512sum1 x26, x6
    sd x26, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0880000100000000)


    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x6,signature_31_0)

 
sha512sum1_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x1100000200000000), rs1:x5(0x0000000000000400)
    li  x5, 0x400
    sha512sum1 x27, x5
    sd x27, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x1100000200000000)
 
sha512sum1_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x2200000400000000), rs1:x4(0x0000000000000800)
    li  x4, 0x800
    sha512sum1 x28, x4
    sd x28, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x2200000400000000)
 
sha512sum1_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x4400000800000000), rs1:x3(0x0000000000001000)
    li  x3, 0x1000
    sha512sum1 x29, x3
    sd x29, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x4400000800000000)
 
sha512sum1_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x8800001000000000), rs1:x2(0x0000000000002000)
    li  x2, 0x2000
    sha512sum1 x30, x2
    sd x30, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x8800001000000000)
 
sha512sum1_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x1000002000000001), rs1:x1(0x0000000000004000)
    li  x1, 0x4000
    sha512sum1 x31, x1
    sd x31, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x1000002000000001)


    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x6,signature_32_0)

 
sha512sum1_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x2000004000000002), rs1:x31(0x0000000000008000)
    li  x31, 0x8000
    sha512sum1 x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x2000004000000002)
 
sha512sum1_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x4000008000000004), rs1:x30(0x0000000000010000)
    li  x30, 0x10000
    sha512sum1 x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x4000008000000004)
 
sha512sum1_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x8000010000000008), rs1:x29(0x0000000000020000)
    li  x29, 0x20000
    sha512sum1 x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x8000010000000008)
 
sha512sum1_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000020000000011), rs1:x28(0x0000000000040000)
    li  x28, 0x40000
    sha512sum1 x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x0000020000000011)
 
sha512sum1_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000040000000022), rs1:x27(0x0000000000080000)
    li  x27, 0x80000
    sha512sum1 x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x0000040000000022)


    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_33_0)

 
sha512sum1_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000080000000044), rs1:x26(0x0000000000100000)
    li  x26, 0x100000
    sha512sum1 x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000080000000044)
 
sha512sum1_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000100000000088), rs1:x25(0x0000000000200000)
    li  x25, 0x200000
    sha512sum1 x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000100000000088)
 
sha512sum1_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000200000000110), rs1:x24(0x0000000000400000)
    li  x24, 0x400000
    sha512sum1 x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000200000000110)
 
sha512sum1_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000400000000220), rs1:x23(0x0000000000800000)
    li  x23, 0x800000
    sha512sum1 x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000400000000220)
 
sha512sum1_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000800000000440), rs1:x22(0x0000000001000000)
    li  x22, 0x1000000
    sha512sum1 x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000800000000440)


    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_34_0)

 
sha512sum1_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0001000000000880), rs1:x21(0x0000000002000000)
    li  x21, 0x2000000
    sha512sum1 x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x0001000000000880)
 
sha512sum1_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0002000000001100), rs1:x20(0x0000000004000000)
    li  x20, 0x4000000
    sha512sum1 x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0002000000001100)
 
sha512sum1_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0004000000002200), rs1:x19(0x0000000008000000)
    li  x19, 0x8000000
    sha512sum1 x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0004000000002200)
 
sha512sum1_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0008000000004400), rs1:x18(0x0000000010000000)
    li  x18, 0x10000000
    sha512sum1 x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0008000000004400)
 
sha512sum1_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0010000000008800), rs1:x17(0x0000000020000000)
    li  x17, 0x20000000
    sha512sum1 x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0010000000008800)


    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x2,signature_35_0)

 
sha512sum1_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0020000000011000), rs1:x16(0x0000000040000000)
    li  x16, 0x40000000
    sha512sum1 x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0020000000011000)
 
sha512sum1_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0040000000022000), rs1:x15(0x0000000080000000)
    li  x15, 0x80000000
    sha512sum1 x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x0040000000022000)
 
sha512sum1_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0080000000044000), rs1:x14(0x0000000100000000)
    li  x14, 0x100000000
    sha512sum1 x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x0080000000044000)
 
sha512sum1_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0100000000088000), rs1:x13(0x0000000200000000)
    li  x13, 0x200000000
    sha512sum1 x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0100000000088000)
 
sha512sum1_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0200000000110000), rs1:x12(0x0000000400000000)
    li  x12, 0x400000000
    sha512sum1 x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0200000000110000)


    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_36_0)

 
sha512sum1_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0400000000220000), rs1:x11(0x0000000800000000)
    li  x11, 0x800000000
    sha512sum1 x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0400000000220000)
 
sha512sum1_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0800000000440000), rs1:x10(0x0000001000000000)
    li  x10, 0x1000000000
    sha512sum1 x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0800000000440000)
 
sha512sum1_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x1000000000880000), rs1:x9(0x0000002000000000)
    li  x9, 0x2000000000
    sha512sum1 x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x1000000000880000)
 
sha512sum1_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x2000000001100000), rs1:x8(0x0000004000000000)
    li  x8, 0x4000000000
    sha512sum1 x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x2000000001100000)
 
sha512sum1_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x4000000002200000), rs1:x7(0x0000008000000000)
    li  x7, 0x8000000000
    sha512sum1 x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x4000000002200000)


    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_37_0)

 
sha512sum1_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x8000000004400000), rs1:x6(0x0000010000000000)
    li  x6, 0x10000000000
    sha512sum1 x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x8000000004400000)
 
sha512sum1_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000000008800001), rs1:x5(0x0000020000000000)
    li  x5, 0x20000000000
    sha512sum1 x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000008800001)
 
sha512sum1_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000000011000002), rs1:x4(0x0000040000000000)
    li  x4, 0x40000000000
    sha512sum1 x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000011000002)
 
sha512sum1_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000000022000004), rs1:x3(0x0000080000000000)
    li  x3, 0x80000000000
    sha512sum1 x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000022000004)
 
sha512sum1_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000000044000008), rs1:x2(0x0000100000000000)
    li  x2, 0x100000000000
    sha512sum1 x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000044000008)


    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x5,signature_38_0)

 
sha512sum1_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000000088000010), rs1:x1(0x0000200000000000)
    li  x1, 0x200000000000
    sha512sum1 x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0000000088000010)
 
sha512sum1_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000000110000020), rs1:x31(0x0000400000000000)
    li  x31, 0x400000000000
    sha512sum1 x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0000000110000020)
 
sha512sum1_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000000220000040), rs1:x30(0x0000800000000000)
    li  x30, 0x800000000000
    sha512sum1 x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0000000220000040)
 
sha512sum1_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0000000440000080), rs1:x29(0x0001000000000000)
    li  x29, 0x1000000000000
    sha512sum1 x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0000000440000080)
 
sha512sum1_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0000000880000100), rs1:x28(0x0002000000000000)
    li  x28, 0x2000000000000
    sha512sum1 x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0000000880000100)


    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_39_0)

 
sha512sum1_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0000001100000200), rs1:x27(0x0004000000000000)
    li  x27, 0x4000000000000
    sha512sum1 x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000001100000200)
 
sha512sum1_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0000002200000400), rs1:x26(0x0008000000000000)
    li  x26, 0x8000000000000
    sha512sum1 x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000002200000400)
 
sha512sum1_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0000004400000800), rs1:x25(0x0010000000000000)
    li  x25, 0x10000000000000
    sha512sum1 x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000004400000800)
 
sha512sum1_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0000008800001000), rs1:x24(0x0020000000000000)
    li  x24, 0x20000000000000
    sha512sum1 x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000008800001000)
 
sha512sum1_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0000011000002000), rs1:x23(0x0040000000000000)
    li  x23, 0x40000000000000
    sha512sum1 x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000011000002000)


    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_40_0)

 
sha512sum1_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0000022000004000), rs1:x22(0x0080000000000000)
    li  x22, 0x80000000000000
    sha512sum1 x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000022000004000)
 
sha512sum1_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0000044000008000), rs1:x21(0x0100000000000000)
    li  x21, 0x100000000000000
    sha512sum1 x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000044000008000)
 
sha512sum1_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0000088000010000), rs1:x20(0x0200000000000000)
    li  x20, 0x200000000000000
    sha512sum1 x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000088000010000)
 
sha512sum1_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0000110000020000), rs1:x19(0x0400000000000000)
    li  x19, 0x400000000000000
    sha512sum1 x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000110000020000)
 
sha512sum1_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0000220000040000), rs1:x18(0x0800000000000000)
    li  x18, 0x800000000000000
    sha512sum1 x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x0000220000040000)


    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x3,signature_41_0)

 
sha512sum1_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x0000440000080000), rs1:x17(0x1000000000000000)
    li  x17, 0x1000000000000000
    sha512sum1 x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x0000440000080000)
 
sha512sum1_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x0000880000100000), rs1:x16(0x2000000000000000)
    li  x16, 0x2000000000000000
    sha512sum1 x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0000880000100000)
 
sha512sum1_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x0001100000200000), rs1:x15(0x4000000000000000)
    li  x15, 0x4000000000000000
    sha512sum1 x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x0001100000200000)
 
sha512sum1_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x0002200000400000), rs1:x14(0x8000000000000000)
    li  x14, 0x8000000000000000
    sha512sum1 x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x0002200000400000)
 
sha512sum1_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000)
    li  x13, 0x0
    sha512sum1 x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000000000000000)


    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_42_0)

 
sha512sum1_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0xfffbbfffff7fffff), rs1:x12(0xfffffffffffffffe)
    li  x12, 0xfffffffffffffffe
    sha512sum1 x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xfffbbfffff7fffff)
 
sha512sum1_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0xfff77ffffeffffff), rs1:x11(0xfffffffffffffffd)
    li  x11, 0xfffffffffffffffd
    sha512sum1 x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xfff77ffffeffffff)
 
sha512sum1_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0xffeefffffdffffff), rs1:x10(0xfffffffffffffffb)
    li  x10, 0xfffffffffffffffb
    sha512sum1 x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xffeefffffdffffff)
 
sha512sum1_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0xffddfffffbffffff), rs1:x9(0xfffffffffffffff7)
    li  x9, 0xfffffffffffffff7
    sha512sum1 x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xffddfffffbffffff)
 
sha512sum1_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0xffbbfffff7ffffff), rs1:x8(0xffffffffffffffef)
    li  x8, 0xffffffffffffffef
    sha512sum1 x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xffbbfffff7ffffff)


    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_43_0)

 
sha512sum1_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0xff77ffffefffffff), rs1:x7(0xffffffffffffffdf)
    li  x7, 0xffffffffffffffdf
    sha512sum1 x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xff77ffffefffffff)
 
sha512sum1_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0xfeefffffdfffffff), rs1:x6(0xffffffffffffffbf)
    li  x6, 0xffffffffffffffbf
    sha512sum1 x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0xfeefffffdfffffff)
 
sha512sum1_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0xfddfffffbfffffff), rs1:x5(0xffffffffffffff7f)
    li  x5, 0xffffffffffffff7f
    sha512sum1 x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0xfddfffffbfffffff)
 
sha512sum1_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0xfbbfffff7fffffff), rs1:x4(0xfffffffffffffeff)
    li  x4, 0xfffffffffffffeff
    sha512sum1 x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0xfbbfffff7fffffff)
 
sha512sum1_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0xf77ffffeffffffff), rs1:x3(0xfffffffffffffdff)
    li  x3, 0xfffffffffffffdff
    sha512sum1 x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0xf77ffffeffffffff)


    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x4,signature_44_0)

 
sha512sum1_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0xeefffffdffffffff), rs1:x2(0xfffffffffffffbff)
    li  x2, 0xfffffffffffffbff
    sha512sum1 x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0xeefffffdffffffff)
 
sha512sum1_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0xddfffffbffffffff), rs1:x1(0xfffffffffffff7ff)
    li  x1, 0xfffffffffffff7ff
    sha512sum1 x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0xddfffffbffffffff)
 
sha512sum1_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0xbbfffff7ffffffff), rs1:x31(0xffffffffffffefff)
    li  x31, 0xffffffffffffefff
    sha512sum1 x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0xbbfffff7ffffffff)
 
sha512sum1_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0x77ffffefffffffff), rs1:x30(0xffffffffffffdfff)
    li  x30, 0xffffffffffffdfff
    sha512sum1 x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x77ffffefffffffff)
 
sha512sum1_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0xefffffdffffffffe), rs1:x29(0xffffffffffffbfff)
    li  x29, 0xffffffffffffbfff
    sha512sum1 x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0xefffffdffffffffe)


    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_45_0)

 
sha512sum1_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0xdfffffbffffffffd), rs1:x28(0xffffffffffff7fff)
    li  x28, 0xffffffffffff7fff
    sha512sum1 x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0xdfffffbffffffffd)
 
sha512sum1_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0xbfffff7ffffffffb), rs1:x27(0xfffffffffffeffff)
    li  x27, 0xfffffffffffeffff
    sha512sum1 x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0xbfffff7ffffffffb)
 
sha512sum1_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0x7ffffefffffffff7), rs1:x26(0xfffffffffffdffff)
    li  x26, 0xfffffffffffdffff
    sha512sum1 x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x7ffffefffffffff7)
 
sha512sum1_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0xfffffdffffffffee), rs1:x25(0xfffffffffffbffff)
    li  x25, 0xfffffffffffbffff
    sha512sum1 x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xfffffdffffffffee)
 
sha512sum1_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0xfffffbffffffffdd), rs1:x24(0xfffffffffff7ffff)
    li  x24, 0xfffffffffff7ffff
    sha512sum1 x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xfffffbffffffffdd)


    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_46_0)

 
sha512sum1_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0xfffff7ffffffffbb), rs1:x23(0xffffffffffefffff)
    li  x23, 0xffffffffffefffff
    sha512sum1 x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xfffff7ffffffffbb)
 
sha512sum1_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0xffffefffffffff77), rs1:x22(0xffffffffffdfffff)
    li  x22, 0xffffffffffdfffff
    sha512sum1 x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xffffefffffffff77)
 
sha512sum1_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0xffffdffffffffeef), rs1:x21(0xffffffffffbfffff)
    li  x21, 0xffffffffffbfffff
    sha512sum1 x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xffffdffffffffeef)
 
sha512sum1_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0xffffbffffffffddf), rs1:x20(0xffffffffff7fffff)
    li  x20, 0xffffffffff7fffff
    sha512sum1 x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0xffffbffffffffddf)
 
sha512sum1_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0xffff7ffffffffbbf), rs1:x19(0xfffffffffeffffff)
    li  x19, 0xfffffffffeffffff
    sha512sum1 x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0xffff7ffffffffbbf)


    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x4,signature_47_0)

 
sha512sum1_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0xfffefffffffff77f), rs1:x18(0xfffffffffdffffff)
    li  x18, 0xfffffffffdffffff
    sha512sum1 x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0xfffefffffffff77f)
 
sha512sum1_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0xfffdffffffffeeff), rs1:x17(0xfffffffffbffffff)
    li  x17, 0xfffffffffbffffff
    sha512sum1 x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0xfffdffffffffeeff)
 
sha512sum1_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0xfffbffffffffddff), rs1:x16(0xfffffffff7ffffff)
    li  x16, 0xfffffffff7ffffff
    sha512sum1 x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0xfffbffffffffddff)
 
sha512sum1_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0xfff7ffffffffbbff), rs1:x15(0xffffffffefffffff)
    li  x15, 0xffffffffefffffff
    sha512sum1 x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0xfff7ffffffffbbff)
 
sha512sum1_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0xffefffffffff77ff), rs1:x14(0xffffffffdfffffff)
    li  x14, 0xffffffffdfffffff
    sha512sum1 x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0xffefffffffff77ff)


    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_48_0)

 
sha512sum1_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0xffdffffffffeefff), rs1:x13(0xffffffffbfffffff)
    li  x13, 0xffffffffbfffffff
    sha512sum1 x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0xffdffffffffeefff)
 
sha512sum1_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0xffbffffffffddfff), rs1:x12(0xffffffff7fffffff)
    li  x12, 0xffffffff7fffffff
    sha512sum1 x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xffbffffffffddfff)
 
sha512sum1_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0xff7ffffffffbbfff), rs1:x11(0xfffffffeffffffff)
    li  x11, 0xfffffffeffffffff
    sha512sum1 x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xff7ffffffffbbfff)
 
sha512sum1_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0xfefffffffff77fff), rs1:x10(0xfffffffdffffffff)
    li  x10, 0xfffffffdffffffff
    sha512sum1 x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xfefffffffff77fff)
 
sha512sum1_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0xfdffffffffeeffff), rs1:x9(0xfffffffbffffffff)
    li  x9, 0xfffffffbffffffff
    sha512sum1 x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xfdffffffffeeffff)


    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_49_0)

 
sha512sum1_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0xfbffffffffddffff), rs1:x8(0xfffffff7ffffffff)
    li  x8, 0xfffffff7ffffffff
    sha512sum1 x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xfbffffffffddffff)
 
sha512sum1_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0xf7ffffffffbbffff), rs1:x7(0xffffffefffffffff)
    li  x7, 0xffffffefffffffff
    sha512sum1 x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xf7ffffffffbbffff)
 
sha512sum1_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0xefffffffff77ffff), rs1:x6(0xffffffdfffffffff)
    li  x6, 0xffffffdfffffffff
    sha512sum1 x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0xefffffffff77ffff)
 
sha512sum1_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0xdffffffffeefffff), rs1:x5(0xffffffbfffffffff)
    li  x5, 0xffffffbfffffffff
    sha512sum1 x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0xdffffffffeefffff)
 
sha512sum1_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0xbffffffffddfffff), rs1:x4(0xffffff7fffffffff)
    li  x4, 0xffffff7fffffffff
    sha512sum1 x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0xbffffffffddfffff)


    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x4,signature_50_0)

 
sha512sum1_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0x7ffffffffbbfffff), rs1:x3(0xfffffeffffffffff)
    li  x3, 0xfffffeffffffffff
    sha512sum1 x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0x7ffffffffbbfffff)
 
sha512sum1_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0xfffffffff77ffffe), rs1:x2(0xfffffdffffffffff)
    li  x2, 0xfffffdffffffffff
    sha512sum1 x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0xfffffffff77ffffe)
 
sha512sum1_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0xffffffffeefffffd), rs1:x1(0xfffffbffffffffff)
    li  x1, 0xfffffbffffffffff
    sha512sum1 x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0xffffffffeefffffd)
 
sha512sum1_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0xffffffffddfffffb), rs1:x31(0xfffff7ffffffffff)
    li  x31, 0xfffff7ffffffffff
    sha512sum1 x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0xffffffffddfffffb)
 
sha512sum1_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0xffffffffbbfffff7), rs1:x30(0xffffefffffffffff)
    li  x30, 0xffffefffffffffff
    sha512sum1 x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0xffffffffbbfffff7)


    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_51_0)

 
sha512sum1_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0xffffffff77ffffef), rs1:x29(0xffffdfffffffffff)
    li  x29, 0xffffdfffffffffff
    sha512sum1 x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0xffffffff77ffffef)
 
sha512sum1_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0xfffffffeefffffdf), rs1:x28(0xffffbfffffffffff)
    li  x28, 0xffffbfffffffffff
    sha512sum1 x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0xfffffffeefffffdf)
 
sha512sum1_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0xfffffffddfffffbf), rs1:x27(0xffff7fffffffffff)
    li  x27, 0xffff7fffffffffff
    sha512sum1 x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0xfffffffddfffffbf)
 
sha512sum1_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0xfffffffbbfffff7f), rs1:x26(0xfffeffffffffffff)
    li  x26, 0xfffeffffffffffff
    sha512sum1 x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xfffffffbbfffff7f)
 
sha512sum1_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0xfffffff77ffffeff), rs1:x25(0xfffdffffffffffff)
    li  x25, 0xfffdffffffffffff
    sha512sum1 x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xfffffff77ffffeff)


    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_52_0)

 
sha512sum1_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0xffffffeefffffdff), rs1:x24(0xfffbffffffffffff)
    li  x24, 0xfffbffffffffffff
    sha512sum1 x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xffffffeefffffdff)
 
sha512sum1_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0xffffffddfffffbff), rs1:x23(0xfff7ffffffffffff)
    li  x23, 0xfff7ffffffffffff
    sha512sum1 x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xffffffddfffffbff)
 
sha512sum1_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0xffffffbbfffff7ff), rs1:x22(0xffefffffffffffff)
    li  x22, 0xffefffffffffffff
    sha512sum1 x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xffffffbbfffff7ff)
 
sha512sum1_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0xffffff77ffffefff), rs1:x21(0xffdfffffffffffff)
    li  x21, 0xffdfffffffffffff
    sha512sum1 x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xffffff77ffffefff)
 
sha512sum1_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0xfffffeefffffdfff), rs1:x20(0xffbfffffffffffff)
    li  x20, 0xffbfffffffffffff
    sha512sum1 x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0xfffffeefffffdfff)


    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x5,signature_53_0)

 
sha512sum1_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0xfffffddfffffbfff), rs1:x19(0xff7fffffffffffff)
    li  x19, 0xff7fffffffffffff
    sha512sum1 x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0xfffffddfffffbfff)
 
sha512sum1_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0xfffffbbfffff7fff), rs1:x18(0xfeffffffffffffff)
    li  x18, 0xfeffffffffffffff
    sha512sum1 x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0xfffffbbfffff7fff)
 
sha512sum1_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0xfffff77ffffeffff), rs1:x17(0xfdffffffffffffff)
    li  x17, 0xfdffffffffffffff
    sha512sum1 x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0xfffff77ffffeffff)
 
sha512sum1_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0xffffeefffffdffff), rs1:x16(0xfbffffffffffffff)
    li  x16, 0xfbffffffffffffff
    sha512sum1 x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0xffffeefffffdffff)
 
sha512sum1_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0xffffddfffffbffff), rs1:x15(0xf7ffffffffffffff)
    li  x15, 0xf7ffffffffffffff
    sha512sum1 x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0xffffddfffffbffff)


    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_54_0)

 
sha512sum1_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0xffffbbfffff7ffff), rs1:x14(0xefffffffffffffff)
    li  x14, 0xefffffffffffffff
    sha512sum1 x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0xffffbbfffff7ffff)
 
sha512sum1_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0xffff77ffffefffff), rs1:x13(0xdfffffffffffffff)
    li  x13, 0xdfffffffffffffff
    sha512sum1 x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0xffff77ffffefffff)
 
sha512sum1_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0xfffeefffffdfffff), rs1:x12(0xbfffffffffffffff)
    li  x12, 0xbfffffffffffffff
    sha512sum1 x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xfffeefffffdfffff)
 
sha512sum1_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0xfffddfffffbfffff), rs1:x11(0x7fffffffffffffff)
    li  x11, 0x7fffffffffffffff
    sha512sum1 x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xfffddfffffbfffff)
 
sha512sum1_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xffffffffffffffff)
    li  x10, 0xffffffffffffffff
    sha512sum1 x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xffffffffffffffff)


    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum1)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum1)

    RVTEST_SIGBASE(x1,signature_55_0)

 
sha512sum1_01_inst_270:
    // Test 270:  Test with random values
    // result rd:x23(0x24e7f2e37245a24d), rs1:x9(0x10fd3dedadea5195)
    li  x9, 0x10fd3dedadea5195
    sha512sum1 x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x24e7f2e37245a24d)
 
sha512sum1_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1)
    li  x8, 0xbd295ce2d2ffbec1
    sha512sum1 x0, x8
    sd x0, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x0, 0x0000000000000000)
 
sha512sum1_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0x4a15a71f06337bf1), rs1:x7(0xc9649f05a8e1a8bb)
    li  x7, 0xc9649f05a8e1a8bb
    sha512sum1 x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x4a15a71f06337bf1)
 
sha512sum1_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb)
    li  x0, 0x3541291848c99fcb
    sha512sum1 x26, x0
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000000000)
	
#endif


RVTEST_CODE_END sha512sum1_01_code_end
RVTEST_CODE_BEGIN packw_01_init packw_01_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x6,signature_1_0)


packw_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0xffffffffcc235195), rs1:x31(0x10fd3dedadea5195), rs2:x16(0xdf7f3844121bcc23)
    TEST_RR_OP(packw, x1, x31, x16, 0xffffffffcc235195, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x6, 0, x7)

packw_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x00000000105bbec1), rs1:x30(0xbd295ce2d2ffbec1), rs2:x15(0xf5adb41aa47d105b)
    TEST_RR_OP(packw, x2, x30, x15, 0x00000000105bbec1, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x6, 8, x7)

packw_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0xfffffffff2c0a8bb), rs1:x29(0xc9649f05a8e1a8bb), rs2:x14(0x82f6747f707af2c0)
    TEST_RR_OP(packw, x3, x29, x14, 0xfffffffff2c0a8bb, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x6, 16, x7)

packw_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0xfffffffffbc39fcb), rs1:x28(0x3541291848c99fcb), rs2:x13(0x73a92fd4e19bfbc3)
    TEST_RR_OP(packw, x4, x28, x13, 0xfffffffffbc39fcb, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x6, 24, x7)

packw_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x0000000010af524f), rs1:x27(0x10a24740461d524f), rs2:x12(0x546b0e54528a10af)
    TEST_RR_OP(packw, x5, x27, x12, 0x0000000010af524f, 0x10a24740461d524f, 0x546b0e54528a10af, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_2_0)


packw_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x00000000524f10af), rs1:x26(0x546b0e54528a10af), rs2:x11(0x10a24740461d524f)
    TEST_RR_OP(packw, x6, x26, x11, 0x00000000524f10af, 0x546b0e54528a10af, 0x10a24740461d524f, x1, 0, x2)

packw_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0xffffffff9fcbfbc3), rs1:x25(0x73a92fd4e19bfbc3), rs2:x10(0x3541291848c99fcb)
    TEST_RR_OP(packw, x7, x25, x10, 0xffffffff9fcbfbc3, 0x73a92fd4e19bfbc3, 0x3541291848c99fcb, x1, 8, x2)

packw_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0xffffffffa8bbf2c0), rs1:x24(0x82f6747f707af2c0), rs2:x9(0xc9649f05a8e1a8bb)
    TEST_RR_OP(packw, x8, x24, x9, 0xffffffffa8bbf2c0, 0x82f6747f707af2c0, 0xc9649f05a8e1a8bb, x1, 16, x2)

packw_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0xffffffffbec1105b), rs1:x23(0xf5adb41aa47d105b), rs2:x8(0xbd295ce2d2ffbec1)
    TEST_RR_OP(packw, x9, x23, x8, 0xffffffffbec1105b, 0xf5adb41aa47d105b, 0xbd295ce2d2ffbec1, x1, 24, x2)

packw_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0x000000005195cc23), rs1:x22(0xdf7f3844121bcc23), rs2:x7(0x10fd3dedadea5195)
    TEST_RR_OP(packw, x10, x22, x7, 0x000000005195cc23, 0xdf7f3844121bcc23, 0x10fd3dedadea5195, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_3_0)


packw_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffff0001), rs1:x21(0x0000000000000001), rs2:x6(0xffffffffffffffff)
    TEST_RR_OP(packw, x11, x21, x6, 0xffffffffffff0001, 0x1, 0xffffffffffffffff, x1, 0, x7)

packw_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffff0002), rs1:x20(0x0000000000000002), rs2:x5(0x7fffffffffffffff)
    TEST_RR_OP(packw, x12, x20, x5, 0xffffffffffff0002, 0x2, 0x7fffffffffffffff, x1, 8, x7)

packw_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffff0004), rs1:x19(0x0000000000000004), rs2:x4(0xbfffffffffffffff)
    TEST_RR_OP(packw, x13, x19, x4, 0xffffffffffff0004, 0x4, 0xbfffffffffffffff, x1, 16, x7)

packw_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffff0008), rs1:x18(0x0000000000000008), rs2:x3(0xdfffffffffffffff)
    TEST_RR_OP(packw, x14, x18, x3, 0xffffffffffff0008, 0x8, 0xdfffffffffffffff, x1, 24, x7)

packw_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffff0010), rs1:x17(0x0000000000000010), rs2:x2(0xefffffffffffffff)
    TEST_RR_OP(packw, x15, x17, x2, 0xffffffffffff0010, 0x10, 0xefffffffffffffff, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x2,signature_4_0)


packw_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffff0020), rs1:x16(0x0000000000000020), rs2:x1(0xf7ffffffffffffff)
    TEST_RR_OP(packw, x16, x16, x1, 0xffffffffffff0020, 0x20, 0xf7ffffffffffffff, x2, 0, x3)

packw_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffff0040), rs1:x15(0x0000000000000040), rs2:x31(0xfbffffffffffffff)
    TEST_RR_OP(packw, x17, x15, x31, 0xffffffffffff0040, 0x40, 0xfbffffffffffffff, x2, 8, x3)

packw_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffff0080), rs1:x14(0x0000000000000080), rs2:x30(0xfdffffffffffffff)
    TEST_RR_OP(packw, x18, x14, x30, 0xffffffffffff0080, 0x80, 0xfdffffffffffffff, x2, 16, x3)

packw_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffff0100), rs1:x13(0x0000000000000100), rs2:x29(0xfeffffffffffffff)
    TEST_RR_OP(packw, x19, x13, x29, 0xffffffffffff0100, 0x100, 0xfeffffffffffffff, x2, 24, x3)

packw_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffff0200), rs1:x12(0x0000000000000200), rs2:x28(0xff7fffffffffffff)
    TEST_RR_OP(packw, x20, x12, x28, 0xffffffffffff0200, 0x200, 0xff7fffffffffffff, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_5_0)


packw_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffff0400), rs1:x11(0x0000000000000400), rs2:x27(0xffbfffffffffffff)
    TEST_RR_OP(packw, x21, x11, x27, 0xffffffffffff0400, 0x400, 0xffbfffffffffffff, x1, 0, x2)

packw_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffff0800), rs1:x10(0x0000000000000800), rs2:x26(0xffdfffffffffffff)
    TEST_RR_OP(packw, x22, x10, x26, 0xffffffffffff0800, 0x800, 0xffdfffffffffffff, x1, 8, x2)

packw_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffff1000), rs1:x9(0x0000000000001000), rs2:x25(0xffefffffffffffff)
    TEST_RR_OP(packw, x23, x9, x25, 0xffffffffffff1000, 0x1000, 0xffefffffffffffff, x1, 16, x2)

packw_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffff2000), rs1:x8(0x0000000000002000), rs2:x24(0xfff7ffffffffffff)
    TEST_RR_OP(packw, x24, x8, x24, 0xffffffffffff2000, 0x2000, 0xfff7ffffffffffff, x1, 24, x2)

packw_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffff4000), rs1:x7(0x0000000000004000), rs2:x23(0xfffbffffffffffff)
    TEST_RR_OP(packw, x25, x7, x23, 0xffffffffffff4000, 0x4000, 0xfffbffffffffffff, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_6_0)


packw_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffff8000), rs1:x6(0x0000000000008000), rs2:x22(0xfffdffffffffffff)
    TEST_RR_OP(packw, x26, x6, x22, 0xffffffffffff8000, 0x8000, 0xfffdffffffffffff, x1, 0, x7)

packw_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffff0000), rs1:x5(0x0000000000010000), rs2:x21(0xfffeffffffffffff)
    TEST_RR_OP(packw, x27, x5, x21, 0xffffffffffff0000, 0x10000, 0xfffeffffffffffff, x1, 8, x7)

packw_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffff0000), rs1:x4(0x0000000000020000), rs2:x20(0xffff7fffffffffff)
    TEST_RR_OP(packw, x28, x4, x20, 0xffffffffffff0000, 0x20000, 0xffff7fffffffffff, x1, 16, x7)

packw_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffff0000), rs1:x3(0x0000000000040000), rs2:x19(0xffffbfffffffffff)
    TEST_RR_OP(packw, x29, x3, x19, 0xffffffffffff0000, 0x40000, 0xffffbfffffffffff, x1, 24, x7)

packw_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffff0000), rs1:x2(0x0000000000080000), rs2:x18(0xffffdfffffffffff)
    TEST_RR_OP(packw, x30, x2, x18, 0xffffffffffff0000, 0x80000, 0xffffdfffffffffff, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x5,signature_7_0)


packw_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffff0000), rs1:x1(0x0000000000100000), rs2:x17(0xffffefffffffffff)
    TEST_RR_OP(packw, x31, x1, x17, 0xffffffffffff0000, 0x100000, 0xffffefffffffffff, x5, 0, x6)

packw_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffff0000), rs1:x31(0x0000000000200000), rs2:x16(0xfffff7ffffffffff)
    TEST_RR_OP(packw, x1, x31, x16, 0xffffffffffff0000, 0x200000, 0xfffff7ffffffffff, x5, 8, x6)

packw_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffff0000), rs1:x30(0x0000000000400000), rs2:x15(0xfffffbffffffffff)
    TEST_RR_OP(packw, x2, x30, x15, 0xffffffffffff0000, 0x400000, 0xfffffbffffffffff, x5, 16, x6)

packw_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffff0000), rs1:x29(0x0000000000800000), rs2:x14(0xfffffdffffffffff)
    TEST_RR_OP(packw, x3, x29, x14, 0xffffffffffff0000, 0x800000, 0xfffffdffffffffff, x5, 24, x6)

packw_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffff0000), rs1:x28(0x0000000001000000), rs2:x13(0xfffffeffffffffff)
    TEST_RR_OP(packw, x4, x28, x13, 0xffffffffffff0000, 0x1000000, 0xfffffeffffffffff, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_8_0)


packw_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffff0000), rs1:x27(0x0000000002000000), rs2:x12(0xffffff7fffffffff)
    TEST_RR_OP(packw, x5, x27, x12, 0xffffffffffff0000, 0x2000000, 0xffffff7fffffffff, x1, 0, x2)

packw_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffff0000), rs1:x26(0x0000000004000000), rs2:x11(0xffffffbfffffffff)
    TEST_RR_OP(packw, x6, x26, x11, 0xffffffffffff0000, 0x4000000, 0xffffffbfffffffff, x1, 8, x2)

packw_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffff0000), rs1:x25(0x0000000008000000), rs2:x10(0xffffffdfffffffff)
    TEST_RR_OP(packw, x7, x25, x10, 0xffffffffffff0000, 0x8000000, 0xffffffdfffffffff, x1, 16, x2)

packw_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffff0000), rs1:x24(0x0000000010000000), rs2:x9(0xffffffefffffffff)
    TEST_RR_OP(packw, x8, x24, x9, 0xffffffffffff0000, 0x10000000, 0xffffffefffffffff, x1, 24, x2)

packw_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffff0000), rs1:x23(0x0000000020000000), rs2:x8(0xfffffff7ffffffff)
    TEST_RR_OP(packw, x9, x23, x8, 0xffffffffffff0000, 0x20000000, 0xfffffff7ffffffff, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_9_0)


packw_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffff0000), rs1:x22(0x0000000040000000), rs2:x7(0xfffffffbffffffff)
    TEST_RR_OP(packw, x10, x22, x7, 0xffffffffffff0000, 0x40000000, 0xfffffffbffffffff, x1, 0, x2)

packw_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffff0000), rs1:x21(0x0000000080000000), rs2:x6(0xfffffffdffffffff)
    TEST_RR_OP(packw, x11, x21, x6, 0xffffffffffff0000, 0x80000000, 0xfffffffdffffffff, x1, 8, x2)

packw_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffff0000), rs1:x20(0x0000000100000000), rs2:x5(0xfffffffeffffffff)
    TEST_RR_OP(packw, x12, x20, x5, 0xffffffffffff0000, 0x100000000, 0xfffffffeffffffff, x1, 16, x2)

packw_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffff0000), rs1:x19(0x0000000200000000), rs2:x4(0xffffffff7fffffff)
    TEST_RR_OP(packw, x13, x19, x4, 0xffffffffffff0000, 0x200000000, 0xffffffff7fffffff, x1, 24, x2)

packw_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffff0000), rs1:x18(0x0000000400000000), rs2:x3(0xffffffffbfffffff)
    TEST_RR_OP(packw, x14, x18, x3, 0xffffffffffff0000, 0x400000000, 0xffffffffbfffffff, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x3,signature_10_0)


packw_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffff0000), rs1:x17(0x0000000800000000), rs2:x2(0xffffffffdfffffff)
    TEST_RR_OP(packw, x15, x17, x2, 0xffffffffffff0000, 0x800000000, 0xffffffffdfffffff, x3, 0, x4)

packw_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffff0000), rs1:x16(0x0000001000000000), rs2:x1(0xffffffffefffffff)
    TEST_RR_OP(packw, x16, x16, x1, 0xffffffffffff0000, 0x1000000000, 0xffffffffefffffff, x3, 8, x4)

packw_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffff0000), rs1:x15(0x0000002000000000), rs2:x31(0xfffffffff7ffffff)
    TEST_RR_OP(packw, x17, x15, x31, 0xffffffffffff0000, 0x2000000000, 0xfffffffff7ffffff, x3, 16, x4)

packw_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffff0000), rs1:x14(0x0000004000000000), rs2:x30(0xfffffffffbffffff)
    TEST_RR_OP(packw, x18, x14, x30, 0xffffffffffff0000, 0x4000000000, 0xfffffffffbffffff, x3, 24, x4)

packw_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffff0000), rs1:x13(0x0000008000000000), rs2:x29(0xfffffffffdffffff)
    TEST_RR_OP(packw, x19, x13, x29, 0xffffffffffff0000, 0x8000000000, 0xfffffffffdffffff, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_11_0)


packw_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffff0000), rs1:x12(0x0000010000000000), rs2:x28(0xfffffffffeffffff)
    TEST_RR_OP(packw, x20, x12, x28, 0xffffffffffff0000, 0x10000000000, 0xfffffffffeffffff, x1, 0, x2)

packw_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffff0000), rs1:x11(0x0000020000000000), rs2:x27(0xffffffffff7fffff)
    TEST_RR_OP(packw, x21, x11, x27, 0xffffffffffff0000, 0x20000000000, 0xffffffffff7fffff, x1, 8, x2)

packw_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffff0000), rs1:x10(0x0000040000000000), rs2:x26(0xffffffffffbfffff)
    TEST_RR_OP(packw, x22, x10, x26, 0xffffffffffff0000, 0x40000000000, 0xffffffffffbfffff, x1, 16, x2)

packw_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffff0000), rs1:x9(0x0000080000000000), rs2:x25(0xffffffffffdfffff)
    TEST_RR_OP(packw, x23, x9, x25, 0xffffffffffff0000, 0x80000000000, 0xffffffffffdfffff, x1, 24, x2)

packw_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffff0000), rs1:x8(0x0000100000000000), rs2:x24(0xffffffffffefffff)
    TEST_RR_OP(packw, x24, x8, x24, 0xffffffffffff0000, 0x100000000000, 0xffffffffffefffff, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_12_0)


packw_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffff0000), rs1:x7(0x0000200000000000), rs2:x23(0xfffffffffff7ffff)
    TEST_RR_OP(packw, x25, x7, x23, 0xffffffffffff0000, 0x200000000000, 0xfffffffffff7ffff, x1, 0, x2)

packw_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffff0000), rs1:x6(0x0000400000000000), rs2:x22(0xfffffffffffbffff)
    TEST_RR_OP(packw, x26, x6, x22, 0xffffffffffff0000, 0x400000000000, 0xfffffffffffbffff, x1, 8, x2)

packw_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffff0000), rs1:x5(0x0000800000000000), rs2:x21(0xfffffffffffdffff)
    TEST_RR_OP(packw, x27, x5, x21, 0xffffffffffff0000, 0x800000000000, 0xfffffffffffdffff, x1, 16, x2)

packw_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffff0000), rs1:x4(0x0001000000000000), rs2:x20(0xfffffffffffeffff)
    TEST_RR_OP(packw, x28, x4, x20, 0xffffffffffff0000, 0x1000000000000, 0xfffffffffffeffff, x1, 24, x2)

packw_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x000000007fff0000), rs1:x3(0x0002000000000000), rs2:x19(0xffffffffffff7fff)
    TEST_RR_OP(packw, x29, x3, x19, 0x000000007fff0000, 0x2000000000000, 0xffffffffffff7fff, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x4,signature_13_0)


packw_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0xffffffffbfff0000), rs1:x2(0x0004000000000000), rs2:x18(0xffffffffffffbfff)
    TEST_RR_OP(packw, x30, x2, x18, 0xffffffffbfff0000, 0x4000000000000, 0xffffffffffffbfff, x4, 0, x5)

packw_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0xffffffffdfff0000), rs1:x1(0x0008000000000000), rs2:x17(0xffffffffffffdfff)
    TEST_RR_OP(packw, x31, x1, x17, 0xffffffffdfff0000, 0x8000000000000, 0xffffffffffffdfff, x4, 8, x5)

packw_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0xffffffffefff0000), rs1:x31(0x0010000000000000), rs2:x16(0xffffffffffffefff)
    TEST_RR_OP(packw, x1, x31, x16, 0xffffffffefff0000, 0x10000000000000, 0xffffffffffffefff, x4, 16, x5)

packw_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0xfffffffff7ff0000), rs1:x30(0x0020000000000000), rs2:x15(0xfffffffffffff7ff)
    TEST_RR_OP(packw, x2, x30, x15, 0xfffffffff7ff0000, 0x20000000000000, 0xfffffffffffff7ff, x4, 24, x5)

packw_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0xfffffffffbff0000), rs1:x29(0x0040000000000000), rs2:x14(0xfffffffffffffbff)
    TEST_RR_OP(packw, x3, x29, x14, 0xfffffffffbff0000, 0x40000000000000, 0xfffffffffffffbff, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_14_0)


packw_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0xfffffffffdff0000), rs1:x28(0x0080000000000000), rs2:x13(0xfffffffffffffdff)
    TEST_RR_OP(packw, x4, x28, x13, 0xfffffffffdff0000, 0x80000000000000, 0xfffffffffffffdff, x1, 0, x2)

packw_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0xfffffffffeff0000), rs1:x27(0x0100000000000000), rs2:x12(0xfffffffffffffeff)
    TEST_RR_OP(packw, x5, x27, x12, 0xfffffffffeff0000, 0x100000000000000, 0xfffffffffffffeff, x1, 8, x2)

packw_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0xffffffffff7f0000), rs1:x26(0x0200000000000000), rs2:x11(0xffffffffffffff7f)
    TEST_RR_OP(packw, x6, x26, x11, 0xffffffffff7f0000, 0x200000000000000, 0xffffffffffffff7f, x1, 16, x2)

packw_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffbf0000), rs1:x25(0x0400000000000000), rs2:x10(0xffffffffffffffbf)
    TEST_RR_OP(packw, x7, x25, x10, 0xffffffffffbf0000, 0x400000000000000, 0xffffffffffffffbf, x1, 24, x2)

packw_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffdf0000), rs1:x24(0x0800000000000000), rs2:x9(0xffffffffffffffdf)
    TEST_RR_OP(packw, x8, x24, x9, 0xffffffffffdf0000, 0x800000000000000, 0xffffffffffffffdf, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_15_0)


packw_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffef0000), rs1:x23(0x1000000000000000), rs2:x8(0xffffffffffffffef)
    TEST_RR_OP(packw, x9, x23, x8, 0xffffffffffef0000, 0x1000000000000000, 0xffffffffffffffef, x1, 0, x2)

packw_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0xfffffffffff70000), rs1:x22(0x2000000000000000), rs2:x7(0xfffffffffffffff7)
    TEST_RR_OP(packw, x10, x22, x7, 0xfffffffffff70000, 0x2000000000000000, 0xfffffffffffffff7, x1, 8, x2)

packw_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0xfffffffffffb0000), rs1:x21(0x4000000000000000), rs2:x6(0xfffffffffffffffb)
    TEST_RR_OP(packw, x11, x21, x6, 0xfffffffffffb0000, 0x4000000000000000, 0xfffffffffffffffb, x1, 16, x2)

packw_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0xfffffffffffd0000), rs1:x20(0x8000000000000000), rs2:x5(0xfffffffffffffffd)
    TEST_RR_OP(packw, x12, x20, x5, 0xfffffffffffd0000, 0x8000000000000000, 0xfffffffffffffffd, x1, 24, x2)

packw_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0xfffffffffffe0000), rs1:x19(0x0000000000000000), rs2:x4(0xfffffffffffffffe)
    TEST_RR_OP(packw, x13, x19, x4, 0xfffffffffffe0000, 0x0, 0xfffffffffffffffe, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x4,signature_16_0)


packw_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0x000000000000fffe), rs1:x18(0xfffffffffffffffe), rs2:x3(0x0000000000000000)
    TEST_RR_OP(packw, x14, x18, x3, 0x000000000000fffe, 0xfffffffffffffffe, 0x0, x4, 0, x5)

packw_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0x000000000000fffd), rs1:x17(0xfffffffffffffffd), rs2:x2(0x8000000000000000)
    TEST_RR_OP(packw, x15, x17, x2, 0x000000000000fffd, 0xfffffffffffffffd, 0x8000000000000000, x4, 8, x5)

packw_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0x000000000000fffb), rs1:x16(0xfffffffffffffffb), rs2:x1(0x4000000000000000)
    TEST_RR_OP(packw, x16, x16, x1, 0x000000000000fffb, 0xfffffffffffffffb, 0x4000000000000000, x4, 16, x5)

packw_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0x000000000000fff7), rs1:x15(0xfffffffffffffff7), rs2:x31(0x2000000000000000)
    TEST_RR_OP(packw, x17, x15, x31, 0x000000000000fff7, 0xfffffffffffffff7, 0x2000000000000000, x4, 24, x5)

packw_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0x000000000000ffef), rs1:x14(0xffffffffffffffef), rs2:x30(0x1000000000000000)
    TEST_RR_OP(packw, x18, x14, x30, 0x000000000000ffef, 0xffffffffffffffef, 0x1000000000000000, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_17_0)


packw_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0x000000000000ffdf), rs1:x13(0xffffffffffffffdf), rs2:x29(0x0800000000000000)
    TEST_RR_OP(packw, x19, x13, x29, 0x000000000000ffdf, 0xffffffffffffffdf, 0x800000000000000, x1, 0, x2)

packw_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0x000000000000ffbf), rs1:x12(0xffffffffffffffbf), rs2:x28(0x0400000000000000)
    TEST_RR_OP(packw, x20, x12, x28, 0x000000000000ffbf, 0xffffffffffffffbf, 0x400000000000000, x1, 8, x2)

packw_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0x000000000000ff7f), rs1:x11(0xffffffffffffff7f), rs2:x27(0x0200000000000000)
    TEST_RR_OP(packw, x21, x11, x27, 0x000000000000ff7f, 0xffffffffffffff7f, 0x200000000000000, x1, 16, x2)

packw_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0x000000000000feff), rs1:x10(0xfffffffffffffeff), rs2:x26(0x0100000000000000)
    TEST_RR_OP(packw, x22, x10, x26, 0x000000000000feff, 0xfffffffffffffeff, 0x100000000000000, x1, 24, x2)

packw_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0x000000000000fdff), rs1:x9(0xfffffffffffffdff), rs2:x25(0x0080000000000000)
    TEST_RR_OP(packw, x23, x9, x25, 0x000000000000fdff, 0xfffffffffffffdff, 0x80000000000000, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_18_0)


packw_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0x000000000000fbff), rs1:x8(0xfffffffffffffbff), rs2:x24(0x0040000000000000)
    TEST_RR_OP(packw, x24, x8, x24, 0x000000000000fbff, 0xfffffffffffffbff, 0x40000000000000, x1, 0, x2)

packw_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0x000000000000f7ff), rs1:x7(0xfffffffffffff7ff), rs2:x23(0x0020000000000000)
    TEST_RR_OP(packw, x25, x7, x23, 0x000000000000f7ff, 0xfffffffffffff7ff, 0x20000000000000, x1, 8, x2)

packw_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0x000000000000efff), rs1:x6(0xffffffffffffefff), rs2:x22(0x0010000000000000)
    TEST_RR_OP(packw, x26, x6, x22, 0x000000000000efff, 0xffffffffffffefff, 0x10000000000000, x1, 16, x2)

packw_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0x000000000000dfff), rs1:x5(0xffffffffffffdfff), rs2:x21(0x0008000000000000)
    TEST_RR_OP(packw, x27, x5, x21, 0x000000000000dfff, 0xffffffffffffdfff, 0x8000000000000, x1, 24, x2)

packw_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0x000000000000bfff), rs1:x4(0xffffffffffffbfff), rs2:x20(0x0004000000000000)
    TEST_RR_OP(packw, x28, x4, x20, 0x000000000000bfff, 0xffffffffffffbfff, 0x4000000000000, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x4,signature_19_0)


packw_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0x0000000000007fff), rs1:x3(0xffffffffffff7fff), rs2:x19(0x0002000000000000)
    TEST_RR_OP(packw, x29, x3, x19, 0x0000000000007fff, 0xffffffffffff7fff, 0x2000000000000, x4, 0, x5)

packw_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0x000000000000ffff), rs1:x2(0xfffffffffffeffff), rs2:x18(0x0001000000000000)
    TEST_RR_OP(packw, x30, x2, x18, 0x000000000000ffff, 0xfffffffffffeffff, 0x1000000000000, x4, 8, x5)

packw_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0x000000000000ffff), rs1:x1(0xfffffffffffdffff), rs2:x17(0x0000800000000000)
    TEST_RR_OP(packw, x31, x1, x17, 0x000000000000ffff, 0xfffffffffffdffff, 0x800000000000, x4, 16, x5)

packw_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0x000000000000ffff), rs1:x31(0xfffffffffffbffff), rs2:x16(0x0000400000000000)
    TEST_RR_OP(packw, x1, x31, x16, 0x000000000000ffff, 0xfffffffffffbffff, 0x400000000000, x4, 24, x5)

packw_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0x000000000000ffff), rs1:x30(0xfffffffffff7ffff), rs2:x15(0x0000200000000000)
    TEST_RR_OP(packw, x2, x30, x15, 0x000000000000ffff, 0xfffffffffff7ffff, 0x200000000000, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_20_0)


packw_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0x000000000000ffff), rs1:x29(0xffffffffffefffff), rs2:x14(0x0000100000000000)
    TEST_RR_OP(packw, x3, x29, x14, 0x000000000000ffff, 0xffffffffffefffff, 0x100000000000, x1, 0, x2)

packw_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0x000000000000ffff), rs1:x28(0xffffffffffdfffff), rs2:x13(0x0000080000000000)
    TEST_RR_OP(packw, x4, x28, x13, 0x000000000000ffff, 0xffffffffffdfffff, 0x80000000000, x1, 8, x2)

packw_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0x000000000000ffff), rs1:x27(0xffffffffffbfffff), rs2:x12(0x0000040000000000)
    TEST_RR_OP(packw, x5, x27, x12, 0x000000000000ffff, 0xffffffffffbfffff, 0x40000000000, x1, 16, x2)

packw_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0x000000000000ffff), rs1:x26(0xffffffffff7fffff), rs2:x11(0x0000020000000000)
    TEST_RR_OP(packw, x6, x26, x11, 0x000000000000ffff, 0xffffffffff7fffff, 0x20000000000, x1, 24, x2)

packw_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0x000000000000ffff), rs1:x25(0xfffffffffeffffff), rs2:x10(0x0000010000000000)
    TEST_RR_OP(packw, x7, x25, x10, 0x000000000000ffff, 0xfffffffffeffffff, 0x10000000000, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_21_0)


packw_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0x000000000000ffff), rs1:x24(0xfffffffffdffffff), rs2:x9(0x0000008000000000)
    TEST_RR_OP(packw, x8, x24, x9, 0x000000000000ffff, 0xfffffffffdffffff, 0x8000000000, x1, 0, x2)

packw_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0x000000000000ffff), rs1:x23(0xfffffffffbffffff), rs2:x8(0x0000004000000000)
    TEST_RR_OP(packw, x9, x23, x8, 0x000000000000ffff, 0xfffffffffbffffff, 0x4000000000, x1, 8, x2)

packw_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0x000000000000ffff), rs1:x22(0xfffffffff7ffffff), rs2:x7(0x0000002000000000)
    TEST_RR_OP(packw, x10, x22, x7, 0x000000000000ffff, 0xfffffffff7ffffff, 0x2000000000, x1, 16, x2)

packw_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0x000000000000ffff), rs1:x21(0xffffffffefffffff), rs2:x6(0x0000001000000000)
    TEST_RR_OP(packw, x11, x21, x6, 0x000000000000ffff, 0xffffffffefffffff, 0x1000000000, x1, 24, x2)

packw_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0x000000000000ffff), rs1:x20(0xffffffffdfffffff), rs2:x5(0x0000000800000000)
    TEST_RR_OP(packw, x12, x20, x5, 0x000000000000ffff, 0xffffffffdfffffff, 0x800000000, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x5,signature_22_0)


packw_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0x000000000000ffff), rs1:x19(0xffffffffbfffffff), rs2:x4(0x0000000400000000)
    TEST_RR_OP(packw, x13, x19, x4, 0x000000000000ffff, 0xffffffffbfffffff, 0x400000000, x5, 0, x6)

packw_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0x000000000000ffff), rs1:x18(0xffffffff7fffffff), rs2:x3(0x0000000200000000)
    TEST_RR_OP(packw, x14, x18, x3, 0x000000000000ffff, 0xffffffff7fffffff, 0x200000000, x5, 8, x6)

packw_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0x000000000000ffff), rs1:x17(0xfffffffeffffffff), rs2:x2(0x0000000100000000)
    TEST_RR_OP(packw, x15, x17, x2, 0x000000000000ffff, 0xfffffffeffffffff, 0x100000000, x5, 16, x6)

packw_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0x000000000000ffff), rs1:x16(0xfffffffdffffffff), rs2:x1(0x0000000080000000)
    TEST_RR_OP(packw, x16, x16, x1, 0x000000000000ffff, 0xfffffffdffffffff, 0x80000000, x5, 24, x6)

packw_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0x000000000000ffff), rs1:x15(0xfffffffbffffffff), rs2:x31(0x0000000040000000)
    TEST_RR_OP(packw, x17, x15, x31, 0x000000000000ffff, 0xfffffffbffffffff, 0x40000000, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_23_0)


packw_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0x000000000000ffff), rs1:x14(0xfffffff7ffffffff), rs2:x30(0x0000000020000000)
    TEST_RR_OP(packw, x18, x14, x30, 0x000000000000ffff, 0xfffffff7ffffffff, 0x20000000, x1, 0, x2)

packw_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0x000000000000ffff), rs1:x13(0xffffffefffffffff), rs2:x29(0x0000000010000000)
    TEST_RR_OP(packw, x19, x13, x29, 0x000000000000ffff, 0xffffffefffffffff, 0x10000000, x1, 8, x2)

packw_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0x000000000000ffff), rs1:x12(0xffffffdfffffffff), rs2:x28(0x0000000008000000)
    TEST_RR_OP(packw, x20, x12, x28, 0x000000000000ffff, 0xffffffdfffffffff, 0x8000000, x1, 16, x2)

packw_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0x000000000000ffff), rs1:x11(0xffffffbfffffffff), rs2:x27(0x0000000004000000)
    TEST_RR_OP(packw, x21, x11, x27, 0x000000000000ffff, 0xffffffbfffffffff, 0x4000000, x1, 24, x2)

packw_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0x000000000000ffff), rs1:x10(0xffffff7fffffffff), rs2:x26(0x0000000002000000)
    TEST_RR_OP(packw, x22, x10, x26, 0x000000000000ffff, 0xffffff7fffffffff, 0x2000000, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_24_0)


packw_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0x000000000000ffff), rs1:x9(0xfffffeffffffffff), rs2:x25(0x0000000001000000)
    TEST_RR_OP(packw, x23, x9, x25, 0x000000000000ffff, 0xfffffeffffffffff, 0x1000000, x1, 0, x2)

packw_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0x000000000000ffff), rs1:x8(0xfffffdffffffffff), rs2:x24(0x0000000000800000)
    TEST_RR_OP(packw, x24, x8, x24, 0x000000000000ffff, 0xfffffdffffffffff, 0x800000, x1, 8, x2)

packw_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0x000000000000ffff), rs1:x7(0xfffffbffffffffff), rs2:x23(0x0000000000400000)
    TEST_RR_OP(packw, x25, x7, x23, 0x000000000000ffff, 0xfffffbffffffffff, 0x400000, x1, 16, x2)

packw_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0x000000000000ffff), rs1:x6(0xfffff7ffffffffff), rs2:x22(0x0000000000200000)
    TEST_RR_OP(packw, x26, x6, x22, 0x000000000000ffff, 0xfffff7ffffffffff, 0x200000, x1, 24, x2)

packw_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0x000000000000ffff), rs1:x5(0xffffefffffffffff), rs2:x21(0x0000000000100000)
    TEST_RR_OP(packw, x27, x5, x21, 0x000000000000ffff, 0xffffefffffffffff, 0x100000, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x5,signature_25_0)


packw_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0x000000000000ffff), rs1:x4(0xffffdfffffffffff), rs2:x20(0x0000000000080000)
    TEST_RR_OP(packw, x28, x4, x20, 0x000000000000ffff, 0xffffdfffffffffff, 0x80000, x5, 0, x6)

packw_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0x000000000000ffff), rs1:x3(0xffffbfffffffffff), rs2:x19(0x0000000000040000)
    TEST_RR_OP(packw, x29, x3, x19, 0x000000000000ffff, 0xffffbfffffffffff, 0x40000, x5, 8, x6)

packw_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0x000000000000ffff), rs1:x2(0xffff7fffffffffff), rs2:x18(0x0000000000020000)
    TEST_RR_OP(packw, x30, x2, x18, 0x000000000000ffff, 0xffff7fffffffffff, 0x20000, x5, 16, x6)

packw_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0x000000000000ffff), rs1:x1(0xfffeffffffffffff), rs2:x17(0x0000000000010000)
    TEST_RR_OP(packw, x31, x1, x17, 0x000000000000ffff, 0xfffeffffffffffff, 0x10000, x5, 24, x6)

packw_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0xffffffff8000ffff), rs1:x31(0xfffdffffffffffff), rs2:x16(0x0000000000008000)
    TEST_RR_OP(packw, x1, x31, x16, 0xffffffff8000ffff, 0xfffdffffffffffff, 0x8000, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_26_0)


packw_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0x000000004000ffff), rs1:x30(0xfffbffffffffffff), rs2:x15(0x0000000000004000)
    TEST_RR_OP(packw, x2, x30, x15, 0x000000004000ffff, 0xfffbffffffffffff, 0x4000, x1, 0, x7)

packw_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0x000000002000ffff), rs1:x29(0xfff7ffffffffffff), rs2:x14(0x0000000000002000)
    TEST_RR_OP(packw, x3, x29, x14, 0x000000002000ffff, 0xfff7ffffffffffff, 0x2000, x1, 8, x7)

packw_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0x000000001000ffff), rs1:x28(0xffefffffffffffff), rs2:x13(0x0000000000001000)
    TEST_RR_OP(packw, x4, x28, x13, 0x000000001000ffff, 0xffefffffffffffff, 0x1000, x1, 16, x7)

packw_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0x000000000800ffff), rs1:x27(0xffdfffffffffffff), rs2:x12(0x0000000000000800)
    TEST_RR_OP(packw, x5, x27, x12, 0x000000000800ffff, 0xffdfffffffffffff, 0x800, x1, 24, x7)

packw_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0x000000000400ffff), rs1:x26(0xffbfffffffffffff), rs2:x11(0x0000000000000400)
    TEST_RR_OP(packw, x6, x26, x11, 0x000000000400ffff, 0xffbfffffffffffff, 0x400, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_27_0)


packw_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0x000000000200ffff), rs1:x25(0xff7fffffffffffff), rs2:x10(0x0000000000000200)
    TEST_RR_OP(packw, x7, x25, x10, 0x000000000200ffff, 0xff7fffffffffffff, 0x200, x1, 0, x2)

packw_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0x000000000100ffff), rs1:x24(0xfeffffffffffffff), rs2:x9(0x0000000000000100)
    TEST_RR_OP(packw, x8, x24, x9, 0x000000000100ffff, 0xfeffffffffffffff, 0x100, x1, 8, x2)

packw_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0x000000000080ffff), rs1:x23(0xfdffffffffffffff), rs2:x8(0x0000000000000080)
    TEST_RR_OP(packw, x9, x23, x8, 0x000000000080ffff, 0xfdffffffffffffff, 0x80, x1, 16, x2)

packw_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0x000000000040ffff), rs1:x22(0xfbffffffffffffff), rs2:x7(0x0000000000000040)
    TEST_RR_OP(packw, x10, x22, x7, 0x000000000040ffff, 0xfbffffffffffffff, 0x40, x1, 24, x2)

packw_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0x000000000020ffff), rs1:x21(0xf7ffffffffffffff), rs2:x6(0x0000000000000020)
    TEST_RR_OP(packw, x11, x21, x6, 0x000000000020ffff, 0xf7ffffffffffffff, 0x20, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x6,signature_28_0)


packw_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0x000000000010ffff), rs1:x20(0xefffffffffffffff), rs2:x5(0x0000000000000010)
    TEST_RR_OP(packw, x12, x20, x5, 0x000000000010ffff, 0xefffffffffffffff, 0x10, x6, 0, x7)

packw_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0x000000000008ffff), rs1:x19(0xdfffffffffffffff), rs2:x4(0x0000000000000008)
    TEST_RR_OP(packw, x13, x19, x4, 0x000000000008ffff, 0xdfffffffffffffff, 0x8, x6, 8, x7)

packw_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0x000000000004ffff), rs1:x18(0xbfffffffffffffff), rs2:x3(0x0000000000000004)
    TEST_RR_OP(packw, x14, x18, x3, 0x000000000004ffff, 0xbfffffffffffffff, 0x4, x6, 16, x7)

packw_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0x000000000002ffff), rs1:x17(0x7fffffffffffffff), rs2:x2(0x0000000000000002)
    TEST_RR_OP(packw, x15, x17, x2, 0x000000000002ffff, 0x7fffffffffffffff, 0x2, x6, 24, x7)

packw_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0x000000000001ffff), rs1:x16(0xffffffffffffffff), rs2:x1(0x0000000000000001)
    TEST_RR_OP(packw, x16, x16, x1, 0x000000000001ffff, 0xffffffffffffffff, 0x1, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_29_0)


packw_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000001), rs1:x15(0x0000000000000001), rs2:x31(0x0000000000000000)
    TEST_RR_OP(packw, x17, x15, x31, 0x0000000000000001, 0x1, 0x0, x1, 0, x2)

packw_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000002), rs1:x14(0x0000000000000002), rs2:x30(0x0000000000000000)
    TEST_RR_OP(packw, x18, x14, x30, 0x0000000000000002, 0x2, 0x0, x1, 8, x2)

packw_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000004), rs1:x13(0x0000000000000004), rs2:x29(0x0000000000000000)
    TEST_RR_OP(packw, x19, x13, x29, 0x0000000000000004, 0x4, 0x0, x1, 16, x2)

packw_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000008), rs1:x12(0x0000000000000008), rs2:x28(0x0000000000000000)
    TEST_RR_OP(packw, x20, x12, x28, 0x0000000000000008, 0x8, 0x0, x1, 24, x2)

packw_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000010), rs1:x11(0x0000000000000010), rs2:x27(0x0000000000000000)
    TEST_RR_OP(packw, x21, x11, x27, 0x0000000000000010, 0x10, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_30_0)


packw_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000020), rs1:x10(0x0000000000000020), rs2:x26(0x0000000000000000)
    TEST_RR_OP(packw, x22, x10, x26, 0x0000000000000020, 0x20, 0x0, x1, 0, x2)

packw_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000040), rs1:x9(0x0000000000000040), rs2:x25(0x0000000000000000)
    TEST_RR_OP(packw, x23, x9, x25, 0x0000000000000040, 0x40, 0x0, x1, 8, x2)

packw_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000080), rs1:x8(0x0000000000000080), rs2:x24(0x0000000000000000)
    TEST_RR_OP(packw, x24, x8, x24, 0x0000000000000080, 0x80, 0x0, x1, 16, x2)

packw_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000100), rs1:x7(0x0000000000000100), rs2:x23(0x0000000000000000)
    TEST_RR_OP(packw, x25, x7, x23, 0x0000000000000100, 0x100, 0x0, x1, 24, x2)

packw_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000200), rs1:x6(0x0000000000000200), rs2:x22(0x0000000000000000)
    TEST_RR_OP(packw, x26, x6, x22, 0x0000000000000200, 0x200, 0x0, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x6,signature_31_0)


packw_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000400), rs1:x5(0x0000000000000400), rs2:x21(0x0000000000000000)
    TEST_RR_OP(packw, x27, x5, x21, 0x0000000000000400, 0x400, 0x0, x6, 0, x7)

packw_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000800), rs1:x4(0x0000000000000800), rs2:x20(0x0000000000000000)
    TEST_RR_OP(packw, x28, x4, x20, 0x0000000000000800, 0x800, 0x0, x6, 8, x7)

packw_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0000000000001000), rs1:x3(0x0000000000001000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(packw, x29, x3, x19, 0x0000000000001000, 0x1000, 0x0, x6, 16, x7)

packw_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000000002000), rs1:x2(0x0000000000002000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(packw, x30, x2, x18, 0x0000000000002000, 0x2000, 0x0, x6, 24, x7)

packw_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0000000000004000), rs1:x1(0x0000000000004000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(packw, x31, x1, x17, 0x0000000000004000, 0x4000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x6,signature_32_0)


packw_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000000008000), rs1:x31(0x0000000000008000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(packw, x1, x31, x16, 0x0000000000008000, 0x8000, 0x0, x6, 0, x7)

packw_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000000000010000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(packw, x2, x30, x15, 0x0000000000000000, 0x10000, 0x0, x6, 8, x7)

packw_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0000000000020000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(packw, x3, x29, x14, 0x0000000000000000, 0x20000, 0x0, x6, 16, x7)

packw_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0000000000040000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(packw, x4, x28, x13, 0x0000000000000000, 0x40000, 0x0, x6, 24, x7)

packw_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0000000000080000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(packw, x5, x27, x12, 0x0000000000000000, 0x80000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_33_0)


packw_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0000000000100000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(packw, x6, x26, x11, 0x0000000000000000, 0x100000, 0x0, x1, 0, x2)

packw_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0000000000200000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(packw, x7, x25, x10, 0x0000000000000000, 0x200000, 0x0, x1, 8, x2)

packw_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0000000000400000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(packw, x8, x24, x9, 0x0000000000000000, 0x400000, 0x0, x1, 16, x2)

packw_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0000000000800000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(packw, x9, x23, x8, 0x0000000000000000, 0x800000, 0x0, x1, 24, x2)

packw_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0000000001000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(packw, x10, x22, x7, 0x0000000000000000, 0x1000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_34_0)


packw_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0000000002000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(packw, x11, x21, x6, 0x0000000000000000, 0x2000000, 0x0, x1, 0, x7)

packw_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000004000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(packw, x12, x20, x5, 0x0000000000000000, 0x4000000, 0x0, x1, 8, x7)

packw_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000008000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(packw, x13, x19, x4, 0x0000000000000000, 0x8000000, 0x0, x1, 16, x7)

packw_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0000000010000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(packw, x14, x18, x3, 0x0000000000000000, 0x10000000, 0x0, x1, 24, x7)

packw_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x0000000020000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(packw, x15, x17, x2, 0x0000000000000000, 0x20000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x2,signature_35_0)


packw_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x0000000040000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(packw, x16, x16, x1, 0x0000000000000000, 0x40000000, 0x0, x2, 0, x3)

packw_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000000080000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(packw, x17, x15, x31, 0x0000000000000000, 0x80000000, 0x0, x2, 8, x3)

packw_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000000100000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(packw, x18, x14, x30, 0x0000000000000000, 0x100000000, 0x0, x2, 16, x3)

packw_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000200000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(packw, x19, x13, x29, 0x0000000000000000, 0x200000000, 0x0, x2, 24, x3)

packw_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000000400000000), rs2:x28(0x0000000000000000)
    TEST_RR_OP(packw, x20, x12, x28, 0x0000000000000000, 0x400000000, 0x0, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_36_0)


packw_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000800000000), rs2:x27(0x0000000000000000)
    TEST_RR_OP(packw, x21, x11, x27, 0x0000000000000000, 0x800000000, 0x0, x1, 0, x2)

packw_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000001000000000), rs2:x26(0x0000000000000000)
    TEST_RR_OP(packw, x22, x10, x26, 0x0000000000000000, 0x1000000000, 0x0, x1, 8, x2)

packw_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000002000000000), rs2:x25(0x0000000000000000)
    TEST_RR_OP(packw, x23, x9, x25, 0x0000000000000000, 0x2000000000, 0x0, x1, 16, x2)

packw_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000004000000000), rs2:x24(0x0000000000000000)
    TEST_RR_OP(packw, x24, x8, x24, 0x0000000000000000, 0x4000000000, 0x0, x1, 24, x2)

packw_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000008000000000), rs2:x23(0x0000000000000000)
    TEST_RR_OP(packw, x25, x7, x23, 0x0000000000000000, 0x8000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_37_0)


packw_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000010000000000), rs2:x22(0x0000000000000000)
    TEST_RR_OP(packw, x26, x6, x22, 0x0000000000000000, 0x10000000000, 0x0, x1, 0, x7)

packw_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000020000000000), rs2:x21(0x0000000000000000)
    TEST_RR_OP(packw, x27, x5, x21, 0x0000000000000000, 0x20000000000, 0x0, x1, 8, x7)

packw_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000040000000000), rs2:x20(0x0000000000000000)
    TEST_RR_OP(packw, x28, x4, x20, 0x0000000000000000, 0x40000000000, 0x0, x1, 16, x7)

packw_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000080000000000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(packw, x29, x3, x19, 0x0000000000000000, 0x80000000000, 0x0, x1, 24, x7)

packw_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000100000000000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(packw, x30, x2, x18, 0x0000000000000000, 0x100000000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x5,signature_38_0)


packw_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000200000000000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(packw, x31, x1, x17, 0x0000000000000000, 0x200000000000, 0x0, x5, 0, x6)

packw_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000400000000000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(packw, x1, x31, x16, 0x0000000000000000, 0x400000000000, 0x0, x5, 8, x6)

packw_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000800000000000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(packw, x2, x30, x15, 0x0000000000000000, 0x800000000000, 0x0, x5, 16, x6)

packw_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0001000000000000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(packw, x3, x29, x14, 0x0000000000000000, 0x1000000000000, 0x0, x5, 24, x6)

packw_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0002000000000000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(packw, x4, x28, x13, 0x0000000000000000, 0x2000000000000, 0x0, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_39_0)


packw_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0004000000000000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(packw, x5, x27, x12, 0x0000000000000000, 0x4000000000000, 0x0, x1, 0, x2)

packw_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0008000000000000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(packw, x6, x26, x11, 0x0000000000000000, 0x8000000000000, 0x0, x1, 8, x2)

packw_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0010000000000000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(packw, x7, x25, x10, 0x0000000000000000, 0x10000000000000, 0x0, x1, 16, x2)

packw_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0020000000000000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(packw, x8, x24, x9, 0x0000000000000000, 0x20000000000000, 0x0, x1, 24, x2)

packw_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0040000000000000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(packw, x9, x23, x8, 0x0000000000000000, 0x40000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_40_0)


packw_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0080000000000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(packw, x10, x22, x7, 0x0000000000000000, 0x80000000000000, 0x0, x1, 0, x2)

packw_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0100000000000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(packw, x11, x21, x6, 0x0000000000000000, 0x100000000000000, 0x0, x1, 8, x2)

packw_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0200000000000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(packw, x12, x20, x5, 0x0000000000000000, 0x200000000000000, 0x0, x1, 16, x2)

packw_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0400000000000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(packw, x13, x19, x4, 0x0000000000000000, 0x400000000000000, 0x0, x1, 24, x2)

packw_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0800000000000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(packw, x14, x18, x3, 0x0000000000000000, 0x800000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x3,signature_41_0)


packw_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x1000000000000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(packw, x15, x17, x2, 0x0000000000000000, 0x1000000000000000, 0x0, x3, 0, x4)

packw_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x2000000000000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(packw, x16, x16, x1, 0x0000000000000000, 0x2000000000000000, 0x0, x3, 8, x4)

packw_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x4000000000000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(packw, x17, x15, x31, 0x0000000000000000, 0x4000000000000000, 0x0, x3, 16, x4)

packw_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x8000000000000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(packw, x18, x14, x30, 0x0000000000000000, 0x8000000000000000, 0x0, x3, 24, x4)

packw_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(packw, x19, x13, x29, 0x0000000000000000, 0x0, 0x0, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_42_0)


packw_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0x000000000000fffe), rs1:x12(0xfffffffffffffffe), rs2:x28(0x0000000000000000)
    TEST_RR_OP(packw, x20, x12, x28, 0x000000000000fffe, 0xfffffffffffffffe, 0x0, x1, 0, x2)

packw_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0x000000000000fffd), rs1:x11(0xfffffffffffffffd), rs2:x27(0x0000000000000000)
    TEST_RR_OP(packw, x21, x11, x27, 0x000000000000fffd, 0xfffffffffffffffd, 0x0, x1, 8, x2)

packw_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0x000000000000fffb), rs1:x10(0xfffffffffffffffb), rs2:x26(0x0000000000000000)
    TEST_RR_OP(packw, x22, x10, x26, 0x000000000000fffb, 0xfffffffffffffffb, 0x0, x1, 16, x2)

packw_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0x000000000000fff7), rs1:x9(0xfffffffffffffff7), rs2:x25(0x0000000000000000)
    TEST_RR_OP(packw, x23, x9, x25, 0x000000000000fff7, 0xfffffffffffffff7, 0x0, x1, 24, x2)

packw_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0x000000000000ffef), rs1:x8(0xffffffffffffffef), rs2:x24(0x0000000000000000)
    TEST_RR_OP(packw, x24, x8, x24, 0x000000000000ffef, 0xffffffffffffffef, 0x0, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_43_0)


packw_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0x000000000000ffdf), rs1:x7(0xffffffffffffffdf), rs2:x23(0x0000000000000000)
    TEST_RR_OP(packw, x25, x7, x23, 0x000000000000ffdf, 0xffffffffffffffdf, 0x0, x1, 0, x2)

packw_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0x000000000000ffbf), rs1:x6(0xffffffffffffffbf), rs2:x22(0x0000000000000000)
    TEST_RR_OP(packw, x26, x6, x22, 0x000000000000ffbf, 0xffffffffffffffbf, 0x0, x1, 8, x2)

packw_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0x000000000000ff7f), rs1:x5(0xffffffffffffff7f), rs2:x21(0x0000000000000000)
    TEST_RR_OP(packw, x27, x5, x21, 0x000000000000ff7f, 0xffffffffffffff7f, 0x0, x1, 16, x2)

packw_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0x000000000000feff), rs1:x4(0xfffffffffffffeff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(packw, x28, x4, x20, 0x000000000000feff, 0xfffffffffffffeff, 0x0, x1, 24, x2)

packw_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0x000000000000fdff), rs1:x3(0xfffffffffffffdff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(packw, x29, x3, x19, 0x000000000000fdff, 0xfffffffffffffdff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x4,signature_44_0)


packw_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0x000000000000fbff), rs1:x2(0xfffffffffffffbff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(packw, x30, x2, x18, 0x000000000000fbff, 0xfffffffffffffbff, 0x0, x4, 0, x5)

packw_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0x000000000000f7ff), rs1:x1(0xfffffffffffff7ff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(packw, x31, x1, x17, 0x000000000000f7ff, 0xfffffffffffff7ff, 0x0, x4, 8, x5)

packw_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0x000000000000efff), rs1:x31(0xffffffffffffefff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(packw, x1, x31, x16, 0x000000000000efff, 0xffffffffffffefff, 0x0, x4, 16, x5)

packw_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0x000000000000dfff), rs1:x30(0xffffffffffffdfff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(packw, x2, x30, x15, 0x000000000000dfff, 0xffffffffffffdfff, 0x0, x4, 24, x5)

packw_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0x000000000000bfff), rs1:x29(0xffffffffffffbfff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(packw, x3, x29, x14, 0x000000000000bfff, 0xffffffffffffbfff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_45_0)


packw_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0x0000000000007fff), rs1:x28(0xffffffffffff7fff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(packw, x4, x28, x13, 0x0000000000007fff, 0xffffffffffff7fff, 0x0, x1, 0, x2)

packw_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0x000000000000ffff), rs1:x27(0xfffffffffffeffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(packw, x5, x27, x12, 0x000000000000ffff, 0xfffffffffffeffff, 0x0, x1, 8, x2)

packw_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0x000000000000ffff), rs1:x26(0xfffffffffffdffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(packw, x6, x26, x11, 0x000000000000ffff, 0xfffffffffffdffff, 0x0, x1, 16, x2)

packw_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0x000000000000ffff), rs1:x25(0xfffffffffffbffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(packw, x7, x25, x10, 0x000000000000ffff, 0xfffffffffffbffff, 0x0, x1, 24, x2)

packw_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0x000000000000ffff), rs1:x24(0xfffffffffff7ffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(packw, x8, x24, x9, 0x000000000000ffff, 0xfffffffffff7ffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_46_0)


packw_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0x000000000000ffff), rs1:x23(0xffffffffffefffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(packw, x9, x23, x8, 0x000000000000ffff, 0xffffffffffefffff, 0x0, x1, 0, x2)

packw_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0x000000000000ffff), rs1:x22(0xffffffffffdfffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(packw, x10, x22, x7, 0x000000000000ffff, 0xffffffffffdfffff, 0x0, x1, 8, x2)

packw_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0x000000000000ffff), rs1:x21(0xffffffffffbfffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(packw, x11, x21, x6, 0x000000000000ffff, 0xffffffffffbfffff, 0x0, x1, 16, x2)

packw_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0x000000000000ffff), rs1:x20(0xffffffffff7fffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(packw, x12, x20, x5, 0x000000000000ffff, 0xffffffffff7fffff, 0x0, x1, 24, x2)

packw_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0x000000000000ffff), rs1:x19(0xfffffffffeffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(packw, x13, x19, x4, 0x000000000000ffff, 0xfffffffffeffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x4,signature_47_0)


packw_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0x000000000000ffff), rs1:x18(0xfffffffffdffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(packw, x14, x18, x3, 0x000000000000ffff, 0xfffffffffdffffff, 0x0, x4, 0, x5)

packw_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0x000000000000ffff), rs1:x17(0xfffffffffbffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(packw, x15, x17, x2, 0x000000000000ffff, 0xfffffffffbffffff, 0x0, x4, 8, x5)

packw_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0x000000000000ffff), rs1:x16(0xfffffffff7ffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(packw, x16, x16, x1, 0x000000000000ffff, 0xfffffffff7ffffff, 0x0, x4, 16, x5)

packw_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0x000000000000ffff), rs1:x15(0xffffffffefffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(packw, x17, x15, x31, 0x000000000000ffff, 0xffffffffefffffff, 0x0, x4, 24, x5)

packw_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0x000000000000ffff), rs1:x14(0xffffffffdfffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(packw, x18, x14, x30, 0x000000000000ffff, 0xffffffffdfffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_48_0)


packw_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0x000000000000ffff), rs1:x13(0xffffffffbfffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(packw, x19, x13, x29, 0x000000000000ffff, 0xffffffffbfffffff, 0x0, x1, 0, x2)

packw_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0x000000000000ffff), rs1:x12(0xffffffff7fffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(packw, x20, x12, x28, 0x000000000000ffff, 0xffffffff7fffffff, 0x0, x1, 8, x2)

packw_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0x000000000000ffff), rs1:x11(0xfffffffeffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(packw, x21, x11, x27, 0x000000000000ffff, 0xfffffffeffffffff, 0x0, x1, 16, x2)

packw_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0x000000000000ffff), rs1:x10(0xfffffffdffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(packw, x22, x10, x26, 0x000000000000ffff, 0xfffffffdffffffff, 0x0, x1, 24, x2)

packw_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0x000000000000ffff), rs1:x9(0xfffffffbffffffff), rs2:x25(0x0000000000000000)
    TEST_RR_OP(packw, x23, x9, x25, 0x000000000000ffff, 0xfffffffbffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_49_0)


packw_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0x000000000000ffff), rs1:x8(0xfffffff7ffffffff), rs2:x24(0x0000000000000000)
    TEST_RR_OP(packw, x24, x8, x24, 0x000000000000ffff, 0xfffffff7ffffffff, 0x0, x1, 0, x2)

packw_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0x000000000000ffff), rs1:x7(0xffffffefffffffff), rs2:x23(0x0000000000000000)
    TEST_RR_OP(packw, x25, x7, x23, 0x000000000000ffff, 0xffffffefffffffff, 0x0, x1, 8, x2)

packw_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0x000000000000ffff), rs1:x6(0xffffffdfffffffff), rs2:x22(0x0000000000000000)
    TEST_RR_OP(packw, x26, x6, x22, 0x000000000000ffff, 0xffffffdfffffffff, 0x0, x1, 16, x2)

packw_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0x000000000000ffff), rs1:x5(0xffffffbfffffffff), rs2:x21(0x0000000000000000)
    TEST_RR_OP(packw, x27, x5, x21, 0x000000000000ffff, 0xffffffbfffffffff, 0x0, x1, 24, x2)

packw_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0x000000000000ffff), rs1:x4(0xffffff7fffffffff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(packw, x28, x4, x20, 0x000000000000ffff, 0xffffff7fffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x4,signature_50_0)


packw_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0x000000000000ffff), rs1:x3(0xfffffeffffffffff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(packw, x29, x3, x19, 0x000000000000ffff, 0xfffffeffffffffff, 0x0, x4, 0, x5)

packw_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0x000000000000ffff), rs1:x2(0xfffffdffffffffff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(packw, x30, x2, x18, 0x000000000000ffff, 0xfffffdffffffffff, 0x0, x4, 8, x5)

packw_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0x000000000000ffff), rs1:x1(0xfffffbffffffffff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(packw, x31, x1, x17, 0x000000000000ffff, 0xfffffbffffffffff, 0x0, x4, 16, x5)

packw_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0x000000000000ffff), rs1:x31(0xfffff7ffffffffff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(packw, x1, x31, x16, 0x000000000000ffff, 0xfffff7ffffffffff, 0x0, x4, 24, x5)

packw_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0x000000000000ffff), rs1:x30(0xffffefffffffffff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(packw, x2, x30, x15, 0x000000000000ffff, 0xffffefffffffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_51_0)


packw_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0x000000000000ffff), rs1:x29(0xffffdfffffffffff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(packw, x3, x29, x14, 0x000000000000ffff, 0xffffdfffffffffff, 0x0, x1, 0, x2)

packw_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0x000000000000ffff), rs1:x28(0xffffbfffffffffff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(packw, x4, x28, x13, 0x000000000000ffff, 0xffffbfffffffffff, 0x0, x1, 8, x2)

packw_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0x000000000000ffff), rs1:x27(0xffff7fffffffffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(packw, x5, x27, x12, 0x000000000000ffff, 0xffff7fffffffffff, 0x0, x1, 16, x2)

packw_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0x000000000000ffff), rs1:x26(0xfffeffffffffffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(packw, x6, x26, x11, 0x000000000000ffff, 0xfffeffffffffffff, 0x0, x1, 24, x2)

packw_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0x000000000000ffff), rs1:x25(0xfffdffffffffffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(packw, x7, x25, x10, 0x000000000000ffff, 0xfffdffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_52_0)


packw_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0x000000000000ffff), rs1:x24(0xfffbffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(packw, x8, x24, x9, 0x000000000000ffff, 0xfffbffffffffffff, 0x0, x1, 0, x2)

packw_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0x000000000000ffff), rs1:x23(0xfff7ffffffffffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(packw, x9, x23, x8, 0x000000000000ffff, 0xfff7ffffffffffff, 0x0, x1, 8, x2)

packw_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0x000000000000ffff), rs1:x22(0xffefffffffffffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(packw, x10, x22, x7, 0x000000000000ffff, 0xffefffffffffffff, 0x0, x1, 16, x2)

packw_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0x000000000000ffff), rs1:x21(0xffdfffffffffffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(packw, x11, x21, x6, 0x000000000000ffff, 0xffdfffffffffffff, 0x0, x1, 24, x2)

packw_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0x000000000000ffff), rs1:x20(0xffbfffffffffffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(packw, x12, x20, x5, 0x000000000000ffff, 0xffbfffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x5,signature_53_0)


packw_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0x000000000000ffff), rs1:x19(0xff7fffffffffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(packw, x13, x19, x4, 0x000000000000ffff, 0xff7fffffffffffff, 0x0, x5, 0, x6)

packw_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0x000000000000ffff), rs1:x18(0xfeffffffffffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(packw, x14, x18, x3, 0x000000000000ffff, 0xfeffffffffffffff, 0x0, x5, 8, x6)

packw_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0x000000000000ffff), rs1:x17(0xfdffffffffffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(packw, x15, x17, x2, 0x000000000000ffff, 0xfdffffffffffffff, 0x0, x5, 16, x6)

packw_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0x000000000000ffff), rs1:x16(0xfbffffffffffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(packw, x16, x16, x1, 0x000000000000ffff, 0xfbffffffffffffff, 0x0, x5, 24, x6)

packw_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0x000000000000ffff), rs1:x15(0xf7ffffffffffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(packw, x17, x15, x31, 0x000000000000ffff, 0xf7ffffffffffffff, 0x0, x5, 32, x6)

    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_54_0)


packw_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0x000000000000ffff), rs1:x14(0xefffffffffffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(packw, x18, x14, x30, 0x000000000000ffff, 0xefffffffffffffff, 0x0, x1, 0, x2)

packw_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0x000000000000ffff), rs1:x13(0xdfffffffffffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(packw, x19, x13, x29, 0x000000000000ffff, 0xdfffffffffffffff, 0x0, x1, 8, x2)

packw_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0x000000000000ffff), rs1:x12(0xbfffffffffffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(packw, x20, x12, x28, 0x000000000000ffff, 0xbfffffffffffffff, 0x0, x1, 16, x2)

packw_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0x000000000000ffff), rs1:x11(0x7fffffffffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(packw, x21, x11, x27, 0x000000000000ffff, 0x7fffffffffffffff, 0x0, x1, 24, x2)

packw_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0x000000000000ffff), rs1:x10(0xffffffffffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(packw, x22, x10, x26, 0x000000000000ffff, 0xffffffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packw)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packw)

	RVTEST_SIGBASE(x1,signature_55_0)


packw_01_inst_270:
    // Test 270:  Test with rs1 == rs2
    // result rd:x23(0xffffffffcc23cc23), rs1:x25(0x10fd3dedadea5195), rs2:x25(0xdf7f3844121bcc23)
    TEST_RR_OP(packw, x23, x25, x25, 0xffffffffcc23cc23, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x1, 0, x2)

packw_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1), rs2:x24(0xf5adb41aa47d105b)
    TEST_RR_OP(packw, x0, x8, x24, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x1, 8, x2)

packw_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0x000000000000a8bb), rs1:x7(0xc9649f05a8e1a8bb), rs2:x0(0x82f6747f707af2c0)
    TEST_RR_OP(packw, x25, x7, x0, 0x000000000000a8bb, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x1, 16, x2)

packw_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0xfffffffffbc30000), rs1:x0(0x3541291848c99fcb), rs2:x22(0x73a92fd4e19bfbc3)
    TEST_RR_OP(packw, x26, x0, x22, 0xfffffffffbc30000, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x1, 24, x2)
	
#endif


RVTEST_CODE_END packw_01_code_end
RVTEST_CODE_BEGIN aes64dsm_01_init aes64dsm_01_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x6,signature_1_0)


aes64dsm_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x06fbad2157078033), rs1:x31(0x10fd3dedadea5195), rs2:x16(0xdf7f3844121bcc23)
    TEST_RR_OP(aes64dsm, x1, x31, x16, 0x06fbad2157078033, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x6, 0, x7)

aes64dsm_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x3ff7b01c7616ec49), rs1:x30(0xbd295ce2d2ffbec1), rs2:x15(0xf5adb41aa47d105b)
    TEST_RR_OP(aes64dsm, x2, x30, x15, 0x3ff7b01c7616ec49, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x6, 8, x7)

aes64dsm_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0x5ce65db8b3c046ae), rs1:x29(0xc9649f05a8e1a8bb), rs2:x14(0x82f6747f707af2c0)
    TEST_RR_OP(aes64dsm, x3, x29, x14, 0x5ce65db8b3c046ae, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x6, 16, x7)

aes64dsm_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x3846acdfa5757e88), rs1:x28(0x3541291848c99fcb), rs2:x13(0x73a92fd4e19bfbc3)
    TEST_RR_OP(aes64dsm, x4, x28, x13, 0x3846acdfa5757e88, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x6, 24, x7)

aes64dsm_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0xdeba302326da7a70), rs1:x27(0x10a24740461d524f), rs2:x12(0x546b0e54528a10af)
    TEST_RR_OP(aes64dsm, x5, x27, x12, 0xdeba302326da7a70, 0x10a24740461d524f, 0x546b0e54528a10af, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_2_0)


aes64dsm_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0xf4af164eeee4597d), rs1:x26(0x546b0e54528a10af), rs2:x11(0x10a24740461d524f)
    TEST_RR_OP(aes64dsm, x6, x26, x11, 0xf4af164eeee4597d, 0x546b0e54528a10af, 0x10a24740461d524f, x1, 0, x2)

aes64dsm_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x6fd974947e0462fa), rs1:x25(0x73a92fd4e19bfbc3), rs2:x10(0x3541291848c99fcb)
    TEST_RR_OP(aes64dsm, x7, x25, x10, 0x6fd974947e0462fa, 0x73a92fd4e19bfbc3, 0x3541291848c99fcb, x1, 8, x2)

aes64dsm_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x50603884062462c0), rs1:x24(0x82f6747f707af2c0), rs2:x9(0xc9649f05a8e1a8bb)
    TEST_RR_OP(aes64dsm, x8, x24, x9, 0x50603884062462c0, 0x82f6747f707af2c0, 0xc9649f05a8e1a8bb, x1, 16, x2)

aes64dsm_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0x677a7c6d31aa0e6f), rs1:x23(0xf5adb41aa47d105b), rs2:x8(0xbd295ce2d2ffbec1)
    TEST_RR_OP(aes64dsm, x9, x23, x8, 0x677a7c6d31aa0e6f, 0xf5adb41aa47d105b, 0xbd295ce2d2ffbec1, x1, 24, x2)

aes64dsm_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0xf7cde34101c5a48d), rs1:x22(0xdf7f3844121bcc23), rs2:x7(0x10fd3dedadea5195)
    TEST_RR_OP(aes64dsm, x10, x22, x7, 0xf7cde34101c5a48d, 0xdf7f3844121bcc23, 0x10fd3dedadea5195, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_3_0)


aes64dsm_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x9fc1b0eeed5d749f), rs1:x21(0x0000000000000001), rs2:x6(0xffffffffffffffff)
    TEST_RR_OP(aes64dsm, x11, x21, x6, 0x9fc1b0eeed5d749f, 0x1, 0xffffffffffffffff, x1, 0, x7)

aes64dsm_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x9fc1b0ee7d9c22fb), rs1:x20(0x0000000000000002), rs2:x5(0x7fffffffffffffff)
    TEST_RR_OP(aes64dsm, x12, x20, x5, 0x9fc1b0ee7d9c22fb, 0x2, 0x7fffffffffffffff, x1, 8, x7)

aes64dsm_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x9fc1b0ee75539eda), rs1:x19(0x0000000000000004), rs2:x4(0xbfffffffffffffff)
    TEST_RR_OP(aes64dsm, x13, x19, x4, 0x9fc1b0ee75539eda, 0x4, 0xbfffffffffffffff, x1, 16, x7)

aes64dsm_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x9fc1b0eeebc205c1), rs1:x18(0x0000000000000008), rs2:x3(0xdfffffffffffffff)
    TEST_RR_OP(aes64dsm, x14, x18, x3, 0x9fc1b0eeebc205c1, 0x8, 0xdfffffffffffffff, x1, 24, x7)

aes64dsm_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x9fc1b0eef762843f), rs1:x17(0x0000000000000010), rs2:x2(0xefffffffffffffff)
    TEST_RR_OP(aes64dsm, x15, x17, x2, 0x9fc1b0eef762843f, 0x10, 0xefffffffffffffff, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x2,signature_4_0)


aes64dsm_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x9fc1b0eed4b1f794), rs1:x16(0x0000000000000020), rs2:x1(0xf7ffffffffffffff)
    TEST_RR_OP(aes64dsm, x16, x16, x1, 0x9fc1b0eed4b1f794, 0x20, 0xf7ffffffffffffff, x2, 0, x3)

aes64dsm_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x9fc1b0ee9524fa6b), rs1:x15(0x0000000000000040), rs2:x31(0xfbffffffffffffff)
    TEST_RR_OP(aes64dsm, x17, x15, x31, 0x9fc1b0ee9524fa6b, 0x40, 0xfbffffffffffffff, x2, 8, x3)

aes64dsm_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x9fc1b0ee3b21c4b6), rs1:x14(0x0000000000000080), rs2:x30(0xfdffffffffffffff)
    TEST_RR_OP(aes64dsm, x18, x14, x30, 0x9fc1b0ee3b21c4b6, 0x80, 0xfdffffffffffffff, x2, 16, x3)

aes64dsm_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x5d749fedee9fc1b0), rs1:x13(0x0000000000000100), rs2:x29(0xfeffffffffffffff)
    TEST_RR_OP(aes64dsm, x19, x13, x29, 0x5d749fedee9fc1b0, 0x100, 0xfeffffffffffffff, x2, 24, x3)

aes64dsm_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x3ae67183ee9fc1b0), rs1:x12(0x0000000000000200), rs2:x28(0xff7fffffffffffff)
    TEST_RR_OP(aes64dsm, x20, x12, x28, 0x3ae67183ee9fc1b0, 0x200, 0xff7fffffffffffff, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_5_0)


aes64dsm_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0xfea17ecaee9fc1b0), rs1:x11(0x0000000000000400), rs2:x27(0xffbfffffffffffff)
    TEST_RR_OP(aes64dsm, x21, x11, x27, 0xfea17ecaee9fc1b0, 0x400, 0xffbfffffffffffff, x1, 0, x2)

aes64dsm_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0xacb890fbee9fc1b0), rs1:x10(0x0000000000000800), rs2:x26(0xffdfffffffffffff)
    TEST_RR_OP(aes64dsm, x22, x10, x26, 0xacb890fbee9fc1b0, 0x800, 0xffdfffffffffffff, x1, 8, x2)

aes64dsm_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x9e2cfb7bee9fc1b0), rs1:x9(0x0000000000001000), rs2:x25(0xffefffffffffffff)
    TEST_RR_OP(aes64dsm, x23, x9, x25, 0x9e2cfb7bee9fc1b0, 0x1000, 0xffefffffffffffff, x1, 16, x2)

aes64dsm_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x04d89716ee9fc1b0), rs1:x8(0x0000000000002000), rs2:x24(0xfff7ffffffffffff)
    TEST_RR_OP(aes64dsm, x24, x8, x24, 0x04d89716ee9fc1b0, 0x2000, 0xfff7ffffffffffff, x1, 24, x2)

aes64dsm_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0xca4eb903ee9fc1b0), rs1:x7(0x0000000000004000), rs2:x23(0xfffbffffffffffff)
    TEST_RR_OP(aes64dsm, x25, x7, x23, 0xca4eb903ee9fc1b0, 0x4000, 0xfffbffffffffffff, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_6_0)


aes64dsm_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0xabc184daee9fc1b0), rs1:x6(0x0000000000008000), rs2:x22(0xfffdffffffffffff)
    TEST_RR_OP(aes64dsm, x26, x6, x22, 0xabc184daee9fc1b0, 0x8000, 0xfffdffffffffffff, x1, 0, x7)

aes64dsm_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x4b5986e5ee9fc1b0), rs1:x5(0x0000000000010000), rs2:x21(0xfffeffffffffffff)
    TEST_RR_OP(aes64dsm, x27, x5, x21, 0x4b5986e5ee9fc1b0, 0x10000, 0xfffeffffffffffff, x1, 8, x7)

aes64dsm_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x9fc1b0ee1039053a), rs1:x4(0x0000000000020000), rs2:x20(0xffff7fffffffffff)
    TEST_RR_OP(aes64dsm, x28, x4, x20, 0x9fc1b0ee1039053a, 0x20000, 0xffff7fffffffffff, x1, 16, x7)

aes64dsm_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x9fc1b0ee5132fe14), rs1:x3(0x0000000000040000), rs2:x19(0xffffbfffffffffff)
    TEST_RR_OP(aes64dsm, x29, x3, x19, 0x9fc1b0ee5132fe14, 0x40000, 0xffffbfffffffffff, x1, 24, x7)

aes64dsm_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x9fc1b0eefef17ce1), rs1:x2(0x0000000000080000), rs2:x18(0xffffdfffffffffff)
    TEST_RR_OP(aes64dsm, x30, x2, x18, 0x9fc1b0eefef17ce1, 0x80000, 0xffffdfffffffffff, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x5,signature_7_0)


aes64dsm_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x9fc1b0ee62636974), rs1:x1(0x0000000000100000), rs2:x17(0xffffefffffffffff)
    TEST_RR_OP(aes64dsm, x31, x1, x17, 0x9fc1b0ee62636974, 0x100000, 0xffffefffffffffff, x5, 0, x6)

aes64dsm_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x9fc1b0ee2c2aeeb3), rs1:x31(0x0000000000200000), rs2:x16(0xfffff7ffffffffff)
    TEST_RR_OP(aes64dsm, x1, x31, x16, 0x9fc1b0ee2c2aeeb3, 0x200000, 0xfffff7ffffffffff, x5, 8, x6)

aes64dsm_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x9fc1b0ee78717562), rs1:x30(0x0000000000400000), rs2:x15(0xfffffbffffffffff)
    TEST_RR_OP(aes64dsm, x2, x30, x15, 0x9fc1b0ee78717562, 0x400000, 0xfffffbffffffffff, x5, 16, x6)

aes64dsm_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x9fc1b0ee0f15c482), rs1:x29(0x0000000000800000), rs2:x14(0xfffffdffffffffff)
    TEST_RR_OP(aes64dsm, x3, x29, x14, 0x9fc1b0ee0f15c482, 0x800000, 0xfffffdffffffffff, x5, 24, x6)

aes64dsm_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x9fc1b0eee54b5986), rs1:x28(0x0000000001000000), rs2:x13(0xfffffeffffffffff)
    TEST_RR_OP(aes64dsm, x4, x28, x13, 0x9fc1b0eee54b5986, 0x1000000, 0xfffffeffffffffff, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_8_0)


aes64dsm_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x9fc1b0eeee9fc1b0), rs1:x27(0x0000000002000000), rs2:x12(0xffffff7fffffffff)
    TEST_RR_OP(aes64dsm, x5, x27, x12, 0x9fc1b0eeee9fc1b0, 0x2000000, 0xffffff7fffffffff, x1, 0, x2)

aes64dsm_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x9fc1b0eeee9fc1b0), rs1:x26(0x0000000004000000), rs2:x11(0xffffffbfffffffff)
    TEST_RR_OP(aes64dsm, x6, x26, x11, 0x9fc1b0eeee9fc1b0, 0x4000000, 0xffffffbfffffffff, x1, 8, x2)

aes64dsm_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x9fc1b0eeee9fc1b0), rs1:x25(0x0000000008000000), rs2:x10(0xffffffdfffffffff)
    TEST_RR_OP(aes64dsm, x7, x25, x10, 0x9fc1b0eeee9fc1b0, 0x8000000, 0xffffffdfffffffff, x1, 16, x2)

aes64dsm_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x9fc1b0eeee9fc1b0), rs1:x24(0x0000000010000000), rs2:x9(0xffffffefffffffff)
    TEST_RR_OP(aes64dsm, x8, x24, x9, 0x9fc1b0eeee9fc1b0, 0x10000000, 0xffffffefffffffff, x1, 24, x2)

aes64dsm_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x9fc1b0eeee9fc1b0), rs1:x23(0x0000000020000000), rs2:x8(0xfffffff7ffffffff)
    TEST_RR_OP(aes64dsm, x9, x23, x8, 0x9fc1b0eeee9fc1b0, 0x20000000, 0xfffffff7ffffffff, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_9_0)


aes64dsm_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x9fc1b0eeee9fc1b0), rs1:x22(0x0000000040000000), rs2:x7(0xfffffffbffffffff)
    TEST_RR_OP(aes64dsm, x10, x22, x7, 0x9fc1b0eeee9fc1b0, 0x40000000, 0xfffffffbffffffff, x1, 0, x2)

aes64dsm_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x9fc1b0eeee9fc1b0), rs1:x21(0x0000000080000000), rs2:x6(0xfffffffdffffffff)
    TEST_RR_OP(aes64dsm, x11, x21, x6, 0x9fc1b0eeee9fc1b0, 0x80000000, 0xfffffffdffffffff, x1, 8, x2)

aes64dsm_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x9c0305c1ee9fc1b0), rs1:x20(0x0000000100000000), rs2:x5(0xfffffffeffffffff)
    TEST_RR_OP(aes64dsm, x12, x20, x5, 0x9c0305c1ee9fc1b0, 0x100000000, 0xfffffffeffffffff, x1, 16, x2)

aes64dsm_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0xc848ad03ee9fc1b0), rs1:x19(0x0000000200000000), rs2:x4(0xffffffff7fffffff)
    TEST_RR_OP(aes64dsm, x13, x19, x4, 0xc848ad03ee9fc1b0, 0x200000000, 0xffffffff7fffffff, x1, 24, x2)

aes64dsm_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x3ba95029ee9fc1b0), rs1:x18(0x0000000400000000), rs2:x3(0xffffffffbfffffff)
    TEST_RR_OP(aes64dsm, x14, x18, x3, 0x3ba95029ee9fc1b0, 0x400000000, 0xffffffffbfffffff, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x3,signature_10_0)


aes64dsm_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x27cd64f1ee9fc1b0), rs1:x17(0x0000000800000000), rs2:x2(0xffffffffdfffffff)
    TEST_RR_OP(aes64dsm, x15, x17, x2, 0x27cd64f1ee9fc1b0, 0x800000000, 0xffffffffdfffffff, x3, 0, x4)

aes64dsm_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x2ef8799dee9fc1b0), rs1:x16(0x0000001000000000), rs2:x1(0xffffffffefffffff)
    TEST_RR_OP(aes64dsm, x16, x16, x1, 0x2ef8799dee9fc1b0, 0x1000000000, 0xffffffffefffffff, x3, 8, x4)

aes64dsm_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x8aec447fee9fc1b0), rs1:x15(0x0000002000000000), rs2:x31(0xfffffffff7ffffff)
    TEST_RR_OP(aes64dsm, x17, x15, x31, 0x8aec447fee9fc1b0, 0x2000000000, 0xfffffffff7ffffff, x3, 16, x4)

aes64dsm_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x50a81ddbee9fc1b0), rs1:x14(0x0000004000000000), rs2:x30(0xfffffffffbffffff)
    TEST_RR_OP(aes64dsm, x18, x14, x30, 0x50a81ddbee9fc1b0, 0x4000000000, 0xfffffffffbffffff, x3, 24, x4)

aes64dsm_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x4f4d5462ee9fc1b0), rs1:x13(0x0000008000000000), rs2:x29(0xfffffffffdffffff)
    TEST_RR_OP(aes64dsm, x19, x13, x29, 0x4f4d5462ee9fc1b0, 0x8000000000, 0xfffffffffdffffff, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_11_0)


aes64dsm_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x07f7bb3aee9fc1b0), rs1:x12(0x0000010000000000), rs2:x28(0xfffffffffeffffff)
    TEST_RR_OP(aes64dsm, x20, x12, x28, 0x07f7bb3aee9fc1b0, 0x10000000000, 0xfffffffffeffffff, x1, 0, x2)

aes64dsm_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x9fc1b0ee485b4b4e), rs1:x11(0x0000020000000000), rs2:x27(0xffffffffff7fffff)
    TEST_RR_OP(aes64dsm, x21, x11, x27, 0x9fc1b0ee485b4b4e, 0x20000000000, 0xffffffffff7fffff, x1, 8, x2)

aes64dsm_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x9fc1b0ee43a0650f), rs1:x10(0x0000040000000000), rs2:x26(0xffffffffffbfffff)
    TEST_RR_OP(aes64dsm, x22, x10, x26, 0x9fc1b0ee43a0650f, 0x40000000000, 0xffffffffffbfffff, x1, 16, x2)

aes64dsm_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x9fc1b0ee802290a0), rs1:x9(0x0000080000000000), rs2:x25(0xffffffffffdfffff)
    TEST_RR_OP(aes64dsm, x23, x9, x25, 0x9fc1b0ee802290a0, 0x80000000000, 0xffffffffffdfffff, x1, 24, x2)

aes64dsm_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x9fc1b0ee1237053c), rs1:x8(0x0000100000000000), rs2:x24(0xffffffffffefffff)
    TEST_RR_OP(aes64dsm, x24, x8, x24, 0x9fc1b0ee1237053c, 0x100000000000, 0xffffffffffefffff, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_12_0)


aes64dsm_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x9fc1b0ee5bb0c272), rs1:x7(0x0000200000000000), rs2:x23(0xfffffffffff7ffff)
    TEST_RR_OP(aes64dsm, x25, x7, x23, 0x9fc1b0ee5bb0c272, 0x200000000000, 0xfffffffffff7ffff, x1, 0, x2)

aes64dsm_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x9fc1b0ee002b1326), rs1:x6(0x0000400000000000), rs2:x22(0xfffffffffffbffff)
    TEST_RR_OP(aes64dsm, x26, x6, x22, 0x9fc1b0ee002b1326, 0x400000000000, 0xfffffffffffbffff, x1, 8, x2)

aes64dsm_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x9fc1b0ee649af351), rs1:x5(0x0000800000000000), rs2:x21(0xfffffffffffdffff)
    TEST_RR_OP(aes64dsm, x27, x5, x21, 0x9fc1b0ee649af351, 0x800000000000, 0xfffffffffffdffff, x1, 16, x2)

aes64dsm_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x9fc1b0ee3a07f7bb), rs1:x4(0x0001000000000000), rs2:x20(0xfffffffffffeffff)
    TEST_RR_OP(aes64dsm, x28, x4, x20, 0x9fc1b0ee3a07f7bb, 0x1000000000000, 0xfffffffffffeffff, x1, 24, x2)

aes64dsm_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x9fc1b0eeee9fc1b0), rs1:x3(0x0002000000000000), rs2:x19(0xffffffffffff7fff)
    TEST_RR_OP(aes64dsm, x29, x3, x19, 0x9fc1b0eeee9fc1b0, 0x2000000000000, 0xffffffffffff7fff, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x4,signature_13_0)


aes64dsm_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x9fc1b0eeee9fc1b0), rs1:x2(0x0004000000000000), rs2:x18(0xffffffffffffbfff)
    TEST_RR_OP(aes64dsm, x30, x2, x18, 0x9fc1b0eeee9fc1b0, 0x4000000000000, 0xffffffffffffbfff, x4, 0, x5)

aes64dsm_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x9fc1b0eeee9fc1b0), rs1:x1(0x0008000000000000), rs2:x17(0xffffffffffffdfff)
    TEST_RR_OP(aes64dsm, x31, x1, x17, 0x9fc1b0eeee9fc1b0, 0x8000000000000, 0xffffffffffffdfff, x4, 8, x5)

aes64dsm_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x9fc1b0eeee9fc1b0), rs1:x31(0x0010000000000000), rs2:x16(0xffffffffffffefff)
    TEST_RR_OP(aes64dsm, x1, x31, x16, 0x9fc1b0eeee9fc1b0, 0x10000000000000, 0xffffffffffffefff, x4, 16, x5)

aes64dsm_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x9fc1b0eeee9fc1b0), rs1:x30(0x0020000000000000), rs2:x15(0xfffffffffffff7ff)
    TEST_RR_OP(aes64dsm, x2, x30, x15, 0x9fc1b0eeee9fc1b0, 0x20000000000000, 0xfffffffffffff7ff, x4, 24, x5)

aes64dsm_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x9fc1b0eeee9fc1b0), rs1:x29(0x0040000000000000), rs2:x14(0xfffffffffffffbff)
    TEST_RR_OP(aes64dsm, x3, x29, x14, 0x9fc1b0eeee9fc1b0, 0x40000000000000, 0xfffffffffffffbff, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_14_0)


aes64dsm_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x9fc1b0eeee9fc1b0), rs1:x28(0x0080000000000000), rs2:x13(0xfffffffffffffdff)
    TEST_RR_OP(aes64dsm, x4, x28, x13, 0x9fc1b0eeee9fc1b0, 0x80000000000000, 0xfffffffffffffdff, x1, 0, x2)

aes64dsm_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x9fc1b0eec19c0305), rs1:x27(0x0100000000000000), rs2:x12(0xfffffffffffffeff)
    TEST_RR_OP(aes64dsm, x5, x27, x12, 0x9fc1b0eec19c0305, 0x100000000000000, 0xfffffffffffffeff, x1, 8, x2)

aes64dsm_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x9fc1b0eea50cc253), rs1:x26(0x0200000000000000), rs2:x11(0xffffffffffffff7f)
    TEST_RR_OP(aes64dsm, x6, x26, x11, 0x9fc1b0eea50cc253, 0x200000000000000, 0xffffffffffffff7f, x1, 16, x2)

aes64dsm_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x9fc1b0ee84040def), rs1:x25(0x0400000000000000), rs2:x10(0xffffffffffffffbf)
    TEST_RR_OP(aes64dsm, x7, x25, x10, 0x9fc1b0ee84040def, 0x400000000000000, 0xffffffffffffffbf, x1, 24, x2)

aes64dsm_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x9fc1b0ee9f9a9c74), rs1:x24(0x0800000000000000), rs2:x9(0xffffffffffffffdf)
    TEST_RR_OP(aes64dsm, x8, x24, x9, 0x9fc1b0ee9f9a9c74, 0x800000000000000, 0xffffffffffffffdf, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_15_0)


aes64dsm_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x9fc1b0ee61863cf5), rs1:x23(0x1000000000000000), rs2:x8(0xffffffffffffffef)
    TEST_RR_OP(aes64dsm, x9, x23, x8, 0x9fc1b0ee61863cf5, 0x1000000000000000, 0xffffffffffffffef, x1, 0, x2)

aes64dsm_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x9fc1b0eecaa5ef86), rs1:x22(0x2000000000000000), rs2:x7(0xfffffffffffffff7)
    TEST_RR_OP(aes64dsm, x10, x22, x7, 0x9fc1b0eecaa5ef86, 0x2000000000000000, 0xfffffffffffffff7, x1, 8, x2)

aes64dsm_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x9fc1b0ee35e47a8b), rs1:x21(0x4000000000000000), rs2:x6(0xfffffffffffffffb)
    TEST_RR_OP(aes64dsm, x11, x21, x6, 0x9fc1b0ee35e47a8b, 0x4000000000000000, 0xfffffffffffffffb, x1, 16, x2)

aes64dsm_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x9fc1b0eee84a7fb5), rs1:x20(0x8000000000000000), rs2:x5(0xfffffffffffffffd)
    TEST_RR_OP(aes64dsm, x12, x20, x5, 0x9fc1b0eee84a7fb5, 0x8000000000000000, 0xfffffffffffffffd, x1, 24, x2)

aes64dsm_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x9fc1b0eeee9fc1b0), rs1:x19(0x0000000000000000), rs2:x4(0xfffffffffffffffe)
    TEST_RR_OP(aes64dsm, x13, x19, x4, 0x9fc1b0eeee9fc1b0, 0x0, 0xfffffffffffffffe, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x4,signature_16_0)


aes64dsm_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0xb0ee9fc1f7bb3a07), rs1:x18(0xfffffffffffffffe), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x14, x18, x3, 0xb0ee9fc1f7bb3a07, 0xfffffffffffffffe, 0x0, x4, 0, x5)

aes64dsm_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0xb0ee9fc1f351649a), rs1:x17(0xfffffffffffffffd), rs2:x2(0x8000000000000000)
    TEST_RR_OP(aes64dsm, x15, x17, x2, 0xb0ee9fc1f351649a, 0xfffffffffffffffd, 0x8000000000000000, x4, 8, x5)

aes64dsm_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0xb0ee9fc11326002b), rs1:x16(0xfffffffffffffffb), rs2:x1(0x4000000000000000)
    TEST_RR_OP(aes64dsm, x16, x16, x1, 0xb0ee9fc11326002b, 0xfffffffffffffffb, 0x4000000000000000, x4, 16, x5)

aes64dsm_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0xb0ee9fc1c2725bb0), rs1:x15(0xfffffffffffffff7), rs2:x31(0x2000000000000000)
    TEST_RR_OP(aes64dsm, x17, x15, x31, 0xb0ee9fc1c2725bb0, 0xfffffffffffffff7, 0x2000000000000000, x4, 24, x5)

aes64dsm_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0xb0ee9fc1053c1237), rs1:x14(0xffffffffffffffef), rs2:x30(0x1000000000000000)
    TEST_RR_OP(aes64dsm, x18, x14, x30, 0xb0ee9fc1053c1237, 0xffffffffffffffef, 0x1000000000000000, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_17_0)


aes64dsm_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0xb0ee9fc190a08022), rs1:x13(0xffffffffffffffdf), rs2:x29(0x0800000000000000)
    TEST_RR_OP(aes64dsm, x19, x13, x29, 0xb0ee9fc190a08022, 0xffffffffffffffdf, 0x800000000000000, x1, 0, x2)

aes64dsm_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0xb0ee9fc1650f43a0), rs1:x12(0xffffffffffffffbf), rs2:x28(0x0400000000000000)
    TEST_RR_OP(aes64dsm, x20, x12, x28, 0xb0ee9fc1650f43a0, 0xffffffffffffffbf, 0x400000000000000, x1, 8, x2)

aes64dsm_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0xb0ee9fc14b4e485b), rs1:x11(0xffffffffffffff7f), rs2:x27(0x0200000000000000)
    TEST_RR_OP(aes64dsm, x21, x11, x27, 0xb0ee9fc14b4e485b, 0xffffffffffffff7f, 0x200000000000000, x1, 16, x2)

aes64dsm_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0xbb3a07f7c1b0ee9f), rs1:x10(0xfffffffffffffeff), rs2:x26(0x0100000000000000)
    TEST_RR_OP(aes64dsm, x22, x10, x26, 0xbb3a07f7c1b0ee9f, 0xfffffffffffffeff, 0x100000000000000, x1, 24, x2)

aes64dsm_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0x54624f4dc1b0ee9f), rs1:x9(0xfffffffffffffdff), rs2:x25(0x0080000000000000)
    TEST_RR_OP(aes64dsm, x23, x9, x25, 0x54624f4dc1b0ee9f, 0xfffffffffffffdff, 0x80000000000000, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_18_0)


aes64dsm_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0x1ddb50a8c1b0ee9f), rs1:x8(0xfffffffffffffbff), rs2:x24(0x0040000000000000)
    TEST_RR_OP(aes64dsm, x24, x8, x24, 0x1ddb50a8c1b0ee9f, 0xfffffffffffffbff, 0x40000000000000, x1, 0, x2)

aes64dsm_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0x447f8aecc1b0ee9f), rs1:x7(0xfffffffffffff7ff), rs2:x23(0x0020000000000000)
    TEST_RR_OP(aes64dsm, x25, x7, x23, 0x447f8aecc1b0ee9f, 0xfffffffffffff7ff, 0x20000000000000, x1, 8, x2)

aes64dsm_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0x799d2ef8c1b0ee9f), rs1:x6(0xffffffffffffefff), rs2:x22(0x0010000000000000)
    TEST_RR_OP(aes64dsm, x26, x6, x22, 0x799d2ef8c1b0ee9f, 0xffffffffffffefff, 0x10000000000000, x1, 16, x2)

aes64dsm_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0x64f127cdc1b0ee9f), rs1:x5(0xffffffffffffdfff), rs2:x21(0x0008000000000000)
    TEST_RR_OP(aes64dsm, x27, x5, x21, 0x64f127cdc1b0ee9f, 0xffffffffffffdfff, 0x8000000000000, x1, 24, x2)

aes64dsm_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0x50293ba9c1b0ee9f), rs1:x4(0xffffffffffffbfff), rs2:x20(0x0004000000000000)
    TEST_RR_OP(aes64dsm, x28, x4, x20, 0x50293ba9c1b0ee9f, 0xffffffffffffbfff, 0x4000000000000, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x4,signature_19_0)


aes64dsm_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0xad03c848c1b0ee9f), rs1:x3(0xffffffffffff7fff), rs2:x19(0x0002000000000000)
    TEST_RR_OP(aes64dsm, x29, x3, x19, 0xad03c848c1b0ee9f, 0xffffffffffff7fff, 0x2000000000000, x4, 0, x5)

aes64dsm_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0x05c19c03c1b0ee9f), rs1:x2(0xfffffffffffeffff), rs2:x18(0x0001000000000000)
    TEST_RR_OP(aes64dsm, x30, x2, x18, 0x05c19c03c1b0ee9f, 0xfffffffffffeffff, 0x1000000000000, x4, 8, x5)

aes64dsm_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0xb0ee9fc17fb5e84a), rs1:x1(0xfffffffffffdffff), rs2:x17(0x0000800000000000)
    TEST_RR_OP(aes64dsm, x31, x1, x17, 0xb0ee9fc17fb5e84a, 0xfffffffffffdffff, 0x800000000000, x4, 16, x5)

aes64dsm_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0xb0ee9fc17a8b35e4), rs1:x31(0xfffffffffffbffff), rs2:x16(0x0000400000000000)
    TEST_RR_OP(aes64dsm, x1, x31, x16, 0xb0ee9fc17a8b35e4, 0xfffffffffffbffff, 0x400000000000, x4, 24, x5)

aes64dsm_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0xb0ee9fc1ef86caa5), rs1:x30(0xfffffffffff7ffff), rs2:x15(0x0000200000000000)
    TEST_RR_OP(aes64dsm, x2, x30, x15, 0xb0ee9fc1ef86caa5, 0xfffffffffff7ffff, 0x200000000000, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_20_0)


aes64dsm_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0xb0ee9fc13cf56186), rs1:x29(0xffffffffffefffff), rs2:x14(0x0000100000000000)
    TEST_RR_OP(aes64dsm, x3, x29, x14, 0xb0ee9fc13cf56186, 0xffffffffffefffff, 0x100000000000, x1, 0, x2)

aes64dsm_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0xb0ee9fc19c749f9a), rs1:x28(0xffffffffffdfffff), rs2:x13(0x0000080000000000)
    TEST_RR_OP(aes64dsm, x4, x28, x13, 0xb0ee9fc19c749f9a, 0xffffffffffdfffff, 0x80000000000, x1, 8, x2)

aes64dsm_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0xb0ee9fc10def8404), rs1:x27(0xffffffffffbfffff), rs2:x12(0x0000040000000000)
    TEST_RR_OP(aes64dsm, x5, x27, x12, 0xb0ee9fc10def8404, 0xffffffffffbfffff, 0x40000000000, x1, 16, x2)

aes64dsm_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0xb0ee9fc1c253a50c), rs1:x26(0xffffffffff7fffff), rs2:x11(0x0000020000000000)
    TEST_RR_OP(aes64dsm, x6, x26, x11, 0xb0ee9fc1c253a50c, 0xffffffffff7fffff, 0x20000000000, x1, 24, x2)

aes64dsm_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0xb0ee9fc10305c19c), rs1:x25(0xfffffffffeffffff), rs2:x10(0x0000010000000000)
    TEST_RR_OP(aes64dsm, x7, x25, x10, 0xb0ee9fc10305c19c, 0xfffffffffeffffff, 0x10000000000, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_21_0)


aes64dsm_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0xb0ee9fc1c1b0ee9f), rs1:x24(0xfffffffffdffffff), rs2:x9(0x0000008000000000)
    TEST_RR_OP(aes64dsm, x8, x24, x9, 0xb0ee9fc1c1b0ee9f, 0xfffffffffdffffff, 0x8000000000, x1, 0, x2)

aes64dsm_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0xb0ee9fc1c1b0ee9f), rs1:x23(0xfffffffffbffffff), rs2:x8(0x0000004000000000)
    TEST_RR_OP(aes64dsm, x9, x23, x8, 0xb0ee9fc1c1b0ee9f, 0xfffffffffbffffff, 0x4000000000, x1, 8, x2)

aes64dsm_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0xb0ee9fc1c1b0ee9f), rs1:x22(0xfffffffff7ffffff), rs2:x7(0x0000002000000000)
    TEST_RR_OP(aes64dsm, x10, x22, x7, 0xb0ee9fc1c1b0ee9f, 0xfffffffff7ffffff, 0x2000000000, x1, 16, x2)

aes64dsm_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0xb0ee9fc1c1b0ee9f), rs1:x21(0xffffffffefffffff), rs2:x6(0x0000001000000000)
    TEST_RR_OP(aes64dsm, x11, x21, x6, 0xb0ee9fc1c1b0ee9f, 0xffffffffefffffff, 0x1000000000, x1, 24, x2)

aes64dsm_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0xb0ee9fc1c1b0ee9f), rs1:x20(0xffffffffdfffffff), rs2:x5(0x0000000800000000)
    TEST_RR_OP(aes64dsm, x12, x20, x5, 0xb0ee9fc1c1b0ee9f, 0xffffffffdfffffff, 0x800000000, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x5,signature_22_0)


aes64dsm_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0xb0ee9fc1c1b0ee9f), rs1:x19(0xffffffffbfffffff), rs2:x4(0x0000000400000000)
    TEST_RR_OP(aes64dsm, x13, x19, x4, 0xb0ee9fc1c1b0ee9f, 0xffffffffbfffffff, 0x400000000, x5, 0, x6)

aes64dsm_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0xb0ee9fc1c1b0ee9f), rs1:x18(0xffffffff7fffffff), rs2:x3(0x0000000200000000)
    TEST_RR_OP(aes64dsm, x14, x18, x3, 0xb0ee9fc1c1b0ee9f, 0xffffffff7fffffff, 0x200000000, x5, 8, x6)

aes64dsm_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0x86e54b59c1b0ee9f), rs1:x17(0xfffffffeffffffff), rs2:x2(0x0000000100000000)
    TEST_RR_OP(aes64dsm, x15, x17, x2, 0x86e54b59c1b0ee9f, 0xfffffffeffffffff, 0x100000000, x5, 16, x6)

aes64dsm_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0x84daabc1c1b0ee9f), rs1:x16(0xfffffffdffffffff), rs2:x1(0x0000000080000000)
    TEST_RR_OP(aes64dsm, x16, x16, x1, 0x84daabc1c1b0ee9f, 0xfffffffdffffffff, 0x80000000, x5, 24, x6)

aes64dsm_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0xb903ca4ec1b0ee9f), rs1:x15(0xfffffffbffffffff), rs2:x31(0x0000000040000000)
    TEST_RR_OP(aes64dsm, x17, x15, x31, 0xb903ca4ec1b0ee9f, 0xfffffffbffffffff, 0x40000000, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_23_0)


aes64dsm_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0x971604d8c1b0ee9f), rs1:x14(0xfffffff7ffffffff), rs2:x30(0x0000000020000000)
    TEST_RR_OP(aes64dsm, x18, x14, x30, 0x971604d8c1b0ee9f, 0xfffffff7ffffffff, 0x20000000, x1, 0, x2)

aes64dsm_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0xfb7b9e2cc1b0ee9f), rs1:x13(0xffffffefffffffff), rs2:x29(0x0000000010000000)
    TEST_RR_OP(aes64dsm, x19, x13, x29, 0xfb7b9e2cc1b0ee9f, 0xffffffefffffffff, 0x10000000, x1, 8, x2)

aes64dsm_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0x90fbacb8c1b0ee9f), rs1:x12(0xffffffdfffffffff), rs2:x28(0x0000000008000000)
    TEST_RR_OP(aes64dsm, x20, x12, x28, 0x90fbacb8c1b0ee9f, 0xffffffdfffffffff, 0x8000000, x1, 16, x2)

aes64dsm_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0x7ecafea1c1b0ee9f), rs1:x11(0xffffffbfffffffff), rs2:x27(0x0000000004000000)
    TEST_RR_OP(aes64dsm, x21, x11, x27, 0x7ecafea1c1b0ee9f, 0xffffffbfffffffff, 0x4000000, x1, 24, x2)

aes64dsm_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0x71833ae6c1b0ee9f), rs1:x10(0xffffff7fffffffff), rs2:x26(0x0000000002000000)
    TEST_RR_OP(aes64dsm, x22, x10, x26, 0x71833ae6c1b0ee9f, 0xffffff7fffffffff, 0x2000000, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_24_0)


aes64dsm_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0x9fed5d74c1b0ee9f), rs1:x9(0xfffffeffffffffff), rs2:x25(0x0000000001000000)
    TEST_RR_OP(aes64dsm, x23, x9, x25, 0x9fed5d74c1b0ee9f, 0xfffffeffffffffff, 0x1000000, x1, 0, x2)

aes64dsm_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0xb0ee9fc1c4b63b21), rs1:x8(0xfffffdffffffffff), rs2:x24(0x0000000000800000)
    TEST_RR_OP(aes64dsm, x24, x8, x24, 0xb0ee9fc1c4b63b21, 0xfffffdffffffffff, 0x800000, x1, 8, x2)

aes64dsm_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0xb0ee9fc1fa6b9524), rs1:x7(0xfffffbffffffffff), rs2:x23(0x0000000000400000)
    TEST_RR_OP(aes64dsm, x25, x7, x23, 0xb0ee9fc1fa6b9524, 0xfffffbffffffffff, 0x400000, x1, 16, x2)

aes64dsm_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0xb0ee9fc1f794d4b1), rs1:x6(0xfffff7ffffffffff), rs2:x22(0x0000000000200000)
    TEST_RR_OP(aes64dsm, x26, x6, x22, 0xb0ee9fc1f794d4b1, 0xfffff7ffffffffff, 0x200000, x1, 24, x2)

aes64dsm_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0xb0ee9fc1843ff762), rs1:x5(0xffffefffffffffff), rs2:x21(0x0000000000100000)
    TEST_RR_OP(aes64dsm, x27, x5, x21, 0xb0ee9fc1843ff762, 0xffffefffffffffff, 0x100000, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x5,signature_25_0)


aes64dsm_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0xb0ee9fc105c1ebc2), rs1:x4(0xffffdfffffffffff), rs2:x20(0x0000000000080000)
    TEST_RR_OP(aes64dsm, x28, x4, x20, 0xb0ee9fc105c1ebc2, 0xffffdfffffffffff, 0x80000, x5, 0, x6)

aes64dsm_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0xb0ee9fc19eda7553), rs1:x3(0xffffbfffffffffff), rs2:x19(0x0000000000040000)
    TEST_RR_OP(aes64dsm, x29, x3, x19, 0xb0ee9fc19eda7553, 0xffffbfffffffffff, 0x40000, x5, 8, x6)

aes64dsm_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0xb0ee9fc122fb7d9c), rs1:x2(0xffff7fffffffffff), rs2:x18(0x0000000000020000)
    TEST_RR_OP(aes64dsm, x30, x2, x18, 0xb0ee9fc122fb7d9c, 0xffff7fffffffffff, 0x20000, x5, 16, x6)

aes64dsm_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0xb0ee9fc1749fed5d), rs1:x1(0xfffeffffffffffff), rs2:x17(0x0000000000010000)
    TEST_RR_OP(aes64dsm, x31, x1, x17, 0xb0ee9fc1749fed5d, 0xfffeffffffffffff, 0x10000, x5, 24, x6)

aes64dsm_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0xb0ee9fc1c1b0ee9f), rs1:x31(0xfffdffffffffffff), rs2:x16(0x0000000000008000)
    TEST_RR_OP(aes64dsm, x1, x31, x16, 0xb0ee9fc1c1b0ee9f, 0xfffdffffffffffff, 0x8000, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_26_0)


aes64dsm_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0xb0ee9fc1c1b0ee9f), rs1:x30(0xfffbffffffffffff), rs2:x15(0x0000000000004000)
    TEST_RR_OP(aes64dsm, x2, x30, x15, 0xb0ee9fc1c1b0ee9f, 0xfffbffffffffffff, 0x4000, x1, 0, x7)

aes64dsm_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0xb0ee9fc1c1b0ee9f), rs1:x29(0xfff7ffffffffffff), rs2:x14(0x0000000000002000)
    TEST_RR_OP(aes64dsm, x3, x29, x14, 0xb0ee9fc1c1b0ee9f, 0xfff7ffffffffffff, 0x2000, x1, 8, x7)

aes64dsm_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0xb0ee9fc1c1b0ee9f), rs1:x28(0xffefffffffffffff), rs2:x13(0x0000000000001000)
    TEST_RR_OP(aes64dsm, x4, x28, x13, 0xb0ee9fc1c1b0ee9f, 0xffefffffffffffff, 0x1000, x1, 16, x7)

aes64dsm_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0xb0ee9fc1c1b0ee9f), rs1:x27(0xffdfffffffffffff), rs2:x12(0x0000000000000800)
    TEST_RR_OP(aes64dsm, x5, x27, x12, 0xb0ee9fc1c1b0ee9f, 0xffdfffffffffffff, 0x800, x1, 24, x7)

aes64dsm_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0xb0ee9fc1c1b0ee9f), rs1:x26(0xffbfffffffffffff), rs2:x11(0x0000000000000400)
    TEST_RR_OP(aes64dsm, x6, x26, x11, 0xb0ee9fc1c1b0ee9f, 0xffbfffffffffffff, 0x400, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_27_0)


aes64dsm_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0xb0ee9fc1c1b0ee9f), rs1:x25(0xff7fffffffffffff), rs2:x10(0x0000000000000200)
    TEST_RR_OP(aes64dsm, x7, x25, x10, 0xb0ee9fc1c1b0ee9f, 0xff7fffffffffffff, 0x200, x1, 0, x2)

aes64dsm_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0xb0ee9fc15986e54b), rs1:x24(0xfeffffffffffffff), rs2:x9(0x0000000000000100)
    TEST_RR_OP(aes64dsm, x8, x24, x9, 0xb0ee9fc15986e54b, 0xfeffffffffffffff, 0x100, x1, 8, x2)

aes64dsm_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0xb0ee9fc1c4820f15), rs1:x23(0xfdffffffffffffff), rs2:x8(0x0000000000000080)
    TEST_RR_OP(aes64dsm, x9, x23, x8, 0xb0ee9fc1c4820f15, 0xfdffffffffffffff, 0x80, x1, 16, x2)

aes64dsm_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0xb0ee9fc175627871), rs1:x22(0xfbffffffffffffff), rs2:x7(0x0000000000000040)
    TEST_RR_OP(aes64dsm, x10, x22, x7, 0xb0ee9fc175627871, 0xfbffffffffffffff, 0x40, x1, 24, x2)

aes64dsm_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0xb0ee9fc1eeb32c2a), rs1:x21(0xf7ffffffffffffff), rs2:x6(0x0000000000000020)
    TEST_RR_OP(aes64dsm, x11, x21, x6, 0xb0ee9fc1eeb32c2a, 0xf7ffffffffffffff, 0x20, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x6,signature_28_0)


aes64dsm_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0xb0ee9fc169746263), rs1:x20(0xefffffffffffffff), rs2:x5(0x0000000000000010)
    TEST_RR_OP(aes64dsm, x12, x20, x5, 0xb0ee9fc169746263, 0xefffffffffffffff, 0x10, x6, 0, x7)

aes64dsm_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0xb0ee9fc17ce1fef1), rs1:x19(0xdfffffffffffffff), rs2:x4(0x0000000000000008)
    TEST_RR_OP(aes64dsm, x13, x19, x4, 0xb0ee9fc17ce1fef1, 0xdfffffffffffffff, 0x8, x6, 8, x7)

aes64dsm_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0xb0ee9fc1fe145132), rs1:x18(0xbfffffffffffffff), rs2:x3(0x0000000000000004)
    TEST_RR_OP(aes64dsm, x14, x18, x3, 0xb0ee9fc1fe145132, 0xbfffffffffffffff, 0x4, x6, 16, x7)

aes64dsm_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0xb0ee9fc1053a1039), rs1:x17(0x7fffffffffffffff), rs2:x2(0x0000000000000002)
    TEST_RR_OP(aes64dsm, x15, x17, x2, 0xb0ee9fc1053a1039, 0x7fffffffffffffff, 0x2, x6, 24, x7)

aes64dsm_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0xb0ee9fc1c1b0ee9f), rs1:x16(0xffffffffffffffff), rs2:x1(0x0000000000000001)
    TEST_RR_OP(aes64dsm, x16, x16, x1, 0xb0ee9fc1c1b0ee9f, 0xffffffffffffffff, 0x1, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_29_0)


aes64dsm_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x525252525190e77d), rs1:x15(0x0000000000000001), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x17, x15, x31, 0x525252525190e77d, 0x1, 0x0, x1, 0, x2)

aes64dsm_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x52525252c151b119), rs1:x14(0x0000000000000002), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x18, x14, x30, 0x52525252c151b119, 0x2, 0x0, x1, 8, x2)

aes64dsm_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x52525252c99e0d38), rs1:x13(0x0000000000000004), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x19, x13, x29, 0x52525252c99e0d38, 0x4, 0x0, x1, 16, x2)

aes64dsm_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x52525252570f9623), rs1:x12(0x0000000000000008), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x20, x12, x28, 0x52525252570f9623, 0x8, 0x0, x1, 24, x2)

aes64dsm_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x525252524baf17dd), rs1:x11(0x0000000000000010), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x21, x11, x27, 0x525252524baf17dd, 0x10, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_30_0)


aes64dsm_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x52525252687c6476), rs1:x10(0x0000000000000020), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x22, x10, x26, 0x52525252687c6476, 0x20, 0x0, x1, 0, x2)

aes64dsm_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x5252525229e96989), rs1:x9(0x0000000000000040), rs2:x25(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x23, x9, x25, 0x5252525229e96989, 0x40, 0x0, x1, 8, x2)

aes64dsm_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x5252525287ec5754), rs1:x8(0x0000000000000080), rs2:x24(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x24, x8, x24, 0x5252525287ec5754, 0x80, 0x0, x1, 16, x2)

aes64dsm_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x90e77d5152525252), rs1:x7(0x0000000000000100), rs2:x23(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x25, x7, x23, 0x90e77d5152525252, 0x100, 0x0, x1, 24, x2)

aes64dsm_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x51b119c152525252), rs1:x6(0x0000000000000200), rs2:x22(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x26, x6, x22, 0x51b119c152525252, 0x200, 0x0, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x6,signature_31_0)


aes64dsm_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x9e0d38c952525252), rs1:x5(0x0000000000000400), rs2:x21(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x27, x5, x21, 0x9e0d38c952525252, 0x400, 0x0, x6, 0, x7)

aes64dsm_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0f96235752525252), rs1:x4(0x0000000000000800), rs2:x20(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x28, x4, x20, 0x0f96235752525252, 0x800, 0x0, x6, 8, x7)

aes64dsm_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0xaf17dd4b52525252), rs1:x3(0x0000000000001000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x29, x3, x19, 0xaf17dd4b52525252, 0x1000, 0x0, x6, 16, x7)

aes64dsm_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x7c64766852525252), rs1:x2(0x0000000000002000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x30, x2, x18, 0x7c64766852525252, 0x2000, 0x0, x6, 24, x7)

aes64dsm_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0xe969892952525252), rs1:x1(0x0000000000004000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x31, x1, x17, 0xe969892952525252, 0x4000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x6,signature_32_0)


aes64dsm_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0xec57548752525252), rs1:x31(0x0000000000008000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x1, x31, x16, 0xec57548752525252, 0x8000, 0x0, x6, 0, x7)

aes64dsm_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x5252525252525252), rs1:x30(0x0000000000010000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x2, x30, x15, 0x5252525252525252, 0x10000, 0x0, x6, 8, x7)

aes64dsm_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x5252525252525252), rs1:x29(0x0000000000020000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x3, x29, x14, 0x5252525252525252, 0x20000, 0x0, x6, 16, x7)

aes64dsm_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x5252525252525252), rs1:x28(0x0000000000040000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x4, x28, x13, 0x5252525252525252, 0x40000, 0x0, x6, 24, x7)

aes64dsm_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x5252525252525252), rs1:x27(0x0000000000080000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x5, x27, x12, 0x5252525252525252, 0x80000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_33_0)


aes64dsm_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x5252525252525252), rs1:x26(0x0000000000100000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x6, x26, x11, 0x5252525252525252, 0x100000, 0x0, x1, 0, x2)

aes64dsm_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x5252525252525252), rs1:x25(0x0000000000200000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x7, x25, x10, 0x5252525252525252, 0x200000, 0x0, x1, 8, x2)

aes64dsm_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x5252525252525252), rs1:x24(0x0000000000400000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x8, x24, x9, 0x5252525252525252, 0x400000, 0x0, x1, 16, x2)

aes64dsm_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x5252525252525252), rs1:x23(0x0000000000800000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x9, x23, x8, 0x5252525252525252, 0x800000, 0x0, x1, 24, x2)

aes64dsm_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x5252525252525252), rs1:x22(0x0000000001000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x10, x22, x7, 0x5252525252525252, 0x1000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_34_0)


aes64dsm_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x5252525252525252), rs1:x21(0x0000000002000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x11, x21, x6, 0x5252525252525252, 0x2000000, 0x0, x1, 0, x7)

aes64dsm_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x5252525252525252), rs1:x20(0x0000000004000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x12, x20, x5, 0x5252525252525252, 0x4000000, 0x0, x1, 8, x7)

aes64dsm_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x5252525252525252), rs1:x19(0x0000000008000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x13, x19, x4, 0x5252525252525252, 0x8000000, 0x0, x1, 16, x7)

aes64dsm_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x5252525252525252), rs1:x18(0x0000000010000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x14, x18, x3, 0x5252525252525252, 0x10000000, 0x0, x1, 24, x7)

aes64dsm_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x5252525252525252), rs1:x17(0x0000000020000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x15, x17, x2, 0x5252525252525252, 0x20000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x2,signature_35_0)


aes64dsm_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x5252525252525252), rs1:x16(0x0000000040000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x16, x16, x1, 0x5252525252525252, 0x40000000, 0x0, x2, 0, x3)

aes64dsm_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x5252525252525252), rs1:x15(0x0000000080000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x17, x15, x31, 0x5252525252525252, 0x80000000, 0x0, x2, 8, x3)

aes64dsm_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x5190e77d52525252), rs1:x14(0x0000000100000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x18, x14, x30, 0x5190e77d52525252, 0x100000000, 0x0, x2, 16, x3)

aes64dsm_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0xc151b11952525252), rs1:x13(0x0000000200000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x19, x13, x29, 0xc151b11952525252, 0x200000000, 0x0, x2, 24, x3)

aes64dsm_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0xc99e0d3852525252), rs1:x12(0x0000000400000000), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x20, x12, x28, 0xc99e0d3852525252, 0x400000000, 0x0, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_36_0)


aes64dsm_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x570f962352525252), rs1:x11(0x0000000800000000), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x21, x11, x27, 0x570f962352525252, 0x800000000, 0x0, x1, 0, x2)

aes64dsm_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x4baf17dd52525252), rs1:x10(0x0000001000000000), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x22, x10, x26, 0x4baf17dd52525252, 0x1000000000, 0x0, x1, 8, x2)

aes64dsm_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x687c647652525252), rs1:x9(0x0000002000000000), rs2:x25(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x23, x9, x25, 0x687c647652525252, 0x2000000000, 0x0, x1, 16, x2)

aes64dsm_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x29e9698952525252), rs1:x8(0x0000004000000000), rs2:x24(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x24, x8, x24, 0x29e9698952525252, 0x4000000000, 0x0, x1, 24, x2)

aes64dsm_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x87ec575452525252), rs1:x7(0x0000008000000000), rs2:x23(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x25, x7, x23, 0x87ec575452525252, 0x8000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_37_0)


aes64dsm_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x5252525252525252), rs1:x6(0x0000010000000000), rs2:x22(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x26, x6, x22, 0x5252525252525252, 0x10000000000, 0x0, x1, 0, x7)

aes64dsm_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x5252525252525252), rs1:x5(0x0000020000000000), rs2:x21(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x27, x5, x21, 0x5252525252525252, 0x20000000000, 0x0, x1, 8, x7)

aes64dsm_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x5252525252525252), rs1:x4(0x0000040000000000), rs2:x20(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x28, x4, x20, 0x5252525252525252, 0x40000000000, 0x0, x1, 16, x7)

aes64dsm_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x5252525252525252), rs1:x3(0x0000080000000000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x29, x3, x19, 0x5252525252525252, 0x80000000000, 0x0, x1, 24, x7)

aes64dsm_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x5252525252525252), rs1:x2(0x0000100000000000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x30, x2, x18, 0x5252525252525252, 0x100000000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x5,signature_38_0)


aes64dsm_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x5252525252525252), rs1:x1(0x0000200000000000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x31, x1, x17, 0x5252525252525252, 0x200000000000, 0x0, x5, 0, x6)

aes64dsm_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x5252525252525252), rs1:x31(0x0000400000000000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x1, x31, x16, 0x5252525252525252, 0x400000000000, 0x0, x5, 8, x6)

aes64dsm_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x5252525252525252), rs1:x30(0x0000800000000000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x2, x30, x15, 0x5252525252525252, 0x800000000000, 0x0, x5, 16, x6)

aes64dsm_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x5252525252525252), rs1:x29(0x0001000000000000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x3, x29, x14, 0x5252525252525252, 0x1000000000000, 0x0, x5, 24, x6)

aes64dsm_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x5252525252525252), rs1:x28(0x0002000000000000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x4, x28, x13, 0x5252525252525252, 0x2000000000000, 0x0, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_39_0)


aes64dsm_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x5252525252525252), rs1:x27(0x0004000000000000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x5, x27, x12, 0x5252525252525252, 0x4000000000000, 0x0, x1, 0, x2)

aes64dsm_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x5252525252525252), rs1:x26(0x0008000000000000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x6, x26, x11, 0x5252525252525252, 0x8000000000000, 0x0, x1, 8, x2)

aes64dsm_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x5252525252525252), rs1:x25(0x0010000000000000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x7, x25, x10, 0x5252525252525252, 0x10000000000000, 0x0, x1, 16, x2)

aes64dsm_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x5252525252525252), rs1:x24(0x0020000000000000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x8, x24, x9, 0x5252525252525252, 0x20000000000000, 0x0, x1, 24, x2)

aes64dsm_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x5252525252525252), rs1:x23(0x0040000000000000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x9, x23, x8, 0x5252525252525252, 0x40000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_40_0)


aes64dsm_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x5252525252525252), rs1:x22(0x0080000000000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x10, x22, x7, 0x5252525252525252, 0x80000000000000, 0x0, x1, 0, x2)

aes64dsm_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x525252527d5190e7), rs1:x21(0x0100000000000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x11, x21, x6, 0x525252527d5190e7, 0x100000000000000, 0x0, x1, 8, x2)

aes64dsm_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x5252525219c151b1), rs1:x20(0x0200000000000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x12, x20, x5, 0x5252525219c151b1, 0x200000000000000, 0x0, x1, 16, x2)

aes64dsm_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x5252525238c99e0d), rs1:x19(0x0400000000000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x13, x19, x4, 0x5252525238c99e0d, 0x400000000000000, 0x0, x1, 24, x2)

aes64dsm_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x5252525223570f96), rs1:x18(0x0800000000000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x14, x18, x3, 0x5252525223570f96, 0x800000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x3,signature_41_0)


aes64dsm_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x52525252dd4baf17), rs1:x17(0x1000000000000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x15, x17, x2, 0x52525252dd4baf17, 0x1000000000000000, 0x0, x3, 0, x4)

aes64dsm_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x5252525276687c64), rs1:x16(0x2000000000000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x16, x16, x1, 0x5252525276687c64, 0x2000000000000000, 0x0, x3, 8, x4)

aes64dsm_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x525252528929e969), rs1:x15(0x4000000000000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x17, x15, x31, 0x525252528929e969, 0x4000000000000000, 0x0, x3, 16, x4)

aes64dsm_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x525252525487ec57), rs1:x14(0x8000000000000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x18, x14, x30, 0x525252525487ec57, 0x8000000000000000, 0x0, x3, 24, x4)

aes64dsm_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x5252525252525252), rs1:x13(0x0000000000000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x19, x13, x29, 0x5252525252525252, 0x0, 0x0, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_42_0)


aes64dsm_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0xb0ee9fc1f7bb3a07), rs1:x12(0xfffffffffffffffe), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x20, x12, x28, 0xb0ee9fc1f7bb3a07, 0xfffffffffffffffe, 0x0, x1, 0, x2)

aes64dsm_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0xb0ee9fc1f351649a), rs1:x11(0xfffffffffffffffd), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x21, x11, x27, 0xb0ee9fc1f351649a, 0xfffffffffffffffd, 0x0, x1, 8, x2)

aes64dsm_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0xb0ee9fc11326002b), rs1:x10(0xfffffffffffffffb), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x22, x10, x26, 0xb0ee9fc11326002b, 0xfffffffffffffffb, 0x0, x1, 16, x2)

aes64dsm_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0xb0ee9fc1c2725bb0), rs1:x9(0xfffffffffffffff7), rs2:x25(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x23, x9, x25, 0xb0ee9fc1c2725bb0, 0xfffffffffffffff7, 0x0, x1, 24, x2)

aes64dsm_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0xb0ee9fc1053c1237), rs1:x8(0xffffffffffffffef), rs2:x24(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x24, x8, x24, 0xb0ee9fc1053c1237, 0xffffffffffffffef, 0x0, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_43_0)


aes64dsm_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0xb0ee9fc190a08022), rs1:x7(0xffffffffffffffdf), rs2:x23(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x25, x7, x23, 0xb0ee9fc190a08022, 0xffffffffffffffdf, 0x0, x1, 0, x2)

aes64dsm_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0xb0ee9fc1650f43a0), rs1:x6(0xffffffffffffffbf), rs2:x22(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x26, x6, x22, 0xb0ee9fc1650f43a0, 0xffffffffffffffbf, 0x0, x1, 8, x2)

aes64dsm_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0xb0ee9fc14b4e485b), rs1:x5(0xffffffffffffff7f), rs2:x21(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x27, x5, x21, 0xb0ee9fc14b4e485b, 0xffffffffffffff7f, 0x0, x1, 16, x2)

aes64dsm_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0xbb3a07f7c1b0ee9f), rs1:x4(0xfffffffffffffeff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x28, x4, x20, 0xbb3a07f7c1b0ee9f, 0xfffffffffffffeff, 0x0, x1, 24, x2)

aes64dsm_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0x51649af3c1b0ee9f), rs1:x3(0xfffffffffffffdff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x29, x3, x19, 0x51649af3c1b0ee9f, 0xfffffffffffffdff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x4,signature_44_0)


aes64dsm_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0x26002b13c1b0ee9f), rs1:x2(0xfffffffffffffbff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x30, x2, x18, 0x26002b13c1b0ee9f, 0xfffffffffffffbff, 0x0, x4, 0, x5)

aes64dsm_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0x725bb0c2c1b0ee9f), rs1:x1(0xfffffffffffff7ff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x31, x1, x17, 0x725bb0c2c1b0ee9f, 0xfffffffffffff7ff, 0x0, x4, 8, x5)

aes64dsm_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0x3c123705c1b0ee9f), rs1:x31(0xffffffffffffefff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x1, x31, x16, 0x3c123705c1b0ee9f, 0xffffffffffffefff, 0x0, x4, 16, x5)

aes64dsm_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0xa0802290c1b0ee9f), rs1:x30(0xffffffffffffdfff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x2, x30, x15, 0xa0802290c1b0ee9f, 0xffffffffffffdfff, 0x0, x4, 24, x5)

aes64dsm_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0x0f43a065c1b0ee9f), rs1:x29(0xffffffffffffbfff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x3, x29, x14, 0x0f43a065c1b0ee9f, 0xffffffffffffbfff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_45_0)


aes64dsm_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0x4e485b4bc1b0ee9f), rs1:x28(0xffffffffffff7fff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x4, x28, x13, 0x4e485b4bc1b0ee9f, 0xffffffffffff7fff, 0x0, x1, 0, x2)

aes64dsm_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0xb0ee9fc1c1b0ee9f), rs1:x27(0xfffffffffffeffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x5, x27, x12, 0xb0ee9fc1c1b0ee9f, 0xfffffffffffeffff, 0x0, x1, 8, x2)

aes64dsm_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0xb0ee9fc1c1b0ee9f), rs1:x26(0xfffffffffffdffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x6, x26, x11, 0xb0ee9fc1c1b0ee9f, 0xfffffffffffdffff, 0x0, x1, 16, x2)

aes64dsm_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0xb0ee9fc1c1b0ee9f), rs1:x25(0xfffffffffffbffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x7, x25, x10, 0xb0ee9fc1c1b0ee9f, 0xfffffffffffbffff, 0x0, x1, 24, x2)

aes64dsm_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0xb0ee9fc1c1b0ee9f), rs1:x24(0xfffffffffff7ffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x8, x24, x9, 0xb0ee9fc1c1b0ee9f, 0xfffffffffff7ffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_46_0)


aes64dsm_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0xb0ee9fc1c1b0ee9f), rs1:x23(0xffffffffffefffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x9, x23, x8, 0xb0ee9fc1c1b0ee9f, 0xffffffffffefffff, 0x0, x1, 0, x2)

aes64dsm_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0xb0ee9fc1c1b0ee9f), rs1:x22(0xffffffffffdfffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x10, x22, x7, 0xb0ee9fc1c1b0ee9f, 0xffffffffffdfffff, 0x0, x1, 8, x2)

aes64dsm_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0xb0ee9fc1c1b0ee9f), rs1:x21(0xffffffffffbfffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x11, x21, x6, 0xb0ee9fc1c1b0ee9f, 0xffffffffffbfffff, 0x0, x1, 16, x2)

aes64dsm_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0xb0ee9fc1c1b0ee9f), rs1:x20(0xffffffffff7fffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x12, x20, x5, 0xb0ee9fc1c1b0ee9f, 0xffffffffff7fffff, 0x0, x1, 24, x2)

aes64dsm_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0xb0ee9fc1c1b0ee9f), rs1:x19(0xfffffffffeffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x13, x19, x4, 0xb0ee9fc1c1b0ee9f, 0xfffffffffeffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x4,signature_47_0)


aes64dsm_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0xb0ee9fc1c1b0ee9f), rs1:x18(0xfffffffffdffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x14, x18, x3, 0xb0ee9fc1c1b0ee9f, 0xfffffffffdffffff, 0x0, x4, 0, x5)

aes64dsm_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0xb0ee9fc1c1b0ee9f), rs1:x17(0xfffffffffbffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x15, x17, x2, 0xb0ee9fc1c1b0ee9f, 0xfffffffffbffffff, 0x0, x4, 8, x5)

aes64dsm_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0xb0ee9fc1c1b0ee9f), rs1:x16(0xfffffffff7ffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x16, x16, x1, 0xb0ee9fc1c1b0ee9f, 0xfffffffff7ffffff, 0x0, x4, 16, x5)

aes64dsm_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0xb0ee9fc1c1b0ee9f), rs1:x15(0xffffffffefffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x17, x15, x31, 0xb0ee9fc1c1b0ee9f, 0xffffffffefffffff, 0x0, x4, 24, x5)

aes64dsm_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0xb0ee9fc1c1b0ee9f), rs1:x14(0xffffffffdfffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x18, x14, x30, 0xb0ee9fc1c1b0ee9f, 0xffffffffdfffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_48_0)


aes64dsm_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0xb0ee9fc1c1b0ee9f), rs1:x13(0xffffffffbfffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x19, x13, x29, 0xb0ee9fc1c1b0ee9f, 0xffffffffbfffffff, 0x0, x1, 0, x2)

aes64dsm_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0xb0ee9fc1c1b0ee9f), rs1:x12(0xffffffff7fffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x20, x12, x28, 0xb0ee9fc1c1b0ee9f, 0xffffffff7fffffff, 0x0, x1, 8, x2)

aes64dsm_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0x86e54b59c1b0ee9f), rs1:x11(0xfffffffeffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x21, x11, x27, 0x86e54b59c1b0ee9f, 0xfffffffeffffffff, 0x0, x1, 16, x2)

aes64dsm_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0x820f15c4c1b0ee9f), rs1:x10(0xfffffffdffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x22, x10, x26, 0x820f15c4c1b0ee9f, 0xfffffffdffffffff, 0x0, x1, 24, x2)

aes64dsm_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0x62787175c1b0ee9f), rs1:x9(0xfffffffbffffffff), rs2:x25(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x23, x9, x25, 0x62787175c1b0ee9f, 0xfffffffbffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_49_0)


aes64dsm_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0xb32c2aeec1b0ee9f), rs1:x8(0xfffffff7ffffffff), rs2:x24(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x24, x8, x24, 0xb32c2aeec1b0ee9f, 0xfffffff7ffffffff, 0x0, x1, 0, x2)

aes64dsm_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0x74626369c1b0ee9f), rs1:x7(0xffffffefffffffff), rs2:x23(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x25, x7, x23, 0x74626369c1b0ee9f, 0xffffffefffffffff, 0x0, x1, 8, x2)

aes64dsm_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0xe1fef17cc1b0ee9f), rs1:x6(0xffffffdfffffffff), rs2:x22(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x26, x6, x22, 0xe1fef17cc1b0ee9f, 0xffffffdfffffffff, 0x0, x1, 16, x2)

aes64dsm_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0x145132fec1b0ee9f), rs1:x5(0xffffffbfffffffff), rs2:x21(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x27, x5, x21, 0x145132fec1b0ee9f, 0xffffffbfffffffff, 0x0, x1, 24, x2)

aes64dsm_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0x3a103905c1b0ee9f), rs1:x4(0xffffff7fffffffff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x28, x4, x20, 0x3a103905c1b0ee9f, 0xffffff7fffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x4,signature_50_0)


aes64dsm_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0xb0ee9fc1c1b0ee9f), rs1:x3(0xfffffeffffffffff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x29, x3, x19, 0xb0ee9fc1c1b0ee9f, 0xfffffeffffffffff, 0x0, x4, 0, x5)

aes64dsm_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0xb0ee9fc1c1b0ee9f), rs1:x2(0xfffffdffffffffff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x30, x2, x18, 0xb0ee9fc1c1b0ee9f, 0xfffffdffffffffff, 0x0, x4, 8, x5)

aes64dsm_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0xb0ee9fc1c1b0ee9f), rs1:x1(0xfffffbffffffffff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x31, x1, x17, 0xb0ee9fc1c1b0ee9f, 0xfffffbffffffffff, 0x0, x4, 16, x5)

aes64dsm_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0xb0ee9fc1c1b0ee9f), rs1:x31(0xfffff7ffffffffff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x1, x31, x16, 0xb0ee9fc1c1b0ee9f, 0xfffff7ffffffffff, 0x0, x4, 24, x5)

aes64dsm_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0xb0ee9fc1c1b0ee9f), rs1:x30(0xffffefffffffffff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x2, x30, x15, 0xb0ee9fc1c1b0ee9f, 0xffffefffffffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_51_0)


aes64dsm_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0xb0ee9fc1c1b0ee9f), rs1:x29(0xffffdfffffffffff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x3, x29, x14, 0xb0ee9fc1c1b0ee9f, 0xffffdfffffffffff, 0x0, x1, 0, x2)

aes64dsm_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0xb0ee9fc1c1b0ee9f), rs1:x28(0xffffbfffffffffff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x4, x28, x13, 0xb0ee9fc1c1b0ee9f, 0xffffbfffffffffff, 0x0, x1, 8, x2)

aes64dsm_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0xb0ee9fc1c1b0ee9f), rs1:x27(0xffff7fffffffffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x5, x27, x12, 0xb0ee9fc1c1b0ee9f, 0xffff7fffffffffff, 0x0, x1, 16, x2)

aes64dsm_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0xb0ee9fc1c1b0ee9f), rs1:x26(0xfffeffffffffffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x6, x26, x11, 0xb0ee9fc1c1b0ee9f, 0xfffeffffffffffff, 0x0, x1, 24, x2)

aes64dsm_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0xb0ee9fc1c1b0ee9f), rs1:x25(0xfffdffffffffffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x7, x25, x10, 0xb0ee9fc1c1b0ee9f, 0xfffdffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_52_0)


aes64dsm_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0xb0ee9fc1c1b0ee9f), rs1:x24(0xfffbffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x8, x24, x9, 0xb0ee9fc1c1b0ee9f, 0xfffbffffffffffff, 0x0, x1, 0, x2)

aes64dsm_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0xb0ee9fc1c1b0ee9f), rs1:x23(0xfff7ffffffffffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x9, x23, x8, 0xb0ee9fc1c1b0ee9f, 0xfff7ffffffffffff, 0x0, x1, 8, x2)

aes64dsm_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0xb0ee9fc1c1b0ee9f), rs1:x22(0xffefffffffffffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x10, x22, x7, 0xb0ee9fc1c1b0ee9f, 0xffefffffffffffff, 0x0, x1, 16, x2)

aes64dsm_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0xb0ee9fc1c1b0ee9f), rs1:x21(0xffdfffffffffffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x11, x21, x6, 0xb0ee9fc1c1b0ee9f, 0xffdfffffffffffff, 0x0, x1, 24, x2)

aes64dsm_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0xb0ee9fc1c1b0ee9f), rs1:x20(0xffbfffffffffffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x12, x20, x5, 0xb0ee9fc1c1b0ee9f, 0xffbfffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x5,signature_53_0)


aes64dsm_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0xb0ee9fc1c1b0ee9f), rs1:x19(0xff7fffffffffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x13, x19, x4, 0xb0ee9fc1c1b0ee9f, 0xff7fffffffffffff, 0x0, x5, 0, x6)

aes64dsm_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0xb0ee9fc15986e54b), rs1:x18(0xfeffffffffffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x14, x18, x3, 0xb0ee9fc15986e54b, 0xfeffffffffffffff, 0x0, x5, 8, x6)

aes64dsm_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0xb0ee9fc1c4820f15), rs1:x17(0xfdffffffffffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x15, x17, x2, 0xb0ee9fc1c4820f15, 0xfdffffffffffffff, 0x0, x5, 16, x6)

aes64dsm_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0xb0ee9fc175627871), rs1:x16(0xfbffffffffffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x16, x16, x1, 0xb0ee9fc175627871, 0xfbffffffffffffff, 0x0, x5, 24, x6)

aes64dsm_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0xb0ee9fc1eeb32c2a), rs1:x15(0xf7ffffffffffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x17, x15, x31, 0xb0ee9fc1eeb32c2a, 0xf7ffffffffffffff, 0x0, x5, 32, x6)

    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_54_0)


aes64dsm_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0xb0ee9fc169746263), rs1:x14(0xefffffffffffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x18, x14, x30, 0xb0ee9fc169746263, 0xefffffffffffffff, 0x0, x1, 0, x2)

aes64dsm_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0xb0ee9fc17ce1fef1), rs1:x13(0xdfffffffffffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x19, x13, x29, 0xb0ee9fc17ce1fef1, 0xdfffffffffffffff, 0x0, x1, 8, x2)

aes64dsm_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0xb0ee9fc1fe145132), rs1:x12(0xbfffffffffffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x20, x12, x28, 0xb0ee9fc1fe145132, 0xbfffffffffffffff, 0x0, x1, 16, x2)

aes64dsm_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0xb0ee9fc1053a1039), rs1:x11(0x7fffffffffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x21, x11, x27, 0xb0ee9fc1053a1039, 0x7fffffffffffffff, 0x0, x1, 24, x2)

aes64dsm_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0xb0ee9fc1c1b0ee9f), rs1:x10(0xffffffffffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(aes64dsm, x22, x10, x26, 0xb0ee9fc1c1b0ee9f, 0xffffffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64dsm)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64dsm)

	RVTEST_SIGBASE(x1,signature_55_0)


aes64dsm_01_inst_270:
    // Test 270:  Test with rs1 == rs2
    // result rd:x23(0x0e7ced6cca1c96af), rs1:x25(0x10fd3dedadea5195), rs2:x25(0xdf7f3844121bcc23)
    TEST_RR_OP(aes64dsm, x23, x25, x25, 0x0e7ced6cca1c96af, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x1, 0, x2)

aes64dsm_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1), rs2:x24(0xf5adb41aa47d105b)
    TEST_RR_OP(aes64dsm, x0, x8, x24, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x1, 8, x2)

aes64dsm_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0xc97e46a8079984f6), rs1:x7(0xc9649f05a8e1a8bb), rs2:x0(0x82f6747f707af2c0)
    TEST_RR_OP(aes64dsm, x25, x7, x0, 0xc97e46a8079984f6, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x1, 16, x2)

aes64dsm_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0xb879a432c3b88855), rs1:x0(0x3541291848c99fcb), rs2:x22(0x73a92fd4e19bfbc3)
    TEST_RR_OP(aes64dsm, x26, x0, x22, 0xb879a432c3b88855, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x1, 24, x2)
	
#endif


RVTEST_CODE_END aes64dsm_01_code_end
RVTEST_CODE_BEGIN aes64ks2_02_init aes64ks2_02_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x6,signature_1_0)


aes64ks2_02_inst_0:
    // Test 0:  Test with dataset: sbox64
    // result rd:x1(0x00000000ffffffff), rs1:x31(0x0000000000000000), rs2:x16(0xffffffffffffffff)
    TEST_RR_OP(aes64ks2, x1, x31, x16, 0x00000000ffffffff, 0x0, 0xffffffffffffffff, x6, 0, x7)

aes64ks2_02_inst_1:
    // Test 1:  Test with dataset: sbox64
    // result rd:x2(0x01010101ffffffff), rs1:x30(0x0101010101010101), rs2:x15(0xfefefefefefefefe)
    TEST_RR_OP(aes64ks2, x2, x30, x15, 0x01010101ffffffff, 0x101010101010101, 0xfefefefefefefefe, x6, 8, x7)

aes64ks2_02_inst_2:
    // Test 2:  Test with dataset: sbox64
    // result rd:x3(0x02020202ffffffff), rs1:x29(0x0202020202020202), rs2:x14(0xfdfdfdfdfdfdfdfd)
    TEST_RR_OP(aes64ks2, x3, x29, x14, 0x02020202ffffffff, 0x202020202020202, 0xfdfdfdfdfdfdfdfd, x6, 16, x7)

aes64ks2_02_inst_3:
    // Test 3:  Test with dataset: sbox64
    // result rd:x4(0x03030303ffffffff), rs1:x28(0x0303030303030303), rs2:x13(0xfcfcfcfcfcfcfcfc)
    TEST_RR_OP(aes64ks2, x4, x28, x13, 0x03030303ffffffff, 0x303030303030303, 0xfcfcfcfcfcfcfcfc, x6, 24, x7)

aes64ks2_02_inst_4:
    // Test 4:  Test with dataset: sbox64
    // result rd:x5(0x04040404ffffffff), rs1:x27(0x0404040404040404), rs2:x12(0xfbfbfbfbfbfbfbfb)
    TEST_RR_OP(aes64ks2, x5, x27, x12, 0x04040404ffffffff, 0x404040404040404, 0xfbfbfbfbfbfbfbfb, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_2_0)


aes64ks2_02_inst_5:
    // Test 5:  Test with dataset: sbox64
    // result rd:x6(0x05050505ffffffff), rs1:x26(0x0505050505050505), rs2:x11(0xfafafafafafafafa)
    TEST_RR_OP(aes64ks2, x6, x26, x11, 0x05050505ffffffff, 0x505050505050505, 0xfafafafafafafafa, x1, 0, x2)

aes64ks2_02_inst_6:
    // Test 6:  Test with dataset: sbox64
    // result rd:x7(0x06060606ffffffff), rs1:x25(0x0606060606060606), rs2:x10(0xf9f9f9f9f9f9f9f9)
    TEST_RR_OP(aes64ks2, x7, x25, x10, 0x06060606ffffffff, 0x606060606060606, 0xf9f9f9f9f9f9f9f9, x1, 8, x2)

aes64ks2_02_inst_7:
    // Test 7:  Test with dataset: sbox64
    // result rd:x8(0x07070707ffffffff), rs1:x24(0x0707070707070707), rs2:x9(0xf8f8f8f8f8f8f8f8)
    TEST_RR_OP(aes64ks2, x8, x24, x9, 0x07070707ffffffff, 0x707070707070707, 0xf8f8f8f8f8f8f8f8, x1, 16, x2)

aes64ks2_02_inst_8:
    // Test 8:  Test with dataset: sbox64
    // result rd:x9(0x08080808ffffffff), rs1:x23(0x0808080808080808), rs2:x8(0xf7f7f7f7f7f7f7f7)
    TEST_RR_OP(aes64ks2, x9, x23, x8, 0x08080808ffffffff, 0x808080808080808, 0xf7f7f7f7f7f7f7f7, x1, 24, x2)

aes64ks2_02_inst_9:
    // Test 9:  Test with dataset: sbox64
    // result rd:x10(0x09090909ffffffff), rs1:x22(0x0909090909090909), rs2:x7(0xf6f6f6f6f6f6f6f6)
    TEST_RR_OP(aes64ks2, x10, x22, x7, 0x09090909ffffffff, 0x909090909090909, 0xf6f6f6f6f6f6f6f6, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_3_0)


aes64ks2_02_inst_10:
    // Test 10:  Test with dataset: sbox64
    // result rd:x11(0x0a0a0a0affffffff), rs1:x21(0x0a0a0a0a0a0a0a0a), rs2:x6(0xf5f5f5f5f5f5f5f5)
    TEST_RR_OP(aes64ks2, x11, x21, x6, 0x0a0a0a0affffffff, 0xa0a0a0a0a0a0a0a, 0xf5f5f5f5f5f5f5f5, x1, 0, x7)

aes64ks2_02_inst_11:
    // Test 11:  Test with dataset: sbox64
    // result rd:x12(0x0b0b0b0bffffffff), rs1:x20(0x0b0b0b0b0b0b0b0b), rs2:x5(0xf4f4f4f4f4f4f4f4)
    TEST_RR_OP(aes64ks2, x12, x20, x5, 0x0b0b0b0bffffffff, 0xb0b0b0b0b0b0b0b, 0xf4f4f4f4f4f4f4f4, x1, 8, x7)

aes64ks2_02_inst_12:
    // Test 12:  Test with dataset: sbox64
    // result rd:x13(0x0c0c0c0cffffffff), rs1:x19(0x0c0c0c0c0c0c0c0c), rs2:x4(0xf3f3f3f3f3f3f3f3)
    TEST_RR_OP(aes64ks2, x13, x19, x4, 0x0c0c0c0cffffffff, 0xc0c0c0c0c0c0c0c, 0xf3f3f3f3f3f3f3f3, x1, 16, x7)

aes64ks2_02_inst_13:
    // Test 13:  Test with dataset: sbox64
    // result rd:x14(0x0d0d0d0dffffffff), rs1:x18(0x0d0d0d0d0d0d0d0d), rs2:x3(0xf2f2f2f2f2f2f2f2)
    TEST_RR_OP(aes64ks2, x14, x18, x3, 0x0d0d0d0dffffffff, 0xd0d0d0d0d0d0d0d, 0xf2f2f2f2f2f2f2f2, x1, 24, x7)

aes64ks2_02_inst_14:
    // Test 14:  Test with dataset: sbox64
    // result rd:x15(0x0e0e0e0effffffff), rs1:x17(0x0e0e0e0e0e0e0e0e), rs2:x2(0xf1f1f1f1f1f1f1f1)
    TEST_RR_OP(aes64ks2, x15, x17, x2, 0x0e0e0e0effffffff, 0xe0e0e0e0e0e0e0e, 0xf1f1f1f1f1f1f1f1, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x2,signature_4_0)


aes64ks2_02_inst_15:
    // Test 15:  Test with dataset: sbox64
    // result rd:x16(0x0f0f0f0fffffffff), rs1:x16(0x0f0f0f0f0f0f0f0f), rs2:x1(0xf0f0f0f0f0f0f0f0)
    TEST_RR_OP(aes64ks2, x16, x16, x1, 0x0f0f0f0fffffffff, 0xf0f0f0f0f0f0f0f, 0xf0f0f0f0f0f0f0f0, x2, 0, x3)

aes64ks2_02_inst_16:
    // Test 16:  Test with dataset: sbox64
    // result rd:x17(0x10101010ffffffff), rs1:x15(0x1010101010101010), rs2:x31(0xefefefefefefefef)
    TEST_RR_OP(aes64ks2, x17, x15, x31, 0x10101010ffffffff, 0x1010101010101010, 0xefefefefefefefef, x2, 8, x3)

aes64ks2_02_inst_17:
    // Test 17:  Test with dataset: sbox64
    // result rd:x18(0x11111111ffffffff), rs1:x14(0x1111111111111111), rs2:x30(0xeeeeeeeeeeeeeeee)
    TEST_RR_OP(aes64ks2, x18, x14, x30, 0x11111111ffffffff, 0x1111111111111111, 0xeeeeeeeeeeeeeeee, x2, 16, x3)

aes64ks2_02_inst_18:
    // Test 18:  Test with dataset: sbox64
    // result rd:x19(0x12121212ffffffff), rs1:x13(0x1212121212121212), rs2:x29(0xedededededededed)
    TEST_RR_OP(aes64ks2, x19, x13, x29, 0x12121212ffffffff, 0x1212121212121212, 0xedededededededed, x2, 24, x3)

aes64ks2_02_inst_19:
    // Test 19:  Test with dataset: sbox64
    // result rd:x20(0x13131313ffffffff), rs1:x12(0x1313131313131313), rs2:x28(0xecececececececec)
    TEST_RR_OP(aes64ks2, x20, x12, x28, 0x13131313ffffffff, 0x1313131313131313, 0xecececececececec, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_5_0)


aes64ks2_02_inst_20:
    // Test 20:  Test with dataset: sbox64
    // result rd:x21(0x14141414ffffffff), rs1:x11(0x1414141414141414), rs2:x27(0xebebebebebebebeb)
    TEST_RR_OP(aes64ks2, x21, x11, x27, 0x14141414ffffffff, 0x1414141414141414, 0xebebebebebebebeb, x1, 0, x2)

aes64ks2_02_inst_21:
    // Test 21:  Test with dataset: sbox64
    // result rd:x22(0x15151515ffffffff), rs1:x10(0x1515151515151515), rs2:x26(0xeaeaeaeaeaeaeaea)
    TEST_RR_OP(aes64ks2, x22, x10, x26, 0x15151515ffffffff, 0x1515151515151515, 0xeaeaeaeaeaeaeaea, x1, 8, x2)

aes64ks2_02_inst_22:
    // Test 22:  Test with dataset: sbox64
    // result rd:x23(0x16161616ffffffff), rs1:x9(0x1616161616161616), rs2:x25(0xe9e9e9e9e9e9e9e9)
    TEST_RR_OP(aes64ks2, x23, x9, x25, 0x16161616ffffffff, 0x1616161616161616, 0xe9e9e9e9e9e9e9e9, x1, 16, x2)

aes64ks2_02_inst_23:
    // Test 23:  Test with dataset: sbox64
    // result rd:x24(0x17171717ffffffff), rs1:x8(0x1717171717171717), rs2:x24(0xe8e8e8e8e8e8e8e8)
    TEST_RR_OP(aes64ks2, x24, x8, x24, 0x17171717ffffffff, 0x1717171717171717, 0xe8e8e8e8e8e8e8e8, x1, 24, x2)

aes64ks2_02_inst_24:
    // Test 24:  Test with dataset: sbox64
    // result rd:x25(0x18181818ffffffff), rs1:x7(0x1818181818181818), rs2:x23(0xe7e7e7e7e7e7e7e7)
    TEST_RR_OP(aes64ks2, x25, x7, x23, 0x18181818ffffffff, 0x1818181818181818, 0xe7e7e7e7e7e7e7e7, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_6_0)


aes64ks2_02_inst_25:
    // Test 25:  Test with dataset: sbox64
    // result rd:x26(0x19191919ffffffff), rs1:x6(0x1919191919191919), rs2:x22(0xe6e6e6e6e6e6e6e6)
    TEST_RR_OP(aes64ks2, x26, x6, x22, 0x19191919ffffffff, 0x1919191919191919, 0xe6e6e6e6e6e6e6e6, x1, 0, x7)

aes64ks2_02_inst_26:
    // Test 26:  Test with dataset: sbox64
    // result rd:x27(0x1a1a1a1affffffff), rs1:x5(0x1a1a1a1a1a1a1a1a), rs2:x21(0xe5e5e5e5e5e5e5e5)
    TEST_RR_OP(aes64ks2, x27, x5, x21, 0x1a1a1a1affffffff, 0x1a1a1a1a1a1a1a1a, 0xe5e5e5e5e5e5e5e5, x1, 8, x7)

aes64ks2_02_inst_27:
    // Test 27:  Test with dataset: sbox64
    // result rd:x28(0x1b1b1b1bffffffff), rs1:x4(0x1b1b1b1b1b1b1b1b), rs2:x20(0xe4e4e4e4e4e4e4e4)
    TEST_RR_OP(aes64ks2, x28, x4, x20, 0x1b1b1b1bffffffff, 0x1b1b1b1b1b1b1b1b, 0xe4e4e4e4e4e4e4e4, x1, 16, x7)

aes64ks2_02_inst_28:
    // Test 28:  Test with dataset: sbox64
    // result rd:x29(0x1c1c1c1cffffffff), rs1:x3(0x1c1c1c1c1c1c1c1c), rs2:x19(0xe3e3e3e3e3e3e3e3)
    TEST_RR_OP(aes64ks2, x29, x3, x19, 0x1c1c1c1cffffffff, 0x1c1c1c1c1c1c1c1c, 0xe3e3e3e3e3e3e3e3, x1, 24, x7)

aes64ks2_02_inst_29:
    // Test 29:  Test with dataset: sbox64
    // result rd:x30(0x1d1d1d1dffffffff), rs1:x2(0x1d1d1d1d1d1d1d1d), rs2:x18(0xe2e2e2e2e2e2e2e2)
    TEST_RR_OP(aes64ks2, x30, x2, x18, 0x1d1d1d1dffffffff, 0x1d1d1d1d1d1d1d1d, 0xe2e2e2e2e2e2e2e2, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x5,signature_7_0)


aes64ks2_02_inst_30:
    // Test 30:  Test with dataset: sbox64
    // result rd:x31(0x1e1e1e1effffffff), rs1:x1(0x1e1e1e1e1e1e1e1e), rs2:x17(0xe1e1e1e1e1e1e1e1)
    TEST_RR_OP(aes64ks2, x31, x1, x17, 0x1e1e1e1effffffff, 0x1e1e1e1e1e1e1e1e, 0xe1e1e1e1e1e1e1e1, x5, 0, x6)

aes64ks2_02_inst_31:
    // Test 31:  Test with dataset: sbox64
    // result rd:x1(0x1f1f1f1fffffffff), rs1:x31(0x1f1f1f1f1f1f1f1f), rs2:x16(0xe0e0e0e0e0e0e0e0)
    TEST_RR_OP(aes64ks2, x1, x31, x16, 0x1f1f1f1fffffffff, 0x1f1f1f1f1f1f1f1f, 0xe0e0e0e0e0e0e0e0, x5, 8, x6)

aes64ks2_02_inst_32:
    // Test 32:  Test with dataset: sbox64
    // result rd:x2(0x20202020ffffffff), rs1:x30(0x2020202020202020), rs2:x15(0xdfdfdfdfdfdfdfdf)
    TEST_RR_OP(aes64ks2, x2, x30, x15, 0x20202020ffffffff, 0x2020202020202020, 0xdfdfdfdfdfdfdfdf, x5, 16, x6)

aes64ks2_02_inst_33:
    // Test 33:  Test with dataset: sbox64
    // result rd:x3(0x21212121ffffffff), rs1:x29(0x2121212121212121), rs2:x14(0xdededededededede)
    TEST_RR_OP(aes64ks2, x3, x29, x14, 0x21212121ffffffff, 0x2121212121212121, 0xdededededededede, x5, 24, x6)

aes64ks2_02_inst_34:
    // Test 34:  Test with dataset: sbox64
    // result rd:x4(0x22222222ffffffff), rs1:x28(0x2222222222222222), rs2:x13(0xdddddddddddddddd)
    TEST_RR_OP(aes64ks2, x4, x28, x13, 0x22222222ffffffff, 0x2222222222222222, 0xdddddddddddddddd, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_8_0)


aes64ks2_02_inst_35:
    // Test 35:  Test with dataset: sbox64
    // result rd:x5(0x23232323ffffffff), rs1:x27(0x2323232323232323), rs2:x12(0xdcdcdcdcdcdcdcdc)
    TEST_RR_OP(aes64ks2, x5, x27, x12, 0x23232323ffffffff, 0x2323232323232323, 0xdcdcdcdcdcdcdcdc, x1, 0, x2)

aes64ks2_02_inst_36:
    // Test 36:  Test with dataset: sbox64
    // result rd:x6(0x24242424ffffffff), rs1:x26(0x2424242424242424), rs2:x11(0xdbdbdbdbdbdbdbdb)
    TEST_RR_OP(aes64ks2, x6, x26, x11, 0x24242424ffffffff, 0x2424242424242424, 0xdbdbdbdbdbdbdbdb, x1, 8, x2)

aes64ks2_02_inst_37:
    // Test 37:  Test with dataset: sbox64
    // result rd:x7(0x25252525ffffffff), rs1:x25(0x2525252525252525), rs2:x10(0xdadadadadadadada)
    TEST_RR_OP(aes64ks2, x7, x25, x10, 0x25252525ffffffff, 0x2525252525252525, 0xdadadadadadadada, x1, 16, x2)

aes64ks2_02_inst_38:
    // Test 38:  Test with dataset: sbox64
    // result rd:x8(0x26262626ffffffff), rs1:x24(0x2626262626262626), rs2:x9(0xd9d9d9d9d9d9d9d9)
    TEST_RR_OP(aes64ks2, x8, x24, x9, 0x26262626ffffffff, 0x2626262626262626, 0xd9d9d9d9d9d9d9d9, x1, 24, x2)

aes64ks2_02_inst_39:
    // Test 39:  Test with dataset: sbox64
    // result rd:x9(0x27272727ffffffff), rs1:x23(0x2727272727272727), rs2:x8(0xd8d8d8d8d8d8d8d8)
    TEST_RR_OP(aes64ks2, x9, x23, x8, 0x27272727ffffffff, 0x2727272727272727, 0xd8d8d8d8d8d8d8d8, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_9_0)


aes64ks2_02_inst_40:
    // Test 40:  Test with dataset: sbox64
    // result rd:x10(0x28282828ffffffff), rs1:x22(0x2828282828282828), rs2:x7(0xd7d7d7d7d7d7d7d7)
    TEST_RR_OP(aes64ks2, x10, x22, x7, 0x28282828ffffffff, 0x2828282828282828, 0xd7d7d7d7d7d7d7d7, x1, 0, x2)

aes64ks2_02_inst_41:
    // Test 41:  Test with dataset: sbox64
    // result rd:x11(0x29292929ffffffff), rs1:x21(0x2929292929292929), rs2:x6(0xd6d6d6d6d6d6d6d6)
    TEST_RR_OP(aes64ks2, x11, x21, x6, 0x29292929ffffffff, 0x2929292929292929, 0xd6d6d6d6d6d6d6d6, x1, 8, x2)

aes64ks2_02_inst_42:
    // Test 42:  Test with dataset: sbox64
    // result rd:x12(0x2a2a2a2affffffff), rs1:x20(0x2a2a2a2a2a2a2a2a), rs2:x5(0xd5d5d5d5d5d5d5d5)
    TEST_RR_OP(aes64ks2, x12, x20, x5, 0x2a2a2a2affffffff, 0x2a2a2a2a2a2a2a2a, 0xd5d5d5d5d5d5d5d5, x1, 16, x2)

aes64ks2_02_inst_43:
    // Test 43:  Test with dataset: sbox64
    // result rd:x13(0x2b2b2b2bffffffff), rs1:x19(0x2b2b2b2b2b2b2b2b), rs2:x4(0xd4d4d4d4d4d4d4d4)
    TEST_RR_OP(aes64ks2, x13, x19, x4, 0x2b2b2b2bffffffff, 0x2b2b2b2b2b2b2b2b, 0xd4d4d4d4d4d4d4d4, x1, 24, x2)

aes64ks2_02_inst_44:
    // Test 44:  Test with dataset: sbox64
    // result rd:x14(0x2c2c2c2cffffffff), rs1:x18(0x2c2c2c2c2c2c2c2c), rs2:x3(0xd3d3d3d3d3d3d3d3)
    TEST_RR_OP(aes64ks2, x14, x18, x3, 0x2c2c2c2cffffffff, 0x2c2c2c2c2c2c2c2c, 0xd3d3d3d3d3d3d3d3, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x3,signature_10_0)


aes64ks2_02_inst_45:
    // Test 45:  Test with dataset: sbox64
    // result rd:x15(0x2d2d2d2dffffffff), rs1:x17(0x2d2d2d2d2d2d2d2d), rs2:x2(0xd2d2d2d2d2d2d2d2)
    TEST_RR_OP(aes64ks2, x15, x17, x2, 0x2d2d2d2dffffffff, 0x2d2d2d2d2d2d2d2d, 0xd2d2d2d2d2d2d2d2, x3, 0, x4)

aes64ks2_02_inst_46:
    // Test 46:  Test with dataset: sbox64
    // result rd:x16(0x2e2e2e2effffffff), rs1:x16(0x2e2e2e2e2e2e2e2e), rs2:x1(0xd1d1d1d1d1d1d1d1)
    TEST_RR_OP(aes64ks2, x16, x16, x1, 0x2e2e2e2effffffff, 0x2e2e2e2e2e2e2e2e, 0xd1d1d1d1d1d1d1d1, x3, 8, x4)

aes64ks2_02_inst_47:
    // Test 47:  Test with dataset: sbox64
    // result rd:x17(0x2f2f2f2fffffffff), rs1:x15(0x2f2f2f2f2f2f2f2f), rs2:x31(0xd0d0d0d0d0d0d0d0)
    TEST_RR_OP(aes64ks2, x17, x15, x31, 0x2f2f2f2fffffffff, 0x2f2f2f2f2f2f2f2f, 0xd0d0d0d0d0d0d0d0, x3, 16, x4)

aes64ks2_02_inst_48:
    // Test 48:  Test with dataset: sbox64
    // result rd:x18(0x30303030ffffffff), rs1:x14(0x3030303030303030), rs2:x30(0xcfcfcfcfcfcfcfcf)
    TEST_RR_OP(aes64ks2, x18, x14, x30, 0x30303030ffffffff, 0x3030303030303030, 0xcfcfcfcfcfcfcfcf, x3, 24, x4)

aes64ks2_02_inst_49:
    // Test 49:  Test with dataset: sbox64
    // result rd:x19(0x31313131ffffffff), rs1:x13(0x3131313131313131), rs2:x29(0xcececececececece)
    TEST_RR_OP(aes64ks2, x19, x13, x29, 0x31313131ffffffff, 0x3131313131313131, 0xcececececececece, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_11_0)


aes64ks2_02_inst_50:
    // Test 50:  Test with dataset: sbox64
    // result rd:x20(0x32323232ffffffff), rs1:x12(0x3232323232323232), rs2:x28(0xcdcdcdcdcdcdcdcd)
    TEST_RR_OP(aes64ks2, x20, x12, x28, 0x32323232ffffffff, 0x3232323232323232, 0xcdcdcdcdcdcdcdcd, x1, 0, x2)

aes64ks2_02_inst_51:
    // Test 51:  Test with dataset: sbox64
    // result rd:x21(0x33333333ffffffff), rs1:x11(0x3333333333333333), rs2:x27(0xcccccccccccccccc)
    TEST_RR_OP(aes64ks2, x21, x11, x27, 0x33333333ffffffff, 0x3333333333333333, 0xcccccccccccccccc, x1, 8, x2)

aes64ks2_02_inst_52:
    // Test 52:  Test with dataset: sbox64
    // result rd:x22(0x34343434ffffffff), rs1:x10(0x3434343434343434), rs2:x26(0xcbcbcbcbcbcbcbcb)
    TEST_RR_OP(aes64ks2, x22, x10, x26, 0x34343434ffffffff, 0x3434343434343434, 0xcbcbcbcbcbcbcbcb, x1, 16, x2)

aes64ks2_02_inst_53:
    // Test 53:  Test with dataset: sbox64
    // result rd:x23(0x35353535ffffffff), rs1:x9(0x3535353535353535), rs2:x25(0xcacacacacacacaca)
    TEST_RR_OP(aes64ks2, x23, x9, x25, 0x35353535ffffffff, 0x3535353535353535, 0xcacacacacacacaca, x1, 24, x2)

aes64ks2_02_inst_54:
    // Test 54:  Test with dataset: sbox64
    // result rd:x24(0x36363636ffffffff), rs1:x8(0x3636363636363636), rs2:x24(0xc9c9c9c9c9c9c9c9)
    TEST_RR_OP(aes64ks2, x24, x8, x24, 0x36363636ffffffff, 0x3636363636363636, 0xc9c9c9c9c9c9c9c9, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_12_0)


aes64ks2_02_inst_55:
    // Test 55:  Test with dataset: sbox64
    // result rd:x25(0x37373737ffffffff), rs1:x7(0x3737373737373737), rs2:x23(0xc8c8c8c8c8c8c8c8)
    TEST_RR_OP(aes64ks2, x25, x7, x23, 0x37373737ffffffff, 0x3737373737373737, 0xc8c8c8c8c8c8c8c8, x1, 0, x2)

aes64ks2_02_inst_56:
    // Test 56:  Test with dataset: sbox64
    // result rd:x26(0x38383838ffffffff), rs1:x6(0x3838383838383838), rs2:x22(0xc7c7c7c7c7c7c7c7)
    TEST_RR_OP(aes64ks2, x26, x6, x22, 0x38383838ffffffff, 0x3838383838383838, 0xc7c7c7c7c7c7c7c7, x1, 8, x2)

aes64ks2_02_inst_57:
    // Test 57:  Test with dataset: sbox64
    // result rd:x27(0x39393939ffffffff), rs1:x5(0x3939393939393939), rs2:x21(0xc6c6c6c6c6c6c6c6)
    TEST_RR_OP(aes64ks2, x27, x5, x21, 0x39393939ffffffff, 0x3939393939393939, 0xc6c6c6c6c6c6c6c6, x1, 16, x2)

aes64ks2_02_inst_58:
    // Test 58:  Test with dataset: sbox64
    // result rd:x28(0x3a3a3a3affffffff), rs1:x4(0x3a3a3a3a3a3a3a3a), rs2:x20(0xc5c5c5c5c5c5c5c5)
    TEST_RR_OP(aes64ks2, x28, x4, x20, 0x3a3a3a3affffffff, 0x3a3a3a3a3a3a3a3a, 0xc5c5c5c5c5c5c5c5, x1, 24, x2)

aes64ks2_02_inst_59:
    // Test 59:  Test with dataset: sbox64
    // result rd:x29(0x3b3b3b3bffffffff), rs1:x3(0x3b3b3b3b3b3b3b3b), rs2:x19(0xc4c4c4c4c4c4c4c4)
    TEST_RR_OP(aes64ks2, x29, x3, x19, 0x3b3b3b3bffffffff, 0x3b3b3b3b3b3b3b3b, 0xc4c4c4c4c4c4c4c4, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x4,signature_13_0)


aes64ks2_02_inst_60:
    // Test 60:  Test with dataset: sbox64
    // result rd:x30(0x3c3c3c3cffffffff), rs1:x2(0x3c3c3c3c3c3c3c3c), rs2:x18(0xc3c3c3c3c3c3c3c3)
    TEST_RR_OP(aes64ks2, x30, x2, x18, 0x3c3c3c3cffffffff, 0x3c3c3c3c3c3c3c3c, 0xc3c3c3c3c3c3c3c3, x4, 0, x5)

aes64ks2_02_inst_61:
    // Test 61:  Test with dataset: sbox64
    // result rd:x31(0x3d3d3d3dffffffff), rs1:x1(0x3d3d3d3d3d3d3d3d), rs2:x17(0xc2c2c2c2c2c2c2c2)
    TEST_RR_OP(aes64ks2, x31, x1, x17, 0x3d3d3d3dffffffff, 0x3d3d3d3d3d3d3d3d, 0xc2c2c2c2c2c2c2c2, x4, 8, x5)

aes64ks2_02_inst_62:
    // Test 62:  Test with dataset: sbox64
    // result rd:x1(0x3e3e3e3effffffff), rs1:x31(0x3e3e3e3e3e3e3e3e), rs2:x16(0xc1c1c1c1c1c1c1c1)
    TEST_RR_OP(aes64ks2, x1, x31, x16, 0x3e3e3e3effffffff, 0x3e3e3e3e3e3e3e3e, 0xc1c1c1c1c1c1c1c1, x4, 16, x5)

aes64ks2_02_inst_63:
    // Test 63:  Test with dataset: sbox64
    // result rd:x2(0x3f3f3f3fffffffff), rs1:x30(0x3f3f3f3f3f3f3f3f), rs2:x15(0xc0c0c0c0c0c0c0c0)
    TEST_RR_OP(aes64ks2, x2, x30, x15, 0x3f3f3f3fffffffff, 0x3f3f3f3f3f3f3f3f, 0xc0c0c0c0c0c0c0c0, x4, 24, x5)

aes64ks2_02_inst_64:
    // Test 64:  Test with dataset: sbox64
    // result rd:x3(0x40404040ffffffff), rs1:x29(0x4040404040404040), rs2:x14(0xbfbfbfbfbfbfbfbf)
    TEST_RR_OP(aes64ks2, x3, x29, x14, 0x40404040ffffffff, 0x4040404040404040, 0xbfbfbfbfbfbfbfbf, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_14_0)


aes64ks2_02_inst_65:
    // Test 65:  Test with dataset: sbox64
    // result rd:x4(0x41414141ffffffff), rs1:x28(0x4141414141414141), rs2:x13(0xbebebebebebebebe)
    TEST_RR_OP(aes64ks2, x4, x28, x13, 0x41414141ffffffff, 0x4141414141414141, 0xbebebebebebebebe, x1, 0, x2)

aes64ks2_02_inst_66:
    // Test 66:  Test with dataset: sbox64
    // result rd:x5(0x42424242ffffffff), rs1:x27(0x4242424242424242), rs2:x12(0xbdbdbdbdbdbdbdbd)
    TEST_RR_OP(aes64ks2, x5, x27, x12, 0x42424242ffffffff, 0x4242424242424242, 0xbdbdbdbdbdbdbdbd, x1, 8, x2)

aes64ks2_02_inst_67:
    // Test 67:  Test with dataset: sbox64
    // result rd:x6(0x43434343ffffffff), rs1:x26(0x4343434343434343), rs2:x11(0xbcbcbcbcbcbcbcbc)
    TEST_RR_OP(aes64ks2, x6, x26, x11, 0x43434343ffffffff, 0x4343434343434343, 0xbcbcbcbcbcbcbcbc, x1, 16, x2)

aes64ks2_02_inst_68:
    // Test 68:  Test with dataset: sbox64
    // result rd:x7(0x44444444ffffffff), rs1:x25(0x4444444444444444), rs2:x10(0xbbbbbbbbbbbbbbbb)
    TEST_RR_OP(aes64ks2, x7, x25, x10, 0x44444444ffffffff, 0x4444444444444444, 0xbbbbbbbbbbbbbbbb, x1, 24, x2)

aes64ks2_02_inst_69:
    // Test 69:  Test with dataset: sbox64
    // result rd:x8(0x45454545ffffffff), rs1:x24(0x4545454545454545), rs2:x9(0xbabababababababa)
    TEST_RR_OP(aes64ks2, x8, x24, x9, 0x45454545ffffffff, 0x4545454545454545, 0xbabababababababa, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_15_0)


aes64ks2_02_inst_70:
    // Test 70:  Test with dataset: sbox64
    // result rd:x9(0x46464646ffffffff), rs1:x23(0x4646464646464646), rs2:x8(0xb9b9b9b9b9b9b9b9)
    TEST_RR_OP(aes64ks2, x9, x23, x8, 0x46464646ffffffff, 0x4646464646464646, 0xb9b9b9b9b9b9b9b9, x1, 0, x2)

aes64ks2_02_inst_71:
    // Test 71:  Test with dataset: sbox64
    // result rd:x10(0x47474747ffffffff), rs1:x22(0x4747474747474747), rs2:x7(0xb8b8b8b8b8b8b8b8)
    TEST_RR_OP(aes64ks2, x10, x22, x7, 0x47474747ffffffff, 0x4747474747474747, 0xb8b8b8b8b8b8b8b8, x1, 8, x2)

aes64ks2_02_inst_72:
    // Test 72:  Test with dataset: sbox64
    // result rd:x11(0x48484848ffffffff), rs1:x21(0x4848484848484848), rs2:x6(0xb7b7b7b7b7b7b7b7)
    TEST_RR_OP(aes64ks2, x11, x21, x6, 0x48484848ffffffff, 0x4848484848484848, 0xb7b7b7b7b7b7b7b7, x1, 16, x2)

aes64ks2_02_inst_73:
    // Test 73:  Test with dataset: sbox64
    // result rd:x12(0x49494949ffffffff), rs1:x20(0x4949494949494949), rs2:x5(0xb6b6b6b6b6b6b6b6)
    TEST_RR_OP(aes64ks2, x12, x20, x5, 0x49494949ffffffff, 0x4949494949494949, 0xb6b6b6b6b6b6b6b6, x1, 24, x2)

aes64ks2_02_inst_74:
    // Test 74:  Test with dataset: sbox64
    // result rd:x13(0x4a4a4a4affffffff), rs1:x19(0x4a4a4a4a4a4a4a4a), rs2:x4(0xb5b5b5b5b5b5b5b5)
    TEST_RR_OP(aes64ks2, x13, x19, x4, 0x4a4a4a4affffffff, 0x4a4a4a4a4a4a4a4a, 0xb5b5b5b5b5b5b5b5, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x4,signature_16_0)


aes64ks2_02_inst_75:
    // Test 75:  Test with dataset: sbox64
    // result rd:x14(0x4b4b4b4bffffffff), rs1:x18(0x4b4b4b4b4b4b4b4b), rs2:x3(0xb4b4b4b4b4b4b4b4)
    TEST_RR_OP(aes64ks2, x14, x18, x3, 0x4b4b4b4bffffffff, 0x4b4b4b4b4b4b4b4b, 0xb4b4b4b4b4b4b4b4, x4, 0, x5)

aes64ks2_02_inst_76:
    // Test 76:  Test with dataset: sbox64
    // result rd:x15(0x4c4c4c4cffffffff), rs1:x17(0x4c4c4c4c4c4c4c4c), rs2:x2(0xb3b3b3b3b3b3b3b3)
    TEST_RR_OP(aes64ks2, x15, x17, x2, 0x4c4c4c4cffffffff, 0x4c4c4c4c4c4c4c4c, 0xb3b3b3b3b3b3b3b3, x4, 8, x5)

aes64ks2_02_inst_77:
    // Test 77:  Test with dataset: sbox64
    // result rd:x16(0x4d4d4d4dffffffff), rs1:x16(0x4d4d4d4d4d4d4d4d), rs2:x1(0xb2b2b2b2b2b2b2b2)
    TEST_RR_OP(aes64ks2, x16, x16, x1, 0x4d4d4d4dffffffff, 0x4d4d4d4d4d4d4d4d, 0xb2b2b2b2b2b2b2b2, x4, 16, x5)

aes64ks2_02_inst_78:
    // Test 78:  Test with dataset: sbox64
    // result rd:x17(0x4e4e4e4effffffff), rs1:x15(0x4e4e4e4e4e4e4e4e), rs2:x31(0xb1b1b1b1b1b1b1b1)
    TEST_RR_OP(aes64ks2, x17, x15, x31, 0x4e4e4e4effffffff, 0x4e4e4e4e4e4e4e4e, 0xb1b1b1b1b1b1b1b1, x4, 24, x5)

aes64ks2_02_inst_79:
    // Test 79:  Test with dataset: sbox64
    // result rd:x18(0x4f4f4f4fffffffff), rs1:x14(0x4f4f4f4f4f4f4f4f), rs2:x30(0xb0b0b0b0b0b0b0b0)
    TEST_RR_OP(aes64ks2, x18, x14, x30, 0x4f4f4f4fffffffff, 0x4f4f4f4f4f4f4f4f, 0xb0b0b0b0b0b0b0b0, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_17_0)


aes64ks2_02_inst_80:
    // Test 80:  Test with dataset: sbox64
    // result rd:x19(0x50505050ffffffff), rs1:x13(0x5050505050505050), rs2:x29(0xafafafafafafafaf)
    TEST_RR_OP(aes64ks2, x19, x13, x29, 0x50505050ffffffff, 0x5050505050505050, 0xafafafafafafafaf, x1, 0, x2)

aes64ks2_02_inst_81:
    // Test 81:  Test with dataset: sbox64
    // result rd:x20(0x51515151ffffffff), rs1:x12(0x5151515151515151), rs2:x28(0xaeaeaeaeaeaeaeae)
    TEST_RR_OP(aes64ks2, x20, x12, x28, 0x51515151ffffffff, 0x5151515151515151, 0xaeaeaeaeaeaeaeae, x1, 8, x2)

aes64ks2_02_inst_82:
    // Test 82:  Test with dataset: sbox64
    // result rd:x21(0x52525252ffffffff), rs1:x11(0x5252525252525252), rs2:x27(0xadadadadadadadad)
    TEST_RR_OP(aes64ks2, x21, x11, x27, 0x52525252ffffffff, 0x5252525252525252, 0xadadadadadadadad, x1, 16, x2)

aes64ks2_02_inst_83:
    // Test 83:  Test with dataset: sbox64
    // result rd:x22(0x53535353ffffffff), rs1:x10(0x5353535353535353), rs2:x26(0xacacacacacacacac)
    TEST_RR_OP(aes64ks2, x22, x10, x26, 0x53535353ffffffff, 0x5353535353535353, 0xacacacacacacacac, x1, 24, x2)

aes64ks2_02_inst_84:
    // Test 84:  Test with dataset: sbox64
    // result rd:x23(0x54545454ffffffff), rs1:x9(0x5454545454545454), rs2:x25(0xabababababababab)
    TEST_RR_OP(aes64ks2, x23, x9, x25, 0x54545454ffffffff, 0x5454545454545454, 0xabababababababab, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_18_0)


aes64ks2_02_inst_85:
    // Test 85:  Test with dataset: sbox64
    // result rd:x24(0x55555555ffffffff), rs1:x8(0x5555555555555555), rs2:x24(0xaaaaaaaaaaaaaaaa)
    TEST_RR_OP(aes64ks2, x24, x8, x24, 0x55555555ffffffff, 0x5555555555555555, 0xaaaaaaaaaaaaaaaa, x1, 0, x2)

aes64ks2_02_inst_86:
    // Test 86:  Test with dataset: sbox64
    // result rd:x25(0x56565656ffffffff), rs1:x7(0x5656565656565656), rs2:x23(0xa9a9a9a9a9a9a9a9)
    TEST_RR_OP(aes64ks2, x25, x7, x23, 0x56565656ffffffff, 0x5656565656565656, 0xa9a9a9a9a9a9a9a9, x1, 8, x2)

aes64ks2_02_inst_87:
    // Test 87:  Test with dataset: sbox64
    // result rd:x26(0x57575757ffffffff), rs1:x6(0x5757575757575757), rs2:x22(0xa8a8a8a8a8a8a8a8)
    TEST_RR_OP(aes64ks2, x26, x6, x22, 0x57575757ffffffff, 0x5757575757575757, 0xa8a8a8a8a8a8a8a8, x1, 16, x2)

aes64ks2_02_inst_88:
    // Test 88:  Test with dataset: sbox64
    // result rd:x27(0x58585858ffffffff), rs1:x5(0x5858585858585858), rs2:x21(0xa7a7a7a7a7a7a7a7)
    TEST_RR_OP(aes64ks2, x27, x5, x21, 0x58585858ffffffff, 0x5858585858585858, 0xa7a7a7a7a7a7a7a7, x1, 24, x2)

aes64ks2_02_inst_89:
    // Test 89:  Test with dataset: sbox64
    // result rd:x28(0x59595959ffffffff), rs1:x4(0x5959595959595959), rs2:x20(0xa6a6a6a6a6a6a6a6)
    TEST_RR_OP(aes64ks2, x28, x4, x20, 0x59595959ffffffff, 0x5959595959595959, 0xa6a6a6a6a6a6a6a6, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x4,signature_19_0)


aes64ks2_02_inst_90:
    // Test 90:  Test with dataset: sbox64
    // result rd:x29(0x5a5a5a5affffffff), rs1:x3(0x5a5a5a5a5a5a5a5a), rs2:x19(0xa5a5a5a5a5a5a5a5)
    TEST_RR_OP(aes64ks2, x29, x3, x19, 0x5a5a5a5affffffff, 0x5a5a5a5a5a5a5a5a, 0xa5a5a5a5a5a5a5a5, x4, 0, x5)

aes64ks2_02_inst_91:
    // Test 91:  Test with dataset: sbox64
    // result rd:x30(0x5b5b5b5bffffffff), rs1:x2(0x5b5b5b5b5b5b5b5b), rs2:x18(0xa4a4a4a4a4a4a4a4)
    TEST_RR_OP(aes64ks2, x30, x2, x18, 0x5b5b5b5bffffffff, 0x5b5b5b5b5b5b5b5b, 0xa4a4a4a4a4a4a4a4, x4, 8, x5)

aes64ks2_02_inst_92:
    // Test 92:  Test with dataset: sbox64
    // result rd:x31(0x5c5c5c5cffffffff), rs1:x1(0x5c5c5c5c5c5c5c5c), rs2:x17(0xa3a3a3a3a3a3a3a3)
    TEST_RR_OP(aes64ks2, x31, x1, x17, 0x5c5c5c5cffffffff, 0x5c5c5c5c5c5c5c5c, 0xa3a3a3a3a3a3a3a3, x4, 16, x5)

aes64ks2_02_inst_93:
    // Test 93:  Test with dataset: sbox64
    // result rd:x1(0x5d5d5d5dffffffff), rs1:x31(0x5d5d5d5d5d5d5d5d), rs2:x16(0xa2a2a2a2a2a2a2a2)
    TEST_RR_OP(aes64ks2, x1, x31, x16, 0x5d5d5d5dffffffff, 0x5d5d5d5d5d5d5d5d, 0xa2a2a2a2a2a2a2a2, x4, 24, x5)

aes64ks2_02_inst_94:
    // Test 94:  Test with dataset: sbox64
    // result rd:x2(0x5e5e5e5effffffff), rs1:x30(0x5e5e5e5e5e5e5e5e), rs2:x15(0xa1a1a1a1a1a1a1a1)
    TEST_RR_OP(aes64ks2, x2, x30, x15, 0x5e5e5e5effffffff, 0x5e5e5e5e5e5e5e5e, 0xa1a1a1a1a1a1a1a1, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_20_0)


aes64ks2_02_inst_95:
    // Test 95:  Test with dataset: sbox64
    // result rd:x3(0x5f5f5f5fffffffff), rs1:x29(0x5f5f5f5f5f5f5f5f), rs2:x14(0xa0a0a0a0a0a0a0a0)
    TEST_RR_OP(aes64ks2, x3, x29, x14, 0x5f5f5f5fffffffff, 0x5f5f5f5f5f5f5f5f, 0xa0a0a0a0a0a0a0a0, x1, 0, x2)

aes64ks2_02_inst_96:
    // Test 96:  Test with dataset: sbox64
    // result rd:x4(0x60606060ffffffff), rs1:x28(0x6060606060606060), rs2:x13(0x9f9f9f9f9f9f9f9f)
    TEST_RR_OP(aes64ks2, x4, x28, x13, 0x60606060ffffffff, 0x6060606060606060, 0x9f9f9f9f9f9f9f9f, x1, 8, x2)

aes64ks2_02_inst_97:
    // Test 97:  Test with dataset: sbox64
    // result rd:x5(0x61616161ffffffff), rs1:x27(0x6161616161616161), rs2:x12(0x9e9e9e9e9e9e9e9e)
    TEST_RR_OP(aes64ks2, x5, x27, x12, 0x61616161ffffffff, 0x6161616161616161, 0x9e9e9e9e9e9e9e9e, x1, 16, x2)

aes64ks2_02_inst_98:
    // Test 98:  Test with dataset: sbox64
    // result rd:x6(0x62626262ffffffff), rs1:x26(0x6262626262626262), rs2:x11(0x9d9d9d9d9d9d9d9d)
    TEST_RR_OP(aes64ks2, x6, x26, x11, 0x62626262ffffffff, 0x6262626262626262, 0x9d9d9d9d9d9d9d9d, x1, 24, x2)

aes64ks2_02_inst_99:
    // Test 99:  Test with dataset: sbox64
    // result rd:x7(0x63636363ffffffff), rs1:x25(0x6363636363636363), rs2:x10(0x9c9c9c9c9c9c9c9c)
    TEST_RR_OP(aes64ks2, x7, x25, x10, 0x63636363ffffffff, 0x6363636363636363, 0x9c9c9c9c9c9c9c9c, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_21_0)


aes64ks2_02_inst_100:
    // Test 100:  Test with dataset: sbox64
    // result rd:x8(0x64646464ffffffff), rs1:x24(0x6464646464646464), rs2:x9(0x9b9b9b9b9b9b9b9b)
    TEST_RR_OP(aes64ks2, x8, x24, x9, 0x64646464ffffffff, 0x6464646464646464, 0x9b9b9b9b9b9b9b9b, x1, 0, x2)

aes64ks2_02_inst_101:
    // Test 101:  Test with dataset: sbox64
    // result rd:x9(0x65656565ffffffff), rs1:x23(0x6565656565656565), rs2:x8(0x9a9a9a9a9a9a9a9a)
    TEST_RR_OP(aes64ks2, x9, x23, x8, 0x65656565ffffffff, 0x6565656565656565, 0x9a9a9a9a9a9a9a9a, x1, 8, x2)

aes64ks2_02_inst_102:
    // Test 102:  Test with dataset: sbox64
    // result rd:x10(0x66666666ffffffff), rs1:x22(0x6666666666666666), rs2:x7(0x9999999999999999)
    TEST_RR_OP(aes64ks2, x10, x22, x7, 0x66666666ffffffff, 0x6666666666666666, 0x9999999999999999, x1, 16, x2)

aes64ks2_02_inst_103:
    // Test 103:  Test with dataset: sbox64
    // result rd:x11(0x67676767ffffffff), rs1:x21(0x6767676767676767), rs2:x6(0x9898989898989898)
    TEST_RR_OP(aes64ks2, x11, x21, x6, 0x67676767ffffffff, 0x6767676767676767, 0x9898989898989898, x1, 24, x2)

aes64ks2_02_inst_104:
    // Test 104:  Test with dataset: sbox64
    // result rd:x12(0x68686868ffffffff), rs1:x20(0x6868686868686868), rs2:x5(0x9797979797979797)
    TEST_RR_OP(aes64ks2, x12, x20, x5, 0x68686868ffffffff, 0x6868686868686868, 0x9797979797979797, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x5,signature_22_0)


aes64ks2_02_inst_105:
    // Test 105:  Test with dataset: sbox64
    // result rd:x13(0x69696969ffffffff), rs1:x19(0x6969696969696969), rs2:x4(0x9696969696969696)
    TEST_RR_OP(aes64ks2, x13, x19, x4, 0x69696969ffffffff, 0x6969696969696969, 0x9696969696969696, x5, 0, x6)

aes64ks2_02_inst_106:
    // Test 106:  Test with dataset: sbox64
    // result rd:x14(0x6a6a6a6affffffff), rs1:x18(0x6a6a6a6a6a6a6a6a), rs2:x3(0x9595959595959595)
    TEST_RR_OP(aes64ks2, x14, x18, x3, 0x6a6a6a6affffffff, 0x6a6a6a6a6a6a6a6a, 0x9595959595959595, x5, 8, x6)

aes64ks2_02_inst_107:
    // Test 107:  Test with dataset: sbox64
    // result rd:x15(0x6b6b6b6bffffffff), rs1:x17(0x6b6b6b6b6b6b6b6b), rs2:x2(0x9494949494949494)
    TEST_RR_OP(aes64ks2, x15, x17, x2, 0x6b6b6b6bffffffff, 0x6b6b6b6b6b6b6b6b, 0x9494949494949494, x5, 16, x6)

aes64ks2_02_inst_108:
    // Test 108:  Test with dataset: sbox64
    // result rd:x16(0x6c6c6c6cffffffff), rs1:x16(0x6c6c6c6c6c6c6c6c), rs2:x1(0x9393939393939393)
    TEST_RR_OP(aes64ks2, x16, x16, x1, 0x6c6c6c6cffffffff, 0x6c6c6c6c6c6c6c6c, 0x9393939393939393, x5, 24, x6)

aes64ks2_02_inst_109:
    // Test 109:  Test with dataset: sbox64
    // result rd:x17(0x6d6d6d6dffffffff), rs1:x15(0x6d6d6d6d6d6d6d6d), rs2:x31(0x9292929292929292)
    TEST_RR_OP(aes64ks2, x17, x15, x31, 0x6d6d6d6dffffffff, 0x6d6d6d6d6d6d6d6d, 0x9292929292929292, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_23_0)


aes64ks2_02_inst_110:
    // Test 110:  Test with dataset: sbox64
    // result rd:x18(0x6e6e6e6effffffff), rs1:x14(0x6e6e6e6e6e6e6e6e), rs2:x30(0x9191919191919191)
    TEST_RR_OP(aes64ks2, x18, x14, x30, 0x6e6e6e6effffffff, 0x6e6e6e6e6e6e6e6e, 0x9191919191919191, x1, 0, x2)

aes64ks2_02_inst_111:
    // Test 111:  Test with dataset: sbox64
    // result rd:x19(0x6f6f6f6fffffffff), rs1:x13(0x6f6f6f6f6f6f6f6f), rs2:x29(0x9090909090909090)
    TEST_RR_OP(aes64ks2, x19, x13, x29, 0x6f6f6f6fffffffff, 0x6f6f6f6f6f6f6f6f, 0x9090909090909090, x1, 8, x2)

aes64ks2_02_inst_112:
    // Test 112:  Test with dataset: sbox64
    // result rd:x20(0x70707070ffffffff), rs1:x12(0x7070707070707070), rs2:x28(0x8f8f8f8f8f8f8f8f)
    TEST_RR_OP(aes64ks2, x20, x12, x28, 0x70707070ffffffff, 0x7070707070707070, 0x8f8f8f8f8f8f8f8f, x1, 16, x2)

aes64ks2_02_inst_113:
    // Test 113:  Test with dataset: sbox64
    // result rd:x21(0x71717171ffffffff), rs1:x11(0x7171717171717171), rs2:x27(0x8e8e8e8e8e8e8e8e)
    TEST_RR_OP(aes64ks2, x21, x11, x27, 0x71717171ffffffff, 0x7171717171717171, 0x8e8e8e8e8e8e8e8e, x1, 24, x2)

aes64ks2_02_inst_114:
    // Test 114:  Test with dataset: sbox64
    // result rd:x22(0x72727272ffffffff), rs1:x10(0x7272727272727272), rs2:x26(0x8d8d8d8d8d8d8d8d)
    TEST_RR_OP(aes64ks2, x22, x10, x26, 0x72727272ffffffff, 0x7272727272727272, 0x8d8d8d8d8d8d8d8d, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_24_0)


aes64ks2_02_inst_115:
    // Test 115:  Test with dataset: sbox64
    // result rd:x23(0x73737373ffffffff), rs1:x9(0x7373737373737373), rs2:x25(0x8c8c8c8c8c8c8c8c)
    TEST_RR_OP(aes64ks2, x23, x9, x25, 0x73737373ffffffff, 0x7373737373737373, 0x8c8c8c8c8c8c8c8c, x1, 0, x2)

aes64ks2_02_inst_116:
    // Test 116:  Test with dataset: sbox64
    // result rd:x24(0x74747474ffffffff), rs1:x8(0x7474747474747474), rs2:x24(0x8b8b8b8b8b8b8b8b)
    TEST_RR_OP(aes64ks2, x24, x8, x24, 0x74747474ffffffff, 0x7474747474747474, 0x8b8b8b8b8b8b8b8b, x1, 8, x2)

aes64ks2_02_inst_117:
    // Test 117:  Test with dataset: sbox64
    // result rd:x25(0x75757575ffffffff), rs1:x7(0x7575757575757575), rs2:x23(0x8a8a8a8a8a8a8a8a)
    TEST_RR_OP(aes64ks2, x25, x7, x23, 0x75757575ffffffff, 0x7575757575757575, 0x8a8a8a8a8a8a8a8a, x1, 16, x2)

aes64ks2_02_inst_118:
    // Test 118:  Test with dataset: sbox64
    // result rd:x26(0x76767676ffffffff), rs1:x6(0x7676767676767676), rs2:x22(0x8989898989898989)
    TEST_RR_OP(aes64ks2, x26, x6, x22, 0x76767676ffffffff, 0x7676767676767676, 0x8989898989898989, x1, 24, x2)

aes64ks2_02_inst_119:
    // Test 119:  Test with dataset: sbox64
    // result rd:x27(0x77777777ffffffff), rs1:x5(0x7777777777777777), rs2:x21(0x8888888888888888)
    TEST_RR_OP(aes64ks2, x27, x5, x21, 0x77777777ffffffff, 0x7777777777777777, 0x8888888888888888, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x5,signature_25_0)


aes64ks2_02_inst_120:
    // Test 120:  Test with dataset: sbox64
    // result rd:x28(0x78787878ffffffff), rs1:x4(0x7878787878787878), rs2:x20(0x8787878787878787)
    TEST_RR_OP(aes64ks2, x28, x4, x20, 0x78787878ffffffff, 0x7878787878787878, 0x8787878787878787, x5, 0, x6)

aes64ks2_02_inst_121:
    // Test 121:  Test with dataset: sbox64
    // result rd:x29(0x79797979ffffffff), rs1:x3(0x7979797979797979), rs2:x19(0x8686868686868686)
    TEST_RR_OP(aes64ks2, x29, x3, x19, 0x79797979ffffffff, 0x7979797979797979, 0x8686868686868686, x5, 8, x6)

aes64ks2_02_inst_122:
    // Test 122:  Test with dataset: sbox64
    // result rd:x30(0x7a7a7a7affffffff), rs1:x2(0x7a7a7a7a7a7a7a7a), rs2:x18(0x8585858585858585)
    TEST_RR_OP(aes64ks2, x30, x2, x18, 0x7a7a7a7affffffff, 0x7a7a7a7a7a7a7a7a, 0x8585858585858585, x5, 16, x6)

aes64ks2_02_inst_123:
    // Test 123:  Test with dataset: sbox64
    // result rd:x31(0x7b7b7b7bffffffff), rs1:x1(0x7b7b7b7b7b7b7b7b), rs2:x17(0x8484848484848484)
    TEST_RR_OP(aes64ks2, x31, x1, x17, 0x7b7b7b7bffffffff, 0x7b7b7b7b7b7b7b7b, 0x8484848484848484, x5, 24, x6)

aes64ks2_02_inst_124:
    // Test 124:  Test with dataset: sbox64
    // result rd:x1(0x7c7c7c7cffffffff), rs1:x31(0x7c7c7c7c7c7c7c7c), rs2:x16(0x8383838383838383)
    TEST_RR_OP(aes64ks2, x1, x31, x16, 0x7c7c7c7cffffffff, 0x7c7c7c7c7c7c7c7c, 0x8383838383838383, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_26_0)


aes64ks2_02_inst_125:
    // Test 125:  Test with dataset: sbox64
    // result rd:x2(0x7d7d7d7dffffffff), rs1:x30(0x7d7d7d7d7d7d7d7d), rs2:x15(0x8282828282828282)
    TEST_RR_OP(aes64ks2, x2, x30, x15, 0x7d7d7d7dffffffff, 0x7d7d7d7d7d7d7d7d, 0x8282828282828282, x1, 0, x7)

aes64ks2_02_inst_126:
    // Test 126:  Test with dataset: sbox64
    // result rd:x3(0x7e7e7e7effffffff), rs1:x29(0x7e7e7e7e7e7e7e7e), rs2:x14(0x8181818181818181)
    TEST_RR_OP(aes64ks2, x3, x29, x14, 0x7e7e7e7effffffff, 0x7e7e7e7e7e7e7e7e, 0x8181818181818181, x1, 8, x7)

aes64ks2_02_inst_127:
    // Test 127:  Test with dataset: sbox64
    // result rd:x4(0x7f7f7f7fffffffff), rs1:x28(0x7f7f7f7f7f7f7f7f), rs2:x13(0x8080808080808080)
    TEST_RR_OP(aes64ks2, x4, x28, x13, 0x7f7f7f7fffffffff, 0x7f7f7f7f7f7f7f7f, 0x8080808080808080, x1, 16, x7)

aes64ks2_02_inst_128:
    // Test 128:  Test with dataset: sbox64
    // result rd:x5(0x80808080ffffffff), rs1:x27(0x8080808080808080), rs2:x12(0x7f7f7f7f7f7f7f7f)
    TEST_RR_OP(aes64ks2, x5, x27, x12, 0x80808080ffffffff, 0x8080808080808080, 0x7f7f7f7f7f7f7f7f, x1, 24, x7)

aes64ks2_02_inst_129:
    // Test 129:  Test with dataset: sbox64
    // result rd:x6(0x81818181ffffffff), rs1:x26(0x8181818181818181), rs2:x11(0x7e7e7e7e7e7e7e7e)
    TEST_RR_OP(aes64ks2, x6, x26, x11, 0x81818181ffffffff, 0x8181818181818181, 0x7e7e7e7e7e7e7e7e, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_27_0)


aes64ks2_02_inst_130:
    // Test 130:  Test with dataset: sbox64
    // result rd:x7(0x82828282ffffffff), rs1:x25(0x8282828282828282), rs2:x10(0x7d7d7d7d7d7d7d7d)
    TEST_RR_OP(aes64ks2, x7, x25, x10, 0x82828282ffffffff, 0x8282828282828282, 0x7d7d7d7d7d7d7d7d, x1, 0, x2)

aes64ks2_02_inst_131:
    // Test 131:  Test with dataset: sbox64
    // result rd:x8(0x83838383ffffffff), rs1:x24(0x8383838383838383), rs2:x9(0x7c7c7c7c7c7c7c7c)
    TEST_RR_OP(aes64ks2, x8, x24, x9, 0x83838383ffffffff, 0x8383838383838383, 0x7c7c7c7c7c7c7c7c, x1, 8, x2)

aes64ks2_02_inst_132:
    // Test 132:  Test with dataset: sbox64
    // result rd:x9(0x84848484ffffffff), rs1:x23(0x8484848484848484), rs2:x8(0x7b7b7b7b7b7b7b7b)
    TEST_RR_OP(aes64ks2, x9, x23, x8, 0x84848484ffffffff, 0x8484848484848484, 0x7b7b7b7b7b7b7b7b, x1, 16, x2)

aes64ks2_02_inst_133:
    // Test 133:  Test with dataset: sbox64
    // result rd:x10(0x85858585ffffffff), rs1:x22(0x8585858585858585), rs2:x7(0x7a7a7a7a7a7a7a7a)
    TEST_RR_OP(aes64ks2, x10, x22, x7, 0x85858585ffffffff, 0x8585858585858585, 0x7a7a7a7a7a7a7a7a, x1, 24, x2)

aes64ks2_02_inst_134:
    // Test 134:  Test with dataset: sbox64
    // result rd:x11(0x86868686ffffffff), rs1:x21(0x8686868686868686), rs2:x6(0x7979797979797979)
    TEST_RR_OP(aes64ks2, x11, x21, x6, 0x86868686ffffffff, 0x8686868686868686, 0x7979797979797979, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x6,signature_28_0)


aes64ks2_02_inst_135:
    // Test 135:  Test with dataset: sbox64
    // result rd:x12(0x87878787ffffffff), rs1:x20(0x8787878787878787), rs2:x5(0x7878787878787878)
    TEST_RR_OP(aes64ks2, x12, x20, x5, 0x87878787ffffffff, 0x8787878787878787, 0x7878787878787878, x6, 0, x7)

aes64ks2_02_inst_136:
    // Test 136:  Test with dataset: sbox64
    // result rd:x13(0x88888888ffffffff), rs1:x19(0x8888888888888888), rs2:x4(0x7777777777777777)
    TEST_RR_OP(aes64ks2, x13, x19, x4, 0x88888888ffffffff, 0x8888888888888888, 0x7777777777777777, x6, 8, x7)

aes64ks2_02_inst_137:
    // Test 137:  Test with dataset: sbox64
    // result rd:x14(0x89898989ffffffff), rs1:x18(0x8989898989898989), rs2:x3(0x7676767676767676)
    TEST_RR_OP(aes64ks2, x14, x18, x3, 0x89898989ffffffff, 0x8989898989898989, 0x7676767676767676, x6, 16, x7)

aes64ks2_02_inst_138:
    // Test 138:  Test with dataset: sbox64
    // result rd:x15(0x8a8a8a8affffffff), rs1:x17(0x8a8a8a8a8a8a8a8a), rs2:x2(0x7575757575757575)
    TEST_RR_OP(aes64ks2, x15, x17, x2, 0x8a8a8a8affffffff, 0x8a8a8a8a8a8a8a8a, 0x7575757575757575, x6, 24, x7)

aes64ks2_02_inst_139:
    // Test 139:  Test with dataset: sbox64
    // result rd:x16(0x8b8b8b8bffffffff), rs1:x16(0x8b8b8b8b8b8b8b8b), rs2:x1(0x7474747474747474)
    TEST_RR_OP(aes64ks2, x16, x16, x1, 0x8b8b8b8bffffffff, 0x8b8b8b8b8b8b8b8b, 0x7474747474747474, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_29_0)


aes64ks2_02_inst_140:
    // Test 140:  Test with dataset: sbox64
    // result rd:x17(0x8c8c8c8cffffffff), rs1:x15(0x8c8c8c8c8c8c8c8c), rs2:x31(0x7373737373737373)
    TEST_RR_OP(aes64ks2, x17, x15, x31, 0x8c8c8c8cffffffff, 0x8c8c8c8c8c8c8c8c, 0x7373737373737373, x1, 0, x2)

aes64ks2_02_inst_141:
    // Test 141:  Test with dataset: sbox64
    // result rd:x18(0x8d8d8d8dffffffff), rs1:x14(0x8d8d8d8d8d8d8d8d), rs2:x30(0x7272727272727272)
    TEST_RR_OP(aes64ks2, x18, x14, x30, 0x8d8d8d8dffffffff, 0x8d8d8d8d8d8d8d8d, 0x7272727272727272, x1, 8, x2)

aes64ks2_02_inst_142:
    // Test 142:  Test with dataset: sbox64
    // result rd:x19(0x8e8e8e8effffffff), rs1:x13(0x8e8e8e8e8e8e8e8e), rs2:x29(0x7171717171717171)
    TEST_RR_OP(aes64ks2, x19, x13, x29, 0x8e8e8e8effffffff, 0x8e8e8e8e8e8e8e8e, 0x7171717171717171, x1, 16, x2)

aes64ks2_02_inst_143:
    // Test 143:  Test with dataset: sbox64
    // result rd:x20(0x8f8f8f8fffffffff), rs1:x12(0x8f8f8f8f8f8f8f8f), rs2:x28(0x7070707070707070)
    TEST_RR_OP(aes64ks2, x20, x12, x28, 0x8f8f8f8fffffffff, 0x8f8f8f8f8f8f8f8f, 0x7070707070707070, x1, 24, x2)

aes64ks2_02_inst_144:
    // Test 144:  Test with dataset: sbox64
    // result rd:x21(0x90909090ffffffff), rs1:x11(0x9090909090909090), rs2:x27(0x6f6f6f6f6f6f6f6f)
    TEST_RR_OP(aes64ks2, x21, x11, x27, 0x90909090ffffffff, 0x9090909090909090, 0x6f6f6f6f6f6f6f6f, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_30_0)


aes64ks2_02_inst_145:
    // Test 145:  Test with dataset: sbox64
    // result rd:x22(0x91919191ffffffff), rs1:x10(0x9191919191919191), rs2:x26(0x6e6e6e6e6e6e6e6e)
    TEST_RR_OP(aes64ks2, x22, x10, x26, 0x91919191ffffffff, 0x9191919191919191, 0x6e6e6e6e6e6e6e6e, x1, 0, x2)

aes64ks2_02_inst_146:
    // Test 146:  Test with dataset: sbox64
    // result rd:x23(0x92929292ffffffff), rs1:x9(0x9292929292929292), rs2:x25(0x6d6d6d6d6d6d6d6d)
    TEST_RR_OP(aes64ks2, x23, x9, x25, 0x92929292ffffffff, 0x9292929292929292, 0x6d6d6d6d6d6d6d6d, x1, 8, x2)

aes64ks2_02_inst_147:
    // Test 147:  Test with dataset: sbox64
    // result rd:x24(0x93939393ffffffff), rs1:x8(0x9393939393939393), rs2:x24(0x6c6c6c6c6c6c6c6c)
    TEST_RR_OP(aes64ks2, x24, x8, x24, 0x93939393ffffffff, 0x9393939393939393, 0x6c6c6c6c6c6c6c6c, x1, 16, x2)

aes64ks2_02_inst_148:
    // Test 148:  Test with dataset: sbox64
    // result rd:x25(0x94949494ffffffff), rs1:x7(0x9494949494949494), rs2:x23(0x6b6b6b6b6b6b6b6b)
    TEST_RR_OP(aes64ks2, x25, x7, x23, 0x94949494ffffffff, 0x9494949494949494, 0x6b6b6b6b6b6b6b6b, x1, 24, x2)

aes64ks2_02_inst_149:
    // Test 149:  Test with dataset: sbox64
    // result rd:x26(0x95959595ffffffff), rs1:x6(0x9595959595959595), rs2:x22(0x6a6a6a6a6a6a6a6a)
    TEST_RR_OP(aes64ks2, x26, x6, x22, 0x95959595ffffffff, 0x9595959595959595, 0x6a6a6a6a6a6a6a6a, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x6,signature_31_0)


aes64ks2_02_inst_150:
    // Test 150:  Test with dataset: sbox64
    // result rd:x27(0x96969696ffffffff), rs1:x5(0x9696969696969696), rs2:x21(0x6969696969696969)
    TEST_RR_OP(aes64ks2, x27, x5, x21, 0x96969696ffffffff, 0x9696969696969696, 0x6969696969696969, x6, 0, x7)

aes64ks2_02_inst_151:
    // Test 151:  Test with dataset: sbox64
    // result rd:x28(0x97979797ffffffff), rs1:x4(0x9797979797979797), rs2:x20(0x6868686868686868)
    TEST_RR_OP(aes64ks2, x28, x4, x20, 0x97979797ffffffff, 0x9797979797979797, 0x6868686868686868, x6, 8, x7)

aes64ks2_02_inst_152:
    // Test 152:  Test with dataset: sbox64
    // result rd:x29(0x98989898ffffffff), rs1:x3(0x9898989898989898), rs2:x19(0x6767676767676767)
    TEST_RR_OP(aes64ks2, x29, x3, x19, 0x98989898ffffffff, 0x9898989898989898, 0x6767676767676767, x6, 16, x7)

aes64ks2_02_inst_153:
    // Test 153:  Test with dataset: sbox64
    // result rd:x30(0x99999999ffffffff), rs1:x2(0x9999999999999999), rs2:x18(0x6666666666666666)
    TEST_RR_OP(aes64ks2, x30, x2, x18, 0x99999999ffffffff, 0x9999999999999999, 0x6666666666666666, x6, 24, x7)

aes64ks2_02_inst_154:
    // Test 154:  Test with dataset: sbox64
    // result rd:x31(0x9a9a9a9affffffff), rs1:x1(0x9a9a9a9a9a9a9a9a), rs2:x17(0x6565656565656565)
    TEST_RR_OP(aes64ks2, x31, x1, x17, 0x9a9a9a9affffffff, 0x9a9a9a9a9a9a9a9a, 0x6565656565656565, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x6,signature_32_0)


aes64ks2_02_inst_155:
    // Test 155:  Test with dataset: sbox64
    // result rd:x1(0x9b9b9b9bffffffff), rs1:x31(0x9b9b9b9b9b9b9b9b), rs2:x16(0x6464646464646464)
    TEST_RR_OP(aes64ks2, x1, x31, x16, 0x9b9b9b9bffffffff, 0x9b9b9b9b9b9b9b9b, 0x6464646464646464, x6, 0, x7)

aes64ks2_02_inst_156:
    // Test 156:  Test with dataset: sbox64
    // result rd:x2(0x9c9c9c9cffffffff), rs1:x30(0x9c9c9c9c9c9c9c9c), rs2:x15(0x6363636363636363)
    TEST_RR_OP(aes64ks2, x2, x30, x15, 0x9c9c9c9cffffffff, 0x9c9c9c9c9c9c9c9c, 0x6363636363636363, x6, 8, x7)

aes64ks2_02_inst_157:
    // Test 157:  Test with dataset: sbox64
    // result rd:x3(0x9d9d9d9dffffffff), rs1:x29(0x9d9d9d9d9d9d9d9d), rs2:x14(0x6262626262626262)
    TEST_RR_OP(aes64ks2, x3, x29, x14, 0x9d9d9d9dffffffff, 0x9d9d9d9d9d9d9d9d, 0x6262626262626262, x6, 16, x7)

aes64ks2_02_inst_158:
    // Test 158:  Test with dataset: sbox64
    // result rd:x4(0x9e9e9e9effffffff), rs1:x28(0x9e9e9e9e9e9e9e9e), rs2:x13(0x6161616161616161)
    TEST_RR_OP(aes64ks2, x4, x28, x13, 0x9e9e9e9effffffff, 0x9e9e9e9e9e9e9e9e, 0x6161616161616161, x6, 24, x7)

aes64ks2_02_inst_159:
    // Test 159:  Test with dataset: sbox64
    // result rd:x5(0x9f9f9f9fffffffff), rs1:x27(0x9f9f9f9f9f9f9f9f), rs2:x12(0x6060606060606060)
    TEST_RR_OP(aes64ks2, x5, x27, x12, 0x9f9f9f9fffffffff, 0x9f9f9f9f9f9f9f9f, 0x6060606060606060, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_33_0)


aes64ks2_02_inst_160:
    // Test 160:  Test with dataset: sbox64
    // result rd:x6(0xa0a0a0a0ffffffff), rs1:x26(0xa0a0a0a0a0a0a0a0), rs2:x11(0x5f5f5f5f5f5f5f5f)
    TEST_RR_OP(aes64ks2, x6, x26, x11, 0xa0a0a0a0ffffffff, 0xa0a0a0a0a0a0a0a0, 0x5f5f5f5f5f5f5f5f, x1, 0, x2)

aes64ks2_02_inst_161:
    // Test 161:  Test with dataset: sbox64
    // result rd:x7(0xa1a1a1a1ffffffff), rs1:x25(0xa1a1a1a1a1a1a1a1), rs2:x10(0x5e5e5e5e5e5e5e5e)
    TEST_RR_OP(aes64ks2, x7, x25, x10, 0xa1a1a1a1ffffffff, 0xa1a1a1a1a1a1a1a1, 0x5e5e5e5e5e5e5e5e, x1, 8, x2)

aes64ks2_02_inst_162:
    // Test 162:  Test with dataset: sbox64
    // result rd:x8(0xa2a2a2a2ffffffff), rs1:x24(0xa2a2a2a2a2a2a2a2), rs2:x9(0x5d5d5d5d5d5d5d5d)
    TEST_RR_OP(aes64ks2, x8, x24, x9, 0xa2a2a2a2ffffffff, 0xa2a2a2a2a2a2a2a2, 0x5d5d5d5d5d5d5d5d, x1, 16, x2)

aes64ks2_02_inst_163:
    // Test 163:  Test with dataset: sbox64
    // result rd:x9(0xa3a3a3a3ffffffff), rs1:x23(0xa3a3a3a3a3a3a3a3), rs2:x8(0x5c5c5c5c5c5c5c5c)
    TEST_RR_OP(aes64ks2, x9, x23, x8, 0xa3a3a3a3ffffffff, 0xa3a3a3a3a3a3a3a3, 0x5c5c5c5c5c5c5c5c, x1, 24, x2)

aes64ks2_02_inst_164:
    // Test 164:  Test with dataset: sbox64
    // result rd:x10(0xa4a4a4a4ffffffff), rs1:x22(0xa4a4a4a4a4a4a4a4), rs2:x7(0x5b5b5b5b5b5b5b5b)
    TEST_RR_OP(aes64ks2, x10, x22, x7, 0xa4a4a4a4ffffffff, 0xa4a4a4a4a4a4a4a4, 0x5b5b5b5b5b5b5b5b, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_34_0)


aes64ks2_02_inst_165:
    // Test 165:  Test with dataset: sbox64
    // result rd:x11(0xa5a5a5a5ffffffff), rs1:x21(0xa5a5a5a5a5a5a5a5), rs2:x6(0x5a5a5a5a5a5a5a5a)
    TEST_RR_OP(aes64ks2, x11, x21, x6, 0xa5a5a5a5ffffffff, 0xa5a5a5a5a5a5a5a5, 0x5a5a5a5a5a5a5a5a, x1, 0, x7)

aes64ks2_02_inst_166:
    // Test 166:  Test with dataset: sbox64
    // result rd:x12(0xa6a6a6a6ffffffff), rs1:x20(0xa6a6a6a6a6a6a6a6), rs2:x5(0x5959595959595959)
    TEST_RR_OP(aes64ks2, x12, x20, x5, 0xa6a6a6a6ffffffff, 0xa6a6a6a6a6a6a6a6, 0x5959595959595959, x1, 8, x7)

aes64ks2_02_inst_167:
    // Test 167:  Test with dataset: sbox64
    // result rd:x13(0xa7a7a7a7ffffffff), rs1:x19(0xa7a7a7a7a7a7a7a7), rs2:x4(0x5858585858585858)
    TEST_RR_OP(aes64ks2, x13, x19, x4, 0xa7a7a7a7ffffffff, 0xa7a7a7a7a7a7a7a7, 0x5858585858585858, x1, 16, x7)

aes64ks2_02_inst_168:
    // Test 168:  Test with dataset: sbox64
    // result rd:x14(0xa8a8a8a8ffffffff), rs1:x18(0xa8a8a8a8a8a8a8a8), rs2:x3(0x5757575757575757)
    TEST_RR_OP(aes64ks2, x14, x18, x3, 0xa8a8a8a8ffffffff, 0xa8a8a8a8a8a8a8a8, 0x5757575757575757, x1, 24, x7)

aes64ks2_02_inst_169:
    // Test 169:  Test with dataset: sbox64
    // result rd:x15(0xa9a9a9a9ffffffff), rs1:x17(0xa9a9a9a9a9a9a9a9), rs2:x2(0x5656565656565656)
    TEST_RR_OP(aes64ks2, x15, x17, x2, 0xa9a9a9a9ffffffff, 0xa9a9a9a9a9a9a9a9, 0x5656565656565656, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x2,signature_35_0)


aes64ks2_02_inst_170:
    // Test 170:  Test with dataset: sbox64
    // result rd:x16(0xaaaaaaaaffffffff), rs1:x16(0xaaaaaaaaaaaaaaaa), rs2:x1(0x5555555555555555)
    TEST_RR_OP(aes64ks2, x16, x16, x1, 0xaaaaaaaaffffffff, 0xaaaaaaaaaaaaaaaa, 0x5555555555555555, x2, 0, x3)

aes64ks2_02_inst_171:
    // Test 171:  Test with dataset: sbox64
    // result rd:x17(0xababababffffffff), rs1:x15(0xabababababababab), rs2:x31(0x5454545454545454)
    TEST_RR_OP(aes64ks2, x17, x15, x31, 0xababababffffffff, 0xabababababababab, 0x5454545454545454, x2, 8, x3)

aes64ks2_02_inst_172:
    // Test 172:  Test with dataset: sbox64
    // result rd:x18(0xacacacacffffffff), rs1:x14(0xacacacacacacacac), rs2:x30(0x5353535353535353)
    TEST_RR_OP(aes64ks2, x18, x14, x30, 0xacacacacffffffff, 0xacacacacacacacac, 0x5353535353535353, x2, 16, x3)

aes64ks2_02_inst_173:
    // Test 173:  Test with dataset: sbox64
    // result rd:x19(0xadadadadffffffff), rs1:x13(0xadadadadadadadad), rs2:x29(0x5252525252525252)
    TEST_RR_OP(aes64ks2, x19, x13, x29, 0xadadadadffffffff, 0xadadadadadadadad, 0x5252525252525252, x2, 24, x3)

aes64ks2_02_inst_174:
    // Test 174:  Test with dataset: sbox64
    // result rd:x20(0xaeaeaeaeffffffff), rs1:x12(0xaeaeaeaeaeaeaeae), rs2:x28(0x5151515151515151)
    TEST_RR_OP(aes64ks2, x20, x12, x28, 0xaeaeaeaeffffffff, 0xaeaeaeaeaeaeaeae, 0x5151515151515151, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_36_0)


aes64ks2_02_inst_175:
    // Test 175:  Test with dataset: sbox64
    // result rd:x21(0xafafafafffffffff), rs1:x11(0xafafafafafafafaf), rs2:x27(0x5050505050505050)
    TEST_RR_OP(aes64ks2, x21, x11, x27, 0xafafafafffffffff, 0xafafafafafafafaf, 0x5050505050505050, x1, 0, x2)

aes64ks2_02_inst_176:
    // Test 176:  Test with dataset: sbox64
    // result rd:x22(0xb0b0b0b0ffffffff), rs1:x10(0xb0b0b0b0b0b0b0b0), rs2:x26(0x4f4f4f4f4f4f4f4f)
    TEST_RR_OP(aes64ks2, x22, x10, x26, 0xb0b0b0b0ffffffff, 0xb0b0b0b0b0b0b0b0, 0x4f4f4f4f4f4f4f4f, x1, 8, x2)

aes64ks2_02_inst_177:
    // Test 177:  Test with dataset: sbox64
    // result rd:x23(0xb1b1b1b1ffffffff), rs1:x9(0xb1b1b1b1b1b1b1b1), rs2:x25(0x4e4e4e4e4e4e4e4e)
    TEST_RR_OP(aes64ks2, x23, x9, x25, 0xb1b1b1b1ffffffff, 0xb1b1b1b1b1b1b1b1, 0x4e4e4e4e4e4e4e4e, x1, 16, x2)

aes64ks2_02_inst_178:
    // Test 178:  Test with dataset: sbox64
    // result rd:x24(0xb2b2b2b2ffffffff), rs1:x8(0xb2b2b2b2b2b2b2b2), rs2:x24(0x4d4d4d4d4d4d4d4d)
    TEST_RR_OP(aes64ks2, x24, x8, x24, 0xb2b2b2b2ffffffff, 0xb2b2b2b2b2b2b2b2, 0x4d4d4d4d4d4d4d4d, x1, 24, x2)

aes64ks2_02_inst_179:
    // Test 179:  Test with dataset: sbox64
    // result rd:x25(0xb3b3b3b3ffffffff), rs1:x7(0xb3b3b3b3b3b3b3b3), rs2:x23(0x4c4c4c4c4c4c4c4c)
    TEST_RR_OP(aes64ks2, x25, x7, x23, 0xb3b3b3b3ffffffff, 0xb3b3b3b3b3b3b3b3, 0x4c4c4c4c4c4c4c4c, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_37_0)


aes64ks2_02_inst_180:
    // Test 180:  Test with dataset: sbox64
    // result rd:x26(0xb4b4b4b4ffffffff), rs1:x6(0xb4b4b4b4b4b4b4b4), rs2:x22(0x4b4b4b4b4b4b4b4b)
    TEST_RR_OP(aes64ks2, x26, x6, x22, 0xb4b4b4b4ffffffff, 0xb4b4b4b4b4b4b4b4, 0x4b4b4b4b4b4b4b4b, x1, 0, x7)

aes64ks2_02_inst_181:
    // Test 181:  Test with dataset: sbox64
    // result rd:x27(0xb5b5b5b5ffffffff), rs1:x5(0xb5b5b5b5b5b5b5b5), rs2:x21(0x4a4a4a4a4a4a4a4a)
    TEST_RR_OP(aes64ks2, x27, x5, x21, 0xb5b5b5b5ffffffff, 0xb5b5b5b5b5b5b5b5, 0x4a4a4a4a4a4a4a4a, x1, 8, x7)

aes64ks2_02_inst_182:
    // Test 182:  Test with dataset: sbox64
    // result rd:x28(0xb6b6b6b6ffffffff), rs1:x4(0xb6b6b6b6b6b6b6b6), rs2:x20(0x4949494949494949)
    TEST_RR_OP(aes64ks2, x28, x4, x20, 0xb6b6b6b6ffffffff, 0xb6b6b6b6b6b6b6b6, 0x4949494949494949, x1, 16, x7)

aes64ks2_02_inst_183:
    // Test 183:  Test with dataset: sbox64
    // result rd:x29(0xb7b7b7b7ffffffff), rs1:x3(0xb7b7b7b7b7b7b7b7), rs2:x19(0x4848484848484848)
    TEST_RR_OP(aes64ks2, x29, x3, x19, 0xb7b7b7b7ffffffff, 0xb7b7b7b7b7b7b7b7, 0x4848484848484848, x1, 24, x7)

aes64ks2_02_inst_184:
    // Test 184:  Test with dataset: sbox64
    // result rd:x30(0xb8b8b8b8ffffffff), rs1:x2(0xb8b8b8b8b8b8b8b8), rs2:x18(0x4747474747474747)
    TEST_RR_OP(aes64ks2, x30, x2, x18, 0xb8b8b8b8ffffffff, 0xb8b8b8b8b8b8b8b8, 0x4747474747474747, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x5,signature_38_0)


aes64ks2_02_inst_185:
    // Test 185:  Test with dataset: sbox64
    // result rd:x31(0xb9b9b9b9ffffffff), rs1:x1(0xb9b9b9b9b9b9b9b9), rs2:x17(0x4646464646464646)
    TEST_RR_OP(aes64ks2, x31, x1, x17, 0xb9b9b9b9ffffffff, 0xb9b9b9b9b9b9b9b9, 0x4646464646464646, x5, 0, x6)

aes64ks2_02_inst_186:
    // Test 186:  Test with dataset: sbox64
    // result rd:x1(0xbabababaffffffff), rs1:x31(0xbabababababababa), rs2:x16(0x4545454545454545)
    TEST_RR_OP(aes64ks2, x1, x31, x16, 0xbabababaffffffff, 0xbabababababababa, 0x4545454545454545, x5, 8, x6)

aes64ks2_02_inst_187:
    // Test 187:  Test with dataset: sbox64
    // result rd:x2(0xbbbbbbbbffffffff), rs1:x30(0xbbbbbbbbbbbbbbbb), rs2:x15(0x4444444444444444)
    TEST_RR_OP(aes64ks2, x2, x30, x15, 0xbbbbbbbbffffffff, 0xbbbbbbbbbbbbbbbb, 0x4444444444444444, x5, 16, x6)

aes64ks2_02_inst_188:
    // Test 188:  Test with dataset: sbox64
    // result rd:x3(0xbcbcbcbcffffffff), rs1:x29(0xbcbcbcbcbcbcbcbc), rs2:x14(0x4343434343434343)
    TEST_RR_OP(aes64ks2, x3, x29, x14, 0xbcbcbcbcffffffff, 0xbcbcbcbcbcbcbcbc, 0x4343434343434343, x5, 24, x6)

aes64ks2_02_inst_189:
    // Test 189:  Test with dataset: sbox64
    // result rd:x4(0xbdbdbdbdffffffff), rs1:x28(0xbdbdbdbdbdbdbdbd), rs2:x13(0x4242424242424242)
    TEST_RR_OP(aes64ks2, x4, x28, x13, 0xbdbdbdbdffffffff, 0xbdbdbdbdbdbdbdbd, 0x4242424242424242, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_39_0)


aes64ks2_02_inst_190:
    // Test 190:  Test with dataset: sbox64
    // result rd:x5(0xbebebebeffffffff), rs1:x27(0xbebebebebebebebe), rs2:x12(0x4141414141414141)
    TEST_RR_OP(aes64ks2, x5, x27, x12, 0xbebebebeffffffff, 0xbebebebebebebebe, 0x4141414141414141, x1, 0, x2)

aes64ks2_02_inst_191:
    // Test 191:  Test with dataset: sbox64
    // result rd:x6(0xbfbfbfbfffffffff), rs1:x26(0xbfbfbfbfbfbfbfbf), rs2:x11(0x4040404040404040)
    TEST_RR_OP(aes64ks2, x6, x26, x11, 0xbfbfbfbfffffffff, 0xbfbfbfbfbfbfbfbf, 0x4040404040404040, x1, 8, x2)

aes64ks2_02_inst_192:
    // Test 192:  Test with dataset: sbox64
    // result rd:x7(0xc0c0c0c0ffffffff), rs1:x25(0xc0c0c0c0c0c0c0c0), rs2:x10(0x3f3f3f3f3f3f3f3f)
    TEST_RR_OP(aes64ks2, x7, x25, x10, 0xc0c0c0c0ffffffff, 0xc0c0c0c0c0c0c0c0, 0x3f3f3f3f3f3f3f3f, x1, 16, x2)

aes64ks2_02_inst_193:
    // Test 193:  Test with dataset: sbox64
    // result rd:x8(0xc1c1c1c1ffffffff), rs1:x24(0xc1c1c1c1c1c1c1c1), rs2:x9(0x3e3e3e3e3e3e3e3e)
    TEST_RR_OP(aes64ks2, x8, x24, x9, 0xc1c1c1c1ffffffff, 0xc1c1c1c1c1c1c1c1, 0x3e3e3e3e3e3e3e3e, x1, 24, x2)

aes64ks2_02_inst_194:
    // Test 194:  Test with dataset: sbox64
    // result rd:x9(0xc2c2c2c2ffffffff), rs1:x23(0xc2c2c2c2c2c2c2c2), rs2:x8(0x3d3d3d3d3d3d3d3d)
    TEST_RR_OP(aes64ks2, x9, x23, x8, 0xc2c2c2c2ffffffff, 0xc2c2c2c2c2c2c2c2, 0x3d3d3d3d3d3d3d3d, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_40_0)


aes64ks2_02_inst_195:
    // Test 195:  Test with dataset: sbox64
    // result rd:x10(0xc3c3c3c3ffffffff), rs1:x22(0xc3c3c3c3c3c3c3c3), rs2:x7(0x3c3c3c3c3c3c3c3c)
    TEST_RR_OP(aes64ks2, x10, x22, x7, 0xc3c3c3c3ffffffff, 0xc3c3c3c3c3c3c3c3, 0x3c3c3c3c3c3c3c3c, x1, 0, x2)

aes64ks2_02_inst_196:
    // Test 196:  Test with dataset: sbox64
    // result rd:x11(0xc4c4c4c4ffffffff), rs1:x21(0xc4c4c4c4c4c4c4c4), rs2:x6(0x3b3b3b3b3b3b3b3b)
    TEST_RR_OP(aes64ks2, x11, x21, x6, 0xc4c4c4c4ffffffff, 0xc4c4c4c4c4c4c4c4, 0x3b3b3b3b3b3b3b3b, x1, 8, x2)

aes64ks2_02_inst_197:
    // Test 197:  Test with dataset: sbox64
    // result rd:x12(0xc5c5c5c5ffffffff), rs1:x20(0xc5c5c5c5c5c5c5c5), rs2:x5(0x3a3a3a3a3a3a3a3a)
    TEST_RR_OP(aes64ks2, x12, x20, x5, 0xc5c5c5c5ffffffff, 0xc5c5c5c5c5c5c5c5, 0x3a3a3a3a3a3a3a3a, x1, 16, x2)

aes64ks2_02_inst_198:
    // Test 198:  Test with dataset: sbox64
    // result rd:x13(0xc6c6c6c6ffffffff), rs1:x19(0xc6c6c6c6c6c6c6c6), rs2:x4(0x3939393939393939)
    TEST_RR_OP(aes64ks2, x13, x19, x4, 0xc6c6c6c6ffffffff, 0xc6c6c6c6c6c6c6c6, 0x3939393939393939, x1, 24, x2)

aes64ks2_02_inst_199:
    // Test 199:  Test with dataset: sbox64
    // result rd:x14(0xc7c7c7c7ffffffff), rs1:x18(0xc7c7c7c7c7c7c7c7), rs2:x3(0x3838383838383838)
    TEST_RR_OP(aes64ks2, x14, x18, x3, 0xc7c7c7c7ffffffff, 0xc7c7c7c7c7c7c7c7, 0x3838383838383838, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x3,signature_41_0)


aes64ks2_02_inst_200:
    // Test 200:  Test with dataset: sbox64
    // result rd:x15(0xc8c8c8c8ffffffff), rs1:x17(0xc8c8c8c8c8c8c8c8), rs2:x2(0x3737373737373737)
    TEST_RR_OP(aes64ks2, x15, x17, x2, 0xc8c8c8c8ffffffff, 0xc8c8c8c8c8c8c8c8, 0x3737373737373737, x3, 0, x4)

aes64ks2_02_inst_201:
    // Test 201:  Test with dataset: sbox64
    // result rd:x16(0xc9c9c9c9ffffffff), rs1:x16(0xc9c9c9c9c9c9c9c9), rs2:x1(0x3636363636363636)
    TEST_RR_OP(aes64ks2, x16, x16, x1, 0xc9c9c9c9ffffffff, 0xc9c9c9c9c9c9c9c9, 0x3636363636363636, x3, 8, x4)

aes64ks2_02_inst_202:
    // Test 202:  Test with dataset: sbox64
    // result rd:x17(0xcacacacaffffffff), rs1:x15(0xcacacacacacacaca), rs2:x31(0x3535353535353535)
    TEST_RR_OP(aes64ks2, x17, x15, x31, 0xcacacacaffffffff, 0xcacacacacacacaca, 0x3535353535353535, x3, 16, x4)

aes64ks2_02_inst_203:
    // Test 203:  Test with dataset: sbox64
    // result rd:x18(0xcbcbcbcbffffffff), rs1:x14(0xcbcbcbcbcbcbcbcb), rs2:x30(0x3434343434343434)
    TEST_RR_OP(aes64ks2, x18, x14, x30, 0xcbcbcbcbffffffff, 0xcbcbcbcbcbcbcbcb, 0x3434343434343434, x3, 24, x4)

aes64ks2_02_inst_204:
    // Test 204:  Test with dataset: sbox64
    // result rd:x19(0xccccccccffffffff), rs1:x13(0xcccccccccccccccc), rs2:x29(0x3333333333333333)
    TEST_RR_OP(aes64ks2, x19, x13, x29, 0xccccccccffffffff, 0xcccccccccccccccc, 0x3333333333333333, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_42_0)


aes64ks2_02_inst_205:
    // Test 205:  Test with dataset: sbox64
    // result rd:x20(0xcdcdcdcdffffffff), rs1:x12(0xcdcdcdcdcdcdcdcd), rs2:x28(0x3232323232323232)
    TEST_RR_OP(aes64ks2, x20, x12, x28, 0xcdcdcdcdffffffff, 0xcdcdcdcdcdcdcdcd, 0x3232323232323232, x1, 0, x2)

aes64ks2_02_inst_206:
    // Test 206:  Test with dataset: sbox64
    // result rd:x21(0xcecececeffffffff), rs1:x11(0xcececececececece), rs2:x27(0x3131313131313131)
    TEST_RR_OP(aes64ks2, x21, x11, x27, 0xcecececeffffffff, 0xcececececececece, 0x3131313131313131, x1, 8, x2)

aes64ks2_02_inst_207:
    // Test 207:  Test with dataset: sbox64
    // result rd:x22(0xcfcfcfcfffffffff), rs1:x10(0xcfcfcfcfcfcfcfcf), rs2:x26(0x3030303030303030)
    TEST_RR_OP(aes64ks2, x22, x10, x26, 0xcfcfcfcfffffffff, 0xcfcfcfcfcfcfcfcf, 0x3030303030303030, x1, 16, x2)

aes64ks2_02_inst_208:
    // Test 208:  Test with dataset: sbox64
    // result rd:x23(0xd0d0d0d0ffffffff), rs1:x9(0xd0d0d0d0d0d0d0d0), rs2:x25(0x2f2f2f2f2f2f2f2f)
    TEST_RR_OP(aes64ks2, x23, x9, x25, 0xd0d0d0d0ffffffff, 0xd0d0d0d0d0d0d0d0, 0x2f2f2f2f2f2f2f2f, x1, 24, x2)

aes64ks2_02_inst_209:
    // Test 209:  Test with dataset: sbox64
    // result rd:x24(0xd1d1d1d1ffffffff), rs1:x8(0xd1d1d1d1d1d1d1d1), rs2:x24(0x2e2e2e2e2e2e2e2e)
    TEST_RR_OP(aes64ks2, x24, x8, x24, 0xd1d1d1d1ffffffff, 0xd1d1d1d1d1d1d1d1, 0x2e2e2e2e2e2e2e2e, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_43_0)


aes64ks2_02_inst_210:
    // Test 210:  Test with dataset: sbox64
    // result rd:x25(0xd2d2d2d2ffffffff), rs1:x7(0xd2d2d2d2d2d2d2d2), rs2:x23(0x2d2d2d2d2d2d2d2d)
    TEST_RR_OP(aes64ks2, x25, x7, x23, 0xd2d2d2d2ffffffff, 0xd2d2d2d2d2d2d2d2, 0x2d2d2d2d2d2d2d2d, x1, 0, x2)

aes64ks2_02_inst_211:
    // Test 211:  Test with dataset: sbox64
    // result rd:x26(0xd3d3d3d3ffffffff), rs1:x6(0xd3d3d3d3d3d3d3d3), rs2:x22(0x2c2c2c2c2c2c2c2c)
    TEST_RR_OP(aes64ks2, x26, x6, x22, 0xd3d3d3d3ffffffff, 0xd3d3d3d3d3d3d3d3, 0x2c2c2c2c2c2c2c2c, x1, 8, x2)

aes64ks2_02_inst_212:
    // Test 212:  Test with dataset: sbox64
    // result rd:x27(0xd4d4d4d4ffffffff), rs1:x5(0xd4d4d4d4d4d4d4d4), rs2:x21(0x2b2b2b2b2b2b2b2b)
    TEST_RR_OP(aes64ks2, x27, x5, x21, 0xd4d4d4d4ffffffff, 0xd4d4d4d4d4d4d4d4, 0x2b2b2b2b2b2b2b2b, x1, 16, x2)

aes64ks2_02_inst_213:
    // Test 213:  Test with dataset: sbox64
    // result rd:x28(0xd5d5d5d5ffffffff), rs1:x4(0xd5d5d5d5d5d5d5d5), rs2:x20(0x2a2a2a2a2a2a2a2a)
    TEST_RR_OP(aes64ks2, x28, x4, x20, 0xd5d5d5d5ffffffff, 0xd5d5d5d5d5d5d5d5, 0x2a2a2a2a2a2a2a2a, x1, 24, x2)

aes64ks2_02_inst_214:
    // Test 214:  Test with dataset: sbox64
    // result rd:x29(0xd6d6d6d6ffffffff), rs1:x3(0xd6d6d6d6d6d6d6d6), rs2:x19(0x2929292929292929)
    TEST_RR_OP(aes64ks2, x29, x3, x19, 0xd6d6d6d6ffffffff, 0xd6d6d6d6d6d6d6d6, 0x2929292929292929, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x4,signature_44_0)


aes64ks2_02_inst_215:
    // Test 215:  Test with dataset: sbox64
    // result rd:x30(0xd7d7d7d7ffffffff), rs1:x2(0xd7d7d7d7d7d7d7d7), rs2:x18(0x2828282828282828)
    TEST_RR_OP(aes64ks2, x30, x2, x18, 0xd7d7d7d7ffffffff, 0xd7d7d7d7d7d7d7d7, 0x2828282828282828, x4, 0, x5)

aes64ks2_02_inst_216:
    // Test 216:  Test with dataset: sbox64
    // result rd:x31(0xd8d8d8d8ffffffff), rs1:x1(0xd8d8d8d8d8d8d8d8), rs2:x17(0x2727272727272727)
    TEST_RR_OP(aes64ks2, x31, x1, x17, 0xd8d8d8d8ffffffff, 0xd8d8d8d8d8d8d8d8, 0x2727272727272727, x4, 8, x5)

aes64ks2_02_inst_217:
    // Test 217:  Test with dataset: sbox64
    // result rd:x1(0xd9d9d9d9ffffffff), rs1:x31(0xd9d9d9d9d9d9d9d9), rs2:x16(0x2626262626262626)
    TEST_RR_OP(aes64ks2, x1, x31, x16, 0xd9d9d9d9ffffffff, 0xd9d9d9d9d9d9d9d9, 0x2626262626262626, x4, 16, x5)

aes64ks2_02_inst_218:
    // Test 218:  Test with dataset: sbox64
    // result rd:x2(0xdadadadaffffffff), rs1:x30(0xdadadadadadadada), rs2:x15(0x2525252525252525)
    TEST_RR_OP(aes64ks2, x2, x30, x15, 0xdadadadaffffffff, 0xdadadadadadadada, 0x2525252525252525, x4, 24, x5)

aes64ks2_02_inst_219:
    // Test 219:  Test with dataset: sbox64
    // result rd:x3(0xdbdbdbdbffffffff), rs1:x29(0xdbdbdbdbdbdbdbdb), rs2:x14(0x2424242424242424)
    TEST_RR_OP(aes64ks2, x3, x29, x14, 0xdbdbdbdbffffffff, 0xdbdbdbdbdbdbdbdb, 0x2424242424242424, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_45_0)


aes64ks2_02_inst_220:
    // Test 220:  Test with dataset: sbox64
    // result rd:x4(0xdcdcdcdcffffffff), rs1:x28(0xdcdcdcdcdcdcdcdc), rs2:x13(0x2323232323232323)
    TEST_RR_OP(aes64ks2, x4, x28, x13, 0xdcdcdcdcffffffff, 0xdcdcdcdcdcdcdcdc, 0x2323232323232323, x1, 0, x2)

aes64ks2_02_inst_221:
    // Test 221:  Test with dataset: sbox64
    // result rd:x5(0xddddddddffffffff), rs1:x27(0xdddddddddddddddd), rs2:x12(0x2222222222222222)
    TEST_RR_OP(aes64ks2, x5, x27, x12, 0xddddddddffffffff, 0xdddddddddddddddd, 0x2222222222222222, x1, 8, x2)

aes64ks2_02_inst_222:
    // Test 222:  Test with dataset: sbox64
    // result rd:x6(0xdedededeffffffff), rs1:x26(0xdededededededede), rs2:x11(0x2121212121212121)
    TEST_RR_OP(aes64ks2, x6, x26, x11, 0xdedededeffffffff, 0xdededededededede, 0x2121212121212121, x1, 16, x2)

aes64ks2_02_inst_223:
    // Test 223:  Test with dataset: sbox64
    // result rd:x7(0xdfdfdfdfffffffff), rs1:x25(0xdfdfdfdfdfdfdfdf), rs2:x10(0x2020202020202020)
    TEST_RR_OP(aes64ks2, x7, x25, x10, 0xdfdfdfdfffffffff, 0xdfdfdfdfdfdfdfdf, 0x2020202020202020, x1, 24, x2)

aes64ks2_02_inst_224:
    // Test 224:  Test with dataset: sbox64
    // result rd:x8(0xe0e0e0e0ffffffff), rs1:x24(0xe0e0e0e0e0e0e0e0), rs2:x9(0x1f1f1f1f1f1f1f1f)
    TEST_RR_OP(aes64ks2, x8, x24, x9, 0xe0e0e0e0ffffffff, 0xe0e0e0e0e0e0e0e0, 0x1f1f1f1f1f1f1f1f, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_46_0)


aes64ks2_02_inst_225:
    // Test 225:  Test with dataset: sbox64
    // result rd:x9(0xe1e1e1e1ffffffff), rs1:x23(0xe1e1e1e1e1e1e1e1), rs2:x8(0x1e1e1e1e1e1e1e1e)
    TEST_RR_OP(aes64ks2, x9, x23, x8, 0xe1e1e1e1ffffffff, 0xe1e1e1e1e1e1e1e1, 0x1e1e1e1e1e1e1e1e, x1, 0, x2)

aes64ks2_02_inst_226:
    // Test 226:  Test with dataset: sbox64
    // result rd:x10(0xe2e2e2e2ffffffff), rs1:x22(0xe2e2e2e2e2e2e2e2), rs2:x7(0x1d1d1d1d1d1d1d1d)
    TEST_RR_OP(aes64ks2, x10, x22, x7, 0xe2e2e2e2ffffffff, 0xe2e2e2e2e2e2e2e2, 0x1d1d1d1d1d1d1d1d, x1, 8, x2)

aes64ks2_02_inst_227:
    // Test 227:  Test with dataset: sbox64
    // result rd:x11(0xe3e3e3e3ffffffff), rs1:x21(0xe3e3e3e3e3e3e3e3), rs2:x6(0x1c1c1c1c1c1c1c1c)
    TEST_RR_OP(aes64ks2, x11, x21, x6, 0xe3e3e3e3ffffffff, 0xe3e3e3e3e3e3e3e3, 0x1c1c1c1c1c1c1c1c, x1, 16, x2)

aes64ks2_02_inst_228:
    // Test 228:  Test with dataset: sbox64
    // result rd:x12(0xe4e4e4e4ffffffff), rs1:x20(0xe4e4e4e4e4e4e4e4), rs2:x5(0x1b1b1b1b1b1b1b1b)
    TEST_RR_OP(aes64ks2, x12, x20, x5, 0xe4e4e4e4ffffffff, 0xe4e4e4e4e4e4e4e4, 0x1b1b1b1b1b1b1b1b, x1, 24, x2)

aes64ks2_02_inst_229:
    // Test 229:  Test with dataset: sbox64
    // result rd:x13(0xe5e5e5e5ffffffff), rs1:x19(0xe5e5e5e5e5e5e5e5), rs2:x4(0x1a1a1a1a1a1a1a1a)
    TEST_RR_OP(aes64ks2, x13, x19, x4, 0xe5e5e5e5ffffffff, 0xe5e5e5e5e5e5e5e5, 0x1a1a1a1a1a1a1a1a, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x4,signature_47_0)


aes64ks2_02_inst_230:
    // Test 230:  Test with dataset: sbox64
    // result rd:x14(0xe6e6e6e6ffffffff), rs1:x18(0xe6e6e6e6e6e6e6e6), rs2:x3(0x1919191919191919)
    TEST_RR_OP(aes64ks2, x14, x18, x3, 0xe6e6e6e6ffffffff, 0xe6e6e6e6e6e6e6e6, 0x1919191919191919, x4, 0, x5)

aes64ks2_02_inst_231:
    // Test 231:  Test with dataset: sbox64
    // result rd:x15(0xe7e7e7e7ffffffff), rs1:x17(0xe7e7e7e7e7e7e7e7), rs2:x2(0x1818181818181818)
    TEST_RR_OP(aes64ks2, x15, x17, x2, 0xe7e7e7e7ffffffff, 0xe7e7e7e7e7e7e7e7, 0x1818181818181818, x4, 8, x5)

aes64ks2_02_inst_232:
    // Test 232:  Test with dataset: sbox64
    // result rd:x16(0xe8e8e8e8ffffffff), rs1:x16(0xe8e8e8e8e8e8e8e8), rs2:x1(0x1717171717171717)
    TEST_RR_OP(aes64ks2, x16, x16, x1, 0xe8e8e8e8ffffffff, 0xe8e8e8e8e8e8e8e8, 0x1717171717171717, x4, 16, x5)

aes64ks2_02_inst_233:
    // Test 233:  Test with dataset: sbox64
    // result rd:x17(0xe9e9e9e9ffffffff), rs1:x15(0xe9e9e9e9e9e9e9e9), rs2:x31(0x1616161616161616)
    TEST_RR_OP(aes64ks2, x17, x15, x31, 0xe9e9e9e9ffffffff, 0xe9e9e9e9e9e9e9e9, 0x1616161616161616, x4, 24, x5)

aes64ks2_02_inst_234:
    // Test 234:  Test with dataset: sbox64
    // result rd:x18(0xeaeaeaeaffffffff), rs1:x14(0xeaeaeaeaeaeaeaea), rs2:x30(0x1515151515151515)
    TEST_RR_OP(aes64ks2, x18, x14, x30, 0xeaeaeaeaffffffff, 0xeaeaeaeaeaeaeaea, 0x1515151515151515, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_48_0)


aes64ks2_02_inst_235:
    // Test 235:  Test with dataset: sbox64
    // result rd:x19(0xebebebebffffffff), rs1:x13(0xebebebebebebebeb), rs2:x29(0x1414141414141414)
    TEST_RR_OP(aes64ks2, x19, x13, x29, 0xebebebebffffffff, 0xebebebebebebebeb, 0x1414141414141414, x1, 0, x2)

aes64ks2_02_inst_236:
    // Test 236:  Test with dataset: sbox64
    // result rd:x20(0xececececffffffff), rs1:x12(0xecececececececec), rs2:x28(0x1313131313131313)
    TEST_RR_OP(aes64ks2, x20, x12, x28, 0xececececffffffff, 0xecececececececec, 0x1313131313131313, x1, 8, x2)

aes64ks2_02_inst_237:
    // Test 237:  Test with dataset: sbox64
    // result rd:x21(0xededededffffffff), rs1:x11(0xedededededededed), rs2:x27(0x1212121212121212)
    TEST_RR_OP(aes64ks2, x21, x11, x27, 0xededededffffffff, 0xedededededededed, 0x1212121212121212, x1, 16, x2)

aes64ks2_02_inst_238:
    // Test 238:  Test with dataset: sbox64
    // result rd:x22(0xeeeeeeeeffffffff), rs1:x10(0xeeeeeeeeeeeeeeee), rs2:x26(0x1111111111111111)
    TEST_RR_OP(aes64ks2, x22, x10, x26, 0xeeeeeeeeffffffff, 0xeeeeeeeeeeeeeeee, 0x1111111111111111, x1, 24, x2)

aes64ks2_02_inst_239:
    // Test 239:  Test with dataset: sbox64
    // result rd:x23(0xefefefefffffffff), rs1:x9(0xefefefefefefefef), rs2:x25(0x1010101010101010)
    TEST_RR_OP(aes64ks2, x23, x9, x25, 0xefefefefffffffff, 0xefefefefefefefef, 0x1010101010101010, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_49_0)


aes64ks2_02_inst_240:
    // Test 240:  Test with dataset: sbox64
    // result rd:x24(0xf0f0f0f0ffffffff), rs1:x8(0xf0f0f0f0f0f0f0f0), rs2:x24(0x0f0f0f0f0f0f0f0f)
    TEST_RR_OP(aes64ks2, x24, x8, x24, 0xf0f0f0f0ffffffff, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f, x1, 0, x2)

aes64ks2_02_inst_241:
    // Test 241:  Test with dataset: sbox64
    // result rd:x25(0xf1f1f1f1ffffffff), rs1:x7(0xf1f1f1f1f1f1f1f1), rs2:x23(0x0e0e0e0e0e0e0e0e)
    TEST_RR_OP(aes64ks2, x25, x7, x23, 0xf1f1f1f1ffffffff, 0xf1f1f1f1f1f1f1f1, 0xe0e0e0e0e0e0e0e, x1, 8, x2)

aes64ks2_02_inst_242:
    // Test 242:  Test with dataset: sbox64
    // result rd:x26(0xf2f2f2f2ffffffff), rs1:x6(0xf2f2f2f2f2f2f2f2), rs2:x22(0x0d0d0d0d0d0d0d0d)
    TEST_RR_OP(aes64ks2, x26, x6, x22, 0xf2f2f2f2ffffffff, 0xf2f2f2f2f2f2f2f2, 0xd0d0d0d0d0d0d0d, x1, 16, x2)

aes64ks2_02_inst_243:
    // Test 243:  Test with dataset: sbox64
    // result rd:x27(0xf3f3f3f3ffffffff), rs1:x5(0xf3f3f3f3f3f3f3f3), rs2:x21(0x0c0c0c0c0c0c0c0c)
    TEST_RR_OP(aes64ks2, x27, x5, x21, 0xf3f3f3f3ffffffff, 0xf3f3f3f3f3f3f3f3, 0xc0c0c0c0c0c0c0c, x1, 24, x2)

aes64ks2_02_inst_244:
    // Test 244:  Test with dataset: sbox64
    // result rd:x28(0xf4f4f4f4ffffffff), rs1:x4(0xf4f4f4f4f4f4f4f4), rs2:x20(0x0b0b0b0b0b0b0b0b)
    TEST_RR_OP(aes64ks2, x28, x4, x20, 0xf4f4f4f4ffffffff, 0xf4f4f4f4f4f4f4f4, 0xb0b0b0b0b0b0b0b, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x4,signature_50_0)


aes64ks2_02_inst_245:
    // Test 245:  Test with dataset: sbox64
    // result rd:x29(0xf5f5f5f5ffffffff), rs1:x3(0xf5f5f5f5f5f5f5f5), rs2:x19(0x0a0a0a0a0a0a0a0a)
    TEST_RR_OP(aes64ks2, x29, x3, x19, 0xf5f5f5f5ffffffff, 0xf5f5f5f5f5f5f5f5, 0xa0a0a0a0a0a0a0a, x4, 0, x5)

aes64ks2_02_inst_246:
    // Test 246:  Test with dataset: sbox64
    // result rd:x30(0xf6f6f6f6ffffffff), rs1:x2(0xf6f6f6f6f6f6f6f6), rs2:x18(0x0909090909090909)
    TEST_RR_OP(aes64ks2, x30, x2, x18, 0xf6f6f6f6ffffffff, 0xf6f6f6f6f6f6f6f6, 0x909090909090909, x4, 8, x5)

aes64ks2_02_inst_247:
    // Test 247:  Test with dataset: sbox64
    // result rd:x31(0xf7f7f7f7ffffffff), rs1:x1(0xf7f7f7f7f7f7f7f7), rs2:x17(0x0808080808080808)
    TEST_RR_OP(aes64ks2, x31, x1, x17, 0xf7f7f7f7ffffffff, 0xf7f7f7f7f7f7f7f7, 0x808080808080808, x4, 16, x5)

aes64ks2_02_inst_248:
    // Test 248:  Test with dataset: sbox64
    // result rd:x1(0xf8f8f8f8ffffffff), rs1:x31(0xf8f8f8f8f8f8f8f8), rs2:x16(0x0707070707070707)
    TEST_RR_OP(aes64ks2, x1, x31, x16, 0xf8f8f8f8ffffffff, 0xf8f8f8f8f8f8f8f8, 0x707070707070707, x4, 24, x5)

aes64ks2_02_inst_249:
    // Test 249:  Test with dataset: sbox64
    // result rd:x2(0xf9f9f9f9ffffffff), rs1:x30(0xf9f9f9f9f9f9f9f9), rs2:x15(0x0606060606060606)
    TEST_RR_OP(aes64ks2, x2, x30, x15, 0xf9f9f9f9ffffffff, 0xf9f9f9f9f9f9f9f9, 0x606060606060606, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_51_0)


aes64ks2_02_inst_250:
    // Test 250:  Test with dataset: sbox64
    // result rd:x3(0xfafafafaffffffff), rs1:x29(0xfafafafafafafafa), rs2:x14(0x0505050505050505)
    TEST_RR_OP(aes64ks2, x3, x29, x14, 0xfafafafaffffffff, 0xfafafafafafafafa, 0x505050505050505, x1, 0, x2)

aes64ks2_02_inst_251:
    // Test 251:  Test with dataset: sbox64
    // result rd:x4(0xfbfbfbfbffffffff), rs1:x28(0xfbfbfbfbfbfbfbfb), rs2:x13(0x0404040404040404)
    TEST_RR_OP(aes64ks2, x4, x28, x13, 0xfbfbfbfbffffffff, 0xfbfbfbfbfbfbfbfb, 0x404040404040404, x1, 8, x2)

aes64ks2_02_inst_252:
    // Test 252:  Test with dataset: sbox64
    // result rd:x5(0xfcfcfcfcffffffff), rs1:x27(0xfcfcfcfcfcfcfcfc), rs2:x12(0x0303030303030303)
    TEST_RR_OP(aes64ks2, x5, x27, x12, 0xfcfcfcfcffffffff, 0xfcfcfcfcfcfcfcfc, 0x303030303030303, x1, 16, x2)

aes64ks2_02_inst_253:
    // Test 253:  Test with dataset: sbox64
    // result rd:x6(0xfdfdfdfdffffffff), rs1:x26(0xfdfdfdfdfdfdfdfd), rs2:x11(0x0202020202020202)
    TEST_RR_OP(aes64ks2, x6, x26, x11, 0xfdfdfdfdffffffff, 0xfdfdfdfdfdfdfdfd, 0x202020202020202, x1, 24, x2)

aes64ks2_02_inst_254:
    // Test 254:  Test with dataset: sbox64
    // result rd:x7(0xfefefefeffffffff), rs1:x25(0xfefefefefefefefe), rs2:x10(0x0101010101010101)
    TEST_RR_OP(aes64ks2, x7, x25, x10, 0xfefefefeffffffff, 0xfefefefefefefefe, 0x101010101010101, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks2)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks2)

	RVTEST_SIGBASE(x1,signature_52_0)


aes64ks2_02_inst_255:
    // Test 255:  Test with dataset: sbox64
    // result rd:x8(0xffffffffffffffff), rs1:x24(0xffffffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64ks2, x8, x24, x9, 0xffffffffffffffff, 0xffffffffffffffff, 0x0, x1, 0, x2)
	
#endif


RVTEST_CODE_END aes64ks2_02_code_end
RVTEST_CODE_BEGIN packh_01_init packh_01_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x6,signature_1_0)


packh_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x0000000000002395), rs1:x31(0x10fd3dedadea5195), rs2:x16(0xdf7f3844121bcc23)
    TEST_RR_OP(packh, x1, x31, x16, 0x0000000000002395, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x6, 0, x7)

packh_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x0000000000005bc1), rs1:x30(0xbd295ce2d2ffbec1), rs2:x15(0xf5adb41aa47d105b)
    TEST_RR_OP(packh, x2, x30, x15, 0x0000000000005bc1, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x6, 8, x7)

packh_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0x000000000000c0bb), rs1:x29(0xc9649f05a8e1a8bb), rs2:x14(0x82f6747f707af2c0)
    TEST_RR_OP(packh, x3, x29, x14, 0x000000000000c0bb, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x6, 16, x7)

packh_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x000000000000c3cb), rs1:x28(0x3541291848c99fcb), rs2:x13(0x73a92fd4e19bfbc3)
    TEST_RR_OP(packh, x4, x28, x13, 0x000000000000c3cb, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x6, 24, x7)

packh_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x000000000000af4f), rs1:x27(0x10a24740461d524f), rs2:x12(0x546b0e54528a10af)
    TEST_RR_OP(packh, x5, x27, x12, 0x000000000000af4f, 0x10a24740461d524f, 0x546b0e54528a10af, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_2_0)


packh_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x0000000000004faf), rs1:x26(0x546b0e54528a10af), rs2:x11(0x10a24740461d524f)
    TEST_RR_OP(packh, x6, x26, x11, 0x0000000000004faf, 0x546b0e54528a10af, 0x10a24740461d524f, x1, 0, x2)

packh_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x000000000000cbc3), rs1:x25(0x73a92fd4e19bfbc3), rs2:x10(0x3541291848c99fcb)
    TEST_RR_OP(packh, x7, x25, x10, 0x000000000000cbc3, 0x73a92fd4e19bfbc3, 0x3541291848c99fcb, x1, 8, x2)

packh_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x000000000000bbc0), rs1:x24(0x82f6747f707af2c0), rs2:x9(0xc9649f05a8e1a8bb)
    TEST_RR_OP(packh, x8, x24, x9, 0x000000000000bbc0, 0x82f6747f707af2c0, 0xc9649f05a8e1a8bb, x1, 16, x2)

packh_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0x000000000000c15b), rs1:x23(0xf5adb41aa47d105b), rs2:x8(0xbd295ce2d2ffbec1)
    TEST_RR_OP(packh, x9, x23, x8, 0x000000000000c15b, 0xf5adb41aa47d105b, 0xbd295ce2d2ffbec1, x1, 24, x2)

packh_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0x0000000000009523), rs1:x22(0xdf7f3844121bcc23), rs2:x7(0x10fd3dedadea5195)
    TEST_RR_OP(packh, x10, x22, x7, 0x0000000000009523, 0xdf7f3844121bcc23, 0x10fd3dedadea5195, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_3_0)


packh_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x000000000000ff01), rs1:x21(0x0000000000000001), rs2:x6(0xffffffffffffffff)
    TEST_RR_OP(packh, x11, x21, x6, 0x000000000000ff01, 0x1, 0xffffffffffffffff, x1, 0, x7)

packh_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x000000000000ff02), rs1:x20(0x0000000000000002), rs2:x5(0x7fffffffffffffff)
    TEST_RR_OP(packh, x12, x20, x5, 0x000000000000ff02, 0x2, 0x7fffffffffffffff, x1, 8, x7)

packh_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x000000000000ff04), rs1:x19(0x0000000000000004), rs2:x4(0xbfffffffffffffff)
    TEST_RR_OP(packh, x13, x19, x4, 0x000000000000ff04, 0x4, 0xbfffffffffffffff, x1, 16, x7)

packh_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x000000000000ff08), rs1:x18(0x0000000000000008), rs2:x3(0xdfffffffffffffff)
    TEST_RR_OP(packh, x14, x18, x3, 0x000000000000ff08, 0x8, 0xdfffffffffffffff, x1, 24, x7)

packh_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x000000000000ff10), rs1:x17(0x0000000000000010), rs2:x2(0xefffffffffffffff)
    TEST_RR_OP(packh, x15, x17, x2, 0x000000000000ff10, 0x10, 0xefffffffffffffff, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x2,signature_4_0)


packh_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x000000000000ff20), rs1:x16(0x0000000000000020), rs2:x1(0xf7ffffffffffffff)
    TEST_RR_OP(packh, x16, x16, x1, 0x000000000000ff20, 0x20, 0xf7ffffffffffffff, x2, 0, x3)

packh_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x000000000000ff40), rs1:x15(0x0000000000000040), rs2:x31(0xfbffffffffffffff)
    TEST_RR_OP(packh, x17, x15, x31, 0x000000000000ff40, 0x40, 0xfbffffffffffffff, x2, 8, x3)

packh_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x000000000000ff80), rs1:x14(0x0000000000000080), rs2:x30(0xfdffffffffffffff)
    TEST_RR_OP(packh, x18, x14, x30, 0x000000000000ff80, 0x80, 0xfdffffffffffffff, x2, 16, x3)

packh_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x000000000000ff00), rs1:x13(0x0000000000000100), rs2:x29(0xfeffffffffffffff)
    TEST_RR_OP(packh, x19, x13, x29, 0x000000000000ff00, 0x100, 0xfeffffffffffffff, x2, 24, x3)

packh_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x000000000000ff00), rs1:x12(0x0000000000000200), rs2:x28(0xff7fffffffffffff)
    TEST_RR_OP(packh, x20, x12, x28, 0x000000000000ff00, 0x200, 0xff7fffffffffffff, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_5_0)


packh_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x000000000000ff00), rs1:x11(0x0000000000000400), rs2:x27(0xffbfffffffffffff)
    TEST_RR_OP(packh, x21, x11, x27, 0x000000000000ff00, 0x400, 0xffbfffffffffffff, x1, 0, x2)

packh_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x000000000000ff00), rs1:x10(0x0000000000000800), rs2:x26(0xffdfffffffffffff)
    TEST_RR_OP(packh, x22, x10, x26, 0x000000000000ff00, 0x800, 0xffdfffffffffffff, x1, 8, x2)

packh_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x000000000000ff00), rs1:x9(0x0000000000001000), rs2:x25(0xffefffffffffffff)
    TEST_RR_OP(packh, x23, x9, x25, 0x000000000000ff00, 0x1000, 0xffefffffffffffff, x1, 16, x2)

packh_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x000000000000ff00), rs1:x8(0x0000000000002000), rs2:x24(0xfff7ffffffffffff)
    TEST_RR_OP(packh, x24, x8, x24, 0x000000000000ff00, 0x2000, 0xfff7ffffffffffff, x1, 24, x2)

packh_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x000000000000ff00), rs1:x7(0x0000000000004000), rs2:x23(0xfffbffffffffffff)
    TEST_RR_OP(packh, x25, x7, x23, 0x000000000000ff00, 0x4000, 0xfffbffffffffffff, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_6_0)


packh_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x000000000000ff00), rs1:x6(0x0000000000008000), rs2:x22(0xfffdffffffffffff)
    TEST_RR_OP(packh, x26, x6, x22, 0x000000000000ff00, 0x8000, 0xfffdffffffffffff, x1, 0, x7)

packh_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x000000000000ff00), rs1:x5(0x0000000000010000), rs2:x21(0xfffeffffffffffff)
    TEST_RR_OP(packh, x27, x5, x21, 0x000000000000ff00, 0x10000, 0xfffeffffffffffff, x1, 8, x7)

packh_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x000000000000ff00), rs1:x4(0x0000000000020000), rs2:x20(0xffff7fffffffffff)
    TEST_RR_OP(packh, x28, x4, x20, 0x000000000000ff00, 0x20000, 0xffff7fffffffffff, x1, 16, x7)

packh_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x000000000000ff00), rs1:x3(0x0000000000040000), rs2:x19(0xffffbfffffffffff)
    TEST_RR_OP(packh, x29, x3, x19, 0x000000000000ff00, 0x40000, 0xffffbfffffffffff, x1, 24, x7)

packh_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x000000000000ff00), rs1:x2(0x0000000000080000), rs2:x18(0xffffdfffffffffff)
    TEST_RR_OP(packh, x30, x2, x18, 0x000000000000ff00, 0x80000, 0xffffdfffffffffff, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x5,signature_7_0)


packh_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x000000000000ff00), rs1:x1(0x0000000000100000), rs2:x17(0xffffefffffffffff)
    TEST_RR_OP(packh, x31, x1, x17, 0x000000000000ff00, 0x100000, 0xffffefffffffffff, x5, 0, x6)

packh_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x000000000000ff00), rs1:x31(0x0000000000200000), rs2:x16(0xfffff7ffffffffff)
    TEST_RR_OP(packh, x1, x31, x16, 0x000000000000ff00, 0x200000, 0xfffff7ffffffffff, x5, 8, x6)

packh_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x000000000000ff00), rs1:x30(0x0000000000400000), rs2:x15(0xfffffbffffffffff)
    TEST_RR_OP(packh, x2, x30, x15, 0x000000000000ff00, 0x400000, 0xfffffbffffffffff, x5, 16, x6)

packh_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x000000000000ff00), rs1:x29(0x0000000000800000), rs2:x14(0xfffffdffffffffff)
    TEST_RR_OP(packh, x3, x29, x14, 0x000000000000ff00, 0x800000, 0xfffffdffffffffff, x5, 24, x6)

packh_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x000000000000ff00), rs1:x28(0x0000000001000000), rs2:x13(0xfffffeffffffffff)
    TEST_RR_OP(packh, x4, x28, x13, 0x000000000000ff00, 0x1000000, 0xfffffeffffffffff, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_8_0)


packh_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x000000000000ff00), rs1:x27(0x0000000002000000), rs2:x12(0xffffff7fffffffff)
    TEST_RR_OP(packh, x5, x27, x12, 0x000000000000ff00, 0x2000000, 0xffffff7fffffffff, x1, 0, x2)

packh_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x000000000000ff00), rs1:x26(0x0000000004000000), rs2:x11(0xffffffbfffffffff)
    TEST_RR_OP(packh, x6, x26, x11, 0x000000000000ff00, 0x4000000, 0xffffffbfffffffff, x1, 8, x2)

packh_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x000000000000ff00), rs1:x25(0x0000000008000000), rs2:x10(0xffffffdfffffffff)
    TEST_RR_OP(packh, x7, x25, x10, 0x000000000000ff00, 0x8000000, 0xffffffdfffffffff, x1, 16, x2)

packh_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x000000000000ff00), rs1:x24(0x0000000010000000), rs2:x9(0xffffffefffffffff)
    TEST_RR_OP(packh, x8, x24, x9, 0x000000000000ff00, 0x10000000, 0xffffffefffffffff, x1, 24, x2)

packh_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x000000000000ff00), rs1:x23(0x0000000020000000), rs2:x8(0xfffffff7ffffffff)
    TEST_RR_OP(packh, x9, x23, x8, 0x000000000000ff00, 0x20000000, 0xfffffff7ffffffff, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_9_0)


packh_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x000000000000ff00), rs1:x22(0x0000000040000000), rs2:x7(0xfffffffbffffffff)
    TEST_RR_OP(packh, x10, x22, x7, 0x000000000000ff00, 0x40000000, 0xfffffffbffffffff, x1, 0, x2)

packh_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x000000000000ff00), rs1:x21(0x0000000080000000), rs2:x6(0xfffffffdffffffff)
    TEST_RR_OP(packh, x11, x21, x6, 0x000000000000ff00, 0x80000000, 0xfffffffdffffffff, x1, 8, x2)

packh_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x000000000000ff00), rs1:x20(0x0000000100000000), rs2:x5(0xfffffffeffffffff)
    TEST_RR_OP(packh, x12, x20, x5, 0x000000000000ff00, 0x100000000, 0xfffffffeffffffff, x1, 16, x2)

packh_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x000000000000ff00), rs1:x19(0x0000000200000000), rs2:x4(0xffffffff7fffffff)
    TEST_RR_OP(packh, x13, x19, x4, 0x000000000000ff00, 0x200000000, 0xffffffff7fffffff, x1, 24, x2)

packh_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x000000000000ff00), rs1:x18(0x0000000400000000), rs2:x3(0xffffffffbfffffff)
    TEST_RR_OP(packh, x14, x18, x3, 0x000000000000ff00, 0x400000000, 0xffffffffbfffffff, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x3,signature_10_0)


packh_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x000000000000ff00), rs1:x17(0x0000000800000000), rs2:x2(0xffffffffdfffffff)
    TEST_RR_OP(packh, x15, x17, x2, 0x000000000000ff00, 0x800000000, 0xffffffffdfffffff, x3, 0, x4)

packh_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x000000000000ff00), rs1:x16(0x0000001000000000), rs2:x1(0xffffffffefffffff)
    TEST_RR_OP(packh, x16, x16, x1, 0x000000000000ff00, 0x1000000000, 0xffffffffefffffff, x3, 8, x4)

packh_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x000000000000ff00), rs1:x15(0x0000002000000000), rs2:x31(0xfffffffff7ffffff)
    TEST_RR_OP(packh, x17, x15, x31, 0x000000000000ff00, 0x2000000000, 0xfffffffff7ffffff, x3, 16, x4)

packh_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x000000000000ff00), rs1:x14(0x0000004000000000), rs2:x30(0xfffffffffbffffff)
    TEST_RR_OP(packh, x18, x14, x30, 0x000000000000ff00, 0x4000000000, 0xfffffffffbffffff, x3, 24, x4)

packh_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x000000000000ff00), rs1:x13(0x0000008000000000), rs2:x29(0xfffffffffdffffff)
    TEST_RR_OP(packh, x19, x13, x29, 0x000000000000ff00, 0x8000000000, 0xfffffffffdffffff, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_11_0)


packh_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x000000000000ff00), rs1:x12(0x0000010000000000), rs2:x28(0xfffffffffeffffff)
    TEST_RR_OP(packh, x20, x12, x28, 0x000000000000ff00, 0x10000000000, 0xfffffffffeffffff, x1, 0, x2)

packh_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x000000000000ff00), rs1:x11(0x0000020000000000), rs2:x27(0xffffffffff7fffff)
    TEST_RR_OP(packh, x21, x11, x27, 0x000000000000ff00, 0x20000000000, 0xffffffffff7fffff, x1, 8, x2)

packh_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x000000000000ff00), rs1:x10(0x0000040000000000), rs2:x26(0xffffffffffbfffff)
    TEST_RR_OP(packh, x22, x10, x26, 0x000000000000ff00, 0x40000000000, 0xffffffffffbfffff, x1, 16, x2)

packh_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x000000000000ff00), rs1:x9(0x0000080000000000), rs2:x25(0xffffffffffdfffff)
    TEST_RR_OP(packh, x23, x9, x25, 0x000000000000ff00, 0x80000000000, 0xffffffffffdfffff, x1, 24, x2)

packh_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x000000000000ff00), rs1:x8(0x0000100000000000), rs2:x24(0xffffffffffefffff)
    TEST_RR_OP(packh, x24, x8, x24, 0x000000000000ff00, 0x100000000000, 0xffffffffffefffff, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_12_0)


packh_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x000000000000ff00), rs1:x7(0x0000200000000000), rs2:x23(0xfffffffffff7ffff)
    TEST_RR_OP(packh, x25, x7, x23, 0x000000000000ff00, 0x200000000000, 0xfffffffffff7ffff, x1, 0, x2)

packh_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x000000000000ff00), rs1:x6(0x0000400000000000), rs2:x22(0xfffffffffffbffff)
    TEST_RR_OP(packh, x26, x6, x22, 0x000000000000ff00, 0x400000000000, 0xfffffffffffbffff, x1, 8, x2)

packh_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x000000000000ff00), rs1:x5(0x0000800000000000), rs2:x21(0xfffffffffffdffff)
    TEST_RR_OP(packh, x27, x5, x21, 0x000000000000ff00, 0x800000000000, 0xfffffffffffdffff, x1, 16, x2)

packh_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x000000000000ff00), rs1:x4(0x0001000000000000), rs2:x20(0xfffffffffffeffff)
    TEST_RR_OP(packh, x28, x4, x20, 0x000000000000ff00, 0x1000000000000, 0xfffffffffffeffff, x1, 24, x2)

packh_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x000000000000ff00), rs1:x3(0x0002000000000000), rs2:x19(0xffffffffffff7fff)
    TEST_RR_OP(packh, x29, x3, x19, 0x000000000000ff00, 0x2000000000000, 0xffffffffffff7fff, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x4,signature_13_0)


packh_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x000000000000ff00), rs1:x2(0x0004000000000000), rs2:x18(0xffffffffffffbfff)
    TEST_RR_OP(packh, x30, x2, x18, 0x000000000000ff00, 0x4000000000000, 0xffffffffffffbfff, x4, 0, x5)

packh_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x000000000000ff00), rs1:x1(0x0008000000000000), rs2:x17(0xffffffffffffdfff)
    TEST_RR_OP(packh, x31, x1, x17, 0x000000000000ff00, 0x8000000000000, 0xffffffffffffdfff, x4, 8, x5)

packh_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x000000000000ff00), rs1:x31(0x0010000000000000), rs2:x16(0xffffffffffffefff)
    TEST_RR_OP(packh, x1, x31, x16, 0x000000000000ff00, 0x10000000000000, 0xffffffffffffefff, x4, 16, x5)

packh_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x000000000000ff00), rs1:x30(0x0020000000000000), rs2:x15(0xfffffffffffff7ff)
    TEST_RR_OP(packh, x2, x30, x15, 0x000000000000ff00, 0x20000000000000, 0xfffffffffffff7ff, x4, 24, x5)

packh_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x000000000000ff00), rs1:x29(0x0040000000000000), rs2:x14(0xfffffffffffffbff)
    TEST_RR_OP(packh, x3, x29, x14, 0x000000000000ff00, 0x40000000000000, 0xfffffffffffffbff, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_14_0)


packh_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x000000000000ff00), rs1:x28(0x0080000000000000), rs2:x13(0xfffffffffffffdff)
    TEST_RR_OP(packh, x4, x28, x13, 0x000000000000ff00, 0x80000000000000, 0xfffffffffffffdff, x1, 0, x2)

packh_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x000000000000ff00), rs1:x27(0x0100000000000000), rs2:x12(0xfffffffffffffeff)
    TEST_RR_OP(packh, x5, x27, x12, 0x000000000000ff00, 0x100000000000000, 0xfffffffffffffeff, x1, 8, x2)

packh_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x0000000000007f00), rs1:x26(0x0200000000000000), rs2:x11(0xffffffffffffff7f)
    TEST_RR_OP(packh, x6, x26, x11, 0x0000000000007f00, 0x200000000000000, 0xffffffffffffff7f, x1, 16, x2)

packh_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x000000000000bf00), rs1:x25(0x0400000000000000), rs2:x10(0xffffffffffffffbf)
    TEST_RR_OP(packh, x7, x25, x10, 0x000000000000bf00, 0x400000000000000, 0xffffffffffffffbf, x1, 24, x2)

packh_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x000000000000df00), rs1:x24(0x0800000000000000), rs2:x9(0xffffffffffffffdf)
    TEST_RR_OP(packh, x8, x24, x9, 0x000000000000df00, 0x800000000000000, 0xffffffffffffffdf, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_15_0)


packh_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x000000000000ef00), rs1:x23(0x1000000000000000), rs2:x8(0xffffffffffffffef)
    TEST_RR_OP(packh, x9, x23, x8, 0x000000000000ef00, 0x1000000000000000, 0xffffffffffffffef, x1, 0, x2)

packh_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x000000000000f700), rs1:x22(0x2000000000000000), rs2:x7(0xfffffffffffffff7)
    TEST_RR_OP(packh, x10, x22, x7, 0x000000000000f700, 0x2000000000000000, 0xfffffffffffffff7, x1, 8, x2)

packh_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x000000000000fb00), rs1:x21(0x4000000000000000), rs2:x6(0xfffffffffffffffb)
    TEST_RR_OP(packh, x11, x21, x6, 0x000000000000fb00, 0x4000000000000000, 0xfffffffffffffffb, x1, 16, x2)

packh_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x000000000000fd00), rs1:x20(0x8000000000000000), rs2:x5(0xfffffffffffffffd)
    TEST_RR_OP(packh, x12, x20, x5, 0x000000000000fd00, 0x8000000000000000, 0xfffffffffffffffd, x1, 24, x2)

packh_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x000000000000fe00), rs1:x19(0x0000000000000000), rs2:x4(0xfffffffffffffffe)
    TEST_RR_OP(packh, x13, x19, x4, 0x000000000000fe00, 0x0, 0xfffffffffffffffe, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x4,signature_16_0)


packh_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0x00000000000000fe), rs1:x18(0xfffffffffffffffe), rs2:x3(0x0000000000000000)
    TEST_RR_OP(packh, x14, x18, x3, 0x00000000000000fe, 0xfffffffffffffffe, 0x0, x4, 0, x5)

packh_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0x00000000000000fd), rs1:x17(0xfffffffffffffffd), rs2:x2(0x8000000000000000)
    TEST_RR_OP(packh, x15, x17, x2, 0x00000000000000fd, 0xfffffffffffffffd, 0x8000000000000000, x4, 8, x5)

packh_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0x00000000000000fb), rs1:x16(0xfffffffffffffffb), rs2:x1(0x4000000000000000)
    TEST_RR_OP(packh, x16, x16, x1, 0x00000000000000fb, 0xfffffffffffffffb, 0x4000000000000000, x4, 16, x5)

packh_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0x00000000000000f7), rs1:x15(0xfffffffffffffff7), rs2:x31(0x2000000000000000)
    TEST_RR_OP(packh, x17, x15, x31, 0x00000000000000f7, 0xfffffffffffffff7, 0x2000000000000000, x4, 24, x5)

packh_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0x00000000000000ef), rs1:x14(0xffffffffffffffef), rs2:x30(0x1000000000000000)
    TEST_RR_OP(packh, x18, x14, x30, 0x00000000000000ef, 0xffffffffffffffef, 0x1000000000000000, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_17_0)


packh_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0x00000000000000df), rs1:x13(0xffffffffffffffdf), rs2:x29(0x0800000000000000)
    TEST_RR_OP(packh, x19, x13, x29, 0x00000000000000df, 0xffffffffffffffdf, 0x800000000000000, x1, 0, x2)

packh_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0x00000000000000bf), rs1:x12(0xffffffffffffffbf), rs2:x28(0x0400000000000000)
    TEST_RR_OP(packh, x20, x12, x28, 0x00000000000000bf, 0xffffffffffffffbf, 0x400000000000000, x1, 8, x2)

packh_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0x000000000000007f), rs1:x11(0xffffffffffffff7f), rs2:x27(0x0200000000000000)
    TEST_RR_OP(packh, x21, x11, x27, 0x000000000000007f, 0xffffffffffffff7f, 0x200000000000000, x1, 16, x2)

packh_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0x00000000000000ff), rs1:x10(0xfffffffffffffeff), rs2:x26(0x0100000000000000)
    TEST_RR_OP(packh, x22, x10, x26, 0x00000000000000ff, 0xfffffffffffffeff, 0x100000000000000, x1, 24, x2)

packh_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0x00000000000000ff), rs1:x9(0xfffffffffffffdff), rs2:x25(0x0080000000000000)
    TEST_RR_OP(packh, x23, x9, x25, 0x00000000000000ff, 0xfffffffffffffdff, 0x80000000000000, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_18_0)


packh_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0x00000000000000ff), rs1:x8(0xfffffffffffffbff), rs2:x24(0x0040000000000000)
    TEST_RR_OP(packh, x24, x8, x24, 0x00000000000000ff, 0xfffffffffffffbff, 0x40000000000000, x1, 0, x2)

packh_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0x00000000000000ff), rs1:x7(0xfffffffffffff7ff), rs2:x23(0x0020000000000000)
    TEST_RR_OP(packh, x25, x7, x23, 0x00000000000000ff, 0xfffffffffffff7ff, 0x20000000000000, x1, 8, x2)

packh_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0x00000000000000ff), rs1:x6(0xffffffffffffefff), rs2:x22(0x0010000000000000)
    TEST_RR_OP(packh, x26, x6, x22, 0x00000000000000ff, 0xffffffffffffefff, 0x10000000000000, x1, 16, x2)

packh_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0x00000000000000ff), rs1:x5(0xffffffffffffdfff), rs2:x21(0x0008000000000000)
    TEST_RR_OP(packh, x27, x5, x21, 0x00000000000000ff, 0xffffffffffffdfff, 0x8000000000000, x1, 24, x2)

packh_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0x00000000000000ff), rs1:x4(0xffffffffffffbfff), rs2:x20(0x0004000000000000)
    TEST_RR_OP(packh, x28, x4, x20, 0x00000000000000ff, 0xffffffffffffbfff, 0x4000000000000, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x4,signature_19_0)


packh_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0x00000000000000ff), rs1:x3(0xffffffffffff7fff), rs2:x19(0x0002000000000000)
    TEST_RR_OP(packh, x29, x3, x19, 0x00000000000000ff, 0xffffffffffff7fff, 0x2000000000000, x4, 0, x5)

packh_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0x00000000000000ff), rs1:x2(0xfffffffffffeffff), rs2:x18(0x0001000000000000)
    TEST_RR_OP(packh, x30, x2, x18, 0x00000000000000ff, 0xfffffffffffeffff, 0x1000000000000, x4, 8, x5)

packh_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0x00000000000000ff), rs1:x1(0xfffffffffffdffff), rs2:x17(0x0000800000000000)
    TEST_RR_OP(packh, x31, x1, x17, 0x00000000000000ff, 0xfffffffffffdffff, 0x800000000000, x4, 16, x5)

packh_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0x00000000000000ff), rs1:x31(0xfffffffffffbffff), rs2:x16(0x0000400000000000)
    TEST_RR_OP(packh, x1, x31, x16, 0x00000000000000ff, 0xfffffffffffbffff, 0x400000000000, x4, 24, x5)

packh_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0x00000000000000ff), rs1:x30(0xfffffffffff7ffff), rs2:x15(0x0000200000000000)
    TEST_RR_OP(packh, x2, x30, x15, 0x00000000000000ff, 0xfffffffffff7ffff, 0x200000000000, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_20_0)


packh_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0x00000000000000ff), rs1:x29(0xffffffffffefffff), rs2:x14(0x0000100000000000)
    TEST_RR_OP(packh, x3, x29, x14, 0x00000000000000ff, 0xffffffffffefffff, 0x100000000000, x1, 0, x2)

packh_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0x00000000000000ff), rs1:x28(0xffffffffffdfffff), rs2:x13(0x0000080000000000)
    TEST_RR_OP(packh, x4, x28, x13, 0x00000000000000ff, 0xffffffffffdfffff, 0x80000000000, x1, 8, x2)

packh_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0x00000000000000ff), rs1:x27(0xffffffffffbfffff), rs2:x12(0x0000040000000000)
    TEST_RR_OP(packh, x5, x27, x12, 0x00000000000000ff, 0xffffffffffbfffff, 0x40000000000, x1, 16, x2)

packh_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0x00000000000000ff), rs1:x26(0xffffffffff7fffff), rs2:x11(0x0000020000000000)
    TEST_RR_OP(packh, x6, x26, x11, 0x00000000000000ff, 0xffffffffff7fffff, 0x20000000000, x1, 24, x2)

packh_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0x00000000000000ff), rs1:x25(0xfffffffffeffffff), rs2:x10(0x0000010000000000)
    TEST_RR_OP(packh, x7, x25, x10, 0x00000000000000ff, 0xfffffffffeffffff, 0x10000000000, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_21_0)


packh_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0x00000000000000ff), rs1:x24(0xfffffffffdffffff), rs2:x9(0x0000008000000000)
    TEST_RR_OP(packh, x8, x24, x9, 0x00000000000000ff, 0xfffffffffdffffff, 0x8000000000, x1, 0, x2)

packh_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0x00000000000000ff), rs1:x23(0xfffffffffbffffff), rs2:x8(0x0000004000000000)
    TEST_RR_OP(packh, x9, x23, x8, 0x00000000000000ff, 0xfffffffffbffffff, 0x4000000000, x1, 8, x2)

packh_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0x00000000000000ff), rs1:x22(0xfffffffff7ffffff), rs2:x7(0x0000002000000000)
    TEST_RR_OP(packh, x10, x22, x7, 0x00000000000000ff, 0xfffffffff7ffffff, 0x2000000000, x1, 16, x2)

packh_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0x00000000000000ff), rs1:x21(0xffffffffefffffff), rs2:x6(0x0000001000000000)
    TEST_RR_OP(packh, x11, x21, x6, 0x00000000000000ff, 0xffffffffefffffff, 0x1000000000, x1, 24, x2)

packh_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0x00000000000000ff), rs1:x20(0xffffffffdfffffff), rs2:x5(0x0000000800000000)
    TEST_RR_OP(packh, x12, x20, x5, 0x00000000000000ff, 0xffffffffdfffffff, 0x800000000, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x5,signature_22_0)


packh_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0x00000000000000ff), rs1:x19(0xffffffffbfffffff), rs2:x4(0x0000000400000000)
    TEST_RR_OP(packh, x13, x19, x4, 0x00000000000000ff, 0xffffffffbfffffff, 0x400000000, x5, 0, x6)

packh_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0x00000000000000ff), rs1:x18(0xffffffff7fffffff), rs2:x3(0x0000000200000000)
    TEST_RR_OP(packh, x14, x18, x3, 0x00000000000000ff, 0xffffffff7fffffff, 0x200000000, x5, 8, x6)

packh_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0x00000000000000ff), rs1:x17(0xfffffffeffffffff), rs2:x2(0x0000000100000000)
    TEST_RR_OP(packh, x15, x17, x2, 0x00000000000000ff, 0xfffffffeffffffff, 0x100000000, x5, 16, x6)

packh_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0x00000000000000ff), rs1:x16(0xfffffffdffffffff), rs2:x1(0x0000000080000000)
    TEST_RR_OP(packh, x16, x16, x1, 0x00000000000000ff, 0xfffffffdffffffff, 0x80000000, x5, 24, x6)

packh_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0x00000000000000ff), rs1:x15(0xfffffffbffffffff), rs2:x31(0x0000000040000000)
    TEST_RR_OP(packh, x17, x15, x31, 0x00000000000000ff, 0xfffffffbffffffff, 0x40000000, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_23_0)


packh_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0x00000000000000ff), rs1:x14(0xfffffff7ffffffff), rs2:x30(0x0000000020000000)
    TEST_RR_OP(packh, x18, x14, x30, 0x00000000000000ff, 0xfffffff7ffffffff, 0x20000000, x1, 0, x2)

packh_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0x00000000000000ff), rs1:x13(0xffffffefffffffff), rs2:x29(0x0000000010000000)
    TEST_RR_OP(packh, x19, x13, x29, 0x00000000000000ff, 0xffffffefffffffff, 0x10000000, x1, 8, x2)

packh_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0x00000000000000ff), rs1:x12(0xffffffdfffffffff), rs2:x28(0x0000000008000000)
    TEST_RR_OP(packh, x20, x12, x28, 0x00000000000000ff, 0xffffffdfffffffff, 0x8000000, x1, 16, x2)

packh_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0x00000000000000ff), rs1:x11(0xffffffbfffffffff), rs2:x27(0x0000000004000000)
    TEST_RR_OP(packh, x21, x11, x27, 0x00000000000000ff, 0xffffffbfffffffff, 0x4000000, x1, 24, x2)

packh_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0x00000000000000ff), rs1:x10(0xffffff7fffffffff), rs2:x26(0x0000000002000000)
    TEST_RR_OP(packh, x22, x10, x26, 0x00000000000000ff, 0xffffff7fffffffff, 0x2000000, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_24_0)


packh_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0x00000000000000ff), rs1:x9(0xfffffeffffffffff), rs2:x25(0x0000000001000000)
    TEST_RR_OP(packh, x23, x9, x25, 0x00000000000000ff, 0xfffffeffffffffff, 0x1000000, x1, 0, x2)

packh_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0x00000000000000ff), rs1:x8(0xfffffdffffffffff), rs2:x24(0x0000000000800000)
    TEST_RR_OP(packh, x24, x8, x24, 0x00000000000000ff, 0xfffffdffffffffff, 0x800000, x1, 8, x2)

packh_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0x00000000000000ff), rs1:x7(0xfffffbffffffffff), rs2:x23(0x0000000000400000)
    TEST_RR_OP(packh, x25, x7, x23, 0x00000000000000ff, 0xfffffbffffffffff, 0x400000, x1, 16, x2)

packh_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0x00000000000000ff), rs1:x6(0xfffff7ffffffffff), rs2:x22(0x0000000000200000)
    TEST_RR_OP(packh, x26, x6, x22, 0x00000000000000ff, 0xfffff7ffffffffff, 0x200000, x1, 24, x2)

packh_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0x00000000000000ff), rs1:x5(0xffffefffffffffff), rs2:x21(0x0000000000100000)
    TEST_RR_OP(packh, x27, x5, x21, 0x00000000000000ff, 0xffffefffffffffff, 0x100000, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x5,signature_25_0)


packh_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0x00000000000000ff), rs1:x4(0xffffdfffffffffff), rs2:x20(0x0000000000080000)
    TEST_RR_OP(packh, x28, x4, x20, 0x00000000000000ff, 0xffffdfffffffffff, 0x80000, x5, 0, x6)

packh_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0x00000000000000ff), rs1:x3(0xffffbfffffffffff), rs2:x19(0x0000000000040000)
    TEST_RR_OP(packh, x29, x3, x19, 0x00000000000000ff, 0xffffbfffffffffff, 0x40000, x5, 8, x6)

packh_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0x00000000000000ff), rs1:x2(0xffff7fffffffffff), rs2:x18(0x0000000000020000)
    TEST_RR_OP(packh, x30, x2, x18, 0x00000000000000ff, 0xffff7fffffffffff, 0x20000, x5, 16, x6)

packh_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0x00000000000000ff), rs1:x1(0xfffeffffffffffff), rs2:x17(0x0000000000010000)
    TEST_RR_OP(packh, x31, x1, x17, 0x00000000000000ff, 0xfffeffffffffffff, 0x10000, x5, 24, x6)

packh_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0x00000000000000ff), rs1:x31(0xfffdffffffffffff), rs2:x16(0x0000000000008000)
    TEST_RR_OP(packh, x1, x31, x16, 0x00000000000000ff, 0xfffdffffffffffff, 0x8000, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_26_0)


packh_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0x00000000000000ff), rs1:x30(0xfffbffffffffffff), rs2:x15(0x0000000000004000)
    TEST_RR_OP(packh, x2, x30, x15, 0x00000000000000ff, 0xfffbffffffffffff, 0x4000, x1, 0, x7)

packh_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0x00000000000000ff), rs1:x29(0xfff7ffffffffffff), rs2:x14(0x0000000000002000)
    TEST_RR_OP(packh, x3, x29, x14, 0x00000000000000ff, 0xfff7ffffffffffff, 0x2000, x1, 8, x7)

packh_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0x00000000000000ff), rs1:x28(0xffefffffffffffff), rs2:x13(0x0000000000001000)
    TEST_RR_OP(packh, x4, x28, x13, 0x00000000000000ff, 0xffefffffffffffff, 0x1000, x1, 16, x7)

packh_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0x00000000000000ff), rs1:x27(0xffdfffffffffffff), rs2:x12(0x0000000000000800)
    TEST_RR_OP(packh, x5, x27, x12, 0x00000000000000ff, 0xffdfffffffffffff, 0x800, x1, 24, x7)

packh_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0x00000000000000ff), rs1:x26(0xffbfffffffffffff), rs2:x11(0x0000000000000400)
    TEST_RR_OP(packh, x6, x26, x11, 0x00000000000000ff, 0xffbfffffffffffff, 0x400, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_27_0)


packh_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0x00000000000000ff), rs1:x25(0xff7fffffffffffff), rs2:x10(0x0000000000000200)
    TEST_RR_OP(packh, x7, x25, x10, 0x00000000000000ff, 0xff7fffffffffffff, 0x200, x1, 0, x2)

packh_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0x00000000000000ff), rs1:x24(0xfeffffffffffffff), rs2:x9(0x0000000000000100)
    TEST_RR_OP(packh, x8, x24, x9, 0x00000000000000ff, 0xfeffffffffffffff, 0x100, x1, 8, x2)

packh_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0x00000000000080ff), rs1:x23(0xfdffffffffffffff), rs2:x8(0x0000000000000080)
    TEST_RR_OP(packh, x9, x23, x8, 0x00000000000080ff, 0xfdffffffffffffff, 0x80, x1, 16, x2)

packh_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0x00000000000040ff), rs1:x22(0xfbffffffffffffff), rs2:x7(0x0000000000000040)
    TEST_RR_OP(packh, x10, x22, x7, 0x00000000000040ff, 0xfbffffffffffffff, 0x40, x1, 24, x2)

packh_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0x00000000000020ff), rs1:x21(0xf7ffffffffffffff), rs2:x6(0x0000000000000020)
    TEST_RR_OP(packh, x11, x21, x6, 0x00000000000020ff, 0xf7ffffffffffffff, 0x20, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x6,signature_28_0)


packh_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0x00000000000010ff), rs1:x20(0xefffffffffffffff), rs2:x5(0x0000000000000010)
    TEST_RR_OP(packh, x12, x20, x5, 0x00000000000010ff, 0xefffffffffffffff, 0x10, x6, 0, x7)

packh_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0x00000000000008ff), rs1:x19(0xdfffffffffffffff), rs2:x4(0x0000000000000008)
    TEST_RR_OP(packh, x13, x19, x4, 0x00000000000008ff, 0xdfffffffffffffff, 0x8, x6, 8, x7)

packh_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0x00000000000004ff), rs1:x18(0xbfffffffffffffff), rs2:x3(0x0000000000000004)
    TEST_RR_OP(packh, x14, x18, x3, 0x00000000000004ff, 0xbfffffffffffffff, 0x4, x6, 16, x7)

packh_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0x00000000000002ff), rs1:x17(0x7fffffffffffffff), rs2:x2(0x0000000000000002)
    TEST_RR_OP(packh, x15, x17, x2, 0x00000000000002ff, 0x7fffffffffffffff, 0x2, x6, 24, x7)

packh_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0x00000000000001ff), rs1:x16(0xffffffffffffffff), rs2:x1(0x0000000000000001)
    TEST_RR_OP(packh, x16, x16, x1, 0x00000000000001ff, 0xffffffffffffffff, 0x1, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_29_0)


packh_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000001), rs1:x15(0x0000000000000001), rs2:x31(0x0000000000000000)
    TEST_RR_OP(packh, x17, x15, x31, 0x0000000000000001, 0x1, 0x0, x1, 0, x2)

packh_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000002), rs1:x14(0x0000000000000002), rs2:x30(0x0000000000000000)
    TEST_RR_OP(packh, x18, x14, x30, 0x0000000000000002, 0x2, 0x0, x1, 8, x2)

packh_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000004), rs1:x13(0x0000000000000004), rs2:x29(0x0000000000000000)
    TEST_RR_OP(packh, x19, x13, x29, 0x0000000000000004, 0x4, 0x0, x1, 16, x2)

packh_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000008), rs1:x12(0x0000000000000008), rs2:x28(0x0000000000000000)
    TEST_RR_OP(packh, x20, x12, x28, 0x0000000000000008, 0x8, 0x0, x1, 24, x2)

packh_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000010), rs1:x11(0x0000000000000010), rs2:x27(0x0000000000000000)
    TEST_RR_OP(packh, x21, x11, x27, 0x0000000000000010, 0x10, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_30_0)


packh_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000020), rs1:x10(0x0000000000000020), rs2:x26(0x0000000000000000)
    TEST_RR_OP(packh, x22, x10, x26, 0x0000000000000020, 0x20, 0x0, x1, 0, x2)

packh_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000040), rs1:x9(0x0000000000000040), rs2:x25(0x0000000000000000)
    TEST_RR_OP(packh, x23, x9, x25, 0x0000000000000040, 0x40, 0x0, x1, 8, x2)

packh_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000080), rs1:x8(0x0000000000000080), rs2:x24(0x0000000000000000)
    TEST_RR_OP(packh, x24, x8, x24, 0x0000000000000080, 0x80, 0x0, x1, 16, x2)

packh_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000000000000100), rs2:x23(0x0000000000000000)
    TEST_RR_OP(packh, x25, x7, x23, 0x0000000000000000, 0x100, 0x0, x1, 24, x2)

packh_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000000000000200), rs2:x22(0x0000000000000000)
    TEST_RR_OP(packh, x26, x6, x22, 0x0000000000000000, 0x200, 0x0, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x6,signature_31_0)


packh_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000000000000400), rs2:x21(0x0000000000000000)
    TEST_RR_OP(packh, x27, x5, x21, 0x0000000000000000, 0x400, 0x0, x6, 0, x7)

packh_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000000000000800), rs2:x20(0x0000000000000000)
    TEST_RR_OP(packh, x28, x4, x20, 0x0000000000000000, 0x800, 0x0, x6, 8, x7)

packh_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000000000001000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(packh, x29, x3, x19, 0x0000000000000000, 0x1000, 0x0, x6, 16, x7)

packh_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000000000002000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(packh, x30, x2, x18, 0x0000000000000000, 0x2000, 0x0, x6, 24, x7)

packh_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000000000004000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(packh, x31, x1, x17, 0x0000000000000000, 0x4000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x6,signature_32_0)


packh_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000000000008000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(packh, x1, x31, x16, 0x0000000000000000, 0x8000, 0x0, x6, 0, x7)

packh_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000000000010000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(packh, x2, x30, x15, 0x0000000000000000, 0x10000, 0x0, x6, 8, x7)

packh_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0000000000020000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(packh, x3, x29, x14, 0x0000000000000000, 0x20000, 0x0, x6, 16, x7)

packh_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0000000000040000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(packh, x4, x28, x13, 0x0000000000000000, 0x40000, 0x0, x6, 24, x7)

packh_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0000000000080000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(packh, x5, x27, x12, 0x0000000000000000, 0x80000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_33_0)


packh_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0000000000100000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(packh, x6, x26, x11, 0x0000000000000000, 0x100000, 0x0, x1, 0, x2)

packh_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0000000000200000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(packh, x7, x25, x10, 0x0000000000000000, 0x200000, 0x0, x1, 8, x2)

packh_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0000000000400000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(packh, x8, x24, x9, 0x0000000000000000, 0x400000, 0x0, x1, 16, x2)

packh_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0000000000800000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(packh, x9, x23, x8, 0x0000000000000000, 0x800000, 0x0, x1, 24, x2)

packh_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0000000001000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(packh, x10, x22, x7, 0x0000000000000000, 0x1000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_34_0)


packh_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0000000002000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(packh, x11, x21, x6, 0x0000000000000000, 0x2000000, 0x0, x1, 0, x7)

packh_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000004000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(packh, x12, x20, x5, 0x0000000000000000, 0x4000000, 0x0, x1, 8, x7)

packh_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000008000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(packh, x13, x19, x4, 0x0000000000000000, 0x8000000, 0x0, x1, 16, x7)

packh_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0000000010000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(packh, x14, x18, x3, 0x0000000000000000, 0x10000000, 0x0, x1, 24, x7)

packh_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x0000000020000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(packh, x15, x17, x2, 0x0000000000000000, 0x20000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x2,signature_35_0)


packh_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x0000000040000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(packh, x16, x16, x1, 0x0000000000000000, 0x40000000, 0x0, x2, 0, x3)

packh_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000000080000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(packh, x17, x15, x31, 0x0000000000000000, 0x80000000, 0x0, x2, 8, x3)

packh_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000000100000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(packh, x18, x14, x30, 0x0000000000000000, 0x100000000, 0x0, x2, 16, x3)

packh_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000200000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(packh, x19, x13, x29, 0x0000000000000000, 0x200000000, 0x0, x2, 24, x3)

packh_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000000400000000), rs2:x28(0x0000000000000000)
    TEST_RR_OP(packh, x20, x12, x28, 0x0000000000000000, 0x400000000, 0x0, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_36_0)


packh_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000800000000), rs2:x27(0x0000000000000000)
    TEST_RR_OP(packh, x21, x11, x27, 0x0000000000000000, 0x800000000, 0x0, x1, 0, x2)

packh_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000001000000000), rs2:x26(0x0000000000000000)
    TEST_RR_OP(packh, x22, x10, x26, 0x0000000000000000, 0x1000000000, 0x0, x1, 8, x2)

packh_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000002000000000), rs2:x25(0x0000000000000000)
    TEST_RR_OP(packh, x23, x9, x25, 0x0000000000000000, 0x2000000000, 0x0, x1, 16, x2)

packh_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000004000000000), rs2:x24(0x0000000000000000)
    TEST_RR_OP(packh, x24, x8, x24, 0x0000000000000000, 0x4000000000, 0x0, x1, 24, x2)

packh_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000008000000000), rs2:x23(0x0000000000000000)
    TEST_RR_OP(packh, x25, x7, x23, 0x0000000000000000, 0x8000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_37_0)


packh_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000010000000000), rs2:x22(0x0000000000000000)
    TEST_RR_OP(packh, x26, x6, x22, 0x0000000000000000, 0x10000000000, 0x0, x1, 0, x7)

packh_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000020000000000), rs2:x21(0x0000000000000000)
    TEST_RR_OP(packh, x27, x5, x21, 0x0000000000000000, 0x20000000000, 0x0, x1, 8, x7)

packh_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000040000000000), rs2:x20(0x0000000000000000)
    TEST_RR_OP(packh, x28, x4, x20, 0x0000000000000000, 0x40000000000, 0x0, x1, 16, x7)

packh_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000080000000000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(packh, x29, x3, x19, 0x0000000000000000, 0x80000000000, 0x0, x1, 24, x7)

packh_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000100000000000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(packh, x30, x2, x18, 0x0000000000000000, 0x100000000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x5,signature_38_0)


packh_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000200000000000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(packh, x31, x1, x17, 0x0000000000000000, 0x200000000000, 0x0, x5, 0, x6)

packh_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000400000000000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(packh, x1, x31, x16, 0x0000000000000000, 0x400000000000, 0x0, x5, 8, x6)

packh_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000800000000000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(packh, x2, x30, x15, 0x0000000000000000, 0x800000000000, 0x0, x5, 16, x6)

packh_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0001000000000000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(packh, x3, x29, x14, 0x0000000000000000, 0x1000000000000, 0x0, x5, 24, x6)

packh_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0002000000000000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(packh, x4, x28, x13, 0x0000000000000000, 0x2000000000000, 0x0, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_39_0)


packh_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0004000000000000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(packh, x5, x27, x12, 0x0000000000000000, 0x4000000000000, 0x0, x1, 0, x2)

packh_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0008000000000000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(packh, x6, x26, x11, 0x0000000000000000, 0x8000000000000, 0x0, x1, 8, x2)

packh_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0010000000000000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(packh, x7, x25, x10, 0x0000000000000000, 0x10000000000000, 0x0, x1, 16, x2)

packh_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0020000000000000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(packh, x8, x24, x9, 0x0000000000000000, 0x20000000000000, 0x0, x1, 24, x2)

packh_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0040000000000000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(packh, x9, x23, x8, 0x0000000000000000, 0x40000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_40_0)


packh_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0080000000000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(packh, x10, x22, x7, 0x0000000000000000, 0x80000000000000, 0x0, x1, 0, x2)

packh_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0100000000000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(packh, x11, x21, x6, 0x0000000000000000, 0x100000000000000, 0x0, x1, 8, x2)

packh_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0200000000000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(packh, x12, x20, x5, 0x0000000000000000, 0x200000000000000, 0x0, x1, 16, x2)

packh_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0400000000000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(packh, x13, x19, x4, 0x0000000000000000, 0x400000000000000, 0x0, x1, 24, x2)

packh_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0800000000000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(packh, x14, x18, x3, 0x0000000000000000, 0x800000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x3,signature_41_0)


packh_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x1000000000000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(packh, x15, x17, x2, 0x0000000000000000, 0x1000000000000000, 0x0, x3, 0, x4)

packh_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x2000000000000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(packh, x16, x16, x1, 0x0000000000000000, 0x2000000000000000, 0x0, x3, 8, x4)

packh_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x4000000000000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(packh, x17, x15, x31, 0x0000000000000000, 0x4000000000000000, 0x0, x3, 16, x4)

packh_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x8000000000000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(packh, x18, x14, x30, 0x0000000000000000, 0x8000000000000000, 0x0, x3, 24, x4)

packh_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(packh, x19, x13, x29, 0x0000000000000000, 0x0, 0x0, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_42_0)


packh_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0x00000000000000fe), rs1:x12(0xfffffffffffffffe), rs2:x28(0x0000000000000000)
    TEST_RR_OP(packh, x20, x12, x28, 0x00000000000000fe, 0xfffffffffffffffe, 0x0, x1, 0, x2)

packh_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0x00000000000000fd), rs1:x11(0xfffffffffffffffd), rs2:x27(0x0000000000000000)
    TEST_RR_OP(packh, x21, x11, x27, 0x00000000000000fd, 0xfffffffffffffffd, 0x0, x1, 8, x2)

packh_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0x00000000000000fb), rs1:x10(0xfffffffffffffffb), rs2:x26(0x0000000000000000)
    TEST_RR_OP(packh, x22, x10, x26, 0x00000000000000fb, 0xfffffffffffffffb, 0x0, x1, 16, x2)

packh_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0x00000000000000f7), rs1:x9(0xfffffffffffffff7), rs2:x25(0x0000000000000000)
    TEST_RR_OP(packh, x23, x9, x25, 0x00000000000000f7, 0xfffffffffffffff7, 0x0, x1, 24, x2)

packh_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0x00000000000000ef), rs1:x8(0xffffffffffffffef), rs2:x24(0x0000000000000000)
    TEST_RR_OP(packh, x24, x8, x24, 0x00000000000000ef, 0xffffffffffffffef, 0x0, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_43_0)


packh_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0x00000000000000df), rs1:x7(0xffffffffffffffdf), rs2:x23(0x0000000000000000)
    TEST_RR_OP(packh, x25, x7, x23, 0x00000000000000df, 0xffffffffffffffdf, 0x0, x1, 0, x2)

packh_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0x00000000000000bf), rs1:x6(0xffffffffffffffbf), rs2:x22(0x0000000000000000)
    TEST_RR_OP(packh, x26, x6, x22, 0x00000000000000bf, 0xffffffffffffffbf, 0x0, x1, 8, x2)

packh_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0x000000000000007f), rs1:x5(0xffffffffffffff7f), rs2:x21(0x0000000000000000)
    TEST_RR_OP(packh, x27, x5, x21, 0x000000000000007f, 0xffffffffffffff7f, 0x0, x1, 16, x2)

packh_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0x00000000000000ff), rs1:x4(0xfffffffffffffeff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(packh, x28, x4, x20, 0x00000000000000ff, 0xfffffffffffffeff, 0x0, x1, 24, x2)

packh_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0x00000000000000ff), rs1:x3(0xfffffffffffffdff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(packh, x29, x3, x19, 0x00000000000000ff, 0xfffffffffffffdff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x4,signature_44_0)


packh_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0x00000000000000ff), rs1:x2(0xfffffffffffffbff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(packh, x30, x2, x18, 0x00000000000000ff, 0xfffffffffffffbff, 0x0, x4, 0, x5)

packh_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0x00000000000000ff), rs1:x1(0xfffffffffffff7ff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(packh, x31, x1, x17, 0x00000000000000ff, 0xfffffffffffff7ff, 0x0, x4, 8, x5)

packh_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0x00000000000000ff), rs1:x31(0xffffffffffffefff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(packh, x1, x31, x16, 0x00000000000000ff, 0xffffffffffffefff, 0x0, x4, 16, x5)

packh_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0x00000000000000ff), rs1:x30(0xffffffffffffdfff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(packh, x2, x30, x15, 0x00000000000000ff, 0xffffffffffffdfff, 0x0, x4, 24, x5)

packh_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0x00000000000000ff), rs1:x29(0xffffffffffffbfff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(packh, x3, x29, x14, 0x00000000000000ff, 0xffffffffffffbfff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_45_0)


packh_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0x00000000000000ff), rs1:x28(0xffffffffffff7fff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(packh, x4, x28, x13, 0x00000000000000ff, 0xffffffffffff7fff, 0x0, x1, 0, x2)

packh_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0x00000000000000ff), rs1:x27(0xfffffffffffeffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(packh, x5, x27, x12, 0x00000000000000ff, 0xfffffffffffeffff, 0x0, x1, 8, x2)

packh_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0x00000000000000ff), rs1:x26(0xfffffffffffdffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(packh, x6, x26, x11, 0x00000000000000ff, 0xfffffffffffdffff, 0x0, x1, 16, x2)

packh_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0x00000000000000ff), rs1:x25(0xfffffffffffbffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(packh, x7, x25, x10, 0x00000000000000ff, 0xfffffffffffbffff, 0x0, x1, 24, x2)

packh_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0x00000000000000ff), rs1:x24(0xfffffffffff7ffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(packh, x8, x24, x9, 0x00000000000000ff, 0xfffffffffff7ffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_46_0)


packh_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0x00000000000000ff), rs1:x23(0xffffffffffefffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(packh, x9, x23, x8, 0x00000000000000ff, 0xffffffffffefffff, 0x0, x1, 0, x2)

packh_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0x00000000000000ff), rs1:x22(0xffffffffffdfffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(packh, x10, x22, x7, 0x00000000000000ff, 0xffffffffffdfffff, 0x0, x1, 8, x2)

packh_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0x00000000000000ff), rs1:x21(0xffffffffffbfffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(packh, x11, x21, x6, 0x00000000000000ff, 0xffffffffffbfffff, 0x0, x1, 16, x2)

packh_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0x00000000000000ff), rs1:x20(0xffffffffff7fffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(packh, x12, x20, x5, 0x00000000000000ff, 0xffffffffff7fffff, 0x0, x1, 24, x2)

packh_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0x00000000000000ff), rs1:x19(0xfffffffffeffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(packh, x13, x19, x4, 0x00000000000000ff, 0xfffffffffeffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x4,signature_47_0)


packh_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0x00000000000000ff), rs1:x18(0xfffffffffdffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(packh, x14, x18, x3, 0x00000000000000ff, 0xfffffffffdffffff, 0x0, x4, 0, x5)

packh_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0x00000000000000ff), rs1:x17(0xfffffffffbffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(packh, x15, x17, x2, 0x00000000000000ff, 0xfffffffffbffffff, 0x0, x4, 8, x5)

packh_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0x00000000000000ff), rs1:x16(0xfffffffff7ffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(packh, x16, x16, x1, 0x00000000000000ff, 0xfffffffff7ffffff, 0x0, x4, 16, x5)

packh_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0x00000000000000ff), rs1:x15(0xffffffffefffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(packh, x17, x15, x31, 0x00000000000000ff, 0xffffffffefffffff, 0x0, x4, 24, x5)

packh_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0x00000000000000ff), rs1:x14(0xffffffffdfffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(packh, x18, x14, x30, 0x00000000000000ff, 0xffffffffdfffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_48_0)


packh_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0x00000000000000ff), rs1:x13(0xffffffffbfffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(packh, x19, x13, x29, 0x00000000000000ff, 0xffffffffbfffffff, 0x0, x1, 0, x2)

packh_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0x00000000000000ff), rs1:x12(0xffffffff7fffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(packh, x20, x12, x28, 0x00000000000000ff, 0xffffffff7fffffff, 0x0, x1, 8, x2)

packh_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0x00000000000000ff), rs1:x11(0xfffffffeffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(packh, x21, x11, x27, 0x00000000000000ff, 0xfffffffeffffffff, 0x0, x1, 16, x2)

packh_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0x00000000000000ff), rs1:x10(0xfffffffdffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(packh, x22, x10, x26, 0x00000000000000ff, 0xfffffffdffffffff, 0x0, x1, 24, x2)

packh_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0x00000000000000ff), rs1:x9(0xfffffffbffffffff), rs2:x25(0x0000000000000000)
    TEST_RR_OP(packh, x23, x9, x25, 0x00000000000000ff, 0xfffffffbffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_49_0)


packh_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0x00000000000000ff), rs1:x8(0xfffffff7ffffffff), rs2:x24(0x0000000000000000)
    TEST_RR_OP(packh, x24, x8, x24, 0x00000000000000ff, 0xfffffff7ffffffff, 0x0, x1, 0, x2)

packh_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0x00000000000000ff), rs1:x7(0xffffffefffffffff), rs2:x23(0x0000000000000000)
    TEST_RR_OP(packh, x25, x7, x23, 0x00000000000000ff, 0xffffffefffffffff, 0x0, x1, 8, x2)

packh_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0x00000000000000ff), rs1:x6(0xffffffdfffffffff), rs2:x22(0x0000000000000000)
    TEST_RR_OP(packh, x26, x6, x22, 0x00000000000000ff, 0xffffffdfffffffff, 0x0, x1, 16, x2)

packh_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0x00000000000000ff), rs1:x5(0xffffffbfffffffff), rs2:x21(0x0000000000000000)
    TEST_RR_OP(packh, x27, x5, x21, 0x00000000000000ff, 0xffffffbfffffffff, 0x0, x1, 24, x2)

packh_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0x00000000000000ff), rs1:x4(0xffffff7fffffffff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(packh, x28, x4, x20, 0x00000000000000ff, 0xffffff7fffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x4,signature_50_0)


packh_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0x00000000000000ff), rs1:x3(0xfffffeffffffffff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(packh, x29, x3, x19, 0x00000000000000ff, 0xfffffeffffffffff, 0x0, x4, 0, x5)

packh_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0x00000000000000ff), rs1:x2(0xfffffdffffffffff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(packh, x30, x2, x18, 0x00000000000000ff, 0xfffffdffffffffff, 0x0, x4, 8, x5)

packh_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0x00000000000000ff), rs1:x1(0xfffffbffffffffff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(packh, x31, x1, x17, 0x00000000000000ff, 0xfffffbffffffffff, 0x0, x4, 16, x5)

packh_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0x00000000000000ff), rs1:x31(0xfffff7ffffffffff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(packh, x1, x31, x16, 0x00000000000000ff, 0xfffff7ffffffffff, 0x0, x4, 24, x5)

packh_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0x00000000000000ff), rs1:x30(0xffffefffffffffff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(packh, x2, x30, x15, 0x00000000000000ff, 0xffffefffffffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_51_0)


packh_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0x00000000000000ff), rs1:x29(0xffffdfffffffffff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(packh, x3, x29, x14, 0x00000000000000ff, 0xffffdfffffffffff, 0x0, x1, 0, x2)

packh_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0x00000000000000ff), rs1:x28(0xffffbfffffffffff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(packh, x4, x28, x13, 0x00000000000000ff, 0xffffbfffffffffff, 0x0, x1, 8, x2)

packh_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0x00000000000000ff), rs1:x27(0xffff7fffffffffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(packh, x5, x27, x12, 0x00000000000000ff, 0xffff7fffffffffff, 0x0, x1, 16, x2)

packh_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0x00000000000000ff), rs1:x26(0xfffeffffffffffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(packh, x6, x26, x11, 0x00000000000000ff, 0xfffeffffffffffff, 0x0, x1, 24, x2)

packh_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0x00000000000000ff), rs1:x25(0xfffdffffffffffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(packh, x7, x25, x10, 0x00000000000000ff, 0xfffdffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_52_0)


packh_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0x00000000000000ff), rs1:x24(0xfffbffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(packh, x8, x24, x9, 0x00000000000000ff, 0xfffbffffffffffff, 0x0, x1, 0, x2)

packh_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0x00000000000000ff), rs1:x23(0xfff7ffffffffffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(packh, x9, x23, x8, 0x00000000000000ff, 0xfff7ffffffffffff, 0x0, x1, 8, x2)

packh_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0x00000000000000ff), rs1:x22(0xffefffffffffffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(packh, x10, x22, x7, 0x00000000000000ff, 0xffefffffffffffff, 0x0, x1, 16, x2)

packh_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0x00000000000000ff), rs1:x21(0xffdfffffffffffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(packh, x11, x21, x6, 0x00000000000000ff, 0xffdfffffffffffff, 0x0, x1, 24, x2)

packh_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0x00000000000000ff), rs1:x20(0xffbfffffffffffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(packh, x12, x20, x5, 0x00000000000000ff, 0xffbfffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x5,signature_53_0)


packh_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0x00000000000000ff), rs1:x19(0xff7fffffffffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(packh, x13, x19, x4, 0x00000000000000ff, 0xff7fffffffffffff, 0x0, x5, 0, x6)

packh_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0x00000000000000ff), rs1:x18(0xfeffffffffffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(packh, x14, x18, x3, 0x00000000000000ff, 0xfeffffffffffffff, 0x0, x5, 8, x6)

packh_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0x00000000000000ff), rs1:x17(0xfdffffffffffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(packh, x15, x17, x2, 0x00000000000000ff, 0xfdffffffffffffff, 0x0, x5, 16, x6)

packh_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0x00000000000000ff), rs1:x16(0xfbffffffffffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(packh, x16, x16, x1, 0x00000000000000ff, 0xfbffffffffffffff, 0x0, x5, 24, x6)

packh_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0x00000000000000ff), rs1:x15(0xf7ffffffffffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(packh, x17, x15, x31, 0x00000000000000ff, 0xf7ffffffffffffff, 0x0, x5, 32, x6)

    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_54_0)


packh_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0x00000000000000ff), rs1:x14(0xefffffffffffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(packh, x18, x14, x30, 0x00000000000000ff, 0xefffffffffffffff, 0x0, x1, 0, x2)

packh_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0x00000000000000ff), rs1:x13(0xdfffffffffffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(packh, x19, x13, x29, 0x00000000000000ff, 0xdfffffffffffffff, 0x0, x1, 8, x2)

packh_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0x00000000000000ff), rs1:x12(0xbfffffffffffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(packh, x20, x12, x28, 0x00000000000000ff, 0xbfffffffffffffff, 0x0, x1, 16, x2)

packh_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0x00000000000000ff), rs1:x11(0x7fffffffffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(packh, x21, x11, x27, 0x00000000000000ff, 0x7fffffffffffffff, 0x0, x1, 24, x2)

packh_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0x00000000000000ff), rs1:x10(0xffffffffffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(packh, x22, x10, x26, 0x00000000000000ff, 0xffffffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",packh)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",packh)

	RVTEST_SIGBASE(x1,signature_55_0)


packh_01_inst_270:
    // Test 270:  Test with rs1 == rs2
    // result rd:x23(0x0000000000002323), rs1:x25(0x10fd3dedadea5195), rs2:x25(0xdf7f3844121bcc23)
    TEST_RR_OP(packh, x23, x25, x25, 0x0000000000002323, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x1, 0, x2)

packh_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1), rs2:x24(0xf5adb41aa47d105b)
    TEST_RR_OP(packh, x0, x8, x24, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x1, 8, x2)

packh_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0x00000000000000bb), rs1:x7(0xc9649f05a8e1a8bb), rs2:x0(0x82f6747f707af2c0)
    TEST_RR_OP(packh, x25, x7, x0, 0x00000000000000bb, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x1, 16, x2)

packh_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x000000000000c300), rs1:x0(0x3541291848c99fcb), rs2:x22(0x73a92fd4e19bfbc3)
    TEST_RR_OP(packh, x26, x0, x22, 0x000000000000c300, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x1, 24, x2)
	
#endif


RVTEST_CODE_END packh_01_code_end
RVTEST_CODE_BEGIN rori_01_init rori_01_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x6,signature_1_0)


rori_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0xa21fa7bdb5bd4a32), rs1:x31(0x10fd3dedadea5195), imm:0x3
    TEST_IMM_OP(rori, x1, x31, 0xa21fa7bdb5bd4a32, 0x10fd3dedadea5195, 0x3, x6, 0, x7)

rori_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x5ff7d837a52b9c5a), rs1:x30(0xbd295ce2d2ffbec1), imm:0x1b
    TEST_IMM_OP(rori, x2, x30, 0x5ff7d837a52b9c5a, 0xbd295ce2d2ffbec1, 0x1b, x6, 8, x7)

rori_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0xc9649f05a8e1a8bb), rs1:x29(0xc9649f05a8e1a8bb), imm:0x0
    TEST_IMM_OP(rori, x3, x29, 0xc9649f05a8e1a8bb, 0xc9649f05a8e1a8bb, 0x0, x6, 16, x7)

rori_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x66a82523091933f9), rs1:x28(0x3541291848c99fcb), imm:0x3
    TEST_IMM_OP(rori, x4, x28, 0x66a82523091933f9, 0x3541291848c99fcb, 0x3, x6, 24, x7)

rori_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0xa49e21448e808c3a), rs1:x27(0x10a24740461d524f), imm:0xf
    TEST_IMM_OP(rori, x5, x27, 0xa49e21448e808c3a, 0x10a24740461d524f, 0xf, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_2_0)


rori_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x215ea8d61ca8a514), rs1:x26(0x546b0e54528a10af), imm:0xf
    TEST_IMM_OP(rori, x6, x26, 0x215ea8d61ca8a514, 0x546b0e54528a10af, 0xf, x1, 0, x2)

rori_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x786e7525fa9c337f), rs1:x25(0x73a92fd4e19bfbc3), imm:0xb
    TEST_IMM_OP(rori, x7, x25, 0x786e7525fa9c337f, 0x73a92fd4e19bfbc3, 0xb, x1, 8, x2)

rori_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x0f5e58105ece8fee), rs1:x24(0x82f6747f707af2c0), imm:0x1b
    TEST_IMM_OP(rori, x8, x24, 0x0f5e58105ece8fee, 0x82f6747f707af2c0, 0x1b, x1, 16, x2)

rori_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0xfad6da0d523e882d), rs1:x23(0xf5adb41aa47d105b), imm:0x1
    TEST_IMM_OP(rori, x9, x23, 0xfad6da0d523e882d, 0xf5adb41aa47d105b, 0x1, x1, 24, x2)

rori_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0xde611efbf9c22090), rs1:x22(0xdf7f3844121bcc23), imm:0x15
    TEST_IMM_OP(rori, x10, x22, 0xde611efbf9c22090, 0xdf7f3844121bcc23, 0x15, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_3_0)


rori_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x0000000200000000), rs1:x21(0x0000000000000001), imm:0x1f
    TEST_IMM_OP(rori, x11, x21, 0x0000000200000000, 0x1, 0x1f, x1, 0, x7)

rori_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x0004000000000000), rs1:x20(0x0000000000000002), imm:0xf
    TEST_IMM_OP(rori, x12, x20, 0x0004000000000000, 0x2, 0xf, x1, 8, x7)

rori_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x0000080000000000), rs1:x19(0x0000000000000004), imm:0x17
    TEST_IMM_OP(rori, x13, x19, 0x0000080000000000, 0x4, 0x17, x1, 16, x7)

rori_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0000010000000000), rs1:x18(0x0000000000000008), imm:0x1b
    TEST_IMM_OP(rori, x14, x18, 0x0000010000000000, 0x8, 0x1b, x1, 24, x7)

rori_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x0000008000000000), rs1:x17(0x0000000000000010), imm:0x1d
    TEST_IMM_OP(rori, x15, x17, 0x0000008000000000, 0x10, 0x1d, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x2,signature_4_0)


rori_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x0000008000000000), rs1:x16(0x0000000000000020), imm:0x1e
    TEST_IMM_OP(rori, x16, x16, 0x0000008000000000, 0x20, 0x1e, x2, 0, x3)

rori_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000040), rs1:x15(0x0000000000000040), imm:0x0
    TEST_IMM_OP(rori, x17, x15, 0x0000000000000040, 0x40, 0x0, x2, 8, x3)

rori_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x0080000000000000), rs1:x14(0x0000000000000080), imm:0x10
    TEST_IMM_OP(rori, x18, x14, 0x0080000000000000, 0x80, 0x10, x2, 16, x3)

rori_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000001), rs1:x13(0x0000000000000100), imm:0x8
    TEST_IMM_OP(rori, x19, x13, 0x0000000000000001, 0x100, 0x8, x2, 24, x3)

rori_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000020), rs1:x12(0x0000000000000200), imm:0x4
    TEST_IMM_OP(rori, x20, x12, 0x0000000000000020, 0x200, 0x4, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_5_0)


rori_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000100), rs1:x11(0x0000000000000400), imm:0x2
    TEST_IMM_OP(rori, x21, x11, 0x0000000000000100, 0x400, 0x2, x1, 0, x2)

rori_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000400), rs1:x10(0x0000000000000800), imm:0x1
    TEST_IMM_OP(rori, x22, x10, 0x0000000000000400, 0x800, 0x1, x1, 8, x2)

rori_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000200), rs1:x9(0x0000000000001000), imm:0x3
    TEST_IMM_OP(rori, x23, x9, 0x0000000000000200, 0x1000, 0x3, x1, 16, x2)

rori_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0004000000000000), rs1:x8(0x0000000000002000), imm:0x1b
    TEST_IMM_OP(rori, x24, x8, 0x0004000000000000, 0x2000, 0x1b, x1, 24, x2)

rori_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x0000000000004000), rs1:x7(0x0000000000004000), imm:0x0
    TEST_IMM_OP(rori, x25, x7, 0x0000000000004000, 0x4000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_6_0)


rori_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x0000000000001000), rs1:x6(0x0000000000008000), imm:0x3
    TEST_IMM_OP(rori, x26, x6, 0x0000000000001000, 0x8000, 0x3, x1, 0, x7)

rori_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000002), rs1:x5(0x0000000000010000), imm:0xf
    TEST_IMM_OP(rori, x27, x5, 0x0000000000000002, 0x10000, 0xf, x1, 8, x7)

rori_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000004), rs1:x4(0x0000000000020000), imm:0xf
    TEST_IMM_OP(rori, x28, x4, 0x0000000000000004, 0x20000, 0xf, x1, 16, x7)

rori_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000080), rs1:x3(0x0000000000040000), imm:0xb
    TEST_IMM_OP(rori, x29, x3, 0x0000000000000080, 0x40000, 0xb, x1, 24, x7)

rori_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0100000000000000), rs1:x2(0x0000000000080000), imm:0x1b
    TEST_IMM_OP(rori, x30, x2, 0x0100000000000000, 0x80000, 0x1b, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x5,signature_7_0)


rori_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0000000000080000), rs1:x1(0x0000000000100000), imm:0x1
    TEST_IMM_OP(rori, x31, x1, 0x0000000000080000, 0x100000, 0x1, x5, 0, x6)

rori_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000001), rs1:x31(0x0000000000200000), imm:0x15
    TEST_IMM_OP(rori, x1, x31, 0x0000000000000001, 0x200000, 0x15, x5, 8, x6)

rori_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0080000000000000), rs1:x30(0x0000000000400000), imm:0x1f
    TEST_IMM_OP(rori, x2, x30, 0x0080000000000000, 0x400000, 0x1f, x5, 16, x6)

rori_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000100), rs1:x29(0x0000000000800000), imm:0xf
    TEST_IMM_OP(rori, x3, x29, 0x0000000000000100, 0x800000, 0xf, x5, 24, x6)

rori_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000002), rs1:x28(0x0000000001000000), imm:0x17
    TEST_IMM_OP(rori, x4, x28, 0x0000000000000002, 0x1000000, 0x17, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_8_0)


rori_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x4000000000000000), rs1:x27(0x0000000002000000), imm:0x1b
    TEST_IMM_OP(rori, x5, x27, 0x4000000000000000, 0x2000000, 0x1b, x1, 0, x2)

rori_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x2000000000000000), rs1:x26(0x0000000004000000), imm:0x1d
    TEST_IMM_OP(rori, x6, x26, 0x2000000000000000, 0x4000000, 0x1d, x1, 8, x2)

rori_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x2000000000000000), rs1:x25(0x0000000008000000), imm:0x1e
    TEST_IMM_OP(rori, x7, x25, 0x2000000000000000, 0x8000000, 0x1e, x1, 16, x2)

rori_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0000000010000000), rs1:x24(0x0000000010000000), imm:0x0
    TEST_IMM_OP(rori, x8, x24, 0x0000000010000000, 0x10000000, 0x0, x1, 24, x2)

rori_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0000000000002000), rs1:x23(0x0000000020000000), imm:0x10
    TEST_IMM_OP(rori, x9, x23, 0x0000000000002000, 0x20000000, 0x10, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_9_0)


rori_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x0000000000400000), rs1:x22(0x0000000040000000), imm:0x8
    TEST_IMM_OP(rori, x10, x22, 0x0000000000400000, 0x40000000, 0x8, x1, 0, x2)

rori_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0000000008000000), rs1:x21(0x0000000080000000), imm:0x4
    TEST_IMM_OP(rori, x11, x21, 0x0000000008000000, 0x80000000, 0x4, x1, 8, x2)

rori_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0000000040000000), rs1:x20(0x0000000100000000), imm:0x2
    TEST_IMM_OP(rori, x12, x20, 0x0000000040000000, 0x100000000, 0x2, x1, 16, x2)

rori_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x0000000100000000), rs1:x19(0x0000000200000000), imm:0x1
    TEST_IMM_OP(rori, x13, x19, 0x0000000100000000, 0x200000000, 0x1, x1, 24, x2)

rori_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x0000000080000000), rs1:x18(0x0000000400000000), imm:0x3
    TEST_IMM_OP(rori, x14, x18, 0x0000000080000000, 0x400000000, 0x3, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x3,signature_10_0)


rori_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000100), rs1:x17(0x0000000800000000), imm:0x1b
    TEST_IMM_OP(rori, x15, x17, 0x0000000000000100, 0x800000000, 0x1b, x3, 0, x4)

rori_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0000001000000000), rs1:x16(0x0000001000000000), imm:0x0
    TEST_IMM_OP(rori, x16, x16, 0x0000001000000000, 0x1000000000, 0x0, x3, 8, x4)

rori_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0000000400000000), rs1:x15(0x0000002000000000), imm:0x3
    TEST_IMM_OP(rori, x17, x15, 0x0000000400000000, 0x2000000000, 0x3, x3, 16, x4)

rori_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x0000000000800000), rs1:x14(0x0000004000000000), imm:0xf
    TEST_IMM_OP(rori, x18, x14, 0x0000000000800000, 0x4000000000, 0xf, x3, 24, x4)

rori_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000000001000000), rs1:x13(0x0000008000000000), imm:0xf
    TEST_IMM_OP(rori, x19, x13, 0x0000000001000000, 0x8000000000, 0xf, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_11_0)


rori_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0000000020000000), rs1:x12(0x0000010000000000), imm:0xb
    TEST_IMM_OP(rori, x20, x12, 0x0000000020000000, 0x10000000000, 0xb, x1, 0, x2)

rori_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000000000004000), rs1:x11(0x0000020000000000), imm:0x1b
    TEST_IMM_OP(rori, x21, x11, 0x0000000000004000, 0x20000000000, 0x1b, x1, 8, x2)

rori_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000020000000000), rs1:x10(0x0000040000000000), imm:0x1
    TEST_IMM_OP(rori, x22, x10, 0x0000020000000000, 0x40000000000, 0x1, x1, 16, x2)

rori_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000000000400000), rs1:x9(0x0000080000000000), imm:0x15
    TEST_IMM_OP(rori, x23, x9, 0x0000000000400000, 0x80000000000, 0x15, x1, 24, x2)

rori_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000000000002000), rs1:x8(0x0000100000000000), imm:0x1f
    TEST_IMM_OP(rori, x24, x8, 0x0000000000002000, 0x100000000000, 0x1f, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_12_0)


rori_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0000000040000000), rs1:x7(0x0000200000000000), imm:0xf
    TEST_IMM_OP(rori, x25, x7, 0x0000000040000000, 0x200000000000, 0xf, x1, 0, x2)

rori_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x0000000000800000), rs1:x6(0x0000400000000000), imm:0x17
    TEST_IMM_OP(rori, x26, x6, 0x0000000000800000, 0x400000000000, 0x17, x1, 8, x2)

rori_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0000000000100000), rs1:x5(0x0000800000000000), imm:0x1b
    TEST_IMM_OP(rori, x27, x5, 0x0000000000100000, 0x800000000000, 0x1b, x1, 16, x2)

rori_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0000000000080000), rs1:x4(0x0001000000000000), imm:0x1d
    TEST_IMM_OP(rori, x28, x4, 0x0000000000080000, 0x1000000000000, 0x1d, x1, 24, x2)

rori_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0000000000080000), rs1:x3(0x0002000000000000), imm:0x1e
    TEST_IMM_OP(rori, x29, x3, 0x0000000000080000, 0x2000000000000, 0x1e, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x4,signature_13_0)


rori_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0004000000000000), rs1:x2(0x0004000000000000), imm:0x0
    TEST_IMM_OP(rori, x30, x2, 0x0004000000000000, 0x4000000000000, 0x0, x4, 0, x5)

rori_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0000000800000000), rs1:x1(0x0008000000000000), imm:0x10
    TEST_IMM_OP(rori, x31, x1, 0x0000000800000000, 0x8000000000000, 0x10, x4, 8, x5)

rori_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0000100000000000), rs1:x31(0x0010000000000000), imm:0x8
    TEST_IMM_OP(rori, x1, x31, 0x0000100000000000, 0x10000000000000, 0x8, x4, 16, x5)

rori_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0002000000000000), rs1:x30(0x0020000000000000), imm:0x4
    TEST_IMM_OP(rori, x2, x30, 0x0002000000000000, 0x20000000000000, 0x4, x4, 24, x5)

rori_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0010000000000000), rs1:x29(0x0040000000000000), imm:0x2
    TEST_IMM_OP(rori, x3, x29, 0x0010000000000000, 0x40000000000000, 0x2, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_14_0)


rori_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0040000000000000), rs1:x28(0x0080000000000000), imm:0x1
    TEST_IMM_OP(rori, x4, x28, 0x0040000000000000, 0x80000000000000, 0x1, x1, 0, x2)

rori_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0020000000000000), rs1:x27(0x0100000000000000), imm:0x3
    TEST_IMM_OP(rori, x5, x27, 0x0020000000000000, 0x100000000000000, 0x3, x1, 8, x2)

rori_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x0000000040000000), rs1:x26(0x0200000000000000), imm:0x1b
    TEST_IMM_OP(rori, x6, x26, 0x0000000040000000, 0x200000000000000, 0x1b, x1, 16, x2)

rori_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x0400000000000000), rs1:x25(0x0400000000000000), imm:0x0
    TEST_IMM_OP(rori, x7, x25, 0x0400000000000000, 0x400000000000000, 0x0, x1, 24, x2)

rori_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x0100000000000000), rs1:x24(0x0800000000000000), imm:0x3
    TEST_IMM_OP(rori, x8, x24, 0x0100000000000000, 0x800000000000000, 0x3, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_15_0)


rori_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x0000200000000000), rs1:x23(0x1000000000000000), imm:0xf
    TEST_IMM_OP(rori, x9, x23, 0x0000200000000000, 0x1000000000000000, 0xf, x1, 0, x2)

rori_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x0000400000000000), rs1:x22(0x2000000000000000), imm:0xf
    TEST_IMM_OP(rori, x10, x22, 0x0000400000000000, 0x2000000000000000, 0xf, x1, 8, x2)

rori_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x0008000000000000), rs1:x21(0x4000000000000000), imm:0xb
    TEST_IMM_OP(rori, x11, x21, 0x0008000000000000, 0x4000000000000000, 0xb, x1, 16, x2)

rori_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x0000001000000000), rs1:x20(0x8000000000000000), imm:0x1b
    TEST_IMM_OP(rori, x12, x20, 0x0000001000000000, 0x8000000000000000, 0x1b, x1, 24, x2)

rori_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000), imm:0x1
    TEST_IMM_OP(rori, x13, x19, 0x0000000000000000, 0x0, 0x1, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x4,signature_16_0)


rori_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0xfffff7ffffffffff), rs1:x18(0xfffffffffffffffe), imm:0x15
    TEST_IMM_OP(rori, x14, x18, 0xfffff7ffffffffff, 0xfffffffffffffffe, 0x15, x4, 0, x5)

rori_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0xfffffffbffffffff), rs1:x17(0xfffffffffffffffd), imm:0x1f
    TEST_IMM_OP(rori, x15, x17, 0xfffffffbffffffff, 0xfffffffffffffffd, 0x1f, x4, 8, x5)

rori_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0xfff7ffffffffffff), rs1:x16(0xfffffffffffffffb), imm:0xf
    TEST_IMM_OP(rori, x16, x16, 0xfff7ffffffffffff, 0xfffffffffffffffb, 0xf, x4, 16, x5)

rori_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0xffffefffffffffff), rs1:x15(0xfffffffffffffff7), imm:0x17
    TEST_IMM_OP(rori, x17, x15, 0xffffefffffffffff, 0xfffffffffffffff7, 0x17, x4, 24, x5)

rori_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0xfffffdffffffffff), rs1:x14(0xffffffffffffffef), imm:0x1b
    TEST_IMM_OP(rori, x18, x14, 0xfffffdffffffffff, 0xffffffffffffffef, 0x1b, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_17_0)


rori_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0xfffffeffffffffff), rs1:x13(0xffffffffffffffdf), imm:0x1d
    TEST_IMM_OP(rori, x19, x13, 0xfffffeffffffffff, 0xffffffffffffffdf, 0x1d, x1, 0, x2)

rori_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0xfffffeffffffffff), rs1:x12(0xffffffffffffffbf), imm:0x1e
    TEST_IMM_OP(rori, x20, x12, 0xfffffeffffffffff, 0xffffffffffffffbf, 0x1e, x1, 8, x2)

rori_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffff7f), rs1:x11(0xffffffffffffff7f), imm:0x0
    TEST_IMM_OP(rori, x21, x11, 0xffffffffffffff7f, 0xffffffffffffff7f, 0x0, x1, 16, x2)

rori_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0xfeffffffffffffff), rs1:x10(0xfffffffffffffeff), imm:0x10
    TEST_IMM_OP(rori, x22, x10, 0xfeffffffffffffff, 0xfffffffffffffeff, 0x10, x1, 24, x2)

rori_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0xfffffffffffffffd), rs1:x9(0xfffffffffffffdff), imm:0x8
    TEST_IMM_OP(rori, x23, x9, 0xfffffffffffffffd, 0xfffffffffffffdff, 0x8, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_18_0)


rori_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffbf), rs1:x8(0xfffffffffffffbff), imm:0x4
    TEST_IMM_OP(rori, x24, x8, 0xffffffffffffffbf, 0xfffffffffffffbff, 0x4, x1, 0, x2)

rori_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0xfffffffffffffdff), rs1:x7(0xfffffffffffff7ff), imm:0x2
    TEST_IMM_OP(rori, x25, x7, 0xfffffffffffffdff, 0xfffffffffffff7ff, 0x2, x1, 8, x2)

rori_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0xfffffffffffff7ff), rs1:x6(0xffffffffffffefff), imm:0x1
    TEST_IMM_OP(rori, x26, x6, 0xfffffffffffff7ff, 0xffffffffffffefff, 0x1, x1, 16, x2)

rori_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0xfffffffffffffbff), rs1:x5(0xffffffffffffdfff), imm:0x3
    TEST_IMM_OP(rori, x27, x5, 0xfffffffffffffbff, 0xffffffffffffdfff, 0x3, x1, 24, x2)

rori_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0xfff7ffffffffffff), rs1:x4(0xffffffffffffbfff), imm:0x1b
    TEST_IMM_OP(rori, x28, x4, 0xfff7ffffffffffff, 0xffffffffffffbfff, 0x1b, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x4,signature_19_0)


rori_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffff7fff), rs1:x3(0xffffffffffff7fff), imm:0x0
    TEST_IMM_OP(rori, x29, x3, 0xffffffffffff7fff, 0xffffffffffff7fff, 0x0, x4, 0, x5)

rori_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffdfff), rs1:x2(0xfffffffffffeffff), imm:0x3
    TEST_IMM_OP(rori, x30, x2, 0xffffffffffffdfff, 0xfffffffffffeffff, 0x3, x4, 8, x5)

rori_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0xfffffffffffffffb), rs1:x1(0xfffffffffffdffff), imm:0xf
    TEST_IMM_OP(rori, x31, x1, 0xfffffffffffffffb, 0xfffffffffffdffff, 0xf, x4, 16, x5)

rori_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0xfffffffffffffff7), rs1:x31(0xfffffffffffbffff), imm:0xf
    TEST_IMM_OP(rori, x1, x31, 0xfffffffffffffff7, 0xfffffffffffbffff, 0xf, x4, 24, x5)

rori_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0xfffffffffffffeff), rs1:x30(0xfffffffffff7ffff), imm:0xb
    TEST_IMM_OP(rori, x2, x30, 0xfffffffffffffeff, 0xfffffffffff7ffff, 0xb, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_20_0)


rori_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0xfdffffffffffffff), rs1:x29(0xffffffffffefffff), imm:0x1b
    TEST_IMM_OP(rori, x3, x29, 0xfdffffffffffffff, 0xffffffffffefffff, 0x1b, x1, 0, x2)

rori_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffefffff), rs1:x28(0xffffffffffdfffff), imm:0x1
    TEST_IMM_OP(rori, x4, x28, 0xffffffffffefffff, 0xffffffffffdfffff, 0x1, x1, 8, x2)

rori_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0xfffffffffffffffd), rs1:x27(0xffffffffffbfffff), imm:0x15
    TEST_IMM_OP(rori, x5, x27, 0xfffffffffffffffd, 0xffffffffffbfffff, 0x15, x1, 16, x2)

rori_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0xfeffffffffffffff), rs1:x26(0xffffffffff7fffff), imm:0x1f
    TEST_IMM_OP(rori, x6, x26, 0xfeffffffffffffff, 0xffffffffff7fffff, 0x1f, x1, 24, x2)

rori_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0xfffffffffffffdff), rs1:x25(0xfffffffffeffffff), imm:0xf
    TEST_IMM_OP(rori, x7, x25, 0xfffffffffffffdff, 0xfffffffffeffffff, 0xf, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_21_0)


rori_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0xfffffffffffffffb), rs1:x24(0xfffffffffdffffff), imm:0x17
    TEST_IMM_OP(rori, x8, x24, 0xfffffffffffffffb, 0xfffffffffdffffff, 0x17, x1, 0, x2)

rori_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0x7fffffffffffffff), rs1:x23(0xfffffffffbffffff), imm:0x1b
    TEST_IMM_OP(rori, x9, x23, 0x7fffffffffffffff, 0xfffffffffbffffff, 0x1b, x1, 8, x2)

rori_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0xbfffffffffffffff), rs1:x22(0xfffffffff7ffffff), imm:0x1d
    TEST_IMM_OP(rori, x10, x22, 0xbfffffffffffffff, 0xfffffffff7ffffff, 0x1d, x1, 16, x2)

rori_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0xbfffffffffffffff), rs1:x21(0xffffffffefffffff), imm:0x1e
    TEST_IMM_OP(rori, x11, x21, 0xbfffffffffffffff, 0xffffffffefffffff, 0x1e, x1, 24, x2)

rori_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0xffffffffdfffffff), rs1:x20(0xffffffffdfffffff), imm:0x0
    TEST_IMM_OP(rori, x12, x20, 0xffffffffdfffffff, 0xffffffffdfffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x5,signature_22_0)


rori_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffbfff), rs1:x19(0xffffffffbfffffff), imm:0x10
    TEST_IMM_OP(rori, x13, x19, 0xffffffffffffbfff, 0xffffffffbfffffff, 0x10, x5, 0, x6)

rori_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0xffffffffff7fffff), rs1:x18(0xffffffff7fffffff), imm:0x8
    TEST_IMM_OP(rori, x14, x18, 0xffffffffff7fffff, 0xffffffff7fffffff, 0x8, x5, 8, x6)

rori_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0xffffffffefffffff), rs1:x17(0xfffffffeffffffff), imm:0x4
    TEST_IMM_OP(rori, x15, x17, 0xffffffffefffffff, 0xfffffffeffffffff, 0x4, x5, 16, x6)

rori_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0xffffffff7fffffff), rs1:x16(0xfffffffdffffffff), imm:0x2
    TEST_IMM_OP(rori, x16, x16, 0xffffffff7fffffff, 0xfffffffdffffffff, 0x2, x5, 24, x6)

rori_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0xfffffffdffffffff), rs1:x15(0xfffffffbffffffff), imm:0x1
    TEST_IMM_OP(rori, x17, x15, 0xfffffffdffffffff, 0xfffffffbffffffff, 0x1, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_23_0)


rori_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0xfffffffeffffffff), rs1:x14(0xfffffff7ffffffff), imm:0x3
    TEST_IMM_OP(rori, x18, x14, 0xfffffffeffffffff, 0xfffffff7ffffffff, 0x3, x1, 0, x2)

rori_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0xfffffffffffffdff), rs1:x13(0xffffffefffffffff), imm:0x1b
    TEST_IMM_OP(rori, x19, x13, 0xfffffffffffffdff, 0xffffffefffffffff, 0x1b, x1, 8, x2)

rori_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0xffffffdfffffffff), rs1:x12(0xffffffdfffffffff), imm:0x0
    TEST_IMM_OP(rori, x20, x12, 0xffffffdfffffffff, 0xffffffdfffffffff, 0x0, x1, 16, x2)

rori_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0xfffffff7ffffffff), rs1:x11(0xffffffbfffffffff), imm:0x3
    TEST_IMM_OP(rori, x21, x11, 0xfffffff7ffffffff, 0xffffffbfffffffff, 0x3, x1, 24, x2)

rori_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0xfffffffffeffffff), rs1:x10(0xffffff7fffffffff), imm:0xf
    TEST_IMM_OP(rori, x22, x10, 0xfffffffffeffffff, 0xffffff7fffffffff, 0xf, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_24_0)


rori_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0xfffffffffdffffff), rs1:x9(0xfffffeffffffffff), imm:0xf
    TEST_IMM_OP(rori, x23, x9, 0xfffffffffdffffff, 0xfffffeffffffffff, 0xf, x1, 0, x2)

rori_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0xffffffffbfffffff), rs1:x8(0xfffffdffffffffff), imm:0xb
    TEST_IMM_OP(rori, x24, x8, 0xffffffffbfffffff, 0xfffffdffffffffff, 0xb, x1, 8, x2)

rori_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffff7fff), rs1:x7(0xfffffbffffffffff), imm:0x1b
    TEST_IMM_OP(rori, x25, x7, 0xffffffffffff7fff, 0xfffffbffffffffff, 0x1b, x1, 16, x2)

rori_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0xfffffbffffffffff), rs1:x6(0xfffff7ffffffffff), imm:0x1
    TEST_IMM_OP(rori, x26, x6, 0xfffffbffffffffff, 0xfffff7ffffffffff, 0x1, x1, 24, x2)

rori_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0xffffffffff7fffff), rs1:x5(0xffffefffffffffff), imm:0x15
    TEST_IMM_OP(rori, x27, x5, 0xffffffffff7fffff, 0xffffefffffffffff, 0x15, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x5,signature_25_0)


rori_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffbfff), rs1:x4(0xffffdfffffffffff), imm:0x1f
    TEST_IMM_OP(rori, x28, x4, 0xffffffffffffbfff, 0xffffdfffffffffff, 0x1f, x5, 0, x6)

rori_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0xffffffff7fffffff), rs1:x3(0xffffbfffffffffff), imm:0xf
    TEST_IMM_OP(rori, x29, x3, 0xffffffff7fffffff, 0xffffbfffffffffff, 0xf, x5, 8, x6)

rori_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0xfffffffffeffffff), rs1:x2(0xffff7fffffffffff), imm:0x17
    TEST_IMM_OP(rori, x30, x2, 0xfffffffffeffffff, 0xffff7fffffffffff, 0x17, x5, 16, x6)

rori_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffdfffff), rs1:x1(0xfffeffffffffffff), imm:0x1b
    TEST_IMM_OP(rori, x31, x1, 0xffffffffffdfffff, 0xfffeffffffffffff, 0x1b, x5, 24, x6)

rori_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffefffff), rs1:x31(0xfffdffffffffffff), imm:0x1d
    TEST_IMM_OP(rori, x1, x31, 0xffffffffffefffff, 0xfffdffffffffffff, 0x1d, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_26_0)


rori_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffefffff), rs1:x30(0xfffbffffffffffff), imm:0x1e
    TEST_IMM_OP(rori, x2, x30, 0xffffffffffefffff, 0xfffbffffffffffff, 0x1e, x1, 0, x7)

rori_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0xfff7ffffffffffff), rs1:x29(0xfff7ffffffffffff), imm:0x0
    TEST_IMM_OP(rori, x3, x29, 0xfff7ffffffffffff, 0xfff7ffffffffffff, 0x0, x1, 8, x7)

rori_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0xffffffefffffffff), rs1:x28(0xffefffffffffffff), imm:0x10
    TEST_IMM_OP(rori, x4, x28, 0xffffffefffffffff, 0xffefffffffffffff, 0x10, x1, 16, x7)

rori_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0xffffdfffffffffff), rs1:x27(0xffdfffffffffffff), imm:0x8
    TEST_IMM_OP(rori, x5, x27, 0xffffdfffffffffff, 0xffdfffffffffffff, 0x8, x1, 24, x7)

rori_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0xfffbffffffffffff), rs1:x26(0xffbfffffffffffff), imm:0x4
    TEST_IMM_OP(rori, x6, x26, 0xfffbffffffffffff, 0xffbfffffffffffff, 0x4, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_27_0)


rori_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0xff7fffffffffffff), rs1:x25(0xff7fffffffffffff), imm:0x0
    TEST_IMM_OP(rori, x7, x25, 0xff7fffffffffffff, 0xff7fffffffffffff, 0x0, x1, 0, x2)

rori_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0xfeffffffffffffff), rs1:x24(0xfeffffffffffffff), imm:0x0
    TEST_IMM_OP(rori, x8, x24, 0xfeffffffffffffff, 0xfeffffffffffffff, 0x0, x1, 8, x2)

rori_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0xfdffffffffffffff), rs1:x23(0xfdffffffffffffff), imm:0x0
    TEST_IMM_OP(rori, x9, x23, 0xfdffffffffffffff, 0xfdffffffffffffff, 0x0, x1, 16, x2)

rori_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0xfbffffffffffffff), rs1:x22(0xfbffffffffffffff), imm:0x0
    TEST_IMM_OP(rori, x10, x22, 0xfbffffffffffffff, 0xfbffffffffffffff, 0x0, x1, 24, x2)

rori_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0xf7ffffffffffffff), rs1:x21(0xf7ffffffffffffff), imm:0x0
    TEST_IMM_OP(rori, x11, x21, 0xf7ffffffffffffff, 0xf7ffffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x6,signature_28_0)


rori_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0xefffffffffffffff), rs1:x20(0xefffffffffffffff), imm:0x0
    TEST_IMM_OP(rori, x12, x20, 0xefffffffffffffff, 0xefffffffffffffff, 0x0, x6, 0, x7)

rori_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0xdfffffffffffffff), rs1:x19(0xdfffffffffffffff), imm:0x0
    TEST_IMM_OP(rori, x13, x19, 0xdfffffffffffffff, 0xdfffffffffffffff, 0x0, x6, 8, x7)

rori_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0xbfffffffffffffff), rs1:x18(0xbfffffffffffffff), imm:0x0
    TEST_IMM_OP(rori, x14, x18, 0xbfffffffffffffff, 0xbfffffffffffffff, 0x0, x6, 16, x7)

rori_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0x7fffffffffffffff), rs1:x17(0x7fffffffffffffff), imm:0x0
    TEST_IMM_OP(rori, x15, x17, 0x7fffffffffffffff, 0x7fffffffffffffff, 0x0, x6, 24, x7)

rori_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xffffffffffffffff), imm:0x0
    TEST_IMM_OP(rori, x16, x16, 0xffffffffffffffff, 0xffffffffffffffff, 0x0, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_29_0)


rori_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000001), rs1:x15(0x0000000000000001), imm:0x0
    TEST_IMM_OP(rori, x17, x15, 0x0000000000000001, 0x1, 0x0, x1, 0, x2)

rori_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000002), rs1:x14(0x0000000000000002), imm:0x0
    TEST_IMM_OP(rori, x18, x14, 0x0000000000000002, 0x2, 0x0, x1, 8, x2)

rori_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000004), rs1:x13(0x0000000000000004), imm:0x0
    TEST_IMM_OP(rori, x19, x13, 0x0000000000000004, 0x4, 0x0, x1, 16, x2)

rori_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000008), rs1:x12(0x0000000000000008), imm:0x0
    TEST_IMM_OP(rori, x20, x12, 0x0000000000000008, 0x8, 0x0, x1, 24, x2)

rori_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000010), rs1:x11(0x0000000000000010), imm:0x0
    TEST_IMM_OP(rori, x21, x11, 0x0000000000000010, 0x10, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_30_0)


rori_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000020), rs1:x10(0x0000000000000020), imm:0x0
    TEST_IMM_OP(rori, x22, x10, 0x0000000000000020, 0x20, 0x0, x1, 0, x2)

rori_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000040), rs1:x9(0x0000000000000040), imm:0x0
    TEST_IMM_OP(rori, x23, x9, 0x0000000000000040, 0x40, 0x0, x1, 8, x2)

rori_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000080), rs1:x8(0x0000000000000080), imm:0x0
    TEST_IMM_OP(rori, x24, x8, 0x0000000000000080, 0x80, 0x0, x1, 16, x2)

rori_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000100), rs1:x7(0x0000000000000100), imm:0x0
    TEST_IMM_OP(rori, x25, x7, 0x0000000000000100, 0x100, 0x0, x1, 24, x2)

rori_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000200), rs1:x6(0x0000000000000200), imm:0x0
    TEST_IMM_OP(rori, x26, x6, 0x0000000000000200, 0x200, 0x0, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x6,signature_31_0)


rori_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000400), rs1:x5(0x0000000000000400), imm:0x0
    TEST_IMM_OP(rori, x27, x5, 0x0000000000000400, 0x400, 0x0, x6, 0, x7)

rori_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000800), rs1:x4(0x0000000000000800), imm:0x0
    TEST_IMM_OP(rori, x28, x4, 0x0000000000000800, 0x800, 0x0, x6, 8, x7)

rori_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0000000000001000), rs1:x3(0x0000000000001000), imm:0x0
    TEST_IMM_OP(rori, x29, x3, 0x0000000000001000, 0x1000, 0x0, x6, 16, x7)

rori_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000000002000), rs1:x2(0x0000000000002000), imm:0x0
    TEST_IMM_OP(rori, x30, x2, 0x0000000000002000, 0x2000, 0x0, x6, 24, x7)

rori_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0000000000004000), rs1:x1(0x0000000000004000), imm:0x0
    TEST_IMM_OP(rori, x31, x1, 0x0000000000004000, 0x4000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x6,signature_32_0)


rori_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000000008000), rs1:x31(0x0000000000008000), imm:0x0
    TEST_IMM_OP(rori, x1, x31, 0x0000000000008000, 0x8000, 0x0, x6, 0, x7)

rori_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000000000010000), rs1:x30(0x0000000000010000), imm:0x0
    TEST_IMM_OP(rori, x2, x30, 0x0000000000010000, 0x10000, 0x0, x6, 8, x7)

rori_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000000020000), rs1:x29(0x0000000000020000), imm:0x0
    TEST_IMM_OP(rori, x3, x29, 0x0000000000020000, 0x20000, 0x0, x6, 16, x7)

rori_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000000040000), rs1:x28(0x0000000000040000), imm:0x0
    TEST_IMM_OP(rori, x4, x28, 0x0000000000040000, 0x40000, 0x0, x6, 24, x7)

rori_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000000080000), rs1:x27(0x0000000000080000), imm:0x0
    TEST_IMM_OP(rori, x5, x27, 0x0000000000080000, 0x80000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_33_0)


rori_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000000100000), rs1:x26(0x0000000000100000), imm:0x0
    TEST_IMM_OP(rori, x6, x26, 0x0000000000100000, 0x100000, 0x0, x1, 0, x2)

rori_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000000200000), rs1:x25(0x0000000000200000), imm:0x0
    TEST_IMM_OP(rori, x7, x25, 0x0000000000200000, 0x200000, 0x0, x1, 8, x2)

rori_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000000400000), rs1:x24(0x0000000000400000), imm:0x0
    TEST_IMM_OP(rori, x8, x24, 0x0000000000400000, 0x400000, 0x0, x1, 16, x2)

rori_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000000800000), rs1:x23(0x0000000000800000), imm:0x0
    TEST_IMM_OP(rori, x9, x23, 0x0000000000800000, 0x800000, 0x0, x1, 24, x2)

rori_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000001000000), rs1:x22(0x0000000001000000), imm:0x0
    TEST_IMM_OP(rori, x10, x22, 0x0000000001000000, 0x1000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_34_0)


rori_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000002000000), rs1:x21(0x0000000002000000), imm:0x0
    TEST_IMM_OP(rori, x11, x21, 0x0000000002000000, 0x2000000, 0x0, x1, 0, x7)

rori_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000004000000), rs1:x20(0x0000000004000000), imm:0x0
    TEST_IMM_OP(rori, x12, x20, 0x0000000004000000, 0x4000000, 0x0, x1, 8, x7)

rori_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000008000000), rs1:x19(0x0000000008000000), imm:0x0
    TEST_IMM_OP(rori, x13, x19, 0x0000000008000000, 0x8000000, 0x0, x1, 16, x7)

rori_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000010000000), rs1:x18(0x0000000010000000), imm:0x0
    TEST_IMM_OP(rori, x14, x18, 0x0000000010000000, 0x10000000, 0x0, x1, 24, x7)

rori_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000020000000), rs1:x17(0x0000000020000000), imm:0x0
    TEST_IMM_OP(rori, x15, x17, 0x0000000020000000, 0x20000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x2,signature_35_0)


rori_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000040000000), rs1:x16(0x0000000040000000), imm:0x0
    TEST_IMM_OP(rori, x16, x16, 0x0000000040000000, 0x40000000, 0x0, x2, 0, x3)

rori_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000000080000000), rs1:x15(0x0000000080000000), imm:0x0
    TEST_IMM_OP(rori, x17, x15, 0x0000000080000000, 0x80000000, 0x0, x2, 8, x3)

rori_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000100000000), rs1:x14(0x0000000100000000), imm:0x0
    TEST_IMM_OP(rori, x18, x14, 0x0000000100000000, 0x100000000, 0x0, x2, 16, x3)

rori_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000200000000), rs1:x13(0x0000000200000000), imm:0x0
    TEST_IMM_OP(rori, x19, x13, 0x0000000200000000, 0x200000000, 0x0, x2, 24, x3)

rori_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000000400000000), rs1:x12(0x0000000400000000), imm:0x0
    TEST_IMM_OP(rori, x20, x12, 0x0000000400000000, 0x400000000, 0x0, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_36_0)


rori_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000800000000), rs1:x11(0x0000000800000000), imm:0x0
    TEST_IMM_OP(rori, x21, x11, 0x0000000800000000, 0x800000000, 0x0, x1, 0, x2)

rori_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000001000000000), rs1:x10(0x0000001000000000), imm:0x0
    TEST_IMM_OP(rori, x22, x10, 0x0000001000000000, 0x1000000000, 0x0, x1, 8, x2)

rori_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000002000000000), rs1:x9(0x0000002000000000), imm:0x0
    TEST_IMM_OP(rori, x23, x9, 0x0000002000000000, 0x2000000000, 0x0, x1, 16, x2)

rori_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000004000000000), rs1:x8(0x0000004000000000), imm:0x0
    TEST_IMM_OP(rori, x24, x8, 0x0000004000000000, 0x4000000000, 0x0, x1, 24, x2)

rori_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000008000000000), rs1:x7(0x0000008000000000), imm:0x0
    TEST_IMM_OP(rori, x25, x7, 0x0000008000000000, 0x8000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_37_0)


rori_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000010000000000), rs1:x6(0x0000010000000000), imm:0x0
    TEST_IMM_OP(rori, x26, x6, 0x0000010000000000, 0x10000000000, 0x0, x1, 0, x7)

rori_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000020000000000), rs1:x5(0x0000020000000000), imm:0x0
    TEST_IMM_OP(rori, x27, x5, 0x0000020000000000, 0x20000000000, 0x0, x1, 8, x7)

rori_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000040000000000), rs1:x4(0x0000040000000000), imm:0x0
    TEST_IMM_OP(rori, x28, x4, 0x0000040000000000, 0x40000000000, 0x0, x1, 16, x7)

rori_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000080000000000), rs1:x3(0x0000080000000000), imm:0x0
    TEST_IMM_OP(rori, x29, x3, 0x0000080000000000, 0x80000000000, 0x0, x1, 24, x7)

rori_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000100000000000), rs1:x2(0x0000100000000000), imm:0x0
    TEST_IMM_OP(rori, x30, x2, 0x0000100000000000, 0x100000000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x5,signature_38_0)


rori_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000200000000000), rs1:x1(0x0000200000000000), imm:0x0
    TEST_IMM_OP(rori, x31, x1, 0x0000200000000000, 0x200000000000, 0x0, x5, 0, x6)

rori_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000400000000000), rs1:x31(0x0000400000000000), imm:0x0
    TEST_IMM_OP(rori, x1, x31, 0x0000400000000000, 0x400000000000, 0x0, x5, 8, x6)

rori_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000800000000000), rs1:x30(0x0000800000000000), imm:0x0
    TEST_IMM_OP(rori, x2, x30, 0x0000800000000000, 0x800000000000, 0x0, x5, 16, x6)

rori_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0001000000000000), rs1:x29(0x0001000000000000), imm:0x0
    TEST_IMM_OP(rori, x3, x29, 0x0001000000000000, 0x1000000000000, 0x0, x5, 24, x6)

rori_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0002000000000000), rs1:x28(0x0002000000000000), imm:0x0
    TEST_IMM_OP(rori, x4, x28, 0x0002000000000000, 0x2000000000000, 0x0, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_39_0)


rori_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0004000000000000), rs1:x27(0x0004000000000000), imm:0x0
    TEST_IMM_OP(rori, x5, x27, 0x0004000000000000, 0x4000000000000, 0x0, x1, 0, x2)

rori_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0008000000000000), rs1:x26(0x0008000000000000), imm:0x0
    TEST_IMM_OP(rori, x6, x26, 0x0008000000000000, 0x8000000000000, 0x0, x1, 8, x2)

rori_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0010000000000000), rs1:x25(0x0010000000000000), imm:0x0
    TEST_IMM_OP(rori, x7, x25, 0x0010000000000000, 0x10000000000000, 0x0, x1, 16, x2)

rori_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0020000000000000), rs1:x24(0x0020000000000000), imm:0x0
    TEST_IMM_OP(rori, x8, x24, 0x0020000000000000, 0x20000000000000, 0x0, x1, 24, x2)

rori_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0040000000000000), rs1:x23(0x0040000000000000), imm:0x0
    TEST_IMM_OP(rori, x9, x23, 0x0040000000000000, 0x40000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_40_0)


rori_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0080000000000000), rs1:x22(0x0080000000000000), imm:0x0
    TEST_IMM_OP(rori, x10, x22, 0x0080000000000000, 0x80000000000000, 0x0, x1, 0, x2)

rori_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0100000000000000), rs1:x21(0x0100000000000000), imm:0x0
    TEST_IMM_OP(rori, x11, x21, 0x0100000000000000, 0x100000000000000, 0x0, x1, 8, x2)

rori_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0200000000000000), rs1:x20(0x0200000000000000), imm:0x0
    TEST_IMM_OP(rori, x12, x20, 0x0200000000000000, 0x200000000000000, 0x0, x1, 16, x2)

rori_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0400000000000000), rs1:x19(0x0400000000000000), imm:0x0
    TEST_IMM_OP(rori, x13, x19, 0x0400000000000000, 0x400000000000000, 0x0, x1, 24, x2)

rori_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0800000000000000), rs1:x18(0x0800000000000000), imm:0x0
    TEST_IMM_OP(rori, x14, x18, 0x0800000000000000, 0x800000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x3,signature_41_0)


rori_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x1000000000000000), rs1:x17(0x1000000000000000), imm:0x0
    TEST_IMM_OP(rori, x15, x17, 0x1000000000000000, 0x1000000000000000, 0x0, x3, 0, x4)

rori_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x2000000000000000), rs1:x16(0x2000000000000000), imm:0x0
    TEST_IMM_OP(rori, x16, x16, 0x2000000000000000, 0x2000000000000000, 0x0, x3, 8, x4)

rori_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x4000000000000000), rs1:x15(0x4000000000000000), imm:0x0
    TEST_IMM_OP(rori, x17, x15, 0x4000000000000000, 0x4000000000000000, 0x0, x3, 16, x4)

rori_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x8000000000000000), rs1:x14(0x8000000000000000), imm:0x0
    TEST_IMM_OP(rori, x18, x14, 0x8000000000000000, 0x8000000000000000, 0x0, x3, 24, x4)

rori_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000), imm:0x0
    TEST_IMM_OP(rori, x19, x13, 0x0000000000000000, 0x0, 0x0, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_42_0)


rori_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0xfffffffffffffffe), rs1:x12(0xfffffffffffffffe), imm:0x0
    TEST_IMM_OP(rori, x20, x12, 0xfffffffffffffffe, 0xfffffffffffffffe, 0x0, x1, 0, x2)

rori_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0xfffffffffffffffd), rs1:x11(0xfffffffffffffffd), imm:0x0
    TEST_IMM_OP(rori, x21, x11, 0xfffffffffffffffd, 0xfffffffffffffffd, 0x0, x1, 8, x2)

rori_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0xfffffffffffffffb), rs1:x10(0xfffffffffffffffb), imm:0x0
    TEST_IMM_OP(rori, x22, x10, 0xfffffffffffffffb, 0xfffffffffffffffb, 0x0, x1, 16, x2)

rori_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0xfffffffffffffff7), rs1:x9(0xfffffffffffffff7), imm:0x0
    TEST_IMM_OP(rori, x23, x9, 0xfffffffffffffff7, 0xfffffffffffffff7, 0x0, x1, 24, x2)

rori_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffef), rs1:x8(0xffffffffffffffef), imm:0x0
    TEST_IMM_OP(rori, x24, x8, 0xffffffffffffffef, 0xffffffffffffffef, 0x0, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_43_0)


rori_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffdf), rs1:x7(0xffffffffffffffdf), imm:0x0
    TEST_IMM_OP(rori, x25, x7, 0xffffffffffffffdf, 0xffffffffffffffdf, 0x0, x1, 0, x2)

rori_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffbf), rs1:x6(0xffffffffffffffbf), imm:0x0
    TEST_IMM_OP(rori, x26, x6, 0xffffffffffffffbf, 0xffffffffffffffbf, 0x0, x1, 8, x2)

rori_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffff7f), rs1:x5(0xffffffffffffff7f), imm:0x0
    TEST_IMM_OP(rori, x27, x5, 0xffffffffffffff7f, 0xffffffffffffff7f, 0x0, x1, 16, x2)

rori_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0xfffffffffffffeff), rs1:x4(0xfffffffffffffeff), imm:0x0
    TEST_IMM_OP(rori, x28, x4, 0xfffffffffffffeff, 0xfffffffffffffeff, 0x0, x1, 24, x2)

rori_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0xfffffffffffffdff), rs1:x3(0xfffffffffffffdff), imm:0x0
    TEST_IMM_OP(rori, x29, x3, 0xfffffffffffffdff, 0xfffffffffffffdff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x4,signature_44_0)


rori_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0xfffffffffffffbff), rs1:x2(0xfffffffffffffbff), imm:0x0
    TEST_IMM_OP(rori, x30, x2, 0xfffffffffffffbff, 0xfffffffffffffbff, 0x0, x4, 0, x5)

rori_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0xfffffffffffff7ff), rs1:x1(0xfffffffffffff7ff), imm:0x0
    TEST_IMM_OP(rori, x31, x1, 0xfffffffffffff7ff, 0xfffffffffffff7ff, 0x0, x4, 8, x5)

rori_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffefff), rs1:x31(0xffffffffffffefff), imm:0x0
    TEST_IMM_OP(rori, x1, x31, 0xffffffffffffefff, 0xffffffffffffefff, 0x0, x4, 16, x5)

rori_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffdfff), rs1:x30(0xffffffffffffdfff), imm:0x0
    TEST_IMM_OP(rori, x2, x30, 0xffffffffffffdfff, 0xffffffffffffdfff, 0x0, x4, 24, x5)

rori_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffbfff), rs1:x29(0xffffffffffffbfff), imm:0x0
    TEST_IMM_OP(rori, x3, x29, 0xffffffffffffbfff, 0xffffffffffffbfff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_45_0)


rori_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffff7fff), rs1:x28(0xffffffffffff7fff), imm:0x0
    TEST_IMM_OP(rori, x4, x28, 0xffffffffffff7fff, 0xffffffffffff7fff, 0x0, x1, 0, x2)

rori_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0xfffffffffffeffff), rs1:x27(0xfffffffffffeffff), imm:0x0
    TEST_IMM_OP(rori, x5, x27, 0xfffffffffffeffff, 0xfffffffffffeffff, 0x0, x1, 8, x2)

rori_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0xfffffffffffdffff), rs1:x26(0xfffffffffffdffff), imm:0x0
    TEST_IMM_OP(rori, x6, x26, 0xfffffffffffdffff, 0xfffffffffffdffff, 0x0, x1, 16, x2)

rori_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0xfffffffffffbffff), rs1:x25(0xfffffffffffbffff), imm:0x0
    TEST_IMM_OP(rori, x7, x25, 0xfffffffffffbffff, 0xfffffffffffbffff, 0x0, x1, 24, x2)

rori_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0xfffffffffff7ffff), rs1:x24(0xfffffffffff7ffff), imm:0x0
    TEST_IMM_OP(rori, x8, x24, 0xfffffffffff7ffff, 0xfffffffffff7ffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_46_0)


rori_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffefffff), rs1:x23(0xffffffffffefffff), imm:0x0
    TEST_IMM_OP(rori, x9, x23, 0xffffffffffefffff, 0xffffffffffefffff, 0x0, x1, 0, x2)

rori_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffdfffff), rs1:x22(0xffffffffffdfffff), imm:0x0
    TEST_IMM_OP(rori, x10, x22, 0xffffffffffdfffff, 0xffffffffffdfffff, 0x0, x1, 8, x2)

rori_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffbfffff), rs1:x21(0xffffffffffbfffff), imm:0x0
    TEST_IMM_OP(rori, x11, x21, 0xffffffffffbfffff, 0xffffffffffbfffff, 0x0, x1, 16, x2)

rori_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0xffffffffff7fffff), rs1:x20(0xffffffffff7fffff), imm:0x0
    TEST_IMM_OP(rori, x12, x20, 0xffffffffff7fffff, 0xffffffffff7fffff, 0x0, x1, 24, x2)

rori_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0xfffffffffeffffff), rs1:x19(0xfffffffffeffffff), imm:0x0
    TEST_IMM_OP(rori, x13, x19, 0xfffffffffeffffff, 0xfffffffffeffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x4,signature_47_0)


rori_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0xfffffffffdffffff), rs1:x18(0xfffffffffdffffff), imm:0x0
    TEST_IMM_OP(rori, x14, x18, 0xfffffffffdffffff, 0xfffffffffdffffff, 0x0, x4, 0, x5)

rori_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0xfffffffffbffffff), rs1:x17(0xfffffffffbffffff), imm:0x0
    TEST_IMM_OP(rori, x15, x17, 0xfffffffffbffffff, 0xfffffffffbffffff, 0x0, x4, 8, x5)

rori_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0xfffffffff7ffffff), rs1:x16(0xfffffffff7ffffff), imm:0x0
    TEST_IMM_OP(rori, x16, x16, 0xfffffffff7ffffff, 0xfffffffff7ffffff, 0x0, x4, 16, x5)

rori_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0xffffffffefffffff), rs1:x15(0xffffffffefffffff), imm:0x0
    TEST_IMM_OP(rori, x17, x15, 0xffffffffefffffff, 0xffffffffefffffff, 0x0, x4, 24, x5)

rori_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0xffffffffdfffffff), rs1:x14(0xffffffffdfffffff), imm:0x0
    TEST_IMM_OP(rori, x18, x14, 0xffffffffdfffffff, 0xffffffffdfffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_48_0)


rori_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0xffffffffbfffffff), rs1:x13(0xffffffffbfffffff), imm:0x0
    TEST_IMM_OP(rori, x19, x13, 0xffffffffbfffffff, 0xffffffffbfffffff, 0x0, x1, 0, x2)

rori_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0xffffffff7fffffff), rs1:x12(0xffffffff7fffffff), imm:0x0
    TEST_IMM_OP(rori, x20, x12, 0xffffffff7fffffff, 0xffffffff7fffffff, 0x0, x1, 8, x2)

rori_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0xfffffffeffffffff), rs1:x11(0xfffffffeffffffff), imm:0x0
    TEST_IMM_OP(rori, x21, x11, 0xfffffffeffffffff, 0xfffffffeffffffff, 0x0, x1, 16, x2)

rori_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0xfffffffdffffffff), rs1:x10(0xfffffffdffffffff), imm:0x0
    TEST_IMM_OP(rori, x22, x10, 0xfffffffdffffffff, 0xfffffffdffffffff, 0x0, x1, 24, x2)

rori_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0xfffffffbffffffff), rs1:x9(0xfffffffbffffffff), imm:0x0
    TEST_IMM_OP(rori, x23, x9, 0xfffffffbffffffff, 0xfffffffbffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_49_0)


rori_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0xfffffff7ffffffff), rs1:x8(0xfffffff7ffffffff), imm:0x0
    TEST_IMM_OP(rori, x24, x8, 0xfffffff7ffffffff, 0xfffffff7ffffffff, 0x0, x1, 0, x2)

rori_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0xffffffefffffffff), rs1:x7(0xffffffefffffffff), imm:0x0
    TEST_IMM_OP(rori, x25, x7, 0xffffffefffffffff, 0xffffffefffffffff, 0x0, x1, 8, x2)

rori_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0xffffffdfffffffff), rs1:x6(0xffffffdfffffffff), imm:0x0
    TEST_IMM_OP(rori, x26, x6, 0xffffffdfffffffff, 0xffffffdfffffffff, 0x0, x1, 16, x2)

rori_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0xffffffbfffffffff), rs1:x5(0xffffffbfffffffff), imm:0x0
    TEST_IMM_OP(rori, x27, x5, 0xffffffbfffffffff, 0xffffffbfffffffff, 0x0, x1, 24, x2)

rori_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0xffffff7fffffffff), rs1:x4(0xffffff7fffffffff), imm:0x0
    TEST_IMM_OP(rori, x28, x4, 0xffffff7fffffffff, 0xffffff7fffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x4,signature_50_0)


rori_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0xfffffeffffffffff), rs1:x3(0xfffffeffffffffff), imm:0x0
    TEST_IMM_OP(rori, x29, x3, 0xfffffeffffffffff, 0xfffffeffffffffff, 0x0, x4, 0, x5)

rori_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0xfffffdffffffffff), rs1:x2(0xfffffdffffffffff), imm:0x0
    TEST_IMM_OP(rori, x30, x2, 0xfffffdffffffffff, 0xfffffdffffffffff, 0x0, x4, 8, x5)

rori_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0xfffffbffffffffff), rs1:x1(0xfffffbffffffffff), imm:0x0
    TEST_IMM_OP(rori, x31, x1, 0xfffffbffffffffff, 0xfffffbffffffffff, 0x0, x4, 16, x5)

rori_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0xfffff7ffffffffff), rs1:x31(0xfffff7ffffffffff), imm:0x0
    TEST_IMM_OP(rori, x1, x31, 0xfffff7ffffffffff, 0xfffff7ffffffffff, 0x0, x4, 24, x5)

rori_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0xffffefffffffffff), rs1:x30(0xffffefffffffffff), imm:0x0
    TEST_IMM_OP(rori, x2, x30, 0xffffefffffffffff, 0xffffefffffffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_51_0)


rori_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0xffffdfffffffffff), rs1:x29(0xffffdfffffffffff), imm:0x0
    TEST_IMM_OP(rori, x3, x29, 0xffffdfffffffffff, 0xffffdfffffffffff, 0x0, x1, 0, x2)

rori_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0xffffbfffffffffff), rs1:x28(0xffffbfffffffffff), imm:0x0
    TEST_IMM_OP(rori, x4, x28, 0xffffbfffffffffff, 0xffffbfffffffffff, 0x0, x1, 8, x2)

rori_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0xffff7fffffffffff), rs1:x27(0xffff7fffffffffff), imm:0x0
    TEST_IMM_OP(rori, x5, x27, 0xffff7fffffffffff, 0xffff7fffffffffff, 0x0, x1, 16, x2)

rori_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0xfffeffffffffffff), rs1:x26(0xfffeffffffffffff), imm:0x0
    TEST_IMM_OP(rori, x6, x26, 0xfffeffffffffffff, 0xfffeffffffffffff, 0x0, x1, 24, x2)

rori_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0xfffdffffffffffff), rs1:x25(0xfffdffffffffffff), imm:0x0
    TEST_IMM_OP(rori, x7, x25, 0xfffdffffffffffff, 0xfffdffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_52_0)


rori_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0xfffbffffffffffff), rs1:x24(0xfffbffffffffffff), imm:0x0
    TEST_IMM_OP(rori, x8, x24, 0xfffbffffffffffff, 0xfffbffffffffffff, 0x0, x1, 0, x2)

rori_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0xfff7ffffffffffff), rs1:x23(0xfff7ffffffffffff), imm:0x0
    TEST_IMM_OP(rori, x9, x23, 0xfff7ffffffffffff, 0xfff7ffffffffffff, 0x0, x1, 8, x2)

rori_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0xffefffffffffffff), rs1:x22(0xffefffffffffffff), imm:0x0
    TEST_IMM_OP(rori, x10, x22, 0xffefffffffffffff, 0xffefffffffffffff, 0x0, x1, 16, x2)

rori_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0xffdfffffffffffff), rs1:x21(0xffdfffffffffffff), imm:0x0
    TEST_IMM_OP(rori, x11, x21, 0xffdfffffffffffff, 0xffdfffffffffffff, 0x0, x1, 24, x2)

rori_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0xffbfffffffffffff), rs1:x20(0xffbfffffffffffff), imm:0x0
    TEST_IMM_OP(rori, x12, x20, 0xffbfffffffffffff, 0xffbfffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x5,signature_53_0)


rori_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0xffff7fffffffffff), rs1:x19(0xff7fffffffffffff), imm:0x8
    TEST_IMM_OP(rori, x13, x19, 0xffff7fffffffffff, 0xff7fffffffffffff, 0x8, x5, 0, x6)

rori_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0xffefffffffffffff), rs1:x18(0xfeffffffffffffff), imm:0x4
    TEST_IMM_OP(rori, x14, x18, 0xffefffffffffffff, 0xfeffffffffffffff, 0x4, x5, 8, x6)

rori_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0xff7fffffffffffff), rs1:x17(0xfdffffffffffffff), imm:0x2
    TEST_IMM_OP(rori, x15, x17, 0xff7fffffffffffff, 0xfdffffffffffffff, 0x2, x5, 16, x6)

rori_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0xfdffffffffffffff), rs1:x16(0xfbffffffffffffff), imm:0x1
    TEST_IMM_OP(rori, x16, x16, 0xfdffffffffffffff, 0xfbffffffffffffff, 0x1, x5, 24, x6)

rori_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0xfeffffffffffffff), rs1:x15(0xf7ffffffffffffff), imm:0x3
    TEST_IMM_OP(rori, x17, x15, 0xfeffffffffffffff, 0xf7ffffffffffffff, 0x3, x5, 32, x6)

    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_54_0)


rori_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0xfffffffdffffffff), rs1:x14(0xefffffffffffffff), imm:0x1b
    TEST_IMM_OP(rori, x18, x14, 0xfffffffdffffffff, 0xefffffffffffffff, 0x1b, x1, 0, x2)

rori_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0xdfffffffffffffff), rs1:x13(0xdfffffffffffffff), imm:0x0
    TEST_IMM_OP(rori, x19, x13, 0xdfffffffffffffff, 0xdfffffffffffffff, 0x0, x1, 8, x2)

rori_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0xf7ffffffffffffff), rs1:x12(0xbfffffffffffffff), imm:0x3
    TEST_IMM_OP(rori, x20, x12, 0xf7ffffffffffffff, 0xbfffffffffffffff, 0x3, x1, 16, x2)

rori_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0xfffeffffffffffff), rs1:x11(0x7fffffffffffffff), imm:0xf
    TEST_IMM_OP(rori, x21, x11, 0xfffeffffffffffff, 0x7fffffffffffffff, 0xf, x1, 24, x2)

rori_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xffffffffffffffff), imm:0xf
    TEST_IMM_OP(rori, x22, x10, 0xffffffffffffffff, 0xffffffffffffffff, 0xf, x1, 32, x2)

    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rori)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rori)

	RVTEST_SIGBASE(x1,signature_55_0)


rori_01_inst_270:
    // Test 270:  Test with random values
    // result rd:x23(0x32a21fa7bdb5bd4a), rs1:x9(0x10fd3dedadea5195), imm:0xb
    TEST_IMM_OP(rori, x23, x9, 0x32a21fa7bdb5bd4a, 0x10fd3dedadea5195, 0xb, x1, 0, x2)

rori_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1), imm:0x1b
    TEST_IMM_OP(rori, x0, x8, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0x1b, x1, 8, x2)

rori_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0xe4b24f82d470d45d), rs1:x7(0xc9649f05a8e1a8bb), imm:0x1
    TEST_IMM_OP(rori, x25, x7, 0xe4b24f82d470d45d, 0xc9649f05a8e1a8bb, 0x1, x1, 16, x2)

rori_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb), imm:0x15
    TEST_IMM_OP(rori, x26, x0, 0x0000000000000000, 0x3541291848c99fcb, 0x15, x1, 24, x2)
	
#endif


RVTEST_CODE_END rori_01_code_end
RVTEST_CODE_BEGIN rorw_01_init rorw_01_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x6,signature_1_0)


rorw_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0xffffffffb5bd4a32), rs1:x31(0x10fd3dedadea5195), rs2:x16(0xdf7f3844121bcc23)
    TEST_RR_OP(rorw, x1, x31, x16, 0xffffffffb5bd4a32, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x6, 0, x7)

rorw_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x000000005ff7d83a), rs1:x30(0xbd295ce2d2ffbec1), rs2:x15(0xf5adb41aa47d105b)
    TEST_RR_OP(rorw, x2, x30, x15, 0x000000005ff7d83a, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x6, 8, x7)

rorw_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0xffffffffa8e1a8bb), rs1:x29(0xc9649f05a8e1a8bb), rs2:x14(0x82f6747f707af2c0)
    TEST_RR_OP(rorw, x3, x29, x14, 0xffffffffa8e1a8bb, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x6, 16, x7)

rorw_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x00000000691933f9), rs1:x28(0x3541291848c99fcb), rs2:x13(0x73a92fd4e19bfbc3)
    TEST_RR_OP(rorw, x4, x28, x13, 0x00000000691933f9, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x6, 24, x7)

rorw_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0xffffffffa49e8c3a), rs1:x27(0x10a24740461d524f), rs2:x12(0x546b0e54528a10af)
    TEST_RR_OP(rorw, x5, x27, x12, 0xffffffffa49e8c3a, 0x10a24740461d524f, 0x546b0e54528a10af, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_2_0)


rorw_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x00000000215ea514), rs1:x26(0x546b0e54528a10af), rs2:x11(0x10a24740461d524f)
    TEST_RR_OP(rorw, x6, x26, x11, 0x00000000215ea514, 0x546b0e54528a10af, 0x10a24740461d524f, x1, 0, x2)

rorw_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x00000000787c337f), rs1:x25(0x73a92fd4e19bfbc3), rs2:x10(0x3541291848c99fcb)
    TEST_RR_OP(rorw, x7, x25, x10, 0x00000000787c337f, 0x73a92fd4e19bfbc3, 0x3541291848c99fcb, x1, 8, x2)

rorw_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x000000000f5e580e), rs1:x24(0x82f6747f707af2c0), rs2:x9(0xc9649f05a8e1a8bb)
    TEST_RR_OP(rorw, x8, x24, x9, 0x000000000f5e580e, 0x82f6747f707af2c0, 0xc9649f05a8e1a8bb, x1, 16, x2)

rorw_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0xffffffffd23e882d), rs1:x23(0xf5adb41aa47d105b), rs2:x8(0xbd295ce2d2ffbec1)
    TEST_RR_OP(rorw, x9, x23, x8, 0xffffffffd23e882d, 0xf5adb41aa47d105b, 0xbd295ce2d2ffbec1, x1, 24, x2)

rorw_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0xffffffffde611890), rs1:x22(0xdf7f3844121bcc23), rs2:x7(0x10fd3dedadea5195)
    TEST_RR_OP(rorw, x10, x22, x7, 0xffffffffde611890, 0xdf7f3844121bcc23, 0x10fd3dedadea5195, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_3_0)


rorw_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000002), rs1:x21(0x0000000000000001), rs2:x6(0xffffffffffffffff)
    TEST_RR_OP(rorw, x11, x21, x6, 0x0000000000000002, 0x1, 0xffffffffffffffff, x1, 0, x7)

rorw_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000004), rs1:x20(0x0000000000000002), rs2:x5(0x7fffffffffffffff)
    TEST_RR_OP(rorw, x12, x20, x5, 0x0000000000000004, 0x2, 0x7fffffffffffffff, x1, 8, x7)

rorw_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000008), rs1:x19(0x0000000000000004), rs2:x4(0xbfffffffffffffff)
    TEST_RR_OP(rorw, x13, x19, x4, 0x0000000000000008, 0x4, 0xbfffffffffffffff, x1, 16, x7)

rorw_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000010), rs1:x18(0x0000000000000008), rs2:x3(0xdfffffffffffffff)
    TEST_RR_OP(rorw, x14, x18, x3, 0x0000000000000010, 0x8, 0xdfffffffffffffff, x1, 24, x7)

rorw_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000020), rs1:x17(0x0000000000000010), rs2:x2(0xefffffffffffffff)
    TEST_RR_OP(rorw, x15, x17, x2, 0x0000000000000020, 0x10, 0xefffffffffffffff, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x2,signature_4_0)


rorw_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000040), rs1:x16(0x0000000000000020), rs2:x1(0xf7ffffffffffffff)
    TEST_RR_OP(rorw, x16, x16, x1, 0x0000000000000040, 0x20, 0xf7ffffffffffffff, x2, 0, x3)

rorw_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000080), rs1:x15(0x0000000000000040), rs2:x31(0xfbffffffffffffff)
    TEST_RR_OP(rorw, x17, x15, x31, 0x0000000000000080, 0x40, 0xfbffffffffffffff, x2, 8, x3)

rorw_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000100), rs1:x14(0x0000000000000080), rs2:x30(0xfdffffffffffffff)
    TEST_RR_OP(rorw, x18, x14, x30, 0x0000000000000100, 0x80, 0xfdffffffffffffff, x2, 16, x3)

rorw_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000200), rs1:x13(0x0000000000000100), rs2:x29(0xfeffffffffffffff)
    TEST_RR_OP(rorw, x19, x13, x29, 0x0000000000000200, 0x100, 0xfeffffffffffffff, x2, 24, x3)

rorw_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000400), rs1:x12(0x0000000000000200), rs2:x28(0xff7fffffffffffff)
    TEST_RR_OP(rorw, x20, x12, x28, 0x0000000000000400, 0x200, 0xff7fffffffffffff, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_5_0)


rorw_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000800), rs1:x11(0x0000000000000400), rs2:x27(0xffbfffffffffffff)
    TEST_RR_OP(rorw, x21, x11, x27, 0x0000000000000800, 0x400, 0xffbfffffffffffff, x1, 0, x2)

rorw_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0000000000001000), rs1:x10(0x0000000000000800), rs2:x26(0xffdfffffffffffff)
    TEST_RR_OP(rorw, x22, x10, x26, 0x0000000000001000, 0x800, 0xffdfffffffffffff, x1, 8, x2)

rorw_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x0000000000002000), rs1:x9(0x0000000000001000), rs2:x25(0xffefffffffffffff)
    TEST_RR_OP(rorw, x23, x9, x25, 0x0000000000002000, 0x1000, 0xffefffffffffffff, x1, 16, x2)

rorw_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0000000000004000), rs1:x8(0x0000000000002000), rs2:x24(0xfff7ffffffffffff)
    TEST_RR_OP(rorw, x24, x8, x24, 0x0000000000004000, 0x2000, 0xfff7ffffffffffff, x1, 24, x2)

rorw_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x0000000000008000), rs1:x7(0x0000000000004000), rs2:x23(0xfffbffffffffffff)
    TEST_RR_OP(rorw, x25, x7, x23, 0x0000000000008000, 0x4000, 0xfffbffffffffffff, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_6_0)


rorw_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x0000000000010000), rs1:x6(0x0000000000008000), rs2:x22(0xfffdffffffffffff)
    TEST_RR_OP(rorw, x26, x6, x22, 0x0000000000010000, 0x8000, 0xfffdffffffffffff, x1, 0, x7)

rorw_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x0000000000020000), rs1:x5(0x0000000000010000), rs2:x21(0xfffeffffffffffff)
    TEST_RR_OP(rorw, x27, x5, x21, 0x0000000000020000, 0x10000, 0xfffeffffffffffff, x1, 8, x7)

rorw_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x0000000000040000), rs1:x4(0x0000000000020000), rs2:x20(0xffff7fffffffffff)
    TEST_RR_OP(rorw, x28, x4, x20, 0x0000000000040000, 0x20000, 0xffff7fffffffffff, x1, 16, x7)

rorw_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0000000000080000), rs1:x3(0x0000000000040000), rs2:x19(0xffffbfffffffffff)
    TEST_RR_OP(rorw, x29, x3, x19, 0x0000000000080000, 0x40000, 0xffffbfffffffffff, x1, 24, x7)

rorw_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0000000000100000), rs1:x2(0x0000000000080000), rs2:x18(0xffffdfffffffffff)
    TEST_RR_OP(rorw, x30, x2, x18, 0x0000000000100000, 0x80000, 0xffffdfffffffffff, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x5,signature_7_0)


rorw_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0000000000200000), rs1:x1(0x0000000000100000), rs2:x17(0xffffefffffffffff)
    TEST_RR_OP(rorw, x31, x1, x17, 0x0000000000200000, 0x100000, 0xffffefffffffffff, x5, 0, x6)

rorw_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0000000000400000), rs1:x31(0x0000000000200000), rs2:x16(0xfffff7ffffffffff)
    TEST_RR_OP(rorw, x1, x31, x16, 0x0000000000400000, 0x200000, 0xfffff7ffffffffff, x5, 8, x6)

rorw_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0000000000800000), rs1:x30(0x0000000000400000), rs2:x15(0xfffffbffffffffff)
    TEST_RR_OP(rorw, x2, x30, x15, 0x0000000000800000, 0x400000, 0xfffffbffffffffff, x5, 16, x6)

rorw_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0000000001000000), rs1:x29(0x0000000000800000), rs2:x14(0xfffffdffffffffff)
    TEST_RR_OP(rorw, x3, x29, x14, 0x0000000001000000, 0x800000, 0xfffffdffffffffff, x5, 24, x6)

rorw_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x0000000002000000), rs1:x28(0x0000000001000000), rs2:x13(0xfffffeffffffffff)
    TEST_RR_OP(rorw, x4, x28, x13, 0x0000000002000000, 0x1000000, 0xfffffeffffffffff, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_8_0)


rorw_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x0000000004000000), rs1:x27(0x0000000002000000), rs2:x12(0xffffff7fffffffff)
    TEST_RR_OP(rorw, x5, x27, x12, 0x0000000004000000, 0x2000000, 0xffffff7fffffffff, x1, 0, x2)

rorw_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x0000000008000000), rs1:x26(0x0000000004000000), rs2:x11(0xffffffbfffffffff)
    TEST_RR_OP(rorw, x6, x26, x11, 0x0000000008000000, 0x4000000, 0xffffffbfffffffff, x1, 8, x2)

rorw_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0000000010000000), rs1:x25(0x0000000008000000), rs2:x10(0xffffffdfffffffff)
    TEST_RR_OP(rorw, x7, x25, x10, 0x0000000010000000, 0x8000000, 0xffffffdfffffffff, x1, 16, x2)

rorw_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0000000020000000), rs1:x24(0x0000000010000000), rs2:x9(0xffffffefffffffff)
    TEST_RR_OP(rorw, x8, x24, x9, 0x0000000020000000, 0x10000000, 0xffffffefffffffff, x1, 24, x2)

rorw_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0000000040000000), rs1:x23(0x0000000020000000), rs2:x8(0xfffffff7ffffffff)
    TEST_RR_OP(rorw, x9, x23, x8, 0x0000000040000000, 0x20000000, 0xfffffff7ffffffff, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_9_0)


rorw_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0xffffffff80000000), rs1:x22(0x0000000040000000), rs2:x7(0xfffffffbffffffff)
    TEST_RR_OP(rorw, x10, x22, x7, 0xffffffff80000000, 0x40000000, 0xfffffffbffffffff, x1, 0, x2)

rorw_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000001), rs1:x21(0x0000000080000000), rs2:x6(0xfffffffdffffffff)
    TEST_RR_OP(rorw, x11, x21, x6, 0x0000000000000001, 0x80000000, 0xfffffffdffffffff, x1, 8, x2)

rorw_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000100000000), rs2:x5(0xfffffffeffffffff)
    TEST_RR_OP(rorw, x12, x20, x5, 0x0000000000000000, 0x100000000, 0xfffffffeffffffff, x1, 16, x2)

rorw_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000200000000), rs2:x4(0xffffffff7fffffff)
    TEST_RR_OP(rorw, x13, x19, x4, 0x0000000000000000, 0x200000000, 0xffffffff7fffffff, x1, 24, x2)

rorw_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0000000400000000), rs2:x3(0xffffffffbfffffff)
    TEST_RR_OP(rorw, x14, x18, x3, 0x0000000000000000, 0x400000000, 0xffffffffbfffffff, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x3,signature_10_0)


rorw_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x0000000800000000), rs2:x2(0xffffffffdfffffff)
    TEST_RR_OP(rorw, x15, x17, x2, 0x0000000000000000, 0x800000000, 0xffffffffdfffffff, x3, 0, x4)

rorw_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x0000001000000000), rs2:x1(0xffffffffefffffff)
    TEST_RR_OP(rorw, x16, x16, x1, 0x0000000000000000, 0x1000000000, 0xffffffffefffffff, x3, 8, x4)

rorw_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000002000000000), rs2:x31(0xfffffffff7ffffff)
    TEST_RR_OP(rorw, x17, x15, x31, 0x0000000000000000, 0x2000000000, 0xfffffffff7ffffff, x3, 16, x4)

rorw_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000004000000000), rs2:x30(0xfffffffffbffffff)
    TEST_RR_OP(rorw, x18, x14, x30, 0x0000000000000000, 0x4000000000, 0xfffffffffbffffff, x3, 24, x4)

rorw_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000008000000000), rs2:x29(0xfffffffffdffffff)
    TEST_RR_OP(rorw, x19, x13, x29, 0x0000000000000000, 0x8000000000, 0xfffffffffdffffff, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_11_0)


rorw_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000010000000000), rs2:x28(0xfffffffffeffffff)
    TEST_RR_OP(rorw, x20, x12, x28, 0x0000000000000000, 0x10000000000, 0xfffffffffeffffff, x1, 0, x2)

rorw_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000020000000000), rs2:x27(0xffffffffff7fffff)
    TEST_RR_OP(rorw, x21, x11, x27, 0x0000000000000000, 0x20000000000, 0xffffffffff7fffff, x1, 8, x2)

rorw_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000040000000000), rs2:x26(0xffffffffffbfffff)
    TEST_RR_OP(rorw, x22, x10, x26, 0x0000000000000000, 0x40000000000, 0xffffffffffbfffff, x1, 16, x2)

rorw_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000080000000000), rs2:x25(0xffffffffffdfffff)
    TEST_RR_OP(rorw, x23, x9, x25, 0x0000000000000000, 0x80000000000, 0xffffffffffdfffff, x1, 24, x2)

rorw_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000100000000000), rs2:x24(0xffffffffffefffff)
    TEST_RR_OP(rorw, x24, x8, x24, 0x0000000000000000, 0x100000000000, 0xffffffffffefffff, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_12_0)


rorw_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000200000000000), rs2:x23(0xfffffffffff7ffff)
    TEST_RR_OP(rorw, x25, x7, x23, 0x0000000000000000, 0x200000000000, 0xfffffffffff7ffff, x1, 0, x2)

rorw_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000400000000000), rs2:x22(0xfffffffffffbffff)
    TEST_RR_OP(rorw, x26, x6, x22, 0x0000000000000000, 0x400000000000, 0xfffffffffffbffff, x1, 8, x2)

rorw_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000800000000000), rs2:x21(0xfffffffffffdffff)
    TEST_RR_OP(rorw, x27, x5, x21, 0x0000000000000000, 0x800000000000, 0xfffffffffffdffff, x1, 16, x2)

rorw_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0001000000000000), rs2:x20(0xfffffffffffeffff)
    TEST_RR_OP(rorw, x28, x4, x20, 0x0000000000000000, 0x1000000000000, 0xfffffffffffeffff, x1, 24, x2)

rorw_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0002000000000000), rs2:x19(0xffffffffffff7fff)
    TEST_RR_OP(rorw, x29, x3, x19, 0x0000000000000000, 0x2000000000000, 0xffffffffffff7fff, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x4,signature_13_0)


rorw_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0004000000000000), rs2:x18(0xffffffffffffbfff)
    TEST_RR_OP(rorw, x30, x2, x18, 0x0000000000000000, 0x4000000000000, 0xffffffffffffbfff, x4, 0, x5)

rorw_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0008000000000000), rs2:x17(0xffffffffffffdfff)
    TEST_RR_OP(rorw, x31, x1, x17, 0x0000000000000000, 0x8000000000000, 0xffffffffffffdfff, x4, 8, x5)

rorw_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0010000000000000), rs2:x16(0xffffffffffffefff)
    TEST_RR_OP(rorw, x1, x31, x16, 0x0000000000000000, 0x10000000000000, 0xffffffffffffefff, x4, 16, x5)

rorw_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0020000000000000), rs2:x15(0xfffffffffffff7ff)
    TEST_RR_OP(rorw, x2, x30, x15, 0x0000000000000000, 0x20000000000000, 0xfffffffffffff7ff, x4, 24, x5)

rorw_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0040000000000000), rs2:x14(0xfffffffffffffbff)
    TEST_RR_OP(rorw, x3, x29, x14, 0x0000000000000000, 0x40000000000000, 0xfffffffffffffbff, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_14_0)


rorw_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0080000000000000), rs2:x13(0xfffffffffffffdff)
    TEST_RR_OP(rorw, x4, x28, x13, 0x0000000000000000, 0x80000000000000, 0xfffffffffffffdff, x1, 0, x2)

rorw_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0100000000000000), rs2:x12(0xfffffffffffffeff)
    TEST_RR_OP(rorw, x5, x27, x12, 0x0000000000000000, 0x100000000000000, 0xfffffffffffffeff, x1, 8, x2)

rorw_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0200000000000000), rs2:x11(0xffffffffffffff7f)
    TEST_RR_OP(rorw, x6, x26, x11, 0x0000000000000000, 0x200000000000000, 0xffffffffffffff7f, x1, 16, x2)

rorw_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0400000000000000), rs2:x10(0xffffffffffffffbf)
    TEST_RR_OP(rorw, x7, x25, x10, 0x0000000000000000, 0x400000000000000, 0xffffffffffffffbf, x1, 24, x2)

rorw_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0800000000000000), rs2:x9(0xffffffffffffffdf)
    TEST_RR_OP(rorw, x8, x24, x9, 0x0000000000000000, 0x800000000000000, 0xffffffffffffffdf, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_15_0)


rorw_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x1000000000000000), rs2:x8(0xffffffffffffffef)
    TEST_RR_OP(rorw, x9, x23, x8, 0x0000000000000000, 0x1000000000000000, 0xffffffffffffffef, x1, 0, x2)

rorw_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x2000000000000000), rs2:x7(0xfffffffffffffff7)
    TEST_RR_OP(rorw, x10, x22, x7, 0x0000000000000000, 0x2000000000000000, 0xfffffffffffffff7, x1, 8, x2)

rorw_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x4000000000000000), rs2:x6(0xfffffffffffffffb)
    TEST_RR_OP(rorw, x11, x21, x6, 0x0000000000000000, 0x4000000000000000, 0xfffffffffffffffb, x1, 16, x2)

rorw_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x8000000000000000), rs2:x5(0xfffffffffffffffd)
    TEST_RR_OP(rorw, x12, x20, x5, 0x0000000000000000, 0x8000000000000000, 0xfffffffffffffffd, x1, 24, x2)

rorw_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000), rs2:x4(0xfffffffffffffffe)
    TEST_RR_OP(rorw, x13, x19, x4, 0x0000000000000000, 0x0, 0xfffffffffffffffe, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x4,signature_16_0)


rorw_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0xfffffffffffffffe), rs1:x18(0xfffffffffffffffe), rs2:x3(0x0000000000000000)
    TEST_RR_OP(rorw, x14, x18, x3, 0xfffffffffffffffe, 0xfffffffffffffffe, 0x0, x4, 0, x5)

rorw_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0xfffffffffffffffd), rs1:x17(0xfffffffffffffffd), rs2:x2(0x8000000000000000)
    TEST_RR_OP(rorw, x15, x17, x2, 0xfffffffffffffffd, 0xfffffffffffffffd, 0x8000000000000000, x4, 8, x5)

rorw_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0xfffffffffffffffb), rs1:x16(0xfffffffffffffffb), rs2:x1(0x4000000000000000)
    TEST_RR_OP(rorw, x16, x16, x1, 0xfffffffffffffffb, 0xfffffffffffffffb, 0x4000000000000000, x4, 16, x5)

rorw_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0xfffffffffffffff7), rs1:x15(0xfffffffffffffff7), rs2:x31(0x2000000000000000)
    TEST_RR_OP(rorw, x17, x15, x31, 0xfffffffffffffff7, 0xfffffffffffffff7, 0x2000000000000000, x4, 24, x5)

rorw_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffef), rs1:x14(0xffffffffffffffef), rs2:x30(0x1000000000000000)
    TEST_RR_OP(rorw, x18, x14, x30, 0xffffffffffffffef, 0xffffffffffffffef, 0x1000000000000000, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_17_0)


rorw_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffdf), rs1:x13(0xffffffffffffffdf), rs2:x29(0x0800000000000000)
    TEST_RR_OP(rorw, x19, x13, x29, 0xffffffffffffffdf, 0xffffffffffffffdf, 0x800000000000000, x1, 0, x2)

rorw_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffbf), rs1:x12(0xffffffffffffffbf), rs2:x28(0x0400000000000000)
    TEST_RR_OP(rorw, x20, x12, x28, 0xffffffffffffffbf, 0xffffffffffffffbf, 0x400000000000000, x1, 8, x2)

rorw_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffff7f), rs1:x11(0xffffffffffffff7f), rs2:x27(0x0200000000000000)
    TEST_RR_OP(rorw, x21, x11, x27, 0xffffffffffffff7f, 0xffffffffffffff7f, 0x200000000000000, x1, 16, x2)

rorw_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0xfffffffffffffeff), rs1:x10(0xfffffffffffffeff), rs2:x26(0x0100000000000000)
    TEST_RR_OP(rorw, x22, x10, x26, 0xfffffffffffffeff, 0xfffffffffffffeff, 0x100000000000000, x1, 24, x2)

rorw_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0xfffffffffffffdff), rs1:x9(0xfffffffffffffdff), rs2:x25(0x0080000000000000)
    TEST_RR_OP(rorw, x23, x9, x25, 0xfffffffffffffdff, 0xfffffffffffffdff, 0x80000000000000, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_18_0)


rorw_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0xfffffffffffffbff), rs1:x8(0xfffffffffffffbff), rs2:x24(0x0040000000000000)
    TEST_RR_OP(rorw, x24, x8, x24, 0xfffffffffffffbff, 0xfffffffffffffbff, 0x40000000000000, x1, 0, x2)

rorw_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0xfffffffffffff7ff), rs1:x7(0xfffffffffffff7ff), rs2:x23(0x0020000000000000)
    TEST_RR_OP(rorw, x25, x7, x23, 0xfffffffffffff7ff, 0xfffffffffffff7ff, 0x20000000000000, x1, 8, x2)

rorw_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffefff), rs1:x6(0xffffffffffffefff), rs2:x22(0x0010000000000000)
    TEST_RR_OP(rorw, x26, x6, x22, 0xffffffffffffefff, 0xffffffffffffefff, 0x10000000000000, x1, 16, x2)

rorw_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffdfff), rs1:x5(0xffffffffffffdfff), rs2:x21(0x0008000000000000)
    TEST_RR_OP(rorw, x27, x5, x21, 0xffffffffffffdfff, 0xffffffffffffdfff, 0x8000000000000, x1, 24, x2)

rorw_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffbfff), rs1:x4(0xffffffffffffbfff), rs2:x20(0x0004000000000000)
    TEST_RR_OP(rorw, x28, x4, x20, 0xffffffffffffbfff, 0xffffffffffffbfff, 0x4000000000000, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x4,signature_19_0)


rorw_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffff7fff), rs1:x3(0xffffffffffff7fff), rs2:x19(0x0002000000000000)
    TEST_RR_OP(rorw, x29, x3, x19, 0xffffffffffff7fff, 0xffffffffffff7fff, 0x2000000000000, x4, 0, x5)

rorw_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0xfffffffffffeffff), rs1:x2(0xfffffffffffeffff), rs2:x18(0x0001000000000000)
    TEST_RR_OP(rorw, x30, x2, x18, 0xfffffffffffeffff, 0xfffffffffffeffff, 0x1000000000000, x4, 8, x5)

rorw_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0xfffffffffffdffff), rs1:x1(0xfffffffffffdffff), rs2:x17(0x0000800000000000)
    TEST_RR_OP(rorw, x31, x1, x17, 0xfffffffffffdffff, 0xfffffffffffdffff, 0x800000000000, x4, 16, x5)

rorw_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0xfffffffffffbffff), rs1:x31(0xfffffffffffbffff), rs2:x16(0x0000400000000000)
    TEST_RR_OP(rorw, x1, x31, x16, 0xfffffffffffbffff, 0xfffffffffffbffff, 0x400000000000, x4, 24, x5)

rorw_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0xfffffffffff7ffff), rs1:x30(0xfffffffffff7ffff), rs2:x15(0x0000200000000000)
    TEST_RR_OP(rorw, x2, x30, x15, 0xfffffffffff7ffff, 0xfffffffffff7ffff, 0x200000000000, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_20_0)


rorw_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffefffff), rs1:x29(0xffffffffffefffff), rs2:x14(0x0000100000000000)
    TEST_RR_OP(rorw, x3, x29, x14, 0xffffffffffefffff, 0xffffffffffefffff, 0x100000000000, x1, 0, x2)

rorw_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffdfffff), rs1:x28(0xffffffffffdfffff), rs2:x13(0x0000080000000000)
    TEST_RR_OP(rorw, x4, x28, x13, 0xffffffffffdfffff, 0xffffffffffdfffff, 0x80000000000, x1, 8, x2)

rorw_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffbfffff), rs1:x27(0xffffffffffbfffff), rs2:x12(0x0000040000000000)
    TEST_RR_OP(rorw, x5, x27, x12, 0xffffffffffbfffff, 0xffffffffffbfffff, 0x40000000000, x1, 16, x2)

rorw_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0xffffffffff7fffff), rs1:x26(0xffffffffff7fffff), rs2:x11(0x0000020000000000)
    TEST_RR_OP(rorw, x6, x26, x11, 0xffffffffff7fffff, 0xffffffffff7fffff, 0x20000000000, x1, 24, x2)

rorw_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0xfffffffffeffffff), rs1:x25(0xfffffffffeffffff), rs2:x10(0x0000010000000000)
    TEST_RR_OP(rorw, x7, x25, x10, 0xfffffffffeffffff, 0xfffffffffeffffff, 0x10000000000, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_21_0)


rorw_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0xfffffffffdffffff), rs1:x24(0xfffffffffdffffff), rs2:x9(0x0000008000000000)
    TEST_RR_OP(rorw, x8, x24, x9, 0xfffffffffdffffff, 0xfffffffffdffffff, 0x8000000000, x1, 0, x2)

rorw_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0xfffffffffbffffff), rs1:x23(0xfffffffffbffffff), rs2:x8(0x0000004000000000)
    TEST_RR_OP(rorw, x9, x23, x8, 0xfffffffffbffffff, 0xfffffffffbffffff, 0x4000000000, x1, 8, x2)

rorw_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0xfffffffff7ffffff), rs1:x22(0xfffffffff7ffffff), rs2:x7(0x0000002000000000)
    TEST_RR_OP(rorw, x10, x22, x7, 0xfffffffff7ffffff, 0xfffffffff7ffffff, 0x2000000000, x1, 16, x2)

rorw_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0xffffffffefffffff), rs1:x21(0xffffffffefffffff), rs2:x6(0x0000001000000000)
    TEST_RR_OP(rorw, x11, x21, x6, 0xffffffffefffffff, 0xffffffffefffffff, 0x1000000000, x1, 24, x2)

rorw_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0xffffffffdfffffff), rs1:x20(0xffffffffdfffffff), rs2:x5(0x0000000800000000)
    TEST_RR_OP(rorw, x12, x20, x5, 0xffffffffdfffffff, 0xffffffffdfffffff, 0x800000000, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x5,signature_22_0)


rorw_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0xffffffffbfffffff), rs1:x19(0xffffffffbfffffff), rs2:x4(0x0000000400000000)
    TEST_RR_OP(rorw, x13, x19, x4, 0xffffffffbfffffff, 0xffffffffbfffffff, 0x400000000, x5, 0, x6)

rorw_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0x000000007fffffff), rs1:x18(0xffffffff7fffffff), rs2:x3(0x0000000200000000)
    TEST_RR_OP(rorw, x14, x18, x3, 0x000000007fffffff, 0xffffffff7fffffff, 0x200000000, x5, 8, x6)

rorw_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0xfffffffeffffffff), rs2:x2(0x0000000100000000)
    TEST_RR_OP(rorw, x15, x17, x2, 0xffffffffffffffff, 0xfffffffeffffffff, 0x100000000, x5, 16, x6)

rorw_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xfffffffdffffffff), rs2:x1(0x0000000080000000)
    TEST_RR_OP(rorw, x16, x16, x1, 0xffffffffffffffff, 0xfffffffdffffffff, 0x80000000, x5, 24, x6)

rorw_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffffffff), rs1:x15(0xfffffffbffffffff), rs2:x31(0x0000000040000000)
    TEST_RR_OP(rorw, x17, x15, x31, 0xffffffffffffffff, 0xfffffffbffffffff, 0x40000000, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_23_0)


rorw_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffff), rs1:x14(0xfffffff7ffffffff), rs2:x30(0x0000000020000000)
    TEST_RR_OP(rorw, x18, x14, x30, 0xffffffffffffffff, 0xfffffff7ffffffff, 0x20000000, x1, 0, x2)

rorw_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffff), rs1:x13(0xffffffefffffffff), rs2:x29(0x0000000010000000)
    TEST_RR_OP(rorw, x19, x13, x29, 0xffffffffffffffff, 0xffffffefffffffff, 0x10000000, x1, 8, x2)

rorw_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffff), rs1:x12(0xffffffdfffffffff), rs2:x28(0x0000000008000000)
    TEST_RR_OP(rorw, x20, x12, x28, 0xffffffffffffffff, 0xffffffdfffffffff, 0x8000000, x1, 16, x2)

rorw_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0xffffffbfffffffff), rs2:x27(0x0000000004000000)
    TEST_RR_OP(rorw, x21, x11, x27, 0xffffffffffffffff, 0xffffffbfffffffff, 0x4000000, x1, 24, x2)

rorw_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xffffff7fffffffff), rs2:x26(0x0000000002000000)
    TEST_RR_OP(rorw, x22, x10, x26, 0xffffffffffffffff, 0xffffff7fffffffff, 0x2000000, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_24_0)


rorw_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffffffff), rs1:x9(0xfffffeffffffffff), rs2:x25(0x0000000001000000)
    TEST_RR_OP(rorw, x23, x9, x25, 0xffffffffffffffff, 0xfffffeffffffffff, 0x1000000, x1, 0, x2)

rorw_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffff), rs1:x8(0xfffffdffffffffff), rs2:x24(0x0000000000800000)
    TEST_RR_OP(rorw, x24, x8, x24, 0xffffffffffffffff, 0xfffffdffffffffff, 0x800000, x1, 8, x2)

rorw_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffff), rs1:x7(0xfffffbffffffffff), rs2:x23(0x0000000000400000)
    TEST_RR_OP(rorw, x25, x7, x23, 0xffffffffffffffff, 0xfffffbffffffffff, 0x400000, x1, 16, x2)

rorw_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffff), rs1:x6(0xfffff7ffffffffff), rs2:x22(0x0000000000200000)
    TEST_RR_OP(rorw, x26, x6, x22, 0xffffffffffffffff, 0xfffff7ffffffffff, 0x200000, x1, 24, x2)

rorw_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffffff), rs1:x5(0xffffefffffffffff), rs2:x21(0x0000000000100000)
    TEST_RR_OP(rorw, x27, x5, x21, 0xffffffffffffffff, 0xffffefffffffffff, 0x100000, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x5,signature_25_0)


rorw_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffffff), rs1:x4(0xffffdfffffffffff), rs2:x20(0x0000000000080000)
    TEST_RR_OP(rorw, x28, x4, x20, 0xffffffffffffffff, 0xffffdfffffffffff, 0x80000, x5, 0, x6)

rorw_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffffff), rs1:x3(0xffffbfffffffffff), rs2:x19(0x0000000000040000)
    TEST_RR_OP(rorw, x29, x3, x19, 0xffffffffffffffff, 0xffffbfffffffffff, 0x40000, x5, 8, x6)

rorw_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffffff), rs1:x2(0xffff7fffffffffff), rs2:x18(0x0000000000020000)
    TEST_RR_OP(rorw, x30, x2, x18, 0xffffffffffffffff, 0xffff7fffffffffff, 0x20000, x5, 16, x6)

rorw_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffffff), rs1:x1(0xfffeffffffffffff), rs2:x17(0x0000000000010000)
    TEST_RR_OP(rorw, x31, x1, x17, 0xffffffffffffffff, 0xfffeffffffffffff, 0x10000, x5, 24, x6)

rorw_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffffff), rs1:x31(0xfffdffffffffffff), rs2:x16(0x0000000000008000)
    TEST_RR_OP(rorw, x1, x31, x16, 0xffffffffffffffff, 0xfffdffffffffffff, 0x8000, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_26_0)


rorw_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffffff), rs1:x30(0xfffbffffffffffff), rs2:x15(0x0000000000004000)
    TEST_RR_OP(rorw, x2, x30, x15, 0xffffffffffffffff, 0xfffbffffffffffff, 0x4000, x1, 0, x7)

rorw_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffffff), rs1:x29(0xfff7ffffffffffff), rs2:x14(0x0000000000002000)
    TEST_RR_OP(rorw, x3, x29, x14, 0xffffffffffffffff, 0xfff7ffffffffffff, 0x2000, x1, 8, x7)

rorw_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffffffff), rs1:x28(0xffefffffffffffff), rs2:x13(0x0000000000001000)
    TEST_RR_OP(rorw, x4, x28, x13, 0xffffffffffffffff, 0xffefffffffffffff, 0x1000, x1, 16, x7)

rorw_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffffffff), rs1:x27(0xffdfffffffffffff), rs2:x12(0x0000000000000800)
    TEST_RR_OP(rorw, x5, x27, x12, 0xffffffffffffffff, 0xffdfffffffffffff, 0x800, x1, 24, x7)

rorw_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffffffff), rs1:x26(0xffbfffffffffffff), rs2:x11(0x0000000000000400)
    TEST_RR_OP(rorw, x6, x26, x11, 0xffffffffffffffff, 0xffbfffffffffffff, 0x400, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_27_0)


rorw_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffffffff), rs1:x25(0xff7fffffffffffff), rs2:x10(0x0000000000000200)
    TEST_RR_OP(rorw, x7, x25, x10, 0xffffffffffffffff, 0xff7fffffffffffff, 0x200, x1, 0, x2)

rorw_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffffffff), rs1:x24(0xfeffffffffffffff), rs2:x9(0x0000000000000100)
    TEST_RR_OP(rorw, x8, x24, x9, 0xffffffffffffffff, 0xfeffffffffffffff, 0x100, x1, 8, x2)

rorw_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffffffff), rs1:x23(0xfdffffffffffffff), rs2:x8(0x0000000000000080)
    TEST_RR_OP(rorw, x9, x23, x8, 0xffffffffffffffff, 0xfdffffffffffffff, 0x80, x1, 16, x2)

rorw_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffffffff), rs1:x22(0xfbffffffffffffff), rs2:x7(0x0000000000000040)
    TEST_RR_OP(rorw, x10, x22, x7, 0xffffffffffffffff, 0xfbffffffffffffff, 0x40, x1, 24, x2)

rorw_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffffff), rs1:x21(0xf7ffffffffffffff), rs2:x6(0x0000000000000020)
    TEST_RR_OP(rorw, x11, x21, x6, 0xffffffffffffffff, 0xf7ffffffffffffff, 0x20, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x6,signature_28_0)


rorw_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffffff), rs1:x20(0xefffffffffffffff), rs2:x5(0x0000000000000010)
    TEST_RR_OP(rorw, x12, x20, x5, 0xffffffffffffffff, 0xefffffffffffffff, 0x10, x6, 0, x7)

rorw_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffffff), rs1:x19(0xdfffffffffffffff), rs2:x4(0x0000000000000008)
    TEST_RR_OP(rorw, x13, x19, x4, 0xffffffffffffffff, 0xdfffffffffffffff, 0x8, x6, 8, x7)

rorw_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0xbfffffffffffffff), rs2:x3(0x0000000000000004)
    TEST_RR_OP(rorw, x14, x18, x3, 0xffffffffffffffff, 0xbfffffffffffffff, 0x4, x6, 16, x7)

rorw_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0x7fffffffffffffff), rs2:x2(0x0000000000000002)
    TEST_RR_OP(rorw, x15, x17, x2, 0xffffffffffffffff, 0x7fffffffffffffff, 0x2, x6, 24, x7)

rorw_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xffffffffffffffff), rs2:x1(0x0000000000000001)
    TEST_RR_OP(rorw, x16, x16, x1, 0xffffffffffffffff, 0xffffffffffffffff, 0x1, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_29_0)


rorw_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000001), rs1:x15(0x0000000000000001), rs2:x31(0x0000000000000000)
    TEST_RR_OP(rorw, x17, x15, x31, 0x0000000000000001, 0x1, 0x0, x1, 0, x2)

rorw_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000002), rs1:x14(0x0000000000000002), rs2:x30(0x0000000000000000)
    TEST_RR_OP(rorw, x18, x14, x30, 0x0000000000000002, 0x2, 0x0, x1, 8, x2)

rorw_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000004), rs1:x13(0x0000000000000004), rs2:x29(0x0000000000000000)
    TEST_RR_OP(rorw, x19, x13, x29, 0x0000000000000004, 0x4, 0x0, x1, 16, x2)

rorw_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000008), rs1:x12(0x0000000000000008), rs2:x28(0x0000000000000000)
    TEST_RR_OP(rorw, x20, x12, x28, 0x0000000000000008, 0x8, 0x0, x1, 24, x2)

rorw_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000010), rs1:x11(0x0000000000000010), rs2:x27(0x0000000000000000)
    TEST_RR_OP(rorw, x21, x11, x27, 0x0000000000000010, 0x10, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_30_0)


rorw_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000020), rs1:x10(0x0000000000000020), rs2:x26(0x0000000000000000)
    TEST_RR_OP(rorw, x22, x10, x26, 0x0000000000000020, 0x20, 0x0, x1, 0, x2)

rorw_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000040), rs1:x9(0x0000000000000040), rs2:x25(0x0000000000000000)
    TEST_RR_OP(rorw, x23, x9, x25, 0x0000000000000040, 0x40, 0x0, x1, 8, x2)

rorw_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000080), rs1:x8(0x0000000000000080), rs2:x24(0x0000000000000000)
    TEST_RR_OP(rorw, x24, x8, x24, 0x0000000000000080, 0x80, 0x0, x1, 16, x2)

rorw_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000100), rs1:x7(0x0000000000000100), rs2:x23(0x0000000000000000)
    TEST_RR_OP(rorw, x25, x7, x23, 0x0000000000000100, 0x100, 0x0, x1, 24, x2)

rorw_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000200), rs1:x6(0x0000000000000200), rs2:x22(0x0000000000000000)
    TEST_RR_OP(rorw, x26, x6, x22, 0x0000000000000200, 0x200, 0x0, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x6,signature_31_0)


rorw_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000400), rs1:x5(0x0000000000000400), rs2:x21(0x0000000000000000)
    TEST_RR_OP(rorw, x27, x5, x21, 0x0000000000000400, 0x400, 0x0, x6, 0, x7)

rorw_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000800), rs1:x4(0x0000000000000800), rs2:x20(0x0000000000000000)
    TEST_RR_OP(rorw, x28, x4, x20, 0x0000000000000800, 0x800, 0x0, x6, 8, x7)

rorw_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0000000000001000), rs1:x3(0x0000000000001000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(rorw, x29, x3, x19, 0x0000000000001000, 0x1000, 0x0, x6, 16, x7)

rorw_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000000002000), rs1:x2(0x0000000000002000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(rorw, x30, x2, x18, 0x0000000000002000, 0x2000, 0x0, x6, 24, x7)

rorw_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0000000000004000), rs1:x1(0x0000000000004000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(rorw, x31, x1, x17, 0x0000000000004000, 0x4000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x6,signature_32_0)


rorw_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000000008000), rs1:x31(0x0000000000008000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(rorw, x1, x31, x16, 0x0000000000008000, 0x8000, 0x0, x6, 0, x7)

rorw_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000000000010000), rs1:x30(0x0000000000010000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(rorw, x2, x30, x15, 0x0000000000010000, 0x10000, 0x0, x6, 8, x7)

rorw_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000000020000), rs1:x29(0x0000000000020000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(rorw, x3, x29, x14, 0x0000000000020000, 0x20000, 0x0, x6, 16, x7)

rorw_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000000040000), rs1:x28(0x0000000000040000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(rorw, x4, x28, x13, 0x0000000000040000, 0x40000, 0x0, x6, 24, x7)

rorw_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000000080000), rs1:x27(0x0000000000080000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(rorw, x5, x27, x12, 0x0000000000080000, 0x80000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_33_0)


rorw_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000000100000), rs1:x26(0x0000000000100000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(rorw, x6, x26, x11, 0x0000000000100000, 0x100000, 0x0, x1, 0, x2)

rorw_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000000200000), rs1:x25(0x0000000000200000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(rorw, x7, x25, x10, 0x0000000000200000, 0x200000, 0x0, x1, 8, x2)

rorw_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000000400000), rs1:x24(0x0000000000400000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(rorw, x8, x24, x9, 0x0000000000400000, 0x400000, 0x0, x1, 16, x2)

rorw_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000000800000), rs1:x23(0x0000000000800000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(rorw, x9, x23, x8, 0x0000000000800000, 0x800000, 0x0, x1, 24, x2)

rorw_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000001000000), rs1:x22(0x0000000001000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(rorw, x10, x22, x7, 0x0000000001000000, 0x1000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_34_0)


rorw_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000002000000), rs1:x21(0x0000000002000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(rorw, x11, x21, x6, 0x0000000002000000, 0x2000000, 0x0, x1, 0, x7)

rorw_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000004000000), rs1:x20(0x0000000004000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(rorw, x12, x20, x5, 0x0000000004000000, 0x4000000, 0x0, x1, 8, x7)

rorw_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000008000000), rs1:x19(0x0000000008000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(rorw, x13, x19, x4, 0x0000000008000000, 0x8000000, 0x0, x1, 16, x7)

rorw_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000010000000), rs1:x18(0x0000000010000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(rorw, x14, x18, x3, 0x0000000010000000, 0x10000000, 0x0, x1, 24, x7)

rorw_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000020000000), rs1:x17(0x0000000020000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(rorw, x15, x17, x2, 0x0000000020000000, 0x20000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x2,signature_35_0)


rorw_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000040000000), rs1:x16(0x0000000040000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(rorw, x16, x16, x1, 0x0000000040000000, 0x40000000, 0x0, x2, 0, x3)

rorw_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0xffffffff80000000), rs1:x15(0x0000000080000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(rorw, x17, x15, x31, 0xffffffff80000000, 0x80000000, 0x0, x2, 8, x3)

rorw_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000000100000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(rorw, x18, x14, x30, 0x0000000000000000, 0x100000000, 0x0, x2, 16, x3)

rorw_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000200000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(rorw, x19, x13, x29, 0x0000000000000000, 0x200000000, 0x0, x2, 24, x3)

rorw_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000000400000000), rs2:x28(0x0000000000000000)
    TEST_RR_OP(rorw, x20, x12, x28, 0x0000000000000000, 0x400000000, 0x0, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_36_0)


rorw_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000800000000), rs2:x27(0x0000000000000000)
    TEST_RR_OP(rorw, x21, x11, x27, 0x0000000000000000, 0x800000000, 0x0, x1, 0, x2)

rorw_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000001000000000), rs2:x26(0x0000000000000000)
    TEST_RR_OP(rorw, x22, x10, x26, 0x0000000000000000, 0x1000000000, 0x0, x1, 8, x2)

rorw_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000002000000000), rs2:x25(0x0000000000000000)
    TEST_RR_OP(rorw, x23, x9, x25, 0x0000000000000000, 0x2000000000, 0x0, x1, 16, x2)

rorw_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000004000000000), rs2:x24(0x0000000000000000)
    TEST_RR_OP(rorw, x24, x8, x24, 0x0000000000000000, 0x4000000000, 0x0, x1, 24, x2)

rorw_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000008000000000), rs2:x23(0x0000000000000000)
    TEST_RR_OP(rorw, x25, x7, x23, 0x0000000000000000, 0x8000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_37_0)


rorw_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000010000000000), rs2:x22(0x0000000000000000)
    TEST_RR_OP(rorw, x26, x6, x22, 0x0000000000000000, 0x10000000000, 0x0, x1, 0, x7)

rorw_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000020000000000), rs2:x21(0x0000000000000000)
    TEST_RR_OP(rorw, x27, x5, x21, 0x0000000000000000, 0x20000000000, 0x0, x1, 8, x7)

rorw_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000040000000000), rs2:x20(0x0000000000000000)
    TEST_RR_OP(rorw, x28, x4, x20, 0x0000000000000000, 0x40000000000, 0x0, x1, 16, x7)

rorw_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000080000000000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(rorw, x29, x3, x19, 0x0000000000000000, 0x80000000000, 0x0, x1, 24, x7)

rorw_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000100000000000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(rorw, x30, x2, x18, 0x0000000000000000, 0x100000000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x5,signature_38_0)


rorw_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000200000000000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(rorw, x31, x1, x17, 0x0000000000000000, 0x200000000000, 0x0, x5, 0, x6)

rorw_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000400000000000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(rorw, x1, x31, x16, 0x0000000000000000, 0x400000000000, 0x0, x5, 8, x6)

rorw_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000800000000000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(rorw, x2, x30, x15, 0x0000000000000000, 0x800000000000, 0x0, x5, 16, x6)

rorw_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0001000000000000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(rorw, x3, x29, x14, 0x0000000000000000, 0x1000000000000, 0x0, x5, 24, x6)

rorw_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0002000000000000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(rorw, x4, x28, x13, 0x0000000000000000, 0x2000000000000, 0x0, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_39_0)


rorw_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0004000000000000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(rorw, x5, x27, x12, 0x0000000000000000, 0x4000000000000, 0x0, x1, 0, x2)

rorw_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0008000000000000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(rorw, x6, x26, x11, 0x0000000000000000, 0x8000000000000, 0x0, x1, 8, x2)

rorw_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0010000000000000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(rorw, x7, x25, x10, 0x0000000000000000, 0x10000000000000, 0x0, x1, 16, x2)

rorw_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0020000000000000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(rorw, x8, x24, x9, 0x0000000000000000, 0x20000000000000, 0x0, x1, 24, x2)

rorw_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0040000000000000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(rorw, x9, x23, x8, 0x0000000000000000, 0x40000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_40_0)


rorw_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0080000000000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(rorw, x10, x22, x7, 0x0000000000000000, 0x80000000000000, 0x0, x1, 0, x2)

rorw_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0100000000000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(rorw, x11, x21, x6, 0x0000000000000000, 0x100000000000000, 0x0, x1, 8, x2)

rorw_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0200000000000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(rorw, x12, x20, x5, 0x0000000000000000, 0x200000000000000, 0x0, x1, 16, x2)

rorw_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0400000000000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(rorw, x13, x19, x4, 0x0000000000000000, 0x400000000000000, 0x0, x1, 24, x2)

rorw_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0800000000000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(rorw, x14, x18, x3, 0x0000000000000000, 0x800000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x3,signature_41_0)


rorw_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x1000000000000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(rorw, x15, x17, x2, 0x0000000000000000, 0x1000000000000000, 0x0, x3, 0, x4)

rorw_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x2000000000000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(rorw, x16, x16, x1, 0x0000000000000000, 0x2000000000000000, 0x0, x3, 8, x4)

rorw_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x4000000000000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(rorw, x17, x15, x31, 0x0000000000000000, 0x4000000000000000, 0x0, x3, 16, x4)

rorw_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x8000000000000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(rorw, x18, x14, x30, 0x0000000000000000, 0x8000000000000000, 0x0, x3, 24, x4)

rorw_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(rorw, x19, x13, x29, 0x0000000000000000, 0x0, 0x0, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_42_0)


rorw_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0xfffffffffffffffe), rs1:x12(0xfffffffffffffffe), rs2:x28(0x0000000000000000)
    TEST_RR_OP(rorw, x20, x12, x28, 0xfffffffffffffffe, 0xfffffffffffffffe, 0x0, x1, 0, x2)

rorw_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0xfffffffffffffffd), rs1:x11(0xfffffffffffffffd), rs2:x27(0x0000000000000000)
    TEST_RR_OP(rorw, x21, x11, x27, 0xfffffffffffffffd, 0xfffffffffffffffd, 0x0, x1, 8, x2)

rorw_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0xfffffffffffffffb), rs1:x10(0xfffffffffffffffb), rs2:x26(0x0000000000000000)
    TEST_RR_OP(rorw, x22, x10, x26, 0xfffffffffffffffb, 0xfffffffffffffffb, 0x0, x1, 16, x2)

rorw_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0xfffffffffffffff7), rs1:x9(0xfffffffffffffff7), rs2:x25(0x0000000000000000)
    TEST_RR_OP(rorw, x23, x9, x25, 0xfffffffffffffff7, 0xfffffffffffffff7, 0x0, x1, 24, x2)

rorw_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffef), rs1:x8(0xffffffffffffffef), rs2:x24(0x0000000000000000)
    TEST_RR_OP(rorw, x24, x8, x24, 0xffffffffffffffef, 0xffffffffffffffef, 0x0, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_43_0)


rorw_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffdf), rs1:x7(0xffffffffffffffdf), rs2:x23(0x0000000000000000)
    TEST_RR_OP(rorw, x25, x7, x23, 0xffffffffffffffdf, 0xffffffffffffffdf, 0x0, x1, 0, x2)

rorw_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffbf), rs1:x6(0xffffffffffffffbf), rs2:x22(0x0000000000000000)
    TEST_RR_OP(rorw, x26, x6, x22, 0xffffffffffffffbf, 0xffffffffffffffbf, 0x0, x1, 8, x2)

rorw_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffff7f), rs1:x5(0xffffffffffffff7f), rs2:x21(0x0000000000000000)
    TEST_RR_OP(rorw, x27, x5, x21, 0xffffffffffffff7f, 0xffffffffffffff7f, 0x0, x1, 16, x2)

rorw_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0xfffffffffffffeff), rs1:x4(0xfffffffffffffeff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(rorw, x28, x4, x20, 0xfffffffffffffeff, 0xfffffffffffffeff, 0x0, x1, 24, x2)

rorw_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0xfffffffffffffdff), rs1:x3(0xfffffffffffffdff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(rorw, x29, x3, x19, 0xfffffffffffffdff, 0xfffffffffffffdff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x4,signature_44_0)


rorw_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0xfffffffffffffbff), rs1:x2(0xfffffffffffffbff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(rorw, x30, x2, x18, 0xfffffffffffffbff, 0xfffffffffffffbff, 0x0, x4, 0, x5)

rorw_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0xfffffffffffff7ff), rs1:x1(0xfffffffffffff7ff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(rorw, x31, x1, x17, 0xfffffffffffff7ff, 0xfffffffffffff7ff, 0x0, x4, 8, x5)

rorw_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffefff), rs1:x31(0xffffffffffffefff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(rorw, x1, x31, x16, 0xffffffffffffefff, 0xffffffffffffefff, 0x0, x4, 16, x5)

rorw_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffdfff), rs1:x30(0xffffffffffffdfff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(rorw, x2, x30, x15, 0xffffffffffffdfff, 0xffffffffffffdfff, 0x0, x4, 24, x5)

rorw_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffbfff), rs1:x29(0xffffffffffffbfff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(rorw, x3, x29, x14, 0xffffffffffffbfff, 0xffffffffffffbfff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_45_0)


rorw_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffff7fff), rs1:x28(0xffffffffffff7fff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(rorw, x4, x28, x13, 0xffffffffffff7fff, 0xffffffffffff7fff, 0x0, x1, 0, x2)

rorw_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0xfffffffffffeffff), rs1:x27(0xfffffffffffeffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(rorw, x5, x27, x12, 0xfffffffffffeffff, 0xfffffffffffeffff, 0x0, x1, 8, x2)

rorw_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0xfffffffffffdffff), rs1:x26(0xfffffffffffdffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(rorw, x6, x26, x11, 0xfffffffffffdffff, 0xfffffffffffdffff, 0x0, x1, 16, x2)

rorw_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0xfffffffffffbffff), rs1:x25(0xfffffffffffbffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(rorw, x7, x25, x10, 0xfffffffffffbffff, 0xfffffffffffbffff, 0x0, x1, 24, x2)

rorw_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0xfffffffffff7ffff), rs1:x24(0xfffffffffff7ffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(rorw, x8, x24, x9, 0xfffffffffff7ffff, 0xfffffffffff7ffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_46_0)


rorw_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffefffff), rs1:x23(0xffffffffffefffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(rorw, x9, x23, x8, 0xffffffffffefffff, 0xffffffffffefffff, 0x0, x1, 0, x2)

rorw_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffdfffff), rs1:x22(0xffffffffffdfffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(rorw, x10, x22, x7, 0xffffffffffdfffff, 0xffffffffffdfffff, 0x0, x1, 8, x2)

rorw_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffbfffff), rs1:x21(0xffffffffffbfffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(rorw, x11, x21, x6, 0xffffffffffbfffff, 0xffffffffffbfffff, 0x0, x1, 16, x2)

rorw_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0xffffffffff7fffff), rs1:x20(0xffffffffff7fffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(rorw, x12, x20, x5, 0xffffffffff7fffff, 0xffffffffff7fffff, 0x0, x1, 24, x2)

rorw_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0xfffffffffeffffff), rs1:x19(0xfffffffffeffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(rorw, x13, x19, x4, 0xfffffffffeffffff, 0xfffffffffeffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x4,signature_47_0)


rorw_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0xfffffffffdffffff), rs1:x18(0xfffffffffdffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(rorw, x14, x18, x3, 0xfffffffffdffffff, 0xfffffffffdffffff, 0x0, x4, 0, x5)

rorw_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0xfffffffffbffffff), rs1:x17(0xfffffffffbffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(rorw, x15, x17, x2, 0xfffffffffbffffff, 0xfffffffffbffffff, 0x0, x4, 8, x5)

rorw_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0xfffffffff7ffffff), rs1:x16(0xfffffffff7ffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(rorw, x16, x16, x1, 0xfffffffff7ffffff, 0xfffffffff7ffffff, 0x0, x4, 16, x5)

rorw_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0xffffffffefffffff), rs1:x15(0xffffffffefffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(rorw, x17, x15, x31, 0xffffffffefffffff, 0xffffffffefffffff, 0x0, x4, 24, x5)

rorw_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0xffffffffdfffffff), rs1:x14(0xffffffffdfffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(rorw, x18, x14, x30, 0xffffffffdfffffff, 0xffffffffdfffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_48_0)


rorw_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0xffffffffbfffffff), rs1:x13(0xffffffffbfffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(rorw, x19, x13, x29, 0xffffffffbfffffff, 0xffffffffbfffffff, 0x0, x1, 0, x2)

rorw_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0x000000007fffffff), rs1:x12(0xffffffff7fffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(rorw, x20, x12, x28, 0x000000007fffffff, 0xffffffff7fffffff, 0x0, x1, 8, x2)

rorw_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0xfffffffeffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(rorw, x21, x11, x27, 0xffffffffffffffff, 0xfffffffeffffffff, 0x0, x1, 16, x2)

rorw_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xfffffffdffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(rorw, x22, x10, x26, 0xffffffffffffffff, 0xfffffffdffffffff, 0x0, x1, 24, x2)

rorw_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffffffff), rs1:x9(0xfffffffbffffffff), rs2:x25(0x0000000000000000)
    TEST_RR_OP(rorw, x23, x9, x25, 0xffffffffffffffff, 0xfffffffbffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_49_0)


rorw_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffff), rs1:x8(0xfffffff7ffffffff), rs2:x24(0x0000000000000000)
    TEST_RR_OP(rorw, x24, x8, x24, 0xffffffffffffffff, 0xfffffff7ffffffff, 0x0, x1, 0, x2)

rorw_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffff), rs1:x7(0xffffffefffffffff), rs2:x23(0x0000000000000000)
    TEST_RR_OP(rorw, x25, x7, x23, 0xffffffffffffffff, 0xffffffefffffffff, 0x0, x1, 8, x2)

rorw_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffff), rs1:x6(0xffffffdfffffffff), rs2:x22(0x0000000000000000)
    TEST_RR_OP(rorw, x26, x6, x22, 0xffffffffffffffff, 0xffffffdfffffffff, 0x0, x1, 16, x2)

rorw_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffffff), rs1:x5(0xffffffbfffffffff), rs2:x21(0x0000000000000000)
    TEST_RR_OP(rorw, x27, x5, x21, 0xffffffffffffffff, 0xffffffbfffffffff, 0x0, x1, 24, x2)

rorw_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffffff), rs1:x4(0xffffff7fffffffff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(rorw, x28, x4, x20, 0xffffffffffffffff, 0xffffff7fffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x4,signature_50_0)


rorw_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffffff), rs1:x3(0xfffffeffffffffff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(rorw, x29, x3, x19, 0xffffffffffffffff, 0xfffffeffffffffff, 0x0, x4, 0, x5)

rorw_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffffff), rs1:x2(0xfffffdffffffffff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(rorw, x30, x2, x18, 0xffffffffffffffff, 0xfffffdffffffffff, 0x0, x4, 8, x5)

rorw_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffffff), rs1:x1(0xfffffbffffffffff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(rorw, x31, x1, x17, 0xffffffffffffffff, 0xfffffbffffffffff, 0x0, x4, 16, x5)

rorw_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffffff), rs1:x31(0xfffff7ffffffffff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(rorw, x1, x31, x16, 0xffffffffffffffff, 0xfffff7ffffffffff, 0x0, x4, 24, x5)

rorw_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffffff), rs1:x30(0xffffefffffffffff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(rorw, x2, x30, x15, 0xffffffffffffffff, 0xffffefffffffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_51_0)


rorw_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffffff), rs1:x29(0xffffdfffffffffff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(rorw, x3, x29, x14, 0xffffffffffffffff, 0xffffdfffffffffff, 0x0, x1, 0, x2)

rorw_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffffffff), rs1:x28(0xffffbfffffffffff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(rorw, x4, x28, x13, 0xffffffffffffffff, 0xffffbfffffffffff, 0x0, x1, 8, x2)

rorw_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffffffff), rs1:x27(0xffff7fffffffffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(rorw, x5, x27, x12, 0xffffffffffffffff, 0xffff7fffffffffff, 0x0, x1, 16, x2)

rorw_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffffffff), rs1:x26(0xfffeffffffffffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(rorw, x6, x26, x11, 0xffffffffffffffff, 0xfffeffffffffffff, 0x0, x1, 24, x2)

rorw_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffffffff), rs1:x25(0xfffdffffffffffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(rorw, x7, x25, x10, 0xffffffffffffffff, 0xfffdffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_52_0)


rorw_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffffffff), rs1:x24(0xfffbffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(rorw, x8, x24, x9, 0xffffffffffffffff, 0xfffbffffffffffff, 0x0, x1, 0, x2)

rorw_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffffffff), rs1:x23(0xfff7ffffffffffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(rorw, x9, x23, x8, 0xffffffffffffffff, 0xfff7ffffffffffff, 0x0, x1, 8, x2)

rorw_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffffffff), rs1:x22(0xffefffffffffffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(rorw, x10, x22, x7, 0xffffffffffffffff, 0xffefffffffffffff, 0x0, x1, 16, x2)

rorw_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffffff), rs1:x21(0xffdfffffffffffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(rorw, x11, x21, x6, 0xffffffffffffffff, 0xffdfffffffffffff, 0x0, x1, 24, x2)

rorw_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffffff), rs1:x20(0xffbfffffffffffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(rorw, x12, x20, x5, 0xffffffffffffffff, 0xffbfffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x5,signature_53_0)


rorw_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffffff), rs1:x19(0xff7fffffffffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(rorw, x13, x19, x4, 0xffffffffffffffff, 0xff7fffffffffffff, 0x0, x5, 0, x6)

rorw_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0xfeffffffffffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(rorw, x14, x18, x3, 0xffffffffffffffff, 0xfeffffffffffffff, 0x0, x5, 8, x6)

rorw_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0xfdffffffffffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(rorw, x15, x17, x2, 0xffffffffffffffff, 0xfdffffffffffffff, 0x0, x5, 16, x6)

rorw_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xfbffffffffffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(rorw, x16, x16, x1, 0xffffffffffffffff, 0xfbffffffffffffff, 0x0, x5, 24, x6)

rorw_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffffffff), rs1:x15(0xf7ffffffffffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(rorw, x17, x15, x31, 0xffffffffffffffff, 0xf7ffffffffffffff, 0x0, x5, 32, x6)

    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_54_0)


rorw_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffff), rs1:x14(0xefffffffffffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(rorw, x18, x14, x30, 0xffffffffffffffff, 0xefffffffffffffff, 0x0, x1, 0, x2)

rorw_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffff), rs1:x13(0xdfffffffffffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(rorw, x19, x13, x29, 0xffffffffffffffff, 0xdfffffffffffffff, 0x0, x1, 8, x2)

rorw_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffff), rs1:x12(0xbfffffffffffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(rorw, x20, x12, x28, 0xffffffffffffffff, 0xbfffffffffffffff, 0x0, x1, 16, x2)

rorw_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0x7fffffffffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(rorw, x21, x11, x27, 0xffffffffffffffff, 0x7fffffffffffffff, 0x0, x1, 24, x2)

rorw_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xffffffffffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(rorw, x22, x10, x26, 0xffffffffffffffff, 0xffffffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rorw)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rorw)

	RVTEST_SIGBASE(x1,signature_55_0)


rorw_01_inst_270:
    // Test 270:  Test with rs1 == rs2
    // result rd:x23(0x0000000062437984), rs1:x25(0x10fd3dedadea5195), rs2:x25(0xdf7f3844121bcc23)
    TEST_RR_OP(rorw, x23, x25, x25, 0x0000000062437984, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x1, 0, x2)

rorw_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1), rs2:x24(0xf5adb41aa47d105b)
    TEST_RR_OP(rorw, x0, x8, x24, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x1, 8, x2)

rorw_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0xffffffffa8e1a8bb), rs1:x7(0xc9649f05a8e1a8bb), rs2:x0(0x82f6747f707af2c0)
    TEST_RR_OP(rorw, x25, x7, x0, 0xffffffffa8e1a8bb, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x1, 16, x2)

rorw_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb), rs2:x22(0x73a92fd4e19bfbc3)
    TEST_RR_OP(rorw, x26, x0, x22, 0x0000000000000000, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x1, 24, x2)
	
#endif


RVTEST_CODE_END rorw_01_code_end
RVTEST_CODE_BEGIN xnor_01_init xnor_01_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x6,signature_1_0)


xnor_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x307dfa56400e6249), rs1:x31(0x10fd3dedadea5195), rs2:x16(0xdf7f3844121bcc23)
    TEST_RR_OP(xnor, x1, x31, x16, 0x307dfa56400e6249, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x6, 0, x7)

xnor_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0xb77b1707897d5165), rs1:x30(0xbd295ce2d2ffbec1), rs2:x15(0xf5adb41aa47d105b)
    TEST_RR_OP(xnor, x2, x30, x15, 0xb77b1707897d5165, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x6, 8, x7)

xnor_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0xb46d14852764a584), rs1:x29(0xc9649f05a8e1a8bb), rs2:x14(0x82f6747f707af2c0)
    TEST_RR_OP(xnor, x3, x29, x14, 0xb46d14852764a584, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x6, 16, x7)

xnor_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0xb917f93356ad9bf7), rs1:x28(0x3541291848c99fcb), rs2:x13(0x73a92fd4e19bfbc3)
    TEST_RR_OP(xnor, x4, x28, x13, 0xb917f93356ad9bf7, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x6, 24, x7)

xnor_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0xbb36b6ebeb68bd1f), rs1:x27(0x10a24740461d524f), rs2:x12(0x546b0e54528a10af)
    TEST_RR_OP(xnor, x5, x27, x12, 0xbb36b6ebeb68bd1f, 0x10a24740461d524f, 0x546b0e54528a10af, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_2_0)


xnor_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0xbb36b6ebeb68bd1f), rs1:x26(0x546b0e54528a10af), rs2:x11(0x10a24740461d524f)
    TEST_RR_OP(xnor, x6, x26, x11, 0xbb36b6ebeb68bd1f, 0x546b0e54528a10af, 0x10a24740461d524f, x1, 0, x2)

xnor_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0xb917f93356ad9bf7), rs1:x25(0x73a92fd4e19bfbc3), rs2:x10(0x3541291848c99fcb)
    TEST_RR_OP(xnor, x7, x25, x10, 0xb917f93356ad9bf7, 0x73a92fd4e19bfbc3, 0x3541291848c99fcb, x1, 8, x2)

xnor_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0xb46d14852764a584), rs1:x24(0x82f6747f707af2c0), rs2:x9(0xc9649f05a8e1a8bb)
    TEST_RR_OP(xnor, x8, x24, x9, 0xb46d14852764a584, 0x82f6747f707af2c0, 0xc9649f05a8e1a8bb, x1, 16, x2)

xnor_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0xb77b1707897d5165), rs1:x23(0xf5adb41aa47d105b), rs2:x8(0xbd295ce2d2ffbec1)
    TEST_RR_OP(xnor, x9, x23, x8, 0xb77b1707897d5165, 0xf5adb41aa47d105b, 0xbd295ce2d2ffbec1, x1, 24, x2)

xnor_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0x307dfa56400e6249), rs1:x22(0xdf7f3844121bcc23), rs2:x7(0x10fd3dedadea5195)
    TEST_RR_OP(xnor, x10, x22, x7, 0x307dfa56400e6249, 0xdf7f3844121bcc23, 0x10fd3dedadea5195, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_3_0)


xnor_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000001), rs1:x21(0x0000000000000001), rs2:x6(0xffffffffffffffff)
    TEST_RR_OP(xnor, x11, x21, x6, 0x0000000000000001, 0x1, 0xffffffffffffffff, x1, 0, x7)

xnor_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x8000000000000002), rs1:x20(0x0000000000000002), rs2:x5(0x7fffffffffffffff)
    TEST_RR_OP(xnor, x12, x20, x5, 0x8000000000000002, 0x2, 0x7fffffffffffffff, x1, 8, x7)

xnor_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x4000000000000004), rs1:x19(0x0000000000000004), rs2:x4(0xbfffffffffffffff)
    TEST_RR_OP(xnor, x13, x19, x4, 0x4000000000000004, 0x4, 0xbfffffffffffffff, x1, 16, x7)

xnor_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x2000000000000008), rs1:x18(0x0000000000000008), rs2:x3(0xdfffffffffffffff)
    TEST_RR_OP(xnor, x14, x18, x3, 0x2000000000000008, 0x8, 0xdfffffffffffffff, x1, 24, x7)

xnor_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x1000000000000010), rs1:x17(0x0000000000000010), rs2:x2(0xefffffffffffffff)
    TEST_RR_OP(xnor, x15, x17, x2, 0x1000000000000010, 0x10, 0xefffffffffffffff, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x2,signature_4_0)


xnor_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x0800000000000020), rs1:x16(0x0000000000000020), rs2:x1(0xf7ffffffffffffff)
    TEST_RR_OP(xnor, x16, x16, x1, 0x0800000000000020, 0x20, 0xf7ffffffffffffff, x2, 0, x3)

xnor_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x0400000000000040), rs1:x15(0x0000000000000040), rs2:x31(0xfbffffffffffffff)
    TEST_RR_OP(xnor, x17, x15, x31, 0x0400000000000040, 0x40, 0xfbffffffffffffff, x2, 8, x3)

xnor_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x0200000000000080), rs1:x14(0x0000000000000080), rs2:x30(0xfdffffffffffffff)
    TEST_RR_OP(xnor, x18, x14, x30, 0x0200000000000080, 0x80, 0xfdffffffffffffff, x2, 16, x3)

xnor_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0100000000000100), rs1:x13(0x0000000000000100), rs2:x29(0xfeffffffffffffff)
    TEST_RR_OP(xnor, x19, x13, x29, 0x0100000000000100, 0x100, 0xfeffffffffffffff, x2, 24, x3)

xnor_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0080000000000200), rs1:x12(0x0000000000000200), rs2:x28(0xff7fffffffffffff)
    TEST_RR_OP(xnor, x20, x12, x28, 0x0080000000000200, 0x200, 0xff7fffffffffffff, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_5_0)


xnor_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x0040000000000400), rs1:x11(0x0000000000000400), rs2:x27(0xffbfffffffffffff)
    TEST_RR_OP(xnor, x21, x11, x27, 0x0040000000000400, 0x400, 0xffbfffffffffffff, x1, 0, x2)

xnor_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0020000000000800), rs1:x10(0x0000000000000800), rs2:x26(0xffdfffffffffffff)
    TEST_RR_OP(xnor, x22, x10, x26, 0x0020000000000800, 0x800, 0xffdfffffffffffff, x1, 8, x2)

xnor_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x0010000000001000), rs1:x9(0x0000000000001000), rs2:x25(0xffefffffffffffff)
    TEST_RR_OP(xnor, x23, x9, x25, 0x0010000000001000, 0x1000, 0xffefffffffffffff, x1, 16, x2)

xnor_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0008000000002000), rs1:x8(0x0000000000002000), rs2:x24(0xfff7ffffffffffff)
    TEST_RR_OP(xnor, x24, x8, x24, 0x0008000000002000, 0x2000, 0xfff7ffffffffffff, x1, 24, x2)

xnor_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x0004000000004000), rs1:x7(0x0000000000004000), rs2:x23(0xfffbffffffffffff)
    TEST_RR_OP(xnor, x25, x7, x23, 0x0004000000004000, 0x4000, 0xfffbffffffffffff, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_6_0)


xnor_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x0002000000008000), rs1:x6(0x0000000000008000), rs2:x22(0xfffdffffffffffff)
    TEST_RR_OP(xnor, x26, x6, x22, 0x0002000000008000, 0x8000, 0xfffdffffffffffff, x1, 0, x7)

xnor_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x0001000000010000), rs1:x5(0x0000000000010000), rs2:x21(0xfffeffffffffffff)
    TEST_RR_OP(xnor, x27, x5, x21, 0x0001000000010000, 0x10000, 0xfffeffffffffffff, x1, 8, x7)

xnor_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x0000800000020000), rs1:x4(0x0000000000020000), rs2:x20(0xffff7fffffffffff)
    TEST_RR_OP(xnor, x28, x4, x20, 0x0000800000020000, 0x20000, 0xffff7fffffffffff, x1, 16, x7)

xnor_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0000400000040000), rs1:x3(0x0000000000040000), rs2:x19(0xffffbfffffffffff)
    TEST_RR_OP(xnor, x29, x3, x19, 0x0000400000040000, 0x40000, 0xffffbfffffffffff, x1, 24, x7)

xnor_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0000200000080000), rs1:x2(0x0000000000080000), rs2:x18(0xffffdfffffffffff)
    TEST_RR_OP(xnor, x30, x2, x18, 0x0000200000080000, 0x80000, 0xffffdfffffffffff, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x5,signature_7_0)


xnor_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0000100000100000), rs1:x1(0x0000000000100000), rs2:x17(0xffffefffffffffff)
    TEST_RR_OP(xnor, x31, x1, x17, 0x0000100000100000, 0x100000, 0xffffefffffffffff, x5, 0, x6)

xnor_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0000080000200000), rs1:x31(0x0000000000200000), rs2:x16(0xfffff7ffffffffff)
    TEST_RR_OP(xnor, x1, x31, x16, 0x0000080000200000, 0x200000, 0xfffff7ffffffffff, x5, 8, x6)

xnor_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0000040000400000), rs1:x30(0x0000000000400000), rs2:x15(0xfffffbffffffffff)
    TEST_RR_OP(xnor, x2, x30, x15, 0x0000040000400000, 0x400000, 0xfffffbffffffffff, x5, 16, x6)

xnor_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0000020000800000), rs1:x29(0x0000000000800000), rs2:x14(0xfffffdffffffffff)
    TEST_RR_OP(xnor, x3, x29, x14, 0x0000020000800000, 0x800000, 0xfffffdffffffffff, x5, 24, x6)

xnor_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x0000010001000000), rs1:x28(0x0000000001000000), rs2:x13(0xfffffeffffffffff)
    TEST_RR_OP(xnor, x4, x28, x13, 0x0000010001000000, 0x1000000, 0xfffffeffffffffff, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_8_0)


xnor_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x0000008002000000), rs1:x27(0x0000000002000000), rs2:x12(0xffffff7fffffffff)
    TEST_RR_OP(xnor, x5, x27, x12, 0x0000008002000000, 0x2000000, 0xffffff7fffffffff, x1, 0, x2)

xnor_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x0000004004000000), rs1:x26(0x0000000004000000), rs2:x11(0xffffffbfffffffff)
    TEST_RR_OP(xnor, x6, x26, x11, 0x0000004004000000, 0x4000000, 0xffffffbfffffffff, x1, 8, x2)

xnor_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0000002008000000), rs1:x25(0x0000000008000000), rs2:x10(0xffffffdfffffffff)
    TEST_RR_OP(xnor, x7, x25, x10, 0x0000002008000000, 0x8000000, 0xffffffdfffffffff, x1, 16, x2)

xnor_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0000001010000000), rs1:x24(0x0000000010000000), rs2:x9(0xffffffefffffffff)
    TEST_RR_OP(xnor, x8, x24, x9, 0x0000001010000000, 0x10000000, 0xffffffefffffffff, x1, 24, x2)

xnor_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0000000820000000), rs1:x23(0x0000000020000000), rs2:x8(0xfffffff7ffffffff)
    TEST_RR_OP(xnor, x9, x23, x8, 0x0000000820000000, 0x20000000, 0xfffffff7ffffffff, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_9_0)


xnor_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x0000000440000000), rs1:x22(0x0000000040000000), rs2:x7(0xfffffffbffffffff)
    TEST_RR_OP(xnor, x10, x22, x7, 0x0000000440000000, 0x40000000, 0xfffffffbffffffff, x1, 0, x2)

xnor_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0000000280000000), rs1:x21(0x0000000080000000), rs2:x6(0xfffffffdffffffff)
    TEST_RR_OP(xnor, x11, x21, x6, 0x0000000280000000, 0x80000000, 0xfffffffdffffffff, x1, 8, x2)

xnor_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000100000000), rs2:x5(0xfffffffeffffffff)
    TEST_RR_OP(xnor, x12, x20, x5, 0x0000000000000000, 0x100000000, 0xfffffffeffffffff, x1, 16, x2)

xnor_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x0000000280000000), rs1:x19(0x0000000200000000), rs2:x4(0xffffffff7fffffff)
    TEST_RR_OP(xnor, x13, x19, x4, 0x0000000280000000, 0x200000000, 0xffffffff7fffffff, x1, 24, x2)

xnor_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x0000000440000000), rs1:x18(0x0000000400000000), rs2:x3(0xffffffffbfffffff)
    TEST_RR_OP(xnor, x14, x18, x3, 0x0000000440000000, 0x400000000, 0xffffffffbfffffff, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x3,signature_10_0)


xnor_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x0000000820000000), rs1:x17(0x0000000800000000), rs2:x2(0xffffffffdfffffff)
    TEST_RR_OP(xnor, x15, x17, x2, 0x0000000820000000, 0x800000000, 0xffffffffdfffffff, x3, 0, x4)

xnor_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0000001010000000), rs1:x16(0x0000001000000000), rs2:x1(0xffffffffefffffff)
    TEST_RR_OP(xnor, x16, x16, x1, 0x0000001010000000, 0x1000000000, 0xffffffffefffffff, x3, 8, x4)

xnor_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0000002008000000), rs1:x15(0x0000002000000000), rs2:x31(0xfffffffff7ffffff)
    TEST_RR_OP(xnor, x17, x15, x31, 0x0000002008000000, 0x2000000000, 0xfffffffff7ffffff, x3, 16, x4)

xnor_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x0000004004000000), rs1:x14(0x0000004000000000), rs2:x30(0xfffffffffbffffff)
    TEST_RR_OP(xnor, x18, x14, x30, 0x0000004004000000, 0x4000000000, 0xfffffffffbffffff, x3, 24, x4)

xnor_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000008002000000), rs1:x13(0x0000008000000000), rs2:x29(0xfffffffffdffffff)
    TEST_RR_OP(xnor, x19, x13, x29, 0x0000008002000000, 0x8000000000, 0xfffffffffdffffff, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_11_0)


xnor_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0000010001000000), rs1:x12(0x0000010000000000), rs2:x28(0xfffffffffeffffff)
    TEST_RR_OP(xnor, x20, x12, x28, 0x0000010001000000, 0x10000000000, 0xfffffffffeffffff, x1, 0, x2)

xnor_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000020000800000), rs1:x11(0x0000020000000000), rs2:x27(0xffffffffff7fffff)
    TEST_RR_OP(xnor, x21, x11, x27, 0x0000020000800000, 0x20000000000, 0xffffffffff7fffff, x1, 8, x2)

xnor_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000040000400000), rs1:x10(0x0000040000000000), rs2:x26(0xffffffffffbfffff)
    TEST_RR_OP(xnor, x22, x10, x26, 0x0000040000400000, 0x40000000000, 0xffffffffffbfffff, x1, 16, x2)

xnor_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000080000200000), rs1:x9(0x0000080000000000), rs2:x25(0xffffffffffdfffff)
    TEST_RR_OP(xnor, x23, x9, x25, 0x0000080000200000, 0x80000000000, 0xffffffffffdfffff, x1, 24, x2)

xnor_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000100000100000), rs1:x8(0x0000100000000000), rs2:x24(0xffffffffffefffff)
    TEST_RR_OP(xnor, x24, x8, x24, 0x0000100000100000, 0x100000000000, 0xffffffffffefffff, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_12_0)


xnor_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0000200000080000), rs1:x7(0x0000200000000000), rs2:x23(0xfffffffffff7ffff)
    TEST_RR_OP(xnor, x25, x7, x23, 0x0000200000080000, 0x200000000000, 0xfffffffffff7ffff, x1, 0, x2)

xnor_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x0000400000040000), rs1:x6(0x0000400000000000), rs2:x22(0xfffffffffffbffff)
    TEST_RR_OP(xnor, x26, x6, x22, 0x0000400000040000, 0x400000000000, 0xfffffffffffbffff, x1, 8, x2)

xnor_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0000800000020000), rs1:x5(0x0000800000000000), rs2:x21(0xfffffffffffdffff)
    TEST_RR_OP(xnor, x27, x5, x21, 0x0000800000020000, 0x800000000000, 0xfffffffffffdffff, x1, 16, x2)

xnor_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0001000000010000), rs1:x4(0x0001000000000000), rs2:x20(0xfffffffffffeffff)
    TEST_RR_OP(xnor, x28, x4, x20, 0x0001000000010000, 0x1000000000000, 0xfffffffffffeffff, x1, 24, x2)

xnor_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0002000000008000), rs1:x3(0x0002000000000000), rs2:x19(0xffffffffffff7fff)
    TEST_RR_OP(xnor, x29, x3, x19, 0x0002000000008000, 0x2000000000000, 0xffffffffffff7fff, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x4,signature_13_0)


xnor_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0004000000004000), rs1:x2(0x0004000000000000), rs2:x18(0xffffffffffffbfff)
    TEST_RR_OP(xnor, x30, x2, x18, 0x0004000000004000, 0x4000000000000, 0xffffffffffffbfff, x4, 0, x5)

xnor_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0008000000002000), rs1:x1(0x0008000000000000), rs2:x17(0xffffffffffffdfff)
    TEST_RR_OP(xnor, x31, x1, x17, 0x0008000000002000, 0x8000000000000, 0xffffffffffffdfff, x4, 8, x5)

xnor_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0010000000001000), rs1:x31(0x0010000000000000), rs2:x16(0xffffffffffffefff)
    TEST_RR_OP(xnor, x1, x31, x16, 0x0010000000001000, 0x10000000000000, 0xffffffffffffefff, x4, 16, x5)

xnor_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0020000000000800), rs1:x30(0x0020000000000000), rs2:x15(0xfffffffffffff7ff)
    TEST_RR_OP(xnor, x2, x30, x15, 0x0020000000000800, 0x20000000000000, 0xfffffffffffff7ff, x4, 24, x5)

xnor_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0040000000000400), rs1:x29(0x0040000000000000), rs2:x14(0xfffffffffffffbff)
    TEST_RR_OP(xnor, x3, x29, x14, 0x0040000000000400, 0x40000000000000, 0xfffffffffffffbff, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_14_0)


xnor_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0080000000000200), rs1:x28(0x0080000000000000), rs2:x13(0xfffffffffffffdff)
    TEST_RR_OP(xnor, x4, x28, x13, 0x0080000000000200, 0x80000000000000, 0xfffffffffffffdff, x1, 0, x2)

xnor_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0100000000000100), rs1:x27(0x0100000000000000), rs2:x12(0xfffffffffffffeff)
    TEST_RR_OP(xnor, x5, x27, x12, 0x0100000000000100, 0x100000000000000, 0xfffffffffffffeff, x1, 8, x2)

xnor_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x0200000000000080), rs1:x26(0x0200000000000000), rs2:x11(0xffffffffffffff7f)
    TEST_RR_OP(xnor, x6, x26, x11, 0x0200000000000080, 0x200000000000000, 0xffffffffffffff7f, x1, 16, x2)

xnor_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x0400000000000040), rs1:x25(0x0400000000000000), rs2:x10(0xffffffffffffffbf)
    TEST_RR_OP(xnor, x7, x25, x10, 0x0400000000000040, 0x400000000000000, 0xffffffffffffffbf, x1, 24, x2)

xnor_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x0800000000000020), rs1:x24(0x0800000000000000), rs2:x9(0xffffffffffffffdf)
    TEST_RR_OP(xnor, x8, x24, x9, 0x0800000000000020, 0x800000000000000, 0xffffffffffffffdf, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_15_0)


xnor_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x1000000000000010), rs1:x23(0x1000000000000000), rs2:x8(0xffffffffffffffef)
    TEST_RR_OP(xnor, x9, x23, x8, 0x1000000000000010, 0x1000000000000000, 0xffffffffffffffef, x1, 0, x2)

xnor_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x2000000000000008), rs1:x22(0x2000000000000000), rs2:x7(0xfffffffffffffff7)
    TEST_RR_OP(xnor, x10, x22, x7, 0x2000000000000008, 0x2000000000000000, 0xfffffffffffffff7, x1, 8, x2)

xnor_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x4000000000000004), rs1:x21(0x4000000000000000), rs2:x6(0xfffffffffffffffb)
    TEST_RR_OP(xnor, x11, x21, x6, 0x4000000000000004, 0x4000000000000000, 0xfffffffffffffffb, x1, 16, x2)

xnor_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x8000000000000002), rs1:x20(0x8000000000000000), rs2:x5(0xfffffffffffffffd)
    TEST_RR_OP(xnor, x12, x20, x5, 0x8000000000000002, 0x8000000000000000, 0xfffffffffffffffd, x1, 24, x2)

xnor_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000001), rs1:x19(0x0000000000000000), rs2:x4(0xfffffffffffffffe)
    TEST_RR_OP(xnor, x13, x19, x4, 0x0000000000000001, 0x0, 0xfffffffffffffffe, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x4,signature_16_0)


xnor_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000001), rs1:x18(0xfffffffffffffffe), rs2:x3(0x0000000000000000)
    TEST_RR_OP(xnor, x14, x18, x3, 0x0000000000000001, 0xfffffffffffffffe, 0x0, x4, 0, x5)

xnor_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0x8000000000000002), rs1:x17(0xfffffffffffffffd), rs2:x2(0x8000000000000000)
    TEST_RR_OP(xnor, x15, x17, x2, 0x8000000000000002, 0xfffffffffffffffd, 0x8000000000000000, x4, 8, x5)

xnor_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0x4000000000000004), rs1:x16(0xfffffffffffffffb), rs2:x1(0x4000000000000000)
    TEST_RR_OP(xnor, x16, x16, x1, 0x4000000000000004, 0xfffffffffffffffb, 0x4000000000000000, x4, 16, x5)

xnor_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0x2000000000000008), rs1:x15(0xfffffffffffffff7), rs2:x31(0x2000000000000000)
    TEST_RR_OP(xnor, x17, x15, x31, 0x2000000000000008, 0xfffffffffffffff7, 0x2000000000000000, x4, 24, x5)

xnor_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0x1000000000000010), rs1:x14(0xffffffffffffffef), rs2:x30(0x1000000000000000)
    TEST_RR_OP(xnor, x18, x14, x30, 0x1000000000000010, 0xffffffffffffffef, 0x1000000000000000, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_17_0)


xnor_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0x0800000000000020), rs1:x13(0xffffffffffffffdf), rs2:x29(0x0800000000000000)
    TEST_RR_OP(xnor, x19, x13, x29, 0x0800000000000020, 0xffffffffffffffdf, 0x800000000000000, x1, 0, x2)

xnor_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0x0400000000000040), rs1:x12(0xffffffffffffffbf), rs2:x28(0x0400000000000000)
    TEST_RR_OP(xnor, x20, x12, x28, 0x0400000000000040, 0xffffffffffffffbf, 0x400000000000000, x1, 8, x2)

xnor_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0x0200000000000080), rs1:x11(0xffffffffffffff7f), rs2:x27(0x0200000000000000)
    TEST_RR_OP(xnor, x21, x11, x27, 0x0200000000000080, 0xffffffffffffff7f, 0x200000000000000, x1, 16, x2)

xnor_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0x0100000000000100), rs1:x10(0xfffffffffffffeff), rs2:x26(0x0100000000000000)
    TEST_RR_OP(xnor, x22, x10, x26, 0x0100000000000100, 0xfffffffffffffeff, 0x100000000000000, x1, 24, x2)

xnor_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0x0080000000000200), rs1:x9(0xfffffffffffffdff), rs2:x25(0x0080000000000000)
    TEST_RR_OP(xnor, x23, x9, x25, 0x0080000000000200, 0xfffffffffffffdff, 0x80000000000000, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_18_0)


xnor_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0x0040000000000400), rs1:x8(0xfffffffffffffbff), rs2:x24(0x0040000000000000)
    TEST_RR_OP(xnor, x24, x8, x24, 0x0040000000000400, 0xfffffffffffffbff, 0x40000000000000, x1, 0, x2)

xnor_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0x0020000000000800), rs1:x7(0xfffffffffffff7ff), rs2:x23(0x0020000000000000)
    TEST_RR_OP(xnor, x25, x7, x23, 0x0020000000000800, 0xfffffffffffff7ff, 0x20000000000000, x1, 8, x2)

xnor_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0x0010000000001000), rs1:x6(0xffffffffffffefff), rs2:x22(0x0010000000000000)
    TEST_RR_OP(xnor, x26, x6, x22, 0x0010000000001000, 0xffffffffffffefff, 0x10000000000000, x1, 16, x2)

xnor_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0x0008000000002000), rs1:x5(0xffffffffffffdfff), rs2:x21(0x0008000000000000)
    TEST_RR_OP(xnor, x27, x5, x21, 0x0008000000002000, 0xffffffffffffdfff, 0x8000000000000, x1, 24, x2)

xnor_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0x0004000000004000), rs1:x4(0xffffffffffffbfff), rs2:x20(0x0004000000000000)
    TEST_RR_OP(xnor, x28, x4, x20, 0x0004000000004000, 0xffffffffffffbfff, 0x4000000000000, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x4,signature_19_0)


xnor_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0x0002000000008000), rs1:x3(0xffffffffffff7fff), rs2:x19(0x0002000000000000)
    TEST_RR_OP(xnor, x29, x3, x19, 0x0002000000008000, 0xffffffffffff7fff, 0x2000000000000, x4, 0, x5)

xnor_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0x0001000000010000), rs1:x2(0xfffffffffffeffff), rs2:x18(0x0001000000000000)
    TEST_RR_OP(xnor, x30, x2, x18, 0x0001000000010000, 0xfffffffffffeffff, 0x1000000000000, x4, 8, x5)

xnor_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0x0000800000020000), rs1:x1(0xfffffffffffdffff), rs2:x17(0x0000800000000000)
    TEST_RR_OP(xnor, x31, x1, x17, 0x0000800000020000, 0xfffffffffffdffff, 0x800000000000, x4, 16, x5)

xnor_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0x0000400000040000), rs1:x31(0xfffffffffffbffff), rs2:x16(0x0000400000000000)
    TEST_RR_OP(xnor, x1, x31, x16, 0x0000400000040000, 0xfffffffffffbffff, 0x400000000000, x4, 24, x5)

xnor_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0x0000200000080000), rs1:x30(0xfffffffffff7ffff), rs2:x15(0x0000200000000000)
    TEST_RR_OP(xnor, x2, x30, x15, 0x0000200000080000, 0xfffffffffff7ffff, 0x200000000000, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_20_0)


xnor_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0x0000100000100000), rs1:x29(0xffffffffffefffff), rs2:x14(0x0000100000000000)
    TEST_RR_OP(xnor, x3, x29, x14, 0x0000100000100000, 0xffffffffffefffff, 0x100000000000, x1, 0, x2)

xnor_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0x0000080000200000), rs1:x28(0xffffffffffdfffff), rs2:x13(0x0000080000000000)
    TEST_RR_OP(xnor, x4, x28, x13, 0x0000080000200000, 0xffffffffffdfffff, 0x80000000000, x1, 8, x2)

xnor_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0x0000040000400000), rs1:x27(0xffffffffffbfffff), rs2:x12(0x0000040000000000)
    TEST_RR_OP(xnor, x5, x27, x12, 0x0000040000400000, 0xffffffffffbfffff, 0x40000000000, x1, 16, x2)

xnor_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0x0000020000800000), rs1:x26(0xffffffffff7fffff), rs2:x11(0x0000020000000000)
    TEST_RR_OP(xnor, x6, x26, x11, 0x0000020000800000, 0xffffffffff7fffff, 0x20000000000, x1, 24, x2)

xnor_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0x0000010001000000), rs1:x25(0xfffffffffeffffff), rs2:x10(0x0000010000000000)
    TEST_RR_OP(xnor, x7, x25, x10, 0x0000010001000000, 0xfffffffffeffffff, 0x10000000000, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_21_0)


xnor_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0x0000008002000000), rs1:x24(0xfffffffffdffffff), rs2:x9(0x0000008000000000)
    TEST_RR_OP(xnor, x8, x24, x9, 0x0000008002000000, 0xfffffffffdffffff, 0x8000000000, x1, 0, x2)

xnor_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0x0000004004000000), rs1:x23(0xfffffffffbffffff), rs2:x8(0x0000004000000000)
    TEST_RR_OP(xnor, x9, x23, x8, 0x0000004004000000, 0xfffffffffbffffff, 0x4000000000, x1, 8, x2)

xnor_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0x0000002008000000), rs1:x22(0xfffffffff7ffffff), rs2:x7(0x0000002000000000)
    TEST_RR_OP(xnor, x10, x22, x7, 0x0000002008000000, 0xfffffffff7ffffff, 0x2000000000, x1, 16, x2)

xnor_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0x0000001010000000), rs1:x21(0xffffffffefffffff), rs2:x6(0x0000001000000000)
    TEST_RR_OP(xnor, x11, x21, x6, 0x0000001010000000, 0xffffffffefffffff, 0x1000000000, x1, 24, x2)

xnor_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0x0000000820000000), rs1:x20(0xffffffffdfffffff), rs2:x5(0x0000000800000000)
    TEST_RR_OP(xnor, x12, x20, x5, 0x0000000820000000, 0xffffffffdfffffff, 0x800000000, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x5,signature_22_0)


xnor_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0x0000000440000000), rs1:x19(0xffffffffbfffffff), rs2:x4(0x0000000400000000)
    TEST_RR_OP(xnor, x13, x19, x4, 0x0000000440000000, 0xffffffffbfffffff, 0x400000000, x5, 0, x6)

xnor_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0x0000000280000000), rs1:x18(0xffffffff7fffffff), rs2:x3(0x0000000200000000)
    TEST_RR_OP(xnor, x14, x18, x3, 0x0000000280000000, 0xffffffff7fffffff, 0x200000000, x5, 8, x6)

xnor_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0xfffffffeffffffff), rs2:x2(0x0000000100000000)
    TEST_RR_OP(xnor, x15, x17, x2, 0x0000000000000000, 0xfffffffeffffffff, 0x100000000, x5, 16, x6)

xnor_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0x0000000280000000), rs1:x16(0xfffffffdffffffff), rs2:x1(0x0000000080000000)
    TEST_RR_OP(xnor, x16, x16, x1, 0x0000000280000000, 0xfffffffdffffffff, 0x80000000, x5, 24, x6)

xnor_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0x0000000440000000), rs1:x15(0xfffffffbffffffff), rs2:x31(0x0000000040000000)
    TEST_RR_OP(xnor, x17, x15, x31, 0x0000000440000000, 0xfffffffbffffffff, 0x40000000, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_23_0)


xnor_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0x0000000820000000), rs1:x14(0xfffffff7ffffffff), rs2:x30(0x0000000020000000)
    TEST_RR_OP(xnor, x18, x14, x30, 0x0000000820000000, 0xfffffff7ffffffff, 0x20000000, x1, 0, x2)

xnor_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0x0000001010000000), rs1:x13(0xffffffefffffffff), rs2:x29(0x0000000010000000)
    TEST_RR_OP(xnor, x19, x13, x29, 0x0000001010000000, 0xffffffefffffffff, 0x10000000, x1, 8, x2)

xnor_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0x0000002008000000), rs1:x12(0xffffffdfffffffff), rs2:x28(0x0000000008000000)
    TEST_RR_OP(xnor, x20, x12, x28, 0x0000002008000000, 0xffffffdfffffffff, 0x8000000, x1, 16, x2)

xnor_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0x0000004004000000), rs1:x11(0xffffffbfffffffff), rs2:x27(0x0000000004000000)
    TEST_RR_OP(xnor, x21, x11, x27, 0x0000004004000000, 0xffffffbfffffffff, 0x4000000, x1, 24, x2)

xnor_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0x0000008002000000), rs1:x10(0xffffff7fffffffff), rs2:x26(0x0000000002000000)
    TEST_RR_OP(xnor, x22, x10, x26, 0x0000008002000000, 0xffffff7fffffffff, 0x2000000, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_24_0)


xnor_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0x0000010001000000), rs1:x9(0xfffffeffffffffff), rs2:x25(0x0000000001000000)
    TEST_RR_OP(xnor, x23, x9, x25, 0x0000010001000000, 0xfffffeffffffffff, 0x1000000, x1, 0, x2)

xnor_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0x0000020000800000), rs1:x8(0xfffffdffffffffff), rs2:x24(0x0000000000800000)
    TEST_RR_OP(xnor, x24, x8, x24, 0x0000020000800000, 0xfffffdffffffffff, 0x800000, x1, 8, x2)

xnor_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0x0000040000400000), rs1:x7(0xfffffbffffffffff), rs2:x23(0x0000000000400000)
    TEST_RR_OP(xnor, x25, x7, x23, 0x0000040000400000, 0xfffffbffffffffff, 0x400000, x1, 16, x2)

xnor_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0x0000080000200000), rs1:x6(0xfffff7ffffffffff), rs2:x22(0x0000000000200000)
    TEST_RR_OP(xnor, x26, x6, x22, 0x0000080000200000, 0xfffff7ffffffffff, 0x200000, x1, 24, x2)

xnor_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0x0000100000100000), rs1:x5(0xffffefffffffffff), rs2:x21(0x0000000000100000)
    TEST_RR_OP(xnor, x27, x5, x21, 0x0000100000100000, 0xffffefffffffffff, 0x100000, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x5,signature_25_0)


xnor_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0x0000200000080000), rs1:x4(0xffffdfffffffffff), rs2:x20(0x0000000000080000)
    TEST_RR_OP(xnor, x28, x4, x20, 0x0000200000080000, 0xffffdfffffffffff, 0x80000, x5, 0, x6)

xnor_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0x0000400000040000), rs1:x3(0xffffbfffffffffff), rs2:x19(0x0000000000040000)
    TEST_RR_OP(xnor, x29, x3, x19, 0x0000400000040000, 0xffffbfffffffffff, 0x40000, x5, 8, x6)

xnor_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0x0000800000020000), rs1:x2(0xffff7fffffffffff), rs2:x18(0x0000000000020000)
    TEST_RR_OP(xnor, x30, x2, x18, 0x0000800000020000, 0xffff7fffffffffff, 0x20000, x5, 16, x6)

xnor_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0x0001000000010000), rs1:x1(0xfffeffffffffffff), rs2:x17(0x0000000000010000)
    TEST_RR_OP(xnor, x31, x1, x17, 0x0001000000010000, 0xfffeffffffffffff, 0x10000, x5, 24, x6)

xnor_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0x0002000000008000), rs1:x31(0xfffdffffffffffff), rs2:x16(0x0000000000008000)
    TEST_RR_OP(xnor, x1, x31, x16, 0x0002000000008000, 0xfffdffffffffffff, 0x8000, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_26_0)


xnor_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0x0004000000004000), rs1:x30(0xfffbffffffffffff), rs2:x15(0x0000000000004000)
    TEST_RR_OP(xnor, x2, x30, x15, 0x0004000000004000, 0xfffbffffffffffff, 0x4000, x1, 0, x7)

xnor_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0x0008000000002000), rs1:x29(0xfff7ffffffffffff), rs2:x14(0x0000000000002000)
    TEST_RR_OP(xnor, x3, x29, x14, 0x0008000000002000, 0xfff7ffffffffffff, 0x2000, x1, 8, x7)

xnor_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0x0010000000001000), rs1:x28(0xffefffffffffffff), rs2:x13(0x0000000000001000)
    TEST_RR_OP(xnor, x4, x28, x13, 0x0010000000001000, 0xffefffffffffffff, 0x1000, x1, 16, x7)

xnor_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0x0020000000000800), rs1:x27(0xffdfffffffffffff), rs2:x12(0x0000000000000800)
    TEST_RR_OP(xnor, x5, x27, x12, 0x0020000000000800, 0xffdfffffffffffff, 0x800, x1, 24, x7)

xnor_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0x0040000000000400), rs1:x26(0xffbfffffffffffff), rs2:x11(0x0000000000000400)
    TEST_RR_OP(xnor, x6, x26, x11, 0x0040000000000400, 0xffbfffffffffffff, 0x400, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_27_0)


xnor_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0x0080000000000200), rs1:x25(0xff7fffffffffffff), rs2:x10(0x0000000000000200)
    TEST_RR_OP(xnor, x7, x25, x10, 0x0080000000000200, 0xff7fffffffffffff, 0x200, x1, 0, x2)

xnor_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0x0100000000000100), rs1:x24(0xfeffffffffffffff), rs2:x9(0x0000000000000100)
    TEST_RR_OP(xnor, x8, x24, x9, 0x0100000000000100, 0xfeffffffffffffff, 0x100, x1, 8, x2)

xnor_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0x0200000000000080), rs1:x23(0xfdffffffffffffff), rs2:x8(0x0000000000000080)
    TEST_RR_OP(xnor, x9, x23, x8, 0x0200000000000080, 0xfdffffffffffffff, 0x80, x1, 16, x2)

xnor_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0x0400000000000040), rs1:x22(0xfbffffffffffffff), rs2:x7(0x0000000000000040)
    TEST_RR_OP(xnor, x10, x22, x7, 0x0400000000000040, 0xfbffffffffffffff, 0x40, x1, 24, x2)

xnor_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0x0800000000000020), rs1:x21(0xf7ffffffffffffff), rs2:x6(0x0000000000000020)
    TEST_RR_OP(xnor, x11, x21, x6, 0x0800000000000020, 0xf7ffffffffffffff, 0x20, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x6,signature_28_0)


xnor_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0x1000000000000010), rs1:x20(0xefffffffffffffff), rs2:x5(0x0000000000000010)
    TEST_RR_OP(xnor, x12, x20, x5, 0x1000000000000010, 0xefffffffffffffff, 0x10, x6, 0, x7)

xnor_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0x2000000000000008), rs1:x19(0xdfffffffffffffff), rs2:x4(0x0000000000000008)
    TEST_RR_OP(xnor, x13, x19, x4, 0x2000000000000008, 0xdfffffffffffffff, 0x8, x6, 8, x7)

xnor_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0x4000000000000004), rs1:x18(0xbfffffffffffffff), rs2:x3(0x0000000000000004)
    TEST_RR_OP(xnor, x14, x18, x3, 0x4000000000000004, 0xbfffffffffffffff, 0x4, x6, 16, x7)

xnor_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0x8000000000000002), rs1:x17(0x7fffffffffffffff), rs2:x2(0x0000000000000002)
    TEST_RR_OP(xnor, x15, x17, x2, 0x8000000000000002, 0x7fffffffffffffff, 0x2, x6, 24, x7)

xnor_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000001), rs1:x16(0xffffffffffffffff), rs2:x1(0x0000000000000001)
    TEST_RR_OP(xnor, x16, x16, x1, 0x0000000000000001, 0xffffffffffffffff, 0x1, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_29_0)


xnor_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0xfffffffffffffffe), rs1:x15(0x0000000000000001), rs2:x31(0x0000000000000000)
    TEST_RR_OP(xnor, x17, x15, x31, 0xfffffffffffffffe, 0x1, 0x0, x1, 0, x2)

xnor_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0xfffffffffffffffd), rs1:x14(0x0000000000000002), rs2:x30(0x0000000000000000)
    TEST_RR_OP(xnor, x18, x14, x30, 0xfffffffffffffffd, 0x2, 0x0, x1, 8, x2)

xnor_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0xfffffffffffffffb), rs1:x13(0x0000000000000004), rs2:x29(0x0000000000000000)
    TEST_RR_OP(xnor, x19, x13, x29, 0xfffffffffffffffb, 0x4, 0x0, x1, 16, x2)

xnor_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0xfffffffffffffff7), rs1:x12(0x0000000000000008), rs2:x28(0x0000000000000000)
    TEST_RR_OP(xnor, x20, x12, x28, 0xfffffffffffffff7, 0x8, 0x0, x1, 24, x2)

xnor_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffef), rs1:x11(0x0000000000000010), rs2:x27(0x0000000000000000)
    TEST_RR_OP(xnor, x21, x11, x27, 0xffffffffffffffef, 0x10, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_30_0)


xnor_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffdf), rs1:x10(0x0000000000000020), rs2:x26(0x0000000000000000)
    TEST_RR_OP(xnor, x22, x10, x26, 0xffffffffffffffdf, 0x20, 0x0, x1, 0, x2)

xnor_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffffffbf), rs1:x9(0x0000000000000040), rs2:x25(0x0000000000000000)
    TEST_RR_OP(xnor, x23, x9, x25, 0xffffffffffffffbf, 0x40, 0x0, x1, 8, x2)

xnor_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffff7f), rs1:x8(0x0000000000000080), rs2:x24(0x0000000000000000)
    TEST_RR_OP(xnor, x24, x8, x24, 0xffffffffffffff7f, 0x80, 0x0, x1, 16, x2)

xnor_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0xfffffffffffffeff), rs1:x7(0x0000000000000100), rs2:x23(0x0000000000000000)
    TEST_RR_OP(xnor, x25, x7, x23, 0xfffffffffffffeff, 0x100, 0x0, x1, 24, x2)

xnor_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0xfffffffffffffdff), rs1:x6(0x0000000000000200), rs2:x22(0x0000000000000000)
    TEST_RR_OP(xnor, x26, x6, x22, 0xfffffffffffffdff, 0x200, 0x0, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x6,signature_31_0)


xnor_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0xfffffffffffffbff), rs1:x5(0x0000000000000400), rs2:x21(0x0000000000000000)
    TEST_RR_OP(xnor, x27, x5, x21, 0xfffffffffffffbff, 0x400, 0x0, x6, 0, x7)

xnor_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0xfffffffffffff7ff), rs1:x4(0x0000000000000800), rs2:x20(0x0000000000000000)
    TEST_RR_OP(xnor, x28, x4, x20, 0xfffffffffffff7ff, 0x800, 0x0, x6, 8, x7)

xnor_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffefff), rs1:x3(0x0000000000001000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(xnor, x29, x3, x19, 0xffffffffffffefff, 0x1000, 0x0, x6, 16, x7)

xnor_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffdfff), rs1:x2(0x0000000000002000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(xnor, x30, x2, x18, 0xffffffffffffdfff, 0x2000, 0x0, x6, 24, x7)

xnor_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffbfff), rs1:x1(0x0000000000004000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(xnor, x31, x1, x17, 0xffffffffffffbfff, 0x4000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x6,signature_32_0)


xnor_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffff7fff), rs1:x31(0x0000000000008000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(xnor, x1, x31, x16, 0xffffffffffff7fff, 0x8000, 0x0, x6, 0, x7)

xnor_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0xfffffffffffeffff), rs1:x30(0x0000000000010000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(xnor, x2, x30, x15, 0xfffffffffffeffff, 0x10000, 0x0, x6, 8, x7)

xnor_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0xfffffffffffdffff), rs1:x29(0x0000000000020000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(xnor, x3, x29, x14, 0xfffffffffffdffff, 0x20000, 0x0, x6, 16, x7)

xnor_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0xfffffffffffbffff), rs1:x28(0x0000000000040000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(xnor, x4, x28, x13, 0xfffffffffffbffff, 0x40000, 0x0, x6, 24, x7)

xnor_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0xfffffffffff7ffff), rs1:x27(0x0000000000080000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(xnor, x5, x27, x12, 0xfffffffffff7ffff, 0x80000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_33_0)


xnor_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffefffff), rs1:x26(0x0000000000100000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(xnor, x6, x26, x11, 0xffffffffffefffff, 0x100000, 0x0, x1, 0, x2)

xnor_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffdfffff), rs1:x25(0x0000000000200000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(xnor, x7, x25, x10, 0xffffffffffdfffff, 0x200000, 0x0, x1, 8, x2)

xnor_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffbfffff), rs1:x24(0x0000000000400000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(xnor, x8, x24, x9, 0xffffffffffbfffff, 0x400000, 0x0, x1, 16, x2)

xnor_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0xffffffffff7fffff), rs1:x23(0x0000000000800000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(xnor, x9, x23, x8, 0xffffffffff7fffff, 0x800000, 0x0, x1, 24, x2)

xnor_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0xfffffffffeffffff), rs1:x22(0x0000000001000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(xnor, x10, x22, x7, 0xfffffffffeffffff, 0x1000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_34_0)


xnor_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0xfffffffffdffffff), rs1:x21(0x0000000002000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(xnor, x11, x21, x6, 0xfffffffffdffffff, 0x2000000, 0x0, x1, 0, x7)

xnor_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0xfffffffffbffffff), rs1:x20(0x0000000004000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(xnor, x12, x20, x5, 0xfffffffffbffffff, 0x4000000, 0x0, x1, 8, x7)

xnor_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0xfffffffff7ffffff), rs1:x19(0x0000000008000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(xnor, x13, x19, x4, 0xfffffffff7ffffff, 0x8000000, 0x0, x1, 16, x7)

xnor_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0xffffffffefffffff), rs1:x18(0x0000000010000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(xnor, x14, x18, x3, 0xffffffffefffffff, 0x10000000, 0x0, x1, 24, x7)

xnor_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0xffffffffdfffffff), rs1:x17(0x0000000020000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(xnor, x15, x17, x2, 0xffffffffdfffffff, 0x20000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x2,signature_35_0)


xnor_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0xffffffffbfffffff), rs1:x16(0x0000000040000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(xnor, x16, x16, x1, 0xffffffffbfffffff, 0x40000000, 0x0, x2, 0, x3)

xnor_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0xffffffff7fffffff), rs1:x15(0x0000000080000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(xnor, x17, x15, x31, 0xffffffff7fffffff, 0x80000000, 0x0, x2, 8, x3)

xnor_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0xfffffffeffffffff), rs1:x14(0x0000000100000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(xnor, x18, x14, x30, 0xfffffffeffffffff, 0x100000000, 0x0, x2, 16, x3)

xnor_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0xfffffffdffffffff), rs1:x13(0x0000000200000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(xnor, x19, x13, x29, 0xfffffffdffffffff, 0x200000000, 0x0, x2, 24, x3)

xnor_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0xfffffffbffffffff), rs1:x12(0x0000000400000000), rs2:x28(0x0000000000000000)
    TEST_RR_OP(xnor, x20, x12, x28, 0xfffffffbffffffff, 0x400000000, 0x0, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_36_0)


xnor_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0xfffffff7ffffffff), rs1:x11(0x0000000800000000), rs2:x27(0x0000000000000000)
    TEST_RR_OP(xnor, x21, x11, x27, 0xfffffff7ffffffff, 0x800000000, 0x0, x1, 0, x2)

xnor_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0xffffffefffffffff), rs1:x10(0x0000001000000000), rs2:x26(0x0000000000000000)
    TEST_RR_OP(xnor, x22, x10, x26, 0xffffffefffffffff, 0x1000000000, 0x0, x1, 8, x2)

xnor_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0xffffffdfffffffff), rs1:x9(0x0000002000000000), rs2:x25(0x0000000000000000)
    TEST_RR_OP(xnor, x23, x9, x25, 0xffffffdfffffffff, 0x2000000000, 0x0, x1, 16, x2)

xnor_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0xffffffbfffffffff), rs1:x8(0x0000004000000000), rs2:x24(0x0000000000000000)
    TEST_RR_OP(xnor, x24, x8, x24, 0xffffffbfffffffff, 0x4000000000, 0x0, x1, 24, x2)

xnor_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0xffffff7fffffffff), rs1:x7(0x0000008000000000), rs2:x23(0x0000000000000000)
    TEST_RR_OP(xnor, x25, x7, x23, 0xffffff7fffffffff, 0x8000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_37_0)


xnor_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0xfffffeffffffffff), rs1:x6(0x0000010000000000), rs2:x22(0x0000000000000000)
    TEST_RR_OP(xnor, x26, x6, x22, 0xfffffeffffffffff, 0x10000000000, 0x0, x1, 0, x7)

xnor_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0xfffffdffffffffff), rs1:x5(0x0000020000000000), rs2:x21(0x0000000000000000)
    TEST_RR_OP(xnor, x27, x5, x21, 0xfffffdffffffffff, 0x20000000000, 0x0, x1, 8, x7)

xnor_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0xfffffbffffffffff), rs1:x4(0x0000040000000000), rs2:x20(0x0000000000000000)
    TEST_RR_OP(xnor, x28, x4, x20, 0xfffffbffffffffff, 0x40000000000, 0x0, x1, 16, x7)

xnor_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0xfffff7ffffffffff), rs1:x3(0x0000080000000000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(xnor, x29, x3, x19, 0xfffff7ffffffffff, 0x80000000000, 0x0, x1, 24, x7)

xnor_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0xffffefffffffffff), rs1:x2(0x0000100000000000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(xnor, x30, x2, x18, 0xffffefffffffffff, 0x100000000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x5,signature_38_0)


xnor_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0xffffdfffffffffff), rs1:x1(0x0000200000000000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(xnor, x31, x1, x17, 0xffffdfffffffffff, 0x200000000000, 0x0, x5, 0, x6)

xnor_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0xffffbfffffffffff), rs1:x31(0x0000400000000000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(xnor, x1, x31, x16, 0xffffbfffffffffff, 0x400000000000, 0x0, x5, 8, x6)

xnor_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0xffff7fffffffffff), rs1:x30(0x0000800000000000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(xnor, x2, x30, x15, 0xffff7fffffffffff, 0x800000000000, 0x0, x5, 16, x6)

xnor_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0xfffeffffffffffff), rs1:x29(0x0001000000000000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(xnor, x3, x29, x14, 0xfffeffffffffffff, 0x1000000000000, 0x0, x5, 24, x6)

xnor_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0xfffdffffffffffff), rs1:x28(0x0002000000000000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(xnor, x4, x28, x13, 0xfffdffffffffffff, 0x2000000000000, 0x0, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_39_0)


xnor_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0xfffbffffffffffff), rs1:x27(0x0004000000000000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(xnor, x5, x27, x12, 0xfffbffffffffffff, 0x4000000000000, 0x0, x1, 0, x2)

xnor_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0xfff7ffffffffffff), rs1:x26(0x0008000000000000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(xnor, x6, x26, x11, 0xfff7ffffffffffff, 0x8000000000000, 0x0, x1, 8, x2)

xnor_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0xffefffffffffffff), rs1:x25(0x0010000000000000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(xnor, x7, x25, x10, 0xffefffffffffffff, 0x10000000000000, 0x0, x1, 16, x2)

xnor_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0xffdfffffffffffff), rs1:x24(0x0020000000000000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(xnor, x8, x24, x9, 0xffdfffffffffffff, 0x20000000000000, 0x0, x1, 24, x2)

xnor_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0xffbfffffffffffff), rs1:x23(0x0040000000000000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(xnor, x9, x23, x8, 0xffbfffffffffffff, 0x40000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_40_0)


xnor_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0xff7fffffffffffff), rs1:x22(0x0080000000000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(xnor, x10, x22, x7, 0xff7fffffffffffff, 0x80000000000000, 0x0, x1, 0, x2)

xnor_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0xfeffffffffffffff), rs1:x21(0x0100000000000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(xnor, x11, x21, x6, 0xfeffffffffffffff, 0x100000000000000, 0x0, x1, 8, x2)

xnor_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0xfdffffffffffffff), rs1:x20(0x0200000000000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(xnor, x12, x20, x5, 0xfdffffffffffffff, 0x200000000000000, 0x0, x1, 16, x2)

xnor_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0xfbffffffffffffff), rs1:x19(0x0400000000000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(xnor, x13, x19, x4, 0xfbffffffffffffff, 0x400000000000000, 0x0, x1, 24, x2)

xnor_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0xf7ffffffffffffff), rs1:x18(0x0800000000000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(xnor, x14, x18, x3, 0xf7ffffffffffffff, 0x800000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x3,signature_41_0)


xnor_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0xefffffffffffffff), rs1:x17(0x1000000000000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(xnor, x15, x17, x2, 0xefffffffffffffff, 0x1000000000000000, 0x0, x3, 0, x4)

xnor_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0xdfffffffffffffff), rs1:x16(0x2000000000000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(xnor, x16, x16, x1, 0xdfffffffffffffff, 0x2000000000000000, 0x0, x3, 8, x4)

xnor_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0xbfffffffffffffff), rs1:x15(0x4000000000000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(xnor, x17, x15, x31, 0xbfffffffffffffff, 0x4000000000000000, 0x0, x3, 16, x4)

xnor_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x7fffffffffffffff), rs1:x14(0x8000000000000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(xnor, x18, x14, x30, 0x7fffffffffffffff, 0x8000000000000000, 0x0, x3, 24, x4)

xnor_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffff), rs1:x13(0x0000000000000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(xnor, x19, x13, x29, 0xffffffffffffffff, 0x0, 0x0, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_42_0)


xnor_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000001), rs1:x12(0xfffffffffffffffe), rs2:x28(0x0000000000000000)
    TEST_RR_OP(xnor, x20, x12, x28, 0x0000000000000001, 0xfffffffffffffffe, 0x0, x1, 0, x2)

xnor_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000002), rs1:x11(0xfffffffffffffffd), rs2:x27(0x0000000000000000)
    TEST_RR_OP(xnor, x21, x11, x27, 0x0000000000000002, 0xfffffffffffffffd, 0x0, x1, 8, x2)

xnor_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000004), rs1:x10(0xfffffffffffffffb), rs2:x26(0x0000000000000000)
    TEST_RR_OP(xnor, x22, x10, x26, 0x0000000000000004, 0xfffffffffffffffb, 0x0, x1, 16, x2)

xnor_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000008), rs1:x9(0xfffffffffffffff7), rs2:x25(0x0000000000000000)
    TEST_RR_OP(xnor, x23, x9, x25, 0x0000000000000008, 0xfffffffffffffff7, 0x0, x1, 24, x2)

xnor_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000010), rs1:x8(0xffffffffffffffef), rs2:x24(0x0000000000000000)
    TEST_RR_OP(xnor, x24, x8, x24, 0x0000000000000010, 0xffffffffffffffef, 0x0, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_43_0)


xnor_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000020), rs1:x7(0xffffffffffffffdf), rs2:x23(0x0000000000000000)
    TEST_RR_OP(xnor, x25, x7, x23, 0x0000000000000020, 0xffffffffffffffdf, 0x0, x1, 0, x2)

xnor_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000040), rs1:x6(0xffffffffffffffbf), rs2:x22(0x0000000000000000)
    TEST_RR_OP(xnor, x26, x6, x22, 0x0000000000000040, 0xffffffffffffffbf, 0x0, x1, 8, x2)

xnor_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000080), rs1:x5(0xffffffffffffff7f), rs2:x21(0x0000000000000000)
    TEST_RR_OP(xnor, x27, x5, x21, 0x0000000000000080, 0xffffffffffffff7f, 0x0, x1, 16, x2)

xnor_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000100), rs1:x4(0xfffffffffffffeff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(xnor, x28, x4, x20, 0x0000000000000100, 0xfffffffffffffeff, 0x0, x1, 24, x2)

xnor_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000200), rs1:x3(0xfffffffffffffdff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(xnor, x29, x3, x19, 0x0000000000000200, 0xfffffffffffffdff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x4,signature_44_0)


xnor_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000400), rs1:x2(0xfffffffffffffbff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(xnor, x30, x2, x18, 0x0000000000000400, 0xfffffffffffffbff, 0x0, x4, 0, x5)

xnor_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000800), rs1:x1(0xfffffffffffff7ff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(xnor, x31, x1, x17, 0x0000000000000800, 0xfffffffffffff7ff, 0x0, x4, 8, x5)

xnor_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0x0000000000001000), rs1:x31(0xffffffffffffefff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(xnor, x1, x31, x16, 0x0000000000001000, 0xffffffffffffefff, 0x0, x4, 16, x5)

xnor_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0x0000000000002000), rs1:x30(0xffffffffffffdfff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(xnor, x2, x30, x15, 0x0000000000002000, 0xffffffffffffdfff, 0x0, x4, 24, x5)

xnor_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0x0000000000004000), rs1:x29(0xffffffffffffbfff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(xnor, x3, x29, x14, 0x0000000000004000, 0xffffffffffffbfff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_45_0)


xnor_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0x0000000000008000), rs1:x28(0xffffffffffff7fff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(xnor, x4, x28, x13, 0x0000000000008000, 0xffffffffffff7fff, 0x0, x1, 0, x2)

xnor_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0x0000000000010000), rs1:x27(0xfffffffffffeffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(xnor, x5, x27, x12, 0x0000000000010000, 0xfffffffffffeffff, 0x0, x1, 8, x2)

xnor_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0x0000000000020000), rs1:x26(0xfffffffffffdffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(xnor, x6, x26, x11, 0x0000000000020000, 0xfffffffffffdffff, 0x0, x1, 16, x2)

xnor_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0x0000000000040000), rs1:x25(0xfffffffffffbffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(xnor, x7, x25, x10, 0x0000000000040000, 0xfffffffffffbffff, 0x0, x1, 24, x2)

xnor_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0x0000000000080000), rs1:x24(0xfffffffffff7ffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(xnor, x8, x24, x9, 0x0000000000080000, 0xfffffffffff7ffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_46_0)


xnor_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0x0000000000100000), rs1:x23(0xffffffffffefffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(xnor, x9, x23, x8, 0x0000000000100000, 0xffffffffffefffff, 0x0, x1, 0, x2)

xnor_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0x0000000000200000), rs1:x22(0xffffffffffdfffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(xnor, x10, x22, x7, 0x0000000000200000, 0xffffffffffdfffff, 0x0, x1, 8, x2)

xnor_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0x0000000000400000), rs1:x21(0xffffffffffbfffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(xnor, x11, x21, x6, 0x0000000000400000, 0xffffffffffbfffff, 0x0, x1, 16, x2)

xnor_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0x0000000000800000), rs1:x20(0xffffffffff7fffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(xnor, x12, x20, x5, 0x0000000000800000, 0xffffffffff7fffff, 0x0, x1, 24, x2)

xnor_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0x0000000001000000), rs1:x19(0xfffffffffeffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(xnor, x13, x19, x4, 0x0000000001000000, 0xfffffffffeffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x4,signature_47_0)


xnor_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0x0000000002000000), rs1:x18(0xfffffffffdffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(xnor, x14, x18, x3, 0x0000000002000000, 0xfffffffffdffffff, 0x0, x4, 0, x5)

xnor_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0x0000000004000000), rs1:x17(0xfffffffffbffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(xnor, x15, x17, x2, 0x0000000004000000, 0xfffffffffbffffff, 0x0, x4, 8, x5)

xnor_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0x0000000008000000), rs1:x16(0xfffffffff7ffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(xnor, x16, x16, x1, 0x0000000008000000, 0xfffffffff7ffffff, 0x0, x4, 16, x5)

xnor_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0x0000000010000000), rs1:x15(0xffffffffefffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(xnor, x17, x15, x31, 0x0000000010000000, 0xffffffffefffffff, 0x0, x4, 24, x5)

xnor_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0x0000000020000000), rs1:x14(0xffffffffdfffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(xnor, x18, x14, x30, 0x0000000020000000, 0xffffffffdfffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_48_0)


xnor_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0x0000000040000000), rs1:x13(0xffffffffbfffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(xnor, x19, x13, x29, 0x0000000040000000, 0xffffffffbfffffff, 0x0, x1, 0, x2)

xnor_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0x0000000080000000), rs1:x12(0xffffffff7fffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(xnor, x20, x12, x28, 0x0000000080000000, 0xffffffff7fffffff, 0x0, x1, 8, x2)

xnor_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0x0000000100000000), rs1:x11(0xfffffffeffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(xnor, x21, x11, x27, 0x0000000100000000, 0xfffffffeffffffff, 0x0, x1, 16, x2)

xnor_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0x0000000200000000), rs1:x10(0xfffffffdffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(xnor, x22, x10, x26, 0x0000000200000000, 0xfffffffdffffffff, 0x0, x1, 24, x2)

xnor_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0x0000000400000000), rs1:x9(0xfffffffbffffffff), rs2:x25(0x0000000000000000)
    TEST_RR_OP(xnor, x23, x9, x25, 0x0000000400000000, 0xfffffffbffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_49_0)


xnor_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0x0000000800000000), rs1:x8(0xfffffff7ffffffff), rs2:x24(0x0000000000000000)
    TEST_RR_OP(xnor, x24, x8, x24, 0x0000000800000000, 0xfffffff7ffffffff, 0x0, x1, 0, x2)

xnor_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0x0000001000000000), rs1:x7(0xffffffefffffffff), rs2:x23(0x0000000000000000)
    TEST_RR_OP(xnor, x25, x7, x23, 0x0000001000000000, 0xffffffefffffffff, 0x0, x1, 8, x2)

xnor_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0x0000002000000000), rs1:x6(0xffffffdfffffffff), rs2:x22(0x0000000000000000)
    TEST_RR_OP(xnor, x26, x6, x22, 0x0000002000000000, 0xffffffdfffffffff, 0x0, x1, 16, x2)

xnor_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0x0000004000000000), rs1:x5(0xffffffbfffffffff), rs2:x21(0x0000000000000000)
    TEST_RR_OP(xnor, x27, x5, x21, 0x0000004000000000, 0xffffffbfffffffff, 0x0, x1, 24, x2)

xnor_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0x0000008000000000), rs1:x4(0xffffff7fffffffff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(xnor, x28, x4, x20, 0x0000008000000000, 0xffffff7fffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x4,signature_50_0)


xnor_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0x0000010000000000), rs1:x3(0xfffffeffffffffff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(xnor, x29, x3, x19, 0x0000010000000000, 0xfffffeffffffffff, 0x0, x4, 0, x5)

xnor_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0x0000020000000000), rs1:x2(0xfffffdffffffffff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(xnor, x30, x2, x18, 0x0000020000000000, 0xfffffdffffffffff, 0x0, x4, 8, x5)

xnor_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0x0000040000000000), rs1:x1(0xfffffbffffffffff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(xnor, x31, x1, x17, 0x0000040000000000, 0xfffffbffffffffff, 0x0, x4, 16, x5)

xnor_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0x0000080000000000), rs1:x31(0xfffff7ffffffffff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(xnor, x1, x31, x16, 0x0000080000000000, 0xfffff7ffffffffff, 0x0, x4, 24, x5)

xnor_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0x0000100000000000), rs1:x30(0xffffefffffffffff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(xnor, x2, x30, x15, 0x0000100000000000, 0xffffefffffffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_51_0)


xnor_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0x0000200000000000), rs1:x29(0xffffdfffffffffff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(xnor, x3, x29, x14, 0x0000200000000000, 0xffffdfffffffffff, 0x0, x1, 0, x2)

xnor_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0x0000400000000000), rs1:x28(0xffffbfffffffffff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(xnor, x4, x28, x13, 0x0000400000000000, 0xffffbfffffffffff, 0x0, x1, 8, x2)

xnor_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0x0000800000000000), rs1:x27(0xffff7fffffffffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(xnor, x5, x27, x12, 0x0000800000000000, 0xffff7fffffffffff, 0x0, x1, 16, x2)

xnor_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0x0001000000000000), rs1:x26(0xfffeffffffffffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(xnor, x6, x26, x11, 0x0001000000000000, 0xfffeffffffffffff, 0x0, x1, 24, x2)

xnor_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0x0002000000000000), rs1:x25(0xfffdffffffffffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(xnor, x7, x25, x10, 0x0002000000000000, 0xfffdffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_52_0)


xnor_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0x0004000000000000), rs1:x24(0xfffbffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(xnor, x8, x24, x9, 0x0004000000000000, 0xfffbffffffffffff, 0x0, x1, 0, x2)

xnor_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0x0008000000000000), rs1:x23(0xfff7ffffffffffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(xnor, x9, x23, x8, 0x0008000000000000, 0xfff7ffffffffffff, 0x0, x1, 8, x2)

xnor_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0x0010000000000000), rs1:x22(0xffefffffffffffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(xnor, x10, x22, x7, 0x0010000000000000, 0xffefffffffffffff, 0x0, x1, 16, x2)

xnor_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0x0020000000000000), rs1:x21(0xffdfffffffffffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(xnor, x11, x21, x6, 0x0020000000000000, 0xffdfffffffffffff, 0x0, x1, 24, x2)

xnor_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0x0040000000000000), rs1:x20(0xffbfffffffffffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(xnor, x12, x20, x5, 0x0040000000000000, 0xffbfffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x5,signature_53_0)


xnor_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0x0080000000000000), rs1:x19(0xff7fffffffffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(xnor, x13, x19, x4, 0x0080000000000000, 0xff7fffffffffffff, 0x0, x5, 0, x6)

xnor_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0x0100000000000000), rs1:x18(0xfeffffffffffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(xnor, x14, x18, x3, 0x0100000000000000, 0xfeffffffffffffff, 0x0, x5, 8, x6)

xnor_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0x0200000000000000), rs1:x17(0xfdffffffffffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(xnor, x15, x17, x2, 0x0200000000000000, 0xfdffffffffffffff, 0x0, x5, 16, x6)

xnor_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0x0400000000000000), rs1:x16(0xfbffffffffffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(xnor, x16, x16, x1, 0x0400000000000000, 0xfbffffffffffffff, 0x0, x5, 24, x6)

xnor_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0x0800000000000000), rs1:x15(0xf7ffffffffffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(xnor, x17, x15, x31, 0x0800000000000000, 0xf7ffffffffffffff, 0x0, x5, 32, x6)

    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_54_0)


xnor_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0x1000000000000000), rs1:x14(0xefffffffffffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(xnor, x18, x14, x30, 0x1000000000000000, 0xefffffffffffffff, 0x0, x1, 0, x2)

xnor_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0x2000000000000000), rs1:x13(0xdfffffffffffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(xnor, x19, x13, x29, 0x2000000000000000, 0xdfffffffffffffff, 0x0, x1, 8, x2)

xnor_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0x4000000000000000), rs1:x12(0xbfffffffffffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(xnor, x20, x12, x28, 0x4000000000000000, 0xbfffffffffffffff, 0x0, x1, 16, x2)

xnor_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0x8000000000000000), rs1:x11(0x7fffffffffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(xnor, x21, x11, x27, 0x8000000000000000, 0x7fffffffffffffff, 0x0, x1, 24, x2)

xnor_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0xffffffffffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(xnor, x22, x10, x26, 0x0000000000000000, 0xffffffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xnor)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xnor)

	RVTEST_SIGBASE(x1,signature_55_0)


xnor_01_inst_270:
    // Test 270:  Test with rs1 == rs2
    // result rd:x23(0xffffffffffffffff), rs1:x25(0x10fd3dedadea5195), rs2:x25(0xdf7f3844121bcc23)
    TEST_RR_OP(xnor, x23, x25, x25, 0xffffffffffffffff, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x1, 0, x2)

xnor_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1), rs2:x24(0xf5adb41aa47d105b)
    TEST_RR_OP(xnor, x0, x8, x24, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x1, 8, x2)

xnor_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0x369b60fa571e5744), rs1:x7(0xc9649f05a8e1a8bb), rs2:x0(0x82f6747f707af2c0)
    TEST_RR_OP(xnor, x25, x7, x0, 0x369b60fa571e5744, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x1, 16, x2)

xnor_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x8c56d02b1e64043c), rs1:x0(0x3541291848c99fcb), rs2:x22(0x73a92fd4e19bfbc3)
    TEST_RR_OP(xnor, x26, x0, x22, 0x8c56d02b1e64043c, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x1, 24, x2)
	
#endif


RVTEST_CODE_END xnor_01_code_end
RVTEST_CODE_BEGIN aes64ks1i_02_init aes64ks1i_02_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x6,signature_1_0)


aes64ks1i_02_inst_0:
    // Test 0:  Test with dataset: sbox64
    // result rd:x1(0x6363636263636362), rs1:x31(0x0000000000000000), imm:0x0
    TEST_IMM_OP(aes64ks1i, x1, x31, 0x6363636263636362, 0x0, 0x0, x6, 0, x7)

aes64ks1i_02_inst_1:
    // Test 1:  Test with dataset: sbox64
    // result rd:x2(0x7c7c7c7e7c7c7c7e), rs1:x30(0x0101010101010101), imm:0x1
    TEST_IMM_OP(aes64ks1i, x2, x30, 0x7c7c7c7e7c7c7c7e, 0x101010101010101, 0x1, x6, 8, x7)

aes64ks1i_02_inst_2:
    // Test 2:  Test with dataset: sbox64
    // result rd:x3(0x7777777377777773), rs1:x29(0x0202020202020202), imm:0x2
    TEST_IMM_OP(aes64ks1i, x3, x29, 0x7777777377777773, 0x202020202020202, 0x2, x6, 16, x7)

aes64ks1i_02_inst_3:
    // Test 3:  Test with dataset: sbox64
    // result rd:x4(0x7b7b7b737b7b7b73), rs1:x28(0x0303030303030303), imm:0x3
    TEST_IMM_OP(aes64ks1i, x4, x28, 0x7b7b7b737b7b7b73, 0x303030303030303, 0x3, x6, 24, x7)

aes64ks1i_02_inst_4:
    // Test 4:  Test with dataset: sbox64
    // result rd:x5(0xf2f2f2e2f2f2f2e2), rs1:x27(0x0404040404040404), imm:0x4
    TEST_IMM_OP(aes64ks1i, x5, x27, 0xf2f2f2e2f2f2f2e2, 0x404040404040404, 0x4, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_2_0)


aes64ks1i_02_inst_5:
    // Test 5:  Test with dataset: sbox64
    // result rd:x6(0x6b6b6b4b6b6b6b4b), rs1:x26(0x0505050505050505), imm:0x5
    TEST_IMM_OP(aes64ks1i, x6, x26, 0x6b6b6b4b6b6b6b4b, 0x505050505050505, 0x5, x1, 0, x2)

aes64ks1i_02_inst_6:
    // Test 6:  Test with dataset: sbox64
    // result rd:x7(0x6f6f6f2f6f6f6f2f), rs1:x25(0x0606060606060606), imm:0x6
    TEST_IMM_OP(aes64ks1i, x7, x25, 0x6f6f6f2f6f6f6f2f, 0x606060606060606, 0x6, x1, 8, x2)

aes64ks1i_02_inst_7:
    // Test 7:  Test with dataset: sbox64
    // result rd:x8(0xc5c5c545c5c5c545), rs1:x24(0x0707070707070707), imm:0x7
    TEST_IMM_OP(aes64ks1i, x8, x24, 0xc5c5c545c5c5c545, 0x707070707070707, 0x7, x1, 16, x2)

aes64ks1i_02_inst_8:
    // Test 8:  Test with dataset: sbox64
    // result rd:x9(0x3030302b3030302b), rs1:x23(0x0808080808080808), imm:0x8
    TEST_IMM_OP(aes64ks1i, x9, x23, 0x3030302b3030302b, 0x808080808080808, 0x8, x1, 24, x2)

aes64ks1i_02_inst_9:
    // Test 9:  Test with dataset: sbox64
    // result rd:x10(0x0101013701010137), rs1:x22(0x0909090909090909), imm:0x9
    TEST_IMM_OP(aes64ks1i, x10, x22, 0x0101013701010137, 0x909090909090909, 0x9, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_3_0)


aes64ks1i_02_inst_10:
    // Test 10:  Test with dataset: sbox64
    // result rd:x11(0x6767676767676767), rs1:x21(0x0a0a0a0a0a0a0a0a), imm:0xa
    TEST_IMM_OP(aes64ks1i, x11, x21, 0x6767676767676767, 0xa0a0a0a0a0a0a0a, 0xa, x1, 0, x7)

aes64ks1i_02_inst_11:
    // Test 11:  Test with dataset: sbox64
    // result rd:x12(0x2b2b2b292b2b2b29), rs1:x20(0x0b0b0b0b0b0b0b0b), imm:0x1
    TEST_IMM_OP(aes64ks1i, x12, x20, 0x2b2b2b292b2b2b29, 0xb0b0b0b0b0b0b0b, 0x1, x1, 8, x7)

aes64ks1i_02_inst_12:
    // Test 12:  Test with dataset: sbox64
    // result rd:x13(0xfefefefafefefefa), rs1:x19(0x0c0c0c0c0c0c0c0c), imm:0x2
    TEST_IMM_OP(aes64ks1i, x13, x19, 0xfefefefafefefefa, 0xc0c0c0c0c0c0c0c, 0x2, x1, 16, x7)

aes64ks1i_02_inst_13:
    // Test 13:  Test with dataset: sbox64
    // result rd:x14(0xd7d7d7dfd7d7d7df), rs1:x18(0x0d0d0d0d0d0d0d0d), imm:0x3
    TEST_IMM_OP(aes64ks1i, x14, x18, 0xd7d7d7dfd7d7d7df, 0xd0d0d0d0d0d0d0d, 0x3, x1, 24, x7)

aes64ks1i_02_inst_14:
    // Test 14:  Test with dataset: sbox64
    // result rd:x15(0xabababbbabababbb), rs1:x17(0x0e0e0e0e0e0e0e0e), imm:0x4
    TEST_IMM_OP(aes64ks1i, x15, x17, 0xabababbbabababbb, 0xe0e0e0e0e0e0e0e, 0x4, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x2,signature_4_0)


aes64ks1i_02_inst_15:
    // Test 15:  Test with dataset: sbox64
    // result rd:x16(0x7676765676767656), rs1:x16(0x0f0f0f0f0f0f0f0f), imm:0x5
    TEST_IMM_OP(aes64ks1i, x16, x16, 0x7676765676767656, 0xf0f0f0f0f0f0f0f, 0x5, x2, 0, x3)

aes64ks1i_02_inst_16:
    // Test 16:  Test with dataset: sbox64
    // result rd:x17(0xcacacacbcacacacb), rs1:x15(0x1010101010101010), imm:0x0
    TEST_IMM_OP(aes64ks1i, x17, x15, 0xcacacacbcacacacb, 0x1010101010101010, 0x0, x2, 8, x3)

aes64ks1i_02_inst_17:
    // Test 17:  Test with dataset: sbox64
    // result rd:x18(0x8282828082828280), rs1:x14(0x1111111111111111), imm:0x1
    TEST_IMM_OP(aes64ks1i, x18, x14, 0x8282828082828280, 0x1111111111111111, 0x1, x2, 16, x3)

aes64ks1i_02_inst_18:
    // Test 18:  Test with dataset: sbox64
    // result rd:x19(0xc9c9c9cdc9c9c9cd), rs1:x13(0x1212121212121212), imm:0x2
    TEST_IMM_OP(aes64ks1i, x19, x13, 0xc9c9c9cdc9c9c9cd, 0x1212121212121212, 0x2, x2, 24, x3)

aes64ks1i_02_inst_19:
    // Test 19:  Test with dataset: sbox64
    // result rd:x20(0x7d7d7d757d7d7d75), rs1:x12(0x1313131313131313), imm:0x3
    TEST_IMM_OP(aes64ks1i, x20, x12, 0x7d7d7d757d7d7d75, 0x1313131313131313, 0x3, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_5_0)


aes64ks1i_02_inst_20:
    // Test 20:  Test with dataset: sbox64
    // result rd:x21(0xfafafaeafafafaea), rs1:x11(0x1414141414141414), imm:0x4
    TEST_IMM_OP(aes64ks1i, x21, x11, 0xfafafaeafafafaea, 0x1414141414141414, 0x4, x1, 0, x2)

aes64ks1i_02_inst_21:
    // Test 21:  Test with dataset: sbox64
    // result rd:x22(0x5959597959595979), rs1:x10(0x1515151515151515), imm:0x5
    TEST_IMM_OP(aes64ks1i, x22, x10, 0x5959597959595979, 0x1515151515151515, 0x5, x1, 8, x2)

aes64ks1i_02_inst_22:
    // Test 22:  Test with dataset: sbox64
    // result rd:x23(0x4747470747474707), rs1:x9(0x1616161616161616), imm:0x6
    TEST_IMM_OP(aes64ks1i, x23, x9, 0x4747470747474707, 0x1616161616161616, 0x6, x1, 16, x2)

aes64ks1i_02_inst_23:
    // Test 23:  Test with dataset: sbox64
    // result rd:x24(0xf0f0f070f0f0f070), rs1:x8(0x1717171717171717), imm:0x7
    TEST_IMM_OP(aes64ks1i, x24, x8, 0xf0f0f070f0f0f070, 0x1717171717171717, 0x7, x1, 24, x2)

aes64ks1i_02_inst_24:
    // Test 24:  Test with dataset: sbox64
    // result rd:x25(0xadadadb6adadadb6), rs1:x7(0x1818181818181818), imm:0x8
    TEST_IMM_OP(aes64ks1i, x25, x7, 0xadadadb6adadadb6, 0x1818181818181818, 0x8, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_6_0)


aes64ks1i_02_inst_25:
    // Test 25:  Test with dataset: sbox64
    // result rd:x26(0xd4d4d4e2d4d4d4e2), rs1:x6(0x1919191919191919), imm:0x9
    TEST_IMM_OP(aes64ks1i, x26, x6, 0xd4d4d4e2d4d4d4e2, 0x1919191919191919, 0x9, x1, 0, x7)

aes64ks1i_02_inst_26:
    // Test 26:  Test with dataset: sbox64
    // result rd:x27(0xa2a2a2a2a2a2a2a2), rs1:x5(0x1a1a1a1a1a1a1a1a), imm:0xa
    TEST_IMM_OP(aes64ks1i, x27, x5, 0xa2a2a2a2a2a2a2a2, 0x1a1a1a1a1a1a1a1a, 0xa, x1, 8, x7)

aes64ks1i_02_inst_27:
    // Test 27:  Test with dataset: sbox64
    // result rd:x28(0xafafafadafafafad), rs1:x4(0x1b1b1b1b1b1b1b1b), imm:0x1
    TEST_IMM_OP(aes64ks1i, x28, x4, 0xafafafadafafafad, 0x1b1b1b1b1b1b1b1b, 0x1, x1, 16, x7)

aes64ks1i_02_inst_28:
    // Test 28:  Test with dataset: sbox64
    // result rd:x29(0x9c9c9c989c9c9c98), rs1:x3(0x1c1c1c1c1c1c1c1c), imm:0x2
    TEST_IMM_OP(aes64ks1i, x29, x3, 0x9c9c9c989c9c9c98, 0x1c1c1c1c1c1c1c1c, 0x2, x1, 24, x7)

aes64ks1i_02_inst_29:
    // Test 29:  Test with dataset: sbox64
    // result rd:x30(0xa4a4a4aca4a4a4ac), rs1:x2(0x1d1d1d1d1d1d1d1d), imm:0x3
    TEST_IMM_OP(aes64ks1i, x30, x2, 0xa4a4a4aca4a4a4ac, 0x1d1d1d1d1d1d1d1d, 0x3, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x5,signature_7_0)


aes64ks1i_02_inst_30:
    // Test 30:  Test with dataset: sbox64
    // result rd:x31(0x7272726272727262), rs1:x1(0x1e1e1e1e1e1e1e1e), imm:0x4
    TEST_IMM_OP(aes64ks1i, x31, x1, 0x7272726272727262, 0x1e1e1e1e1e1e1e1e, 0x4, x5, 0, x6)

aes64ks1i_02_inst_31:
    // Test 31:  Test with dataset: sbox64
    // result rd:x1(0xc0c0c0e0c0c0c0e0), rs1:x31(0x1f1f1f1f1f1f1f1f), imm:0x5
    TEST_IMM_OP(aes64ks1i, x1, x31, 0xc0c0c0e0c0c0c0e0, 0x1f1f1f1f1f1f1f1f, 0x5, x5, 8, x6)

aes64ks1i_02_inst_32:
    // Test 32:  Test with dataset: sbox64
    // result rd:x2(0xb7b7b7b6b7b7b7b6), rs1:x30(0x2020202020202020), imm:0x0
    TEST_IMM_OP(aes64ks1i, x2, x30, 0xb7b7b7b6b7b7b7b6, 0x2020202020202020, 0x0, x5, 16, x6)

aes64ks1i_02_inst_33:
    // Test 33:  Test with dataset: sbox64
    // result rd:x3(0xfdfdfdfffdfdfdff), rs1:x29(0x2121212121212121), imm:0x1
    TEST_IMM_OP(aes64ks1i, x3, x29, 0xfdfdfdfffdfdfdff, 0x2121212121212121, 0x1, x5, 24, x6)

aes64ks1i_02_inst_34:
    // Test 34:  Test with dataset: sbox64
    // result rd:x4(0x9393939793939397), rs1:x28(0x2222222222222222), imm:0x2
    TEST_IMM_OP(aes64ks1i, x4, x28, 0x9393939793939397, 0x2222222222222222, 0x2, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_8_0)


aes64ks1i_02_inst_35:
    // Test 35:  Test with dataset: sbox64
    // result rd:x5(0x2626262e2626262e), rs1:x27(0x2323232323232323), imm:0x3
    TEST_IMM_OP(aes64ks1i, x5, x27, 0x2626262e2626262e, 0x2323232323232323, 0x3, x1, 0, x2)

aes64ks1i_02_inst_36:
    // Test 36:  Test with dataset: sbox64
    // result rd:x6(0x3636362636363626), rs1:x26(0x2424242424242424), imm:0x4
    TEST_IMM_OP(aes64ks1i, x6, x26, 0x3636362636363626, 0x2424242424242424, 0x4, x1, 8, x2)

aes64ks1i_02_inst_37:
    // Test 37:  Test with dataset: sbox64
    // result rd:x7(0x3f3f3f1f3f3f3f1f), rs1:x25(0x2525252525252525), imm:0x5
    TEST_IMM_OP(aes64ks1i, x7, x25, 0x3f3f3f1f3f3f3f1f, 0x2525252525252525, 0x5, x1, 16, x2)

aes64ks1i_02_inst_38:
    // Test 38:  Test with dataset: sbox64
    // result rd:x8(0xf7f7f7b7f7f7f7b7), rs1:x24(0x2626262626262626), imm:0x6
    TEST_IMM_OP(aes64ks1i, x8, x24, 0xf7f7f7b7f7f7f7b7, 0x2626262626262626, 0x6, x1, 24, x2)

aes64ks1i_02_inst_39:
    // Test 39:  Test with dataset: sbox64
    // result rd:x9(0xcccccc4ccccccc4c), rs1:x23(0x2727272727272727), imm:0x7
    TEST_IMM_OP(aes64ks1i, x9, x23, 0xcccccc4ccccccc4c, 0x2727272727272727, 0x7, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_9_0)


aes64ks1i_02_inst_40:
    // Test 40:  Test with dataset: sbox64
    // result rd:x10(0x3434342f3434342f), rs1:x22(0x2828282828282828), imm:0x8
    TEST_IMM_OP(aes64ks1i, x10, x22, 0x3434342f3434342f, 0x2828282828282828, 0x8, x1, 0, x2)

aes64ks1i_02_inst_41:
    // Test 41:  Test with dataset: sbox64
    // result rd:x11(0xa5a5a593a5a5a593), rs1:x21(0x2929292929292929), imm:0x9
    TEST_IMM_OP(aes64ks1i, x11, x21, 0xa5a5a593a5a5a593, 0x2929292929292929, 0x9, x1, 8, x2)

aes64ks1i_02_inst_42:
    // Test 42:  Test with dataset: sbox64
    // result rd:x12(0xe5e5e5e5e5e5e5e5), rs1:x20(0x2a2a2a2a2a2a2a2a), imm:0xa
    TEST_IMM_OP(aes64ks1i, x12, x20, 0xe5e5e5e5e5e5e5e5, 0x2a2a2a2a2a2a2a2a, 0xa, x1, 16, x2)

aes64ks1i_02_inst_43:
    // Test 43:  Test with dataset: sbox64
    // result rd:x13(0xf1f1f1f3f1f1f1f3), rs1:x19(0x2b2b2b2b2b2b2b2b), imm:0x1
    TEST_IMM_OP(aes64ks1i, x13, x19, 0xf1f1f1f3f1f1f1f3, 0x2b2b2b2b2b2b2b2b, 0x1, x1, 24, x2)

aes64ks1i_02_inst_44:
    // Test 44:  Test with dataset: sbox64
    // result rd:x14(0x7171717571717175), rs1:x18(0x2c2c2c2c2c2c2c2c), imm:0x2
    TEST_IMM_OP(aes64ks1i, x14, x18, 0x7171717571717175, 0x2c2c2c2c2c2c2c2c, 0x2, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x3,signature_10_0)


aes64ks1i_02_inst_45:
    // Test 45:  Test with dataset: sbox64
    // result rd:x15(0xd8d8d8d0d8d8d8d0), rs1:x17(0x2d2d2d2d2d2d2d2d), imm:0x3
    TEST_IMM_OP(aes64ks1i, x15, x17, 0xd8d8d8d0d8d8d8d0, 0x2d2d2d2d2d2d2d2d, 0x3, x3, 0, x4)

aes64ks1i_02_inst_46:
    // Test 46:  Test with dataset: sbox64
    // result rd:x16(0x3131312131313121), rs1:x16(0x2e2e2e2e2e2e2e2e), imm:0x4
    TEST_IMM_OP(aes64ks1i, x16, x16, 0x3131312131313121, 0x2e2e2e2e2e2e2e2e, 0x4, x3, 8, x4)

aes64ks1i_02_inst_47:
    // Test 47:  Test with dataset: sbox64
    // result rd:x17(0x1515153515151535), rs1:x15(0x2f2f2f2f2f2f2f2f), imm:0x5
    TEST_IMM_OP(aes64ks1i, x17, x15, 0x1515153515151535, 0x2f2f2f2f2f2f2f2f, 0x5, x3, 16, x4)

aes64ks1i_02_inst_48:
    // Test 48:  Test with dataset: sbox64
    // result rd:x18(0x0404040504040405), rs1:x14(0x3030303030303030), imm:0x0
    TEST_IMM_OP(aes64ks1i, x18, x14, 0x0404040504040405, 0x3030303030303030, 0x0, x3, 24, x4)

aes64ks1i_02_inst_49:
    // Test 49:  Test with dataset: sbox64
    // result rd:x19(0xc7c7c7c5c7c7c7c5), rs1:x13(0x3131313131313131), imm:0x1
    TEST_IMM_OP(aes64ks1i, x19, x13, 0xc7c7c7c5c7c7c7c5, 0x3131313131313131, 0x1, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_11_0)


aes64ks1i_02_inst_50:
    // Test 50:  Test with dataset: sbox64
    // result rd:x20(0x2323232723232327), rs1:x12(0x3232323232323232), imm:0x2
    TEST_IMM_OP(aes64ks1i, x20, x12, 0x2323232723232327, 0x3232323232323232, 0x2, x1, 0, x2)

aes64ks1i_02_inst_51:
    // Test 51:  Test with dataset: sbox64
    // result rd:x21(0xc3c3c3cbc3c3c3cb), rs1:x11(0x3333333333333333), imm:0x3
    TEST_IMM_OP(aes64ks1i, x21, x11, 0xc3c3c3cbc3c3c3cb, 0x3333333333333333, 0x3, x1, 8, x2)

aes64ks1i_02_inst_52:
    // Test 52:  Test with dataset: sbox64
    // result rd:x22(0x1818180818181808), rs1:x10(0x3434343434343434), imm:0x4
    TEST_IMM_OP(aes64ks1i, x22, x10, 0x1818180818181808, 0x3434343434343434, 0x4, x1, 16, x2)

aes64ks1i_02_inst_53:
    // Test 53:  Test with dataset: sbox64
    // result rd:x23(0x969696b6969696b6), rs1:x9(0x3535353535353535), imm:0x5
    TEST_IMM_OP(aes64ks1i, x23, x9, 0x969696b6969696b6, 0x3535353535353535, 0x5, x1, 24, x2)

aes64ks1i_02_inst_54:
    // Test 54:  Test with dataset: sbox64
    // result rd:x24(0x0505054505050545), rs1:x8(0x3636363636363636), imm:0x6
    TEST_IMM_OP(aes64ks1i, x24, x8, 0x0505054505050545, 0x3636363636363636, 0x6, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_12_0)


aes64ks1i_02_inst_55:
    // Test 55:  Test with dataset: sbox64
    // result rd:x25(0x9a9a9a1a9a9a9a1a), rs1:x7(0x3737373737373737), imm:0x7
    TEST_IMM_OP(aes64ks1i, x25, x7, 0x9a9a9a1a9a9a9a1a, 0x3737373737373737, 0x7, x1, 0, x2)

aes64ks1i_02_inst_56:
    // Test 56:  Test with dataset: sbox64
    // result rd:x26(0x0707071c0707071c), rs1:x6(0x3838383838383838), imm:0x8
    TEST_IMM_OP(aes64ks1i, x26, x6, 0x0707071c0707071c, 0x3838383838383838, 0x8, x1, 8, x2)

aes64ks1i_02_inst_57:
    // Test 57:  Test with dataset: sbox64
    // result rd:x27(0x1212122412121224), rs1:x5(0x3939393939393939), imm:0x9
    TEST_IMM_OP(aes64ks1i, x27, x5, 0x1212122412121224, 0x3939393939393939, 0x9, x1, 16, x2)

aes64ks1i_02_inst_58:
    // Test 58:  Test with dataset: sbox64
    // result rd:x28(0x8080808080808080), rs1:x4(0x3a3a3a3a3a3a3a3a), imm:0xa
    TEST_IMM_OP(aes64ks1i, x28, x4, 0x8080808080808080, 0x3a3a3a3a3a3a3a3a, 0xa, x1, 24, x2)

aes64ks1i_02_inst_59:
    // Test 59:  Test with dataset: sbox64
    // result rd:x29(0xe2e2e2e0e2e2e2e0), rs1:x3(0x3b3b3b3b3b3b3b3b), imm:0x1
    TEST_IMM_OP(aes64ks1i, x29, x3, 0xe2e2e2e0e2e2e2e0, 0x3b3b3b3b3b3b3b3b, 0x1, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x4,signature_13_0)


aes64ks1i_02_inst_60:
    // Test 60:  Test with dataset: sbox64
    // result rd:x30(0xebebebefebebebef), rs1:x2(0x3c3c3c3c3c3c3c3c), imm:0x2
    TEST_IMM_OP(aes64ks1i, x30, x2, 0xebebebefebebebef, 0x3c3c3c3c3c3c3c3c, 0x2, x4, 0, x5)

aes64ks1i_02_inst_61:
    // Test 61:  Test with dataset: sbox64
    // result rd:x31(0x2727272f2727272f), rs1:x1(0x3d3d3d3d3d3d3d3d), imm:0x3
    TEST_IMM_OP(aes64ks1i, x31, x1, 0x2727272f2727272f, 0x3d3d3d3d3d3d3d3d, 0x3, x4, 8, x5)

aes64ks1i_02_inst_62:
    // Test 62:  Test with dataset: sbox64
    // result rd:x1(0xb2b2b2a2b2b2b2a2), rs1:x31(0x3e3e3e3e3e3e3e3e), imm:0x4
    TEST_IMM_OP(aes64ks1i, x1, x31, 0xb2b2b2a2b2b2b2a2, 0x3e3e3e3e3e3e3e3e, 0x4, x4, 16, x5)

aes64ks1i_02_inst_63:
    // Test 63:  Test with dataset: sbox64
    // result rd:x2(0x7575755575757555), rs1:x30(0x3f3f3f3f3f3f3f3f), imm:0x5
    TEST_IMM_OP(aes64ks1i, x2, x30, 0x7575755575757555, 0x3f3f3f3f3f3f3f3f, 0x5, x4, 24, x5)

aes64ks1i_02_inst_64:
    // Test 64:  Test with dataset: sbox64
    // result rd:x3(0x0909090809090908), rs1:x29(0x4040404040404040), imm:0x0
    TEST_IMM_OP(aes64ks1i, x3, x29, 0x0909090809090908, 0x4040404040404040, 0x0, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_14_0)


aes64ks1i_02_inst_65:
    // Test 65:  Test with dataset: sbox64
    // result rd:x4(0x8383838183838381), rs1:x28(0x4141414141414141), imm:0x1
    TEST_IMM_OP(aes64ks1i, x4, x28, 0x8383838183838381, 0x4141414141414141, 0x1, x1, 0, x2)

aes64ks1i_02_inst_66:
    // Test 66:  Test with dataset: sbox64
    // result rd:x5(0x2c2c2c282c2c2c28), rs1:x27(0x4242424242424242), imm:0x2
    TEST_IMM_OP(aes64ks1i, x5, x27, 0x2c2c2c282c2c2c28, 0x4242424242424242, 0x2, x1, 8, x2)

aes64ks1i_02_inst_67:
    // Test 67:  Test with dataset: sbox64
    // result rd:x6(0x1a1a1a121a1a1a12), rs1:x26(0x4343434343434343), imm:0x3
    TEST_IMM_OP(aes64ks1i, x6, x26, 0x1a1a1a121a1a1a12, 0x4343434343434343, 0x3, x1, 16, x2)

aes64ks1i_02_inst_68:
    // Test 68:  Test with dataset: sbox64
    // result rd:x7(0x1b1b1b0b1b1b1b0b), rs1:x25(0x4444444444444444), imm:0x4
    TEST_IMM_OP(aes64ks1i, x7, x25, 0x1b1b1b0b1b1b1b0b, 0x4444444444444444, 0x4, x1, 24, x2)

aes64ks1i_02_inst_69:
    // Test 69:  Test with dataset: sbox64
    // result rd:x8(0x6e6e6e4e6e6e6e4e), rs1:x24(0x4545454545454545), imm:0x5
    TEST_IMM_OP(aes64ks1i, x8, x24, 0x6e6e6e4e6e6e6e4e, 0x4545454545454545, 0x5, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_15_0)


aes64ks1i_02_inst_70:
    // Test 70:  Test with dataset: sbox64
    // result rd:x9(0x5a5a5a1a5a5a5a1a), rs1:x23(0x4646464646464646), imm:0x6
    TEST_IMM_OP(aes64ks1i, x9, x23, 0x5a5a5a1a5a5a5a1a, 0x4646464646464646, 0x6, x1, 0, x2)

aes64ks1i_02_inst_71:
    // Test 71:  Test with dataset: sbox64
    // result rd:x10(0xa0a0a020a0a0a020), rs1:x22(0x4747474747474747), imm:0x7
    TEST_IMM_OP(aes64ks1i, x10, x22, 0xa0a0a020a0a0a020, 0x4747474747474747, 0x7, x1, 8, x2)

aes64ks1i_02_inst_72:
    // Test 72:  Test with dataset: sbox64
    // result rd:x11(0x5252524952525249), rs1:x21(0x4848484848484848), imm:0x8
    TEST_IMM_OP(aes64ks1i, x11, x21, 0x5252524952525249, 0x4848484848484848, 0x8, x1, 16, x2)

aes64ks1i_02_inst_73:
    // Test 73:  Test with dataset: sbox64
    // result rd:x12(0x3b3b3b0d3b3b3b0d), rs1:x20(0x4949494949494949), imm:0x9
    TEST_IMM_OP(aes64ks1i, x12, x20, 0x3b3b3b0d3b3b3b0d, 0x4949494949494949, 0x9, x1, 24, x2)

aes64ks1i_02_inst_74:
    // Test 74:  Test with dataset: sbox64
    // result rd:x13(0xd6d6d6d6d6d6d6d6), rs1:x19(0x4a4a4a4a4a4a4a4a), imm:0xa
    TEST_IMM_OP(aes64ks1i, x13, x19, 0xd6d6d6d6d6d6d6d6, 0x4a4a4a4a4a4a4a4a, 0xa, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x4,signature_16_0)


aes64ks1i_02_inst_75:
    // Test 75:  Test with dataset: sbox64
    // result rd:x14(0xb3b3b3b1b3b3b3b1), rs1:x18(0x4b4b4b4b4b4b4b4b), imm:0x1
    TEST_IMM_OP(aes64ks1i, x14, x18, 0xb3b3b3b1b3b3b3b1, 0x4b4b4b4b4b4b4b4b, 0x1, x4, 0, x5)

aes64ks1i_02_inst_76:
    // Test 76:  Test with dataset: sbox64
    // result rd:x15(0x2929292d2929292d), rs1:x17(0x4c4c4c4c4c4c4c4c), imm:0x2
    TEST_IMM_OP(aes64ks1i, x15, x17, 0x2929292d2929292d, 0x4c4c4c4c4c4c4c4c, 0x2, x4, 8, x5)

aes64ks1i_02_inst_77:
    // Test 77:  Test with dataset: sbox64
    // result rd:x16(0xe3e3e3ebe3e3e3eb), rs1:x16(0x4d4d4d4d4d4d4d4d), imm:0x3
    TEST_IMM_OP(aes64ks1i, x16, x16, 0xe3e3e3ebe3e3e3eb, 0x4d4d4d4d4d4d4d4d, 0x3, x4, 16, x5)

aes64ks1i_02_inst_78:
    // Test 78:  Test with dataset: sbox64
    // result rd:x17(0x2f2f2f3f2f2f2f3f), rs1:x15(0x4e4e4e4e4e4e4e4e), imm:0x4
    TEST_IMM_OP(aes64ks1i, x17, x15, 0x2f2f2f3f2f2f2f3f, 0x4e4e4e4e4e4e4e4e, 0x4, x4, 24, x5)

aes64ks1i_02_inst_79:
    // Test 79:  Test with dataset: sbox64
    // result rd:x18(0x848484a4848484a4), rs1:x14(0x4f4f4f4f4f4f4f4f), imm:0x5
    TEST_IMM_OP(aes64ks1i, x18, x14, 0x848484a4848484a4, 0x4f4f4f4f4f4f4f4f, 0x5, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_17_0)


aes64ks1i_02_inst_80:
    // Test 80:  Test with dataset: sbox64
    // result rd:x19(0x5353535253535352), rs1:x13(0x5050505050505050), imm:0x0
    TEST_IMM_OP(aes64ks1i, x19, x13, 0x5353535253535352, 0x5050505050505050, 0x0, x1, 0, x2)

aes64ks1i_02_inst_81:
    // Test 81:  Test with dataset: sbox64
    // result rd:x20(0xd1d1d1d3d1d1d1d3), rs1:x12(0x5151515151515151), imm:0x1
    TEST_IMM_OP(aes64ks1i, x20, x12, 0xd1d1d1d3d1d1d1d3, 0x5151515151515151, 0x1, x1, 8, x2)

aes64ks1i_02_inst_82:
    // Test 82:  Test with dataset: sbox64
    // result rd:x21(0x0000000400000004), rs1:x11(0x5252525252525252), imm:0x2
    TEST_IMM_OP(aes64ks1i, x21, x11, 0x0000000400000004, 0x5252525252525252, 0x2, x1, 16, x2)

aes64ks1i_02_inst_83:
    // Test 83:  Test with dataset: sbox64
    // result rd:x22(0xededede5ededede5), rs1:x10(0x5353535353535353), imm:0x3
    TEST_IMM_OP(aes64ks1i, x22, x10, 0xededede5ededede5, 0x5353535353535353, 0x3, x1, 24, x2)

aes64ks1i_02_inst_84:
    // Test 84:  Test with dataset: sbox64
    // result rd:x23(0x2020203020202030), rs1:x9(0x5454545454545454), imm:0x4
    TEST_IMM_OP(aes64ks1i, x23, x9, 0x2020203020202030, 0x5454545454545454, 0x4, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_18_0)


aes64ks1i_02_inst_85:
    // Test 85:  Test with dataset: sbox64
    // result rd:x24(0xfcfcfcdcfcfcfcdc), rs1:x8(0x5555555555555555), imm:0x5
    TEST_IMM_OP(aes64ks1i, x24, x8, 0xfcfcfcdcfcfcfcdc, 0x5555555555555555, 0x5, x1, 0, x2)

aes64ks1i_02_inst_86:
    // Test 86:  Test with dataset: sbox64
    // result rd:x25(0xb1b1b1f1b1b1b1f1), rs1:x7(0x5656565656565656), imm:0x6
    TEST_IMM_OP(aes64ks1i, x25, x7, 0xb1b1b1f1b1b1b1f1, 0x5656565656565656, 0x6, x1, 8, x2)

aes64ks1i_02_inst_87:
    // Test 87:  Test with dataset: sbox64
    // result rd:x26(0x5b5b5bdb5b5b5bdb), rs1:x6(0x5757575757575757), imm:0x7
    TEST_IMM_OP(aes64ks1i, x26, x6, 0x5b5b5bdb5b5b5bdb, 0x5757575757575757, 0x7, x1, 16, x2)

aes64ks1i_02_inst_88:
    // Test 88:  Test with dataset: sbox64
    // result rd:x27(0x6a6a6a716a6a6a71), rs1:x5(0x5858585858585858), imm:0x8
    TEST_IMM_OP(aes64ks1i, x27, x5, 0x6a6a6a716a6a6a71, 0x5858585858585858, 0x8, x1, 24, x2)

aes64ks1i_02_inst_89:
    // Test 89:  Test with dataset: sbox64
    // result rd:x28(0xcbcbcbfdcbcbcbfd), rs1:x4(0x5959595959595959), imm:0x9
    TEST_IMM_OP(aes64ks1i, x28, x4, 0xcbcbcbfdcbcbcbfd, 0x5959595959595959, 0x9, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x4,signature_19_0)


aes64ks1i_02_inst_90:
    // Test 90:  Test with dataset: sbox64
    // result rd:x29(0xbebebebebebebebe), rs1:x3(0x5a5a5a5a5a5a5a5a), imm:0xa
    TEST_IMM_OP(aes64ks1i, x29, x3, 0xbebebebebebebebe, 0x5a5a5a5a5a5a5a5a, 0xa, x4, 0, x5)

aes64ks1i_02_inst_91:
    // Test 91:  Test with dataset: sbox64
    // result rd:x30(0x3939393b3939393b), rs1:x2(0x5b5b5b5b5b5b5b5b), imm:0x1
    TEST_IMM_OP(aes64ks1i, x30, x2, 0x3939393b3939393b, 0x5b5b5b5b5b5b5b5b, 0x1, x4, 8, x5)

aes64ks1i_02_inst_92:
    // Test 92:  Test with dataset: sbox64
    // result rd:x31(0x4a4a4a4e4a4a4a4e), rs1:x1(0x5c5c5c5c5c5c5c5c), imm:0x2
    TEST_IMM_OP(aes64ks1i, x31, x1, 0x4a4a4a4e4a4a4a4e, 0x5c5c5c5c5c5c5c5c, 0x2, x4, 16, x5)

aes64ks1i_02_inst_93:
    // Test 93:  Test with dataset: sbox64
    // result rd:x1(0x4c4c4c444c4c4c44), rs1:x31(0x5d5d5d5d5d5d5d5d), imm:0x3
    TEST_IMM_OP(aes64ks1i, x1, x31, 0x4c4c4c444c4c4c44, 0x5d5d5d5d5d5d5d5d, 0x3, x4, 24, x5)

aes64ks1i_02_inst_94:
    // Test 94:  Test with dataset: sbox64
    // result rd:x2(0x5858584858585848), rs1:x30(0x5e5e5e5e5e5e5e5e), imm:0x4
    TEST_IMM_OP(aes64ks1i, x2, x30, 0x5858584858585848, 0x5e5e5e5e5e5e5e5e, 0x4, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_20_0)


aes64ks1i_02_inst_95:
    // Test 95:  Test with dataset: sbox64
    // result rd:x3(0xcfcfcfefcfcfcfef), rs1:x29(0x5f5f5f5f5f5f5f5f), imm:0x5
    TEST_IMM_OP(aes64ks1i, x3, x29, 0xcfcfcfefcfcfcfef, 0x5f5f5f5f5f5f5f5f, 0x5, x1, 0, x2)

aes64ks1i_02_inst_96:
    // Test 96:  Test with dataset: sbox64
    // result rd:x4(0xd0d0d0d1d0d0d0d1), rs1:x28(0x6060606060606060), imm:0x0
    TEST_IMM_OP(aes64ks1i, x4, x28, 0xd0d0d0d1d0d0d0d1, 0x6060606060606060, 0x0, x1, 8, x2)

aes64ks1i_02_inst_97:
    // Test 97:  Test with dataset: sbox64
    // result rd:x5(0xefefefedefefefed), rs1:x27(0x6161616161616161), imm:0x1
    TEST_IMM_OP(aes64ks1i, x5, x27, 0xefefefedefefefed, 0x6161616161616161, 0x1, x1, 16, x2)

aes64ks1i_02_inst_98:
    // Test 98:  Test with dataset: sbox64
    // result rd:x6(0xaaaaaaaeaaaaaaae), rs1:x26(0x6262626262626262), imm:0x2
    TEST_IMM_OP(aes64ks1i, x6, x26, 0xaaaaaaaeaaaaaaae, 0x6262626262626262, 0x2, x1, 24, x2)

aes64ks1i_02_inst_99:
    // Test 99:  Test with dataset: sbox64
    // result rd:x7(0xfbfbfbf3fbfbfbf3), rs1:x25(0x6363636363636363), imm:0x3
    TEST_IMM_OP(aes64ks1i, x7, x25, 0xfbfbfbf3fbfbfbf3, 0x6363636363636363, 0x3, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_21_0)


aes64ks1i_02_inst_100:
    // Test 100:  Test with dataset: sbox64
    // result rd:x8(0x4343435343434353), rs1:x24(0x6464646464646464), imm:0x4
    TEST_IMM_OP(aes64ks1i, x8, x24, 0x4343435343434353, 0x6464646464646464, 0x4, x1, 0, x2)

aes64ks1i_02_inst_101:
    // Test 101:  Test with dataset: sbox64
    // result rd:x9(0x4d4d4d6d4d4d4d6d), rs1:x23(0x6565656565656565), imm:0x5
    TEST_IMM_OP(aes64ks1i, x9, x23, 0x4d4d4d6d4d4d4d6d, 0x6565656565656565, 0x5, x1, 8, x2)

aes64ks1i_02_inst_102:
    // Test 102:  Test with dataset: sbox64
    // result rd:x10(0x3333337333333373), rs1:x22(0x6666666666666666), imm:0x6
    TEST_IMM_OP(aes64ks1i, x10, x22, 0x3333337333333373, 0x6666666666666666, 0x6, x1, 16, x2)

aes64ks1i_02_inst_103:
    // Test 103:  Test with dataset: sbox64
    // result rd:x11(0x8585850585858505), rs1:x21(0x6767676767676767), imm:0x7
    TEST_IMM_OP(aes64ks1i, x11, x21, 0x8585850585858505, 0x6767676767676767, 0x7, x1, 24, x2)

aes64ks1i_02_inst_104:
    // Test 104:  Test with dataset: sbox64
    // result rd:x12(0x4545455e4545455e), rs1:x20(0x6868686868686868), imm:0x8
    TEST_IMM_OP(aes64ks1i, x12, x20, 0x4545455e4545455e, 0x6868686868686868, 0x8, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x5,signature_22_0)


aes64ks1i_02_inst_105:
    // Test 105:  Test with dataset: sbox64
    // result rd:x13(0xf9f9f9cff9f9f9cf), rs1:x19(0x6969696969696969), imm:0x9
    TEST_IMM_OP(aes64ks1i, x13, x19, 0xf9f9f9cff9f9f9cf, 0x6969696969696969, 0x9, x5, 0, x6)

aes64ks1i_02_inst_106:
    // Test 106:  Test with dataset: sbox64
    // result rd:x14(0x0202020202020202), rs1:x18(0x6a6a6a6a6a6a6a6a), imm:0xa
    TEST_IMM_OP(aes64ks1i, x14, x18, 0x0202020202020202, 0x6a6a6a6a6a6a6a6a, 0xa, x5, 8, x6)

aes64ks1i_02_inst_107:
    // Test 107:  Test with dataset: sbox64
    // result rd:x15(0x7f7f7f7d7f7f7f7d), rs1:x17(0x6b6b6b6b6b6b6b6b), imm:0x1
    TEST_IMM_OP(aes64ks1i, x15, x17, 0x7f7f7f7d7f7f7f7d, 0x6b6b6b6b6b6b6b6b, 0x1, x5, 16, x6)

aes64ks1i_02_inst_108:
    // Test 108:  Test with dataset: sbox64
    // result rd:x16(0x5050505450505054), rs1:x16(0x6c6c6c6c6c6c6c6c), imm:0x2
    TEST_IMM_OP(aes64ks1i, x16, x16, 0x5050505450505054, 0x6c6c6c6c6c6c6c6c, 0x2, x5, 24, x6)

aes64ks1i_02_inst_109:
    // Test 109:  Test with dataset: sbox64
    // result rd:x17(0x3c3c3c343c3c3c34), rs1:x15(0x6d6d6d6d6d6d6d6d), imm:0x3
    TEST_IMM_OP(aes64ks1i, x17, x15, 0x3c3c3c343c3c3c34, 0x6d6d6d6d6d6d6d6d, 0x3, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_23_0)


aes64ks1i_02_inst_110:
    // Test 110:  Test with dataset: sbox64
    // result rd:x18(0x9f9f9f8f9f9f9f8f), rs1:x14(0x6e6e6e6e6e6e6e6e), imm:0x4
    TEST_IMM_OP(aes64ks1i, x18, x14, 0x9f9f9f8f9f9f9f8f, 0x6e6e6e6e6e6e6e6e, 0x4, x1, 0, x2)

aes64ks1i_02_inst_111:
    // Test 111:  Test with dataset: sbox64
    // result rd:x19(0xa8a8a888a8a8a888), rs1:x13(0x6f6f6f6f6f6f6f6f), imm:0x5
    TEST_IMM_OP(aes64ks1i, x19, x13, 0xa8a8a888a8a8a888, 0x6f6f6f6f6f6f6f6f, 0x5, x1, 8, x2)

aes64ks1i_02_inst_112:
    // Test 112:  Test with dataset: sbox64
    // result rd:x20(0x5151515051515150), rs1:x12(0x7070707070707070), imm:0x0
    TEST_IMM_OP(aes64ks1i, x20, x12, 0x5151515051515150, 0x7070707070707070, 0x0, x1, 16, x2)

aes64ks1i_02_inst_113:
    // Test 113:  Test with dataset: sbox64
    // result rd:x21(0xa3a3a3a1a3a3a3a1), rs1:x11(0x7171717171717171), imm:0x1
    TEST_IMM_OP(aes64ks1i, x21, x11, 0xa3a3a3a1a3a3a3a1, 0x7171717171717171, 0x1, x1, 24, x2)

aes64ks1i_02_inst_114:
    // Test 114:  Test with dataset: sbox64
    // result rd:x22(0x4040404440404044), rs1:x10(0x7272727272727272), imm:0x2
    TEST_IMM_OP(aes64ks1i, x22, x10, 0x4040404440404044, 0x7272727272727272, 0x2, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_24_0)


aes64ks1i_02_inst_115:
    // Test 115:  Test with dataset: sbox64
    // result rd:x23(0x8f8f8f878f8f8f87), rs1:x9(0x7373737373737373), imm:0x3
    TEST_IMM_OP(aes64ks1i, x23, x9, 0x8f8f8f878f8f8f87, 0x7373737373737373, 0x3, x1, 0, x2)

aes64ks1i_02_inst_116:
    // Test 116:  Test with dataset: sbox64
    // result rd:x24(0x9292928292929282), rs1:x8(0x7474747474747474), imm:0x4
    TEST_IMM_OP(aes64ks1i, x24, x8, 0x9292928292929282, 0x7474747474747474, 0x4, x1, 8, x2)

aes64ks1i_02_inst_117:
    // Test 117:  Test with dataset: sbox64
    // result rd:x25(0x9d9d9dbd9d9d9dbd), rs1:x7(0x7575757575757575), imm:0x5
    TEST_IMM_OP(aes64ks1i, x25, x7, 0x9d9d9dbd9d9d9dbd, 0x7575757575757575, 0x5, x1, 16, x2)

aes64ks1i_02_inst_118:
    // Test 118:  Test with dataset: sbox64
    // result rd:x26(0x3838387838383878), rs1:x6(0x7676767676767676), imm:0x6
    TEST_IMM_OP(aes64ks1i, x26, x6, 0x3838387838383878, 0x7676767676767676, 0x6, x1, 24, x2)

aes64ks1i_02_inst_119:
    // Test 119:  Test with dataset: sbox64
    // result rd:x27(0xf5f5f575f5f5f575), rs1:x5(0x7777777777777777), imm:0x7
    TEST_IMM_OP(aes64ks1i, x27, x5, 0xf5f5f575f5f5f575, 0x7777777777777777, 0x7, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x5,signature_25_0)


aes64ks1i_02_inst_120:
    // Test 120:  Test with dataset: sbox64
    // result rd:x28(0xbcbcbca7bcbcbca7), rs1:x4(0x7878787878787878), imm:0x8
    TEST_IMM_OP(aes64ks1i, x28, x4, 0xbcbcbca7bcbcbca7, 0x7878787878787878, 0x8, x5, 0, x6)

aes64ks1i_02_inst_121:
    // Test 121:  Test with dataset: sbox64
    // result rd:x29(0xb6b6b680b6b6b680), rs1:x3(0x7979797979797979), imm:0x9
    TEST_IMM_OP(aes64ks1i, x29, x3, 0xb6b6b680b6b6b680, 0x7979797979797979, 0x9, x5, 8, x6)

aes64ks1i_02_inst_122:
    // Test 122:  Test with dataset: sbox64
    // result rd:x30(0xdadadadadadadada), rs1:x2(0x7a7a7a7a7a7a7a7a), imm:0xa
    TEST_IMM_OP(aes64ks1i, x30, x2, 0xdadadadadadadada, 0x7a7a7a7a7a7a7a7a, 0xa, x5, 16, x6)

aes64ks1i_02_inst_123:
    // Test 123:  Test with dataset: sbox64
    // result rd:x31(0x2121212321212123), rs1:x1(0x7b7b7b7b7b7b7b7b), imm:0x1
    TEST_IMM_OP(aes64ks1i, x31, x1, 0x2121212321212123, 0x7b7b7b7b7b7b7b7b, 0x1, x5, 24, x6)

aes64ks1i_02_inst_124:
    // Test 124:  Test with dataset: sbox64
    // result rd:x1(0x1010101410101014), rs1:x31(0x7c7c7c7c7c7c7c7c), imm:0x2
    TEST_IMM_OP(aes64ks1i, x1, x31, 0x1010101410101014, 0x7c7c7c7c7c7c7c7c, 0x2, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_26_0)


aes64ks1i_02_inst_125:
    // Test 125:  Test with dataset: sbox64
    // result rd:x2(0xfffffff7fffffff7), rs1:x30(0x7d7d7d7d7d7d7d7d), imm:0x3
    TEST_IMM_OP(aes64ks1i, x2, x30, 0xfffffff7fffffff7, 0x7d7d7d7d7d7d7d7d, 0x3, x1, 0, x7)

aes64ks1i_02_inst_126:
    // Test 126:  Test with dataset: sbox64
    // result rd:x3(0xf3f3f3e3f3f3f3e3), rs1:x29(0x7e7e7e7e7e7e7e7e), imm:0x4
    TEST_IMM_OP(aes64ks1i, x3, x29, 0xf3f3f3e3f3f3f3e3, 0x7e7e7e7e7e7e7e7e, 0x4, x1, 8, x7)

aes64ks1i_02_inst_127:
    // Test 127:  Test with dataset: sbox64
    // result rd:x4(0xd2d2d2f2d2d2d2f2), rs1:x28(0x7f7f7f7f7f7f7f7f), imm:0x5
    TEST_IMM_OP(aes64ks1i, x4, x28, 0xd2d2d2f2d2d2d2f2, 0x7f7f7f7f7f7f7f7f, 0x5, x1, 16, x7)

aes64ks1i_02_inst_128:
    // Test 128:  Test with dataset: sbox64
    // result rd:x5(0xcdcdcdcccdcdcdcc), rs1:x27(0x8080808080808080), imm:0x0
    TEST_IMM_OP(aes64ks1i, x5, x27, 0xcdcdcdcccdcdcdcc, 0x8080808080808080, 0x0, x1, 24, x7)

aes64ks1i_02_inst_129:
    // Test 129:  Test with dataset: sbox64
    // result rd:x6(0x0c0c0c0e0c0c0c0e), rs1:x26(0x8181818181818181), imm:0x1
    TEST_IMM_OP(aes64ks1i, x6, x26, 0x0c0c0c0e0c0c0c0e, 0x8181818181818181, 0x1, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_27_0)


aes64ks1i_02_inst_130:
    // Test 130:  Test with dataset: sbox64
    // result rd:x7(0x1313131713131317), rs1:x25(0x8282828282828282), imm:0x2
    TEST_IMM_OP(aes64ks1i, x7, x25, 0x1313131713131317, 0x8282828282828282, 0x2, x1, 0, x2)

aes64ks1i_02_inst_131:
    // Test 131:  Test with dataset: sbox64
    // result rd:x8(0xececece4ececece4), rs1:x24(0x8383838383838383), imm:0x3
    TEST_IMM_OP(aes64ks1i, x8, x24, 0xececece4ececece4, 0x8383838383838383, 0x3, x1, 8, x2)

aes64ks1i_02_inst_132:
    // Test 132:  Test with dataset: sbox64
    // result rd:x9(0x5f5f5f4f5f5f5f4f), rs1:x23(0x8484848484848484), imm:0x4
    TEST_IMM_OP(aes64ks1i, x9, x23, 0x5f5f5f4f5f5f5f4f, 0x8484848484848484, 0x4, x1, 16, x2)

aes64ks1i_02_inst_133:
    // Test 133:  Test with dataset: sbox64
    // result rd:x10(0x979797b7979797b7), rs1:x22(0x8585858585858585), imm:0x5
    TEST_IMM_OP(aes64ks1i, x10, x22, 0x979797b7979797b7, 0x8585858585858585, 0x5, x1, 24, x2)

aes64ks1i_02_inst_134:
    // Test 134:  Test with dataset: sbox64
    // result rd:x11(0x4444440444444404), rs1:x21(0x8686868686868686), imm:0x6
    TEST_IMM_OP(aes64ks1i, x11, x21, 0x4444440444444404, 0x8686868686868686, 0x6, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x6,signature_28_0)


aes64ks1i_02_inst_135:
    // Test 135:  Test with dataset: sbox64
    // result rd:x12(0x1717179717171797), rs1:x20(0x8787878787878787), imm:0x7
    TEST_IMM_OP(aes64ks1i, x12, x20, 0x1717179717171797, 0x8787878787878787, 0x7, x6, 0, x7)

aes64ks1i_02_inst_136:
    // Test 136:  Test with dataset: sbox64
    // result rd:x13(0xc4c4c4dfc4c4c4df), rs1:x19(0x8888888888888888), imm:0x8
    TEST_IMM_OP(aes64ks1i, x13, x19, 0xc4c4c4dfc4c4c4df, 0x8888888888888888, 0x8, x6, 8, x7)

aes64ks1i_02_inst_137:
    // Test 137:  Test with dataset: sbox64
    // result rd:x14(0xa7a7a791a7a7a791), rs1:x18(0x8989898989898989), imm:0x9
    TEST_IMM_OP(aes64ks1i, x14, x18, 0xa7a7a791a7a7a791, 0x8989898989898989, 0x9, x6, 16, x7)

aes64ks1i_02_inst_138:
    // Test 138:  Test with dataset: sbox64
    // result rd:x15(0x7e7e7e7e7e7e7e7e), rs1:x17(0x8a8a8a8a8a8a8a8a), imm:0xa
    TEST_IMM_OP(aes64ks1i, x15, x17, 0x7e7e7e7e7e7e7e7e, 0x8a8a8a8a8a8a8a8a, 0xa, x6, 24, x7)

aes64ks1i_02_inst_139:
    // Test 139:  Test with dataset: sbox64
    // result rd:x16(0x3d3d3d3f3d3d3d3f), rs1:x16(0x8b8b8b8b8b8b8b8b), imm:0x1
    TEST_IMM_OP(aes64ks1i, x16, x16, 0x3d3d3d3f3d3d3d3f, 0x8b8b8b8b8b8b8b8b, 0x1, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_29_0)


aes64ks1i_02_inst_140:
    // Test 140:  Test with dataset: sbox64
    // result rd:x17(0x6464646064646460), rs1:x15(0x8c8c8c8c8c8c8c8c), imm:0x2
    TEST_IMM_OP(aes64ks1i, x17, x15, 0x6464646064646460, 0x8c8c8c8c8c8c8c8c, 0x2, x1, 0, x2)

aes64ks1i_02_inst_141:
    // Test 141:  Test with dataset: sbox64
    // result rd:x18(0x5d5d5d555d5d5d55), rs1:x14(0x8d8d8d8d8d8d8d8d), imm:0x3
    TEST_IMM_OP(aes64ks1i, x18, x14, 0x5d5d5d555d5d5d55, 0x8d8d8d8d8d8d8d8d, 0x3, x1, 8, x2)

aes64ks1i_02_inst_142:
    // Test 142:  Test with dataset: sbox64
    // result rd:x19(0x1919190919191909), rs1:x13(0x8e8e8e8e8e8e8e8e), imm:0x4
    TEST_IMM_OP(aes64ks1i, x19, x13, 0x1919190919191909, 0x8e8e8e8e8e8e8e8e, 0x4, x1, 16, x2)

aes64ks1i_02_inst_143:
    // Test 143:  Test with dataset: sbox64
    // result rd:x20(0x7373735373737353), rs1:x12(0x8f8f8f8f8f8f8f8f), imm:0x5
    TEST_IMM_OP(aes64ks1i, x20, x12, 0x7373735373737353, 0x8f8f8f8f8f8f8f8f, 0x5, x1, 24, x2)

aes64ks1i_02_inst_144:
    // Test 144:  Test with dataset: sbox64
    // result rd:x21(0x6060606160606061), rs1:x11(0x9090909090909090), imm:0x0
    TEST_IMM_OP(aes64ks1i, x21, x11, 0x6060606160606061, 0x9090909090909090, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_30_0)


aes64ks1i_02_inst_145:
    // Test 145:  Test with dataset: sbox64
    // result rd:x22(0x8181818381818183), rs1:x10(0x9191919191919191), imm:0x1
    TEST_IMM_OP(aes64ks1i, x22, x10, 0x8181818381818183, 0x9191919191919191, 0x1, x1, 0, x2)

aes64ks1i_02_inst_146:
    // Test 146:  Test with dataset: sbox64
    // result rd:x23(0x4f4f4f4b4f4f4f4b), rs1:x9(0x9292929292929292), imm:0x2
    TEST_IMM_OP(aes64ks1i, x23, x9, 0x4f4f4f4b4f4f4f4b, 0x9292929292929292, 0x2, x1, 8, x2)

aes64ks1i_02_inst_147:
    // Test 147:  Test with dataset: sbox64
    // result rd:x24(0xdcdcdcd4dcdcdcd4), rs1:x8(0x9393939393939393), imm:0x3
    TEST_IMM_OP(aes64ks1i, x24, x8, 0xdcdcdcd4dcdcdcd4, 0x9393939393939393, 0x3, x1, 16, x2)

aes64ks1i_02_inst_148:
    // Test 148:  Test with dataset: sbox64
    // result rd:x25(0x2222223222222232), rs1:x7(0x9494949494949494), imm:0x4
    TEST_IMM_OP(aes64ks1i, x25, x7, 0x2222223222222232, 0x9494949494949494, 0x4, x1, 24, x2)

aes64ks1i_02_inst_149:
    // Test 149:  Test with dataset: sbox64
    // result rd:x26(0x2a2a2a0a2a2a2a0a), rs1:x6(0x9595959595959595), imm:0x5
    TEST_IMM_OP(aes64ks1i, x26, x6, 0x2a2a2a0a2a2a2a0a, 0x9595959595959595, 0x5, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x6,signature_31_0)


aes64ks1i_02_inst_150:
    // Test 150:  Test with dataset: sbox64
    // result rd:x27(0x909090d0909090d0), rs1:x5(0x9696969696969696), imm:0x6
    TEST_IMM_OP(aes64ks1i, x27, x5, 0x909090d0909090d0, 0x9696969696969696, 0x6, x6, 0, x7)

aes64ks1i_02_inst_151:
    // Test 151:  Test with dataset: sbox64
    // result rd:x28(0x8888880888888808), rs1:x4(0x9797979797979797), imm:0x7
    TEST_IMM_OP(aes64ks1i, x28, x4, 0x8888880888888808, 0x9797979797979797, 0x7, x6, 8, x7)

aes64ks1i_02_inst_152:
    // Test 152:  Test with dataset: sbox64
    // result rd:x29(0x4646465d4646465d), rs1:x3(0x9898989898989898), imm:0x8
    TEST_IMM_OP(aes64ks1i, x29, x3, 0x4646465d4646465d, 0x9898989898989898, 0x8, x6, 16, x7)

aes64ks1i_02_inst_153:
    // Test 153:  Test with dataset: sbox64
    // result rd:x30(0xeeeeeed8eeeeeed8), rs1:x2(0x9999999999999999), imm:0x9
    TEST_IMM_OP(aes64ks1i, x30, x2, 0xeeeeeed8eeeeeed8, 0x9999999999999999, 0x9, x6, 24, x7)

aes64ks1i_02_inst_154:
    // Test 154:  Test with dataset: sbox64
    // result rd:x31(0xb8b8b8b8b8b8b8b8), rs1:x1(0x9a9a9a9a9a9a9a9a), imm:0xa
    TEST_IMM_OP(aes64ks1i, x31, x1, 0xb8b8b8b8b8b8b8b8, 0x9a9a9a9a9a9a9a9a, 0xa, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x6,signature_32_0)


aes64ks1i_02_inst_155:
    // Test 155:  Test with dataset: sbox64
    // result rd:x1(0x1414141614141416), rs1:x31(0x9b9b9b9b9b9b9b9b), imm:0x1
    TEST_IMM_OP(aes64ks1i, x1, x31, 0x1414141614141416, 0x9b9b9b9b9b9b9b9b, 0x1, x6, 0, x7)

aes64ks1i_02_inst_156:
    // Test 156:  Test with dataset: sbox64
    // result rd:x2(0xdedededadedededa), rs1:x30(0x9c9c9c9c9c9c9c9c), imm:0x2
    TEST_IMM_OP(aes64ks1i, x2, x30, 0xdedededadedededa, 0x9c9c9c9c9c9c9c9c, 0x2, x6, 8, x7)

aes64ks1i_02_inst_157:
    // Test 157:  Test with dataset: sbox64
    // result rd:x3(0x5e5e5e565e5e5e56), rs1:x29(0x9d9d9d9d9d9d9d9d), imm:0x3
    TEST_IMM_OP(aes64ks1i, x3, x29, 0x5e5e5e565e5e5e56, 0x9d9d9d9d9d9d9d9d, 0x3, x6, 16, x7)

aes64ks1i_02_inst_158:
    // Test 158:  Test with dataset: sbox64
    // result rd:x4(0x0b0b0b1b0b0b0b1b), rs1:x28(0x9e9e9e9e9e9e9e9e), imm:0x4
    TEST_IMM_OP(aes64ks1i, x4, x28, 0x0b0b0b1b0b0b0b1b, 0x9e9e9e9e9e9e9e9e, 0x4, x6, 24, x7)

aes64ks1i_02_inst_159:
    // Test 159:  Test with dataset: sbox64
    // result rd:x5(0xdbdbdbfbdbdbdbfb), rs1:x27(0x9f9f9f9f9f9f9f9f), imm:0x5
    TEST_IMM_OP(aes64ks1i, x5, x27, 0xdbdbdbfbdbdbdbfb, 0x9f9f9f9f9f9f9f9f, 0x5, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_33_0)


aes64ks1i_02_inst_160:
    // Test 160:  Test with dataset: sbox64
    // result rd:x6(0xe0e0e0e1e0e0e0e1), rs1:x26(0xa0a0a0a0a0a0a0a0), imm:0x0
    TEST_IMM_OP(aes64ks1i, x6, x26, 0xe0e0e0e1e0e0e0e1, 0xa0a0a0a0a0a0a0a0, 0x0, x1, 0, x2)

aes64ks1i_02_inst_161:
    // Test 161:  Test with dataset: sbox64
    // result rd:x7(0x3232323032323230), rs1:x25(0xa1a1a1a1a1a1a1a1), imm:0x1
    TEST_IMM_OP(aes64ks1i, x7, x25, 0x3232323032323230, 0xa1a1a1a1a1a1a1a1, 0x1, x1, 8, x2)

aes64ks1i_02_inst_162:
    // Test 162:  Test with dataset: sbox64
    // result rd:x8(0x3a3a3a3e3a3a3a3e), rs1:x24(0xa2a2a2a2a2a2a2a2), imm:0x2
    TEST_IMM_OP(aes64ks1i, x8, x24, 0x3a3a3a3e3a3a3a3e, 0xa2a2a2a2a2a2a2a2, 0x2, x1, 16, x2)

aes64ks1i_02_inst_163:
    // Test 163:  Test with dataset: sbox64
    // result rd:x9(0x0a0a0a020a0a0a02), rs1:x23(0xa3a3a3a3a3a3a3a3), imm:0x3
    TEST_IMM_OP(aes64ks1i, x9, x23, 0x0a0a0a020a0a0a02, 0xa3a3a3a3a3a3a3a3, 0x3, x1, 24, x2)

aes64ks1i_02_inst_164:
    // Test 164:  Test with dataset: sbox64
    // result rd:x10(0x4949495949494959), rs1:x22(0xa4a4a4a4a4a4a4a4), imm:0x4
    TEST_IMM_OP(aes64ks1i, x10, x22, 0x4949495949494959, 0xa4a4a4a4a4a4a4a4, 0x4, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_34_0)


aes64ks1i_02_inst_165:
    // Test 165:  Test with dataset: sbox64
    // result rd:x11(0x0606062606060626), rs1:x21(0xa5a5a5a5a5a5a5a5), imm:0x5
    TEST_IMM_OP(aes64ks1i, x11, x21, 0x0606062606060626, 0xa5a5a5a5a5a5a5a5, 0x5, x1, 0, x7)

aes64ks1i_02_inst_166:
    // Test 166:  Test with dataset: sbox64
    // result rd:x12(0x2424246424242464), rs1:x20(0xa6a6a6a6a6a6a6a6), imm:0x6
    TEST_IMM_OP(aes64ks1i, x12, x20, 0x2424246424242464, 0xa6a6a6a6a6a6a6a6, 0x6, x1, 8, x7)

aes64ks1i_02_inst_167:
    // Test 167:  Test with dataset: sbox64
    // result rd:x13(0x5c5c5cdc5c5c5cdc), rs1:x19(0xa7a7a7a7a7a7a7a7), imm:0x7
    TEST_IMM_OP(aes64ks1i, x13, x19, 0x5c5c5cdc5c5c5cdc, 0xa7a7a7a7a7a7a7a7, 0x7, x1, 16, x7)

aes64ks1i_02_inst_168:
    // Test 168:  Test with dataset: sbox64
    // result rd:x14(0xc2c2c2d9c2c2c2d9), rs1:x18(0xa8a8a8a8a8a8a8a8), imm:0x8
    TEST_IMM_OP(aes64ks1i, x14, x18, 0xc2c2c2d9c2c2c2d9, 0xa8a8a8a8a8a8a8a8, 0x8, x1, 24, x7)

aes64ks1i_02_inst_169:
    // Test 169:  Test with dataset: sbox64
    // result rd:x15(0xd3d3d3e5d3d3d3e5), rs1:x17(0xa9a9a9a9a9a9a9a9), imm:0x9
    TEST_IMM_OP(aes64ks1i, x15, x17, 0xd3d3d3e5d3d3d3e5, 0xa9a9a9a9a9a9a9a9, 0x9, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x2,signature_35_0)


aes64ks1i_02_inst_170:
    // Test 170:  Test with dataset: sbox64
    // result rd:x16(0xacacacacacacacac), rs1:x16(0xaaaaaaaaaaaaaaaa), imm:0xa
    TEST_IMM_OP(aes64ks1i, x16, x16, 0xacacacacacacacac, 0xaaaaaaaaaaaaaaaa, 0xa, x2, 0, x3)

aes64ks1i_02_inst_171:
    // Test 171:  Test with dataset: sbox64
    // result rd:x17(0x6262626062626260), rs1:x15(0xabababababababab), imm:0x1
    TEST_IMM_OP(aes64ks1i, x17, x15, 0x6262626062626260, 0xabababababababab, 0x1, x2, 8, x3)

aes64ks1i_02_inst_172:
    // Test 172:  Test with dataset: sbox64
    // result rd:x18(0x9191919591919195), rs1:x14(0xacacacacacacacac), imm:0x2
    TEST_IMM_OP(aes64ks1i, x18, x14, 0x9191919591919195, 0xacacacacacacacac, 0x2, x2, 16, x3)

aes64ks1i_02_inst_173:
    // Test 173:  Test with dataset: sbox64
    // result rd:x19(0x9595959d9595959d), rs1:x13(0xadadadadadadadad), imm:0x3
    TEST_IMM_OP(aes64ks1i, x19, x13, 0x9595959d9595959d, 0xadadadadadadadad, 0x3, x2, 24, x3)

aes64ks1i_02_inst_174:
    // Test 174:  Test with dataset: sbox64
    // result rd:x20(0xe4e4e4f4e4e4e4f4), rs1:x12(0xaeaeaeaeaeaeaeae), imm:0x4
    TEST_IMM_OP(aes64ks1i, x20, x12, 0xe4e4e4f4e4e4e4f4, 0xaeaeaeaeaeaeaeae, 0x4, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_36_0)


aes64ks1i_02_inst_175:
    // Test 175:  Test with dataset: sbox64
    // result rd:x21(0x7979795979797959), rs1:x11(0xafafafafafafafaf), imm:0x5
    TEST_IMM_OP(aes64ks1i, x21, x11, 0x7979795979797959, 0xafafafafafafafaf, 0x5, x1, 0, x2)

aes64ks1i_02_inst_176:
    // Test 176:  Test with dataset: sbox64
    // result rd:x22(0xe7e7e7e6e7e7e7e6), rs1:x10(0xb0b0b0b0b0b0b0b0), imm:0x0
    TEST_IMM_OP(aes64ks1i, x22, x10, 0xe7e7e7e6e7e7e7e6, 0xb0b0b0b0b0b0b0b0, 0x0, x1, 8, x2)

aes64ks1i_02_inst_177:
    // Test 177:  Test with dataset: sbox64
    // result rd:x23(0xc8c8c8cac8c8c8ca), rs1:x9(0xb1b1b1b1b1b1b1b1), imm:0x1
    TEST_IMM_OP(aes64ks1i, x23, x9, 0xc8c8c8cac8c8c8ca, 0xb1b1b1b1b1b1b1b1, 0x1, x1, 16, x2)

aes64ks1i_02_inst_178:
    // Test 178:  Test with dataset: sbox64
    // result rd:x24(0x3737373337373733), rs1:x8(0xb2b2b2b2b2b2b2b2), imm:0x2
    TEST_IMM_OP(aes64ks1i, x24, x8, 0x3737373337373733, 0xb2b2b2b2b2b2b2b2, 0x2, x1, 24, x2)

aes64ks1i_02_inst_179:
    // Test 179:  Test with dataset: sbox64
    // result rd:x25(0x6d6d6d656d6d6d65), rs1:x7(0xb3b3b3b3b3b3b3b3), imm:0x3
    TEST_IMM_OP(aes64ks1i, x25, x7, 0x6d6d6d656d6d6d65, 0xb3b3b3b3b3b3b3b3, 0x3, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_37_0)


aes64ks1i_02_inst_180:
    // Test 180:  Test with dataset: sbox64
    // result rd:x26(0x8d8d8d9d8d8d8d9d), rs1:x6(0xb4b4b4b4b4b4b4b4), imm:0x4
    TEST_IMM_OP(aes64ks1i, x26, x6, 0x8d8d8d9d8d8d8d9d, 0xb4b4b4b4b4b4b4b4, 0x4, x1, 0, x7)

aes64ks1i_02_inst_181:
    // Test 181:  Test with dataset: sbox64
    // result rd:x27(0xd5d5d5f5d5d5d5f5), rs1:x5(0xb5b5b5b5b5b5b5b5), imm:0x5
    TEST_IMM_OP(aes64ks1i, x27, x5, 0xd5d5d5f5d5d5d5f5, 0xb5b5b5b5b5b5b5b5, 0x5, x1, 8, x7)

aes64ks1i_02_inst_182:
    // Test 182:  Test with dataset: sbox64
    // result rd:x28(0x4e4e4e0e4e4e4e0e), rs1:x4(0xb6b6b6b6b6b6b6b6), imm:0x6
    TEST_IMM_OP(aes64ks1i, x28, x4, 0x4e4e4e0e4e4e4e0e, 0xb6b6b6b6b6b6b6b6, 0x6, x1, 16, x7)

aes64ks1i_02_inst_183:
    // Test 183:  Test with dataset: sbox64
    // result rd:x29(0xa9a9a929a9a9a929), rs1:x3(0xb7b7b7b7b7b7b7b7), imm:0x7
    TEST_IMM_OP(aes64ks1i, x29, x3, 0xa9a9a929a9a9a929, 0xb7b7b7b7b7b7b7b7, 0x7, x1, 24, x7)

aes64ks1i_02_inst_184:
    // Test 184:  Test with dataset: sbox64
    // result rd:x30(0x6c6c6c776c6c6c77), rs1:x2(0xb8b8b8b8b8b8b8b8), imm:0x8
    TEST_IMM_OP(aes64ks1i, x30, x2, 0x6c6c6c776c6c6c77, 0xb8b8b8b8b8b8b8b8, 0x8, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x5,signature_38_0)


aes64ks1i_02_inst_185:
    // Test 185:  Test with dataset: sbox64
    // result rd:x31(0x5656566056565660), rs1:x1(0xb9b9b9b9b9b9b9b9), imm:0x9
    TEST_IMM_OP(aes64ks1i, x31, x1, 0x5656566056565660, 0xb9b9b9b9b9b9b9b9, 0x9, x5, 0, x6)

aes64ks1i_02_inst_186:
    // Test 186:  Test with dataset: sbox64
    // result rd:x1(0xf4f4f4f4f4f4f4f4), rs1:x31(0xbabababababababa), imm:0xa
    TEST_IMM_OP(aes64ks1i, x1, x31, 0xf4f4f4f4f4f4f4f4, 0xbabababababababa, 0xa, x5, 8, x6)

aes64ks1i_02_inst_187:
    // Test 187:  Test with dataset: sbox64
    // result rd:x2(0xeaeaeae8eaeaeae8), rs1:x30(0xbbbbbbbbbbbbbbbb), imm:0x1
    TEST_IMM_OP(aes64ks1i, x2, x30, 0xeaeaeae8eaeaeae8, 0xbbbbbbbbbbbbbbbb, 0x1, x5, 16, x6)

aes64ks1i_02_inst_188:
    // Test 188:  Test with dataset: sbox64
    // result rd:x3(0x6565656165656561), rs1:x29(0xbcbcbcbcbcbcbcbc), imm:0x2
    TEST_IMM_OP(aes64ks1i, x3, x29, 0x6565656165656561, 0xbcbcbcbcbcbcbcbc, 0x2, x5, 24, x6)

aes64ks1i_02_inst_189:
    // Test 189:  Test with dataset: sbox64
    // result rd:x4(0x7a7a7a727a7a7a72), rs1:x28(0xbdbdbdbdbdbdbdbd), imm:0x3
    TEST_IMM_OP(aes64ks1i, x4, x28, 0x7a7a7a727a7a7a72, 0xbdbdbdbdbdbdbdbd, 0x3, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_39_0)


aes64ks1i_02_inst_190:
    // Test 190:  Test with dataset: sbox64
    // result rd:x5(0xaeaeaebeaeaeaebe), rs1:x27(0xbebebebebebebebe), imm:0x4
    TEST_IMM_OP(aes64ks1i, x5, x27, 0xaeaeaebeaeaeaebe, 0xbebebebebebebebe, 0x4, x1, 0, x2)

aes64ks1i_02_inst_191:
    // Test 191:  Test with dataset: sbox64
    // result rd:x6(0x0808082808080828), rs1:x26(0xbfbfbfbfbfbfbfbf), imm:0x5
    TEST_IMM_OP(aes64ks1i, x6, x26, 0x0808082808080828, 0xbfbfbfbfbfbfbfbf, 0x5, x1, 8, x2)

aes64ks1i_02_inst_192:
    // Test 192:  Test with dataset: sbox64
    // result rd:x7(0xbabababbbabababb), rs1:x25(0xc0c0c0c0c0c0c0c0), imm:0x0
    TEST_IMM_OP(aes64ks1i, x7, x25, 0xbabababbbabababb, 0xc0c0c0c0c0c0c0c0, 0x0, x1, 16, x2)

aes64ks1i_02_inst_193:
    // Test 193:  Test with dataset: sbox64
    // result rd:x8(0x7878787a7878787a), rs1:x24(0xc1c1c1c1c1c1c1c1), imm:0x1
    TEST_IMM_OP(aes64ks1i, x8, x24, 0x7878787a7878787a, 0xc1c1c1c1c1c1c1c1, 0x1, x1, 24, x2)

aes64ks1i_02_inst_194:
    // Test 194:  Test with dataset: sbox64
    // result rd:x9(0x2525252125252521), rs1:x23(0xc2c2c2c2c2c2c2c2), imm:0x2
    TEST_IMM_OP(aes64ks1i, x9, x23, 0x2525252125252521, 0xc2c2c2c2c2c2c2c2, 0x2, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_40_0)


aes64ks1i_02_inst_195:
    // Test 195:  Test with dataset: sbox64
    // result rd:x10(0x2e2e2e262e2e2e26), rs1:x22(0xc3c3c3c3c3c3c3c3), imm:0x3
    TEST_IMM_OP(aes64ks1i, x10, x22, 0x2e2e2e262e2e2e26, 0xc3c3c3c3c3c3c3c3, 0x3, x1, 0, x2)

aes64ks1i_02_inst_196:
    // Test 196:  Test with dataset: sbox64
    // result rd:x11(0x1c1c1c0c1c1c1c0c), rs1:x21(0xc4c4c4c4c4c4c4c4), imm:0x4
    TEST_IMM_OP(aes64ks1i, x11, x21, 0x1c1c1c0c1c1c1c0c, 0xc4c4c4c4c4c4c4c4, 0x4, x1, 8, x2)

aes64ks1i_02_inst_197:
    // Test 197:  Test with dataset: sbox64
    // result rd:x12(0xa6a6a686a6a6a686), rs1:x20(0xc5c5c5c5c5c5c5c5), imm:0x5
    TEST_IMM_OP(aes64ks1i, x12, x20, 0xa6a6a686a6a6a686, 0xc5c5c5c5c5c5c5c5, 0x5, x1, 16, x2)

aes64ks1i_02_inst_198:
    // Test 198:  Test with dataset: sbox64
    // result rd:x13(0xb4b4b4f4b4b4b4f4), rs1:x19(0xc6c6c6c6c6c6c6c6), imm:0x6
    TEST_IMM_OP(aes64ks1i, x13, x19, 0xb4b4b4f4b4b4b4f4, 0xc6c6c6c6c6c6c6c6, 0x6, x1, 24, x2)

aes64ks1i_02_inst_199:
    // Test 199:  Test with dataset: sbox64
    // result rd:x14(0xc6c6c646c6c6c646), rs1:x18(0xc7c7c7c7c7c7c7c7), imm:0x7
    TEST_IMM_OP(aes64ks1i, x14, x18, 0xc6c6c646c6c6c646, 0xc7c7c7c7c7c7c7c7, 0x7, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x3,signature_41_0)


aes64ks1i_02_inst_200:
    // Test 200:  Test with dataset: sbox64
    // result rd:x15(0xe8e8e8f3e8e8e8f3), rs1:x17(0xc8c8c8c8c8c8c8c8), imm:0x8
    TEST_IMM_OP(aes64ks1i, x15, x17, 0xe8e8e8f3e8e8e8f3, 0xc8c8c8c8c8c8c8c8, 0x8, x3, 0, x4)

aes64ks1i_02_inst_201:
    // Test 201:  Test with dataset: sbox64
    // result rd:x16(0xddddddebddddddeb), rs1:x16(0xc9c9c9c9c9c9c9c9), imm:0x9
    TEST_IMM_OP(aes64ks1i, x16, x16, 0xddddddebddddddeb, 0xc9c9c9c9c9c9c9c9, 0x9, x3, 8, x4)

aes64ks1i_02_inst_202:
    // Test 202:  Test with dataset: sbox64
    // result rd:x17(0x7474747474747474), rs1:x15(0xcacacacacacacaca), imm:0xa
    TEST_IMM_OP(aes64ks1i, x17, x15, 0x7474747474747474, 0xcacacacacacacaca, 0xa, x3, 16, x4)

aes64ks1i_02_inst_203:
    // Test 203:  Test with dataset: sbox64
    // result rd:x18(0x1f1f1f1d1f1f1f1d), rs1:x14(0xcbcbcbcbcbcbcbcb), imm:0x1
    TEST_IMM_OP(aes64ks1i, x18, x14, 0x1f1f1f1d1f1f1f1d, 0xcbcbcbcbcbcbcbcb, 0x1, x3, 24, x4)

aes64ks1i_02_inst_204:
    // Test 204:  Test with dataset: sbox64
    // result rd:x19(0x4b4b4b4f4b4b4b4f), rs1:x13(0xcccccccccccccccc), imm:0x2
    TEST_IMM_OP(aes64ks1i, x19, x13, 0x4b4b4b4f4b4b4b4f, 0xcccccccccccccccc, 0x2, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_42_0)


aes64ks1i_02_inst_205:
    // Test 205:  Test with dataset: sbox64
    // result rd:x20(0xbdbdbdb5bdbdbdb5), rs1:x12(0xcdcdcdcdcdcdcdcd), imm:0x3
    TEST_IMM_OP(aes64ks1i, x20, x12, 0xbdbdbdb5bdbdbdb5, 0xcdcdcdcdcdcdcdcd, 0x3, x1, 0, x2)

aes64ks1i_02_inst_206:
    // Test 206:  Test with dataset: sbox64
    // result rd:x21(0x8b8b8b9b8b8b8b9b), rs1:x11(0xcececececececece), imm:0x4
    TEST_IMM_OP(aes64ks1i, x21, x11, 0x8b8b8b9b8b8b8b9b, 0xcececececececece, 0x4, x1, 8, x2)

aes64ks1i_02_inst_207:
    // Test 207:  Test with dataset: sbox64
    // result rd:x22(0x8a8a8aaa8a8a8aaa), rs1:x10(0xcfcfcfcfcfcfcfcf), imm:0x5
    TEST_IMM_OP(aes64ks1i, x22, x10, 0x8a8a8aaa8a8a8aaa, 0xcfcfcfcfcfcfcfcf, 0x5, x1, 16, x2)

aes64ks1i_02_inst_208:
    // Test 208:  Test with dataset: sbox64
    // result rd:x23(0x7070707170707071), rs1:x9(0xd0d0d0d0d0d0d0d0), imm:0x0
    TEST_IMM_OP(aes64ks1i, x23, x9, 0x7070707170707071, 0xd0d0d0d0d0d0d0d0, 0x0, x1, 24, x2)

aes64ks1i_02_inst_209:
    // Test 209:  Test with dataset: sbox64
    // result rd:x24(0x3e3e3e3c3e3e3e3c), rs1:x8(0xd1d1d1d1d1d1d1d1), imm:0x1
    TEST_IMM_OP(aes64ks1i, x24, x8, 0x3e3e3e3c3e3e3e3c, 0xd1d1d1d1d1d1d1d1, 0x1, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_43_0)


aes64ks1i_02_inst_210:
    // Test 210:  Test with dataset: sbox64
    // result rd:x25(0xb5b5b5b1b5b5b5b1), rs1:x7(0xd2d2d2d2d2d2d2d2), imm:0x2
    TEST_IMM_OP(aes64ks1i, x25, x7, 0xb5b5b5b1b5b5b5b1, 0xd2d2d2d2d2d2d2d2, 0x2, x1, 0, x2)

aes64ks1i_02_inst_211:
    // Test 211:  Test with dataset: sbox64
    // result rd:x26(0x6666666e6666666e), rs1:x6(0xd3d3d3d3d3d3d3d3), imm:0x3
    TEST_IMM_OP(aes64ks1i, x26, x6, 0x6666666e6666666e, 0xd3d3d3d3d3d3d3d3, 0x3, x1, 8, x2)

aes64ks1i_02_inst_212:
    // Test 212:  Test with dataset: sbox64
    // result rd:x27(0x4848485848484858), rs1:x5(0xd4d4d4d4d4d4d4d4), imm:0x4
    TEST_IMM_OP(aes64ks1i, x27, x5, 0x4848485848484858, 0xd4d4d4d4d4d4d4d4, 0x4, x1, 16, x2)

aes64ks1i_02_inst_213:
    // Test 213:  Test with dataset: sbox64
    // result rd:x28(0x0303032303030323), rs1:x4(0xd5d5d5d5d5d5d5d5), imm:0x5
    TEST_IMM_OP(aes64ks1i, x28, x4, 0x0303032303030323, 0xd5d5d5d5d5d5d5d5, 0x5, x1, 24, x2)

aes64ks1i_02_inst_214:
    // Test 214:  Test with dataset: sbox64
    // result rd:x29(0xf6f6f6b6f6f6f6b6), rs1:x3(0xd6d6d6d6d6d6d6d6), imm:0x6
    TEST_IMM_OP(aes64ks1i, x29, x3, 0xf6f6f6b6f6f6f6b6, 0xd6d6d6d6d6d6d6d6, 0x6, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x4,signature_44_0)


aes64ks1i_02_inst_215:
    // Test 215:  Test with dataset: sbox64
    // result rd:x30(0x0e0e0e8e0e0e0e8e), rs1:x2(0xd7d7d7d7d7d7d7d7), imm:0x7
    TEST_IMM_OP(aes64ks1i, x30, x2, 0x0e0e0e8e0e0e0e8e, 0xd7d7d7d7d7d7d7d7, 0x7, x4, 0, x5)

aes64ks1i_02_inst_216:
    // Test 216:  Test with dataset: sbox64
    // result rd:x31(0x6161617a6161617a), rs1:x1(0xd8d8d8d8d8d8d8d8), imm:0x8
    TEST_IMM_OP(aes64ks1i, x31, x1, 0x6161617a6161617a, 0xd8d8d8d8d8d8d8d8, 0x8, x4, 8, x5)

aes64ks1i_02_inst_217:
    // Test 217:  Test with dataset: sbox64
    // result rd:x1(0x3535350335353503), rs1:x31(0xd9d9d9d9d9d9d9d9), imm:0x9
    TEST_IMM_OP(aes64ks1i, x1, x31, 0x3535350335353503, 0xd9d9d9d9d9d9d9d9, 0x9, x4, 16, x5)

aes64ks1i_02_inst_218:
    // Test 218:  Test with dataset: sbox64
    // result rd:x2(0x5757575757575757), rs1:x30(0xdadadadadadadada), imm:0xa
    TEST_IMM_OP(aes64ks1i, x2, x30, 0x5757575757575757, 0xdadadadadadadada, 0xa, x4, 24, x5)

aes64ks1i_02_inst_219:
    // Test 219:  Test with dataset: sbox64
    // result rd:x3(0xb9b9b9bbb9b9b9bb), rs1:x29(0xdbdbdbdbdbdbdbdb), imm:0x1
    TEST_IMM_OP(aes64ks1i, x3, x29, 0xb9b9b9bbb9b9b9bb, 0xdbdbdbdbdbdbdbdb, 0x1, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_45_0)


aes64ks1i_02_inst_220:
    // Test 220:  Test with dataset: sbox64
    // result rd:x4(0x8686868286868682), rs1:x28(0xdcdcdcdcdcdcdcdc), imm:0x2
    TEST_IMM_OP(aes64ks1i, x4, x28, 0x8686868286868682, 0xdcdcdcdcdcdcdcdc, 0x2, x1, 0, x2)

aes64ks1i_02_inst_221:
    // Test 221:  Test with dataset: sbox64
    // result rd:x5(0xc1c1c1c9c1c1c1c9), rs1:x27(0xdddddddddddddddd), imm:0x3
    TEST_IMM_OP(aes64ks1i, x5, x27, 0xc1c1c1c9c1c1c1c9, 0xdddddddddddddddd, 0x3, x1, 8, x2)

aes64ks1i_02_inst_222:
    // Test 222:  Test with dataset: sbox64
    // result rd:x6(0x1d1d1d0d1d1d1d0d), rs1:x26(0xdededededededede), imm:0x4
    TEST_IMM_OP(aes64ks1i, x6, x26, 0x1d1d1d0d1d1d1d0d, 0xdededededededede, 0x4, x1, 16, x2)

aes64ks1i_02_inst_223:
    // Test 223:  Test with dataset: sbox64
    // result rd:x7(0x9e9e9ebe9e9e9ebe), rs1:x25(0xdfdfdfdfdfdfdfdf), imm:0x5
    TEST_IMM_OP(aes64ks1i, x7, x25, 0x9e9e9ebe9e9e9ebe, 0xdfdfdfdfdfdfdfdf, 0x5, x1, 24, x2)

aes64ks1i_02_inst_224:
    // Test 224:  Test with dataset: sbox64
    // result rd:x8(0xe1e1e1e0e1e1e1e0), rs1:x24(0xe0e0e0e0e0e0e0e0), imm:0x0
    TEST_IMM_OP(aes64ks1i, x8, x24, 0xe1e1e1e0e1e1e1e0, 0xe0e0e0e0e0e0e0e0, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_46_0)


aes64ks1i_02_inst_225:
    // Test 225:  Test with dataset: sbox64
    // result rd:x9(0xf8f8f8faf8f8f8fa), rs1:x23(0xe1e1e1e1e1e1e1e1), imm:0x1
    TEST_IMM_OP(aes64ks1i, x9, x23, 0xf8f8f8faf8f8f8fa, 0xe1e1e1e1e1e1e1e1, 0x1, x1, 0, x2)

aes64ks1i_02_inst_226:
    // Test 226:  Test with dataset: sbox64
    // result rd:x10(0x9898989c9898989c), rs1:x22(0xe2e2e2e2e2e2e2e2), imm:0x2
    TEST_IMM_OP(aes64ks1i, x10, x22, 0x9898989c9898989c, 0xe2e2e2e2e2e2e2e2, 0x2, x1, 8, x2)

aes64ks1i_02_inst_227:
    // Test 227:  Test with dataset: sbox64
    // result rd:x11(0x1111111911111119), rs1:x21(0xe3e3e3e3e3e3e3e3), imm:0x3
    TEST_IMM_OP(aes64ks1i, x11, x21, 0x1111111911111119, 0xe3e3e3e3e3e3e3e3, 0x3, x1, 16, x2)

aes64ks1i_02_inst_228:
    // Test 228:  Test with dataset: sbox64
    // result rd:x12(0x6969697969696979), rs1:x20(0xe4e4e4e4e4e4e4e4), imm:0x4
    TEST_IMM_OP(aes64ks1i, x12, x20, 0x6969697969696979, 0xe4e4e4e4e4e4e4e4, 0x4, x1, 24, x2)

aes64ks1i_02_inst_229:
    // Test 229:  Test with dataset: sbox64
    // result rd:x13(0xd9d9d9f9d9d9d9f9), rs1:x19(0xe5e5e5e5e5e5e5e5), imm:0x5
    TEST_IMM_OP(aes64ks1i, x13, x19, 0xd9d9d9f9d9d9d9f9, 0xe5e5e5e5e5e5e5e5, 0x5, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x4,signature_47_0)


aes64ks1i_02_inst_230:
    // Test 230:  Test with dataset: sbox64
    // result rd:x14(0x8e8e8ece8e8e8ece), rs1:x18(0xe6e6e6e6e6e6e6e6), imm:0x6
    TEST_IMM_OP(aes64ks1i, x14, x18, 0x8e8e8ece8e8e8ece, 0xe6e6e6e6e6e6e6e6, 0x6, x4, 0, x5)

aes64ks1i_02_inst_231:
    // Test 231:  Test with dataset: sbox64
    // result rd:x15(0x9494941494949414), rs1:x17(0xe7e7e7e7e7e7e7e7), imm:0x7
    TEST_IMM_OP(aes64ks1i, x15, x17, 0x9494941494949414, 0xe7e7e7e7e7e7e7e7, 0x7, x4, 8, x5)

aes64ks1i_02_inst_232:
    // Test 232:  Test with dataset: sbox64
    // result rd:x16(0x9b9b9b809b9b9b80), rs1:x16(0xe8e8e8e8e8e8e8e8), imm:0x8
    TEST_IMM_OP(aes64ks1i, x16, x16, 0x9b9b9b809b9b9b80, 0xe8e8e8e8e8e8e8e8, 0x8, x4, 16, x5)

aes64ks1i_02_inst_233:
    // Test 233:  Test with dataset: sbox64
    // result rd:x17(0x1e1e1e281e1e1e28), rs1:x15(0xe9e9e9e9e9e9e9e9), imm:0x9
    TEST_IMM_OP(aes64ks1i, x17, x15, 0x1e1e1e281e1e1e28, 0xe9e9e9e9e9e9e9e9, 0x9, x4, 24, x5)

aes64ks1i_02_inst_234:
    // Test 234:  Test with dataset: sbox64
    // result rd:x18(0x8787878787878787), rs1:x14(0xeaeaeaeaeaeaeaea), imm:0xa
    TEST_IMM_OP(aes64ks1i, x18, x14, 0x8787878787878787, 0xeaeaeaeaeaeaeaea, 0xa, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_48_0)


aes64ks1i_02_inst_235:
    // Test 235:  Test with dataset: sbox64
    // result rd:x19(0xe9e9e9ebe9e9e9eb), rs1:x13(0xebebebebebebebeb), imm:0x1
    TEST_IMM_OP(aes64ks1i, x19, x13, 0xe9e9e9ebe9e9e9eb, 0xebebebebebebebeb, 0x1, x1, 0, x2)

aes64ks1i_02_inst_236:
    // Test 236:  Test with dataset: sbox64
    // result rd:x20(0xcecececacecececa), rs1:x12(0xecececececececec), imm:0x2
    TEST_IMM_OP(aes64ks1i, x20, x12, 0xcecececacecececa, 0xecececececececec, 0x2, x1, 8, x2)

aes64ks1i_02_inst_237:
    // Test 237:  Test with dataset: sbox64
    // result rd:x21(0x5555555d5555555d), rs1:x11(0xedededededededed), imm:0x3
    TEST_IMM_OP(aes64ks1i, x21, x11, 0x5555555d5555555d, 0xedededededededed, 0x3, x1, 16, x2)

aes64ks1i_02_inst_238:
    // Test 238:  Test with dataset: sbox64
    // result rd:x22(0x2828283828282838), rs1:x10(0xeeeeeeeeeeeeeeee), imm:0x4
    TEST_IMM_OP(aes64ks1i, x22, x10, 0x2828283828282838, 0xeeeeeeeeeeeeeeee, 0x4, x1, 24, x2)

aes64ks1i_02_inst_239:
    // Test 239:  Test with dataset: sbox64
    // result rd:x23(0xdfdfdfffdfdfdfff), rs1:x9(0xefefefefefefefef), imm:0x5
    TEST_IMM_OP(aes64ks1i, x23, x9, 0xdfdfdfffdfdfdfff, 0xefefefefefefefef, 0x5, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_49_0)


aes64ks1i_02_inst_240:
    // Test 240:  Test with dataset: sbox64
    // result rd:x24(0x8c8c8c8d8c8c8c8d), rs1:x8(0xf0f0f0f0f0f0f0f0), imm:0x0
    TEST_IMM_OP(aes64ks1i, x24, x8, 0x8c8c8c8d8c8c8c8d, 0xf0f0f0f0f0f0f0f0, 0x0, x1, 0, x2)

aes64ks1i_02_inst_241:
    // Test 241:  Test with dataset: sbox64
    // result rd:x25(0xa1a1a1a3a1a1a1a3), rs1:x7(0xf1f1f1f1f1f1f1f1), imm:0x1
    TEST_IMM_OP(aes64ks1i, x25, x7, 0xa1a1a1a3a1a1a1a3, 0xf1f1f1f1f1f1f1f1, 0x1, x1, 8, x2)

aes64ks1i_02_inst_242:
    // Test 242:  Test with dataset: sbox64
    // result rd:x26(0x8989898d8989898d), rs1:x6(0xf2f2f2f2f2f2f2f2), imm:0x2
    TEST_IMM_OP(aes64ks1i, x26, x6, 0x8989898d8989898d, 0xf2f2f2f2f2f2f2f2, 0x2, x1, 16, x2)

aes64ks1i_02_inst_243:
    // Test 243:  Test with dataset: sbox64
    // result rd:x27(0x0d0d0d050d0d0d05), rs1:x5(0xf3f3f3f3f3f3f3f3), imm:0x3
    TEST_IMM_OP(aes64ks1i, x27, x5, 0x0d0d0d050d0d0d05, 0xf3f3f3f3f3f3f3f3, 0x3, x1, 24, x2)

aes64ks1i_02_inst_244:
    // Test 244:  Test with dataset: sbox64
    // result rd:x28(0xbfbfbfafbfbfbfaf), rs1:x4(0xf4f4f4f4f4f4f4f4), imm:0x4
    TEST_IMM_OP(aes64ks1i, x28, x4, 0xbfbfbfafbfbfbfaf, 0xf4f4f4f4f4f4f4f4, 0x4, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x4,signature_50_0)


aes64ks1i_02_inst_245:
    // Test 245:  Test with dataset: sbox64
    // result rd:x29(0xe6e6e6c6e6e6e6c6), rs1:x3(0xf5f5f5f5f5f5f5f5), imm:0x5
    TEST_IMM_OP(aes64ks1i, x29, x3, 0xe6e6e6c6e6e6e6c6, 0xf5f5f5f5f5f5f5f5, 0x5, x4, 0, x5)

aes64ks1i_02_inst_246:
    // Test 246:  Test with dataset: sbox64
    // result rd:x30(0x4242420242424202), rs1:x2(0xf6f6f6f6f6f6f6f6), imm:0x6
    TEST_IMM_OP(aes64ks1i, x30, x2, 0x4242420242424202, 0xf6f6f6f6f6f6f6f6, 0x6, x4, 8, x5)

aes64ks1i_02_inst_247:
    // Test 247:  Test with dataset: sbox64
    // result rd:x31(0x686868e8686868e8), rs1:x1(0xf7f7f7f7f7f7f7f7), imm:0x7
    TEST_IMM_OP(aes64ks1i, x31, x1, 0x686868e8686868e8, 0xf7f7f7f7f7f7f7f7, 0x7, x4, 16, x5)

aes64ks1i_02_inst_248:
    // Test 248:  Test with dataset: sbox64
    // result rd:x1(0x4141415a4141415a), rs1:x31(0xf8f8f8f8f8f8f8f8), imm:0x8
    TEST_IMM_OP(aes64ks1i, x1, x31, 0x4141415a4141415a, 0xf8f8f8f8f8f8f8f8, 0x8, x4, 24, x5)

aes64ks1i_02_inst_249:
    // Test 249:  Test with dataset: sbox64
    // result rd:x2(0x999999af999999af), rs1:x30(0xf9f9f9f9f9f9f9f9), imm:0x9
    TEST_IMM_OP(aes64ks1i, x2, x30, 0x999999af999999af, 0xf9f9f9f9f9f9f9f9, 0x9, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_51_0)


aes64ks1i_02_inst_250:
    // Test 250:  Test with dataset: sbox64
    // result rd:x3(0x2d2d2d2d2d2d2d2d), rs1:x29(0xfafafafafafafafa), imm:0xa
    TEST_IMM_OP(aes64ks1i, x3, x29, 0x2d2d2d2d2d2d2d2d, 0xfafafafafafafafa, 0xa, x1, 0, x2)

aes64ks1i_02_inst_251:
    // Test 251:  Test with dataset: sbox64
    // result rd:x4(0x0f0f0f0d0f0f0f0d), rs1:x28(0xfbfbfbfbfbfbfbfb), imm:0x1
    TEST_IMM_OP(aes64ks1i, x4, x28, 0x0f0f0f0d0f0f0f0d, 0xfbfbfbfbfbfbfbfb, 0x1, x1, 8, x2)

aes64ks1i_02_inst_252:
    // Test 252:  Test with dataset: sbox64
    // result rd:x5(0xb0b0b0b4b0b0b0b4), rs1:x27(0xfcfcfcfcfcfcfcfc), imm:0x2
    TEST_IMM_OP(aes64ks1i, x5, x27, 0xb0b0b0b4b0b0b0b4, 0xfcfcfcfcfcfcfcfc, 0x2, x1, 16, x2)

aes64ks1i_02_inst_253:
    // Test 253:  Test with dataset: sbox64
    // result rd:x6(0x5454545c5454545c), rs1:x26(0xfdfdfdfdfdfdfdfd), imm:0x3
    TEST_IMM_OP(aes64ks1i, x6, x26, 0x5454545c5454545c, 0xfdfdfdfdfdfdfdfd, 0x3, x1, 24, x2)

aes64ks1i_02_inst_254:
    // Test 254:  Test with dataset: sbox64
    // result rd:x7(0xbbbbbbabbbbbbbab), rs1:x25(0xfefefefefefefefe), imm:0x4
    TEST_IMM_OP(aes64ks1i, x7, x25, 0xbbbbbbabbbbbbbab, 0xfefefefefefefefe, 0x4, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64ks1i)

	RVTEST_SIGBASE(x1,signature_52_0)


aes64ks1i_02_inst_255:
    // Test 255:  Test with dataset: sbox64
    // result rd:x8(0x1616163616161636), rs1:x24(0xffffffffffffffff), imm:0x5
    TEST_IMM_OP(aes64ks1i, x8, x24, 0x1616163616161636, 0xffffffffffffffff, 0x5, x1, 0, x2)
	
#endif


RVTEST_CODE_END aes64ks1i_02_code_end
RVTEST_CODE_BEGIN aes64esm_02_init aes64esm_02_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x6,signature_1_0)


aes64esm_02_inst_0:
    // Test 0:  Test with dataset: sbox64
    // result rd:x1(0x63fc1689fc168963), rs1:x31(0x0000000000000000), rs2:x16(0xffffffffffffffff)
    TEST_RR_OP(aes64esm, x1, x31, x16, 0x63fc1689fc168963, 0x0, 0xffffffffffffffff, x6, 0, x7)

aes64esm_02_inst_1:
    // Test 1:  Test with dataset: sbox64
    // result rd:x2(0x7c2ebbe92ebbe97c), rs1:x30(0x0101010101010101), rs2:x15(0xfefefefefefefefe)
    TEST_RR_OP(aes64esm, x2, x30, x15, 0x7c2ebbe92ebbe97c, 0x101010101010101, 0xfefefefefefefefe, x6, 8, x7)

aes64esm_02_inst_2:
    // Test 2:  Test with dataset: sbox64
    // result rd:x3(0x7712543112543177), rs1:x29(0x0202020202020202), rs2:x14(0xfdfdfdfdfdfdfdfd)
    TEST_RR_OP(aes64esm, x3, x29, x14, 0x7712543112543177, 0x202020202020202, 0xfdfdfdfdfdfdfdfd, x6, 16, x7)

aes64esm_02_inst_3:
    // Test 3:  Test with dataset: sbox64
    // result rd:x4(0x7b3db0f63db0f67b), rs1:x28(0x0303030303030303), rs2:x13(0xfcfcfcfcfcfcfcfc)
    TEST_RR_OP(aes64esm, x4, x28, x13, 0x7b3db0f63db0f67b, 0x303030303030303, 0xfcfcfcfcfcfcfcfc, x6, 24, x7)

aes64esm_02_inst_4:
    // Test 4:  Test with dataset: sbox64
    // result rd:x5(0xf2ee0f13ee0f13f2), rs1:x27(0x0404040404040404), rs2:x12(0xfbfbfbfbfbfbfbfb)
    TEST_RR_OP(aes64esm, x5, x27, x12, 0xf2ee0f13ee0f13f2, 0x404040404040404, 0xfbfbfbfbfbfbfbfb, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_2_0)


aes64esm_02_inst_5:
    // Test 5:  Test with dataset: sbox64
    // result rd:x6(0x6ba12de7a12de76b), rs1:x26(0x0505050505050505), rs2:x11(0xfafafafafafafafa)
    TEST_RR_OP(aes64esm, x6, x26, x11, 0x6ba12de7a12de76b, 0x505050505050505, 0xfafafafafafafafa, x1, 0, x2)

aes64esm_02_inst_6:
    // Test 6:  Test with dataset: sbox64
    // result rd:x7(0x6f6e99986e99986f), rs1:x25(0x0606060606060606), rs2:x10(0xf9f9f9f9f9f9f9f9)
    TEST_RR_OP(aes64esm, x7, x25, x10, 0x6f6e99986e99986f, 0x606060606060606, 0xf9f9f9f9f9f9f9f9, x1, 8, x2)

aes64esm_02_inst_7:
    // Test 7:  Test with dataset: sbox64
    // result rd:x8(0xc55241d65241d6c5), rs1:x24(0x0707070707070707), rs2:x9(0xf8f8f8f8f8f8f8f8)
    TEST_RR_OP(aes64esm, x8, x24, x9, 0xc55241d65241d6c5, 0x707070707070707, 0xf8f8f8f8f8f8f8f8, x1, 16, x2)

aes64esm_02_inst_8:
    // Test 8:  Test with dataset: sbox64
    // result rd:x9(0x30d86880d8688030), rs1:x23(0x0808080808080808), rs2:x8(0xf7f7f7f7f7f7f7f7)
    TEST_RR_OP(aes64esm, x9, x23, x8, 0x30d86880d8688030, 0x808080808080808, 0xf7f7f7f7f7f7f7f7, x1, 24, x2)

aes64esm_02_inst_9:
    // Test 9:  Test with dataset: sbox64
    // result rd:x10(0x01c44287c4428701), rs1:x22(0x0909090909090909), rs2:x7(0xf6f6f6f6f6f6f6f6)
    TEST_RR_OP(aes64esm, x10, x22, x7, 0x01c44287c4428701, 0x909090909090909, 0xf6f6f6f6f6f6f6f6, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_3_0)


aes64esm_02_inst_10:
    // Test 10:  Test with dataset: sbox64
    // result rd:x11(0x67ffe67effe67e67), rs1:x21(0x0a0a0a0a0a0a0a0a), rs2:x6(0xf5f5f5f5f5f5f5f5)
    TEST_RR_OP(aes64esm, x11, x21, x6, 0x67ffe67effe67e67, 0xa0a0a0a0a0a0a0a, 0xf5f5f5f5f5f5f5f5, x1, 0, x7)

aes64esm_02_inst_11:
    // Test 11:  Test with dataset: sbox64
    // result rd:x12(0x2b8cbf188cbf182b), rs1:x20(0x0b0b0b0b0b0b0b0b), rs2:x5(0xf4f4f4f4f4f4f4f4)
    TEST_RR_OP(aes64esm, x12, x20, x5, 0x2b8cbf188cbf182b, 0xb0b0b0b0b0b0b0b, 0xf4f4f4f4f4f4f4f4, x1, 8, x7)

aes64esm_02_inst_12:
    // Test 12:  Test with dataset: sbox64
    // result rd:x13(0xfef00d03f00d03fe), rs1:x19(0x0c0c0c0c0c0c0c0c), rs2:x4(0xf3f3f3f3f3f3f3f3)
    TEST_RR_OP(aes64esm, x13, x19, x4, 0xfef00d03f00d03fe, 0xc0c0c0c0c0c0c0c, 0xf3f3f3f3f3f3f3f3, x1, 16, x7)

aes64esm_02_inst_13:
    // Test 13:  Test with dataset: sbox64
    // result rd:x14(0xd735896b35896bd7), rs1:x18(0x0d0d0d0d0d0d0d0d), rs2:x3(0xf2f2f2f2f2f2f2f2)
    TEST_RR_OP(aes64esm, x14, x18, x3, 0xd735896b35896bd7, 0xd0d0d0d0d0d0d0d, 0xf2f2f2f2f2f2f2f2, x1, 24, x7)

aes64esm_02_inst_14:
    // Test 14:  Test with dataset: sbox64
    // result rd:x15(0xabb5a1bfb5a1bfab), rs1:x17(0x0e0e0e0e0e0e0e0e), rs2:x2(0xf1f1f1f1f1f1f1f1)
    TEST_RR_OP(aes64esm, x15, x17, x2, 0xabb5a1bfb5a1bfab, 0xe0e0e0e0e0e0e0e, 0xf1f1f1f1f1f1f1f1, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x2,signature_4_0)


aes64esm_02_inst_15:
    // Test 15:  Test with dataset: sbox64
    // result rd:x16(0x76638c99638c9976), rs1:x16(0x0f0f0f0f0f0f0f0f), rs2:x1(0xf0f0f0f0f0f0f0f0)
    TEST_RR_OP(aes64esm, x16, x16, x1, 0x76638c99638c9976, 0xf0f0f0f0f0f0f0f, 0xf0f0f0f0f0f0f0f0, x2, 0, x3)

aes64esm_02_inst_16:
    // Test 16:  Test with dataset: sbox64
    // result rd:x17(0xcaf5dfe0f5dfe0ca), rs1:x15(0x1010101010101010), rs2:x31(0xefefefefefefefef)
    TEST_RR_OP(aes64esm, x17, x15, x31, 0xcaf5dfe0f5dfe0ca, 0x1010101010101010, 0xefefefefefefefef, x2, 8, x3)

aes64esm_02_inst_17:
    // Test 17:  Test with dataset: sbox64
    // result rd:x18(0x826728cd6728cd82), rs1:x14(0x1111111111111111), rs2:x30(0xeeeeeeeeeeeeeeee)
    TEST_RR_OP(aes64esm, x18, x14, x30, 0x826728cd6728cd82, 0x1111111111111111, 0xeeeeeeeeeeeeeeee, x2, 16, x3)

aes64esm_02_inst_18:
    // Test 18:  Test with dataset: sbox64
    // result rd:x19(0xc97655ea7655eac9), rs1:x13(0x1212121212121212), rs2:x29(0xedededededededed)
    TEST_RR_OP(aes64esm, x19, x13, x29, 0xc97655ea7655eac9, 0x1212121212121212, 0xedededededededed, x2, 24, x3)

aes64esm_02_inst_19:
    // Test 19:  Test with dataset: sbox64
    // result rd:x20(0x7db3ce00b3ce007d), rs1:x12(0x1313131313131313), rs2:x28(0xecececececececec)
    TEST_RR_OP(aes64esm, x20, x12, x28, 0x7db3ce00b3ce007d, 0x1313131313131313, 0xecececececececec, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_5_0)


aes64esm_02_inst_20:
    // Test 20:  Test with dataset: sbox64
    // result rd:x21(0xfacfe9dccfe9dcfa), rs1:x11(0x1414141414141414), rs2:x27(0xebebebebebebebeb)
    TEST_RR_OP(aes64esm, x21, x11, x27, 0xfacfe9dccfe9dcfa, 0x1414141414141414, 0xebebebebebebebeb, x1, 0, x2)

aes64esm_02_inst_21:
    // Test 21:  Test with dataset: sbox64
    // result rd:x22(0x592087fe2087fe59), rs1:x10(0x1515151515151515), rs2:x26(0xeaeaeaeaeaeaeaea)
    TEST_RR_OP(aes64esm, x22, x10, x26, 0x592087fe2087fe59, 0x1515151515151515, 0xeaeaeaeaeaeaeaea, x1, 8, x2)

aes64esm_02_inst_22:
    // Test 22:  Test with dataset: sbox64
    // result rd:x23(0x47ac1ef5ac1ef547), rs1:x9(0x1616161616161616), rs2:x25(0xe9e9e9e9e9e9e9e9)
    TEST_RR_OP(aes64esm, x23, x9, x25, 0x47ac1ef5ac1ef547, 0x1616161616161616, 0xe9e9e9e9e9e9e9e9, x1, 16, x2)

aes64esm_02_inst_23:
    // Test 23:  Test with dataset: sbox64
    // result rd:x24(0xf04d9b264d9b26f0), rs1:x8(0x1717171717171717), rs2:x24(0xe8e8e8e8e8e8e8e8)
    TEST_RR_OP(aes64esm, x24, x8, x24, 0xf04d9b264d9b26f0, 0x1717171717171717, 0xe8e8e8e8e8e8e8e8, x1, 24, x2)

aes64esm_02_inst_24:
    // Test 24:  Test with dataset: sbox64
    // result rd:x25(0xade694dfe694dfad), rs1:x7(0x1818181818181818), rs2:x23(0xe7e7e7e7e7e7e7e7)
    TEST_RR_OP(aes64esm, x25, x7, x23, 0xade694dfe694dfad, 0x1818181818181818, 0xe7e7e7e7e7e7e7e7, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_6_0)


aes64esm_02_inst_25:
    // Test 25:  Test with dataset: sbox64
    // result rd:x26(0xd43a8e603a8e60d4), rs1:x6(0x1919191919191919), rs2:x22(0xe6e6e6e6e6e6e6e6)
    TEST_RR_OP(aes64esm, x26, x6, x22, 0xd43a8e603a8e60d4, 0x1919191919191919, 0xe6e6e6e6e6e6e6e6, x1, 0, x7)

aes64esm_02_inst_26:
    // Test 26:  Test with dataset: sbox64
    // result rd:x27(0xa22fd9542fd954a2), rs1:x5(0x1a1a1a1a1a1a1a1a), rs2:x21(0xe5e5e5e5e5e5e5e5)
    TEST_RR_OP(aes64esm, x27, x5, x21, 0xa22fd9542fd954a2, 0x1a1a1a1a1a1a1a1a, 0xe5e5e5e5e5e5e5e5, x1, 8, x7)

aes64esm_02_inst_27:
    // Test 27:  Test with dataset: sbox64
    // result rd:x28(0xaffe6938fe6938af), rs1:x4(0x1b1b1b1b1b1b1b1b), rs2:x20(0xe4e4e4e4e4e4e4e4)
    TEST_RR_OP(aes64esm, x28, x4, x20, 0xaffe6938fe6938af, 0x1b1b1b1b1b1b1b1b, 0xe4e4e4e4e4e4e4e4, x1, 16, x7)

aes64esm_02_inst_28:
    // Test 28:  Test with dataset: sbox64
    // result rd:x29(0x9c10119d10119d9c), rs1:x3(0x1c1c1c1c1c1c1c1c), rs2:x19(0xe3e3e3e3e3e3e3e3)
    TEST_RR_OP(aes64esm, x29, x3, x19, 0x9c10119d10119d9c, 0x1c1c1c1c1c1c1c1c, 0xe3e3e3e3e3e3e3e3, x1, 24, x7)

aes64esm_02_inst_29:
    // Test 29:  Test with dataset: sbox64
    // result rd:x30(0xa4e098dce098dca4), rs1:x2(0x1d1d1d1d1d1d1d1d), rs2:x18(0xe2e2e2e2e2e2e2e2)
    TEST_RR_OP(aes64esm, x30, x2, x18, 0xa4e098dce098dca4, 0x1d1d1d1d1d1d1d1d, 0xe2e2e2e2e2e2e2e2, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x5,signature_7_0)


aes64esm_02_inst_30:
    // Test 30:  Test with dataset: sbox64
    // result rd:x31(0x72f7f87df7f87d72), rs1:x1(0x1e1e1e1e1e1e1e1e), rs2:x17(0xe1e1e1e1e1e1e1e1)
    TEST_RR_OP(aes64esm, x31, x1, x17, 0x72f7f87df7f87d72, 0x1e1e1e1e1e1e1e1e, 0xe1e1e1e1e1e1e1e1, x5, 0, x6)

aes64esm_02_inst_31:
    // Test 31:  Test with dataset: sbox64
    // result rd:x1(0xc0a3e182a3e182c0), rs1:x31(0x1f1f1f1f1f1f1f1f), rs2:x16(0xe0e0e0e0e0e0e0e0)
    TEST_RR_OP(aes64esm, x1, x31, x16, 0xc0a3e182a3e182c0, 0x1f1f1f1f1f1f1f1f, 0xe0e0e0e0e0e0e0e0, x5, 8, x6)

aes64esm_02_inst_32:
    // Test 32:  Test with dataset: sbox64
    // result rd:x2(0xb7cc9ee5cc9ee5b7), rs1:x30(0x2020202020202020), rs2:x15(0xdfdfdfdfdfdfdfdf)
    TEST_RR_OP(aes64esm, x2, x30, x15, 0xb7cc9ee5cc9ee5b7, 0x2020202020202020, 0xdfdfdfdfdfdfdfdf, x5, 16, x6)

aes64esm_02_inst_33:
    // Test 33:  Test with dataset: sbox64
    // result rd:x3(0xfdc61d26c61d26fd), rs1:x29(0x2121212121212121), rs2:x14(0xdededededededede)
    TEST_RR_OP(aes64esm, x3, x29, x14, 0xfdc61d26c61d26fd, 0x2121212121212121, 0xdededededededede, x5, 24, x6)

aes64esm_02_inst_34:
    // Test 34:  Test with dataset: sbox64
    // result rd:x4(0x9365c13765c13793), rs1:x28(0x2222222222222222), rs2:x13(0xdddddddddddddddd)
    TEST_RR_OP(aes64esm, x4, x28, x13, 0x9365c13765c13793, 0x2222222222222222, 0xdddddddddddddddd, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_8_0)


aes64esm_02_inst_35:
    // Test 35:  Test with dataset: sbox64
    // result rd:x5(0x26dd867ddd867d26), rs1:x27(0x2323232323232323), rs2:x12(0xdcdcdcdcdcdcdcdc)
    TEST_RR_OP(aes64esm, x5, x27, x12, 0x26dd867ddd867d26, 0x2323232323232323, 0xdcdcdcdcdcdcdcdc, x1, 0, x2)

aes64esm_02_inst_36:
    // Test 36:  Test with dataset: sbox64
    // result rd:x6(0x36bcb933bcb93336), rs1:x26(0x2424242424242424), rs2:x11(0xdbdbdbdbdbdbdbdb)
    TEST_RR_OP(aes64esm, x6, x26, x11, 0x36bcb933bcb93336, 0x2424242424242424, 0xdbdbdbdbdbdbdbdb, x1, 8, x2)

aes64esm_02_inst_37:
    // Test 37:  Test with dataset: sbox64
    // result rd:x7(0x3f8757ef8757ef3f), rs1:x25(0x2525252525252525), rs2:x10(0xdadadadadadadada)
    TEST_RR_OP(aes64esm, x7, x25, x10, 0x3f8757ef8757ef3f, 0x2525252525252525, 0xdadadadadadadada, x1, 16, x2)

aes64esm_02_inst_38:
    // Test 38:  Test with dataset: sbox64
    // result rd:x8(0xf7aa3568aa3568f7), rs1:x24(0x2626262626262626), rs2:x9(0xd9d9d9d9d9d9d9d9)
    TEST_RR_OP(aes64esm, x8, x24, x9, 0xf7aa3568aa3568f7, 0x2626262626262626, 0xd9d9d9d9d9d9d9d9, x1, 24, x2)

aes64esm_02_inst_39:
    // Test 39:  Test with dataset: sbox64
    // result rd:x9(0xcc20618d20618dcc), rs1:x23(0x2727272727272727), rs2:x8(0xd8d8d8d8d8d8d8d8)
    TEST_RR_OP(aes64esm, x9, x23, x8, 0xcc20618d20618dcc, 0x2727272727272727, 0xd8d8d8d8d8d8d8d8, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_9_0)


aes64esm_02_inst_40:
    // Test 40:  Test with dataset: sbox64
    // result rd:x10(0x347a0e407a0e4034), rs1:x22(0x2828282828282828), rs2:x7(0xd7d7d7d7d7d7d7d7)
    TEST_RR_OP(aes64esm, x10, x22, x7, 0x347a0e407a0e4034, 0x2828282828282828, 0xd7d7d7d7d7d7d7d7, x1, 0, x2)

aes64esm_02_inst_41:
    // Test 41:  Test with dataset: sbox64
    // result rd:x11(0xa550f60350f603a5), rs1:x21(0x2929292929292929), rs2:x6(0xd6d6d6d6d6d6d6d6)
    TEST_RR_OP(aes64esm, x11, x21, x6, 0xa550f60350f603a5, 0x2929292929292929, 0xd6d6d6d6d6d6d6d6, x1, 8, x2)

aes64esm_02_inst_42:
    // Test 42:  Test with dataset: sbox64
    // result rd:x12(0xe5d40332d40332e5), rs1:x20(0x2a2a2a2a2a2a2a2a), rs2:x5(0xd5d5d5d5d5d5d5d5)
    TEST_RR_OP(aes64esm, x12, x20, x5, 0xe5d40332d40332e5, 0x2a2a2a2a2a2a2a2a, 0xd5d5d5d5d5d5d5d5, x1, 16, x2)

aes64esm_02_inst_43:
    // Test 43:  Test with dataset: sbox64
    // result rd:x13(0xf1214898214898f1), rs1:x19(0x2b2b2b2b2b2b2b2b), rs2:x4(0xd4d4d4d4d4d4d4d4)
    TEST_RR_OP(aes64esm, x13, x19, x4, 0xf1214898214898f1, 0x2b2b2b2b2b2b2b2b, 0xd4d4d4d4d4d4d4d4, x1, 24, x2)

aes64esm_02_inst_44:
    // Test 44:  Test with dataset: sbox64
    // result rd:x14(0x7148665f48665f71), rs1:x18(0x2c2c2c2c2c2c2c2c), rs2:x3(0xd3d3d3d3d3d3d3d3)
    TEST_RR_OP(aes64esm, x14, x18, x3, 0x7148665f48665f71, 0x2c2c2c2c2c2c2c2c, 0xd3d3d3d3d3d3d3d3, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x3,signature_10_0)


aes64esm_02_inst_45:
    // Test 45:  Test with dataset: sbox64
    // result rd:x15(0xd86fb5026fb502d8), rs1:x17(0x2d2d2d2d2d2d2d2d), rs2:x2(0xd2d2d2d2d2d2d2d2)
    TEST_RR_OP(aes64esm, x15, x17, x2, 0xd86fb5026fb502d8, 0x2d2d2d2d2d2d2d2d, 0xd2d2d2d2d2d2d2d2, x3, 0, x4)

aes64esm_02_inst_46:
    // Test 46:  Test with dataset: sbox64
    // result rd:x16(0x31203e2f203e2f31), rs1:x16(0x2e2e2e2e2e2e2e2e), rs2:x1(0xd1d1d1d1d1d1d1d1)
    TEST_RR_OP(aes64esm, x16, x16, x1, 0x31203e2f203e2f31, 0x2e2e2e2e2e2e2e2e, 0xd1d1d1d1d1d1d1d1, x3, 8, x4)

aes64esm_02_inst_47:
    // Test 47:  Test with dataset: sbox64
    // result rd:x17(0x15ba70dfba70df15), rs1:x15(0x2f2f2f2f2f2f2f2f), rs2:x31(0xd0d0d0d0d0d0d0d0)
    TEST_RR_OP(aes64esm, x17, x15, x31, 0x15ba70dfba70df15, 0x2f2f2f2f2f2f2f2f, 0xd0d0d0d0d0d0d0d0, x3, 16, x4)

aes64esm_02_inst_48:
    // Test 48:  Test with dataset: sbox64
    // result rd:x18(0x048d8a038d8a0304), rs1:x14(0x3030303030303030), rs2:x30(0xcfcfcfcfcfcfcfcf)
    TEST_RR_OP(aes64esm, x18, x14, x30, 0x048d8a038d8a0304, 0x3030303030303030, 0xcfcfcfcfcfcfcfcf, x3, 24, x4)

aes64esm_02_inst_49:
    // Test 49:  Test with dataset: sbox64
    // result rd:x19(0xc7138b5f138b5fc7), rs1:x13(0x3131313131313131), rs2:x29(0xcececececececece)
    TEST_RR_OP(aes64esm, x19, x13, x29, 0xc7138b5f138b5fc7, 0x3131313131313131, 0xcececececececece, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_11_0)


aes64esm_02_inst_50:
    // Test 50:  Test with dataset: sbox64
    // result rd:x20(0x239abd049abd0423), rs1:x12(0x3232323232323232), rs2:x28(0xcdcdcdcdcdcdcdcd)
    TEST_RR_OP(aes64esm, x20, x12, x28, 0x239abd049abd0423, 0x3232323232323232, 0xcdcdcdcdcdcdcdcd, x1, 0, x2)

aes64esm_02_inst_51:
    // Test 51:  Test with dataset: sbox64
    // result rd:x21(0xc3404bc8404bc8c3), rs1:x11(0x3333333333333333), rs2:x27(0xcccccccccccccccc)
    TEST_RR_OP(aes64esm, x21, x11, x27, 0xc3404bc8404bc8c3, 0x3333333333333333, 0xcccccccccccccccc, x1, 8, x2)

aes64esm_02_inst_52:
    // Test 52:  Test with dataset: sbox64
    // result rd:x22(0x18111f16111f1618), rs1:x10(0x3434343434343434), rs2:x26(0xcbcbcbcbcbcbcbcb)
    TEST_RR_OP(aes64esm, x22, x10, x26, 0x18111f16111f1618, 0x3434343434343434, 0xcbcbcbcbcbcbcbcb, x1, 16, x2)

aes64esm_02_inst_53:
    // Test 53:  Test with dataset: sbox64
    // result rd:x23(0x96ab7449ab744996), rs1:x9(0x3535353535353535), rs2:x25(0xcacacacacacacaca)
    TEST_RR_OP(aes64esm, x23, x9, x25, 0x96ab7449ab744996, 0x3535353535353535, 0xcacacacacacacaca, x1, 24, x2)

aes64esm_02_inst_54:
    // Test 54:  Test with dataset: sbox64
    // result rd:x24(0x0576ddae76ddae05), rs1:x8(0x3636363636363636), rs2:x24(0xc9c9c9c9c9c9c9c9)
    TEST_RR_OP(aes64esm, x24, x8, x24, 0x0576ddae76ddae05, 0x3636363636363636, 0xc9c9c9c9c9c9c9c9, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_12_0)


aes64esm_02_inst_55:
    // Test 55:  Test with dataset: sbox64
    // result rd:x25(0x9a0ce87e0ce87e9a), rs1:x7(0x3737373737373737), rs2:x23(0xc8c8c8c8c8c8c8c8)
    TEST_RR_OP(aes64esm, x25, x7, x23, 0x9a0ce87e0ce87e9a, 0x3737373737373737, 0xc8c8c8c8c8c8c8c8, x1, 0, x2)

aes64esm_02_inst_56:
    // Test 56:  Test with dataset: sbox64
    // result rd:x26(0x075fc69e5fc69e07), rs1:x6(0x3838383838383838), rs2:x22(0xc7c7c7c7c7c7c7c7)
    TEST_RR_OP(aes64esm, x26, x6, x22, 0x075fc69e5fc69e07, 0x3838383838383838, 0xc7c7c7c7c7c7c7c7, x1, 8, x2)

aes64esm_02_inst_57:
    // Test 57:  Test with dataset: sbox64
    // result rd:x27(0x12e3b445e3b44512), rs1:x5(0x3939393939393939), rs2:x21(0xc6c6c6c6c6c6c6c6)
    TEST_RR_OP(aes64esm, x27, x5, x21, 0x12e3b445e3b44512, 0x3939393939393939, 0xc6c6c6c6c6c6c6c6, x1, 16, x2)

aes64esm_02_inst_58:
    // Test 58:  Test with dataset: sbox64
    // result rd:x28(0x80eaa6cceaa6cc80), rs1:x4(0x3a3a3a3a3a3a3a3a), rs2:x20(0xc5c5c5c5c5c5c5c5)
    TEST_RR_OP(aes64esm, x28, x4, x20, 0x80eaa6cceaa6cc80, 0x3a3a3a3a3a3a3a3a, 0xc5c5c5c5c5c5c5c5, x1, 24, x2)

aes64esm_02_inst_59:
    // Test 59:  Test with dataset: sbox64
    // result rd:x29(0xe2fb1c05fb1c05e2), rs1:x3(0x3b3b3b3b3b3b3b3b), rs2:x19(0xc4c4c4c4c4c4c4c4)
    TEST_RR_OP(aes64esm, x29, x3, x19, 0xe2fb1c05fb1c05e2, 0x3b3b3b3b3b3b3b3b, 0xc4c4c4c4c4c4c4c4, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x4,signature_13_0)


aes64esm_02_inst_60:
    // Test 60:  Test with dataset: sbox64
    // result rd:x30(0xebbf2e7abf2e7aeb), rs1:x2(0x3c3c3c3c3c3c3c3c), rs2:x18(0xc3c3c3c3c3c3c3c3)
    TEST_RR_OP(aes64esm, x30, x2, x18, 0xebbf2e7abf2e7aeb, 0x3c3c3c3c3c3c3c3c, 0xc3c3c3c3c3c3c3c3, x4, 0, x5)

aes64esm_02_inst_61:
    // Test 61:  Test with dataset: sbox64
    // result rd:x31(0x2721252321252327), rs1:x1(0x3d3d3d3d3d3d3d3d), rs2:x17(0xc2c2c2c2c2c2c2c2)
    TEST_RR_OP(aes64esm, x31, x1, x17, 0x2721252321252327, 0x3d3d3d3d3d3d3d3d, 0xc2c2c2c2c2c2c2c2, x4, 8, x5)

aes64esm_02_inst_62:
    // Test 62:  Test with dataset: sbox64
    // result rd:x1(0xb2f7783df7783db2), rs1:x31(0x3e3e3e3e3e3e3e3e), rs2:x16(0xc1c1c1c1c1c1c1c1)
    TEST_RR_OP(aes64esm, x1, x31, x16, 0xb2f7783df7783db2, 0x3e3e3e3e3e3e3e3e, 0xc1c1c1c1c1c1c1c1, x4, 16, x5)

aes64esm_02_inst_63:
    // Test 63:  Test with dataset: sbox64
    // result rd:x2(0x753fbaf03fbaf075), rs1:x30(0x3f3f3f3f3f3f3f3f), rs2:x15(0xc0c0c0c0c0c0c0c0)
    TEST_RR_OP(aes64esm, x2, x30, x15, 0x753fbaf03fbaf075, 0x3f3f3f3f3f3f3f3f, 0xc0c0c0c0c0c0c0c0, x4, 24, x5)

aes64esm_02_inst_64:
    // Test 64:  Test with dataset: sbox64
    // result rd:x3(0x090a080b0a080b09), rs1:x29(0x4040404040404040), rs2:x14(0xbfbfbfbfbfbfbfbf)
    TEST_RR_OP(aes64esm, x3, x29, x14, 0x090a080b0a080b09, 0x4040404040404040, 0xbfbfbfbfbfbfbfbf, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_14_0)


aes64esm_02_inst_65:
    // Test 65:  Test with dataset: sbox64
    // result rd:x4(0x83f4aed9f4aed983), rs1:x28(0x4141414141414141), rs2:x13(0xbebebebebebebebe)
    TEST_RR_OP(aes64esm, x4, x28, x13, 0x83f4aed9f4aed983, 0x4141414141414141, 0xbebebebebebebebe, x1, 0, x2)

aes64esm_02_inst_66:
    // Test 66:  Test with dataset: sbox64
    // result rd:x5(0x2cd67a80d67a802c), rs1:x27(0x4242424242424242), rs2:x12(0xbdbdbdbdbdbdbdbd)
    TEST_RR_OP(aes64esm, x5, x27, x12, 0x2cd67a80d67a802c, 0x4242424242424242, 0xbdbdbdbdbdbdbdbd, x1, 8, x2)

aes64esm_02_inst_67:
    // Test 67:  Test with dataset: sbox64
    // result rd:x6(0x1a9b65e49b65e41a), rs1:x26(0x4343434343434343), rs2:x11(0xbcbcbcbcbcbcbcbc)
    TEST_RR_OP(aes64esm, x6, x26, x11, 0x1a9b65e49b65e41a, 0x4343434343434343, 0xbcbcbcbcbcbcbcbc, x1, 16, x2)

aes64esm_02_inst_68:
    // Test 68:  Test with dataset: sbox64
    // result rd:x7(0x1b13eae213eae21b), rs1:x25(0x4444444444444444), rs2:x10(0xbbbbbbbbbbbbbbbb)
    TEST_RR_OP(aes64esm, x7, x25, x10, 0x1b13eae213eae21b, 0x4444444444444444, 0xbbbbbbbbbbbbbbbb, x1, 24, x2)

aes64esm_02_inst_69:
    // Test 69:  Test with dataset: sbox64
    // result rd:x8(0x6edbf441dbf4416e), rs1:x24(0x4545454545454545), rs2:x9(0xbabababababababa)
    TEST_RR_OP(aes64esm, x8, x24, x9, 0x6edbf441dbf4416e, 0x4545454545454545, 0xbabababababababa, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_15_0)


aes64esm_02_inst_70:
    // Test 70:  Test with dataset: sbox64
    // result rd:x9(0x5a4e56424e56425a), rs1:x23(0x4646464646464646), rs2:x8(0xb9b9b9b9b9b9b9b9)
    TEST_RR_OP(aes64esm, x9, x23, x8, 0x5a4e56424e56425a, 0x4646464646464646, 0xb9b9b9b9b9b9b9b9, x1, 0, x2)

aes64esm_02_inst_71:
    // Test 71:  Test with dataset: sbox64
    // result rd:x10(0xa0ef6c23ef6c23a0), rs1:x22(0x4747474747474747), rs2:x7(0xb8b8b8b8b8b8b8b8)
    TEST_RR_OP(aes64esm, x10, x22, x7, 0xa0ef6c23ef6c23a0, 0x4747474747474747, 0xb8b8b8b8b8b8b8b8, x1, 8, x2)

aes64esm_02_inst_72:
    // Test 72:  Test with dataset: sbox64
    // result rd:x11(0x5244a9bf44a9bf52), rs1:x21(0x4848484848484848), rs2:x6(0xb7b7b7b7b7b7b7b7)
    TEST_RR_OP(aes64esm, x11, x21, x6, 0x5244a9bf44a9bf52, 0x4848484848484848, 0xb7b7b7b7b7b7b7b7, x1, 16, x2)

aes64esm_02_inst_73:
    // Test 73:  Test with dataset: sbox64
    // result rd:x12(0x3ba44ed1a44ed13b), rs1:x20(0x4949494949494949), rs2:x5(0xb6b6b6b6b6b6b6b6)
    TEST_RR_OP(aes64esm, x12, x20, x5, 0x3ba44ed1a44ed13b, 0x4949494949494949, 0xb6b6b6b6b6b6b6b6, x1, 24, x2)

aes64esm_02_inst_74:
    // Test 74:  Test with dataset: sbox64
    // result rd:x13(0xd6d3d5d0d3d5d0d6), rs1:x19(0x4a4a4a4a4a4a4a4a), rs2:x4(0xb5b5b5b5b5b5b5b5)
    TEST_RR_OP(aes64esm, x13, x19, x4, 0xd6d3d5d0d3d5d0d6, 0x4a4a4a4a4a4a4a4a, 0xb5b5b5b5b5b5b5b5, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x4,signature_16_0)


aes64esm_02_inst_75:
    // Test 75:  Test with dataset: sbox64
    // result rd:x14(0xb3f18dcff18dcfb3), rs1:x18(0x4b4b4b4b4b4b4b4b), rs2:x3(0xb4b4b4b4b4b4b4b4)
    TEST_RR_OP(aes64esm, x14, x18, x3, 0xb3f18dcff18dcfb3, 0x4b4b4b4b4b4b4b4b, 0xb4b4b4b4b4b4b4b4, x4, 0, x5)

aes64esm_02_inst_76:
    // Test 76:  Test with dataset: sbox64
    // result rd:x15(0x29e56da1e56da129), rs1:x17(0x4c4c4c4c4c4c4c4c), rs2:x2(0xb3b3b3b3b3b3b3b3)
    TEST_RR_OP(aes64esm, x15, x17, x2, 0x29e56da1e56da129, 0x4c4c4c4c4c4c4c4c, 0xb3b3b3b3b3b3b3b3, x4, 8, x5)

aes64esm_02_inst_77:
    // Test 77:  Test with dataset: sbox64
    // result rd:x16(0xe3843750843750e3), rs1:x16(0x4d4d4d4d4d4d4d4d), rs2:x1(0xb2b2b2b2b2b2b2b2)
    TEST_RR_OP(aes64esm, x16, x16, x1, 0xe3843750843750e3, 0x4d4d4d4d4d4d4d4d, 0xb2b2b2b2b2b2b2b2, x4, 16, x5)

aes64esm_02_inst_78:
    // Test 78:  Test with dataset: sbox64
    // result rd:x17(0x2f1dc8fa1dc8fa2f), rs1:x15(0x4e4e4e4e4e4e4e4e), rs2:x31(0xb1b1b1b1b1b1b1b1)
    TEST_RR_OP(aes64esm, x17, x15, x31, 0x2f1dc8fa1dc8fa2f, 0x4e4e4e4e4e4e4e4e, 0xb1b1b1b1b1b1b1b1, x4, 24, x5)

aes64esm_02_inst_79:
    // Test 79:  Test with dataset: sbox64
    // result rd:x18(0x8421e74221e74284), rs1:x14(0x4f4f4f4f4f4f4f4f), rs2:x30(0xb0b0b0b0b0b0b0b0)
    TEST_RR_OP(aes64esm, x18, x14, x30, 0x8421e74221e74284, 0x4f4f4f4f4f4f4f4f, 0xb0b0b0b0b0b0b0b0, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_17_0)


aes64esm_02_inst_80:
    // Test 80:  Test with dataset: sbox64
    // result rd:x19(0x532d79072d790753), rs1:x13(0x5050505050505050), rs2:x29(0xafafafafafafafaf)
    TEST_RR_OP(aes64esm, x19, x13, x29, 0x532d79072d790753, 0x5050505050505050, 0xafafafafafafafaf, x1, 0, x2)

aes64esm_02_inst_81:
    // Test 81:  Test with dataset: sbox64
    // result rd:x20(0xd18ee4bb8ee4bbd1), rs1:x12(0x5151515151515151), rs2:x28(0xaeaeaeaeaeaeaeae)
    TEST_RR_OP(aes64esm, x20, x12, x28, 0xd18ee4bb8ee4bbd1, 0x5151515151515151, 0xaeaeaeaeaeaeaeae, x1, 8, x2)

aes64esm_02_inst_82:
    // Test 82:  Test with dataset: sbox64
    // result rd:x21(0x00a49531a4953100), rs1:x11(0x5252525252525252), rs2:x27(0xadadadadadadadad)
    TEST_RR_OP(aes64esm, x21, x11, x27, 0x00a49531a4953100, 0x5252525252525252, 0xadadadadadadadad, x1, 16, x2)

aes64esm_02_inst_83:
    // Test 83:  Test with dataset: sbox64
    // result rd:x22(0xed699115699115ed), rs1:x10(0x5353535353535353), rs2:x26(0xacacacacacacacac)
    TEST_RR_OP(aes64esm, x22, x10, x26, 0xed699115699115ed, 0x5353535353535353, 0xacacacacacacacac, x1, 24, x2)

aes64esm_02_inst_84:
    // Test 84:  Test with dataset: sbox64
    // result rd:x23(0x20e662a4e662a420), rs1:x9(0x5454545454545454), rs2:x25(0xabababababababab)
    TEST_RR_OP(aes64esm, x23, x9, x25, 0x20e662a4e662a420, 0x5454545454545454, 0xabababababababab, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_18_0)


aes64esm_02_inst_85:
    // Test 85:  Test with dataset: sbox64
    // result rd:x24(0xfc0cac5c0cac5cfc), rs1:x8(0x5555555555555555), rs2:x24(0xaaaaaaaaaaaaaaaa)
    TEST_RR_OP(aes64esm, x24, x8, x24, 0xfc0cac5c0cac5cfc, 0x5555555555555555, 0xaaaaaaaaaaaaaaaa, x1, 0, x2)

aes64esm_02_inst_86:
    // Test 86:  Test with dataset: sbox64
    // result rd:x25(0xb117d37517d375b1), rs1:x7(0x5656565656565656), rs2:x23(0xa9a9a9a9a9a9a9a9)
    TEST_RR_OP(aes64esm, x25, x7, x23, 0xb117d37517d375b1, 0x5656565656565656, 0xa9a9a9a9a9a9a9a9, x1, 8, x2)

aes64esm_02_inst_87:
    // Test 87:  Test with dataset: sbox64
    // result rd:x26(0x5bebc272ebc2725b), rs1:x6(0x5757575757575757), rs2:x22(0xa8a8a8a8a8a8a8a8)
    TEST_RR_OP(aes64esm, x26, x6, x22, 0x5bebc272ebc2725b, 0x5757575757575757, 0xa8a8a8a8a8a8a8a8, x1, 16, x2)

aes64esm_02_inst_88:
    // Test 88:  Test with dataset: sbox64
    // result rd:x27(0x6a305c06305c066a), rs1:x5(0x5858585858585858), rs2:x21(0xa7a7a7a7a7a7a7a7)
    TEST_RR_OP(aes64esm, x27, x5, x21, 0x6a305c06305c066a, 0x5858585858585858, 0xa7a7a7a7a7a7a7a7, x1, 24, x2)

aes64esm_02_inst_89:
    // Test 89:  Test with dataset: sbox64
    // result rd:x28(0xcbe1240ee1240ecb), rs1:x4(0x5959595959595959), rs2:x20(0xa6a6a6a6a6a6a6a6)
    TEST_RR_OP(aes64esm, x28, x4, x20, 0xcbe1240ee1240ecb, 0x5959595959595959, 0xa6a6a6a6a6a6a6a6, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x4,signature_19_0)


aes64esm_02_inst_90:
    // Test 90:  Test with dataset: sbox64
    // result rd:x29(0xbe6d06d56d06d5be), rs1:x3(0x5a5a5a5a5a5a5a5a), rs2:x19(0xa5a5a5a5a5a5a5a5)
    TEST_RR_OP(aes64esm, x29, x3, x19, 0xbe6d06d56d06d5be, 0x5a5a5a5a5a5a5a5a, 0xa5a5a5a5a5a5a5a5, x4, 0, x5)

aes64esm_02_inst_91:
    // Test 91:  Test with dataset: sbox64
    // result rd:x30(0x39a949d9a949d939), rs1:x2(0x5b5b5b5b5b5b5b5b), rs2:x18(0xa4a4a4a4a4a4a4a4)
    TEST_RR_OP(aes64esm, x30, x2, x18, 0x39a949d9a949d939, 0x5b5b5b5b5b5b5b5b, 0xa4a4a4a4a4a4a4a4, x4, 8, x5)

aes64esm_02_inst_92:
    // Test 92:  Test with dataset: sbox64
    // result rd:x31(0x4a8a0aca8a0aca4a), rs1:x1(0x5c5c5c5c5c5c5c5c), rs2:x17(0xa3a3a3a3a3a3a3a3)
    TEST_RR_OP(aes64esm, x31, x1, x17, 0x4a8a0aca8a0aca4a, 0x5c5c5c5c5c5c5c5c, 0xa3a3a3a3a3a3a3a3, x4, 16, x5)

aes64esm_02_inst_93:
    // Test 93:  Test with dataset: sbox64
    // result rd:x1(0x4cd63aa0d63aa04c), rs1:x31(0x5d5d5d5d5d5d5d5d), rs2:x16(0xa2a2a2a2a2a2a2a2)
    TEST_RR_OP(aes64esm, x1, x31, x16, 0x4cd63aa0d63aa04c, 0x5d5d5d5d5d5d5d5d, 0xa2a2a2a2a2a2a2a2, x4, 24, x5)

aes64esm_02_inst_94:
    // Test 94:  Test with dataset: sbox64
    // result rd:x2(0x58e6328ce6328c58), rs1:x30(0x5e5e5e5e5e5e5e5e), rs2:x15(0xa1a1a1a1a1a1a1a1)
    TEST_RR_OP(aes64esm, x2, x30, x15, 0x58e6328ce6328c58, 0x5e5e5e5e5e5e5e5e, 0xa1a1a1a1a1a1a1a1, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_20_0)


aes64esm_02_inst_95:
    // Test 95:  Test with dataset: sbox64
    // result rd:x3(0xcfbee091bee091cf), rs1:x29(0x5f5f5f5f5f5f5f5f), rs2:x14(0xa0a0a0a0a0a0a0a0)
    TEST_RR_OP(aes64esm, x3, x29, x14, 0xcfbee091bee091cf, 0x5f5f5f5f5f5f5f5f, 0xa0a0a0a0a0a0a0a0, x1, 0, x2)

aes64esm_02_inst_96:
    // Test 96:  Test with dataset: sbox64
    // result rd:x4(0xd0cddbc6cddbc6d0), rs1:x28(0x6060606060606060), rs2:x13(0x9f9f9f9f9f9f9f9f)
    TEST_RR_OP(aes64esm, x4, x28, x13, 0xd0cddbc6cddbc6d0, 0x6060606060606060, 0x9f9f9f9f9f9f9f9f, x1, 8, x2)

aes64esm_02_inst_97:
    // Test 97:  Test with dataset: sbox64
    // result rd:x5(0xefd80b3cd80b3cef), rs1:x27(0x6161616161616161), rs2:x12(0x9e9e9e9e9e9e9e9e)
    TEST_RR_OP(aes64esm, x5, x27, x12, 0xefd80b3cd80b3cef, 0x6161616161616161, 0x9e9e9e9e9e9e9e9e, x1, 16, x2)

aes64esm_02_inst_98:
    // Test 98:  Test with dataset: sbox64
    // result rd:x6(0xaaad5e59ad5e59aa), rs1:x26(0x6262626262626262), rs2:x11(0x9d9d9d9d9d9d9d9d)
    TEST_RR_OP(aes64esm, x6, x26, x11, 0xaaad5e59ad5e59aa, 0x6262626262626262, 0x9d9d9d9d9d9d9d9d, x1, 24, x2)

aes64esm_02_inst_99:
    // Test 99:  Test with dataset: sbox64
    // result rd:x7(0xfb94deb194deb1fb), rs1:x25(0x6363636363636363), rs2:x10(0x9c9c9c9c9c9c9c9c)
    TEST_RR_OP(aes64esm, x7, x25, x10, 0xfb94deb194deb1fb, 0x6363636363636363, 0x9c9c9c9c9c9c9c9c, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_21_0)


aes64esm_02_inst_100:
    // Test 100:  Test with dataset: sbox64
    // result rd:x8(0x43ba14edba14ed43), rs1:x24(0x6464646464646464), rs2:x9(0x9b9b9b9b9b9b9b9b)
    TEST_RR_OP(aes64esm, x8, x24, x9, 0x43ba14edba14ed43, 0x6464646464646464, 0x9b9b9b9b9b9b9b9b, x1, 0, x2)

aes64esm_02_inst_101:
    // Test 101:  Test with dataset: sbox64
    // result rd:x9(0x4d49b8bc49b8bc4d), rs1:x23(0x6565656565656565), rs2:x8(0x9a9a9a9a9a9a9a9a)
    TEST_RR_OP(aes64esm, x9, x23, x8, 0x4d49b8bc49b8bc4d, 0x6565656565656565, 0x9a9a9a9a9a9a9a9a, x1, 8, x2)

aes64esm_02_inst_102:
    // Test 102:  Test with dataset: sbox64
    // result rd:x10(0x334fee924fee9233), rs1:x22(0x6666666666666666), rs2:x7(0x9999999999999999)
    TEST_RR_OP(aes64esm, x10, x22, x7, 0x334fee924fee9233, 0x6666666666666666, 0x9999999999999999, x1, 16, x2)

aes64esm_02_inst_103:
    // Test 103:  Test with dataset: sbox64
    // result rd:x11(0x85db4618db461885), rs1:x21(0x6767676767676767), rs2:x6(0x9898989898989898)
    TEST_RR_OP(aes64esm, x11, x21, x6, 0x85db4618db461885, 0x6767676767676767, 0x9898989898989898, x1, 24, x2)

aes64esm_02_inst_104:
    // Test 104:  Test with dataset: sbox64
    // result rd:x12(0x450988c40988c445), rs1:x20(0x6868686868686868), rs2:x5(0x9797979797979797)
    TEST_RR_OP(aes64esm, x12, x20, x5, 0x450988c40988c445, 0x6868686868686868, 0x9797979797979797, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x5,signature_22_0)


aes64esm_02_inst_105:
    // Test 105:  Test with dataset: sbox64
    // result rd:x13(0xf942902b42902bf9), rs1:x19(0x6969696969696969), rs2:x4(0x9696969696969696)
    TEST_RR_OP(aes64esm, x13, x19, x4, 0xf942902b42902bf9, 0x6969696969696969, 0x9696969696969696, x5, 0, x6)

aes64esm_02_inst_106:
    // Test 106:  Test with dataset: sbox64
    // result rd:x14(0x027a2a527a2a5202), rs1:x18(0x6a6a6a6a6a6a6a6a), rs2:x3(0x9595959595959595)
    TEST_RR_OP(aes64esm, x14, x18, x3, 0x027a2a527a2a5202, 0x6a6a6a6a6a6a6a6a, 0x9595959595959595, x5, 8, x6)

aes64esm_02_inst_107:
    // Test 107:  Test with dataset: sbox64
    // result rd:x15(0x7f9822c59822c57f), rs1:x17(0x6b6b6b6b6b6b6b6b), rs2:x2(0x9494949494949494)
    TEST_RR_OP(aes64esm, x15, x17, x2, 0x7f9822c59822c57f, 0x6b6b6b6b6b6b6b6b, 0x9494949494949494, x5, 16, x6)

aes64esm_02_inst_108:
    // Test 108:  Test with dataset: sbox64
    // result rd:x16(0x50dfdc53dfdc5350), rs1:x16(0x6c6c6c6c6c6c6c6c), rs2:x1(0x9393939393939393)
    TEST_RR_OP(aes64esm, x16, x16, x1, 0x50dfdc53dfdc5350, 0x6c6c6c6c6c6c6c6c, 0x9393939393939393, x5, 24, x6)

aes64esm_02_inst_109:
    // Test 109:  Test with dataset: sbox64
    // result rd:x17(0x3ca94fdaa94fda3c), rs1:x15(0x6d6d6d6d6d6d6d6d), rs2:x31(0x9292929292929292)
    TEST_RR_OP(aes64esm, x17, x15, x31, 0x3ca94fdaa94fda3c, 0x6d6d6d6d6d6d6d6d, 0x9292929292929292, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_23_0)


aes64esm_02_inst_110:
    // Test 110:  Test with dataset: sbox64
    // result rd:x18(0x9fbd81a3bd81a39f), rs1:x14(0x6e6e6e6e6e6e6e6e), rs2:x30(0x9191919191919191)
    TEST_RR_OP(aes64esm, x18, x14, x30, 0x9fbd81a3bd81a39f, 0x6e6e6e6e6e6e6e6e, 0x9191919191919191, x1, 0, x2)

aes64esm_02_inst_111:
    // Test 111:  Test with dataset: sbox64
    // result rd:x19(0xa8eb6023eb6023a8), rs1:x13(0x6f6f6f6f6f6f6f6f), rs2:x29(0x9090909090909090)
    TEST_RR_OP(aes64esm, x19, x13, x29, 0xa8eb6023eb6023a8, 0x6f6f6f6f6f6f6f6f, 0x9090909090909090, x1, 8, x2)

aes64esm_02_inst_112:
    // Test 112:  Test with dataset: sbox64
    // result rd:x20(0x5137731537731551), rs1:x12(0x7070707070707070), rs2:x28(0x8f8f8f8f8f8f8f8f)
    TEST_RR_OP(aes64esm, x20, x12, x28, 0x5137731537731551, 0x7070707070707070, 0x8f8f8f8f8f8f8f8f, x1, 16, x2)

aes64esm_02_inst_113:
    // Test 113:  Test with dataset: sbox64
    // result rd:x21(0xa37619cc7619cca3), rs1:x11(0x7171717171717171), rs2:x27(0x8e8e8e8e8e8e8e8e)
    TEST_RR_OP(aes64esm, x21, x11, x27, 0xa37619cc7619cca3, 0x7171717171717171, 0x8e8e8e8e8e8e8e8e, x1, 24, x2)

aes64esm_02_inst_114:
    // Test 114:  Test with dataset: sbox64
    // result rd:x22(0x40675d7a675d7a40), rs1:x10(0x7272727272727272), rs2:x26(0x8d8d8d8d8d8d8d8d)
    TEST_RR_OP(aes64esm, x22, x10, x26, 0x40675d7a675d7a40, 0x7272727272727272, 0x8d8d8d8d8d8d8d8d, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_24_0)


aes64esm_02_inst_115:
    // Test 115:  Test with dataset: sbox64
    // result rd:x23(0x8fa96442a964428f), rs1:x9(0x7373737373737373), rs2:x25(0x8c8c8c8c8c8c8c8c)
    TEST_RR_OP(aes64esm, x23, x9, x25, 0x8fa96442a964428f, 0x7373737373737373, 0x8c8c8c8c8c8c8c8c, x1, 0, x2)

aes64esm_02_inst_116:
    // Test 116:  Test with dataset: sbox64
    // result rd:x24(0x92783dd7783dd792), rs1:x8(0x7474747474747474), rs2:x24(0x8b8b8b8b8b8b8b8b)
    TEST_RR_OP(aes64esm, x24, x8, x24, 0x92783dd7783dd792, 0x7474747474747474, 0x8b8b8b8b8b8b8b8b, x1, 8, x2)

aes64esm_02_inst_117:
    // Test 117:  Test with dataset: sbox64
    // result rd:x25(0x9da37e40a37e409d), rs1:x7(0x7575757575757575), rs2:x23(0x8a8a8a8a8a8a8a8a)
    TEST_RR_OP(aes64esm, x25, x7, x23, 0x9da37e40a37e409d, 0x7575757575757575, 0x8a8a8a8a8a8a8a8a, x1, 16, x2)

aes64esm_02_inst_118:
    // Test 118:  Test with dataset: sbox64
    // result rd:x26(0x3882a71d82a71d38), rs1:x6(0x7676767676767676), rs2:x22(0x8989898989898989)
    TEST_RR_OP(aes64esm, x26, x6, x22, 0x3882a71d82a71d38, 0x7676767676767676, 0x8989898989898989, x1, 24, x2)

aes64esm_02_inst_119:
    // Test 119:  Test with dataset: sbox64
    // result rd:x27(0xf5a6c497a6c497f5), rs1:x5(0x7777777777777777), rs2:x21(0x8888888888888888)
    TEST_RR_OP(aes64esm, x27, x5, x21, 0xf5a6c497a6c497f5, 0x7777777777777777, 0x8888888888888888, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x5,signature_25_0)


aes64esm_02_inst_120:
    // Test 120:  Test with dataset: sbox64
    // result rd:x28(0xbc5a17f15a17f1bc), rs1:x4(0x7878787878787878), rs2:x20(0x8787878787878787)
    TEST_RR_OP(aes64esm, x28, x4, x20, 0xbc5a17f15a17f1bc, 0x7878787878787878, 0x8787878787878787, x5, 0, x6)

aes64esm_02_inst_121:
    // Test 121:  Test with dataset: sbox64
    // result rd:x29(0xb6bb4449bb4449b6), rs1:x3(0x7979797979797979), rs2:x19(0x8686868686868686)
    TEST_RR_OP(aes64esm, x29, x3, x19, 0xb6bb4449bb4449b6, 0x7979797979797979, 0x8686868686868686, x5, 8, x6)

aes64esm_02_inst_122:
    // Test 122:  Test with dataset: sbox64
    // result rd:x30(0xda0d97400d9740da), rs1:x2(0x7a7a7a7a7a7a7a7a), rs2:x18(0x8585858585858585)
    TEST_RR_OP(aes64esm, x30, x2, x18, 0xda0d97400d9740da, 0x7a7a7a7a7a7a7a7a, 0x8585858585858585, x5, 16, x6)

aes64esm_02_inst_123:
    // Test 123:  Test with dataset: sbox64
    // result rd:x31(0x21a35fdda35fdd21), rs1:x1(0x7b7b7b7b7b7b7b7b), rs2:x17(0x8484848484848484)
    TEST_RR_OP(aes64esm, x31, x1, x17, 0x21a35fdda35fdd21, 0x7b7b7b7b7b7b7b7b, 0x8484848484848484, x5, 24, x6)

aes64esm_02_inst_124:
    // Test 124:  Test with dataset: sbox64
    // result rd:x1(0x100fecf30fecf310), rs1:x31(0x7c7c7c7c7c7c7c7c), rs2:x16(0x8383838383838383)
    TEST_RR_OP(aes64esm, x1, x31, x16, 0x100fecf30fecf310, 0x7c7c7c7c7c7c7c7c, 0x8383838383838383, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_26_0)


aes64esm_02_inst_125:
    // Test 125:  Test with dataset: sbox64
    // result rd:x2(0xffd0133cd0133cff), rs1:x30(0x7d7d7d7d7d7d7d7d), rs2:x15(0x8282828282828282)
    TEST_RR_OP(aes64esm, x2, x30, x15, 0xffd0133cd0133cff, 0x7d7d7d7d7d7d7d7d, 0x8282828282828282, x1, 0, x7)

aes64esm_02_inst_126:
    // Test 126:  Test with dataset: sbox64
    // result rd:x3(0xf3e90c16e90c16f3), rs1:x29(0x7e7e7e7e7e7e7e7e), rs2:x14(0x8181818181818181)
    TEST_RR_OP(aes64esm, x3, x29, x14, 0xf3e90c16e90c16f3, 0x7e7e7e7e7e7e7e7e, 0x8181818181818181, x1, 8, x7)

aes64esm_02_inst_127:
    // Test 127:  Test with dataset: sbox64
    // result rd:x4(0xd2f3cdecf3cdecd2), rs1:x28(0x7f7f7f7f7f7f7f7f), rs2:x13(0x8080808080808080)
    TEST_RR_OP(aes64esm, x4, x28, x13, 0xd2f3cdecf3cdecd2, 0x7f7f7f7f7f7f7f7f, 0x8080808080808080, x1, 16, x7)

aes64esm_02_inst_128:
    // Test 128:  Test with dataset: sbox64
    // result rd:x5(0xcdecd2f3ecd2f3cd), rs1:x27(0x8080808080808080), rs2:x12(0x7f7f7f7f7f7f7f7f)
    TEST_RR_OP(aes64esm, x5, x27, x12, 0xcdecd2f3ecd2f3cd, 0x8080808080808080, 0x7f7f7f7f7f7f7f7f, x1, 24, x7)

aes64esm_02_inst_129:
    // Test 129:  Test with dataset: sbox64
    // result rd:x6(0x0c16f3e916f3e90c), rs1:x26(0x8181818181818181), rs2:x11(0x7e7e7e7e7e7e7e7e)
    TEST_RR_OP(aes64esm, x6, x26, x11, 0x0c16f3e916f3e90c, 0x8181818181818181, 0x7e7e7e7e7e7e7e7e, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_27_0)


aes64esm_02_inst_130:
    // Test 130:  Test with dataset: sbox64
    // result rd:x7(0x133cffd03cffd013), rs1:x25(0x8282828282828282), rs2:x10(0x7d7d7d7d7d7d7d7d)
    TEST_RR_OP(aes64esm, x7, x25, x10, 0x133cffd03cffd013, 0x8282828282828282, 0x7d7d7d7d7d7d7d7d, x1, 0, x2)

aes64esm_02_inst_131:
    // Test 131:  Test with dataset: sbox64
    // result rd:x8(0xecf3100ff3100fec), rs1:x24(0x8383838383838383), rs2:x9(0x7c7c7c7c7c7c7c7c)
    TEST_RR_OP(aes64esm, x8, x24, x9, 0xecf3100ff3100fec, 0x8383838383838383, 0x7c7c7c7c7c7c7c7c, x1, 8, x2)

aes64esm_02_inst_132:
    // Test 132:  Test with dataset: sbox64
    // result rd:x9(0x5fdd21a3dd21a35f), rs1:x23(0x8484848484848484), rs2:x8(0x7b7b7b7b7b7b7b7b)
    TEST_RR_OP(aes64esm, x9, x23, x8, 0x5fdd21a3dd21a35f, 0x8484848484848484, 0x7b7b7b7b7b7b7b7b, x1, 16, x2)

aes64esm_02_inst_133:
    // Test 133:  Test with dataset: sbox64
    // result rd:x10(0x9740da0d40da0d97), rs1:x22(0x8585858585858585), rs2:x7(0x7a7a7a7a7a7a7a7a)
    TEST_RR_OP(aes64esm, x10, x22, x7, 0x9740da0d40da0d97, 0x8585858585858585, 0x7a7a7a7a7a7a7a7a, x1, 24, x2)

aes64esm_02_inst_134:
    // Test 134:  Test with dataset: sbox64
    // result rd:x11(0x4449b6bb49b6bb44), rs1:x21(0x8686868686868686), rs2:x6(0x7979797979797979)
    TEST_RR_OP(aes64esm, x11, x21, x6, 0x4449b6bb49b6bb44, 0x8686868686868686, 0x7979797979797979, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x6,signature_28_0)


aes64esm_02_inst_135:
    // Test 135:  Test with dataset: sbox64
    // result rd:x12(0x17f1bc5af1bc5a17), rs1:x20(0x8787878787878787), rs2:x5(0x7878787878787878)
    TEST_RR_OP(aes64esm, x12, x20, x5, 0x17f1bc5af1bc5a17, 0x8787878787878787, 0x7878787878787878, x6, 0, x7)

aes64esm_02_inst_136:
    // Test 136:  Test with dataset: sbox64
    // result rd:x13(0xc497f5a697f5a6c4), rs1:x19(0x8888888888888888), rs2:x4(0x7777777777777777)
    TEST_RR_OP(aes64esm, x13, x19, x4, 0xc497f5a697f5a6c4, 0x8888888888888888, 0x7777777777777777, x6, 8, x7)

aes64esm_02_inst_137:
    // Test 137:  Test with dataset: sbox64
    // result rd:x14(0xa71d38821d3882a7), rs1:x18(0x8989898989898989), rs2:x3(0x7676767676767676)
    TEST_RR_OP(aes64esm, x14, x18, x3, 0xa71d38821d3882a7, 0x8989898989898989, 0x7676767676767676, x6, 16, x7)

aes64esm_02_inst_138:
    // Test 138:  Test with dataset: sbox64
    // result rd:x15(0x7e409da3409da37e), rs1:x17(0x8a8a8a8a8a8a8a8a), rs2:x2(0x7575757575757575)
    TEST_RR_OP(aes64esm, x15, x17, x2, 0x7e409da3409da37e, 0x8a8a8a8a8a8a8a8a, 0x7575757575757575, x6, 24, x7)

aes64esm_02_inst_139:
    // Test 139:  Test with dataset: sbox64
    // result rd:x16(0x3dd79278d792783d), rs1:x16(0x8b8b8b8b8b8b8b8b), rs2:x1(0x7474747474747474)
    TEST_RR_OP(aes64esm, x16, x16, x1, 0x3dd79278d792783d, 0x8b8b8b8b8b8b8b8b, 0x7474747474747474, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_29_0)


aes64esm_02_inst_140:
    // Test 140:  Test with dataset: sbox64
    // result rd:x17(0x64428fa9428fa964), rs1:x15(0x8c8c8c8c8c8c8c8c), rs2:x31(0x7373737373737373)
    TEST_RR_OP(aes64esm, x17, x15, x31, 0x64428fa9428fa964, 0x8c8c8c8c8c8c8c8c, 0x7373737373737373, x1, 0, x2)

aes64esm_02_inst_141:
    // Test 141:  Test with dataset: sbox64
    // result rd:x18(0x5d7a40677a40675d), rs1:x14(0x8d8d8d8d8d8d8d8d), rs2:x30(0x7272727272727272)
    TEST_RR_OP(aes64esm, x18, x14, x30, 0x5d7a40677a40675d, 0x8d8d8d8d8d8d8d8d, 0x7272727272727272, x1, 8, x2)

aes64esm_02_inst_142:
    // Test 142:  Test with dataset: sbox64
    // result rd:x19(0x19cca376cca37619), rs1:x13(0x8e8e8e8e8e8e8e8e), rs2:x29(0x7171717171717171)
    TEST_RR_OP(aes64esm, x19, x13, x29, 0x19cca376cca37619, 0x8e8e8e8e8e8e8e8e, 0x7171717171717171, x1, 16, x2)

aes64esm_02_inst_143:
    // Test 143:  Test with dataset: sbox64
    // result rd:x20(0x7315513715513773), rs1:x12(0x8f8f8f8f8f8f8f8f), rs2:x28(0x7070707070707070)
    TEST_RR_OP(aes64esm, x20, x12, x28, 0x7315513715513773, 0x8f8f8f8f8f8f8f8f, 0x7070707070707070, x1, 24, x2)

aes64esm_02_inst_144:
    // Test 144:  Test with dataset: sbox64
    // result rd:x21(0x6023a8eb23a8eb60), rs1:x11(0x9090909090909090), rs2:x27(0x6f6f6f6f6f6f6f6f)
    TEST_RR_OP(aes64esm, x21, x11, x27, 0x6023a8eb23a8eb60, 0x9090909090909090, 0x6f6f6f6f6f6f6f6f, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_30_0)


aes64esm_02_inst_145:
    // Test 145:  Test with dataset: sbox64
    // result rd:x22(0x81a39fbda39fbd81), rs1:x10(0x9191919191919191), rs2:x26(0x6e6e6e6e6e6e6e6e)
    TEST_RR_OP(aes64esm, x22, x10, x26, 0x81a39fbda39fbd81, 0x9191919191919191, 0x6e6e6e6e6e6e6e6e, x1, 0, x2)

aes64esm_02_inst_146:
    // Test 146:  Test with dataset: sbox64
    // result rd:x23(0x4fda3ca9da3ca94f), rs1:x9(0x9292929292929292), rs2:x25(0x6d6d6d6d6d6d6d6d)
    TEST_RR_OP(aes64esm, x23, x9, x25, 0x4fda3ca9da3ca94f, 0x9292929292929292, 0x6d6d6d6d6d6d6d6d, x1, 8, x2)

aes64esm_02_inst_147:
    // Test 147:  Test with dataset: sbox64
    // result rd:x24(0xdc5350df5350dfdc), rs1:x8(0x9393939393939393), rs2:x24(0x6c6c6c6c6c6c6c6c)
    TEST_RR_OP(aes64esm, x24, x8, x24, 0xdc5350df5350dfdc, 0x9393939393939393, 0x6c6c6c6c6c6c6c6c, x1, 16, x2)

aes64esm_02_inst_148:
    // Test 148:  Test with dataset: sbox64
    // result rd:x25(0x22c57f98c57f9822), rs1:x7(0x9494949494949494), rs2:x23(0x6b6b6b6b6b6b6b6b)
    TEST_RR_OP(aes64esm, x25, x7, x23, 0x22c57f98c57f9822, 0x9494949494949494, 0x6b6b6b6b6b6b6b6b, x1, 24, x2)

aes64esm_02_inst_149:
    // Test 149:  Test with dataset: sbox64
    // result rd:x26(0x2a52027a52027a2a), rs1:x6(0x9595959595959595), rs2:x22(0x6a6a6a6a6a6a6a6a)
    TEST_RR_OP(aes64esm, x26, x6, x22, 0x2a52027a52027a2a, 0x9595959595959595, 0x6a6a6a6a6a6a6a6a, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x6,signature_31_0)


aes64esm_02_inst_150:
    // Test 150:  Test with dataset: sbox64
    // result rd:x27(0x902bf9422bf94290), rs1:x5(0x9696969696969696), rs2:x21(0x6969696969696969)
    TEST_RR_OP(aes64esm, x27, x5, x21, 0x902bf9422bf94290, 0x9696969696969696, 0x6969696969696969, x6, 0, x7)

aes64esm_02_inst_151:
    // Test 151:  Test with dataset: sbox64
    // result rd:x28(0x88c44509c4450988), rs1:x4(0x9797979797979797), rs2:x20(0x6868686868686868)
    TEST_RR_OP(aes64esm, x28, x4, x20, 0x88c44509c4450988, 0x9797979797979797, 0x6868686868686868, x6, 8, x7)

aes64esm_02_inst_152:
    // Test 152:  Test with dataset: sbox64
    // result rd:x29(0x461885db1885db46), rs1:x3(0x9898989898989898), rs2:x19(0x6767676767676767)
    TEST_RR_OP(aes64esm, x29, x3, x19, 0x461885db1885db46, 0x9898989898989898, 0x6767676767676767, x6, 16, x7)

aes64esm_02_inst_153:
    // Test 153:  Test with dataset: sbox64
    // result rd:x30(0xee92334f92334fee), rs1:x2(0x9999999999999999), rs2:x18(0x6666666666666666)
    TEST_RR_OP(aes64esm, x30, x2, x18, 0xee92334f92334fee, 0x9999999999999999, 0x6666666666666666, x6, 24, x7)

aes64esm_02_inst_154:
    // Test 154:  Test with dataset: sbox64
    // result rd:x31(0xb8bc4d49bc4d49b8), rs1:x1(0x9a9a9a9a9a9a9a9a), rs2:x17(0x6565656565656565)
    TEST_RR_OP(aes64esm, x31, x1, x17, 0xb8bc4d49bc4d49b8, 0x9a9a9a9a9a9a9a9a, 0x6565656565656565, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x6,signature_32_0)


aes64esm_02_inst_155:
    // Test 155:  Test with dataset: sbox64
    // result rd:x1(0x14ed43baed43ba14), rs1:x31(0x9b9b9b9b9b9b9b9b), rs2:x16(0x6464646464646464)
    TEST_RR_OP(aes64esm, x1, x31, x16, 0x14ed43baed43ba14, 0x9b9b9b9b9b9b9b9b, 0x6464646464646464, x6, 0, x7)

aes64esm_02_inst_156:
    // Test 156:  Test with dataset: sbox64
    // result rd:x2(0xdeb1fb94b1fb94de), rs1:x30(0x9c9c9c9c9c9c9c9c), rs2:x15(0x6363636363636363)
    TEST_RR_OP(aes64esm, x2, x30, x15, 0xdeb1fb94b1fb94de, 0x9c9c9c9c9c9c9c9c, 0x6363636363636363, x6, 8, x7)

aes64esm_02_inst_157:
    // Test 157:  Test with dataset: sbox64
    // result rd:x3(0x5e59aaad59aaad5e), rs1:x29(0x9d9d9d9d9d9d9d9d), rs2:x14(0x6262626262626262)
    TEST_RR_OP(aes64esm, x3, x29, x14, 0x5e59aaad59aaad5e, 0x9d9d9d9d9d9d9d9d, 0x6262626262626262, x6, 16, x7)

aes64esm_02_inst_158:
    // Test 158:  Test with dataset: sbox64
    // result rd:x4(0x0b3cefd83cefd80b), rs1:x28(0x9e9e9e9e9e9e9e9e), rs2:x13(0x6161616161616161)
    TEST_RR_OP(aes64esm, x4, x28, x13, 0x0b3cefd83cefd80b, 0x9e9e9e9e9e9e9e9e, 0x6161616161616161, x6, 24, x7)

aes64esm_02_inst_159:
    // Test 159:  Test with dataset: sbox64
    // result rd:x5(0xdbc6d0cdc6d0cddb), rs1:x27(0x9f9f9f9f9f9f9f9f), rs2:x12(0x6060606060606060)
    TEST_RR_OP(aes64esm, x5, x27, x12, 0xdbc6d0cdc6d0cddb, 0x9f9f9f9f9f9f9f9f, 0x6060606060606060, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_33_0)


aes64esm_02_inst_160:
    // Test 160:  Test with dataset: sbox64
    // result rd:x6(0xe091cfbe91cfbee0), rs1:x26(0xa0a0a0a0a0a0a0a0), rs2:x11(0x5f5f5f5f5f5f5f5f)
    TEST_RR_OP(aes64esm, x6, x26, x11, 0xe091cfbe91cfbee0, 0xa0a0a0a0a0a0a0a0, 0x5f5f5f5f5f5f5f5f, x1, 0, x2)

aes64esm_02_inst_161:
    // Test 161:  Test with dataset: sbox64
    // result rd:x7(0x328c58e68c58e632), rs1:x25(0xa1a1a1a1a1a1a1a1), rs2:x10(0x5e5e5e5e5e5e5e5e)
    TEST_RR_OP(aes64esm, x7, x25, x10, 0x328c58e68c58e632, 0xa1a1a1a1a1a1a1a1, 0x5e5e5e5e5e5e5e5e, x1, 8, x2)

aes64esm_02_inst_162:
    // Test 162:  Test with dataset: sbox64
    // result rd:x8(0x3aa04cd6a04cd63a), rs1:x24(0xa2a2a2a2a2a2a2a2), rs2:x9(0x5d5d5d5d5d5d5d5d)
    TEST_RR_OP(aes64esm, x8, x24, x9, 0x3aa04cd6a04cd63a, 0xa2a2a2a2a2a2a2a2, 0x5d5d5d5d5d5d5d5d, x1, 16, x2)

aes64esm_02_inst_163:
    // Test 163:  Test with dataset: sbox64
    // result rd:x9(0x0aca4a8aca4a8a0a), rs1:x23(0xa3a3a3a3a3a3a3a3), rs2:x8(0x5c5c5c5c5c5c5c5c)
    TEST_RR_OP(aes64esm, x9, x23, x8, 0x0aca4a8aca4a8a0a, 0xa3a3a3a3a3a3a3a3, 0x5c5c5c5c5c5c5c5c, x1, 24, x2)

aes64esm_02_inst_164:
    // Test 164:  Test with dataset: sbox64
    // result rd:x10(0x49d939a9d939a949), rs1:x22(0xa4a4a4a4a4a4a4a4), rs2:x7(0x5b5b5b5b5b5b5b5b)
    TEST_RR_OP(aes64esm, x10, x22, x7, 0x49d939a9d939a949, 0xa4a4a4a4a4a4a4a4, 0x5b5b5b5b5b5b5b5b, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_34_0)


aes64esm_02_inst_165:
    // Test 165:  Test with dataset: sbox64
    // result rd:x11(0x06d5be6dd5be6d06), rs1:x21(0xa5a5a5a5a5a5a5a5), rs2:x6(0x5a5a5a5a5a5a5a5a)
    TEST_RR_OP(aes64esm, x11, x21, x6, 0x06d5be6dd5be6d06, 0xa5a5a5a5a5a5a5a5, 0x5a5a5a5a5a5a5a5a, x1, 0, x7)

aes64esm_02_inst_166:
    // Test 166:  Test with dataset: sbox64
    // result rd:x12(0x240ecbe10ecbe124), rs1:x20(0xa6a6a6a6a6a6a6a6), rs2:x5(0x5959595959595959)
    TEST_RR_OP(aes64esm, x12, x20, x5, 0x240ecbe10ecbe124, 0xa6a6a6a6a6a6a6a6, 0x5959595959595959, x1, 8, x7)

aes64esm_02_inst_167:
    // Test 167:  Test with dataset: sbox64
    // result rd:x13(0x5c066a30066a305c), rs1:x19(0xa7a7a7a7a7a7a7a7), rs2:x4(0x5858585858585858)
    TEST_RR_OP(aes64esm, x13, x19, x4, 0x5c066a30066a305c, 0xa7a7a7a7a7a7a7a7, 0x5858585858585858, x1, 16, x7)

aes64esm_02_inst_168:
    // Test 168:  Test with dataset: sbox64
    // result rd:x14(0xc2725beb725bebc2), rs1:x18(0xa8a8a8a8a8a8a8a8), rs2:x3(0x5757575757575757)
    TEST_RR_OP(aes64esm, x14, x18, x3, 0xc2725beb725bebc2, 0xa8a8a8a8a8a8a8a8, 0x5757575757575757, x1, 24, x7)

aes64esm_02_inst_169:
    // Test 169:  Test with dataset: sbox64
    // result rd:x15(0xd375b11775b117d3), rs1:x17(0xa9a9a9a9a9a9a9a9), rs2:x2(0x5656565656565656)
    TEST_RR_OP(aes64esm, x15, x17, x2, 0xd375b11775b117d3, 0xa9a9a9a9a9a9a9a9, 0x5656565656565656, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x2,signature_35_0)


aes64esm_02_inst_170:
    // Test 170:  Test with dataset: sbox64
    // result rd:x16(0xac5cfc0c5cfc0cac), rs1:x16(0xaaaaaaaaaaaaaaaa), rs2:x1(0x5555555555555555)
    TEST_RR_OP(aes64esm, x16, x16, x1, 0xac5cfc0c5cfc0cac, 0xaaaaaaaaaaaaaaaa, 0x5555555555555555, x2, 0, x3)

aes64esm_02_inst_171:
    // Test 171:  Test with dataset: sbox64
    // result rd:x17(0x62a420e6a420e662), rs1:x15(0xabababababababab), rs2:x31(0x5454545454545454)
    TEST_RR_OP(aes64esm, x17, x15, x31, 0x62a420e6a420e662, 0xabababababababab, 0x5454545454545454, x2, 8, x3)

aes64esm_02_inst_172:
    // Test 172:  Test with dataset: sbox64
    // result rd:x18(0x9115ed6915ed6991), rs1:x14(0xacacacacacacacac), rs2:x30(0x5353535353535353)
    TEST_RR_OP(aes64esm, x18, x14, x30, 0x9115ed6915ed6991, 0xacacacacacacacac, 0x5353535353535353, x2, 16, x3)

aes64esm_02_inst_173:
    // Test 173:  Test with dataset: sbox64
    // result rd:x19(0x953100a43100a495), rs1:x13(0xadadadadadadadad), rs2:x29(0x5252525252525252)
    TEST_RR_OP(aes64esm, x19, x13, x29, 0x953100a43100a495, 0xadadadadadadadad, 0x5252525252525252, x2, 24, x3)

aes64esm_02_inst_174:
    // Test 174:  Test with dataset: sbox64
    // result rd:x20(0xe4bbd18ebbd18ee4), rs1:x12(0xaeaeaeaeaeaeaeae), rs2:x28(0x5151515151515151)
    TEST_RR_OP(aes64esm, x20, x12, x28, 0xe4bbd18ebbd18ee4, 0xaeaeaeaeaeaeaeae, 0x5151515151515151, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_36_0)


aes64esm_02_inst_175:
    // Test 175:  Test with dataset: sbox64
    // result rd:x21(0x7907532d07532d79), rs1:x11(0xafafafafafafafaf), rs2:x27(0x5050505050505050)
    TEST_RR_OP(aes64esm, x21, x11, x27, 0x7907532d07532d79, 0xafafafafafafafaf, 0x5050505050505050, x1, 0, x2)

aes64esm_02_inst_176:
    // Test 176:  Test with dataset: sbox64
    // result rd:x22(0xe7428421428421e7), rs1:x10(0xb0b0b0b0b0b0b0b0), rs2:x26(0x4f4f4f4f4f4f4f4f)
    TEST_RR_OP(aes64esm, x22, x10, x26, 0xe7428421428421e7, 0xb0b0b0b0b0b0b0b0, 0x4f4f4f4f4f4f4f4f, x1, 8, x2)

aes64esm_02_inst_177:
    // Test 177:  Test with dataset: sbox64
    // result rd:x23(0xc8fa2f1dfa2f1dc8), rs1:x9(0xb1b1b1b1b1b1b1b1), rs2:x25(0x4e4e4e4e4e4e4e4e)
    TEST_RR_OP(aes64esm, x23, x9, x25, 0xc8fa2f1dfa2f1dc8, 0xb1b1b1b1b1b1b1b1, 0x4e4e4e4e4e4e4e4e, x1, 16, x2)

aes64esm_02_inst_178:
    // Test 178:  Test with dataset: sbox64
    // result rd:x24(0x3750e38450e38437), rs1:x8(0xb2b2b2b2b2b2b2b2), rs2:x24(0x4d4d4d4d4d4d4d4d)
    TEST_RR_OP(aes64esm, x24, x8, x24, 0x3750e38450e38437, 0xb2b2b2b2b2b2b2b2, 0x4d4d4d4d4d4d4d4d, x1, 24, x2)

aes64esm_02_inst_179:
    // Test 179:  Test with dataset: sbox64
    // result rd:x25(0x6da129e5a129e56d), rs1:x7(0xb3b3b3b3b3b3b3b3), rs2:x23(0x4c4c4c4c4c4c4c4c)
    TEST_RR_OP(aes64esm, x25, x7, x23, 0x6da129e5a129e56d, 0xb3b3b3b3b3b3b3b3, 0x4c4c4c4c4c4c4c4c, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_37_0)


aes64esm_02_inst_180:
    // Test 180:  Test with dataset: sbox64
    // result rd:x26(0x8dcfb3f1cfb3f18d), rs1:x6(0xb4b4b4b4b4b4b4b4), rs2:x22(0x4b4b4b4b4b4b4b4b)
    TEST_RR_OP(aes64esm, x26, x6, x22, 0x8dcfb3f1cfb3f18d, 0xb4b4b4b4b4b4b4b4, 0x4b4b4b4b4b4b4b4b, x1, 0, x7)

aes64esm_02_inst_181:
    // Test 181:  Test with dataset: sbox64
    // result rd:x27(0xd5d0d6d3d0d6d3d5), rs1:x5(0xb5b5b5b5b5b5b5b5), rs2:x21(0x4a4a4a4a4a4a4a4a)
    TEST_RR_OP(aes64esm, x27, x5, x21, 0xd5d0d6d3d0d6d3d5, 0xb5b5b5b5b5b5b5b5, 0x4a4a4a4a4a4a4a4a, x1, 8, x7)

aes64esm_02_inst_182:
    // Test 182:  Test with dataset: sbox64
    // result rd:x28(0x4ed13ba4d13ba44e), rs1:x4(0xb6b6b6b6b6b6b6b6), rs2:x20(0x4949494949494949)
    TEST_RR_OP(aes64esm, x28, x4, x20, 0x4ed13ba4d13ba44e, 0xb6b6b6b6b6b6b6b6, 0x4949494949494949, x1, 16, x7)

aes64esm_02_inst_183:
    // Test 183:  Test with dataset: sbox64
    // result rd:x29(0xa9bf5244bf5244a9), rs1:x3(0xb7b7b7b7b7b7b7b7), rs2:x19(0x4848484848484848)
    TEST_RR_OP(aes64esm, x29, x3, x19, 0xa9bf5244bf5244a9, 0xb7b7b7b7b7b7b7b7, 0x4848484848484848, x1, 24, x7)

aes64esm_02_inst_184:
    // Test 184:  Test with dataset: sbox64
    // result rd:x30(0x6c23a0ef23a0ef6c), rs1:x2(0xb8b8b8b8b8b8b8b8), rs2:x18(0x4747474747474747)
    TEST_RR_OP(aes64esm, x30, x2, x18, 0x6c23a0ef23a0ef6c, 0xb8b8b8b8b8b8b8b8, 0x4747474747474747, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x5,signature_38_0)


aes64esm_02_inst_185:
    // Test 185:  Test with dataset: sbox64
    // result rd:x31(0x56425a4e425a4e56), rs1:x1(0xb9b9b9b9b9b9b9b9), rs2:x17(0x4646464646464646)
    TEST_RR_OP(aes64esm, x31, x1, x17, 0x56425a4e425a4e56, 0xb9b9b9b9b9b9b9b9, 0x4646464646464646, x5, 0, x6)

aes64esm_02_inst_186:
    // Test 186:  Test with dataset: sbox64
    // result rd:x1(0xf4416edb416edbf4), rs1:x31(0xbabababababababa), rs2:x16(0x4545454545454545)
    TEST_RR_OP(aes64esm, x1, x31, x16, 0xf4416edb416edbf4, 0xbabababababababa, 0x4545454545454545, x5, 8, x6)

aes64esm_02_inst_187:
    // Test 187:  Test with dataset: sbox64
    // result rd:x2(0xeae21b13e21b13ea), rs1:x30(0xbbbbbbbbbbbbbbbb), rs2:x15(0x4444444444444444)
    TEST_RR_OP(aes64esm, x2, x30, x15, 0xeae21b13e21b13ea, 0xbbbbbbbbbbbbbbbb, 0x4444444444444444, x5, 16, x6)

aes64esm_02_inst_188:
    // Test 188:  Test with dataset: sbox64
    // result rd:x3(0x65e41a9be41a9b65), rs1:x29(0xbcbcbcbcbcbcbcbc), rs2:x14(0x4343434343434343)
    TEST_RR_OP(aes64esm, x3, x29, x14, 0x65e41a9be41a9b65, 0xbcbcbcbcbcbcbcbc, 0x4343434343434343, x5, 24, x6)

aes64esm_02_inst_189:
    // Test 189:  Test with dataset: sbox64
    // result rd:x4(0x7a802cd6802cd67a), rs1:x28(0xbdbdbdbdbdbdbdbd), rs2:x13(0x4242424242424242)
    TEST_RR_OP(aes64esm, x4, x28, x13, 0x7a802cd6802cd67a, 0xbdbdbdbdbdbdbdbd, 0x4242424242424242, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_39_0)


aes64esm_02_inst_190:
    // Test 190:  Test with dataset: sbox64
    // result rd:x5(0xaed983f4d983f4ae), rs1:x27(0xbebebebebebebebe), rs2:x12(0x4141414141414141)
    TEST_RR_OP(aes64esm, x5, x27, x12, 0xaed983f4d983f4ae, 0xbebebebebebebebe, 0x4141414141414141, x1, 0, x2)

aes64esm_02_inst_191:
    // Test 191:  Test with dataset: sbox64
    // result rd:x6(0x080b090a0b090a08), rs1:x26(0xbfbfbfbfbfbfbfbf), rs2:x11(0x4040404040404040)
    TEST_RR_OP(aes64esm, x6, x26, x11, 0x080b090a0b090a08, 0xbfbfbfbfbfbfbfbf, 0x4040404040404040, x1, 8, x2)

aes64esm_02_inst_192:
    // Test 192:  Test with dataset: sbox64
    // result rd:x7(0xbaf0753ff0753fba), rs1:x25(0xc0c0c0c0c0c0c0c0), rs2:x10(0x3f3f3f3f3f3f3f3f)
    TEST_RR_OP(aes64esm, x7, x25, x10, 0xbaf0753ff0753fba, 0xc0c0c0c0c0c0c0c0, 0x3f3f3f3f3f3f3f3f, x1, 16, x2)

aes64esm_02_inst_193:
    // Test 193:  Test with dataset: sbox64
    // result rd:x8(0x783db2f73db2f778), rs1:x24(0xc1c1c1c1c1c1c1c1), rs2:x9(0x3e3e3e3e3e3e3e3e)
    TEST_RR_OP(aes64esm, x8, x24, x9, 0x783db2f73db2f778, 0xc1c1c1c1c1c1c1c1, 0x3e3e3e3e3e3e3e3e, x1, 24, x2)

aes64esm_02_inst_194:
    // Test 194:  Test with dataset: sbox64
    // result rd:x9(0x2523272123272125), rs1:x23(0xc2c2c2c2c2c2c2c2), rs2:x8(0x3d3d3d3d3d3d3d3d)
    TEST_RR_OP(aes64esm, x9, x23, x8, 0x2523272123272125, 0xc2c2c2c2c2c2c2c2, 0x3d3d3d3d3d3d3d3d, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_40_0)


aes64esm_02_inst_195:
    // Test 195:  Test with dataset: sbox64
    // result rd:x10(0x2e7aebbf7aebbf2e), rs1:x22(0xc3c3c3c3c3c3c3c3), rs2:x7(0x3c3c3c3c3c3c3c3c)
    TEST_RR_OP(aes64esm, x10, x22, x7, 0x2e7aebbf7aebbf2e, 0xc3c3c3c3c3c3c3c3, 0x3c3c3c3c3c3c3c3c, x1, 0, x2)

aes64esm_02_inst_196:
    // Test 196:  Test with dataset: sbox64
    // result rd:x11(0x1c05e2fb05e2fb1c), rs1:x21(0xc4c4c4c4c4c4c4c4), rs2:x6(0x3b3b3b3b3b3b3b3b)
    TEST_RR_OP(aes64esm, x11, x21, x6, 0x1c05e2fb05e2fb1c, 0xc4c4c4c4c4c4c4c4, 0x3b3b3b3b3b3b3b3b, x1, 8, x2)

aes64esm_02_inst_197:
    // Test 197:  Test with dataset: sbox64
    // result rd:x12(0xa6cc80eacc80eaa6), rs1:x20(0xc5c5c5c5c5c5c5c5), rs2:x5(0x3a3a3a3a3a3a3a3a)
    TEST_RR_OP(aes64esm, x12, x20, x5, 0xa6cc80eacc80eaa6, 0xc5c5c5c5c5c5c5c5, 0x3a3a3a3a3a3a3a3a, x1, 16, x2)

aes64esm_02_inst_198:
    // Test 198:  Test with dataset: sbox64
    // result rd:x13(0xb44512e34512e3b4), rs1:x19(0xc6c6c6c6c6c6c6c6), rs2:x4(0x3939393939393939)
    TEST_RR_OP(aes64esm, x13, x19, x4, 0xb44512e34512e3b4, 0xc6c6c6c6c6c6c6c6, 0x3939393939393939, x1, 24, x2)

aes64esm_02_inst_199:
    // Test 199:  Test with dataset: sbox64
    // result rd:x14(0xc69e075f9e075fc6), rs1:x18(0xc7c7c7c7c7c7c7c7), rs2:x3(0x3838383838383838)
    TEST_RR_OP(aes64esm, x14, x18, x3, 0xc69e075f9e075fc6, 0xc7c7c7c7c7c7c7c7, 0x3838383838383838, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x3,signature_41_0)


aes64esm_02_inst_200:
    // Test 200:  Test with dataset: sbox64
    // result rd:x15(0xe87e9a0c7e9a0ce8), rs1:x17(0xc8c8c8c8c8c8c8c8), rs2:x2(0x3737373737373737)
    TEST_RR_OP(aes64esm, x15, x17, x2, 0xe87e9a0c7e9a0ce8, 0xc8c8c8c8c8c8c8c8, 0x3737373737373737, x3, 0, x4)

aes64esm_02_inst_201:
    // Test 201:  Test with dataset: sbox64
    // result rd:x16(0xddae0576ae0576dd), rs1:x16(0xc9c9c9c9c9c9c9c9), rs2:x1(0x3636363636363636)
    TEST_RR_OP(aes64esm, x16, x16, x1, 0xddae0576ae0576dd, 0xc9c9c9c9c9c9c9c9, 0x3636363636363636, x3, 8, x4)

aes64esm_02_inst_202:
    // Test 202:  Test with dataset: sbox64
    // result rd:x17(0x744996ab4996ab74), rs1:x15(0xcacacacacacacaca), rs2:x31(0x3535353535353535)
    TEST_RR_OP(aes64esm, x17, x15, x31, 0x744996ab4996ab74, 0xcacacacacacacaca, 0x3535353535353535, x3, 16, x4)

aes64esm_02_inst_203:
    // Test 203:  Test with dataset: sbox64
    // result rd:x18(0x1f1618111618111f), rs1:x14(0xcbcbcbcbcbcbcbcb), rs2:x30(0x3434343434343434)
    TEST_RR_OP(aes64esm, x18, x14, x30, 0x1f1618111618111f, 0xcbcbcbcbcbcbcbcb, 0x3434343434343434, x3, 24, x4)

aes64esm_02_inst_204:
    // Test 204:  Test with dataset: sbox64
    // result rd:x19(0x4bc8c340c8c3404b), rs1:x13(0xcccccccccccccccc), rs2:x29(0x3333333333333333)
    TEST_RR_OP(aes64esm, x19, x13, x29, 0x4bc8c340c8c3404b, 0xcccccccccccccccc, 0x3333333333333333, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_42_0)


aes64esm_02_inst_205:
    // Test 205:  Test with dataset: sbox64
    // result rd:x20(0xbd04239a04239abd), rs1:x12(0xcdcdcdcdcdcdcdcd), rs2:x28(0x3232323232323232)
    TEST_RR_OP(aes64esm, x20, x12, x28, 0xbd04239a04239abd, 0xcdcdcdcdcdcdcdcd, 0x3232323232323232, x1, 0, x2)

aes64esm_02_inst_206:
    // Test 206:  Test with dataset: sbox64
    // result rd:x21(0x8b5fc7135fc7138b), rs1:x11(0xcececececececece), rs2:x27(0x3131313131313131)
    TEST_RR_OP(aes64esm, x21, x11, x27, 0x8b5fc7135fc7138b, 0xcececececececece, 0x3131313131313131, x1, 8, x2)

aes64esm_02_inst_207:
    // Test 207:  Test with dataset: sbox64
    // result rd:x22(0x8a03048d03048d8a), rs1:x10(0xcfcfcfcfcfcfcfcf), rs2:x26(0x3030303030303030)
    TEST_RR_OP(aes64esm, x22, x10, x26, 0x8a03048d03048d8a, 0xcfcfcfcfcfcfcfcf, 0x3030303030303030, x1, 16, x2)

aes64esm_02_inst_208:
    // Test 208:  Test with dataset: sbox64
    // result rd:x23(0x70df15badf15ba70), rs1:x9(0xd0d0d0d0d0d0d0d0), rs2:x25(0x2f2f2f2f2f2f2f2f)
    TEST_RR_OP(aes64esm, x23, x9, x25, 0x70df15badf15ba70, 0xd0d0d0d0d0d0d0d0, 0x2f2f2f2f2f2f2f2f, x1, 24, x2)

aes64esm_02_inst_209:
    // Test 209:  Test with dataset: sbox64
    // result rd:x24(0x3e2f31202f31203e), rs1:x8(0xd1d1d1d1d1d1d1d1), rs2:x24(0x2e2e2e2e2e2e2e2e)
    TEST_RR_OP(aes64esm, x24, x8, x24, 0x3e2f31202f31203e, 0xd1d1d1d1d1d1d1d1, 0x2e2e2e2e2e2e2e2e, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_43_0)


aes64esm_02_inst_210:
    // Test 210:  Test with dataset: sbox64
    // result rd:x25(0xb502d86f02d86fb5), rs1:x7(0xd2d2d2d2d2d2d2d2), rs2:x23(0x2d2d2d2d2d2d2d2d)
    TEST_RR_OP(aes64esm, x25, x7, x23, 0xb502d86f02d86fb5, 0xd2d2d2d2d2d2d2d2, 0x2d2d2d2d2d2d2d2d, x1, 0, x2)

aes64esm_02_inst_211:
    // Test 211:  Test with dataset: sbox64
    // result rd:x26(0x665f71485f714866), rs1:x6(0xd3d3d3d3d3d3d3d3), rs2:x22(0x2c2c2c2c2c2c2c2c)
    TEST_RR_OP(aes64esm, x26, x6, x22, 0x665f71485f714866, 0xd3d3d3d3d3d3d3d3, 0x2c2c2c2c2c2c2c2c, x1, 8, x2)

aes64esm_02_inst_212:
    // Test 212:  Test with dataset: sbox64
    // result rd:x27(0x4898f12198f12148), rs1:x5(0xd4d4d4d4d4d4d4d4), rs2:x21(0x2b2b2b2b2b2b2b2b)
    TEST_RR_OP(aes64esm, x27, x5, x21, 0x4898f12198f12148, 0xd4d4d4d4d4d4d4d4, 0x2b2b2b2b2b2b2b2b, x1, 16, x2)

aes64esm_02_inst_213:
    // Test 213:  Test with dataset: sbox64
    // result rd:x28(0x0332e5d432e5d403), rs1:x4(0xd5d5d5d5d5d5d5d5), rs2:x20(0x2a2a2a2a2a2a2a2a)
    TEST_RR_OP(aes64esm, x28, x4, x20, 0x0332e5d432e5d403, 0xd5d5d5d5d5d5d5d5, 0x2a2a2a2a2a2a2a2a, x1, 24, x2)

aes64esm_02_inst_214:
    // Test 214:  Test with dataset: sbox64
    // result rd:x29(0xf603a55003a550f6), rs1:x3(0xd6d6d6d6d6d6d6d6), rs2:x19(0x2929292929292929)
    TEST_RR_OP(aes64esm, x29, x3, x19, 0xf603a55003a550f6, 0xd6d6d6d6d6d6d6d6, 0x2929292929292929, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x4,signature_44_0)


aes64esm_02_inst_215:
    // Test 215:  Test with dataset: sbox64
    // result rd:x30(0x0e40347a40347a0e), rs1:x2(0xd7d7d7d7d7d7d7d7), rs2:x18(0x2828282828282828)
    TEST_RR_OP(aes64esm, x30, x2, x18, 0x0e40347a40347a0e, 0xd7d7d7d7d7d7d7d7, 0x2828282828282828, x4, 0, x5)

aes64esm_02_inst_216:
    // Test 216:  Test with dataset: sbox64
    // result rd:x31(0x618dcc208dcc2061), rs1:x1(0xd8d8d8d8d8d8d8d8), rs2:x17(0x2727272727272727)
    TEST_RR_OP(aes64esm, x31, x1, x17, 0x618dcc208dcc2061, 0xd8d8d8d8d8d8d8d8, 0x2727272727272727, x4, 8, x5)

aes64esm_02_inst_217:
    // Test 217:  Test with dataset: sbox64
    // result rd:x1(0x3568f7aa68f7aa35), rs1:x31(0xd9d9d9d9d9d9d9d9), rs2:x16(0x2626262626262626)
    TEST_RR_OP(aes64esm, x1, x31, x16, 0x3568f7aa68f7aa35, 0xd9d9d9d9d9d9d9d9, 0x2626262626262626, x4, 16, x5)

aes64esm_02_inst_218:
    // Test 218:  Test with dataset: sbox64
    // result rd:x2(0x57ef3f87ef3f8757), rs1:x30(0xdadadadadadadada), rs2:x15(0x2525252525252525)
    TEST_RR_OP(aes64esm, x2, x30, x15, 0x57ef3f87ef3f8757, 0xdadadadadadadada, 0x2525252525252525, x4, 24, x5)

aes64esm_02_inst_219:
    // Test 219:  Test with dataset: sbox64
    // result rd:x3(0xb93336bc3336bcb9), rs1:x29(0xdbdbdbdbdbdbdbdb), rs2:x14(0x2424242424242424)
    TEST_RR_OP(aes64esm, x3, x29, x14, 0xb93336bc3336bcb9, 0xdbdbdbdbdbdbdbdb, 0x2424242424242424, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_45_0)


aes64esm_02_inst_220:
    // Test 220:  Test with dataset: sbox64
    // result rd:x4(0x867d26dd7d26dd86), rs1:x28(0xdcdcdcdcdcdcdcdc), rs2:x13(0x2323232323232323)
    TEST_RR_OP(aes64esm, x4, x28, x13, 0x867d26dd7d26dd86, 0xdcdcdcdcdcdcdcdc, 0x2323232323232323, x1, 0, x2)

aes64esm_02_inst_221:
    // Test 221:  Test with dataset: sbox64
    // result rd:x5(0xc1379365379365c1), rs1:x27(0xdddddddddddddddd), rs2:x12(0x2222222222222222)
    TEST_RR_OP(aes64esm, x5, x27, x12, 0xc1379365379365c1, 0xdddddddddddddddd, 0x2222222222222222, x1, 8, x2)

aes64esm_02_inst_222:
    // Test 222:  Test with dataset: sbox64
    // result rd:x6(0x1d26fdc626fdc61d), rs1:x26(0xdededededededede), rs2:x11(0x2121212121212121)
    TEST_RR_OP(aes64esm, x6, x26, x11, 0x1d26fdc626fdc61d, 0xdededededededede, 0x2121212121212121, x1, 16, x2)

aes64esm_02_inst_223:
    // Test 223:  Test with dataset: sbox64
    // result rd:x7(0x9ee5b7cce5b7cc9e), rs1:x25(0xdfdfdfdfdfdfdfdf), rs2:x10(0x2020202020202020)
    TEST_RR_OP(aes64esm, x7, x25, x10, 0x9ee5b7cce5b7cc9e, 0xdfdfdfdfdfdfdfdf, 0x2020202020202020, x1, 24, x2)

aes64esm_02_inst_224:
    // Test 224:  Test with dataset: sbox64
    // result rd:x8(0xe182c0a382c0a3e1), rs1:x24(0xe0e0e0e0e0e0e0e0), rs2:x9(0x1f1f1f1f1f1f1f1f)
    TEST_RR_OP(aes64esm, x8, x24, x9, 0xe182c0a382c0a3e1, 0xe0e0e0e0e0e0e0e0, 0x1f1f1f1f1f1f1f1f, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_46_0)


aes64esm_02_inst_225:
    // Test 225:  Test with dataset: sbox64
    // result rd:x9(0xf87d72f77d72f7f8), rs1:x23(0xe1e1e1e1e1e1e1e1), rs2:x8(0x1e1e1e1e1e1e1e1e)
    TEST_RR_OP(aes64esm, x9, x23, x8, 0xf87d72f77d72f7f8, 0xe1e1e1e1e1e1e1e1, 0x1e1e1e1e1e1e1e1e, x1, 0, x2)

aes64esm_02_inst_226:
    // Test 226:  Test with dataset: sbox64
    // result rd:x10(0x98dca4e0dca4e098), rs1:x22(0xe2e2e2e2e2e2e2e2), rs2:x7(0x1d1d1d1d1d1d1d1d)
    TEST_RR_OP(aes64esm, x10, x22, x7, 0x98dca4e0dca4e098, 0xe2e2e2e2e2e2e2e2, 0x1d1d1d1d1d1d1d1d, x1, 8, x2)

aes64esm_02_inst_227:
    // Test 227:  Test with dataset: sbox64
    // result rd:x11(0x119d9c109d9c1011), rs1:x21(0xe3e3e3e3e3e3e3e3), rs2:x6(0x1c1c1c1c1c1c1c1c)
    TEST_RR_OP(aes64esm, x11, x21, x6, 0x119d9c109d9c1011, 0xe3e3e3e3e3e3e3e3, 0x1c1c1c1c1c1c1c1c, x1, 16, x2)

aes64esm_02_inst_228:
    // Test 228:  Test with dataset: sbox64
    // result rd:x12(0x6938affe38affe69), rs1:x20(0xe4e4e4e4e4e4e4e4), rs2:x5(0x1b1b1b1b1b1b1b1b)
    TEST_RR_OP(aes64esm, x12, x20, x5, 0x6938affe38affe69, 0xe4e4e4e4e4e4e4e4, 0x1b1b1b1b1b1b1b1b, x1, 24, x2)

aes64esm_02_inst_229:
    // Test 229:  Test with dataset: sbox64
    // result rd:x13(0xd954a22f54a22fd9), rs1:x19(0xe5e5e5e5e5e5e5e5), rs2:x4(0x1a1a1a1a1a1a1a1a)
    TEST_RR_OP(aes64esm, x13, x19, x4, 0xd954a22f54a22fd9, 0xe5e5e5e5e5e5e5e5, 0x1a1a1a1a1a1a1a1a, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x4,signature_47_0)


aes64esm_02_inst_230:
    // Test 230:  Test with dataset: sbox64
    // result rd:x14(0x8e60d43a60d43a8e), rs1:x18(0xe6e6e6e6e6e6e6e6), rs2:x3(0x1919191919191919)
    TEST_RR_OP(aes64esm, x14, x18, x3, 0x8e60d43a60d43a8e, 0xe6e6e6e6e6e6e6e6, 0x1919191919191919, x4, 0, x5)

aes64esm_02_inst_231:
    // Test 231:  Test with dataset: sbox64
    // result rd:x15(0x94dfade6dfade694), rs1:x17(0xe7e7e7e7e7e7e7e7), rs2:x2(0x1818181818181818)
    TEST_RR_OP(aes64esm, x15, x17, x2, 0x94dfade6dfade694, 0xe7e7e7e7e7e7e7e7, 0x1818181818181818, x4, 8, x5)

aes64esm_02_inst_232:
    // Test 232:  Test with dataset: sbox64
    // result rd:x16(0x9b26f04d26f04d9b), rs1:x16(0xe8e8e8e8e8e8e8e8), rs2:x1(0x1717171717171717)
    TEST_RR_OP(aes64esm, x16, x16, x1, 0x9b26f04d26f04d9b, 0xe8e8e8e8e8e8e8e8, 0x1717171717171717, x4, 16, x5)

aes64esm_02_inst_233:
    // Test 233:  Test with dataset: sbox64
    // result rd:x17(0x1ef547acf547ac1e), rs1:x15(0xe9e9e9e9e9e9e9e9), rs2:x31(0x1616161616161616)
    TEST_RR_OP(aes64esm, x17, x15, x31, 0x1ef547acf547ac1e, 0xe9e9e9e9e9e9e9e9, 0x1616161616161616, x4, 24, x5)

aes64esm_02_inst_234:
    // Test 234:  Test with dataset: sbox64
    // result rd:x18(0x87fe5920fe592087), rs1:x14(0xeaeaeaeaeaeaeaea), rs2:x30(0x1515151515151515)
    TEST_RR_OP(aes64esm, x18, x14, x30, 0x87fe5920fe592087, 0xeaeaeaeaeaeaeaea, 0x1515151515151515, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_48_0)


aes64esm_02_inst_235:
    // Test 235:  Test with dataset: sbox64
    // result rd:x19(0xe9dcfacfdcfacfe9), rs1:x13(0xebebebebebebebeb), rs2:x29(0x1414141414141414)
    TEST_RR_OP(aes64esm, x19, x13, x29, 0xe9dcfacfdcfacfe9, 0xebebebebebebebeb, 0x1414141414141414, x1, 0, x2)

aes64esm_02_inst_236:
    // Test 236:  Test with dataset: sbox64
    // result rd:x20(0xce007db3007db3ce), rs1:x12(0xecececececececec), rs2:x28(0x1313131313131313)
    TEST_RR_OP(aes64esm, x20, x12, x28, 0xce007db3007db3ce, 0xecececececececec, 0x1313131313131313, x1, 8, x2)

aes64esm_02_inst_237:
    // Test 237:  Test with dataset: sbox64
    // result rd:x21(0x55eac976eac97655), rs1:x11(0xedededededededed), rs2:x27(0x1212121212121212)
    TEST_RR_OP(aes64esm, x21, x11, x27, 0x55eac976eac97655, 0xedededededededed, 0x1212121212121212, x1, 16, x2)

aes64esm_02_inst_238:
    // Test 238:  Test with dataset: sbox64
    // result rd:x22(0x28cd8267cd826728), rs1:x10(0xeeeeeeeeeeeeeeee), rs2:x26(0x1111111111111111)
    TEST_RR_OP(aes64esm, x22, x10, x26, 0x28cd8267cd826728, 0xeeeeeeeeeeeeeeee, 0x1111111111111111, x1, 24, x2)

aes64esm_02_inst_239:
    // Test 239:  Test with dataset: sbox64
    // result rd:x23(0xdfe0caf5e0caf5df), rs1:x9(0xefefefefefefefef), rs2:x25(0x1010101010101010)
    TEST_RR_OP(aes64esm, x23, x9, x25, 0xdfe0caf5e0caf5df, 0xefefefefefefefef, 0x1010101010101010, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_49_0)


aes64esm_02_inst_240:
    // Test 240:  Test with dataset: sbox64
    // result rd:x24(0x8c9976639976638c), rs1:x8(0xf0f0f0f0f0f0f0f0), rs2:x24(0x0f0f0f0f0f0f0f0f)
    TEST_RR_OP(aes64esm, x24, x8, x24, 0x8c9976639976638c, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f, x1, 0, x2)

aes64esm_02_inst_241:
    // Test 241:  Test with dataset: sbox64
    // result rd:x25(0xa1bfabb5bfabb5a1), rs1:x7(0xf1f1f1f1f1f1f1f1), rs2:x23(0x0e0e0e0e0e0e0e0e)
    TEST_RR_OP(aes64esm, x25, x7, x23, 0xa1bfabb5bfabb5a1, 0xf1f1f1f1f1f1f1f1, 0xe0e0e0e0e0e0e0e, x1, 8, x2)

aes64esm_02_inst_242:
    // Test 242:  Test with dataset: sbox64
    // result rd:x26(0x896bd7356bd73589), rs1:x6(0xf2f2f2f2f2f2f2f2), rs2:x22(0x0d0d0d0d0d0d0d0d)
    TEST_RR_OP(aes64esm, x26, x6, x22, 0x896bd7356bd73589, 0xf2f2f2f2f2f2f2f2, 0xd0d0d0d0d0d0d0d, x1, 16, x2)

aes64esm_02_inst_243:
    // Test 243:  Test with dataset: sbox64
    // result rd:x27(0x0d03fef003fef00d), rs1:x5(0xf3f3f3f3f3f3f3f3), rs2:x21(0x0c0c0c0c0c0c0c0c)
    TEST_RR_OP(aes64esm, x27, x5, x21, 0x0d03fef003fef00d, 0xf3f3f3f3f3f3f3f3, 0xc0c0c0c0c0c0c0c, x1, 24, x2)

aes64esm_02_inst_244:
    // Test 244:  Test with dataset: sbox64
    // result rd:x28(0xbf182b8c182b8cbf), rs1:x4(0xf4f4f4f4f4f4f4f4), rs2:x20(0x0b0b0b0b0b0b0b0b)
    TEST_RR_OP(aes64esm, x28, x4, x20, 0xbf182b8c182b8cbf, 0xf4f4f4f4f4f4f4f4, 0xb0b0b0b0b0b0b0b, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x4,signature_50_0)


aes64esm_02_inst_245:
    // Test 245:  Test with dataset: sbox64
    // result rd:x29(0xe67e67ff7e67ffe6), rs1:x3(0xf5f5f5f5f5f5f5f5), rs2:x19(0x0a0a0a0a0a0a0a0a)
    TEST_RR_OP(aes64esm, x29, x3, x19, 0xe67e67ff7e67ffe6, 0xf5f5f5f5f5f5f5f5, 0xa0a0a0a0a0a0a0a, x4, 0, x5)

aes64esm_02_inst_246:
    // Test 246:  Test with dataset: sbox64
    // result rd:x30(0x428701c48701c442), rs1:x2(0xf6f6f6f6f6f6f6f6), rs2:x18(0x0909090909090909)
    TEST_RR_OP(aes64esm, x30, x2, x18, 0x428701c48701c442, 0xf6f6f6f6f6f6f6f6, 0x909090909090909, x4, 8, x5)

aes64esm_02_inst_247:
    // Test 247:  Test with dataset: sbox64
    // result rd:x31(0x688030d88030d868), rs1:x1(0xf7f7f7f7f7f7f7f7), rs2:x17(0x0808080808080808)
    TEST_RR_OP(aes64esm, x31, x1, x17, 0x688030d88030d868, 0xf7f7f7f7f7f7f7f7, 0x808080808080808, x4, 16, x5)

aes64esm_02_inst_248:
    // Test 248:  Test with dataset: sbox64
    // result rd:x1(0x41d6c552d6c55241), rs1:x31(0xf8f8f8f8f8f8f8f8), rs2:x16(0x0707070707070707)
    TEST_RR_OP(aes64esm, x1, x31, x16, 0x41d6c552d6c55241, 0xf8f8f8f8f8f8f8f8, 0x707070707070707, x4, 24, x5)

aes64esm_02_inst_249:
    // Test 249:  Test with dataset: sbox64
    // result rd:x2(0x99986f6e986f6e99), rs1:x30(0xf9f9f9f9f9f9f9f9), rs2:x15(0x0606060606060606)
    TEST_RR_OP(aes64esm, x2, x30, x15, 0x99986f6e986f6e99, 0xf9f9f9f9f9f9f9f9, 0x606060606060606, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_51_0)


aes64esm_02_inst_250:
    // Test 250:  Test with dataset: sbox64
    // result rd:x3(0x2de76ba1e76ba12d), rs1:x29(0xfafafafafafafafa), rs2:x14(0x0505050505050505)
    TEST_RR_OP(aes64esm, x3, x29, x14, 0x2de76ba1e76ba12d, 0xfafafafafafafafa, 0x505050505050505, x1, 0, x2)

aes64esm_02_inst_251:
    // Test 251:  Test with dataset: sbox64
    // result rd:x4(0x0f13f2ee13f2ee0f), rs1:x28(0xfbfbfbfbfbfbfbfb), rs2:x13(0x0404040404040404)
    TEST_RR_OP(aes64esm, x4, x28, x13, 0x0f13f2ee13f2ee0f, 0xfbfbfbfbfbfbfbfb, 0x404040404040404, x1, 8, x2)

aes64esm_02_inst_252:
    // Test 252:  Test with dataset: sbox64
    // result rd:x5(0xb0f67b3df67b3db0), rs1:x27(0xfcfcfcfcfcfcfcfc), rs2:x12(0x0303030303030303)
    TEST_RR_OP(aes64esm, x5, x27, x12, 0xb0f67b3df67b3db0, 0xfcfcfcfcfcfcfcfc, 0x303030303030303, x1, 16, x2)

aes64esm_02_inst_253:
    // Test 253:  Test with dataset: sbox64
    // result rd:x6(0x5431771231771254), rs1:x26(0xfdfdfdfdfdfdfdfd), rs2:x11(0x0202020202020202)
    TEST_RR_OP(aes64esm, x6, x26, x11, 0x5431771231771254, 0xfdfdfdfdfdfdfdfd, 0x202020202020202, x1, 24, x2)

aes64esm_02_inst_254:
    // Test 254:  Test with dataset: sbox64
    // result rd:x7(0xbbe97c2ee97c2ebb), rs1:x25(0xfefefefefefefefe), rs2:x10(0x0101010101010101)
    TEST_RR_OP(aes64esm, x7, x25, x10, 0xbbe97c2ee97c2ebb, 0xfefefefefefefefe, 0x101010101010101, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes64esm)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",aes64esm)

	RVTEST_SIGBASE(x1,signature_52_0)


aes64esm_02_inst_255:
    // Test 255:  Test with dataset: sbox64
    // result rd:x8(0x168963fc8963fc16), rs1:x24(0xffffffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(aes64esm, x8, x24, x9, 0x168963fc8963fc16, 0xffffffffffffffff, 0x0, x1, 0, x2)
	
#endif


RVTEST_CODE_END aes64esm_02_code_end
RVTEST_CODE_BEGIN andn_01_init andn_01_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x6,signature_1_0)


andn_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x008005a9ade01194), rs1:x31(0x10fd3dedadea5195), rs2:x16(0xdf7f3844121bcc23)
    TEST_RR_OP(andn, x1, x31, x16, 0x008005a9ade01194, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x6, 0, x7)

andn_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x080048e05282ae80), rs1:x30(0xbd295ce2d2ffbec1), rs2:x15(0xf5adb41aa47d105b)
    TEST_RR_OP(andn, x2, x30, x15, 0x080048e05282ae80, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x6, 8, x7)

andn_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0x49008b008881083b), rs1:x29(0xc9649f05a8e1a8bb), rs2:x14(0x82f6747f707af2c0)
    TEST_RR_OP(andn, x3, x29, x14, 0x49008b008881083b, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x6, 16, x7)

andn_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x0440000808400408), rs1:x28(0x3541291848c99fcb), rs2:x13(0x73a92fd4e19bfbc3)
    TEST_RR_OP(andn, x4, x28, x13, 0x0440000808400408, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x6, 24, x7)

andn_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x0080410004154240), rs1:x27(0x10a24740461d524f), rs2:x12(0x546b0e54528a10af)
    TEST_RR_OP(andn, x5, x27, x12, 0x0080410004154240, 0x10a24740461d524f, 0x546b0e54528a10af, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_2_0)


andn_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x44490814108200a0), rs1:x26(0x546b0e54528a10af), rs2:x11(0x10a24740461d524f)
    TEST_RR_OP(andn, x6, x26, x11, 0x44490814108200a0, 0x546b0e54528a10af, 0x10a24740461d524f, x1, 0, x2)

andn_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x42a806c4a1126000), rs1:x25(0x73a92fd4e19bfbc3), rs2:x10(0x3541291848c99fcb)
    TEST_RR_OP(andn, x7, x25, x10, 0x42a806c4a1126000, 0x73a92fd4e19bfbc3, 0x3541291848c99fcb, x1, 8, x2)

andn_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x0292607a501a5240), rs1:x24(0x82f6747f707af2c0), rs2:x9(0xc9649f05a8e1a8bb)
    TEST_RR_OP(andn, x8, x24, x9, 0x0292607a501a5240, 0x82f6747f707af2c0, 0xc9649f05a8e1a8bb, x1, 16, x2)

andn_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0x4084a0182400001a), rs1:x23(0xf5adb41aa47d105b), rs2:x8(0xbd295ce2d2ffbec1)
    TEST_RR_OP(andn, x9, x23, x8, 0x4084a0182400001a, 0xf5adb41aa47d105b, 0xbd295ce2d2ffbec1, x1, 24, x2)

andn_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0xcf02000012118c22), rs1:x22(0xdf7f3844121bcc23), rs2:x7(0x10fd3dedadea5195)
    TEST_RR_OP(andn, x10, x22, x7, 0xcf02000012118c22, 0xdf7f3844121bcc23, 0x10fd3dedadea5195, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_3_0)


andn_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0000000000000001), rs2:x6(0xffffffffffffffff)
    TEST_RR_OP(andn, x11, x21, x6, 0x0000000000000000, 0x1, 0xffffffffffffffff, x1, 0, x7)

andn_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000000000002), rs2:x5(0x7fffffffffffffff)
    TEST_RR_OP(andn, x12, x20, x5, 0x0000000000000000, 0x2, 0x7fffffffffffffff, x1, 8, x7)

andn_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000004), rs2:x4(0xbfffffffffffffff)
    TEST_RR_OP(andn, x13, x19, x4, 0x0000000000000000, 0x4, 0xbfffffffffffffff, x1, 16, x7)

andn_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0000000000000008), rs2:x3(0xdfffffffffffffff)
    TEST_RR_OP(andn, x14, x18, x3, 0x0000000000000000, 0x8, 0xdfffffffffffffff, x1, 24, x7)

andn_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x0000000000000010), rs2:x2(0xefffffffffffffff)
    TEST_RR_OP(andn, x15, x17, x2, 0x0000000000000000, 0x10, 0xefffffffffffffff, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x2,signature_4_0)


andn_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x0000000000000020), rs2:x1(0xf7ffffffffffffff)
    TEST_RR_OP(andn, x16, x16, x1, 0x0000000000000000, 0x20, 0xf7ffffffffffffff, x2, 0, x3)

andn_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000000000000040), rs2:x31(0xfbffffffffffffff)
    TEST_RR_OP(andn, x17, x15, x31, 0x0000000000000000, 0x40, 0xfbffffffffffffff, x2, 8, x3)

andn_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000000000000080), rs2:x30(0xfdffffffffffffff)
    TEST_RR_OP(andn, x18, x14, x30, 0x0000000000000000, 0x80, 0xfdffffffffffffff, x2, 16, x3)

andn_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000100), rs2:x29(0xfeffffffffffffff)
    TEST_RR_OP(andn, x19, x13, x29, 0x0000000000000000, 0x100, 0xfeffffffffffffff, x2, 24, x3)

andn_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000000000000200), rs2:x28(0xff7fffffffffffff)
    TEST_RR_OP(andn, x20, x12, x28, 0x0000000000000000, 0x200, 0xff7fffffffffffff, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_5_0)


andn_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000000000400), rs2:x27(0xffbfffffffffffff)
    TEST_RR_OP(andn, x21, x11, x27, 0x0000000000000000, 0x400, 0xffbfffffffffffff, x1, 0, x2)

andn_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000000000000800), rs2:x26(0xffdfffffffffffff)
    TEST_RR_OP(andn, x22, x10, x26, 0x0000000000000000, 0x800, 0xffdfffffffffffff, x1, 8, x2)

andn_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000000000001000), rs2:x25(0xffefffffffffffff)
    TEST_RR_OP(andn, x23, x9, x25, 0x0000000000000000, 0x1000, 0xffefffffffffffff, x1, 16, x2)

andn_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000000000002000), rs2:x24(0xfff7ffffffffffff)
    TEST_RR_OP(andn, x24, x8, x24, 0x0000000000000000, 0x2000, 0xfff7ffffffffffff, x1, 24, x2)

andn_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000000000004000), rs2:x23(0xfffbffffffffffff)
    TEST_RR_OP(andn, x25, x7, x23, 0x0000000000000000, 0x4000, 0xfffbffffffffffff, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_6_0)


andn_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000000000008000), rs2:x22(0xfffdffffffffffff)
    TEST_RR_OP(andn, x26, x6, x22, 0x0000000000000000, 0x8000, 0xfffdffffffffffff, x1, 0, x7)

andn_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000000000010000), rs2:x21(0xfffeffffffffffff)
    TEST_RR_OP(andn, x27, x5, x21, 0x0000000000000000, 0x10000, 0xfffeffffffffffff, x1, 8, x7)

andn_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000000000020000), rs2:x20(0xffff7fffffffffff)
    TEST_RR_OP(andn, x28, x4, x20, 0x0000000000000000, 0x20000, 0xffff7fffffffffff, x1, 16, x7)

andn_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000000000040000), rs2:x19(0xffffbfffffffffff)
    TEST_RR_OP(andn, x29, x3, x19, 0x0000000000000000, 0x40000, 0xffffbfffffffffff, x1, 24, x7)

andn_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000000000080000), rs2:x18(0xffffdfffffffffff)
    TEST_RR_OP(andn, x30, x2, x18, 0x0000000000000000, 0x80000, 0xffffdfffffffffff, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x5,signature_7_0)


andn_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000000000100000), rs2:x17(0xffffefffffffffff)
    TEST_RR_OP(andn, x31, x1, x17, 0x0000000000000000, 0x100000, 0xffffefffffffffff, x5, 0, x6)

andn_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000000000200000), rs2:x16(0xfffff7ffffffffff)
    TEST_RR_OP(andn, x1, x31, x16, 0x0000000000000000, 0x200000, 0xfffff7ffffffffff, x5, 8, x6)

andn_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000000000400000), rs2:x15(0xfffffbffffffffff)
    TEST_RR_OP(andn, x2, x30, x15, 0x0000000000000000, 0x400000, 0xfffffbffffffffff, x5, 16, x6)

andn_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0000000000800000), rs2:x14(0xfffffdffffffffff)
    TEST_RR_OP(andn, x3, x29, x14, 0x0000000000000000, 0x800000, 0xfffffdffffffffff, x5, 24, x6)

andn_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0000000001000000), rs2:x13(0xfffffeffffffffff)
    TEST_RR_OP(andn, x4, x28, x13, 0x0000000000000000, 0x1000000, 0xfffffeffffffffff, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_8_0)


andn_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0000000002000000), rs2:x12(0xffffff7fffffffff)
    TEST_RR_OP(andn, x5, x27, x12, 0x0000000000000000, 0x2000000, 0xffffff7fffffffff, x1, 0, x2)

andn_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0000000004000000), rs2:x11(0xffffffbfffffffff)
    TEST_RR_OP(andn, x6, x26, x11, 0x0000000000000000, 0x4000000, 0xffffffbfffffffff, x1, 8, x2)

andn_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0000000008000000), rs2:x10(0xffffffdfffffffff)
    TEST_RR_OP(andn, x7, x25, x10, 0x0000000000000000, 0x8000000, 0xffffffdfffffffff, x1, 16, x2)

andn_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0000000010000000), rs2:x9(0xffffffefffffffff)
    TEST_RR_OP(andn, x8, x24, x9, 0x0000000000000000, 0x10000000, 0xffffffefffffffff, x1, 24, x2)

andn_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0000000020000000), rs2:x8(0xfffffff7ffffffff)
    TEST_RR_OP(andn, x9, x23, x8, 0x0000000000000000, 0x20000000, 0xfffffff7ffffffff, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_9_0)


andn_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0000000040000000), rs2:x7(0xfffffffbffffffff)
    TEST_RR_OP(andn, x10, x22, x7, 0x0000000000000000, 0x40000000, 0xfffffffbffffffff, x1, 0, x2)

andn_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0000000080000000), rs2:x6(0xfffffffdffffffff)
    TEST_RR_OP(andn, x11, x21, x6, 0x0000000000000000, 0x80000000, 0xfffffffdffffffff, x1, 8, x2)

andn_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0000000100000000), rs1:x20(0x0000000100000000), rs2:x5(0xfffffffeffffffff)
    TEST_RR_OP(andn, x12, x20, x5, 0x0000000100000000, 0x100000000, 0xfffffffeffffffff, x1, 16, x2)

andn_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000200000000), rs2:x4(0xffffffff7fffffff)
    TEST_RR_OP(andn, x13, x19, x4, 0x0000000000000000, 0x200000000, 0xffffffff7fffffff, x1, 24, x2)

andn_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0000000400000000), rs2:x3(0xffffffffbfffffff)
    TEST_RR_OP(andn, x14, x18, x3, 0x0000000000000000, 0x400000000, 0xffffffffbfffffff, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x3,signature_10_0)


andn_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x0000000800000000), rs2:x2(0xffffffffdfffffff)
    TEST_RR_OP(andn, x15, x17, x2, 0x0000000000000000, 0x800000000, 0xffffffffdfffffff, x3, 0, x4)

andn_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x0000001000000000), rs2:x1(0xffffffffefffffff)
    TEST_RR_OP(andn, x16, x16, x1, 0x0000000000000000, 0x1000000000, 0xffffffffefffffff, x3, 8, x4)

andn_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000002000000000), rs2:x31(0xfffffffff7ffffff)
    TEST_RR_OP(andn, x17, x15, x31, 0x0000000000000000, 0x2000000000, 0xfffffffff7ffffff, x3, 16, x4)

andn_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000004000000000), rs2:x30(0xfffffffffbffffff)
    TEST_RR_OP(andn, x18, x14, x30, 0x0000000000000000, 0x4000000000, 0xfffffffffbffffff, x3, 24, x4)

andn_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000008000000000), rs2:x29(0xfffffffffdffffff)
    TEST_RR_OP(andn, x19, x13, x29, 0x0000000000000000, 0x8000000000, 0xfffffffffdffffff, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_11_0)


andn_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000010000000000), rs2:x28(0xfffffffffeffffff)
    TEST_RR_OP(andn, x20, x12, x28, 0x0000000000000000, 0x10000000000, 0xfffffffffeffffff, x1, 0, x2)

andn_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000020000000000), rs2:x27(0xffffffffff7fffff)
    TEST_RR_OP(andn, x21, x11, x27, 0x0000000000000000, 0x20000000000, 0xffffffffff7fffff, x1, 8, x2)

andn_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000040000000000), rs2:x26(0xffffffffffbfffff)
    TEST_RR_OP(andn, x22, x10, x26, 0x0000000000000000, 0x40000000000, 0xffffffffffbfffff, x1, 16, x2)

andn_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000080000000000), rs2:x25(0xffffffffffdfffff)
    TEST_RR_OP(andn, x23, x9, x25, 0x0000000000000000, 0x80000000000, 0xffffffffffdfffff, x1, 24, x2)

andn_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000100000000000), rs2:x24(0xffffffffffefffff)
    TEST_RR_OP(andn, x24, x8, x24, 0x0000000000000000, 0x100000000000, 0xffffffffffefffff, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_12_0)


andn_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000200000000000), rs2:x23(0xfffffffffff7ffff)
    TEST_RR_OP(andn, x25, x7, x23, 0x0000000000000000, 0x200000000000, 0xfffffffffff7ffff, x1, 0, x2)

andn_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000400000000000), rs2:x22(0xfffffffffffbffff)
    TEST_RR_OP(andn, x26, x6, x22, 0x0000000000000000, 0x400000000000, 0xfffffffffffbffff, x1, 8, x2)

andn_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000800000000000), rs2:x21(0xfffffffffffdffff)
    TEST_RR_OP(andn, x27, x5, x21, 0x0000000000000000, 0x800000000000, 0xfffffffffffdffff, x1, 16, x2)

andn_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0001000000000000), rs2:x20(0xfffffffffffeffff)
    TEST_RR_OP(andn, x28, x4, x20, 0x0000000000000000, 0x1000000000000, 0xfffffffffffeffff, x1, 24, x2)

andn_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0002000000000000), rs2:x19(0xffffffffffff7fff)
    TEST_RR_OP(andn, x29, x3, x19, 0x0000000000000000, 0x2000000000000, 0xffffffffffff7fff, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x4,signature_13_0)


andn_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0004000000000000), rs2:x18(0xffffffffffffbfff)
    TEST_RR_OP(andn, x30, x2, x18, 0x0000000000000000, 0x4000000000000, 0xffffffffffffbfff, x4, 0, x5)

andn_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0008000000000000), rs2:x17(0xffffffffffffdfff)
    TEST_RR_OP(andn, x31, x1, x17, 0x0000000000000000, 0x8000000000000, 0xffffffffffffdfff, x4, 8, x5)

andn_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0010000000000000), rs2:x16(0xffffffffffffefff)
    TEST_RR_OP(andn, x1, x31, x16, 0x0000000000000000, 0x10000000000000, 0xffffffffffffefff, x4, 16, x5)

andn_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0020000000000000), rs2:x15(0xfffffffffffff7ff)
    TEST_RR_OP(andn, x2, x30, x15, 0x0000000000000000, 0x20000000000000, 0xfffffffffffff7ff, x4, 24, x5)

andn_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0040000000000000), rs2:x14(0xfffffffffffffbff)
    TEST_RR_OP(andn, x3, x29, x14, 0x0000000000000000, 0x40000000000000, 0xfffffffffffffbff, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_14_0)


andn_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0080000000000000), rs2:x13(0xfffffffffffffdff)
    TEST_RR_OP(andn, x4, x28, x13, 0x0000000000000000, 0x80000000000000, 0xfffffffffffffdff, x1, 0, x2)

andn_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0100000000000000), rs2:x12(0xfffffffffffffeff)
    TEST_RR_OP(andn, x5, x27, x12, 0x0000000000000000, 0x100000000000000, 0xfffffffffffffeff, x1, 8, x2)

andn_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0200000000000000), rs2:x11(0xffffffffffffff7f)
    TEST_RR_OP(andn, x6, x26, x11, 0x0000000000000000, 0x200000000000000, 0xffffffffffffff7f, x1, 16, x2)

andn_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0400000000000000), rs2:x10(0xffffffffffffffbf)
    TEST_RR_OP(andn, x7, x25, x10, 0x0000000000000000, 0x400000000000000, 0xffffffffffffffbf, x1, 24, x2)

andn_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0800000000000000), rs2:x9(0xffffffffffffffdf)
    TEST_RR_OP(andn, x8, x24, x9, 0x0000000000000000, 0x800000000000000, 0xffffffffffffffdf, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_15_0)


andn_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x1000000000000000), rs2:x8(0xffffffffffffffef)
    TEST_RR_OP(andn, x9, x23, x8, 0x0000000000000000, 0x1000000000000000, 0xffffffffffffffef, x1, 0, x2)

andn_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x2000000000000000), rs2:x7(0xfffffffffffffff7)
    TEST_RR_OP(andn, x10, x22, x7, 0x0000000000000000, 0x2000000000000000, 0xfffffffffffffff7, x1, 8, x2)

andn_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x4000000000000000), rs2:x6(0xfffffffffffffffb)
    TEST_RR_OP(andn, x11, x21, x6, 0x0000000000000000, 0x4000000000000000, 0xfffffffffffffffb, x1, 16, x2)

andn_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x8000000000000000), rs2:x5(0xfffffffffffffffd)
    TEST_RR_OP(andn, x12, x20, x5, 0x0000000000000000, 0x8000000000000000, 0xfffffffffffffffd, x1, 24, x2)

andn_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000), rs2:x4(0xfffffffffffffffe)
    TEST_RR_OP(andn, x13, x19, x4, 0x0000000000000000, 0x0, 0xfffffffffffffffe, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x4,signature_16_0)


andn_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0xfffffffffffffffe), rs1:x18(0xfffffffffffffffe), rs2:x3(0x0000000000000000)
    TEST_RR_OP(andn, x14, x18, x3, 0xfffffffffffffffe, 0xfffffffffffffffe, 0x0, x4, 0, x5)

andn_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0x7ffffffffffffffd), rs1:x17(0xfffffffffffffffd), rs2:x2(0x8000000000000000)
    TEST_RR_OP(andn, x15, x17, x2, 0x7ffffffffffffffd, 0xfffffffffffffffd, 0x8000000000000000, x4, 8, x5)

andn_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0xbffffffffffffffb), rs1:x16(0xfffffffffffffffb), rs2:x1(0x4000000000000000)
    TEST_RR_OP(andn, x16, x16, x1, 0xbffffffffffffffb, 0xfffffffffffffffb, 0x4000000000000000, x4, 16, x5)

andn_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0xdffffffffffffff7), rs1:x15(0xfffffffffffffff7), rs2:x31(0x2000000000000000)
    TEST_RR_OP(andn, x17, x15, x31, 0xdffffffffffffff7, 0xfffffffffffffff7, 0x2000000000000000, x4, 24, x5)

andn_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0xefffffffffffffef), rs1:x14(0xffffffffffffffef), rs2:x30(0x1000000000000000)
    TEST_RR_OP(andn, x18, x14, x30, 0xefffffffffffffef, 0xffffffffffffffef, 0x1000000000000000, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_17_0)


andn_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0xf7ffffffffffffdf), rs1:x13(0xffffffffffffffdf), rs2:x29(0x0800000000000000)
    TEST_RR_OP(andn, x19, x13, x29, 0xf7ffffffffffffdf, 0xffffffffffffffdf, 0x800000000000000, x1, 0, x2)

andn_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0xfbffffffffffffbf), rs1:x12(0xffffffffffffffbf), rs2:x28(0x0400000000000000)
    TEST_RR_OP(andn, x20, x12, x28, 0xfbffffffffffffbf, 0xffffffffffffffbf, 0x400000000000000, x1, 8, x2)

andn_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0xfdffffffffffff7f), rs1:x11(0xffffffffffffff7f), rs2:x27(0x0200000000000000)
    TEST_RR_OP(andn, x21, x11, x27, 0xfdffffffffffff7f, 0xffffffffffffff7f, 0x200000000000000, x1, 16, x2)

andn_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0xfefffffffffffeff), rs1:x10(0xfffffffffffffeff), rs2:x26(0x0100000000000000)
    TEST_RR_OP(andn, x22, x10, x26, 0xfefffffffffffeff, 0xfffffffffffffeff, 0x100000000000000, x1, 24, x2)

andn_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0xff7ffffffffffdff), rs1:x9(0xfffffffffffffdff), rs2:x25(0x0080000000000000)
    TEST_RR_OP(andn, x23, x9, x25, 0xff7ffffffffffdff, 0xfffffffffffffdff, 0x80000000000000, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_18_0)


andn_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0xffbffffffffffbff), rs1:x8(0xfffffffffffffbff), rs2:x24(0x0040000000000000)
    TEST_RR_OP(andn, x24, x8, x24, 0xffbffffffffffbff, 0xfffffffffffffbff, 0x40000000000000, x1, 0, x2)

andn_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0xffdffffffffff7ff), rs1:x7(0xfffffffffffff7ff), rs2:x23(0x0020000000000000)
    TEST_RR_OP(andn, x25, x7, x23, 0xffdffffffffff7ff, 0xfffffffffffff7ff, 0x20000000000000, x1, 8, x2)

andn_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0xffefffffffffefff), rs1:x6(0xffffffffffffefff), rs2:x22(0x0010000000000000)
    TEST_RR_OP(andn, x26, x6, x22, 0xffefffffffffefff, 0xffffffffffffefff, 0x10000000000000, x1, 16, x2)

andn_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0xfff7ffffffffdfff), rs1:x5(0xffffffffffffdfff), rs2:x21(0x0008000000000000)
    TEST_RR_OP(andn, x27, x5, x21, 0xfff7ffffffffdfff, 0xffffffffffffdfff, 0x8000000000000, x1, 24, x2)

andn_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0xfffbffffffffbfff), rs1:x4(0xffffffffffffbfff), rs2:x20(0x0004000000000000)
    TEST_RR_OP(andn, x28, x4, x20, 0xfffbffffffffbfff, 0xffffffffffffbfff, 0x4000000000000, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x4,signature_19_0)


andn_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0xfffdffffffff7fff), rs1:x3(0xffffffffffff7fff), rs2:x19(0x0002000000000000)
    TEST_RR_OP(andn, x29, x3, x19, 0xfffdffffffff7fff, 0xffffffffffff7fff, 0x2000000000000, x4, 0, x5)

andn_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0xfffefffffffeffff), rs1:x2(0xfffffffffffeffff), rs2:x18(0x0001000000000000)
    TEST_RR_OP(andn, x30, x2, x18, 0xfffefffffffeffff, 0xfffffffffffeffff, 0x1000000000000, x4, 8, x5)

andn_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0xffff7ffffffdffff), rs1:x1(0xfffffffffffdffff), rs2:x17(0x0000800000000000)
    TEST_RR_OP(andn, x31, x1, x17, 0xffff7ffffffdffff, 0xfffffffffffdffff, 0x800000000000, x4, 16, x5)

andn_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0xffffbffffffbffff), rs1:x31(0xfffffffffffbffff), rs2:x16(0x0000400000000000)
    TEST_RR_OP(andn, x1, x31, x16, 0xffffbffffffbffff, 0xfffffffffffbffff, 0x400000000000, x4, 24, x5)

andn_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0xffffdffffff7ffff), rs1:x30(0xfffffffffff7ffff), rs2:x15(0x0000200000000000)
    TEST_RR_OP(andn, x2, x30, x15, 0xffffdffffff7ffff, 0xfffffffffff7ffff, 0x200000000000, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_20_0)


andn_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0xffffefffffefffff), rs1:x29(0xffffffffffefffff), rs2:x14(0x0000100000000000)
    TEST_RR_OP(andn, x3, x29, x14, 0xffffefffffefffff, 0xffffffffffefffff, 0x100000000000, x1, 0, x2)

andn_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0xfffff7ffffdfffff), rs1:x28(0xffffffffffdfffff), rs2:x13(0x0000080000000000)
    TEST_RR_OP(andn, x4, x28, x13, 0xfffff7ffffdfffff, 0xffffffffffdfffff, 0x80000000000, x1, 8, x2)

andn_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0xfffffbffffbfffff), rs1:x27(0xffffffffffbfffff), rs2:x12(0x0000040000000000)
    TEST_RR_OP(andn, x5, x27, x12, 0xfffffbffffbfffff, 0xffffffffffbfffff, 0x40000000000, x1, 16, x2)

andn_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0xfffffdffff7fffff), rs1:x26(0xffffffffff7fffff), rs2:x11(0x0000020000000000)
    TEST_RR_OP(andn, x6, x26, x11, 0xfffffdffff7fffff, 0xffffffffff7fffff, 0x20000000000, x1, 24, x2)

andn_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0xfffffefffeffffff), rs1:x25(0xfffffffffeffffff), rs2:x10(0x0000010000000000)
    TEST_RR_OP(andn, x7, x25, x10, 0xfffffefffeffffff, 0xfffffffffeffffff, 0x10000000000, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_21_0)


andn_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0xffffff7ffdffffff), rs1:x24(0xfffffffffdffffff), rs2:x9(0x0000008000000000)
    TEST_RR_OP(andn, x8, x24, x9, 0xffffff7ffdffffff, 0xfffffffffdffffff, 0x8000000000, x1, 0, x2)

andn_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0xffffffbffbffffff), rs1:x23(0xfffffffffbffffff), rs2:x8(0x0000004000000000)
    TEST_RR_OP(andn, x9, x23, x8, 0xffffffbffbffffff, 0xfffffffffbffffff, 0x4000000000, x1, 8, x2)

andn_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0xffffffdff7ffffff), rs1:x22(0xfffffffff7ffffff), rs2:x7(0x0000002000000000)
    TEST_RR_OP(andn, x10, x22, x7, 0xffffffdff7ffffff, 0xfffffffff7ffffff, 0x2000000000, x1, 16, x2)

andn_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0xffffffefefffffff), rs1:x21(0xffffffffefffffff), rs2:x6(0x0000001000000000)
    TEST_RR_OP(andn, x11, x21, x6, 0xffffffefefffffff, 0xffffffffefffffff, 0x1000000000, x1, 24, x2)

andn_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0xfffffff7dfffffff), rs1:x20(0xffffffffdfffffff), rs2:x5(0x0000000800000000)
    TEST_RR_OP(andn, x12, x20, x5, 0xfffffff7dfffffff, 0xffffffffdfffffff, 0x800000000, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x5,signature_22_0)


andn_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0xfffffffbbfffffff), rs1:x19(0xffffffffbfffffff), rs2:x4(0x0000000400000000)
    TEST_RR_OP(andn, x13, x19, x4, 0xfffffffbbfffffff, 0xffffffffbfffffff, 0x400000000, x5, 0, x6)

andn_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0xfffffffd7fffffff), rs1:x18(0xffffffff7fffffff), rs2:x3(0x0000000200000000)
    TEST_RR_OP(andn, x14, x18, x3, 0xfffffffd7fffffff, 0xffffffff7fffffff, 0x200000000, x5, 8, x6)

andn_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0xfffffffeffffffff), rs1:x17(0xfffffffeffffffff), rs2:x2(0x0000000100000000)
    TEST_RR_OP(andn, x15, x17, x2, 0xfffffffeffffffff, 0xfffffffeffffffff, 0x100000000, x5, 16, x6)

andn_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0xfffffffd7fffffff), rs1:x16(0xfffffffdffffffff), rs2:x1(0x0000000080000000)
    TEST_RR_OP(andn, x16, x16, x1, 0xfffffffd7fffffff, 0xfffffffdffffffff, 0x80000000, x5, 24, x6)

andn_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0xfffffffbbfffffff), rs1:x15(0xfffffffbffffffff), rs2:x31(0x0000000040000000)
    TEST_RR_OP(andn, x17, x15, x31, 0xfffffffbbfffffff, 0xfffffffbffffffff, 0x40000000, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_23_0)


andn_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0xfffffff7dfffffff), rs1:x14(0xfffffff7ffffffff), rs2:x30(0x0000000020000000)
    TEST_RR_OP(andn, x18, x14, x30, 0xfffffff7dfffffff, 0xfffffff7ffffffff, 0x20000000, x1, 0, x2)

andn_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0xffffffefefffffff), rs1:x13(0xffffffefffffffff), rs2:x29(0x0000000010000000)
    TEST_RR_OP(andn, x19, x13, x29, 0xffffffefefffffff, 0xffffffefffffffff, 0x10000000, x1, 8, x2)

andn_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0xffffffdff7ffffff), rs1:x12(0xffffffdfffffffff), rs2:x28(0x0000000008000000)
    TEST_RR_OP(andn, x20, x12, x28, 0xffffffdff7ffffff, 0xffffffdfffffffff, 0x8000000, x1, 16, x2)

andn_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0xffffffbffbffffff), rs1:x11(0xffffffbfffffffff), rs2:x27(0x0000000004000000)
    TEST_RR_OP(andn, x21, x11, x27, 0xffffffbffbffffff, 0xffffffbfffffffff, 0x4000000, x1, 24, x2)

andn_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0xffffff7ffdffffff), rs1:x10(0xffffff7fffffffff), rs2:x26(0x0000000002000000)
    TEST_RR_OP(andn, x22, x10, x26, 0xffffff7ffdffffff, 0xffffff7fffffffff, 0x2000000, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_24_0)


andn_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0xfffffefffeffffff), rs1:x9(0xfffffeffffffffff), rs2:x25(0x0000000001000000)
    TEST_RR_OP(andn, x23, x9, x25, 0xfffffefffeffffff, 0xfffffeffffffffff, 0x1000000, x1, 0, x2)

andn_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0xfffffdffff7fffff), rs1:x8(0xfffffdffffffffff), rs2:x24(0x0000000000800000)
    TEST_RR_OP(andn, x24, x8, x24, 0xfffffdffff7fffff, 0xfffffdffffffffff, 0x800000, x1, 8, x2)

andn_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0xfffffbffffbfffff), rs1:x7(0xfffffbffffffffff), rs2:x23(0x0000000000400000)
    TEST_RR_OP(andn, x25, x7, x23, 0xfffffbffffbfffff, 0xfffffbffffffffff, 0x400000, x1, 16, x2)

andn_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0xfffff7ffffdfffff), rs1:x6(0xfffff7ffffffffff), rs2:x22(0x0000000000200000)
    TEST_RR_OP(andn, x26, x6, x22, 0xfffff7ffffdfffff, 0xfffff7ffffffffff, 0x200000, x1, 24, x2)

andn_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0xffffefffffefffff), rs1:x5(0xffffefffffffffff), rs2:x21(0x0000000000100000)
    TEST_RR_OP(andn, x27, x5, x21, 0xffffefffffefffff, 0xffffefffffffffff, 0x100000, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x5,signature_25_0)


andn_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0xffffdffffff7ffff), rs1:x4(0xffffdfffffffffff), rs2:x20(0x0000000000080000)
    TEST_RR_OP(andn, x28, x4, x20, 0xffffdffffff7ffff, 0xffffdfffffffffff, 0x80000, x5, 0, x6)

andn_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0xffffbffffffbffff), rs1:x3(0xffffbfffffffffff), rs2:x19(0x0000000000040000)
    TEST_RR_OP(andn, x29, x3, x19, 0xffffbffffffbffff, 0xffffbfffffffffff, 0x40000, x5, 8, x6)

andn_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0xffff7ffffffdffff), rs1:x2(0xffff7fffffffffff), rs2:x18(0x0000000000020000)
    TEST_RR_OP(andn, x30, x2, x18, 0xffff7ffffffdffff, 0xffff7fffffffffff, 0x20000, x5, 16, x6)

andn_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0xfffefffffffeffff), rs1:x1(0xfffeffffffffffff), rs2:x17(0x0000000000010000)
    TEST_RR_OP(andn, x31, x1, x17, 0xfffefffffffeffff, 0xfffeffffffffffff, 0x10000, x5, 24, x6)

andn_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0xfffdffffffff7fff), rs1:x31(0xfffdffffffffffff), rs2:x16(0x0000000000008000)
    TEST_RR_OP(andn, x1, x31, x16, 0xfffdffffffff7fff, 0xfffdffffffffffff, 0x8000, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_26_0)


andn_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0xfffbffffffffbfff), rs1:x30(0xfffbffffffffffff), rs2:x15(0x0000000000004000)
    TEST_RR_OP(andn, x2, x30, x15, 0xfffbffffffffbfff, 0xfffbffffffffffff, 0x4000, x1, 0, x7)

andn_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0xfff7ffffffffdfff), rs1:x29(0xfff7ffffffffffff), rs2:x14(0x0000000000002000)
    TEST_RR_OP(andn, x3, x29, x14, 0xfff7ffffffffdfff, 0xfff7ffffffffffff, 0x2000, x1, 8, x7)

andn_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0xffefffffffffefff), rs1:x28(0xffefffffffffffff), rs2:x13(0x0000000000001000)
    TEST_RR_OP(andn, x4, x28, x13, 0xffefffffffffefff, 0xffefffffffffffff, 0x1000, x1, 16, x7)

andn_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0xffdffffffffff7ff), rs1:x27(0xffdfffffffffffff), rs2:x12(0x0000000000000800)
    TEST_RR_OP(andn, x5, x27, x12, 0xffdffffffffff7ff, 0xffdfffffffffffff, 0x800, x1, 24, x7)

andn_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0xffbffffffffffbff), rs1:x26(0xffbfffffffffffff), rs2:x11(0x0000000000000400)
    TEST_RR_OP(andn, x6, x26, x11, 0xffbffffffffffbff, 0xffbfffffffffffff, 0x400, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_27_0)


andn_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0xff7ffffffffffdff), rs1:x25(0xff7fffffffffffff), rs2:x10(0x0000000000000200)
    TEST_RR_OP(andn, x7, x25, x10, 0xff7ffffffffffdff, 0xff7fffffffffffff, 0x200, x1, 0, x2)

andn_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0xfefffffffffffeff), rs1:x24(0xfeffffffffffffff), rs2:x9(0x0000000000000100)
    TEST_RR_OP(andn, x8, x24, x9, 0xfefffffffffffeff, 0xfeffffffffffffff, 0x100, x1, 8, x2)

andn_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0xfdffffffffffff7f), rs1:x23(0xfdffffffffffffff), rs2:x8(0x0000000000000080)
    TEST_RR_OP(andn, x9, x23, x8, 0xfdffffffffffff7f, 0xfdffffffffffffff, 0x80, x1, 16, x2)

andn_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0xfbffffffffffffbf), rs1:x22(0xfbffffffffffffff), rs2:x7(0x0000000000000040)
    TEST_RR_OP(andn, x10, x22, x7, 0xfbffffffffffffbf, 0xfbffffffffffffff, 0x40, x1, 24, x2)

andn_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0xf7ffffffffffffdf), rs1:x21(0xf7ffffffffffffff), rs2:x6(0x0000000000000020)
    TEST_RR_OP(andn, x11, x21, x6, 0xf7ffffffffffffdf, 0xf7ffffffffffffff, 0x20, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x6,signature_28_0)


andn_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0xefffffffffffffef), rs1:x20(0xefffffffffffffff), rs2:x5(0x0000000000000010)
    TEST_RR_OP(andn, x12, x20, x5, 0xefffffffffffffef, 0xefffffffffffffff, 0x10, x6, 0, x7)

andn_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0xdffffffffffffff7), rs1:x19(0xdfffffffffffffff), rs2:x4(0x0000000000000008)
    TEST_RR_OP(andn, x13, x19, x4, 0xdffffffffffffff7, 0xdfffffffffffffff, 0x8, x6, 8, x7)

andn_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0xbffffffffffffffb), rs1:x18(0xbfffffffffffffff), rs2:x3(0x0000000000000004)
    TEST_RR_OP(andn, x14, x18, x3, 0xbffffffffffffffb, 0xbfffffffffffffff, 0x4, x6, 16, x7)

andn_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0x7ffffffffffffffd), rs1:x17(0x7fffffffffffffff), rs2:x2(0x0000000000000002)
    TEST_RR_OP(andn, x15, x17, x2, 0x7ffffffffffffffd, 0x7fffffffffffffff, 0x2, x6, 24, x7)

andn_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0xfffffffffffffffe), rs1:x16(0xffffffffffffffff), rs2:x1(0x0000000000000001)
    TEST_RR_OP(andn, x16, x16, x1, 0xfffffffffffffffe, 0xffffffffffffffff, 0x1, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_29_0)


andn_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000001), rs1:x15(0x0000000000000001), rs2:x31(0x0000000000000000)
    TEST_RR_OP(andn, x17, x15, x31, 0x0000000000000001, 0x1, 0x0, x1, 0, x2)

andn_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000002), rs1:x14(0x0000000000000002), rs2:x30(0x0000000000000000)
    TEST_RR_OP(andn, x18, x14, x30, 0x0000000000000002, 0x2, 0x0, x1, 8, x2)

andn_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000004), rs1:x13(0x0000000000000004), rs2:x29(0x0000000000000000)
    TEST_RR_OP(andn, x19, x13, x29, 0x0000000000000004, 0x4, 0x0, x1, 16, x2)

andn_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000008), rs1:x12(0x0000000000000008), rs2:x28(0x0000000000000000)
    TEST_RR_OP(andn, x20, x12, x28, 0x0000000000000008, 0x8, 0x0, x1, 24, x2)

andn_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000010), rs1:x11(0x0000000000000010), rs2:x27(0x0000000000000000)
    TEST_RR_OP(andn, x21, x11, x27, 0x0000000000000010, 0x10, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_30_0)


andn_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000020), rs1:x10(0x0000000000000020), rs2:x26(0x0000000000000000)
    TEST_RR_OP(andn, x22, x10, x26, 0x0000000000000020, 0x20, 0x0, x1, 0, x2)

andn_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000040), rs1:x9(0x0000000000000040), rs2:x25(0x0000000000000000)
    TEST_RR_OP(andn, x23, x9, x25, 0x0000000000000040, 0x40, 0x0, x1, 8, x2)

andn_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000080), rs1:x8(0x0000000000000080), rs2:x24(0x0000000000000000)
    TEST_RR_OP(andn, x24, x8, x24, 0x0000000000000080, 0x80, 0x0, x1, 16, x2)

andn_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000100), rs1:x7(0x0000000000000100), rs2:x23(0x0000000000000000)
    TEST_RR_OP(andn, x25, x7, x23, 0x0000000000000100, 0x100, 0x0, x1, 24, x2)

andn_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000200), rs1:x6(0x0000000000000200), rs2:x22(0x0000000000000000)
    TEST_RR_OP(andn, x26, x6, x22, 0x0000000000000200, 0x200, 0x0, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x6,signature_31_0)


andn_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000400), rs1:x5(0x0000000000000400), rs2:x21(0x0000000000000000)
    TEST_RR_OP(andn, x27, x5, x21, 0x0000000000000400, 0x400, 0x0, x6, 0, x7)

andn_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000800), rs1:x4(0x0000000000000800), rs2:x20(0x0000000000000000)
    TEST_RR_OP(andn, x28, x4, x20, 0x0000000000000800, 0x800, 0x0, x6, 8, x7)

andn_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0000000000001000), rs1:x3(0x0000000000001000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(andn, x29, x3, x19, 0x0000000000001000, 0x1000, 0x0, x6, 16, x7)

andn_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000000002000), rs1:x2(0x0000000000002000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(andn, x30, x2, x18, 0x0000000000002000, 0x2000, 0x0, x6, 24, x7)

andn_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0000000000004000), rs1:x1(0x0000000000004000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(andn, x31, x1, x17, 0x0000000000004000, 0x4000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x6,signature_32_0)


andn_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000000008000), rs1:x31(0x0000000000008000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(andn, x1, x31, x16, 0x0000000000008000, 0x8000, 0x0, x6, 0, x7)

andn_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000000000010000), rs1:x30(0x0000000000010000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(andn, x2, x30, x15, 0x0000000000010000, 0x10000, 0x0, x6, 8, x7)

andn_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000000020000), rs1:x29(0x0000000000020000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(andn, x3, x29, x14, 0x0000000000020000, 0x20000, 0x0, x6, 16, x7)

andn_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000000040000), rs1:x28(0x0000000000040000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(andn, x4, x28, x13, 0x0000000000040000, 0x40000, 0x0, x6, 24, x7)

andn_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000000080000), rs1:x27(0x0000000000080000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(andn, x5, x27, x12, 0x0000000000080000, 0x80000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_33_0)


andn_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000000100000), rs1:x26(0x0000000000100000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(andn, x6, x26, x11, 0x0000000000100000, 0x100000, 0x0, x1, 0, x2)

andn_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000000200000), rs1:x25(0x0000000000200000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(andn, x7, x25, x10, 0x0000000000200000, 0x200000, 0x0, x1, 8, x2)

andn_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000000400000), rs1:x24(0x0000000000400000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(andn, x8, x24, x9, 0x0000000000400000, 0x400000, 0x0, x1, 16, x2)

andn_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000000800000), rs1:x23(0x0000000000800000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(andn, x9, x23, x8, 0x0000000000800000, 0x800000, 0x0, x1, 24, x2)

andn_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000001000000), rs1:x22(0x0000000001000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(andn, x10, x22, x7, 0x0000000001000000, 0x1000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_34_0)


andn_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000002000000), rs1:x21(0x0000000002000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(andn, x11, x21, x6, 0x0000000002000000, 0x2000000, 0x0, x1, 0, x7)

andn_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000004000000), rs1:x20(0x0000000004000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(andn, x12, x20, x5, 0x0000000004000000, 0x4000000, 0x0, x1, 8, x7)

andn_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000008000000), rs1:x19(0x0000000008000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(andn, x13, x19, x4, 0x0000000008000000, 0x8000000, 0x0, x1, 16, x7)

andn_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000010000000), rs1:x18(0x0000000010000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(andn, x14, x18, x3, 0x0000000010000000, 0x10000000, 0x0, x1, 24, x7)

andn_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000020000000), rs1:x17(0x0000000020000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(andn, x15, x17, x2, 0x0000000020000000, 0x20000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x2,signature_35_0)


andn_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000040000000), rs1:x16(0x0000000040000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(andn, x16, x16, x1, 0x0000000040000000, 0x40000000, 0x0, x2, 0, x3)

andn_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000000080000000), rs1:x15(0x0000000080000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(andn, x17, x15, x31, 0x0000000080000000, 0x80000000, 0x0, x2, 8, x3)

andn_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000100000000), rs1:x14(0x0000000100000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(andn, x18, x14, x30, 0x0000000100000000, 0x100000000, 0x0, x2, 16, x3)

andn_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000200000000), rs1:x13(0x0000000200000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(andn, x19, x13, x29, 0x0000000200000000, 0x200000000, 0x0, x2, 24, x3)

andn_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000000400000000), rs1:x12(0x0000000400000000), rs2:x28(0x0000000000000000)
    TEST_RR_OP(andn, x20, x12, x28, 0x0000000400000000, 0x400000000, 0x0, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_36_0)


andn_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000800000000), rs1:x11(0x0000000800000000), rs2:x27(0x0000000000000000)
    TEST_RR_OP(andn, x21, x11, x27, 0x0000000800000000, 0x800000000, 0x0, x1, 0, x2)

andn_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000001000000000), rs1:x10(0x0000001000000000), rs2:x26(0x0000000000000000)
    TEST_RR_OP(andn, x22, x10, x26, 0x0000001000000000, 0x1000000000, 0x0, x1, 8, x2)

andn_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000002000000000), rs1:x9(0x0000002000000000), rs2:x25(0x0000000000000000)
    TEST_RR_OP(andn, x23, x9, x25, 0x0000002000000000, 0x2000000000, 0x0, x1, 16, x2)

andn_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000004000000000), rs1:x8(0x0000004000000000), rs2:x24(0x0000000000000000)
    TEST_RR_OP(andn, x24, x8, x24, 0x0000004000000000, 0x4000000000, 0x0, x1, 24, x2)

andn_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000008000000000), rs1:x7(0x0000008000000000), rs2:x23(0x0000000000000000)
    TEST_RR_OP(andn, x25, x7, x23, 0x0000008000000000, 0x8000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_37_0)


andn_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000010000000000), rs1:x6(0x0000010000000000), rs2:x22(0x0000000000000000)
    TEST_RR_OP(andn, x26, x6, x22, 0x0000010000000000, 0x10000000000, 0x0, x1, 0, x7)

andn_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000020000000000), rs1:x5(0x0000020000000000), rs2:x21(0x0000000000000000)
    TEST_RR_OP(andn, x27, x5, x21, 0x0000020000000000, 0x20000000000, 0x0, x1, 8, x7)

andn_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000040000000000), rs1:x4(0x0000040000000000), rs2:x20(0x0000000000000000)
    TEST_RR_OP(andn, x28, x4, x20, 0x0000040000000000, 0x40000000000, 0x0, x1, 16, x7)

andn_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000080000000000), rs1:x3(0x0000080000000000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(andn, x29, x3, x19, 0x0000080000000000, 0x80000000000, 0x0, x1, 24, x7)

andn_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000100000000000), rs1:x2(0x0000100000000000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(andn, x30, x2, x18, 0x0000100000000000, 0x100000000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x5,signature_38_0)


andn_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000200000000000), rs1:x1(0x0000200000000000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(andn, x31, x1, x17, 0x0000200000000000, 0x200000000000, 0x0, x5, 0, x6)

andn_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000400000000000), rs1:x31(0x0000400000000000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(andn, x1, x31, x16, 0x0000400000000000, 0x400000000000, 0x0, x5, 8, x6)

andn_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000800000000000), rs1:x30(0x0000800000000000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(andn, x2, x30, x15, 0x0000800000000000, 0x800000000000, 0x0, x5, 16, x6)

andn_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0001000000000000), rs1:x29(0x0001000000000000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(andn, x3, x29, x14, 0x0001000000000000, 0x1000000000000, 0x0, x5, 24, x6)

andn_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0002000000000000), rs1:x28(0x0002000000000000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(andn, x4, x28, x13, 0x0002000000000000, 0x2000000000000, 0x0, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_39_0)


andn_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0004000000000000), rs1:x27(0x0004000000000000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(andn, x5, x27, x12, 0x0004000000000000, 0x4000000000000, 0x0, x1, 0, x2)

andn_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0008000000000000), rs1:x26(0x0008000000000000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(andn, x6, x26, x11, 0x0008000000000000, 0x8000000000000, 0x0, x1, 8, x2)

andn_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0010000000000000), rs1:x25(0x0010000000000000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(andn, x7, x25, x10, 0x0010000000000000, 0x10000000000000, 0x0, x1, 16, x2)

andn_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0020000000000000), rs1:x24(0x0020000000000000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(andn, x8, x24, x9, 0x0020000000000000, 0x20000000000000, 0x0, x1, 24, x2)

andn_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0040000000000000), rs1:x23(0x0040000000000000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(andn, x9, x23, x8, 0x0040000000000000, 0x40000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_40_0)


andn_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0080000000000000), rs1:x22(0x0080000000000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(andn, x10, x22, x7, 0x0080000000000000, 0x80000000000000, 0x0, x1, 0, x2)

andn_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0100000000000000), rs1:x21(0x0100000000000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(andn, x11, x21, x6, 0x0100000000000000, 0x100000000000000, 0x0, x1, 8, x2)

andn_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0200000000000000), rs1:x20(0x0200000000000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(andn, x12, x20, x5, 0x0200000000000000, 0x200000000000000, 0x0, x1, 16, x2)

andn_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0400000000000000), rs1:x19(0x0400000000000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(andn, x13, x19, x4, 0x0400000000000000, 0x400000000000000, 0x0, x1, 24, x2)

andn_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0800000000000000), rs1:x18(0x0800000000000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(andn, x14, x18, x3, 0x0800000000000000, 0x800000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x3,signature_41_0)


andn_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x1000000000000000), rs1:x17(0x1000000000000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(andn, x15, x17, x2, 0x1000000000000000, 0x1000000000000000, 0x0, x3, 0, x4)

andn_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x2000000000000000), rs1:x16(0x2000000000000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(andn, x16, x16, x1, 0x2000000000000000, 0x2000000000000000, 0x0, x3, 8, x4)

andn_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x4000000000000000), rs1:x15(0x4000000000000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(andn, x17, x15, x31, 0x4000000000000000, 0x4000000000000000, 0x0, x3, 16, x4)

andn_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x8000000000000000), rs1:x14(0x8000000000000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(andn, x18, x14, x30, 0x8000000000000000, 0x8000000000000000, 0x0, x3, 24, x4)

andn_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(andn, x19, x13, x29, 0x0000000000000000, 0x0, 0x0, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_42_0)


andn_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0xfffffffffffffffe), rs1:x12(0xfffffffffffffffe), rs2:x28(0x0000000000000000)
    TEST_RR_OP(andn, x20, x12, x28, 0xfffffffffffffffe, 0xfffffffffffffffe, 0x0, x1, 0, x2)

andn_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0xfffffffffffffffd), rs1:x11(0xfffffffffffffffd), rs2:x27(0x0000000000000000)
    TEST_RR_OP(andn, x21, x11, x27, 0xfffffffffffffffd, 0xfffffffffffffffd, 0x0, x1, 8, x2)

andn_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0xfffffffffffffffb), rs1:x10(0xfffffffffffffffb), rs2:x26(0x0000000000000000)
    TEST_RR_OP(andn, x22, x10, x26, 0xfffffffffffffffb, 0xfffffffffffffffb, 0x0, x1, 16, x2)

andn_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0xfffffffffffffff7), rs1:x9(0xfffffffffffffff7), rs2:x25(0x0000000000000000)
    TEST_RR_OP(andn, x23, x9, x25, 0xfffffffffffffff7, 0xfffffffffffffff7, 0x0, x1, 24, x2)

andn_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffef), rs1:x8(0xffffffffffffffef), rs2:x24(0x0000000000000000)
    TEST_RR_OP(andn, x24, x8, x24, 0xffffffffffffffef, 0xffffffffffffffef, 0x0, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_43_0)


andn_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffdf), rs1:x7(0xffffffffffffffdf), rs2:x23(0x0000000000000000)
    TEST_RR_OP(andn, x25, x7, x23, 0xffffffffffffffdf, 0xffffffffffffffdf, 0x0, x1, 0, x2)

andn_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffbf), rs1:x6(0xffffffffffffffbf), rs2:x22(0x0000000000000000)
    TEST_RR_OP(andn, x26, x6, x22, 0xffffffffffffffbf, 0xffffffffffffffbf, 0x0, x1, 8, x2)

andn_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffff7f), rs1:x5(0xffffffffffffff7f), rs2:x21(0x0000000000000000)
    TEST_RR_OP(andn, x27, x5, x21, 0xffffffffffffff7f, 0xffffffffffffff7f, 0x0, x1, 16, x2)

andn_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0xfffffffffffffeff), rs1:x4(0xfffffffffffffeff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(andn, x28, x4, x20, 0xfffffffffffffeff, 0xfffffffffffffeff, 0x0, x1, 24, x2)

andn_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0xfffffffffffffdff), rs1:x3(0xfffffffffffffdff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(andn, x29, x3, x19, 0xfffffffffffffdff, 0xfffffffffffffdff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x4,signature_44_0)


andn_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0xfffffffffffffbff), rs1:x2(0xfffffffffffffbff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(andn, x30, x2, x18, 0xfffffffffffffbff, 0xfffffffffffffbff, 0x0, x4, 0, x5)

andn_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0xfffffffffffff7ff), rs1:x1(0xfffffffffffff7ff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(andn, x31, x1, x17, 0xfffffffffffff7ff, 0xfffffffffffff7ff, 0x0, x4, 8, x5)

andn_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffefff), rs1:x31(0xffffffffffffefff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(andn, x1, x31, x16, 0xffffffffffffefff, 0xffffffffffffefff, 0x0, x4, 16, x5)

andn_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffdfff), rs1:x30(0xffffffffffffdfff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(andn, x2, x30, x15, 0xffffffffffffdfff, 0xffffffffffffdfff, 0x0, x4, 24, x5)

andn_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffbfff), rs1:x29(0xffffffffffffbfff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(andn, x3, x29, x14, 0xffffffffffffbfff, 0xffffffffffffbfff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_45_0)


andn_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffff7fff), rs1:x28(0xffffffffffff7fff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(andn, x4, x28, x13, 0xffffffffffff7fff, 0xffffffffffff7fff, 0x0, x1, 0, x2)

andn_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0xfffffffffffeffff), rs1:x27(0xfffffffffffeffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(andn, x5, x27, x12, 0xfffffffffffeffff, 0xfffffffffffeffff, 0x0, x1, 8, x2)

andn_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0xfffffffffffdffff), rs1:x26(0xfffffffffffdffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(andn, x6, x26, x11, 0xfffffffffffdffff, 0xfffffffffffdffff, 0x0, x1, 16, x2)

andn_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0xfffffffffffbffff), rs1:x25(0xfffffffffffbffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(andn, x7, x25, x10, 0xfffffffffffbffff, 0xfffffffffffbffff, 0x0, x1, 24, x2)

andn_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0xfffffffffff7ffff), rs1:x24(0xfffffffffff7ffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(andn, x8, x24, x9, 0xfffffffffff7ffff, 0xfffffffffff7ffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_46_0)


andn_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffefffff), rs1:x23(0xffffffffffefffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(andn, x9, x23, x8, 0xffffffffffefffff, 0xffffffffffefffff, 0x0, x1, 0, x2)

andn_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffdfffff), rs1:x22(0xffffffffffdfffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(andn, x10, x22, x7, 0xffffffffffdfffff, 0xffffffffffdfffff, 0x0, x1, 8, x2)

andn_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffbfffff), rs1:x21(0xffffffffffbfffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(andn, x11, x21, x6, 0xffffffffffbfffff, 0xffffffffffbfffff, 0x0, x1, 16, x2)

andn_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0xffffffffff7fffff), rs1:x20(0xffffffffff7fffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(andn, x12, x20, x5, 0xffffffffff7fffff, 0xffffffffff7fffff, 0x0, x1, 24, x2)

andn_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0xfffffffffeffffff), rs1:x19(0xfffffffffeffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(andn, x13, x19, x4, 0xfffffffffeffffff, 0xfffffffffeffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x4,signature_47_0)


andn_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0xfffffffffdffffff), rs1:x18(0xfffffffffdffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(andn, x14, x18, x3, 0xfffffffffdffffff, 0xfffffffffdffffff, 0x0, x4, 0, x5)

andn_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0xfffffffffbffffff), rs1:x17(0xfffffffffbffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(andn, x15, x17, x2, 0xfffffffffbffffff, 0xfffffffffbffffff, 0x0, x4, 8, x5)

andn_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0xfffffffff7ffffff), rs1:x16(0xfffffffff7ffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(andn, x16, x16, x1, 0xfffffffff7ffffff, 0xfffffffff7ffffff, 0x0, x4, 16, x5)

andn_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0xffffffffefffffff), rs1:x15(0xffffffffefffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(andn, x17, x15, x31, 0xffffffffefffffff, 0xffffffffefffffff, 0x0, x4, 24, x5)

andn_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0xffffffffdfffffff), rs1:x14(0xffffffffdfffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(andn, x18, x14, x30, 0xffffffffdfffffff, 0xffffffffdfffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_48_0)


andn_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0xffffffffbfffffff), rs1:x13(0xffffffffbfffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(andn, x19, x13, x29, 0xffffffffbfffffff, 0xffffffffbfffffff, 0x0, x1, 0, x2)

andn_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0xffffffff7fffffff), rs1:x12(0xffffffff7fffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(andn, x20, x12, x28, 0xffffffff7fffffff, 0xffffffff7fffffff, 0x0, x1, 8, x2)

andn_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0xfffffffeffffffff), rs1:x11(0xfffffffeffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(andn, x21, x11, x27, 0xfffffffeffffffff, 0xfffffffeffffffff, 0x0, x1, 16, x2)

andn_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0xfffffffdffffffff), rs1:x10(0xfffffffdffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(andn, x22, x10, x26, 0xfffffffdffffffff, 0xfffffffdffffffff, 0x0, x1, 24, x2)

andn_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0xfffffffbffffffff), rs1:x9(0xfffffffbffffffff), rs2:x25(0x0000000000000000)
    TEST_RR_OP(andn, x23, x9, x25, 0xfffffffbffffffff, 0xfffffffbffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_49_0)


andn_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0xfffffff7ffffffff), rs1:x8(0xfffffff7ffffffff), rs2:x24(0x0000000000000000)
    TEST_RR_OP(andn, x24, x8, x24, 0xfffffff7ffffffff, 0xfffffff7ffffffff, 0x0, x1, 0, x2)

andn_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0xffffffefffffffff), rs1:x7(0xffffffefffffffff), rs2:x23(0x0000000000000000)
    TEST_RR_OP(andn, x25, x7, x23, 0xffffffefffffffff, 0xffffffefffffffff, 0x0, x1, 8, x2)

andn_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0xffffffdfffffffff), rs1:x6(0xffffffdfffffffff), rs2:x22(0x0000000000000000)
    TEST_RR_OP(andn, x26, x6, x22, 0xffffffdfffffffff, 0xffffffdfffffffff, 0x0, x1, 16, x2)

andn_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0xffffffbfffffffff), rs1:x5(0xffffffbfffffffff), rs2:x21(0x0000000000000000)
    TEST_RR_OP(andn, x27, x5, x21, 0xffffffbfffffffff, 0xffffffbfffffffff, 0x0, x1, 24, x2)

andn_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0xffffff7fffffffff), rs1:x4(0xffffff7fffffffff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(andn, x28, x4, x20, 0xffffff7fffffffff, 0xffffff7fffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x4,signature_50_0)


andn_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0xfffffeffffffffff), rs1:x3(0xfffffeffffffffff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(andn, x29, x3, x19, 0xfffffeffffffffff, 0xfffffeffffffffff, 0x0, x4, 0, x5)

andn_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0xfffffdffffffffff), rs1:x2(0xfffffdffffffffff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(andn, x30, x2, x18, 0xfffffdffffffffff, 0xfffffdffffffffff, 0x0, x4, 8, x5)

andn_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0xfffffbffffffffff), rs1:x1(0xfffffbffffffffff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(andn, x31, x1, x17, 0xfffffbffffffffff, 0xfffffbffffffffff, 0x0, x4, 16, x5)

andn_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0xfffff7ffffffffff), rs1:x31(0xfffff7ffffffffff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(andn, x1, x31, x16, 0xfffff7ffffffffff, 0xfffff7ffffffffff, 0x0, x4, 24, x5)

andn_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0xffffefffffffffff), rs1:x30(0xffffefffffffffff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(andn, x2, x30, x15, 0xffffefffffffffff, 0xffffefffffffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_51_0)


andn_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0xffffdfffffffffff), rs1:x29(0xffffdfffffffffff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(andn, x3, x29, x14, 0xffffdfffffffffff, 0xffffdfffffffffff, 0x0, x1, 0, x2)

andn_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0xffffbfffffffffff), rs1:x28(0xffffbfffffffffff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(andn, x4, x28, x13, 0xffffbfffffffffff, 0xffffbfffffffffff, 0x0, x1, 8, x2)

andn_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0xffff7fffffffffff), rs1:x27(0xffff7fffffffffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(andn, x5, x27, x12, 0xffff7fffffffffff, 0xffff7fffffffffff, 0x0, x1, 16, x2)

andn_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0xfffeffffffffffff), rs1:x26(0xfffeffffffffffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(andn, x6, x26, x11, 0xfffeffffffffffff, 0xfffeffffffffffff, 0x0, x1, 24, x2)

andn_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0xfffdffffffffffff), rs1:x25(0xfffdffffffffffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(andn, x7, x25, x10, 0xfffdffffffffffff, 0xfffdffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_52_0)


andn_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0xfffbffffffffffff), rs1:x24(0xfffbffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(andn, x8, x24, x9, 0xfffbffffffffffff, 0xfffbffffffffffff, 0x0, x1, 0, x2)

andn_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0xfff7ffffffffffff), rs1:x23(0xfff7ffffffffffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(andn, x9, x23, x8, 0xfff7ffffffffffff, 0xfff7ffffffffffff, 0x0, x1, 8, x2)

andn_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0xffefffffffffffff), rs1:x22(0xffefffffffffffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(andn, x10, x22, x7, 0xffefffffffffffff, 0xffefffffffffffff, 0x0, x1, 16, x2)

andn_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0xffdfffffffffffff), rs1:x21(0xffdfffffffffffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(andn, x11, x21, x6, 0xffdfffffffffffff, 0xffdfffffffffffff, 0x0, x1, 24, x2)

andn_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0xffbfffffffffffff), rs1:x20(0xffbfffffffffffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(andn, x12, x20, x5, 0xffbfffffffffffff, 0xffbfffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x5,signature_53_0)


andn_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0xff7fffffffffffff), rs1:x19(0xff7fffffffffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(andn, x13, x19, x4, 0xff7fffffffffffff, 0xff7fffffffffffff, 0x0, x5, 0, x6)

andn_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0xfeffffffffffffff), rs1:x18(0xfeffffffffffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(andn, x14, x18, x3, 0xfeffffffffffffff, 0xfeffffffffffffff, 0x0, x5, 8, x6)

andn_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0xfdffffffffffffff), rs1:x17(0xfdffffffffffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(andn, x15, x17, x2, 0xfdffffffffffffff, 0xfdffffffffffffff, 0x0, x5, 16, x6)

andn_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0xfbffffffffffffff), rs1:x16(0xfbffffffffffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(andn, x16, x16, x1, 0xfbffffffffffffff, 0xfbffffffffffffff, 0x0, x5, 24, x6)

andn_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0xf7ffffffffffffff), rs1:x15(0xf7ffffffffffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(andn, x17, x15, x31, 0xf7ffffffffffffff, 0xf7ffffffffffffff, 0x0, x5, 32, x6)

    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_54_0)


andn_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0xefffffffffffffff), rs1:x14(0xefffffffffffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(andn, x18, x14, x30, 0xefffffffffffffff, 0xefffffffffffffff, 0x0, x1, 0, x2)

andn_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0xdfffffffffffffff), rs1:x13(0xdfffffffffffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(andn, x19, x13, x29, 0xdfffffffffffffff, 0xdfffffffffffffff, 0x0, x1, 8, x2)

andn_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0xbfffffffffffffff), rs1:x12(0xbfffffffffffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(andn, x20, x12, x28, 0xbfffffffffffffff, 0xbfffffffffffffff, 0x0, x1, 16, x2)

andn_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0x7fffffffffffffff), rs1:x11(0x7fffffffffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(andn, x21, x11, x27, 0x7fffffffffffffff, 0x7fffffffffffffff, 0x0, x1, 24, x2)

andn_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xffffffffffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(andn, x22, x10, x26, 0xffffffffffffffff, 0xffffffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",andn)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",andn)

	RVTEST_SIGBASE(x1,signature_55_0)


andn_01_inst_270:
    // Test 270:  Test with rs1 == rs2
    // result rd:x23(0x0000000000000000), rs1:x25(0x10fd3dedadea5195), rs2:x25(0xdf7f3844121bcc23)
    TEST_RR_OP(andn, x23, x25, x25, 0x0000000000000000, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x1, 0, x2)

andn_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1), rs2:x24(0xf5adb41aa47d105b)
    TEST_RR_OP(andn, x0, x8, x24, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x1, 8, x2)

andn_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0xc9649f05a8e1a8bb), rs1:x7(0xc9649f05a8e1a8bb), rs2:x0(0x82f6747f707af2c0)
    TEST_RR_OP(andn, x25, x7, x0, 0xc9649f05a8e1a8bb, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x1, 16, x2)

andn_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb), rs2:x22(0x73a92fd4e19bfbc3)
    TEST_RR_OP(andn, x26, x0, x22, 0x0000000000000000, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x1, 24, x2)
	
#endif


RVTEST_CODE_END andn_01_code_end
RVTEST_CODE_BEGIN rolw_01_init rolw_01_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x6,signature_1_0)


rolw_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x000000006f528cad), rs1:x31(0x10fd3dedadea5195), rs2:x16(0xdf7f3844121bcc23)
    TEST_RR_OP(rolw, x1, x31, x16, 0x000000006f528cad, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x6, 0, x7)

rolw_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x000000000e97fdf6), rs1:x30(0xbd295ce2d2ffbec1), rs2:x15(0xf5adb41aa47d105b)
    TEST_RR_OP(rolw, x2, x30, x15, 0x000000000e97fdf6, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x6, 8, x7)

rolw_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0xffffffffa8e1a8bb), rs1:x29(0xc9649f05a8e1a8bb), rs2:x14(0x82f6747f707af2c0)
    TEST_RR_OP(rolw, x3, x29, x14, 0xffffffffa8e1a8bb, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x6, 16, x7)

rolw_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x00000000464cfe5a), rs1:x28(0x3541291848c99fcb), rs2:x13(0x73a92fd4e19bfbc3)
    TEST_RR_OP(rolw, x4, x28, x13, 0x00000000464cfe5a, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x6, 24, x7)

rolw_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0xffffffffa927a30e), rs1:x27(0x10a24740461d524f), rs2:x12(0x546b0e54528a10af)
    TEST_RR_OP(rolw, x5, x27, x12, 0xffffffffa927a30e, 0x10a24740461d524f, 0x546b0e54528a10af, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_2_0)


rolw_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x000000000857a945), rs1:x26(0x546b0e54528a10af), rs2:x11(0x10a24740461d524f)
    TEST_RR_OP(rolw, x6, x26, x11, 0x000000000857a945, 0x546b0e54528a10af, 0x10a24740461d524f, x1, 0, x2)

rolw_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0xffffffffdfde1f0c), rs1:x25(0x73a92fd4e19bfbc3), rs2:x10(0x3541291848c99fcb)
    TEST_RR_OP(rolw, x7, x25, x10, 0xffffffffdfde1f0c, 0x73a92fd4e19bfbc3, 0x3541291848c99fcb, x1, 8, x2)

rolw_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x000000000383d796), rs1:x24(0x82f6747f707af2c0), rs2:x9(0xc9649f05a8e1a8bb)
    TEST_RR_OP(rolw, x8, x24, x9, 0x000000000383d796, 0x82f6747f707af2c0, 0xc9649f05a8e1a8bb, x1, 16, x2)

rolw_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0x0000000048fa20b7), rs1:x23(0xf5adb41aa47d105b), rs2:x8(0xbd295ce2d2ffbec1)
    TEST_RR_OP(rolw, x9, x23, x8, 0x0000000048fa20b7, 0xf5adb41aa47d105b, 0xbd295ce2d2ffbec1, x1, 24, x2)

rolw_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0xffffffff84624379), rs1:x22(0xdf7f3844121bcc23), rs2:x7(0x10fd3dedadea5195)
    TEST_RR_OP(rolw, x10, x22, x7, 0xffffffff84624379, 0xdf7f3844121bcc23, 0x10fd3dedadea5195, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_3_0)


rolw_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0xffffffff80000000), rs1:x21(0x0000000000000001), rs2:x6(0xffffffffffffffff)
    TEST_RR_OP(rolw, x11, x21, x6, 0xffffffff80000000, 0x1, 0xffffffffffffffff, x1, 0, x7)

rolw_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000001), rs1:x20(0x0000000000000002), rs2:x5(0x7fffffffffffffff)
    TEST_RR_OP(rolw, x12, x20, x5, 0x0000000000000001, 0x2, 0x7fffffffffffffff, x1, 8, x7)

rolw_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000002), rs1:x19(0x0000000000000004), rs2:x4(0xbfffffffffffffff)
    TEST_RR_OP(rolw, x13, x19, x4, 0x0000000000000002, 0x4, 0xbfffffffffffffff, x1, 16, x7)

rolw_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000004), rs1:x18(0x0000000000000008), rs2:x3(0xdfffffffffffffff)
    TEST_RR_OP(rolw, x14, x18, x3, 0x0000000000000004, 0x8, 0xdfffffffffffffff, x1, 24, x7)

rolw_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000008), rs1:x17(0x0000000000000010), rs2:x2(0xefffffffffffffff)
    TEST_RR_OP(rolw, x15, x17, x2, 0x0000000000000008, 0x10, 0xefffffffffffffff, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x2,signature_4_0)


rolw_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000010), rs1:x16(0x0000000000000020), rs2:x1(0xf7ffffffffffffff)
    TEST_RR_OP(rolw, x16, x16, x1, 0x0000000000000010, 0x20, 0xf7ffffffffffffff, x2, 0, x3)

rolw_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000020), rs1:x15(0x0000000000000040), rs2:x31(0xfbffffffffffffff)
    TEST_RR_OP(rolw, x17, x15, x31, 0x0000000000000020, 0x40, 0xfbffffffffffffff, x2, 8, x3)

rolw_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000040), rs1:x14(0x0000000000000080), rs2:x30(0xfdffffffffffffff)
    TEST_RR_OP(rolw, x18, x14, x30, 0x0000000000000040, 0x80, 0xfdffffffffffffff, x2, 16, x3)

rolw_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000080), rs1:x13(0x0000000000000100), rs2:x29(0xfeffffffffffffff)
    TEST_RR_OP(rolw, x19, x13, x29, 0x0000000000000080, 0x100, 0xfeffffffffffffff, x2, 24, x3)

rolw_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000100), rs1:x12(0x0000000000000200), rs2:x28(0xff7fffffffffffff)
    TEST_RR_OP(rolw, x20, x12, x28, 0x0000000000000100, 0x200, 0xff7fffffffffffff, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_5_0)


rolw_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000200), rs1:x11(0x0000000000000400), rs2:x27(0xffbfffffffffffff)
    TEST_RR_OP(rolw, x21, x11, x27, 0x0000000000000200, 0x400, 0xffbfffffffffffff, x1, 0, x2)

rolw_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000400), rs1:x10(0x0000000000000800), rs2:x26(0xffdfffffffffffff)
    TEST_RR_OP(rolw, x22, x10, x26, 0x0000000000000400, 0x800, 0xffdfffffffffffff, x1, 8, x2)

rolw_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000800), rs1:x9(0x0000000000001000), rs2:x25(0xffefffffffffffff)
    TEST_RR_OP(rolw, x23, x9, x25, 0x0000000000000800, 0x1000, 0xffefffffffffffff, x1, 16, x2)

rolw_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0000000000001000), rs1:x8(0x0000000000002000), rs2:x24(0xfff7ffffffffffff)
    TEST_RR_OP(rolw, x24, x8, x24, 0x0000000000001000, 0x2000, 0xfff7ffffffffffff, x1, 24, x2)

rolw_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x0000000000002000), rs1:x7(0x0000000000004000), rs2:x23(0xfffbffffffffffff)
    TEST_RR_OP(rolw, x25, x7, x23, 0x0000000000002000, 0x4000, 0xfffbffffffffffff, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_6_0)


rolw_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x0000000000004000), rs1:x6(0x0000000000008000), rs2:x22(0xfffdffffffffffff)
    TEST_RR_OP(rolw, x26, x6, x22, 0x0000000000004000, 0x8000, 0xfffdffffffffffff, x1, 0, x7)

rolw_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x0000000000008000), rs1:x5(0x0000000000010000), rs2:x21(0xfffeffffffffffff)
    TEST_RR_OP(rolw, x27, x5, x21, 0x0000000000008000, 0x10000, 0xfffeffffffffffff, x1, 8, x7)

rolw_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x0000000000010000), rs1:x4(0x0000000000020000), rs2:x20(0xffff7fffffffffff)
    TEST_RR_OP(rolw, x28, x4, x20, 0x0000000000010000, 0x20000, 0xffff7fffffffffff, x1, 16, x7)

rolw_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0000000000020000), rs1:x3(0x0000000000040000), rs2:x19(0xffffbfffffffffff)
    TEST_RR_OP(rolw, x29, x3, x19, 0x0000000000020000, 0x40000, 0xffffbfffffffffff, x1, 24, x7)

rolw_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0000000000040000), rs1:x2(0x0000000000080000), rs2:x18(0xffffdfffffffffff)
    TEST_RR_OP(rolw, x30, x2, x18, 0x0000000000040000, 0x80000, 0xffffdfffffffffff, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x5,signature_7_0)


rolw_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0000000000080000), rs1:x1(0x0000000000100000), rs2:x17(0xffffefffffffffff)
    TEST_RR_OP(rolw, x31, x1, x17, 0x0000000000080000, 0x100000, 0xffffefffffffffff, x5, 0, x6)

rolw_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0000000000100000), rs1:x31(0x0000000000200000), rs2:x16(0xfffff7ffffffffff)
    TEST_RR_OP(rolw, x1, x31, x16, 0x0000000000100000, 0x200000, 0xfffff7ffffffffff, x5, 8, x6)

rolw_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0000000000200000), rs1:x30(0x0000000000400000), rs2:x15(0xfffffbffffffffff)
    TEST_RR_OP(rolw, x2, x30, x15, 0x0000000000200000, 0x400000, 0xfffffbffffffffff, x5, 16, x6)

rolw_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0000000000400000), rs1:x29(0x0000000000800000), rs2:x14(0xfffffdffffffffff)
    TEST_RR_OP(rolw, x3, x29, x14, 0x0000000000400000, 0x800000, 0xfffffdffffffffff, x5, 24, x6)

rolw_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x0000000000800000), rs1:x28(0x0000000001000000), rs2:x13(0xfffffeffffffffff)
    TEST_RR_OP(rolw, x4, x28, x13, 0x0000000000800000, 0x1000000, 0xfffffeffffffffff, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_8_0)


rolw_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x0000000001000000), rs1:x27(0x0000000002000000), rs2:x12(0xffffff7fffffffff)
    TEST_RR_OP(rolw, x5, x27, x12, 0x0000000001000000, 0x2000000, 0xffffff7fffffffff, x1, 0, x2)

rolw_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x0000000002000000), rs1:x26(0x0000000004000000), rs2:x11(0xffffffbfffffffff)
    TEST_RR_OP(rolw, x6, x26, x11, 0x0000000002000000, 0x4000000, 0xffffffbfffffffff, x1, 8, x2)

rolw_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0000000004000000), rs1:x25(0x0000000008000000), rs2:x10(0xffffffdfffffffff)
    TEST_RR_OP(rolw, x7, x25, x10, 0x0000000004000000, 0x8000000, 0xffffffdfffffffff, x1, 16, x2)

rolw_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0000000008000000), rs1:x24(0x0000000010000000), rs2:x9(0xffffffefffffffff)
    TEST_RR_OP(rolw, x8, x24, x9, 0x0000000008000000, 0x10000000, 0xffffffefffffffff, x1, 24, x2)

rolw_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0000000010000000), rs1:x23(0x0000000020000000), rs2:x8(0xfffffff7ffffffff)
    TEST_RR_OP(rolw, x9, x23, x8, 0x0000000010000000, 0x20000000, 0xfffffff7ffffffff, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_9_0)


rolw_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x0000000020000000), rs1:x22(0x0000000040000000), rs2:x7(0xfffffffbffffffff)
    TEST_RR_OP(rolw, x10, x22, x7, 0x0000000020000000, 0x40000000, 0xfffffffbffffffff, x1, 0, x2)

rolw_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0000000040000000), rs1:x21(0x0000000080000000), rs2:x6(0xfffffffdffffffff)
    TEST_RR_OP(rolw, x11, x21, x6, 0x0000000040000000, 0x80000000, 0xfffffffdffffffff, x1, 8, x2)

rolw_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000100000000), rs2:x5(0xfffffffeffffffff)
    TEST_RR_OP(rolw, x12, x20, x5, 0x0000000000000000, 0x100000000, 0xfffffffeffffffff, x1, 16, x2)

rolw_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000200000000), rs2:x4(0xffffffff7fffffff)
    TEST_RR_OP(rolw, x13, x19, x4, 0x0000000000000000, 0x200000000, 0xffffffff7fffffff, x1, 24, x2)

rolw_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0000000400000000), rs2:x3(0xffffffffbfffffff)
    TEST_RR_OP(rolw, x14, x18, x3, 0x0000000000000000, 0x400000000, 0xffffffffbfffffff, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x3,signature_10_0)


rolw_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x0000000800000000), rs2:x2(0xffffffffdfffffff)
    TEST_RR_OP(rolw, x15, x17, x2, 0x0000000000000000, 0x800000000, 0xffffffffdfffffff, x3, 0, x4)

rolw_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x0000001000000000), rs2:x1(0xffffffffefffffff)
    TEST_RR_OP(rolw, x16, x16, x1, 0x0000000000000000, 0x1000000000, 0xffffffffefffffff, x3, 8, x4)

rolw_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000002000000000), rs2:x31(0xfffffffff7ffffff)
    TEST_RR_OP(rolw, x17, x15, x31, 0x0000000000000000, 0x2000000000, 0xfffffffff7ffffff, x3, 16, x4)

rolw_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000004000000000), rs2:x30(0xfffffffffbffffff)
    TEST_RR_OP(rolw, x18, x14, x30, 0x0000000000000000, 0x4000000000, 0xfffffffffbffffff, x3, 24, x4)

rolw_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000008000000000), rs2:x29(0xfffffffffdffffff)
    TEST_RR_OP(rolw, x19, x13, x29, 0x0000000000000000, 0x8000000000, 0xfffffffffdffffff, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_11_0)


rolw_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000010000000000), rs2:x28(0xfffffffffeffffff)
    TEST_RR_OP(rolw, x20, x12, x28, 0x0000000000000000, 0x10000000000, 0xfffffffffeffffff, x1, 0, x2)

rolw_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000020000000000), rs2:x27(0xffffffffff7fffff)
    TEST_RR_OP(rolw, x21, x11, x27, 0x0000000000000000, 0x20000000000, 0xffffffffff7fffff, x1, 8, x2)

rolw_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000040000000000), rs2:x26(0xffffffffffbfffff)
    TEST_RR_OP(rolw, x22, x10, x26, 0x0000000000000000, 0x40000000000, 0xffffffffffbfffff, x1, 16, x2)

rolw_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000080000000000), rs2:x25(0xffffffffffdfffff)
    TEST_RR_OP(rolw, x23, x9, x25, 0x0000000000000000, 0x80000000000, 0xffffffffffdfffff, x1, 24, x2)

rolw_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000100000000000), rs2:x24(0xffffffffffefffff)
    TEST_RR_OP(rolw, x24, x8, x24, 0x0000000000000000, 0x100000000000, 0xffffffffffefffff, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_12_0)


rolw_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000200000000000), rs2:x23(0xfffffffffff7ffff)
    TEST_RR_OP(rolw, x25, x7, x23, 0x0000000000000000, 0x200000000000, 0xfffffffffff7ffff, x1, 0, x2)

rolw_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000400000000000), rs2:x22(0xfffffffffffbffff)
    TEST_RR_OP(rolw, x26, x6, x22, 0x0000000000000000, 0x400000000000, 0xfffffffffffbffff, x1, 8, x2)

rolw_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000800000000000), rs2:x21(0xfffffffffffdffff)
    TEST_RR_OP(rolw, x27, x5, x21, 0x0000000000000000, 0x800000000000, 0xfffffffffffdffff, x1, 16, x2)

rolw_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0001000000000000), rs2:x20(0xfffffffffffeffff)
    TEST_RR_OP(rolw, x28, x4, x20, 0x0000000000000000, 0x1000000000000, 0xfffffffffffeffff, x1, 24, x2)

rolw_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0002000000000000), rs2:x19(0xffffffffffff7fff)
    TEST_RR_OP(rolw, x29, x3, x19, 0x0000000000000000, 0x2000000000000, 0xffffffffffff7fff, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x4,signature_13_0)


rolw_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0004000000000000), rs2:x18(0xffffffffffffbfff)
    TEST_RR_OP(rolw, x30, x2, x18, 0x0000000000000000, 0x4000000000000, 0xffffffffffffbfff, x4, 0, x5)

rolw_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0008000000000000), rs2:x17(0xffffffffffffdfff)
    TEST_RR_OP(rolw, x31, x1, x17, 0x0000000000000000, 0x8000000000000, 0xffffffffffffdfff, x4, 8, x5)

rolw_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0010000000000000), rs2:x16(0xffffffffffffefff)
    TEST_RR_OP(rolw, x1, x31, x16, 0x0000000000000000, 0x10000000000000, 0xffffffffffffefff, x4, 16, x5)

rolw_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0020000000000000), rs2:x15(0xfffffffffffff7ff)
    TEST_RR_OP(rolw, x2, x30, x15, 0x0000000000000000, 0x20000000000000, 0xfffffffffffff7ff, x4, 24, x5)

rolw_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0040000000000000), rs2:x14(0xfffffffffffffbff)
    TEST_RR_OP(rolw, x3, x29, x14, 0x0000000000000000, 0x40000000000000, 0xfffffffffffffbff, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_14_0)


rolw_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0080000000000000), rs2:x13(0xfffffffffffffdff)
    TEST_RR_OP(rolw, x4, x28, x13, 0x0000000000000000, 0x80000000000000, 0xfffffffffffffdff, x1, 0, x2)

rolw_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0100000000000000), rs2:x12(0xfffffffffffffeff)
    TEST_RR_OP(rolw, x5, x27, x12, 0x0000000000000000, 0x100000000000000, 0xfffffffffffffeff, x1, 8, x2)

rolw_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0200000000000000), rs2:x11(0xffffffffffffff7f)
    TEST_RR_OP(rolw, x6, x26, x11, 0x0000000000000000, 0x200000000000000, 0xffffffffffffff7f, x1, 16, x2)

rolw_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0400000000000000), rs2:x10(0xffffffffffffffbf)
    TEST_RR_OP(rolw, x7, x25, x10, 0x0000000000000000, 0x400000000000000, 0xffffffffffffffbf, x1, 24, x2)

rolw_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0800000000000000), rs2:x9(0xffffffffffffffdf)
    TEST_RR_OP(rolw, x8, x24, x9, 0x0000000000000000, 0x800000000000000, 0xffffffffffffffdf, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_15_0)


rolw_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x1000000000000000), rs2:x8(0xffffffffffffffef)
    TEST_RR_OP(rolw, x9, x23, x8, 0x0000000000000000, 0x1000000000000000, 0xffffffffffffffef, x1, 0, x2)

rolw_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x2000000000000000), rs2:x7(0xfffffffffffffff7)
    TEST_RR_OP(rolw, x10, x22, x7, 0x0000000000000000, 0x2000000000000000, 0xfffffffffffffff7, x1, 8, x2)

rolw_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x4000000000000000), rs2:x6(0xfffffffffffffffb)
    TEST_RR_OP(rolw, x11, x21, x6, 0x0000000000000000, 0x4000000000000000, 0xfffffffffffffffb, x1, 16, x2)

rolw_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x8000000000000000), rs2:x5(0xfffffffffffffffd)
    TEST_RR_OP(rolw, x12, x20, x5, 0x0000000000000000, 0x8000000000000000, 0xfffffffffffffffd, x1, 24, x2)

rolw_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000), rs2:x4(0xfffffffffffffffe)
    TEST_RR_OP(rolw, x13, x19, x4, 0x0000000000000000, 0x0, 0xfffffffffffffffe, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x4,signature_16_0)


rolw_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0xfffffffffffffffe), rs1:x18(0xfffffffffffffffe), rs2:x3(0x0000000000000000)
    TEST_RR_OP(rolw, x14, x18, x3, 0xfffffffffffffffe, 0xfffffffffffffffe, 0x0, x4, 0, x5)

rolw_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0xfffffffffffffffd), rs1:x17(0xfffffffffffffffd), rs2:x2(0x8000000000000000)
    TEST_RR_OP(rolw, x15, x17, x2, 0xfffffffffffffffd, 0xfffffffffffffffd, 0x8000000000000000, x4, 8, x5)

rolw_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0xfffffffffffffffb), rs1:x16(0xfffffffffffffffb), rs2:x1(0x4000000000000000)
    TEST_RR_OP(rolw, x16, x16, x1, 0xfffffffffffffffb, 0xfffffffffffffffb, 0x4000000000000000, x4, 16, x5)

rolw_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0xfffffffffffffff7), rs1:x15(0xfffffffffffffff7), rs2:x31(0x2000000000000000)
    TEST_RR_OP(rolw, x17, x15, x31, 0xfffffffffffffff7, 0xfffffffffffffff7, 0x2000000000000000, x4, 24, x5)

rolw_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffef), rs1:x14(0xffffffffffffffef), rs2:x30(0x1000000000000000)
    TEST_RR_OP(rolw, x18, x14, x30, 0xffffffffffffffef, 0xffffffffffffffef, 0x1000000000000000, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_17_0)


rolw_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffdf), rs1:x13(0xffffffffffffffdf), rs2:x29(0x0800000000000000)
    TEST_RR_OP(rolw, x19, x13, x29, 0xffffffffffffffdf, 0xffffffffffffffdf, 0x800000000000000, x1, 0, x2)

rolw_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffbf), rs1:x12(0xffffffffffffffbf), rs2:x28(0x0400000000000000)
    TEST_RR_OP(rolw, x20, x12, x28, 0xffffffffffffffbf, 0xffffffffffffffbf, 0x400000000000000, x1, 8, x2)

rolw_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffff7f), rs1:x11(0xffffffffffffff7f), rs2:x27(0x0200000000000000)
    TEST_RR_OP(rolw, x21, x11, x27, 0xffffffffffffff7f, 0xffffffffffffff7f, 0x200000000000000, x1, 16, x2)

rolw_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0xfffffffffffffeff), rs1:x10(0xfffffffffffffeff), rs2:x26(0x0100000000000000)
    TEST_RR_OP(rolw, x22, x10, x26, 0xfffffffffffffeff, 0xfffffffffffffeff, 0x100000000000000, x1, 24, x2)

rolw_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0xfffffffffffffdff), rs1:x9(0xfffffffffffffdff), rs2:x25(0x0080000000000000)
    TEST_RR_OP(rolw, x23, x9, x25, 0xfffffffffffffdff, 0xfffffffffffffdff, 0x80000000000000, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_18_0)


rolw_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0xfffffffffffffbff), rs1:x8(0xfffffffffffffbff), rs2:x24(0x0040000000000000)
    TEST_RR_OP(rolw, x24, x8, x24, 0xfffffffffffffbff, 0xfffffffffffffbff, 0x40000000000000, x1, 0, x2)

rolw_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0xfffffffffffff7ff), rs1:x7(0xfffffffffffff7ff), rs2:x23(0x0020000000000000)
    TEST_RR_OP(rolw, x25, x7, x23, 0xfffffffffffff7ff, 0xfffffffffffff7ff, 0x20000000000000, x1, 8, x2)

rolw_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffefff), rs1:x6(0xffffffffffffefff), rs2:x22(0x0010000000000000)
    TEST_RR_OP(rolw, x26, x6, x22, 0xffffffffffffefff, 0xffffffffffffefff, 0x10000000000000, x1, 16, x2)

rolw_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffdfff), rs1:x5(0xffffffffffffdfff), rs2:x21(0x0008000000000000)
    TEST_RR_OP(rolw, x27, x5, x21, 0xffffffffffffdfff, 0xffffffffffffdfff, 0x8000000000000, x1, 24, x2)

rolw_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffbfff), rs1:x4(0xffffffffffffbfff), rs2:x20(0x0004000000000000)
    TEST_RR_OP(rolw, x28, x4, x20, 0xffffffffffffbfff, 0xffffffffffffbfff, 0x4000000000000, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x4,signature_19_0)


rolw_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffff7fff), rs1:x3(0xffffffffffff7fff), rs2:x19(0x0002000000000000)
    TEST_RR_OP(rolw, x29, x3, x19, 0xffffffffffff7fff, 0xffffffffffff7fff, 0x2000000000000, x4, 0, x5)

rolw_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0xfffffffffffeffff), rs1:x2(0xfffffffffffeffff), rs2:x18(0x0001000000000000)
    TEST_RR_OP(rolw, x30, x2, x18, 0xfffffffffffeffff, 0xfffffffffffeffff, 0x1000000000000, x4, 8, x5)

rolw_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0xfffffffffffdffff), rs1:x1(0xfffffffffffdffff), rs2:x17(0x0000800000000000)
    TEST_RR_OP(rolw, x31, x1, x17, 0xfffffffffffdffff, 0xfffffffffffdffff, 0x800000000000, x4, 16, x5)

rolw_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0xfffffffffffbffff), rs1:x31(0xfffffffffffbffff), rs2:x16(0x0000400000000000)
    TEST_RR_OP(rolw, x1, x31, x16, 0xfffffffffffbffff, 0xfffffffffffbffff, 0x400000000000, x4, 24, x5)

rolw_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0xfffffffffff7ffff), rs1:x30(0xfffffffffff7ffff), rs2:x15(0x0000200000000000)
    TEST_RR_OP(rolw, x2, x30, x15, 0xfffffffffff7ffff, 0xfffffffffff7ffff, 0x200000000000, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_20_0)


rolw_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffefffff), rs1:x29(0xffffffffffefffff), rs2:x14(0x0000100000000000)
    TEST_RR_OP(rolw, x3, x29, x14, 0xffffffffffefffff, 0xffffffffffefffff, 0x100000000000, x1, 0, x2)

rolw_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffdfffff), rs1:x28(0xffffffffffdfffff), rs2:x13(0x0000080000000000)
    TEST_RR_OP(rolw, x4, x28, x13, 0xffffffffffdfffff, 0xffffffffffdfffff, 0x80000000000, x1, 8, x2)

rolw_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffbfffff), rs1:x27(0xffffffffffbfffff), rs2:x12(0x0000040000000000)
    TEST_RR_OP(rolw, x5, x27, x12, 0xffffffffffbfffff, 0xffffffffffbfffff, 0x40000000000, x1, 16, x2)

rolw_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0xffffffffff7fffff), rs1:x26(0xffffffffff7fffff), rs2:x11(0x0000020000000000)
    TEST_RR_OP(rolw, x6, x26, x11, 0xffffffffff7fffff, 0xffffffffff7fffff, 0x20000000000, x1, 24, x2)

rolw_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0xfffffffffeffffff), rs1:x25(0xfffffffffeffffff), rs2:x10(0x0000010000000000)
    TEST_RR_OP(rolw, x7, x25, x10, 0xfffffffffeffffff, 0xfffffffffeffffff, 0x10000000000, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_21_0)


rolw_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0xfffffffffdffffff), rs1:x24(0xfffffffffdffffff), rs2:x9(0x0000008000000000)
    TEST_RR_OP(rolw, x8, x24, x9, 0xfffffffffdffffff, 0xfffffffffdffffff, 0x8000000000, x1, 0, x2)

rolw_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0xfffffffffbffffff), rs1:x23(0xfffffffffbffffff), rs2:x8(0x0000004000000000)
    TEST_RR_OP(rolw, x9, x23, x8, 0xfffffffffbffffff, 0xfffffffffbffffff, 0x4000000000, x1, 8, x2)

rolw_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0xfffffffff7ffffff), rs1:x22(0xfffffffff7ffffff), rs2:x7(0x0000002000000000)
    TEST_RR_OP(rolw, x10, x22, x7, 0xfffffffff7ffffff, 0xfffffffff7ffffff, 0x2000000000, x1, 16, x2)

rolw_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0xffffffffefffffff), rs1:x21(0xffffffffefffffff), rs2:x6(0x0000001000000000)
    TEST_RR_OP(rolw, x11, x21, x6, 0xffffffffefffffff, 0xffffffffefffffff, 0x1000000000, x1, 24, x2)

rolw_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0xffffffffdfffffff), rs1:x20(0xffffffffdfffffff), rs2:x5(0x0000000800000000)
    TEST_RR_OP(rolw, x12, x20, x5, 0xffffffffdfffffff, 0xffffffffdfffffff, 0x800000000, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x5,signature_22_0)


rolw_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0xffffffffbfffffff), rs1:x19(0xffffffffbfffffff), rs2:x4(0x0000000400000000)
    TEST_RR_OP(rolw, x13, x19, x4, 0xffffffffbfffffff, 0xffffffffbfffffff, 0x400000000, x5, 0, x6)

rolw_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0x000000007fffffff), rs1:x18(0xffffffff7fffffff), rs2:x3(0x0000000200000000)
    TEST_RR_OP(rolw, x14, x18, x3, 0x000000007fffffff, 0xffffffff7fffffff, 0x200000000, x5, 8, x6)

rolw_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0xfffffffeffffffff), rs2:x2(0x0000000100000000)
    TEST_RR_OP(rolw, x15, x17, x2, 0xffffffffffffffff, 0xfffffffeffffffff, 0x100000000, x5, 16, x6)

rolw_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xfffffffdffffffff), rs2:x1(0x0000000080000000)
    TEST_RR_OP(rolw, x16, x16, x1, 0xffffffffffffffff, 0xfffffffdffffffff, 0x80000000, x5, 24, x6)

rolw_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffffffff), rs1:x15(0xfffffffbffffffff), rs2:x31(0x0000000040000000)
    TEST_RR_OP(rolw, x17, x15, x31, 0xffffffffffffffff, 0xfffffffbffffffff, 0x40000000, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_23_0)


rolw_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffff), rs1:x14(0xfffffff7ffffffff), rs2:x30(0x0000000020000000)
    TEST_RR_OP(rolw, x18, x14, x30, 0xffffffffffffffff, 0xfffffff7ffffffff, 0x20000000, x1, 0, x2)

rolw_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffff), rs1:x13(0xffffffefffffffff), rs2:x29(0x0000000010000000)
    TEST_RR_OP(rolw, x19, x13, x29, 0xffffffffffffffff, 0xffffffefffffffff, 0x10000000, x1, 8, x2)

rolw_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffff), rs1:x12(0xffffffdfffffffff), rs2:x28(0x0000000008000000)
    TEST_RR_OP(rolw, x20, x12, x28, 0xffffffffffffffff, 0xffffffdfffffffff, 0x8000000, x1, 16, x2)

rolw_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0xffffffbfffffffff), rs2:x27(0x0000000004000000)
    TEST_RR_OP(rolw, x21, x11, x27, 0xffffffffffffffff, 0xffffffbfffffffff, 0x4000000, x1, 24, x2)

rolw_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xffffff7fffffffff), rs2:x26(0x0000000002000000)
    TEST_RR_OP(rolw, x22, x10, x26, 0xffffffffffffffff, 0xffffff7fffffffff, 0x2000000, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_24_0)


rolw_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffffffff), rs1:x9(0xfffffeffffffffff), rs2:x25(0x0000000001000000)
    TEST_RR_OP(rolw, x23, x9, x25, 0xffffffffffffffff, 0xfffffeffffffffff, 0x1000000, x1, 0, x2)

rolw_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffff), rs1:x8(0xfffffdffffffffff), rs2:x24(0x0000000000800000)
    TEST_RR_OP(rolw, x24, x8, x24, 0xffffffffffffffff, 0xfffffdffffffffff, 0x800000, x1, 8, x2)

rolw_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffff), rs1:x7(0xfffffbffffffffff), rs2:x23(0x0000000000400000)
    TEST_RR_OP(rolw, x25, x7, x23, 0xffffffffffffffff, 0xfffffbffffffffff, 0x400000, x1, 16, x2)

rolw_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffff), rs1:x6(0xfffff7ffffffffff), rs2:x22(0x0000000000200000)
    TEST_RR_OP(rolw, x26, x6, x22, 0xffffffffffffffff, 0xfffff7ffffffffff, 0x200000, x1, 24, x2)

rolw_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffffff), rs1:x5(0xffffefffffffffff), rs2:x21(0x0000000000100000)
    TEST_RR_OP(rolw, x27, x5, x21, 0xffffffffffffffff, 0xffffefffffffffff, 0x100000, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x5,signature_25_0)


rolw_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffffff), rs1:x4(0xffffdfffffffffff), rs2:x20(0x0000000000080000)
    TEST_RR_OP(rolw, x28, x4, x20, 0xffffffffffffffff, 0xffffdfffffffffff, 0x80000, x5, 0, x6)

rolw_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffffff), rs1:x3(0xffffbfffffffffff), rs2:x19(0x0000000000040000)
    TEST_RR_OP(rolw, x29, x3, x19, 0xffffffffffffffff, 0xffffbfffffffffff, 0x40000, x5, 8, x6)

rolw_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffffff), rs1:x2(0xffff7fffffffffff), rs2:x18(0x0000000000020000)
    TEST_RR_OP(rolw, x30, x2, x18, 0xffffffffffffffff, 0xffff7fffffffffff, 0x20000, x5, 16, x6)

rolw_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffffff), rs1:x1(0xfffeffffffffffff), rs2:x17(0x0000000000010000)
    TEST_RR_OP(rolw, x31, x1, x17, 0xffffffffffffffff, 0xfffeffffffffffff, 0x10000, x5, 24, x6)

rolw_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffffff), rs1:x31(0xfffdffffffffffff), rs2:x16(0x0000000000008000)
    TEST_RR_OP(rolw, x1, x31, x16, 0xffffffffffffffff, 0xfffdffffffffffff, 0x8000, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_26_0)


rolw_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffffff), rs1:x30(0xfffbffffffffffff), rs2:x15(0x0000000000004000)
    TEST_RR_OP(rolw, x2, x30, x15, 0xffffffffffffffff, 0xfffbffffffffffff, 0x4000, x1, 0, x7)

rolw_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffffff), rs1:x29(0xfff7ffffffffffff), rs2:x14(0x0000000000002000)
    TEST_RR_OP(rolw, x3, x29, x14, 0xffffffffffffffff, 0xfff7ffffffffffff, 0x2000, x1, 8, x7)

rolw_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffffffff), rs1:x28(0xffefffffffffffff), rs2:x13(0x0000000000001000)
    TEST_RR_OP(rolw, x4, x28, x13, 0xffffffffffffffff, 0xffefffffffffffff, 0x1000, x1, 16, x7)

rolw_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffffffff), rs1:x27(0xffdfffffffffffff), rs2:x12(0x0000000000000800)
    TEST_RR_OP(rolw, x5, x27, x12, 0xffffffffffffffff, 0xffdfffffffffffff, 0x800, x1, 24, x7)

rolw_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffffffff), rs1:x26(0xffbfffffffffffff), rs2:x11(0x0000000000000400)
    TEST_RR_OP(rolw, x6, x26, x11, 0xffffffffffffffff, 0xffbfffffffffffff, 0x400, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_27_0)


rolw_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffffffff), rs1:x25(0xff7fffffffffffff), rs2:x10(0x0000000000000200)
    TEST_RR_OP(rolw, x7, x25, x10, 0xffffffffffffffff, 0xff7fffffffffffff, 0x200, x1, 0, x2)

rolw_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffffffff), rs1:x24(0xfeffffffffffffff), rs2:x9(0x0000000000000100)
    TEST_RR_OP(rolw, x8, x24, x9, 0xffffffffffffffff, 0xfeffffffffffffff, 0x100, x1, 8, x2)

rolw_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffffffff), rs1:x23(0xfdffffffffffffff), rs2:x8(0x0000000000000080)
    TEST_RR_OP(rolw, x9, x23, x8, 0xffffffffffffffff, 0xfdffffffffffffff, 0x80, x1, 16, x2)

rolw_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffffffff), rs1:x22(0xfbffffffffffffff), rs2:x7(0x0000000000000040)
    TEST_RR_OP(rolw, x10, x22, x7, 0xffffffffffffffff, 0xfbffffffffffffff, 0x40, x1, 24, x2)

rolw_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffffff), rs1:x21(0xf7ffffffffffffff), rs2:x6(0x0000000000000020)
    TEST_RR_OP(rolw, x11, x21, x6, 0xffffffffffffffff, 0xf7ffffffffffffff, 0x20, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x6,signature_28_0)


rolw_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffffff), rs1:x20(0xefffffffffffffff), rs2:x5(0x0000000000000010)
    TEST_RR_OP(rolw, x12, x20, x5, 0xffffffffffffffff, 0xefffffffffffffff, 0x10, x6, 0, x7)

rolw_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffffff), rs1:x19(0xdfffffffffffffff), rs2:x4(0x0000000000000008)
    TEST_RR_OP(rolw, x13, x19, x4, 0xffffffffffffffff, 0xdfffffffffffffff, 0x8, x6, 8, x7)

rolw_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0xbfffffffffffffff), rs2:x3(0x0000000000000004)
    TEST_RR_OP(rolw, x14, x18, x3, 0xffffffffffffffff, 0xbfffffffffffffff, 0x4, x6, 16, x7)

rolw_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0x7fffffffffffffff), rs2:x2(0x0000000000000002)
    TEST_RR_OP(rolw, x15, x17, x2, 0xffffffffffffffff, 0x7fffffffffffffff, 0x2, x6, 24, x7)

rolw_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xffffffffffffffff), rs2:x1(0x0000000000000001)
    TEST_RR_OP(rolw, x16, x16, x1, 0xffffffffffffffff, 0xffffffffffffffff, 0x1, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_29_0)


rolw_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000001), rs1:x15(0x0000000000000001), rs2:x31(0x0000000000000000)
    TEST_RR_OP(rolw, x17, x15, x31, 0x0000000000000001, 0x1, 0x0, x1, 0, x2)

rolw_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000002), rs1:x14(0x0000000000000002), rs2:x30(0x0000000000000000)
    TEST_RR_OP(rolw, x18, x14, x30, 0x0000000000000002, 0x2, 0x0, x1, 8, x2)

rolw_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000004), rs1:x13(0x0000000000000004), rs2:x29(0x0000000000000000)
    TEST_RR_OP(rolw, x19, x13, x29, 0x0000000000000004, 0x4, 0x0, x1, 16, x2)

rolw_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000008), rs1:x12(0x0000000000000008), rs2:x28(0x0000000000000000)
    TEST_RR_OP(rolw, x20, x12, x28, 0x0000000000000008, 0x8, 0x0, x1, 24, x2)

rolw_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000010), rs1:x11(0x0000000000000010), rs2:x27(0x0000000000000000)
    TEST_RR_OP(rolw, x21, x11, x27, 0x0000000000000010, 0x10, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_30_0)


rolw_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000020), rs1:x10(0x0000000000000020), rs2:x26(0x0000000000000000)
    TEST_RR_OP(rolw, x22, x10, x26, 0x0000000000000020, 0x20, 0x0, x1, 0, x2)

rolw_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000040), rs1:x9(0x0000000000000040), rs2:x25(0x0000000000000000)
    TEST_RR_OP(rolw, x23, x9, x25, 0x0000000000000040, 0x40, 0x0, x1, 8, x2)

rolw_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000080), rs1:x8(0x0000000000000080), rs2:x24(0x0000000000000000)
    TEST_RR_OP(rolw, x24, x8, x24, 0x0000000000000080, 0x80, 0x0, x1, 16, x2)

rolw_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000100), rs1:x7(0x0000000000000100), rs2:x23(0x0000000000000000)
    TEST_RR_OP(rolw, x25, x7, x23, 0x0000000000000100, 0x100, 0x0, x1, 24, x2)

rolw_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000200), rs1:x6(0x0000000000000200), rs2:x22(0x0000000000000000)
    TEST_RR_OP(rolw, x26, x6, x22, 0x0000000000000200, 0x200, 0x0, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x6,signature_31_0)


rolw_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000400), rs1:x5(0x0000000000000400), rs2:x21(0x0000000000000000)
    TEST_RR_OP(rolw, x27, x5, x21, 0x0000000000000400, 0x400, 0x0, x6, 0, x7)

rolw_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000800), rs1:x4(0x0000000000000800), rs2:x20(0x0000000000000000)
    TEST_RR_OP(rolw, x28, x4, x20, 0x0000000000000800, 0x800, 0x0, x6, 8, x7)

rolw_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0000000000001000), rs1:x3(0x0000000000001000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(rolw, x29, x3, x19, 0x0000000000001000, 0x1000, 0x0, x6, 16, x7)

rolw_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000000002000), rs1:x2(0x0000000000002000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(rolw, x30, x2, x18, 0x0000000000002000, 0x2000, 0x0, x6, 24, x7)

rolw_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0000000000004000), rs1:x1(0x0000000000004000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(rolw, x31, x1, x17, 0x0000000000004000, 0x4000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x6,signature_32_0)


rolw_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000000008000), rs1:x31(0x0000000000008000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(rolw, x1, x31, x16, 0x0000000000008000, 0x8000, 0x0, x6, 0, x7)

rolw_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000000000010000), rs1:x30(0x0000000000010000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(rolw, x2, x30, x15, 0x0000000000010000, 0x10000, 0x0, x6, 8, x7)

rolw_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000000020000), rs1:x29(0x0000000000020000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(rolw, x3, x29, x14, 0x0000000000020000, 0x20000, 0x0, x6, 16, x7)

rolw_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000000040000), rs1:x28(0x0000000000040000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(rolw, x4, x28, x13, 0x0000000000040000, 0x40000, 0x0, x6, 24, x7)

rolw_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000000080000), rs1:x27(0x0000000000080000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(rolw, x5, x27, x12, 0x0000000000080000, 0x80000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_33_0)


rolw_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000000100000), rs1:x26(0x0000000000100000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(rolw, x6, x26, x11, 0x0000000000100000, 0x100000, 0x0, x1, 0, x2)

rolw_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000000200000), rs1:x25(0x0000000000200000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(rolw, x7, x25, x10, 0x0000000000200000, 0x200000, 0x0, x1, 8, x2)

rolw_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000000400000), rs1:x24(0x0000000000400000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(rolw, x8, x24, x9, 0x0000000000400000, 0x400000, 0x0, x1, 16, x2)

rolw_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000000800000), rs1:x23(0x0000000000800000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(rolw, x9, x23, x8, 0x0000000000800000, 0x800000, 0x0, x1, 24, x2)

rolw_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000001000000), rs1:x22(0x0000000001000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(rolw, x10, x22, x7, 0x0000000001000000, 0x1000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_34_0)


rolw_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000002000000), rs1:x21(0x0000000002000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(rolw, x11, x21, x6, 0x0000000002000000, 0x2000000, 0x0, x1, 0, x7)

rolw_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000004000000), rs1:x20(0x0000000004000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(rolw, x12, x20, x5, 0x0000000004000000, 0x4000000, 0x0, x1, 8, x7)

rolw_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000008000000), rs1:x19(0x0000000008000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(rolw, x13, x19, x4, 0x0000000008000000, 0x8000000, 0x0, x1, 16, x7)

rolw_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000010000000), rs1:x18(0x0000000010000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(rolw, x14, x18, x3, 0x0000000010000000, 0x10000000, 0x0, x1, 24, x7)

rolw_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000020000000), rs1:x17(0x0000000020000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(rolw, x15, x17, x2, 0x0000000020000000, 0x20000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x2,signature_35_0)


rolw_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000040000000), rs1:x16(0x0000000040000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(rolw, x16, x16, x1, 0x0000000040000000, 0x40000000, 0x0, x2, 0, x3)

rolw_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0xffffffff80000000), rs1:x15(0x0000000080000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(rolw, x17, x15, x31, 0xffffffff80000000, 0x80000000, 0x0, x2, 8, x3)

rolw_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000000100000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(rolw, x18, x14, x30, 0x0000000000000000, 0x100000000, 0x0, x2, 16, x3)

rolw_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000200000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(rolw, x19, x13, x29, 0x0000000000000000, 0x200000000, 0x0, x2, 24, x3)

rolw_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000000400000000), rs2:x28(0x0000000000000000)
    TEST_RR_OP(rolw, x20, x12, x28, 0x0000000000000000, 0x400000000, 0x0, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_36_0)


rolw_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000800000000), rs2:x27(0x0000000000000000)
    TEST_RR_OP(rolw, x21, x11, x27, 0x0000000000000000, 0x800000000, 0x0, x1, 0, x2)

rolw_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000001000000000), rs2:x26(0x0000000000000000)
    TEST_RR_OP(rolw, x22, x10, x26, 0x0000000000000000, 0x1000000000, 0x0, x1, 8, x2)

rolw_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000002000000000), rs2:x25(0x0000000000000000)
    TEST_RR_OP(rolw, x23, x9, x25, 0x0000000000000000, 0x2000000000, 0x0, x1, 16, x2)

rolw_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000004000000000), rs2:x24(0x0000000000000000)
    TEST_RR_OP(rolw, x24, x8, x24, 0x0000000000000000, 0x4000000000, 0x0, x1, 24, x2)

rolw_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000008000000000), rs2:x23(0x0000000000000000)
    TEST_RR_OP(rolw, x25, x7, x23, 0x0000000000000000, 0x8000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_37_0)


rolw_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000010000000000), rs2:x22(0x0000000000000000)
    TEST_RR_OP(rolw, x26, x6, x22, 0x0000000000000000, 0x10000000000, 0x0, x1, 0, x7)

rolw_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000020000000000), rs2:x21(0x0000000000000000)
    TEST_RR_OP(rolw, x27, x5, x21, 0x0000000000000000, 0x20000000000, 0x0, x1, 8, x7)

rolw_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000040000000000), rs2:x20(0x0000000000000000)
    TEST_RR_OP(rolw, x28, x4, x20, 0x0000000000000000, 0x40000000000, 0x0, x1, 16, x7)

rolw_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000080000000000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(rolw, x29, x3, x19, 0x0000000000000000, 0x80000000000, 0x0, x1, 24, x7)

rolw_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000100000000000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(rolw, x30, x2, x18, 0x0000000000000000, 0x100000000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x5,signature_38_0)


rolw_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000200000000000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(rolw, x31, x1, x17, 0x0000000000000000, 0x200000000000, 0x0, x5, 0, x6)

rolw_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000400000000000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(rolw, x1, x31, x16, 0x0000000000000000, 0x400000000000, 0x0, x5, 8, x6)

rolw_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000800000000000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(rolw, x2, x30, x15, 0x0000000000000000, 0x800000000000, 0x0, x5, 16, x6)

rolw_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0001000000000000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(rolw, x3, x29, x14, 0x0000000000000000, 0x1000000000000, 0x0, x5, 24, x6)

rolw_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0002000000000000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(rolw, x4, x28, x13, 0x0000000000000000, 0x2000000000000, 0x0, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_39_0)


rolw_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0004000000000000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(rolw, x5, x27, x12, 0x0000000000000000, 0x4000000000000, 0x0, x1, 0, x2)

rolw_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0008000000000000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(rolw, x6, x26, x11, 0x0000000000000000, 0x8000000000000, 0x0, x1, 8, x2)

rolw_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0010000000000000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(rolw, x7, x25, x10, 0x0000000000000000, 0x10000000000000, 0x0, x1, 16, x2)

rolw_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0020000000000000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(rolw, x8, x24, x9, 0x0000000000000000, 0x20000000000000, 0x0, x1, 24, x2)

rolw_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0040000000000000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(rolw, x9, x23, x8, 0x0000000000000000, 0x40000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_40_0)


rolw_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0080000000000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(rolw, x10, x22, x7, 0x0000000000000000, 0x80000000000000, 0x0, x1, 0, x2)

rolw_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0100000000000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(rolw, x11, x21, x6, 0x0000000000000000, 0x100000000000000, 0x0, x1, 8, x2)

rolw_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0200000000000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(rolw, x12, x20, x5, 0x0000000000000000, 0x200000000000000, 0x0, x1, 16, x2)

rolw_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0400000000000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(rolw, x13, x19, x4, 0x0000000000000000, 0x400000000000000, 0x0, x1, 24, x2)

rolw_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0800000000000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(rolw, x14, x18, x3, 0x0000000000000000, 0x800000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x3,signature_41_0)


rolw_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x1000000000000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(rolw, x15, x17, x2, 0x0000000000000000, 0x1000000000000000, 0x0, x3, 0, x4)

rolw_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x2000000000000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(rolw, x16, x16, x1, 0x0000000000000000, 0x2000000000000000, 0x0, x3, 8, x4)

rolw_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x4000000000000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(rolw, x17, x15, x31, 0x0000000000000000, 0x4000000000000000, 0x0, x3, 16, x4)

rolw_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x8000000000000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(rolw, x18, x14, x30, 0x0000000000000000, 0x8000000000000000, 0x0, x3, 24, x4)

rolw_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(rolw, x19, x13, x29, 0x0000000000000000, 0x0, 0x0, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_42_0)


rolw_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0xfffffffffffffffe), rs1:x12(0xfffffffffffffffe), rs2:x28(0x0000000000000000)
    TEST_RR_OP(rolw, x20, x12, x28, 0xfffffffffffffffe, 0xfffffffffffffffe, 0x0, x1, 0, x2)

rolw_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0xfffffffffffffffd), rs1:x11(0xfffffffffffffffd), rs2:x27(0x0000000000000000)
    TEST_RR_OP(rolw, x21, x11, x27, 0xfffffffffffffffd, 0xfffffffffffffffd, 0x0, x1, 8, x2)

rolw_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0xfffffffffffffffb), rs1:x10(0xfffffffffffffffb), rs2:x26(0x0000000000000000)
    TEST_RR_OP(rolw, x22, x10, x26, 0xfffffffffffffffb, 0xfffffffffffffffb, 0x0, x1, 16, x2)

rolw_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0xfffffffffffffff7), rs1:x9(0xfffffffffffffff7), rs2:x25(0x0000000000000000)
    TEST_RR_OP(rolw, x23, x9, x25, 0xfffffffffffffff7, 0xfffffffffffffff7, 0x0, x1, 24, x2)

rolw_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffef), rs1:x8(0xffffffffffffffef), rs2:x24(0x0000000000000000)
    TEST_RR_OP(rolw, x24, x8, x24, 0xffffffffffffffef, 0xffffffffffffffef, 0x0, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_43_0)


rolw_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffdf), rs1:x7(0xffffffffffffffdf), rs2:x23(0x0000000000000000)
    TEST_RR_OP(rolw, x25, x7, x23, 0xffffffffffffffdf, 0xffffffffffffffdf, 0x0, x1, 0, x2)

rolw_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffbf), rs1:x6(0xffffffffffffffbf), rs2:x22(0x0000000000000000)
    TEST_RR_OP(rolw, x26, x6, x22, 0xffffffffffffffbf, 0xffffffffffffffbf, 0x0, x1, 8, x2)

rolw_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffff7f), rs1:x5(0xffffffffffffff7f), rs2:x21(0x0000000000000000)
    TEST_RR_OP(rolw, x27, x5, x21, 0xffffffffffffff7f, 0xffffffffffffff7f, 0x0, x1, 16, x2)

rolw_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0xfffffffffffffeff), rs1:x4(0xfffffffffffffeff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(rolw, x28, x4, x20, 0xfffffffffffffeff, 0xfffffffffffffeff, 0x0, x1, 24, x2)

rolw_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0xfffffffffffffdff), rs1:x3(0xfffffffffffffdff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(rolw, x29, x3, x19, 0xfffffffffffffdff, 0xfffffffffffffdff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x4,signature_44_0)


rolw_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0xfffffffffffffbff), rs1:x2(0xfffffffffffffbff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(rolw, x30, x2, x18, 0xfffffffffffffbff, 0xfffffffffffffbff, 0x0, x4, 0, x5)

rolw_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0xfffffffffffff7ff), rs1:x1(0xfffffffffffff7ff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(rolw, x31, x1, x17, 0xfffffffffffff7ff, 0xfffffffffffff7ff, 0x0, x4, 8, x5)

rolw_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffefff), rs1:x31(0xffffffffffffefff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(rolw, x1, x31, x16, 0xffffffffffffefff, 0xffffffffffffefff, 0x0, x4, 16, x5)

rolw_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffdfff), rs1:x30(0xffffffffffffdfff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(rolw, x2, x30, x15, 0xffffffffffffdfff, 0xffffffffffffdfff, 0x0, x4, 24, x5)

rolw_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffbfff), rs1:x29(0xffffffffffffbfff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(rolw, x3, x29, x14, 0xffffffffffffbfff, 0xffffffffffffbfff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_45_0)


rolw_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffff7fff), rs1:x28(0xffffffffffff7fff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(rolw, x4, x28, x13, 0xffffffffffff7fff, 0xffffffffffff7fff, 0x0, x1, 0, x2)

rolw_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0xfffffffffffeffff), rs1:x27(0xfffffffffffeffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(rolw, x5, x27, x12, 0xfffffffffffeffff, 0xfffffffffffeffff, 0x0, x1, 8, x2)

rolw_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0xfffffffffffdffff), rs1:x26(0xfffffffffffdffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(rolw, x6, x26, x11, 0xfffffffffffdffff, 0xfffffffffffdffff, 0x0, x1, 16, x2)

rolw_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0xfffffffffffbffff), rs1:x25(0xfffffffffffbffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(rolw, x7, x25, x10, 0xfffffffffffbffff, 0xfffffffffffbffff, 0x0, x1, 24, x2)

rolw_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0xfffffffffff7ffff), rs1:x24(0xfffffffffff7ffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(rolw, x8, x24, x9, 0xfffffffffff7ffff, 0xfffffffffff7ffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_46_0)


rolw_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffefffff), rs1:x23(0xffffffffffefffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(rolw, x9, x23, x8, 0xffffffffffefffff, 0xffffffffffefffff, 0x0, x1, 0, x2)

rolw_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffdfffff), rs1:x22(0xffffffffffdfffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(rolw, x10, x22, x7, 0xffffffffffdfffff, 0xffffffffffdfffff, 0x0, x1, 8, x2)

rolw_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffbfffff), rs1:x21(0xffffffffffbfffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(rolw, x11, x21, x6, 0xffffffffffbfffff, 0xffffffffffbfffff, 0x0, x1, 16, x2)

rolw_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0xffffffffff7fffff), rs1:x20(0xffffffffff7fffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(rolw, x12, x20, x5, 0xffffffffff7fffff, 0xffffffffff7fffff, 0x0, x1, 24, x2)

rolw_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0xfffffffffeffffff), rs1:x19(0xfffffffffeffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(rolw, x13, x19, x4, 0xfffffffffeffffff, 0xfffffffffeffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x4,signature_47_0)


rolw_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0xfffffffffdffffff), rs1:x18(0xfffffffffdffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(rolw, x14, x18, x3, 0xfffffffffdffffff, 0xfffffffffdffffff, 0x0, x4, 0, x5)

rolw_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0xfffffffffbffffff), rs1:x17(0xfffffffffbffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(rolw, x15, x17, x2, 0xfffffffffbffffff, 0xfffffffffbffffff, 0x0, x4, 8, x5)

rolw_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0xfffffffff7ffffff), rs1:x16(0xfffffffff7ffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(rolw, x16, x16, x1, 0xfffffffff7ffffff, 0xfffffffff7ffffff, 0x0, x4, 16, x5)

rolw_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0xffffffffefffffff), rs1:x15(0xffffffffefffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(rolw, x17, x15, x31, 0xffffffffefffffff, 0xffffffffefffffff, 0x0, x4, 24, x5)

rolw_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0xffffffffdfffffff), rs1:x14(0xffffffffdfffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(rolw, x18, x14, x30, 0xffffffffdfffffff, 0xffffffffdfffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_48_0)


rolw_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0xffffffffbfffffff), rs1:x13(0xffffffffbfffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(rolw, x19, x13, x29, 0xffffffffbfffffff, 0xffffffffbfffffff, 0x0, x1, 0, x2)

rolw_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0x000000007fffffff), rs1:x12(0xffffffff7fffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(rolw, x20, x12, x28, 0x000000007fffffff, 0xffffffff7fffffff, 0x0, x1, 8, x2)

rolw_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0xfffffffeffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(rolw, x21, x11, x27, 0xffffffffffffffff, 0xfffffffeffffffff, 0x0, x1, 16, x2)

rolw_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xfffffffdffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(rolw, x22, x10, x26, 0xffffffffffffffff, 0xfffffffdffffffff, 0x0, x1, 24, x2)

rolw_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffffffff), rs1:x9(0xfffffffbffffffff), rs2:x25(0x0000000000000000)
    TEST_RR_OP(rolw, x23, x9, x25, 0xffffffffffffffff, 0xfffffffbffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_49_0)


rolw_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffff), rs1:x8(0xfffffff7ffffffff), rs2:x24(0x0000000000000000)
    TEST_RR_OP(rolw, x24, x8, x24, 0xffffffffffffffff, 0xfffffff7ffffffff, 0x0, x1, 0, x2)

rolw_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffff), rs1:x7(0xffffffefffffffff), rs2:x23(0x0000000000000000)
    TEST_RR_OP(rolw, x25, x7, x23, 0xffffffffffffffff, 0xffffffefffffffff, 0x0, x1, 8, x2)

rolw_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffff), rs1:x6(0xffffffdfffffffff), rs2:x22(0x0000000000000000)
    TEST_RR_OP(rolw, x26, x6, x22, 0xffffffffffffffff, 0xffffffdfffffffff, 0x0, x1, 16, x2)

rolw_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffffff), rs1:x5(0xffffffbfffffffff), rs2:x21(0x0000000000000000)
    TEST_RR_OP(rolw, x27, x5, x21, 0xffffffffffffffff, 0xffffffbfffffffff, 0x0, x1, 24, x2)

rolw_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffffff), rs1:x4(0xffffff7fffffffff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(rolw, x28, x4, x20, 0xffffffffffffffff, 0xffffff7fffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x4,signature_50_0)


rolw_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffffff), rs1:x3(0xfffffeffffffffff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(rolw, x29, x3, x19, 0xffffffffffffffff, 0xfffffeffffffffff, 0x0, x4, 0, x5)

rolw_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffffff), rs1:x2(0xfffffdffffffffff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(rolw, x30, x2, x18, 0xffffffffffffffff, 0xfffffdffffffffff, 0x0, x4, 8, x5)

rolw_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffffff), rs1:x1(0xfffffbffffffffff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(rolw, x31, x1, x17, 0xffffffffffffffff, 0xfffffbffffffffff, 0x0, x4, 16, x5)

rolw_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffffff), rs1:x31(0xfffff7ffffffffff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(rolw, x1, x31, x16, 0xffffffffffffffff, 0xfffff7ffffffffff, 0x0, x4, 24, x5)

rolw_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffffff), rs1:x30(0xffffefffffffffff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(rolw, x2, x30, x15, 0xffffffffffffffff, 0xffffefffffffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_51_0)


rolw_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffffff), rs1:x29(0xffffdfffffffffff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(rolw, x3, x29, x14, 0xffffffffffffffff, 0xffffdfffffffffff, 0x0, x1, 0, x2)

rolw_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffffffff), rs1:x28(0xffffbfffffffffff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(rolw, x4, x28, x13, 0xffffffffffffffff, 0xffffbfffffffffff, 0x0, x1, 8, x2)

rolw_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffffffff), rs1:x27(0xffff7fffffffffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(rolw, x5, x27, x12, 0xffffffffffffffff, 0xffff7fffffffffff, 0x0, x1, 16, x2)

rolw_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffffffff), rs1:x26(0xfffeffffffffffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(rolw, x6, x26, x11, 0xffffffffffffffff, 0xfffeffffffffffff, 0x0, x1, 24, x2)

rolw_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffffffff), rs1:x25(0xfffdffffffffffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(rolw, x7, x25, x10, 0xffffffffffffffff, 0xfffdffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_52_0)


rolw_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffffffff), rs1:x24(0xfffbffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(rolw, x8, x24, x9, 0xffffffffffffffff, 0xfffbffffffffffff, 0x0, x1, 0, x2)

rolw_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffffffff), rs1:x23(0xfff7ffffffffffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(rolw, x9, x23, x8, 0xffffffffffffffff, 0xfff7ffffffffffff, 0x0, x1, 8, x2)

rolw_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffffffff), rs1:x22(0xffefffffffffffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(rolw, x10, x22, x7, 0xffffffffffffffff, 0xffefffffffffffff, 0x0, x1, 16, x2)

rolw_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffffff), rs1:x21(0xffdfffffffffffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(rolw, x11, x21, x6, 0xffffffffffffffff, 0xffdfffffffffffff, 0x0, x1, 24, x2)

rolw_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffffff), rs1:x20(0xffbfffffffffffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(rolw, x12, x20, x5, 0xffffffffffffffff, 0xffbfffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x5,signature_53_0)


rolw_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffffff), rs1:x19(0xff7fffffffffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(rolw, x13, x19, x4, 0xffffffffffffffff, 0xff7fffffffffffff, 0x0, x5, 0, x6)

rolw_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0xfeffffffffffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(rolw, x14, x18, x3, 0xffffffffffffffff, 0xfeffffffffffffff, 0x0, x5, 8, x6)

rolw_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0xfdffffffffffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(rolw, x15, x17, x2, 0xffffffffffffffff, 0xfdffffffffffffff, 0x0, x5, 16, x6)

rolw_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xfbffffffffffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(rolw, x16, x16, x1, 0xffffffffffffffff, 0xfbffffffffffffff, 0x0, x5, 24, x6)

rolw_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffffffff), rs1:x15(0xf7ffffffffffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(rolw, x17, x15, x31, 0xffffffffffffffff, 0xf7ffffffffffffff, 0x0, x5, 32, x6)

    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_54_0)


rolw_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffff), rs1:x14(0xefffffffffffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(rolw, x18, x14, x30, 0xffffffffffffffff, 0xefffffffffffffff, 0x0, x1, 0, x2)

rolw_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffff), rs1:x13(0xdfffffffffffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(rolw, x19, x13, x29, 0xffffffffffffffff, 0xdfffffffffffffff, 0x0, x1, 8, x2)

rolw_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffff), rs1:x12(0xbfffffffffffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(rolw, x20, x12, x28, 0xffffffffffffffff, 0xbfffffffffffffff, 0x0, x1, 16, x2)

rolw_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0x7fffffffffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(rolw, x21, x11, x27, 0xffffffffffffffff, 0x7fffffffffffffff, 0x0, x1, 24, x2)

rolw_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xffffffffffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(rolw, x22, x10, x26, 0xffffffffffffffff, 0xffffffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

	RVTEST_SIGBASE(x1,signature_55_0)


rolw_01_inst_270:
    // Test 270:  Test with rs1 == rs2
    // result rd:x23(0xffffffff90de6118), rs1:x25(0x10fd3dedadea5195), rs2:x25(0xdf7f3844121bcc23)
    TEST_RR_OP(rolw, x23, x25, x25, 0xffffffff90de6118, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x1, 0, x2)

rolw_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1), rs2:x24(0xf5adb41aa47d105b)
    TEST_RR_OP(rolw, x0, x8, x24, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x1, 8, x2)

rolw_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0xffffffffa8e1a8bb), rs1:x7(0xc9649f05a8e1a8bb), rs2:x0(0x82f6747f707af2c0)
    TEST_RR_OP(rolw, x25, x7, x0, 0xffffffffa8e1a8bb, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x1, 16, x2)

rolw_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb), rs2:x22(0x73a92fd4e19bfbc3)
    TEST_RR_OP(rolw, x26, x0, x22, 0x0000000000000000, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x1, 24, x2)
	
#endif


RVTEST_CODE_END rolw_01_code_end
RVTEST_CODE_BEGIN sha512sum0_01_init sha512sum0_01_code_begin






#ifdef TEST_CASE_1


    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x6,signature_1_0)

 
sha512sum0_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x6e84599761cd6bda), rs1:x31(0x10fd3dedadea5195)
    li  x31, 0x10fd3dedadea5195
    sha512sum0 x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x6e84599761cd6bda)
 
sha512sum0_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x5ee1fcd63ea5cbac), rs1:x30(0xbd295ce2d2ffbec1)
    li  x30, 0xbd295ce2d2ffbec1
    sha512sum0 x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x5ee1fcd63ea5cbac)
 
sha512sum0_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0xef7322c313821ea5), rs1:x29(0xc9649f05a8e1a8bb)
    li  x29, 0xc9649f05a8e1a8bb
    sha512sum0 x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0xef7322c313821ea5)
 
sha512sum0_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0xae3a087e0f285990), rs1:x28(0x3541291848c99fcb)
    li  x28, 0x3541291848c99fcb
    sha512sum0 x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0xae3a087e0f285990)
 
sha512sum0_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0xf0de4ac6502da15a), rs1:x27(0x10a24740461d524f)
    li  x27, 0x10a24740461d524f
    sha512sum0 x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0xf0de4ac6502da15a)


    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_2_0)

 
sha512sum0_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x94a69affcd02f0cc), rs1:x26(0x546b0e54528a10af)
    li  x26, 0x546b0e54528a10af
    sha512sum0 x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x94a69affcd02f0cc)
 
sha512sum0_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x881a7530609fe4e4), rs1:x25(0x73a92fd4e19bfbc3)
    li  x25, 0x73a92fd4e19bfbc3
    sha512sum0 x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x881a7530609fe4e4)
 
sha512sum0_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x2551655d8edf3600), rs1:x24(0x82f6747f707af2c0)
    li  x24, 0x82f6747f707af2c0
    sha512sum0 x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x2551655d8edf3600)
 
sha512sum0_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0xdb86bb89105b77c4), rs1:x23(0xf5adb41aa47d105b)
    li  x23, 0xf5adb41aa47d105b
    sha512sum0 x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xdb86bb89105b77c4)
 
sha512sum0_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0xad1e06ad4792b420), rs1:x22(0xdf7f3844121bcc23)
    li  x22, 0xdf7f3844121bcc23
    sha512sum0 x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xad1e06ad4792b420)


    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_3_0)

 
sha512sum0_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x0000001042000000), rs1:x21(0x0000000000000001)
    li  x21, 0x1
    sha512sum0 x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x0000001042000000)
 
sha512sum0_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x0000002084000000), rs1:x20(0x0000000000000002)
    li  x20, 0x2
    sha512sum0 x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x0000002084000000)
 
sha512sum0_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x0000004108000000), rs1:x19(0x0000000000000004)
    li  x19, 0x4
    sha512sum0 x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x0000004108000000)
 
sha512sum0_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0000008210000000), rs1:x18(0x0000000000000008)
    li  x18, 0x8
    sha512sum0 x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0000008210000000)
 
sha512sum0_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x0000010420000000), rs1:x17(0x0000000000000010)
    li  x17, 0x10
    sha512sum0 x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0000010420000000)


    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x2,signature_4_0)

 
sha512sum0_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x0000020840000000), rs1:x16(0x0000000000000020)
    li  x16, 0x20
    sha512sum0 x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0000020840000000)
 
sha512sum0_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x0000041080000000), rs1:x15(0x0000000000000040)
    li  x15, 0x40
    sha512sum0 x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x0000041080000000)
 
sha512sum0_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x0000082100000000), rs1:x14(0x0000000000000080)
    li  x14, 0x80
    sha512sum0 x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x0000082100000000)
 
sha512sum0_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0000104200000000), rs1:x13(0x0000000000000100)
    li  x13, 0x100
    sha512sum0 x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0000104200000000)
 
sha512sum0_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0000208400000000), rs1:x12(0x0000000000000200)
    li  x12, 0x200
    sha512sum0 x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0000208400000000)


    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_5_0)

 
sha512sum0_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x0000410800000000), rs1:x11(0x0000000000000400)
    li  x11, 0x400
    sha512sum0 x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000410800000000)
 
sha512sum0_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0000821000000000), rs1:x10(0x0000000000000800)
    li  x10, 0x800
    sha512sum0 x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000821000000000)
 
sha512sum0_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x0001042000000000), rs1:x9(0x0000000000001000)
    li  x9, 0x1000
    sha512sum0 x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0001042000000000)
 
sha512sum0_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0002084000000000), rs1:x8(0x0000000000002000)
    li  x8, 0x2000
    sha512sum0 x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0002084000000000)
 
sha512sum0_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x0004108000000000), rs1:x7(0x0000000000004000)
    li  x7, 0x4000
    sha512sum0 x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0004108000000000)


    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_6_0)

 
sha512sum0_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x0008210000000000), rs1:x6(0x0000000000008000)
    li  x6, 0x8000
    sha512sum0 x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x0008210000000000)
 
sha512sum0_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x0010420000000000), rs1:x5(0x0000000000010000)
    li  x5, 0x10000
    sha512sum0 x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0010420000000000)
 
sha512sum0_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x0020840000000000), rs1:x4(0x0000000000020000)
    li  x4, 0x20000
    sha512sum0 x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0020840000000000)
 
sha512sum0_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0041080000000000), rs1:x3(0x0000000000040000)
    li  x3, 0x40000
    sha512sum0 x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0041080000000000)
 
sha512sum0_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0082100000000000), rs1:x2(0x0000000000080000)
    li  x2, 0x80000
    sha512sum0 x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0082100000000000)


    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x5,signature_7_0)

 
sha512sum0_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0104200000000000), rs1:x1(0x0000000000100000)
    li  x1, 0x100000
    sha512sum0 x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0104200000000000)
 
sha512sum0_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0208400000000000), rs1:x31(0x0000000000200000)
    li  x31, 0x200000
    sha512sum0 x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0208400000000000)
 
sha512sum0_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0410800000000000), rs1:x30(0x0000000000400000)
    li  x30, 0x400000
    sha512sum0 x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0410800000000000)
 
sha512sum0_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0821000000000000), rs1:x29(0x0000000000800000)
    li  x29, 0x800000
    sha512sum0 x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0821000000000000)
 
sha512sum0_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x1042000000000000), rs1:x28(0x0000000001000000)
    li  x28, 0x1000000
    sha512sum0 x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x1042000000000000)


    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_8_0)

 
sha512sum0_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x2084000000000000), rs1:x27(0x0000000002000000)
    li  x27, 0x2000000
    sha512sum0 x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x2084000000000000)
 
sha512sum0_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x4108000000000000), rs1:x26(0x0000000004000000)
    li  x26, 0x4000000
    sha512sum0 x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x4108000000000000)
 
sha512sum0_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x8210000000000000), rs1:x25(0x0000000008000000)
    li  x25, 0x8000000
    sha512sum0 x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x8210000000000000)
 
sha512sum0_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0420000000000001), rs1:x24(0x0000000010000000)
    li  x24, 0x10000000
    sha512sum0 x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0420000000000001)
 
sha512sum0_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0840000000000002), rs1:x23(0x0000000020000000)
    li  x23, 0x20000000
    sha512sum0 x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0840000000000002)


    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_9_0)

 
sha512sum0_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x1080000000000004), rs1:x22(0x0000000040000000)
    li  x22, 0x40000000
    sha512sum0 x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x1080000000000004)
 
sha512sum0_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x2100000000000008), rs1:x21(0x0000000080000000)
    li  x21, 0x80000000
    sha512sum0 x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x2100000000000008)
 
sha512sum0_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x4200000000000010), rs1:x20(0x0000000100000000)
    li  x20, 0x100000000
    sha512sum0 x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x4200000000000010)
 
sha512sum0_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x8400000000000020), rs1:x19(0x0000000200000000)
    li  x19, 0x200000000
    sha512sum0 x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x8400000000000020)
 
sha512sum0_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x0800000000000041), rs1:x18(0x0000000400000000)
    li  x18, 0x400000000
    sha512sum0 x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x0800000000000041)


    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x3,signature_10_0)

 
sha512sum0_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x1000000000000082), rs1:x17(0x0000000800000000)
    li  x17, 0x800000000
    sha512sum0 x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x1000000000000082)
 
sha512sum0_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x2000000000000104), rs1:x16(0x0000001000000000)
    li  x16, 0x1000000000
    sha512sum0 x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x2000000000000104)
 
sha512sum0_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x4000000000000208), rs1:x15(0x0000002000000000)
    li  x15, 0x2000000000
    sha512sum0 x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x4000000000000208)
 
sha512sum0_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x8000000000000410), rs1:x14(0x0000004000000000)
    li  x14, 0x4000000000
    sha512sum0 x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x8000000000000410)
 
sha512sum0_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000821), rs1:x13(0x0000008000000000)
    li  x13, 0x8000000000
    sha512sum0 x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000000000000821)


    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_11_0)

 
sha512sum0_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0000000000001042), rs1:x12(0x0000010000000000)
    li  x12, 0x10000000000
    sha512sum0 x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0000000000001042)
 
sha512sum0_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000000000002084), rs1:x11(0x0000020000000000)
    li  x11, 0x20000000000
    sha512sum0 x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000000000002084)
 
sha512sum0_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000000000004108), rs1:x10(0x0000040000000000)
    li  x10, 0x40000000000
    sha512sum0 x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000000000004108)
 
sha512sum0_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000000000008210), rs1:x9(0x0000080000000000)
    li  x9, 0x80000000000
    sha512sum0 x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000000000008210)
 
sha512sum0_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000000000010420), rs1:x8(0x0000100000000000)
    li  x8, 0x100000000000
    sha512sum0 x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000000000010420)


    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_12_0)

 
sha512sum0_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0000000000020840), rs1:x7(0x0000200000000000)
    li  x7, 0x200000000000
    sha512sum0 x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000000020840)
 
sha512sum0_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x0000000000041080), rs1:x6(0x0000400000000000)
    li  x6, 0x400000000000
    sha512sum0 x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000041080)
 
sha512sum0_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0000000000082100), rs1:x5(0x0000800000000000)
    li  x5, 0x800000000000
    sha512sum0 x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x0000000000082100)
 
sha512sum0_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0000000000104200), rs1:x4(0x0001000000000000)
    li  x4, 0x1000000000000
    sha512sum0 x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x0000000000104200)
 
sha512sum0_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0000000000208400), rs1:x3(0x0002000000000000)
    li  x3, 0x2000000000000
    sha512sum0 x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x0000000000208400)


    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x4,signature_13_0)

 
sha512sum0_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0000000000410800), rs1:x2(0x0004000000000000)
    li  x2, 0x4000000000000
    sha512sum0 x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x0000000000410800)
 
sha512sum0_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0000000000821000), rs1:x1(0x0008000000000000)
    li  x1, 0x8000000000000
    sha512sum0 x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x0000000000821000)
 
sha512sum0_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0000000001042000), rs1:x31(0x0010000000000000)
    li  x31, 0x10000000000000
    sha512sum0 x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x0000000001042000)
 
sha512sum0_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0000000002084000), rs1:x30(0x0020000000000000)
    li  x30, 0x20000000000000
    sha512sum0 x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x0000000002084000)
 
sha512sum0_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0000000004108000), rs1:x29(0x0040000000000000)
    li  x29, 0x40000000000000
    sha512sum0 x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x0000000004108000)


    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_14_0)

 
sha512sum0_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0000000008210000), rs1:x28(0x0080000000000000)
    li  x28, 0x80000000000000
    sha512sum0 x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x0000000008210000)
 
sha512sum0_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0000000010420000), rs1:x27(0x0100000000000000)
    li  x27, 0x100000000000000
    sha512sum0 x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000010420000)
 
sha512sum0_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x0000000020840000), rs1:x26(0x0200000000000000)
    li  x26, 0x200000000000000
    sha512sum0 x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000020840000)
 
sha512sum0_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x0000000041080000), rs1:x25(0x0400000000000000)
    li  x25, 0x400000000000000
    sha512sum0 x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000041080000)
 
sha512sum0_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x0000000082100000), rs1:x24(0x0800000000000000)
    li  x24, 0x800000000000000
    sha512sum0 x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000082100000)


    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_15_0)

 
sha512sum0_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x0000000104200000), rs1:x23(0x1000000000000000)
    li  x23, 0x1000000000000000
    sha512sum0 x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000104200000)
 
sha512sum0_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x0000000208400000), rs1:x22(0x2000000000000000)
    li  x22, 0x2000000000000000
    sha512sum0 x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000208400000)
 
sha512sum0_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x0000000410800000), rs1:x21(0x4000000000000000)
    li  x21, 0x4000000000000000
    sha512sum0 x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000410800000)
 
sha512sum0_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x0000000821000000), rs1:x20(0x8000000000000000)
    li  x20, 0x8000000000000000
    sha512sum0 x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000821000000)
 
sha512sum0_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000)
    li  x19, 0x0
    sha512sum0 x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000000000000)


    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x4,signature_16_0)

 
sha512sum0_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0xffffffefbdffffff), rs1:x18(0xfffffffffffffffe)
    li  x18, 0xfffffffffffffffe
    sha512sum0 x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0xffffffefbdffffff)
 
sha512sum0_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0xffffffdf7bffffff), rs1:x17(0xfffffffffffffffd)
    li  x17, 0xfffffffffffffffd
    sha512sum0 x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0xffffffdf7bffffff)
 
sha512sum0_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0xffffffbef7ffffff), rs1:x16(0xfffffffffffffffb)
    li  x16, 0xfffffffffffffffb
    sha512sum0 x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0xffffffbef7ffffff)
 
sha512sum0_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0xffffff7defffffff), rs1:x15(0xfffffffffffffff7)
    li  x15, 0xfffffffffffffff7
    sha512sum0 x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0xffffff7defffffff)
 
sha512sum0_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0xfffffefbdfffffff), rs1:x14(0xffffffffffffffef)
    li  x14, 0xffffffffffffffef
    sha512sum0 x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0xfffffefbdfffffff)


    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_17_0)

 
sha512sum0_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0xfffffdf7bfffffff), rs1:x13(0xffffffffffffffdf)
    li  x13, 0xffffffffffffffdf
    sha512sum0 x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0xfffffdf7bfffffff)
 
sha512sum0_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0xfffffbef7fffffff), rs1:x12(0xffffffffffffffbf)
    li  x12, 0xffffffffffffffbf
    sha512sum0 x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xfffffbef7fffffff)
 
sha512sum0_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0xfffff7deffffffff), rs1:x11(0xffffffffffffff7f)
    li  x11, 0xffffffffffffff7f
    sha512sum0 x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xfffff7deffffffff)
 
sha512sum0_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0xffffefbdffffffff), rs1:x10(0xfffffffffffffeff)
    li  x10, 0xfffffffffffffeff
    sha512sum0 x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xffffefbdffffffff)
 
sha512sum0_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0xffffdf7bffffffff), rs1:x9(0xfffffffffffffdff)
    li  x9, 0xfffffffffffffdff
    sha512sum0 x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xffffdf7bffffffff)


    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_18_0)

 
sha512sum0_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0xffffbef7ffffffff), rs1:x8(0xfffffffffffffbff)
    li  x8, 0xfffffffffffffbff
    sha512sum0 x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xffffbef7ffffffff)
 
sha512sum0_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0xffff7defffffffff), rs1:x7(0xfffffffffffff7ff)
    li  x7, 0xfffffffffffff7ff
    sha512sum0 x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xffff7defffffffff)
 
sha512sum0_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0xfffefbdfffffffff), rs1:x6(0xffffffffffffefff)
    li  x6, 0xffffffffffffefff
    sha512sum0 x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0xfffefbdfffffffff)
 
sha512sum0_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0xfffdf7bfffffffff), rs1:x5(0xffffffffffffdfff)
    li  x5, 0xffffffffffffdfff
    sha512sum0 x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0xfffdf7bfffffffff)
 
sha512sum0_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0xfffbef7fffffffff), rs1:x4(0xffffffffffffbfff)
    li  x4, 0xffffffffffffbfff
    sha512sum0 x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0xfffbef7fffffffff)


    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x4,signature_19_0)

 
sha512sum0_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0xfff7deffffffffff), rs1:x3(0xffffffffffff7fff)
    li  x3, 0xffffffffffff7fff
    sha512sum0 x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0xfff7deffffffffff)
 
sha512sum0_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0xffefbdffffffffff), rs1:x2(0xfffffffffffeffff)
    li  x2, 0xfffffffffffeffff
    sha512sum0 x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0xffefbdffffffffff)
 
sha512sum0_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0xffdf7bffffffffff), rs1:x1(0xfffffffffffdffff)
    li  x1, 0xfffffffffffdffff
    sha512sum0 x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0xffdf7bffffffffff)
 
sha512sum0_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0xffbef7ffffffffff), rs1:x31(0xfffffffffffbffff)
    li  x31, 0xfffffffffffbffff
    sha512sum0 x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0xffbef7ffffffffff)
 
sha512sum0_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0xff7defffffffffff), rs1:x30(0xfffffffffff7ffff)
    li  x30, 0xfffffffffff7ffff
    sha512sum0 x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0xff7defffffffffff)


    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_20_0)

 
sha512sum0_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0xfefbdfffffffffff), rs1:x29(0xffffffffffefffff)
    li  x29, 0xffffffffffefffff
    sha512sum0 x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0xfefbdfffffffffff)
 
sha512sum0_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0xfdf7bfffffffffff), rs1:x28(0xffffffffffdfffff)
    li  x28, 0xffffffffffdfffff
    sha512sum0 x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0xfdf7bfffffffffff)
 
sha512sum0_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0xfbef7fffffffffff), rs1:x27(0xffffffffffbfffff)
    li  x27, 0xffffffffffbfffff
    sha512sum0 x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0xfbef7fffffffffff)
 
sha512sum0_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0xf7deffffffffffff), rs1:x26(0xffffffffff7fffff)
    li  x26, 0xffffffffff7fffff
    sha512sum0 x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xf7deffffffffffff)
 
sha512sum0_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0xefbdffffffffffff), rs1:x25(0xfffffffffeffffff)
    li  x25, 0xfffffffffeffffff
    sha512sum0 x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xefbdffffffffffff)


    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_21_0)

 
sha512sum0_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0xdf7bffffffffffff), rs1:x24(0xfffffffffdffffff)
    li  x24, 0xfffffffffdffffff
    sha512sum0 x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xdf7bffffffffffff)
 
sha512sum0_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0xbef7ffffffffffff), rs1:x23(0xfffffffffbffffff)
    li  x23, 0xfffffffffbffffff
    sha512sum0 x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xbef7ffffffffffff)
 
sha512sum0_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0x7defffffffffffff), rs1:x22(0xfffffffff7ffffff)
    li  x22, 0xfffffffff7ffffff
    sha512sum0 x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x7defffffffffffff)
 
sha512sum0_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0xfbdffffffffffffe), rs1:x21(0xffffffffefffffff)
    li  x21, 0xffffffffefffffff
    sha512sum0 x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xfbdffffffffffffe)
 
sha512sum0_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0xf7bffffffffffffd), rs1:x20(0xffffffffdfffffff)
    li  x20, 0xffffffffdfffffff
    sha512sum0 x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0xf7bffffffffffffd)


    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x5,signature_22_0)

 
sha512sum0_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0xef7ffffffffffffb), rs1:x19(0xffffffffbfffffff)
    li  x19, 0xffffffffbfffffff
    sha512sum0 x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0xef7ffffffffffffb)
 
sha512sum0_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0xdefffffffffffff7), rs1:x18(0xffffffff7fffffff)
    li  x18, 0xffffffff7fffffff
    sha512sum0 x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0xdefffffffffffff7)
 
sha512sum0_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0xbdffffffffffffef), rs1:x17(0xfffffffeffffffff)
    li  x17, 0xfffffffeffffffff
    sha512sum0 x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0xbdffffffffffffef)
 
sha512sum0_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0x7bffffffffffffdf), rs1:x16(0xfffffffdffffffff)
    li  x16, 0xfffffffdffffffff
    sha512sum0 x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0x7bffffffffffffdf)
 
sha512sum0_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0xf7ffffffffffffbe), rs1:x15(0xfffffffbffffffff)
    li  x15, 0xfffffffbffffffff
    sha512sum0 x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0xf7ffffffffffffbe)


    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_23_0)

 
sha512sum0_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0xefffffffffffff7d), rs1:x14(0xfffffff7ffffffff)
    li  x14, 0xfffffff7ffffffff
    sha512sum0 x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0xefffffffffffff7d)
 
sha512sum0_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0xdffffffffffffefb), rs1:x13(0xffffffefffffffff)
    li  x13, 0xffffffefffffffff
    sha512sum0 x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0xdffffffffffffefb)
 
sha512sum0_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0xbffffffffffffdf7), rs1:x12(0xffffffdfffffffff)
    li  x12, 0xffffffdfffffffff
    sha512sum0 x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xbffffffffffffdf7)
 
sha512sum0_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0x7ffffffffffffbef), rs1:x11(0xffffffbfffffffff)
    li  x11, 0xffffffbfffffffff
    sha512sum0 x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x7ffffffffffffbef)
 
sha512sum0_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0xfffffffffffff7de), rs1:x10(0xffffff7fffffffff)
    li  x10, 0xffffff7fffffffff
    sha512sum0 x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xfffffffffffff7de)


    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_24_0)

 
sha512sum0_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffffefbd), rs1:x9(0xfffffeffffffffff)
    li  x9, 0xfffffeffffffffff
    sha512sum0 x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xffffffffffffefbd)
 
sha512sum0_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffdf7b), rs1:x8(0xfffffdffffffffff)
    li  x8, 0xfffffdffffffffff
    sha512sum0 x24, x8
    sd x24, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xffffffffffffdf7b)
 
sha512sum0_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffbef7), rs1:x7(0xfffffbffffffffff)
    li  x7, 0xfffffbffffffffff
    sha512sum0 x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xffffffffffffbef7)
 
sha512sum0_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffff7def), rs1:x6(0xfffff7ffffffffff)
    li  x6, 0xfffff7ffffffffff
    sha512sum0 x26, x6
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0xffffffffffff7def)
 
sha512sum0_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0xfffffffffffefbdf), rs1:x5(0xffffefffffffffff)
    li  x5, 0xffffefffffffffff
    sha512sum0 x27, x5
    sd x27, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0xfffffffffffefbdf)


    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x5,signature_25_0)

 
sha512sum0_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0xfffffffffffdf7bf), rs1:x4(0xffffdfffffffffff)
    li  x4, 0xffffdfffffffffff
    sha512sum0 x28, x4
    sd x28, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x28, 0xfffffffffffdf7bf)
 
sha512sum0_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0xfffffffffffbef7f), rs1:x3(0xffffbfffffffffff)
    li  x3, 0xffffbfffffffffff
    sha512sum0 x29, x3
    sd x29, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x29, 0xfffffffffffbef7f)
 
sha512sum0_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0xfffffffffff7deff), rs1:x2(0xffff7fffffffffff)
    li  x2, 0xffff7fffffffffff
    sha512sum0 x30, x2
    sd x30, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x30, 0xfffffffffff7deff)
 
sha512sum0_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffefbdff), rs1:x1(0xfffeffffffffffff)
    li  x1, 0xfffeffffffffffff
    sha512sum0 x31, x1
    sd x31, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0xffffffffffefbdff)
 
sha512sum0_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffdf7bff), rs1:x31(0xfffdffffffffffff)
    li  x31, 0xfffdffffffffffff
    sha512sum0 x1, x31
    sd x1, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0xffffffffffdf7bff)


    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_26_0)

 
sha512sum0_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffbef7ff), rs1:x30(0xfffbffffffffffff)
    li  x30, 0xfffbffffffffffff
    sha512sum0 x2, x30
    sd x2, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0xffffffffffbef7ff)
 
sha512sum0_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0xffffffffff7defff), rs1:x29(0xfff7ffffffffffff)
    li  x29, 0xfff7ffffffffffff
    sha512sum0 x3, x29
    sd x3, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0xffffffffff7defff)
 
sha512sum0_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0xfffffffffefbdfff), rs1:x28(0xffefffffffffffff)
    li  x28, 0xffefffffffffffff
    sha512sum0 x4, x28
    sd x4, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0xfffffffffefbdfff)
 
sha512sum0_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0xfffffffffdf7bfff), rs1:x27(0xffdfffffffffffff)
    li  x27, 0xffdfffffffffffff
    sha512sum0 x5, x27
    sd x5, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0xfffffffffdf7bfff)
 
sha512sum0_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0xfffffffffbef7fff), rs1:x26(0xffbfffffffffffff)
    li  x26, 0xffbfffffffffffff
    sha512sum0 x6, x26
    sd x6, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x6, 0xfffffffffbef7fff)


    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_27_0)

 
sha512sum0_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0xfffffffff7deffff), rs1:x25(0xff7fffffffffffff)
    li  x25, 0xff7fffffffffffff
    sha512sum0 x7, x25
    sd x7, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xfffffffff7deffff)
 
sha512sum0_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0xffffffffefbdffff), rs1:x24(0xfeffffffffffffff)
    li  x24, 0xfeffffffffffffff
    sha512sum0 x8, x24
    sd x8, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xffffffffefbdffff)
 
sha512sum0_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0xffffffffdf7bffff), rs1:x23(0xfdffffffffffffff)
    li  x23, 0xfdffffffffffffff
    sha512sum0 x9, x23
    sd x9, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xffffffffdf7bffff)
 
sha512sum0_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0xffffffffbef7ffff), rs1:x22(0xfbffffffffffffff)
    li  x22, 0xfbffffffffffffff
    sha512sum0 x10, x22
    sd x10, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xffffffffbef7ffff)
 
sha512sum0_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0xffffffff7defffff), rs1:x21(0xf7ffffffffffffff)
    li  x21, 0xf7ffffffffffffff
    sha512sum0 x11, x21
    sd x11, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xffffffff7defffff)


    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x6,signature_28_0)

 
sha512sum0_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0xfffffffefbdfffff), rs1:x20(0xefffffffffffffff)
    li  x20, 0xefffffffffffffff
    sha512sum0 x12, x20
    sd x12, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0xfffffffefbdfffff)
 
sha512sum0_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0xfffffffdf7bfffff), rs1:x19(0xdfffffffffffffff)
    li  x19, 0xdfffffffffffffff
    sha512sum0 x13, x19
    sd x13, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0xfffffffdf7bfffff)
 
sha512sum0_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0xfffffffbef7fffff), rs1:x18(0xbfffffffffffffff)
    li  x18, 0xbfffffffffffffff
    sha512sum0 x14, x18
    sd x14, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0xfffffffbef7fffff)
 
sha512sum0_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0xfffffff7deffffff), rs1:x17(0x7fffffffffffffff)
    li  x17, 0x7fffffffffffffff
    sha512sum0 x15, x17
    sd x15, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0xfffffff7deffffff)
 
sha512sum0_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xffffffffffffffff)
    li  x16, 0xffffffffffffffff
    sha512sum0 x16, x16
    sd x16, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x16, 0xffffffffffffffff)


    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_29_0)

 
sha512sum0_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0000001042000000), rs1:x15(0x0000000000000001)
    li  x15, 0x1
    sha512sum0 x17, x15
    sd x17, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x17, 0x0000001042000000)
 
sha512sum0_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0000002084000000), rs1:x14(0x0000000000000002)
    li  x14, 0x2
    sha512sum0 x18, x14
    sd x18, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x0000002084000000)
 
sha512sum0_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0000004108000000), rs1:x13(0x0000000000000004)
    li  x13, 0x4
    sha512sum0 x19, x13
    sd x19, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x0000004108000000)
 
sha512sum0_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0000008210000000), rs1:x12(0x0000000000000008)
    li  x12, 0x8
    sha512sum0 x20, x12
    sd x20, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x0000008210000000)
 
sha512sum0_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0000010420000000), rs1:x11(0x0000000000000010)
    li  x11, 0x10
    sha512sum0 x21, x11
    sd x21, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x0000010420000000)


    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_30_0)

 
sha512sum0_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0000020840000000), rs1:x10(0x0000000000000020)
    li  x10, 0x20
    sha512sum0 x22, x10
    sd x22, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x0000020840000000)
 
sha512sum0_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0000041080000000), rs1:x9(0x0000000000000040)
    li  x9, 0x40
    sha512sum0 x23, x9
    sd x23, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x0000041080000000)
 
sha512sum0_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0000082100000000), rs1:x8(0x0000000000000080)
    li  x8, 0x80
    sha512sum0 x24, x8
    sd x24, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x0000082100000000)
 
sha512sum0_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000104200000000), rs1:x7(0x0000000000000100)
    li  x7, 0x100
    sha512sum0 x25, x7
    sd x25, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000104200000000)
 
sha512sum0_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000208400000000), rs1:x6(0x0000000000000200)
    li  x6, 0x200
    sha512sum0 x26, x6
    sd x26, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000208400000000)


    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x6,signature_31_0)

 
sha512sum0_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000410800000000), rs1:x5(0x0000000000000400)
    li  x5, 0x400
    sha512sum0 x27, x5
    sd x27, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000410800000000)
 
sha512sum0_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000821000000000), rs1:x4(0x0000000000000800)
    li  x4, 0x800
    sha512sum0 x28, x4
    sd x28, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000821000000000)
 
sha512sum0_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0001042000000000), rs1:x3(0x0000000000001000)
    li  x3, 0x1000
    sha512sum0 x29, x3
    sd x29, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0001042000000000)
 
sha512sum0_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0002084000000000), rs1:x2(0x0000000000002000)
    li  x2, 0x2000
    sha512sum0 x30, x2
    sd x30, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0002084000000000)
 
sha512sum0_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0004108000000000), rs1:x1(0x0000000000004000)
    li  x1, 0x4000
    sha512sum0 x31, x1
    sd x31, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x31, 0x0004108000000000)


    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x6,signature_32_0)

 
sha512sum0_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0008210000000000), rs1:x31(0x0000000000008000)
    li  x31, 0x8000
    sha512sum0 x1, x31
    sd x1, 0(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x0008210000000000)
 
sha512sum0_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0010420000000000), rs1:x30(0x0000000000010000)
    li  x30, 0x10000
    sha512sum0 x2, x30
    sd x2, 8(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x0010420000000000)
 
sha512sum0_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0020840000000000), rs1:x29(0x0000000000020000)
    li  x29, 0x20000
    sha512sum0 x3, x29
    sd x3, 16(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x0020840000000000)
 
sha512sum0_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0041080000000000), rs1:x28(0x0000000000040000)
    li  x28, 0x40000
    sha512sum0 x4, x28
    sd x4, 24(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x0041080000000000)
 
sha512sum0_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0082100000000000), rs1:x27(0x0000000000080000)
    li  x27, 0x80000
    sha512sum0 x5, x27
    sd x5, 32(x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x0082100000000000)


    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_33_0)

 
sha512sum0_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0104200000000000), rs1:x26(0x0000000000100000)
    li  x26, 0x100000
    sha512sum0 x6, x26
    sd x6, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0104200000000000)
 
sha512sum0_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0208400000000000), rs1:x25(0x0000000000200000)
    li  x25, 0x200000
    sha512sum0 x7, x25
    sd x7, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0208400000000000)
 
sha512sum0_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0410800000000000), rs1:x24(0x0000000000400000)
    li  x24, 0x400000
    sha512sum0 x8, x24
    sd x8, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0410800000000000)
 
sha512sum0_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0821000000000000), rs1:x23(0x0000000000800000)
    li  x23, 0x800000
    sha512sum0 x9, x23
    sd x9, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0821000000000000)
 
sha512sum0_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x1042000000000000), rs1:x22(0x0000000001000000)
    li  x22, 0x1000000
    sha512sum0 x10, x22
    sd x10, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x1042000000000000)


    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_34_0)

 
sha512sum0_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x2084000000000000), rs1:x21(0x0000000002000000)
    li  x21, 0x2000000
    sha512sum0 x11, x21
    sd x11, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x2084000000000000)
 
sha512sum0_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x4108000000000000), rs1:x20(0x0000000004000000)
    li  x20, 0x4000000
    sha512sum0 x12, x20
    sd x12, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x4108000000000000)
 
sha512sum0_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x8210000000000000), rs1:x19(0x0000000008000000)
    li  x19, 0x8000000
    sha512sum0 x13, x19
    sd x13, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x8210000000000000)
 
sha512sum0_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0420000000000001), rs1:x18(0x0000000010000000)
    li  x18, 0x10000000
    sha512sum0 x14, x18
    sd x14, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x0420000000000001)
 
sha512sum0_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0840000000000002), rs1:x17(0x0000000020000000)
    li  x17, 0x20000000
    sha512sum0 x15, x17
    sd x15, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x0840000000000002)


    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x2,signature_35_0)

 
sha512sum0_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x1080000000000004), rs1:x16(0x0000000040000000)
    li  x16, 0x40000000
    sha512sum0 x16, x16
    sd x16, 0(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x1080000000000004)
 
sha512sum0_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x2100000000000008), rs1:x15(0x0000000080000000)
    li  x15, 0x80000000
    sha512sum0 x17, x15
    sd x17, 8(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x2100000000000008)
 
sha512sum0_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x4200000000000010), rs1:x14(0x0000000100000000)
    li  x14, 0x100000000
    sha512sum0 x18, x14
    sd x18, 16(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0x4200000000000010)
 
sha512sum0_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x8400000000000020), rs1:x13(0x0000000200000000)
    li  x13, 0x200000000
    sha512sum0 x19, x13
    sd x19, 24(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x8400000000000020)
 
sha512sum0_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0800000000000041), rs1:x12(0x0000000400000000)
    li  x12, 0x400000000
    sha512sum0 x20, x12
    sd x20, 32(x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0800000000000041)


    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_36_0)

 
sha512sum0_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x1000000000000082), rs1:x11(0x0000000800000000)
    li  x11, 0x800000000
    sha512sum0 x21, x11
    sd x21, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x1000000000000082)
 
sha512sum0_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x2000000000000104), rs1:x10(0x0000001000000000)
    li  x10, 0x1000000000
    sha512sum0 x22, x10
    sd x22, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x2000000000000104)
 
sha512sum0_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x4000000000000208), rs1:x9(0x0000002000000000)
    li  x9, 0x2000000000
    sha512sum0 x23, x9
    sd x23, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x4000000000000208)
 
sha512sum0_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x8000000000000410), rs1:x8(0x0000004000000000)
    li  x8, 0x4000000000
    sha512sum0 x24, x8
    sd x24, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x8000000000000410)
 
sha512sum0_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000821), rs1:x7(0x0000008000000000)
    li  x7, 0x8000000000
    sha512sum0 x25, x7
    sd x25, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x0000000000000821)


    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_37_0)

 
sha512sum0_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000000000001042), rs1:x6(0x0000010000000000)
    li  x6, 0x10000000000
    sha512sum0 x26, x6
    sd x26, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x0000000000001042)
 
sha512sum0_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000000000002084), rs1:x5(0x0000020000000000)
    li  x5, 0x20000000000
    sha512sum0 x27, x5
    sd x27, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x0000000000002084)
 
sha512sum0_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000000000004108), rs1:x4(0x0000040000000000)
    li  x4, 0x40000000000
    sha512sum0 x28, x4
    sd x28, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0x0000000000004108)
 
sha512sum0_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000000000008210), rs1:x3(0x0000080000000000)
    li  x3, 0x80000000000
    sha512sum0 x29, x3
    sd x29, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x0000000000008210)
 
sha512sum0_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000000000010420), rs1:x2(0x0000100000000000)
    li  x2, 0x100000000000
    sha512sum0 x30, x2
    sd x30, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x0000000000010420)


    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x5,signature_38_0)

 
sha512sum0_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000000000020840), rs1:x1(0x0000200000000000)
    li  x1, 0x200000000000
    sha512sum0 x31, x1
    sd x31, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x0000000000020840)
 
sha512sum0_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000000000041080), rs1:x31(0x0000400000000000)
    li  x31, 0x400000000000
    sha512sum0 x1, x31
    sd x1, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x0000000000041080)
 
sha512sum0_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000000000082100), rs1:x30(0x0000800000000000)
    li  x30, 0x800000000000
    sha512sum0 x2, x30
    sd x2, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x0000000000082100)
 
sha512sum0_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0000000000104200), rs1:x29(0x0001000000000000)
    li  x29, 0x1000000000000
    sha512sum0 x3, x29
    sd x3, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x0000000000104200)
 
sha512sum0_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0000000000208400), rs1:x28(0x0002000000000000)
    li  x28, 0x2000000000000
    sha512sum0 x4, x28
    sd x4, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0000000000208400)


    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_39_0)

 
sha512sum0_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0000000000410800), rs1:x27(0x0004000000000000)
    li  x27, 0x4000000000000
    sha512sum0 x5, x27
    sd x5, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x0000000000410800)
 
sha512sum0_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0000000000821000), rs1:x26(0x0008000000000000)
    li  x26, 0x8000000000000
    sha512sum0 x6, x26
    sd x6, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x0000000000821000)
 
sha512sum0_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0000000001042000), rs1:x25(0x0010000000000000)
    li  x25, 0x10000000000000
    sha512sum0 x7, x25
    sd x7, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x0000000001042000)
 
sha512sum0_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0000000002084000), rs1:x24(0x0020000000000000)
    li  x24, 0x20000000000000
    sha512sum0 x8, x24
    sd x8, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x0000000002084000)
 
sha512sum0_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0000000004108000), rs1:x23(0x0040000000000000)
    li  x23, 0x40000000000000
    sha512sum0 x9, x23
    sd x9, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0000000004108000)


    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_40_0)

 
sha512sum0_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0000000008210000), rs1:x22(0x0080000000000000)
    li  x22, 0x80000000000000
    sha512sum0 x10, x22
    sd x10, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x0000000008210000)
 
sha512sum0_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0000000010420000), rs1:x21(0x0100000000000000)
    li  x21, 0x100000000000000
    sha512sum0 x11, x21
    sd x11, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x0000000010420000)
 
sha512sum0_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0000000020840000), rs1:x20(0x0200000000000000)
    li  x20, 0x200000000000000
    sha512sum0 x12, x20
    sd x12, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x0000000020840000)
 
sha512sum0_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0000000041080000), rs1:x19(0x0400000000000000)
    li  x19, 0x400000000000000
    sha512sum0 x13, x19
    sd x13, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x0000000041080000)
 
sha512sum0_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0000000082100000), rs1:x18(0x0800000000000000)
    li  x18, 0x800000000000000
    sha512sum0 x14, x18
    sd x14, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x0000000082100000)


    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x3,signature_41_0)

 
sha512sum0_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x0000000104200000), rs1:x17(0x1000000000000000)
    li  x17, 0x1000000000000000
    sha512sum0 x15, x17
    sd x15, 0(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x0000000104200000)
 
sha512sum0_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x0000000208400000), rs1:x16(0x2000000000000000)
    li  x16, 0x2000000000000000
    sha512sum0 x16, x16
    sd x16, 8(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0000000208400000)
 
sha512sum0_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x0000000410800000), rs1:x15(0x4000000000000000)
    li  x15, 0x4000000000000000
    sha512sum0 x17, x15
    sd x17, 16(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x0000000410800000)
 
sha512sum0_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x0000000821000000), rs1:x14(0x8000000000000000)
    li  x14, 0x8000000000000000
    sha512sum0 x18, x14
    sd x18, 24(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x0000000821000000)
 
sha512sum0_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000)
    li  x13, 0x0
    sha512sum0 x19, x13
    sd x19, 32(x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x0000000000000000)


    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_42_0)

 
sha512sum0_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0xffffffefbdffffff), rs1:x12(0xfffffffffffffffe)
    li  x12, 0xfffffffffffffffe
    sha512sum0 x20, x12
    sd x20, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xffffffefbdffffff)
 
sha512sum0_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0xffffffdf7bffffff), rs1:x11(0xfffffffffffffffd)
    li  x11, 0xfffffffffffffffd
    sha512sum0 x21, x11
    sd x21, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xffffffdf7bffffff)
 
sha512sum0_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0xffffffbef7ffffff), rs1:x10(0xfffffffffffffffb)
    li  x10, 0xfffffffffffffffb
    sha512sum0 x22, x10
    sd x22, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xffffffbef7ffffff)
 
sha512sum0_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0xffffff7defffffff), rs1:x9(0xfffffffffffffff7)
    li  x9, 0xfffffffffffffff7
    sha512sum0 x23, x9
    sd x23, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xffffff7defffffff)
 
sha512sum0_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0xfffffefbdfffffff), rs1:x8(0xffffffffffffffef)
    li  x8, 0xffffffffffffffef
    sha512sum0 x24, x8
    sd x24, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xfffffefbdfffffff)


    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_43_0)

 
sha512sum0_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0xfffffdf7bfffffff), rs1:x7(0xffffffffffffffdf)
    li  x7, 0xffffffffffffffdf
    sha512sum0 x25, x7
    sd x25, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xfffffdf7bfffffff)
 
sha512sum0_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0xfffffbef7fffffff), rs1:x6(0xffffffffffffffbf)
    li  x6, 0xffffffffffffffbf
    sha512sum0 x26, x6
    sd x26, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0xfffffbef7fffffff)
 
sha512sum0_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0xfffff7deffffffff), rs1:x5(0xffffffffffffff7f)
    li  x5, 0xffffffffffffff7f
    sha512sum0 x27, x5
    sd x27, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0xfffff7deffffffff)
 
sha512sum0_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0xffffefbdffffffff), rs1:x4(0xfffffffffffffeff)
    li  x4, 0xfffffffffffffeff
    sha512sum0 x28, x4
    sd x28, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0xffffefbdffffffff)
 
sha512sum0_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0xffffdf7bffffffff), rs1:x3(0xfffffffffffffdff)
    li  x3, 0xfffffffffffffdff
    sha512sum0 x29, x3
    sd x29, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0xffffdf7bffffffff)


    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x4,signature_44_0)

 
sha512sum0_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0xffffbef7ffffffff), rs1:x2(0xfffffffffffffbff)
    li  x2, 0xfffffffffffffbff
    sha512sum0 x30, x2
    sd x30, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0xffffbef7ffffffff)
 
sha512sum0_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0xffff7defffffffff), rs1:x1(0xfffffffffffff7ff)
    li  x1, 0xfffffffffffff7ff
    sha512sum0 x31, x1
    sd x31, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0xffff7defffffffff)
 
sha512sum0_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0xfffefbdfffffffff), rs1:x31(0xffffffffffffefff)
    li  x31, 0xffffffffffffefff
    sha512sum0 x1, x31
    sd x1, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0xfffefbdfffffffff)
 
sha512sum0_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0xfffdf7bfffffffff), rs1:x30(0xffffffffffffdfff)
    li  x30, 0xffffffffffffdfff
    sha512sum0 x2, x30
    sd x2, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0xfffdf7bfffffffff)
 
sha512sum0_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0xfffbef7fffffffff), rs1:x29(0xffffffffffffbfff)
    li  x29, 0xffffffffffffbfff
    sha512sum0 x3, x29
    sd x3, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0xfffbef7fffffffff)


    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_45_0)

 
sha512sum0_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0xfff7deffffffffff), rs1:x28(0xffffffffffff7fff)
    li  x28, 0xffffffffffff7fff
    sha512sum0 x4, x28
    sd x4, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0xfff7deffffffffff)
 
sha512sum0_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0xffefbdffffffffff), rs1:x27(0xfffffffffffeffff)
    li  x27, 0xfffffffffffeffff
    sha512sum0 x5, x27
    sd x5, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0xffefbdffffffffff)
 
sha512sum0_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0xffdf7bffffffffff), rs1:x26(0xfffffffffffdffff)
    li  x26, 0xfffffffffffdffff
    sha512sum0 x6, x26
    sd x6, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xffdf7bffffffffff)
 
sha512sum0_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0xffbef7ffffffffff), rs1:x25(0xfffffffffffbffff)
    li  x25, 0xfffffffffffbffff
    sha512sum0 x7, x25
    sd x7, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xffbef7ffffffffff)
 
sha512sum0_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0xff7defffffffffff), rs1:x24(0xfffffffffff7ffff)
    li  x24, 0xfffffffffff7ffff
    sha512sum0 x8, x24
    sd x8, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xff7defffffffffff)


    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_46_0)

 
sha512sum0_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0xfefbdfffffffffff), rs1:x23(0xffffffffffefffff)
    li  x23, 0xffffffffffefffff
    sha512sum0 x9, x23
    sd x9, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xfefbdfffffffffff)
 
sha512sum0_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0xfdf7bfffffffffff), rs1:x22(0xffffffffffdfffff)
    li  x22, 0xffffffffffdfffff
    sha512sum0 x10, x22
    sd x10, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xfdf7bfffffffffff)
 
sha512sum0_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0xfbef7fffffffffff), rs1:x21(0xffffffffffbfffff)
    li  x21, 0xffffffffffbfffff
    sha512sum0 x11, x21
    sd x11, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xfbef7fffffffffff)
 
sha512sum0_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0xf7deffffffffffff), rs1:x20(0xffffffffff7fffff)
    li  x20, 0xffffffffff7fffff
    sha512sum0 x12, x20
    sd x12, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0xf7deffffffffffff)
 
sha512sum0_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0xefbdffffffffffff), rs1:x19(0xfffffffffeffffff)
    li  x19, 0xfffffffffeffffff
    sha512sum0 x13, x19
    sd x13, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0xefbdffffffffffff)


    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x4,signature_47_0)

 
sha512sum0_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0xdf7bffffffffffff), rs1:x18(0xfffffffffdffffff)
    li  x18, 0xfffffffffdffffff
    sha512sum0 x14, x18
    sd x14, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0xdf7bffffffffffff)
 
sha512sum0_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0xbef7ffffffffffff), rs1:x17(0xfffffffffbffffff)
    li  x17, 0xfffffffffbffffff
    sha512sum0 x15, x17
    sd x15, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0xbef7ffffffffffff)
 
sha512sum0_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0x7defffffffffffff), rs1:x16(0xfffffffff7ffffff)
    li  x16, 0xfffffffff7ffffff
    sha512sum0 x16, x16
    sd x16, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0x7defffffffffffff)
 
sha512sum0_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0xfbdffffffffffffe), rs1:x15(0xffffffffefffffff)
    li  x15, 0xffffffffefffffff
    sha512sum0 x17, x15
    sd x17, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0xfbdffffffffffffe)
 
sha512sum0_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0xf7bffffffffffffd), rs1:x14(0xffffffffdfffffff)
    li  x14, 0xffffffffdfffffff
    sha512sum0 x18, x14
    sd x18, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0xf7bffffffffffffd)


    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_48_0)

 
sha512sum0_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0xef7ffffffffffffb), rs1:x13(0xffffffffbfffffff)
    li  x13, 0xffffffffbfffffff
    sha512sum0 x19, x13
    sd x19, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0xef7ffffffffffffb)
 
sha512sum0_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0xdefffffffffffff7), rs1:x12(0xffffffff7fffffff)
    li  x12, 0xffffffff7fffffff
    sha512sum0 x20, x12
    sd x20, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xdefffffffffffff7)
 
sha512sum0_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0xbdffffffffffffef), rs1:x11(0xfffffffeffffffff)
    li  x11, 0xfffffffeffffffff
    sha512sum0 x21, x11
    sd x21, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xbdffffffffffffef)
 
sha512sum0_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0x7bffffffffffffdf), rs1:x10(0xfffffffdffffffff)
    li  x10, 0xfffffffdffffffff
    sha512sum0 x22, x10
    sd x22, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x7bffffffffffffdf)
 
sha512sum0_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0xf7ffffffffffffbe), rs1:x9(0xfffffffbffffffff)
    li  x9, 0xfffffffbffffffff
    sha512sum0 x23, x9
    sd x23, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xf7ffffffffffffbe)


    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_49_0)

 
sha512sum0_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0xefffffffffffff7d), rs1:x8(0xfffffff7ffffffff)
    li  x8, 0xfffffff7ffffffff
    sha512sum0 x24, x8
    sd x24, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xefffffffffffff7d)
 
sha512sum0_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0xdffffffffffffefb), rs1:x7(0xffffffefffffffff)
    li  x7, 0xffffffefffffffff
    sha512sum0 x25, x7
    sd x25, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xdffffffffffffefb)
 
sha512sum0_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0xbffffffffffffdf7), rs1:x6(0xffffffdfffffffff)
    li  x6, 0xffffffdfffffffff
    sha512sum0 x26, x6
    sd x26, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0xbffffffffffffdf7)
 
sha512sum0_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0x7ffffffffffffbef), rs1:x5(0xffffffbfffffffff)
    li  x5, 0xffffffbfffffffff
    sha512sum0 x27, x5
    sd x27, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x7ffffffffffffbef)
 
sha512sum0_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0xfffffffffffff7de), rs1:x4(0xffffff7fffffffff)
    li  x4, 0xffffff7fffffffff
    sha512sum0 x28, x4
    sd x28, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0xfffffffffffff7de)


    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x4,signature_50_0)

 
sha512sum0_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffefbd), rs1:x3(0xfffffeffffffffff)
    li  x3, 0xfffffeffffffffff
    sha512sum0 x29, x3
    sd x29, 0(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0xffffffffffffefbd)
 
sha512sum0_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffdf7b), rs1:x2(0xfffffdffffffffff)
    li  x2, 0xfffffdffffffffff
    sha512sum0 x30, x2
    sd x30, 8(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0xffffffffffffdf7b)
 
sha512sum0_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffbef7), rs1:x1(0xfffffbffffffffff)
    li  x1, 0xfffffbffffffffff
    sha512sum0 x31, x1
    sd x31, 16(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0xffffffffffffbef7)
 
sha512sum0_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffff7def), rs1:x31(0xfffff7ffffffffff)
    li  x31, 0xfffff7ffffffffff
    sha512sum0 x1, x31
    sd x1, 24(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0xffffffffffff7def)
 
sha512sum0_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0xfffffffffffefbdf), rs1:x30(0xffffefffffffffff)
    li  x30, 0xffffefffffffffff
    sha512sum0 x2, x30
    sd x2, 32(x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0xfffffffffffefbdf)


    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_51_0)

 
sha512sum0_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0xfffffffffffdf7bf), rs1:x29(0xffffdfffffffffff)
    li  x29, 0xffffdfffffffffff
    sha512sum0 x3, x29
    sd x3, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0xfffffffffffdf7bf)
 
sha512sum0_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0xfffffffffffbef7f), rs1:x28(0xffffbfffffffffff)
    li  x28, 0xffffbfffffffffff
    sha512sum0 x4, x28
    sd x4, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0xfffffffffffbef7f)
 
sha512sum0_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0xfffffffffff7deff), rs1:x27(0xffff7fffffffffff)
    li  x27, 0xffff7fffffffffff
    sha512sum0 x5, x27
    sd x5, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0xfffffffffff7deff)
 
sha512sum0_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffefbdff), rs1:x26(0xfffeffffffffffff)
    li  x26, 0xfffeffffffffffff
    sha512sum0 x6, x26
    sd x6, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xffffffffffefbdff)
 
sha512sum0_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffdf7bff), rs1:x25(0xfffdffffffffffff)
    li  x25, 0xfffdffffffffffff
    sha512sum0 x7, x25
    sd x7, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xffffffffffdf7bff)


    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_52_0)

 
sha512sum0_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffbef7ff), rs1:x24(0xfffbffffffffffff)
    li  x24, 0xfffbffffffffffff
    sha512sum0 x8, x24
    sd x8, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xffffffffffbef7ff)
 
sha512sum0_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0xffffffffff7defff), rs1:x23(0xfff7ffffffffffff)
    li  x23, 0xfff7ffffffffffff
    sha512sum0 x9, x23
    sd x9, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xffffffffff7defff)
 
sha512sum0_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0xfffffffffefbdfff), rs1:x22(0xffefffffffffffff)
    li  x22, 0xffefffffffffffff
    sha512sum0 x10, x22
    sd x10, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xfffffffffefbdfff)
 
sha512sum0_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0xfffffffffdf7bfff), rs1:x21(0xffdfffffffffffff)
    li  x21, 0xffdfffffffffffff
    sha512sum0 x11, x21
    sd x11, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xfffffffffdf7bfff)
 
sha512sum0_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0xfffffffffbef7fff), rs1:x20(0xffbfffffffffffff)
    li  x20, 0xffbfffffffffffff
    sha512sum0 x12, x20
    sd x12, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0xfffffffffbef7fff)


    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x5,signature_53_0)

 
sha512sum0_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0xfffffffff7deffff), rs1:x19(0xff7fffffffffffff)
    li  x19, 0xff7fffffffffffff
    sha512sum0 x13, x19
    sd x13, 0(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0xfffffffff7deffff)
 
sha512sum0_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0xffffffffefbdffff), rs1:x18(0xfeffffffffffffff)
    li  x18, 0xfeffffffffffffff
    sha512sum0 x14, x18
    sd x14, 8(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0xffffffffefbdffff)
 
sha512sum0_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0xffffffffdf7bffff), rs1:x17(0xfdffffffffffffff)
    li  x17, 0xfdffffffffffffff
    sha512sum0 x15, x17
    sd x15, 16(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0xffffffffdf7bffff)
 
sha512sum0_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0xffffffffbef7ffff), rs1:x16(0xfbffffffffffffff)
    li  x16, 0xfbffffffffffffff
    sha512sum0 x16, x16
    sd x16, 24(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0xffffffffbef7ffff)
 
sha512sum0_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0xffffffff7defffff), rs1:x15(0xf7ffffffffffffff)
    li  x15, 0xf7ffffffffffffff
    sha512sum0 x17, x15
    sd x17, 32(x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0xffffffff7defffff)


    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_54_0)

 
sha512sum0_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0xfffffffefbdfffff), rs1:x14(0xefffffffffffffff)
    li  x14, 0xefffffffffffffff
    sha512sum0 x18, x14
    sd x18, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0xfffffffefbdfffff)
 
sha512sum0_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0xfffffffdf7bfffff), rs1:x13(0xdfffffffffffffff)
    li  x13, 0xdfffffffffffffff
    sha512sum0 x19, x13
    sd x19, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0xfffffffdf7bfffff)
 
sha512sum0_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0xfffffffbef7fffff), rs1:x12(0xbfffffffffffffff)
    li  x12, 0xbfffffffffffffff
    sha512sum0 x20, x12
    sd x20, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xfffffffbef7fffff)
 
sha512sum0_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0xfffffff7deffffff), rs1:x11(0x7fffffffffffffff)
    li  x11, 0x7fffffffffffffff
    sha512sum0 x21, x11
    sd x21, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xfffffff7deffffff)
 
sha512sum0_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xffffffffffffffff)
    li  x10, 0xffffffffffffffff
    sha512sum0 x22, x10
    sd x22, 32(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xffffffffffffffff)


    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sha512sum0)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",sha512sum0)

    RVTEST_SIGBASE(x1,signature_55_0)

 
sha512sum0_01_inst_270:
    // Test 270:  Test with random values
    // result rd:x23(0x6e84599761cd6bda), rs1:x9(0x10fd3dedadea5195)
    li  x9, 0x10fd3dedadea5195
    sha512sum0 x23, x9
    sd x23, 0(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x6e84599761cd6bda)
 
sha512sum0_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1)
    li  x8, 0xbd295ce2d2ffbec1
    sha512sum0 x0, x8
    sd x0, 8(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x0, 0x0000000000000000)
 
sha512sum0_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0xef7322c313821ea5), rs1:x7(0xc9649f05a8e1a8bb)
    li  x7, 0xc9649f05a8e1a8bb
    sha512sum0 x25, x7
    sd x25, 16(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xef7322c313821ea5)
 
sha512sum0_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb)
    li  x0, 0x3541291848c99fcb
    sha512sum0 x26, x0
    sd x26, 24(x1)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x0000000000000000)
	
#endif


RVTEST_CODE_END sha512sum0_01_code_end
RVTEST_CODE_BEGIN xperm_n_01_init xperm_n_01_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x6,signature_1_0)


xperm_n_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0xf1a15daa9193dd15), rs1:x31(0x10fd3dedadea5195), rs2:x16(0xdf7f3844121bcc23)
    TEST_RR_OP(xperm.n, x1, x31, x16, 0xf1a15daa9193dd15, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x6, 0, x7)

xperm_n_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0xbfc25fcccfd2c1f5), rs1:x30(0xbd295ce2d2ffbec1), rs2:x15(0xf5adb41aa47d105b)
    TEST_RR_OP(xperm.n, x2, x30, x15, 0xbfc25fcccfd2c1f5, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x6, 8, x7)

xperm_n_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0x58c8a1acabafc84b), rs1:x29(0xc9649f05a8e1a8bb), rs2:x14(0x82f6747f707af2c0)
    TEST_RR_OP(xperm.n, x3, x29, x14, 0x58c8a1acabafc84b, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x6, 16, x7)

xperm_n_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0x4991f3495c123219), rs1:x28(0x3541291848c99fcb), rs2:x13(0x73a92fd4e19bfbc3)
    TEST_RR_OP(xperm.n, x4, x28, x13, 0x4991f3495c123219, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x6, 24, x7)

xperm_n_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x1d64f01d12074f71), rs1:x27(0x10a24740461d524f), rs2:x12(0x546b0e54528a10af)
    TEST_RR_OP(xperm.n, x5, x27, x12, 0x1d64f01d12074f71, 0x10a24740461d524f, 0x546b0e54528a10af, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_2_0)


xperm_n_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0xafe0a5afa2a680a5), rs1:x26(0x546b0e54528a10af), rs2:x11(0x10a24740461d524f)
    TEST_RR_OP(xperm.n, x6, x26, x11, 0xafe0a5afa2a680a5, 0x546b0e54528a10af, 0x10a24740461d524f, x1, 0, x2)

xperm_n_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0xf9bcbdc4b49dd792), rs1:x25(0x73a92fd4e19bfbc3), rs2:x10(0x3541291848c99fcb)
    TEST_RR_OP(xperm.n, x7, x25, x10, 0xf9bcbdc4b49dd792, 0x73a92fd4e19bfbc3, 0x3541291848c99fcb, x1, 8, x2)

xperm_n_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x670a78074f2c4f77), rs1:x24(0x82f6747f707af2c0), rs2:x9(0xc9649f05a8e1a8bb)
    TEST_RR_OP(xperm.n, x8, x24, x9, 0x670a78074f2c4f77, 0x82f6747f707af2c0, 0xc9649f05a8e1a8bb, x1, 16, x2)

xperm_n_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0xba017d50a0ffb5d5), rs1:x23(0xf5adb41aa47d105b), rs2:x8(0xbd295ce2d2ffbec1)
    TEST_RR_OP(xperm.n, x9, x23, x8, 0xba017d50a0ffb5d5, 0xf5adb41aa47d105b, 0xbd295ce2d2ffbec1, x1, 24, x2)

xperm_n_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0x23d7c7f787f81241), rs1:x22(0xdf7f3844121bcc23), rs2:x7(0x10fd3dedadea5195)
    TEST_RR_OP(xperm.n, x10, x22, x7, 0x23d7c7f787f81241, 0xdf7f3844121bcc23, 0x10fd3dedadea5195, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_3_0)


xperm_n_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0000000000000001), rs2:x6(0xffffffffffffffff)
    TEST_RR_OP(xperm.n, x11, x21, x6, 0x0000000000000000, 0x1, 0xffffffffffffffff, x1, 0, x7)

xperm_n_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000000000002), rs2:x5(0x7fffffffffffffff)
    TEST_RR_OP(xperm.n, x12, x20, x5, 0x0000000000000000, 0x2, 0x7fffffffffffffff, x1, 8, x7)

xperm_n_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000004), rs2:x4(0xbfffffffffffffff)
    TEST_RR_OP(xperm.n, x13, x19, x4, 0x0000000000000000, 0x4, 0xbfffffffffffffff, x1, 16, x7)

xperm_n_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0000000000000008), rs2:x3(0xdfffffffffffffff)
    TEST_RR_OP(xperm.n, x14, x18, x3, 0x0000000000000000, 0x8, 0xdfffffffffffffff, x1, 24, x7)

xperm_n_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x0000000000000010), rs2:x2(0xefffffffffffffff)
    TEST_RR_OP(xperm.n, x15, x17, x2, 0x0000000000000000, 0x10, 0xefffffffffffffff, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x2,signature_4_0)


xperm_n_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x0000000000000020), rs2:x1(0xf7ffffffffffffff)
    TEST_RR_OP(xperm.n, x16, x16, x1, 0x0000000000000000, 0x20, 0xf7ffffffffffffff, x2, 0, x3)

xperm_n_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000000000000040), rs2:x31(0xfbffffffffffffff)
    TEST_RR_OP(xperm.n, x17, x15, x31, 0x0000000000000000, 0x40, 0xfbffffffffffffff, x2, 8, x3)

xperm_n_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000000000000080), rs2:x30(0xfdffffffffffffff)
    TEST_RR_OP(xperm.n, x18, x14, x30, 0x0000000000000000, 0x80, 0xfdffffffffffffff, x2, 16, x3)

xperm_n_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000100), rs2:x29(0xfeffffffffffffff)
    TEST_RR_OP(xperm.n, x19, x13, x29, 0x0000000000000000, 0x100, 0xfeffffffffffffff, x2, 24, x3)

xperm_n_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000000000000200), rs2:x28(0xff7fffffffffffff)
    TEST_RR_OP(xperm.n, x20, x12, x28, 0x0000000000000000, 0x200, 0xff7fffffffffffff, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_5_0)


xperm_n_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000000000400), rs2:x27(0xffbfffffffffffff)
    TEST_RR_OP(xperm.n, x21, x11, x27, 0x0000000000000000, 0x400, 0xffbfffffffffffff, x1, 0, x2)

xperm_n_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000000000000800), rs2:x26(0xffdfffffffffffff)
    TEST_RR_OP(xperm.n, x22, x10, x26, 0x0000000000000000, 0x800, 0xffdfffffffffffff, x1, 8, x2)

xperm_n_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000000000001000), rs2:x25(0xffefffffffffffff)
    TEST_RR_OP(xperm.n, x23, x9, x25, 0x0000000000000000, 0x1000, 0xffefffffffffffff, x1, 16, x2)

xperm_n_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000000000002000), rs2:x24(0xfff7ffffffffffff)
    TEST_RR_OP(xperm.n, x24, x8, x24, 0x0000000000000000, 0x2000, 0xfff7ffffffffffff, x1, 24, x2)

xperm_n_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000000000004000), rs2:x23(0xfffbffffffffffff)
    TEST_RR_OP(xperm.n, x25, x7, x23, 0x0000000000000000, 0x4000, 0xfffbffffffffffff, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_6_0)


xperm_n_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000000000008000), rs2:x22(0xfffdffffffffffff)
    TEST_RR_OP(xperm.n, x26, x6, x22, 0x0000000000000000, 0x8000, 0xfffdffffffffffff, x1, 0, x7)

xperm_n_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000000000010000), rs2:x21(0xfffeffffffffffff)
    TEST_RR_OP(xperm.n, x27, x5, x21, 0x0000000000000000, 0x10000, 0xfffeffffffffffff, x1, 8, x7)

xperm_n_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000000000020000), rs2:x20(0xffff7fffffffffff)
    TEST_RR_OP(xperm.n, x28, x4, x20, 0x0000000000000000, 0x20000, 0xffff7fffffffffff, x1, 16, x7)

xperm_n_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000000000040000), rs2:x19(0xffffbfffffffffff)
    TEST_RR_OP(xperm.n, x29, x3, x19, 0x0000000000000000, 0x40000, 0xffffbfffffffffff, x1, 24, x7)

xperm_n_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000000000080000), rs2:x18(0xffffdfffffffffff)
    TEST_RR_OP(xperm.n, x30, x2, x18, 0x0000000000000000, 0x80000, 0xffffdfffffffffff, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x5,signature_7_0)


xperm_n_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000000000100000), rs2:x17(0xffffefffffffffff)
    TEST_RR_OP(xperm.n, x31, x1, x17, 0x0000000000000000, 0x100000, 0xffffefffffffffff, x5, 0, x6)

xperm_n_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000000000200000), rs2:x16(0xfffff7ffffffffff)
    TEST_RR_OP(xperm.n, x1, x31, x16, 0x0000000000000000, 0x200000, 0xfffff7ffffffffff, x5, 8, x6)

xperm_n_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000000000400000), rs2:x15(0xfffffbffffffffff)
    TEST_RR_OP(xperm.n, x2, x30, x15, 0x0000000000000000, 0x400000, 0xfffffbffffffffff, x5, 16, x6)

xperm_n_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0000000000800000), rs2:x14(0xfffffdffffffffff)
    TEST_RR_OP(xperm.n, x3, x29, x14, 0x0000000000000000, 0x800000, 0xfffffdffffffffff, x5, 24, x6)

xperm_n_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0000000001000000), rs2:x13(0xfffffeffffffffff)
    TEST_RR_OP(xperm.n, x4, x28, x13, 0x0000000000000000, 0x1000000, 0xfffffeffffffffff, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_8_0)


xperm_n_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0000000002000000), rs2:x12(0xffffff7fffffffff)
    TEST_RR_OP(xperm.n, x5, x27, x12, 0x0000000000000000, 0x2000000, 0xffffff7fffffffff, x1, 0, x2)

xperm_n_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0000000004000000), rs2:x11(0xffffffbfffffffff)
    TEST_RR_OP(xperm.n, x6, x26, x11, 0x0000000000000000, 0x4000000, 0xffffffbfffffffff, x1, 8, x2)

xperm_n_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0000000008000000), rs2:x10(0xffffffdfffffffff)
    TEST_RR_OP(xperm.n, x7, x25, x10, 0x0000000000000000, 0x8000000, 0xffffffdfffffffff, x1, 16, x2)

xperm_n_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0000000010000000), rs2:x9(0xffffffefffffffff)
    TEST_RR_OP(xperm.n, x8, x24, x9, 0x0000000000000000, 0x10000000, 0xffffffefffffffff, x1, 24, x2)

xperm_n_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0000000200000000), rs1:x23(0x0000000020000000), rs2:x8(0xfffffff7ffffffff)
    TEST_RR_OP(xperm.n, x9, x23, x8, 0x0000000200000000, 0x20000000, 0xfffffff7ffffffff, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_9_0)


xperm_n_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0000000040000000), rs2:x7(0xfffffffbffffffff)
    TEST_RR_OP(xperm.n, x10, x22, x7, 0x0000000000000000, 0x40000000, 0xfffffffbffffffff, x1, 0, x2)

xperm_n_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0000000080000000), rs2:x6(0xfffffffdffffffff)
    TEST_RR_OP(xperm.n, x11, x21, x6, 0x0000000000000000, 0x80000000, 0xfffffffdffffffff, x1, 8, x2)

xperm_n_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000100000000), rs2:x5(0xfffffffeffffffff)
    TEST_RR_OP(xperm.n, x12, x20, x5, 0x0000000000000000, 0x100000000, 0xfffffffeffffffff, x1, 16, x2)

xperm_n_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000200000000), rs2:x4(0xffffffff7fffffff)
    TEST_RR_OP(xperm.n, x13, x19, x4, 0x0000000000000000, 0x200000000, 0xffffffff7fffffff, x1, 24, x2)

xperm_n_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0000000400000000), rs2:x3(0xffffffffbfffffff)
    TEST_RR_OP(xperm.n, x14, x18, x3, 0x0000000000000000, 0x400000000, 0xffffffffbfffffff, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x3,signature_10_0)


xperm_n_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x0000000800000000), rs2:x2(0xffffffffdfffffff)
    TEST_RR_OP(xperm.n, x15, x17, x2, 0x0000000000000000, 0x800000000, 0xffffffffdfffffff, x3, 0, x4)

xperm_n_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x0000001000000000), rs2:x1(0xffffffffefffffff)
    TEST_RR_OP(xperm.n, x16, x16, x1, 0x0000000000000000, 0x1000000000, 0xffffffffefffffff, x3, 8, x4)

xperm_n_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000002000000000), rs2:x31(0xfffffffff7ffffff)
    TEST_RR_OP(xperm.n, x17, x15, x31, 0x0000000000000000, 0x2000000000, 0xfffffffff7ffffff, x3, 16, x4)

xperm_n_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000004000000000), rs2:x30(0xfffffffffbffffff)
    TEST_RR_OP(xperm.n, x18, x14, x30, 0x0000000000000000, 0x4000000000, 0xfffffffffbffffff, x3, 24, x4)

xperm_n_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000008000000000), rs2:x29(0xfffffffffdffffff)
    TEST_RR_OP(xperm.n, x19, x13, x29, 0x0000000000000000, 0x8000000000, 0xfffffffffdffffff, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_11_0)


xperm_n_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000010000000000), rs2:x28(0xfffffffffeffffff)
    TEST_RR_OP(xperm.n, x20, x12, x28, 0x0000000000000000, 0x10000000000, 0xfffffffffeffffff, x1, 0, x2)

xperm_n_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000020000000000), rs2:x27(0xffffffffff7fffff)
    TEST_RR_OP(xperm.n, x21, x11, x27, 0x0000000000000000, 0x20000000000, 0xffffffffff7fffff, x1, 8, x2)

xperm_n_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000040000000000), rs2:x26(0xffffffffffbfffff)
    TEST_RR_OP(xperm.n, x22, x10, x26, 0x0000000000000000, 0x40000000000, 0xffffffffffbfffff, x1, 16, x2)

xperm_n_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000080000000000), rs2:x25(0xffffffffffdfffff)
    TEST_RR_OP(xperm.n, x23, x9, x25, 0x0000000000000000, 0x80000000000, 0xffffffffffdfffff, x1, 24, x2)

xperm_n_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000100000000000), rs2:x24(0xffffffffffefffff)
    TEST_RR_OP(xperm.n, x24, x8, x24, 0x0000000000000000, 0x100000000000, 0xffffffffffefffff, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_12_0)


xperm_n_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000200000000000), rs2:x23(0xfffffffffff7ffff)
    TEST_RR_OP(xperm.n, x25, x7, x23, 0x0000000000000000, 0x200000000000, 0xfffffffffff7ffff, x1, 0, x2)

xperm_n_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x0000000000040000), rs1:x6(0x0000400000000000), rs2:x22(0xfffffffffffbffff)
    TEST_RR_OP(xperm.n, x26, x6, x22, 0x0000000000040000, 0x400000000000, 0xfffffffffffbffff, x1, 8, x2)

xperm_n_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000800000000000), rs2:x21(0xfffffffffffdffff)
    TEST_RR_OP(xperm.n, x27, x5, x21, 0x0000000000000000, 0x800000000000, 0xfffffffffffdffff, x1, 16, x2)

xperm_n_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0001000000000000), rs2:x20(0xfffffffffffeffff)
    TEST_RR_OP(xperm.n, x28, x4, x20, 0x0000000000000000, 0x1000000000000, 0xfffffffffffeffff, x1, 24, x2)

xperm_n_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0002000000000000), rs2:x19(0xffffffffffff7fff)
    TEST_RR_OP(xperm.n, x29, x3, x19, 0x0000000000000000, 0x2000000000000, 0xffffffffffff7fff, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x4,signature_13_0)


xperm_n_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0004000000000000), rs2:x18(0xffffffffffffbfff)
    TEST_RR_OP(xperm.n, x30, x2, x18, 0x0000000000000000, 0x4000000000000, 0xffffffffffffbfff, x4, 0, x5)

xperm_n_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0008000000000000), rs2:x17(0xffffffffffffdfff)
    TEST_RR_OP(xperm.n, x31, x1, x17, 0x0000000000000000, 0x8000000000000, 0xffffffffffffdfff, x4, 8, x5)

xperm_n_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0010000000000000), rs2:x16(0xffffffffffffefff)
    TEST_RR_OP(xperm.n, x1, x31, x16, 0x0000000000000000, 0x10000000000000, 0xffffffffffffefff, x4, 16, x5)

xperm_n_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0020000000000000), rs2:x15(0xfffffffffffff7ff)
    TEST_RR_OP(xperm.n, x2, x30, x15, 0x0000000000000000, 0x20000000000000, 0xfffffffffffff7ff, x4, 24, x5)

xperm_n_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0040000000000000), rs2:x14(0xfffffffffffffbff)
    TEST_RR_OP(xperm.n, x3, x29, x14, 0x0000000000000000, 0x40000000000000, 0xfffffffffffffbff, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_14_0)


xperm_n_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000800), rs1:x28(0x0080000000000000), rs2:x13(0xfffffffffffffdff)
    TEST_RR_OP(xperm.n, x4, x28, x13, 0x0000000000000800, 0x80000000000000, 0xfffffffffffffdff, x1, 0, x2)

xperm_n_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000100), rs1:x27(0x0100000000000000), rs2:x12(0xfffffffffffffeff)
    TEST_RR_OP(xperm.n, x5, x27, x12, 0x0000000000000100, 0x100000000000000, 0xfffffffffffffeff, x1, 8, x2)

xperm_n_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0200000000000000), rs2:x11(0xffffffffffffff7f)
    TEST_RR_OP(xperm.n, x6, x26, x11, 0x0000000000000000, 0x200000000000000, 0xffffffffffffff7f, x1, 16, x2)

xperm_n_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0400000000000000), rs2:x10(0xffffffffffffffbf)
    TEST_RR_OP(xperm.n, x7, x25, x10, 0x0000000000000000, 0x400000000000000, 0xffffffffffffffbf, x1, 24, x2)

xperm_n_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0800000000000000), rs2:x9(0xffffffffffffffdf)
    TEST_RR_OP(xperm.n, x8, x24, x9, 0x0000000000000000, 0x800000000000000, 0xffffffffffffffdf, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_15_0)


xperm_n_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x1111111111111101), rs1:x23(0x1000000000000000), rs2:x8(0xffffffffffffffef)
    TEST_RR_OP(xperm.n, x9, x23, x8, 0x1111111111111101, 0x1000000000000000, 0xffffffffffffffef, x1, 0, x2)

xperm_n_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x2222222222222220), rs1:x22(0x2000000000000000), rs2:x7(0xfffffffffffffff7)
    TEST_RR_OP(xperm.n, x10, x22, x7, 0x2222222222222220, 0x2000000000000000, 0xfffffffffffffff7, x1, 8, x2)

xperm_n_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x4444444444444440), rs1:x21(0x4000000000000000), rs2:x6(0xfffffffffffffffb)
    TEST_RR_OP(xperm.n, x11, x21, x6, 0x4444444444444440, 0x4000000000000000, 0xfffffffffffffffb, x1, 16, x2)

xperm_n_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x8888888888888880), rs1:x20(0x8000000000000000), rs2:x5(0xfffffffffffffffd)
    TEST_RR_OP(xperm.n, x12, x20, x5, 0x8888888888888880, 0x8000000000000000, 0xfffffffffffffffd, x1, 24, x2)

xperm_n_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000), rs2:x4(0xfffffffffffffffe)
    TEST_RR_OP(xperm.n, x13, x19, x4, 0x0000000000000000, 0x0, 0xfffffffffffffffe, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x4,signature_16_0)


xperm_n_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0xeeeeeeeeeeeeeeee), rs1:x18(0xfffffffffffffffe), rs2:x3(0x0000000000000000)
    TEST_RR_OP(xperm.n, x14, x18, x3, 0xeeeeeeeeeeeeeeee, 0xfffffffffffffffe, 0x0, x4, 0, x5)

xperm_n_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0xfddddddddddddddd), rs1:x17(0xfffffffffffffffd), rs2:x2(0x8000000000000000)
    TEST_RR_OP(xperm.n, x15, x17, x2, 0xfddddddddddddddd, 0xfffffffffffffffd, 0x8000000000000000, x4, 8, x5)

xperm_n_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0xfbbbbbbbbbbbbbbb), rs1:x16(0xfffffffffffffffb), rs2:x1(0x4000000000000000)
    TEST_RR_OP(xperm.n, x16, x16, x1, 0xfbbbbbbbbbbbbbbb, 0xfffffffffffffffb, 0x4000000000000000, x4, 16, x5)

xperm_n_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0xf777777777777777), rs1:x15(0xfffffffffffffff7), rs2:x31(0x2000000000000000)
    TEST_RR_OP(xperm.n, x17, x15, x31, 0xf777777777777777, 0xfffffffffffffff7, 0x2000000000000000, x4, 24, x5)

xperm_n_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0xefffffffffffffff), rs1:x14(0xffffffffffffffef), rs2:x30(0x1000000000000000)
    TEST_RR_OP(xperm.n, x18, x14, x30, 0xefffffffffffffff, 0xffffffffffffffef, 0x1000000000000000, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_17_0)


xperm_n_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffff), rs1:x13(0xffffffffffffffdf), rs2:x29(0x0800000000000000)
    TEST_RR_OP(xperm.n, x19, x13, x29, 0xffffffffffffffff, 0xffffffffffffffdf, 0x800000000000000, x1, 0, x2)

xperm_n_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffff), rs1:x12(0xffffffffffffffbf), rs2:x28(0x0400000000000000)
    TEST_RR_OP(xperm.n, x20, x12, x28, 0xffffffffffffffff, 0xffffffffffffffbf, 0x400000000000000, x1, 8, x2)

xperm_n_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0xffffffffffffff7f), rs2:x27(0x0200000000000000)
    TEST_RR_OP(xperm.n, x21, x11, x27, 0xffffffffffffffff, 0xffffffffffffff7f, 0x200000000000000, x1, 16, x2)

xperm_n_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xfffffffffffffeff), rs2:x26(0x0100000000000000)
    TEST_RR_OP(xperm.n, x22, x10, x26, 0xffffffffffffffff, 0xfffffffffffffeff, 0x100000000000000, x1, 24, x2)

xperm_n_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffffffff), rs1:x9(0xfffffffffffffdff), rs2:x25(0x0080000000000000)
    TEST_RR_OP(xperm.n, x23, x9, x25, 0xffffffffffffffff, 0xfffffffffffffdff, 0x80000000000000, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_18_0)


xperm_n_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffff), rs1:x8(0xfffffffffffffbff), rs2:x24(0x0040000000000000)
    TEST_RR_OP(xperm.n, x24, x8, x24, 0xffffffffffffffff, 0xfffffffffffffbff, 0x40000000000000, x1, 0, x2)

xperm_n_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0xff7fffffffffffff), rs1:x7(0xfffffffffffff7ff), rs2:x23(0x0020000000000000)
    TEST_RR_OP(xperm.n, x25, x7, x23, 0xff7fffffffffffff, 0xfffffffffffff7ff, 0x20000000000000, x1, 8, x2)

xperm_n_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffff), rs1:x6(0xffffffffffffefff), rs2:x22(0x0010000000000000)
    TEST_RR_OP(xperm.n, x26, x6, x22, 0xffffffffffffffff, 0xffffffffffffefff, 0x10000000000000, x1, 16, x2)

xperm_n_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffffff), rs1:x5(0xffffffffffffdfff), rs2:x21(0x0008000000000000)
    TEST_RR_OP(xperm.n, x27, x5, x21, 0xffffffffffffffff, 0xffffffffffffdfff, 0x8000000000000, x1, 24, x2)

xperm_n_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffffff), rs1:x4(0xffffffffffffbfff), rs2:x20(0x0004000000000000)
    TEST_RR_OP(xperm.n, x28, x4, x20, 0xffffffffffffffff, 0xffffffffffffbfff, 0x4000000000000, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x4,signature_19_0)


xperm_n_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffffff), rs1:x3(0xffffffffffff7fff), rs2:x19(0x0002000000000000)
    TEST_RR_OP(xperm.n, x29, x3, x19, 0xffffffffffffffff, 0xffffffffffff7fff, 0x2000000000000, x4, 0, x5)

xperm_n_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffffff), rs1:x2(0xfffffffffffeffff), rs2:x18(0x0001000000000000)
    TEST_RR_OP(xperm.n, x30, x2, x18, 0xffffffffffffffff, 0xfffffffffffeffff, 0x1000000000000, x4, 8, x5)

xperm_n_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffffff), rs1:x1(0xfffffffffffdffff), rs2:x17(0x0000800000000000)
    TEST_RR_OP(xperm.n, x31, x1, x17, 0xffffffffffffffff, 0xfffffffffffdffff, 0x800000000000, x4, 16, x5)

xperm_n_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0xffffbfffffffffff), rs1:x31(0xfffffffffffbffff), rs2:x16(0x0000400000000000)
    TEST_RR_OP(xperm.n, x1, x31, x16, 0xffffbfffffffffff, 0xfffffffffffbffff, 0x400000000000, x4, 24, x5)

xperm_n_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffffff), rs1:x30(0xfffffffffff7ffff), rs2:x15(0x0000200000000000)
    TEST_RR_OP(xperm.n, x2, x30, x15, 0xffffffffffffffff, 0xfffffffffff7ffff, 0x200000000000, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_20_0)


xperm_n_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffffff), rs1:x29(0xffffffffffefffff), rs2:x14(0x0000100000000000)
    TEST_RR_OP(xperm.n, x3, x29, x14, 0xffffffffffffffff, 0xffffffffffefffff, 0x100000000000, x1, 0, x2)

xperm_n_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffffffff), rs1:x28(0xffffffffffdfffff), rs2:x13(0x0000080000000000)
    TEST_RR_OP(xperm.n, x4, x28, x13, 0xffffffffffffffff, 0xffffffffffdfffff, 0x80000000000, x1, 8, x2)

xperm_n_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffffffff), rs1:x27(0xffffffffffbfffff), rs2:x12(0x0000040000000000)
    TEST_RR_OP(xperm.n, x5, x27, x12, 0xffffffffffffffff, 0xffffffffffbfffff, 0x40000000000, x1, 16, x2)

xperm_n_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffffffff), rs1:x26(0xffffffffff7fffff), rs2:x11(0x0000020000000000)
    TEST_RR_OP(xperm.n, x6, x26, x11, 0xffffffffffffffff, 0xffffffffff7fffff, 0x20000000000, x1, 24, x2)

xperm_n_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffffffff), rs1:x25(0xfffffffffeffffff), rs2:x10(0x0000010000000000)
    TEST_RR_OP(xperm.n, x7, x25, x10, 0xffffffffffffffff, 0xfffffffffeffffff, 0x10000000000, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_21_0)


xperm_n_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffffffff), rs1:x24(0xfffffffffdffffff), rs2:x9(0x0000008000000000)
    TEST_RR_OP(xperm.n, x8, x24, x9, 0xffffffffffffffff, 0xfffffffffdffffff, 0x8000000000, x1, 0, x2)

xperm_n_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffffffff), rs1:x23(0xfffffffffbffffff), rs2:x8(0x0000004000000000)
    TEST_RR_OP(xperm.n, x9, x23, x8, 0xffffffffffffffff, 0xfffffffffbffffff, 0x4000000000, x1, 8, x2)

xperm_n_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffffffff), rs1:x22(0xfffffffff7ffffff), rs2:x7(0x0000002000000000)
    TEST_RR_OP(xperm.n, x10, x22, x7, 0xffffffffffffffff, 0xfffffffff7ffffff, 0x2000000000, x1, 16, x2)

xperm_n_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffffff), rs1:x21(0xffffffffefffffff), rs2:x6(0x0000001000000000)
    TEST_RR_OP(xperm.n, x11, x21, x6, 0xffffffffffffffff, 0xffffffffefffffff, 0x1000000000, x1, 24, x2)

xperm_n_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffffff), rs1:x20(0xffffffffdfffffff), rs2:x5(0x0000000800000000)
    TEST_RR_OP(xperm.n, x12, x20, x5, 0xffffffffffffffff, 0xffffffffdfffffff, 0x800000000, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x5,signature_22_0)


xperm_n_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffffff), rs1:x19(0xffffffffbfffffff), rs2:x4(0x0000000400000000)
    TEST_RR_OP(xperm.n, x13, x19, x4, 0xffffffffffffffff, 0xffffffffbfffffff, 0x400000000, x5, 0, x6)

xperm_n_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0xffffffff7fffffff), rs2:x3(0x0000000200000000)
    TEST_RR_OP(xperm.n, x14, x18, x3, 0xffffffffffffffff, 0xffffffff7fffffff, 0x200000000, x5, 8, x6)

xperm_n_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0xfffffffeffffffff), rs2:x2(0x0000000100000000)
    TEST_RR_OP(xperm.n, x15, x17, x2, 0xffffffffffffffff, 0xfffffffeffffffff, 0x100000000, x5, 16, x6)

xperm_n_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0xffffffffdfffffff), rs1:x16(0xfffffffdffffffff), rs2:x1(0x0000000080000000)
    TEST_RR_OP(xperm.n, x16, x16, x1, 0xffffffffdfffffff, 0xfffffffdffffffff, 0x80000000, x5, 24, x6)

xperm_n_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffffffff), rs1:x15(0xfffffffbffffffff), rs2:x31(0x0000000040000000)
    TEST_RR_OP(xperm.n, x17, x15, x31, 0xffffffffffffffff, 0xfffffffbffffffff, 0x40000000, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_23_0)


xperm_n_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffff), rs1:x14(0xfffffff7ffffffff), rs2:x30(0x0000000020000000)
    TEST_RR_OP(xperm.n, x18, x14, x30, 0xffffffffffffffff, 0xfffffff7ffffffff, 0x20000000, x1, 0, x2)

xperm_n_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffff), rs1:x13(0xffffffefffffffff), rs2:x29(0x0000000010000000)
    TEST_RR_OP(xperm.n, x19, x13, x29, 0xffffffffffffffff, 0xffffffefffffffff, 0x10000000, x1, 8, x2)

xperm_n_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffff), rs1:x12(0xffffffdfffffffff), rs2:x28(0x0000000008000000)
    TEST_RR_OP(xperm.n, x20, x12, x28, 0xffffffffffffffff, 0xffffffdfffffffff, 0x8000000, x1, 16, x2)

xperm_n_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0xffffffbfffffffff), rs2:x27(0x0000000004000000)
    TEST_RR_OP(xperm.n, x21, x11, x27, 0xffffffffffffffff, 0xffffffbfffffffff, 0x4000000, x1, 24, x2)

xperm_n_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xffffff7fffffffff), rs2:x26(0x0000000002000000)
    TEST_RR_OP(xperm.n, x22, x10, x26, 0xffffffffffffffff, 0xffffff7fffffffff, 0x2000000, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_24_0)


xperm_n_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffffffff), rs1:x9(0xfffffeffffffffff), rs2:x25(0x0000000001000000)
    TEST_RR_OP(xperm.n, x23, x9, x25, 0xffffffffffffffff, 0xfffffeffffffffff, 0x1000000, x1, 0, x2)

xperm_n_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffff), rs1:x8(0xfffffdffffffffff), rs2:x24(0x0000000000800000)
    TEST_RR_OP(xperm.n, x24, x8, x24, 0xffffffffffffffff, 0xfffffdffffffffff, 0x800000, x1, 8, x2)

xperm_n_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffff), rs1:x7(0xfffffbffffffffff), rs2:x23(0x0000000000400000)
    TEST_RR_OP(xperm.n, x25, x7, x23, 0xffffffffffffffff, 0xfffffbffffffffff, 0x400000, x1, 16, x2)

xperm_n_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffff), rs1:x6(0xfffff7ffffffffff), rs2:x22(0x0000000000200000)
    TEST_RR_OP(xperm.n, x26, x6, x22, 0xffffffffffffffff, 0xfffff7ffffffffff, 0x200000, x1, 24, x2)

xperm_n_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffffff), rs1:x5(0xffffefffffffffff), rs2:x21(0x0000000000100000)
    TEST_RR_OP(xperm.n, x27, x5, x21, 0xffffffffffffffff, 0xffffefffffffffff, 0x100000, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x5,signature_25_0)


xperm_n_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffffff), rs1:x4(0xffffdfffffffffff), rs2:x20(0x0000000000080000)
    TEST_RR_OP(xperm.n, x28, x4, x20, 0xffffffffffffffff, 0xffffdfffffffffff, 0x80000, x5, 0, x6)

xperm_n_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffffff), rs1:x3(0xffffbfffffffffff), rs2:x19(0x0000000000040000)
    TEST_RR_OP(xperm.n, x29, x3, x19, 0xffffffffffffffff, 0xffffbfffffffffff, 0x40000, x5, 8, x6)

xperm_n_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffffff), rs1:x2(0xffff7fffffffffff), rs2:x18(0x0000000000020000)
    TEST_RR_OP(xperm.n, x30, x2, x18, 0xffffffffffffffff, 0xffff7fffffffffff, 0x20000, x5, 16, x6)

xperm_n_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffffff), rs1:x1(0xfffeffffffffffff), rs2:x17(0x0000000000010000)
    TEST_RR_OP(xperm.n, x31, x1, x17, 0xffffffffffffffff, 0xfffeffffffffffff, 0x10000, x5, 24, x6)

xperm_n_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffffff), rs1:x31(0xfffdffffffffffff), rs2:x16(0x0000000000008000)
    TEST_RR_OP(xperm.n, x1, x31, x16, 0xffffffffffffffff, 0xfffdffffffffffff, 0x8000, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_26_0)


xperm_n_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffffff), rs1:x30(0xfffbffffffffffff), rs2:x15(0x0000000000004000)
    TEST_RR_OP(xperm.n, x2, x30, x15, 0xffffffffffffffff, 0xfffbffffffffffff, 0x4000, x1, 0, x7)

xperm_n_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffffff), rs1:x29(0xfff7ffffffffffff), rs2:x14(0x0000000000002000)
    TEST_RR_OP(xperm.n, x3, x29, x14, 0xffffffffffffffff, 0xfff7ffffffffffff, 0x2000, x1, 8, x7)

xperm_n_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffffffff), rs1:x28(0xffefffffffffffff), rs2:x13(0x0000000000001000)
    TEST_RR_OP(xperm.n, x4, x28, x13, 0xffffffffffffffff, 0xffefffffffffffff, 0x1000, x1, 16, x7)

xperm_n_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffffffff), rs1:x27(0xffdfffffffffffff), rs2:x12(0x0000000000000800)
    TEST_RR_OP(xperm.n, x5, x27, x12, 0xffffffffffffffff, 0xffdfffffffffffff, 0x800, x1, 24, x7)

xperm_n_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffffffff), rs1:x26(0xffbfffffffffffff), rs2:x11(0x0000000000000400)
    TEST_RR_OP(xperm.n, x6, x26, x11, 0xffffffffffffffff, 0xffbfffffffffffff, 0x400, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_27_0)


xperm_n_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffffffff), rs1:x25(0xff7fffffffffffff), rs2:x10(0x0000000000000200)
    TEST_RR_OP(xperm.n, x7, x25, x10, 0xffffffffffffffff, 0xff7fffffffffffff, 0x200, x1, 0, x2)

xperm_n_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffffffff), rs1:x24(0xfeffffffffffffff), rs2:x9(0x0000000000000100)
    TEST_RR_OP(xperm.n, x8, x24, x9, 0xffffffffffffffff, 0xfeffffffffffffff, 0x100, x1, 8, x2)

xperm_n_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffffffff), rs1:x23(0xfdffffffffffffff), rs2:x8(0x0000000000000080)
    TEST_RR_OP(xperm.n, x9, x23, x8, 0xffffffffffffffff, 0xfdffffffffffffff, 0x80, x1, 16, x2)

xperm_n_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffffffff), rs1:x22(0xfbffffffffffffff), rs2:x7(0x0000000000000040)
    TEST_RR_OP(xperm.n, x10, x22, x7, 0xffffffffffffffff, 0xfbffffffffffffff, 0x40, x1, 24, x2)

xperm_n_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffffff), rs1:x21(0xf7ffffffffffffff), rs2:x6(0x0000000000000020)
    TEST_RR_OP(xperm.n, x11, x21, x6, 0xffffffffffffffff, 0xf7ffffffffffffff, 0x20, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x6,signature_28_0)


xperm_n_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffffff), rs1:x20(0xefffffffffffffff), rs2:x5(0x0000000000000010)
    TEST_RR_OP(xperm.n, x12, x20, x5, 0xffffffffffffffff, 0xefffffffffffffff, 0x10, x6, 0, x7)

xperm_n_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffffff), rs1:x19(0xdfffffffffffffff), rs2:x4(0x0000000000000008)
    TEST_RR_OP(xperm.n, x13, x19, x4, 0xffffffffffffffff, 0xdfffffffffffffff, 0x8, x6, 8, x7)

xperm_n_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0xbfffffffffffffff), rs2:x3(0x0000000000000004)
    TEST_RR_OP(xperm.n, x14, x18, x3, 0xffffffffffffffff, 0xbfffffffffffffff, 0x4, x6, 16, x7)

xperm_n_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0x7fffffffffffffff), rs2:x2(0x0000000000000002)
    TEST_RR_OP(xperm.n, x15, x17, x2, 0xffffffffffffffff, 0x7fffffffffffffff, 0x2, x6, 24, x7)

xperm_n_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xffffffffffffffff), rs2:x1(0x0000000000000001)
    TEST_RR_OP(xperm.n, x16, x16, x1, 0xffffffffffffffff, 0xffffffffffffffff, 0x1, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_29_0)


xperm_n_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x1111111111111111), rs1:x15(0x0000000000000001), rs2:x31(0x0000000000000000)
    TEST_RR_OP(xperm.n, x17, x15, x31, 0x1111111111111111, 0x1, 0x0, x1, 0, x2)

xperm_n_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x2222222222222222), rs1:x14(0x0000000000000002), rs2:x30(0x0000000000000000)
    TEST_RR_OP(xperm.n, x18, x14, x30, 0x2222222222222222, 0x2, 0x0, x1, 8, x2)

xperm_n_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x4444444444444444), rs1:x13(0x0000000000000004), rs2:x29(0x0000000000000000)
    TEST_RR_OP(xperm.n, x19, x13, x29, 0x4444444444444444, 0x4, 0x0, x1, 16, x2)

xperm_n_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x8888888888888888), rs1:x12(0x0000000000000008), rs2:x28(0x0000000000000000)
    TEST_RR_OP(xperm.n, x20, x12, x28, 0x8888888888888888, 0x8, 0x0, x1, 24, x2)

xperm_n_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000000000010), rs2:x27(0x0000000000000000)
    TEST_RR_OP(xperm.n, x21, x11, x27, 0x0000000000000000, 0x10, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_30_0)


xperm_n_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000000000000020), rs2:x26(0x0000000000000000)
    TEST_RR_OP(xperm.n, x22, x10, x26, 0x0000000000000000, 0x20, 0x0, x1, 0, x2)

xperm_n_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000000000000040), rs2:x25(0x0000000000000000)
    TEST_RR_OP(xperm.n, x23, x9, x25, 0x0000000000000000, 0x40, 0x0, x1, 8, x2)

xperm_n_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000000000000080), rs2:x24(0x0000000000000000)
    TEST_RR_OP(xperm.n, x24, x8, x24, 0x0000000000000000, 0x80, 0x0, x1, 16, x2)

xperm_n_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000000000000100), rs2:x23(0x0000000000000000)
    TEST_RR_OP(xperm.n, x25, x7, x23, 0x0000000000000000, 0x100, 0x0, x1, 24, x2)

xperm_n_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000000000000200), rs2:x22(0x0000000000000000)
    TEST_RR_OP(xperm.n, x26, x6, x22, 0x0000000000000000, 0x200, 0x0, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x6,signature_31_0)


xperm_n_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000000000000400), rs2:x21(0x0000000000000000)
    TEST_RR_OP(xperm.n, x27, x5, x21, 0x0000000000000000, 0x400, 0x0, x6, 0, x7)

xperm_n_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000000000000800), rs2:x20(0x0000000000000000)
    TEST_RR_OP(xperm.n, x28, x4, x20, 0x0000000000000000, 0x800, 0x0, x6, 8, x7)

xperm_n_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000000000001000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(xperm.n, x29, x3, x19, 0x0000000000000000, 0x1000, 0x0, x6, 16, x7)

xperm_n_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000000000002000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(xperm.n, x30, x2, x18, 0x0000000000000000, 0x2000, 0x0, x6, 24, x7)

xperm_n_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000000000004000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(xperm.n, x31, x1, x17, 0x0000000000000000, 0x4000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x6,signature_32_0)


xperm_n_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000000000008000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(xperm.n, x1, x31, x16, 0x0000000000000000, 0x8000, 0x0, x6, 0, x7)

xperm_n_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000000000010000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(xperm.n, x2, x30, x15, 0x0000000000000000, 0x10000, 0x0, x6, 8, x7)

xperm_n_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0000000000020000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(xperm.n, x3, x29, x14, 0x0000000000000000, 0x20000, 0x0, x6, 16, x7)

xperm_n_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0000000000040000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(xperm.n, x4, x28, x13, 0x0000000000000000, 0x40000, 0x0, x6, 24, x7)

xperm_n_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0000000000080000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(xperm.n, x5, x27, x12, 0x0000000000000000, 0x80000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_33_0)


xperm_n_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0000000000100000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(xperm.n, x6, x26, x11, 0x0000000000000000, 0x100000, 0x0, x1, 0, x2)

xperm_n_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0000000000200000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(xperm.n, x7, x25, x10, 0x0000000000000000, 0x200000, 0x0, x1, 8, x2)

xperm_n_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0000000000400000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(xperm.n, x8, x24, x9, 0x0000000000000000, 0x400000, 0x0, x1, 16, x2)

xperm_n_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0000000000800000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(xperm.n, x9, x23, x8, 0x0000000000000000, 0x800000, 0x0, x1, 24, x2)

xperm_n_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0000000001000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(xperm.n, x10, x22, x7, 0x0000000000000000, 0x1000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_34_0)


xperm_n_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0000000002000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(xperm.n, x11, x21, x6, 0x0000000000000000, 0x2000000, 0x0, x1, 0, x7)

xperm_n_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0000000004000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(xperm.n, x12, x20, x5, 0x0000000000000000, 0x4000000, 0x0, x1, 8, x7)

xperm_n_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000008000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(xperm.n, x13, x19, x4, 0x0000000000000000, 0x8000000, 0x0, x1, 16, x7)

xperm_n_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0000000010000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(xperm.n, x14, x18, x3, 0x0000000000000000, 0x10000000, 0x0, x1, 24, x7)

xperm_n_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x0000000020000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(xperm.n, x15, x17, x2, 0x0000000000000000, 0x20000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x2,signature_35_0)


xperm_n_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x0000000040000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(xperm.n, x16, x16, x1, 0x0000000000000000, 0x40000000, 0x0, x2, 0, x3)

xperm_n_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x0000000080000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(xperm.n, x17, x15, x31, 0x0000000000000000, 0x80000000, 0x0, x2, 8, x3)

xperm_n_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000000100000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(xperm.n, x18, x14, x30, 0x0000000000000000, 0x100000000, 0x0, x2, 16, x3)

xperm_n_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000200000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(xperm.n, x19, x13, x29, 0x0000000000000000, 0x200000000, 0x0, x2, 24, x3)

xperm_n_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000000400000000), rs2:x28(0x0000000000000000)
    TEST_RR_OP(xperm.n, x20, x12, x28, 0x0000000000000000, 0x400000000, 0x0, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_36_0)


xperm_n_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000800000000), rs2:x27(0x0000000000000000)
    TEST_RR_OP(xperm.n, x21, x11, x27, 0x0000000000000000, 0x800000000, 0x0, x1, 0, x2)

xperm_n_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000001000000000), rs2:x26(0x0000000000000000)
    TEST_RR_OP(xperm.n, x22, x10, x26, 0x0000000000000000, 0x1000000000, 0x0, x1, 8, x2)

xperm_n_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000002000000000), rs2:x25(0x0000000000000000)
    TEST_RR_OP(xperm.n, x23, x9, x25, 0x0000000000000000, 0x2000000000, 0x0, x1, 16, x2)

xperm_n_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000004000000000), rs2:x24(0x0000000000000000)
    TEST_RR_OP(xperm.n, x24, x8, x24, 0x0000000000000000, 0x4000000000, 0x0, x1, 24, x2)

xperm_n_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000008000000000), rs2:x23(0x0000000000000000)
    TEST_RR_OP(xperm.n, x25, x7, x23, 0x0000000000000000, 0x8000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_37_0)


xperm_n_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000010000000000), rs2:x22(0x0000000000000000)
    TEST_RR_OP(xperm.n, x26, x6, x22, 0x0000000000000000, 0x10000000000, 0x0, x1, 0, x7)

xperm_n_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000020000000000), rs2:x21(0x0000000000000000)
    TEST_RR_OP(xperm.n, x27, x5, x21, 0x0000000000000000, 0x20000000000, 0x0, x1, 8, x7)

xperm_n_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000040000000000), rs2:x20(0x0000000000000000)
    TEST_RR_OP(xperm.n, x28, x4, x20, 0x0000000000000000, 0x40000000000, 0x0, x1, 16, x7)

xperm_n_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000080000000000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(xperm.n, x29, x3, x19, 0x0000000000000000, 0x80000000000, 0x0, x1, 24, x7)

xperm_n_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000100000000000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(xperm.n, x30, x2, x18, 0x0000000000000000, 0x100000000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x5,signature_38_0)


xperm_n_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000200000000000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(xperm.n, x31, x1, x17, 0x0000000000000000, 0x200000000000, 0x0, x5, 0, x6)

xperm_n_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000400000000000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(xperm.n, x1, x31, x16, 0x0000000000000000, 0x400000000000, 0x0, x5, 8, x6)

xperm_n_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000800000000000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(xperm.n, x2, x30, x15, 0x0000000000000000, 0x800000000000, 0x0, x5, 16, x6)

xperm_n_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0001000000000000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(xperm.n, x3, x29, x14, 0x0000000000000000, 0x1000000000000, 0x0, x5, 24, x6)

xperm_n_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0002000000000000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(xperm.n, x4, x28, x13, 0x0000000000000000, 0x2000000000000, 0x0, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_39_0)


xperm_n_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0004000000000000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(xperm.n, x5, x27, x12, 0x0000000000000000, 0x4000000000000, 0x0, x1, 0, x2)

xperm_n_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0008000000000000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(xperm.n, x6, x26, x11, 0x0000000000000000, 0x8000000000000, 0x0, x1, 8, x2)

xperm_n_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0010000000000000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(xperm.n, x7, x25, x10, 0x0000000000000000, 0x10000000000000, 0x0, x1, 16, x2)

xperm_n_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0020000000000000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(xperm.n, x8, x24, x9, 0x0000000000000000, 0x20000000000000, 0x0, x1, 24, x2)

xperm_n_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0040000000000000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(xperm.n, x9, x23, x8, 0x0000000000000000, 0x40000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_40_0)


xperm_n_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0080000000000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(xperm.n, x10, x22, x7, 0x0000000000000000, 0x80000000000000, 0x0, x1, 0, x2)

xperm_n_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0100000000000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(xperm.n, x11, x21, x6, 0x0000000000000000, 0x100000000000000, 0x0, x1, 8, x2)

xperm_n_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0200000000000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(xperm.n, x12, x20, x5, 0x0000000000000000, 0x200000000000000, 0x0, x1, 16, x2)

xperm_n_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0400000000000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(xperm.n, x13, x19, x4, 0x0000000000000000, 0x400000000000000, 0x0, x1, 24, x2)

xperm_n_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0800000000000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(xperm.n, x14, x18, x3, 0x0000000000000000, 0x800000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x3,signature_41_0)


xperm_n_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x1000000000000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(xperm.n, x15, x17, x2, 0x0000000000000000, 0x1000000000000000, 0x0, x3, 0, x4)

xperm_n_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x2000000000000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(xperm.n, x16, x16, x1, 0x0000000000000000, 0x2000000000000000, 0x0, x3, 8, x4)

xperm_n_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x4000000000000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(xperm.n, x17, x15, x31, 0x0000000000000000, 0x4000000000000000, 0x0, x3, 16, x4)

xperm_n_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x8000000000000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(xperm.n, x18, x14, x30, 0x0000000000000000, 0x8000000000000000, 0x0, x3, 24, x4)

xperm_n_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(xperm.n, x19, x13, x29, 0x0000000000000000, 0x0, 0x0, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_42_0)


xperm_n_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0xeeeeeeeeeeeeeeee), rs1:x12(0xfffffffffffffffe), rs2:x28(0x0000000000000000)
    TEST_RR_OP(xperm.n, x20, x12, x28, 0xeeeeeeeeeeeeeeee, 0xfffffffffffffffe, 0x0, x1, 0, x2)

xperm_n_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0xdddddddddddddddd), rs1:x11(0xfffffffffffffffd), rs2:x27(0x0000000000000000)
    TEST_RR_OP(xperm.n, x21, x11, x27, 0xdddddddddddddddd, 0xfffffffffffffffd, 0x0, x1, 8, x2)

xperm_n_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0xbbbbbbbbbbbbbbbb), rs1:x10(0xfffffffffffffffb), rs2:x26(0x0000000000000000)
    TEST_RR_OP(xperm.n, x22, x10, x26, 0xbbbbbbbbbbbbbbbb, 0xfffffffffffffffb, 0x0, x1, 16, x2)

xperm_n_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0x7777777777777777), rs1:x9(0xfffffffffffffff7), rs2:x25(0x0000000000000000)
    TEST_RR_OP(xperm.n, x23, x9, x25, 0x7777777777777777, 0xfffffffffffffff7, 0x0, x1, 24, x2)

xperm_n_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffff), rs1:x8(0xffffffffffffffef), rs2:x24(0x0000000000000000)
    TEST_RR_OP(xperm.n, x24, x8, x24, 0xffffffffffffffff, 0xffffffffffffffef, 0x0, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_43_0)


xperm_n_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffff), rs1:x7(0xffffffffffffffdf), rs2:x23(0x0000000000000000)
    TEST_RR_OP(xperm.n, x25, x7, x23, 0xffffffffffffffff, 0xffffffffffffffdf, 0x0, x1, 0, x2)

xperm_n_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffff), rs1:x6(0xffffffffffffffbf), rs2:x22(0x0000000000000000)
    TEST_RR_OP(xperm.n, x26, x6, x22, 0xffffffffffffffff, 0xffffffffffffffbf, 0x0, x1, 8, x2)

xperm_n_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffffff), rs1:x5(0xffffffffffffff7f), rs2:x21(0x0000000000000000)
    TEST_RR_OP(xperm.n, x27, x5, x21, 0xffffffffffffffff, 0xffffffffffffff7f, 0x0, x1, 16, x2)

xperm_n_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffffff), rs1:x4(0xfffffffffffffeff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(xperm.n, x28, x4, x20, 0xffffffffffffffff, 0xfffffffffffffeff, 0x0, x1, 24, x2)

xperm_n_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffffff), rs1:x3(0xfffffffffffffdff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(xperm.n, x29, x3, x19, 0xffffffffffffffff, 0xfffffffffffffdff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x4,signature_44_0)


xperm_n_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffffff), rs1:x2(0xfffffffffffffbff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(xperm.n, x30, x2, x18, 0xffffffffffffffff, 0xfffffffffffffbff, 0x0, x4, 0, x5)

xperm_n_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffffff), rs1:x1(0xfffffffffffff7ff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(xperm.n, x31, x1, x17, 0xffffffffffffffff, 0xfffffffffffff7ff, 0x0, x4, 8, x5)

xperm_n_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffffff), rs1:x31(0xffffffffffffefff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(xperm.n, x1, x31, x16, 0xffffffffffffffff, 0xffffffffffffefff, 0x0, x4, 16, x5)

xperm_n_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffffff), rs1:x30(0xffffffffffffdfff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(xperm.n, x2, x30, x15, 0xffffffffffffffff, 0xffffffffffffdfff, 0x0, x4, 24, x5)

xperm_n_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffffff), rs1:x29(0xffffffffffffbfff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(xperm.n, x3, x29, x14, 0xffffffffffffffff, 0xffffffffffffbfff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_45_0)


xperm_n_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffffffff), rs1:x28(0xffffffffffff7fff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(xperm.n, x4, x28, x13, 0xffffffffffffffff, 0xffffffffffff7fff, 0x0, x1, 0, x2)

xperm_n_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffffffff), rs1:x27(0xfffffffffffeffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(xperm.n, x5, x27, x12, 0xffffffffffffffff, 0xfffffffffffeffff, 0x0, x1, 8, x2)

xperm_n_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffffffff), rs1:x26(0xfffffffffffdffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(xperm.n, x6, x26, x11, 0xffffffffffffffff, 0xfffffffffffdffff, 0x0, x1, 16, x2)

xperm_n_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffffffff), rs1:x25(0xfffffffffffbffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(xperm.n, x7, x25, x10, 0xffffffffffffffff, 0xfffffffffffbffff, 0x0, x1, 24, x2)

xperm_n_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffffffff), rs1:x24(0xfffffffffff7ffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(xperm.n, x8, x24, x9, 0xffffffffffffffff, 0xfffffffffff7ffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_46_0)


xperm_n_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffffffff), rs1:x23(0xffffffffffefffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(xperm.n, x9, x23, x8, 0xffffffffffffffff, 0xffffffffffefffff, 0x0, x1, 0, x2)

xperm_n_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffffffff), rs1:x22(0xffffffffffdfffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(xperm.n, x10, x22, x7, 0xffffffffffffffff, 0xffffffffffdfffff, 0x0, x1, 8, x2)

xperm_n_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffffff), rs1:x21(0xffffffffffbfffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(xperm.n, x11, x21, x6, 0xffffffffffffffff, 0xffffffffffbfffff, 0x0, x1, 16, x2)

xperm_n_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffffff), rs1:x20(0xffffffffff7fffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(xperm.n, x12, x20, x5, 0xffffffffffffffff, 0xffffffffff7fffff, 0x0, x1, 24, x2)

xperm_n_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffffff), rs1:x19(0xfffffffffeffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(xperm.n, x13, x19, x4, 0xffffffffffffffff, 0xfffffffffeffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x4,signature_47_0)


xperm_n_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0xfffffffffdffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(xperm.n, x14, x18, x3, 0xffffffffffffffff, 0xfffffffffdffffff, 0x0, x4, 0, x5)

xperm_n_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0xfffffffffbffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(xperm.n, x15, x17, x2, 0xffffffffffffffff, 0xfffffffffbffffff, 0x0, x4, 8, x5)

xperm_n_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xfffffffff7ffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(xperm.n, x16, x16, x1, 0xffffffffffffffff, 0xfffffffff7ffffff, 0x0, x4, 16, x5)

xperm_n_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffffffff), rs1:x15(0xffffffffefffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(xperm.n, x17, x15, x31, 0xffffffffffffffff, 0xffffffffefffffff, 0x0, x4, 24, x5)

xperm_n_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffff), rs1:x14(0xffffffffdfffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(xperm.n, x18, x14, x30, 0xffffffffffffffff, 0xffffffffdfffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_48_0)


xperm_n_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffff), rs1:x13(0xffffffffbfffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(xperm.n, x19, x13, x29, 0xffffffffffffffff, 0xffffffffbfffffff, 0x0, x1, 0, x2)

xperm_n_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffff), rs1:x12(0xffffffff7fffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(xperm.n, x20, x12, x28, 0xffffffffffffffff, 0xffffffff7fffffff, 0x0, x1, 8, x2)

xperm_n_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0xfffffffeffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(xperm.n, x21, x11, x27, 0xffffffffffffffff, 0xfffffffeffffffff, 0x0, x1, 16, x2)

xperm_n_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xfffffffdffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(xperm.n, x22, x10, x26, 0xffffffffffffffff, 0xfffffffdffffffff, 0x0, x1, 24, x2)

xperm_n_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0xffffffffffffffff), rs1:x9(0xfffffffbffffffff), rs2:x25(0x0000000000000000)
    TEST_RR_OP(xperm.n, x23, x9, x25, 0xffffffffffffffff, 0xfffffffbffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_49_0)


xperm_n_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffff), rs1:x8(0xfffffff7ffffffff), rs2:x24(0x0000000000000000)
    TEST_RR_OP(xperm.n, x24, x8, x24, 0xffffffffffffffff, 0xfffffff7ffffffff, 0x0, x1, 0, x2)

xperm_n_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffff), rs1:x7(0xffffffefffffffff), rs2:x23(0x0000000000000000)
    TEST_RR_OP(xperm.n, x25, x7, x23, 0xffffffffffffffff, 0xffffffefffffffff, 0x0, x1, 8, x2)

xperm_n_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffff), rs1:x6(0xffffffdfffffffff), rs2:x22(0x0000000000000000)
    TEST_RR_OP(xperm.n, x26, x6, x22, 0xffffffffffffffff, 0xffffffdfffffffff, 0x0, x1, 16, x2)

xperm_n_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffffff), rs1:x5(0xffffffbfffffffff), rs2:x21(0x0000000000000000)
    TEST_RR_OP(xperm.n, x27, x5, x21, 0xffffffffffffffff, 0xffffffbfffffffff, 0x0, x1, 24, x2)

xperm_n_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffffff), rs1:x4(0xffffff7fffffffff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(xperm.n, x28, x4, x20, 0xffffffffffffffff, 0xffffff7fffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x4,signature_50_0)


xperm_n_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffffffff), rs1:x3(0xfffffeffffffffff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(xperm.n, x29, x3, x19, 0xffffffffffffffff, 0xfffffeffffffffff, 0x0, x4, 0, x5)

xperm_n_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0xffffffffffffffff), rs1:x2(0xfffffdffffffffff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(xperm.n, x30, x2, x18, 0xffffffffffffffff, 0xfffffdffffffffff, 0x0, x4, 8, x5)

xperm_n_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0xffffffffffffffff), rs1:x1(0xfffffbffffffffff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(xperm.n, x31, x1, x17, 0xffffffffffffffff, 0xfffffbffffffffff, 0x0, x4, 16, x5)

xperm_n_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffffff), rs1:x31(0xfffff7ffffffffff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(xperm.n, x1, x31, x16, 0xffffffffffffffff, 0xfffff7ffffffffff, 0x0, x4, 24, x5)

xperm_n_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffffff), rs1:x30(0xffffefffffffffff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(xperm.n, x2, x30, x15, 0xffffffffffffffff, 0xffffefffffffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_51_0)


xperm_n_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffffff), rs1:x29(0xffffdfffffffffff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(xperm.n, x3, x29, x14, 0xffffffffffffffff, 0xffffdfffffffffff, 0x0, x1, 0, x2)

xperm_n_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffffffff), rs1:x28(0xffffbfffffffffff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(xperm.n, x4, x28, x13, 0xffffffffffffffff, 0xffffbfffffffffff, 0x0, x1, 8, x2)

xperm_n_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffffffff), rs1:x27(0xffff7fffffffffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(xperm.n, x5, x27, x12, 0xffffffffffffffff, 0xffff7fffffffffff, 0x0, x1, 16, x2)

xperm_n_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0xffffffffffffffff), rs1:x26(0xfffeffffffffffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(xperm.n, x6, x26, x11, 0xffffffffffffffff, 0xfffeffffffffffff, 0x0, x1, 24, x2)

xperm_n_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0xffffffffffffffff), rs1:x25(0xfffdffffffffffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(xperm.n, x7, x25, x10, 0xffffffffffffffff, 0xfffdffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_52_0)


xperm_n_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0xffffffffffffffff), rs1:x24(0xfffbffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(xperm.n, x8, x24, x9, 0xffffffffffffffff, 0xfffbffffffffffff, 0x0, x1, 0, x2)

xperm_n_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffffffff), rs1:x23(0xfff7ffffffffffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(xperm.n, x9, x23, x8, 0xffffffffffffffff, 0xfff7ffffffffffff, 0x0, x1, 8, x2)

xperm_n_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffffffff), rs1:x22(0xffefffffffffffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(xperm.n, x10, x22, x7, 0xffffffffffffffff, 0xffefffffffffffff, 0x0, x1, 16, x2)

xperm_n_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffffffff), rs1:x21(0xffdfffffffffffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(xperm.n, x11, x21, x6, 0xffffffffffffffff, 0xffdfffffffffffff, 0x0, x1, 24, x2)

xperm_n_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffffff), rs1:x20(0xffbfffffffffffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(xperm.n, x12, x20, x5, 0xffffffffffffffff, 0xffbfffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x5,signature_53_0)


xperm_n_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffffff), rs1:x19(0xff7fffffffffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(xperm.n, x13, x19, x4, 0xffffffffffffffff, 0xff7fffffffffffff, 0x0, x5, 0, x6)

xperm_n_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0xffffffffffffffff), rs1:x18(0xfeffffffffffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(xperm.n, x14, x18, x3, 0xffffffffffffffff, 0xfeffffffffffffff, 0x0, x5, 8, x6)

xperm_n_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0xffffffffffffffff), rs1:x17(0xfdffffffffffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(xperm.n, x15, x17, x2, 0xffffffffffffffff, 0xfdffffffffffffff, 0x0, x5, 16, x6)

xperm_n_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xfbffffffffffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(xperm.n, x16, x16, x1, 0xffffffffffffffff, 0xfbffffffffffffff, 0x0, x5, 24, x6)

xperm_n_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0xffffffffffffffff), rs1:x15(0xf7ffffffffffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(xperm.n, x17, x15, x31, 0xffffffffffffffff, 0xf7ffffffffffffff, 0x0, x5, 32, x6)

    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_54_0)


xperm_n_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffff), rs1:x14(0xefffffffffffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(xperm.n, x18, x14, x30, 0xffffffffffffffff, 0xefffffffffffffff, 0x0, x1, 0, x2)

xperm_n_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffff), rs1:x13(0xdfffffffffffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(xperm.n, x19, x13, x29, 0xffffffffffffffff, 0xdfffffffffffffff, 0x0, x1, 8, x2)

xperm_n_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffff), rs1:x12(0xbfffffffffffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(xperm.n, x20, x12, x28, 0xffffffffffffffff, 0xbfffffffffffffff, 0x0, x1, 16, x2)

xperm_n_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffffff), rs1:x11(0x7fffffffffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(xperm.n, x21, x11, x27, 0xffffffffffffffff, 0x7fffffffffffffff, 0x0, x1, 24, x2)

xperm_n_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xffffffffffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(xperm.n, x22, x10, x26, 0xffffffffffffffff, 0xffffffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",xperm.n)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",xperm.n)

	RVTEST_SIGBASE(x1,signature_55_0)


xperm_n_01_inst_270:
    // Test 270:  Test with rs1 == rs2
    // result rd:x23(0x7d1dc4bb2c23ffcc), rs1:x25(0x10fd3dedadea5195), rs2:x25(0xdf7f3844121bcc23)
    TEST_RR_OP(xperm.n, x23, x25, x25, 0x7d1dc4bb2c23ffcc, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x1, 0, x2)

xperm_n_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1), rs2:x24(0xf5adb41aa47d105b)
    TEST_RR_OP(xperm.n, x0, x8, x24, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x1, 8, x2)

xperm_n_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0xbbbbbbbbbbbbbbbb), rs1:x7(0xc9649f05a8e1a8bb), rs2:x0(0x82f6747f707af2c0)
    TEST_RR_OP(xperm.n, x25, x7, x0, 0xbbbbbbbbbbbbbbbb, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x1, 16, x2)

xperm_n_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb), rs2:x22(0x73a92fd4e19bfbc3)
    TEST_RR_OP(xperm.n, x26, x0, x22, 0x0000000000000000, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x1, 24, x2)
	
#endif


RVTEST_CODE_END xperm_n_01_code_end
RVTEST_CODE_BEGIN rol_01_init rol_01_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x6,signature_1_0)


rol_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x6f528ca887e9ef6d), rs1:x31(0x10fd3dedadea5195), rs2:x16(0xdf7f3844121bcc23)
    TEST_RR_OP(rol, x1, x31, x16, 0x6f528ca887e9ef6d, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x6, 0, x7)

rol_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0x1697fdf60de94ae7), rs1:x30(0xbd295ce2d2ffbec1), rs2:x15(0xf5adb41aa47d105b)
    TEST_RR_OP(rol, x2, x30, x15, 0x1697fdf60de94ae7, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x6, 8, x7)

rol_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0xc9649f05a8e1a8bb), rs1:x29(0xc9649f05a8e1a8bb), rs2:x14(0x82f6747f707af2c0)
    TEST_RR_OP(rol, x3, x29, x14, 0xc9649f05a8e1a8bb, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x6, 16, x7)

rol_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0xaa0948c2464cfe59), rs1:x28(0x3541291848c99fcb), rs2:x13(0x73a92fd4e19bfbc3)
    TEST_RR_OP(rol, x4, x28, x13, 0xaa0948c2464cfe59, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x6, 24, x7)

rol_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0xa927885123a0230e), rs1:x27(0x10a24740461d524f), rs2:x12(0x546b0e54528a10af)
    TEST_RR_OP(rol, x5, x27, x12, 0xa927885123a0230e, 0x10a24740461d524f, 0x546b0e54528a10af, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_2_0)


rol_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x872a29450857aa35), rs1:x26(0x546b0e54528a10af), rs2:x11(0x10a24740461d524f)
    TEST_RR_OP(rol, x6, x26, x11, 0x872a29450857aa35, 0x546b0e54528a10af, 0x10a24740461d524f, x1, 0, x2)

rol_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x497ea70cdfde1b9d), rs1:x25(0x73a92fd4e19bfbc3), rs2:x10(0x3541291848c99fcb)
    TEST_RR_OP(rol, x7, x25, x10, 0x497ea70cdfde1b9d, 0x73a92fd4e19bfbc3, 0x3541291848c99fcb, x1, 8, x2)

rol_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0x0417b3a3fb83d796), rs1:x24(0x82f6747f707af2c0), rs2:x9(0xc9649f05a8e1a8bb)
    TEST_RR_OP(rol, x8, x24, x9, 0x0417b3a3fb83d796, 0x82f6747f707af2c0, 0xc9649f05a8e1a8bb, x1, 16, x2)

rol_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0xeb5b683548fa20b7), rs1:x23(0xf5adb41aa47d105b), rs2:x8(0xbd295ce2d2ffbec1)
    TEST_RR_OP(rol, x9, x23, x8, 0xeb5b683548fa20b7, 0xf5adb41aa47d105b, 0xbd295ce2d2ffbec1, x1, 24, x2)

rol_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0x08824379847befe7), rs1:x22(0xdf7f3844121bcc23), rs2:x7(0x10fd3dedadea5195)
    TEST_RR_OP(rol, x10, x22, x7, 0x08824379847befe7, 0xdf7f3844121bcc23, 0x10fd3dedadea5195, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_3_0)


rol_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0x8000000000000000), rs1:x21(0x0000000000000001), rs2:x6(0xffffffffffffffff)
    TEST_RR_OP(rol, x11, x21, x6, 0x8000000000000000, 0x1, 0xffffffffffffffff, x1, 0, x7)

rol_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000001), rs1:x20(0x0000000000000002), rs2:x5(0x7fffffffffffffff)
    TEST_RR_OP(rol, x12, x20, x5, 0x0000000000000001, 0x2, 0x7fffffffffffffff, x1, 8, x7)

rol_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000002), rs1:x19(0x0000000000000004), rs2:x4(0xbfffffffffffffff)
    TEST_RR_OP(rol, x13, x19, x4, 0x0000000000000002, 0x4, 0xbfffffffffffffff, x1, 16, x7)

rol_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000004), rs1:x18(0x0000000000000008), rs2:x3(0xdfffffffffffffff)
    TEST_RR_OP(rol, x14, x18, x3, 0x0000000000000004, 0x8, 0xdfffffffffffffff, x1, 24, x7)

rol_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000008), rs1:x17(0x0000000000000010), rs2:x2(0xefffffffffffffff)
    TEST_RR_OP(rol, x15, x17, x2, 0x0000000000000008, 0x10, 0xefffffffffffffff, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x2,signature_4_0)


rol_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000010), rs1:x16(0x0000000000000020), rs2:x1(0xf7ffffffffffffff)
    TEST_RR_OP(rol, x16, x16, x1, 0x0000000000000010, 0x20, 0xf7ffffffffffffff, x2, 0, x3)

rol_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000020), rs1:x15(0x0000000000000040), rs2:x31(0xfbffffffffffffff)
    TEST_RR_OP(rol, x17, x15, x31, 0x0000000000000020, 0x40, 0xfbffffffffffffff, x2, 8, x3)

rol_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000040), rs1:x14(0x0000000000000080), rs2:x30(0xfdffffffffffffff)
    TEST_RR_OP(rol, x18, x14, x30, 0x0000000000000040, 0x80, 0xfdffffffffffffff, x2, 16, x3)

rol_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000080), rs1:x13(0x0000000000000100), rs2:x29(0xfeffffffffffffff)
    TEST_RR_OP(rol, x19, x13, x29, 0x0000000000000080, 0x100, 0xfeffffffffffffff, x2, 24, x3)

rol_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000100), rs1:x12(0x0000000000000200), rs2:x28(0xff7fffffffffffff)
    TEST_RR_OP(rol, x20, x12, x28, 0x0000000000000100, 0x200, 0xff7fffffffffffff, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_5_0)


rol_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000200), rs1:x11(0x0000000000000400), rs2:x27(0xffbfffffffffffff)
    TEST_RR_OP(rol, x21, x11, x27, 0x0000000000000200, 0x400, 0xffbfffffffffffff, x1, 0, x2)

rol_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000400), rs1:x10(0x0000000000000800), rs2:x26(0xffdfffffffffffff)
    TEST_RR_OP(rol, x22, x10, x26, 0x0000000000000400, 0x800, 0xffdfffffffffffff, x1, 8, x2)

rol_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000800), rs1:x9(0x0000000000001000), rs2:x25(0xffefffffffffffff)
    TEST_RR_OP(rol, x23, x9, x25, 0x0000000000000800, 0x1000, 0xffefffffffffffff, x1, 16, x2)

rol_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0x0000000000001000), rs1:x8(0x0000000000002000), rs2:x24(0xfff7ffffffffffff)
    TEST_RR_OP(rol, x24, x8, x24, 0x0000000000001000, 0x2000, 0xfff7ffffffffffff, x1, 24, x2)

rol_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0x0000000000002000), rs1:x7(0x0000000000004000), rs2:x23(0xfffbffffffffffff)
    TEST_RR_OP(rol, x25, x7, x23, 0x0000000000002000, 0x4000, 0xfffbffffffffffff, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_6_0)


rol_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0x0000000000004000), rs1:x6(0x0000000000008000), rs2:x22(0xfffdffffffffffff)
    TEST_RR_OP(rol, x26, x6, x22, 0x0000000000004000, 0x8000, 0xfffdffffffffffff, x1, 0, x7)

rol_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0x0000000000008000), rs1:x5(0x0000000000010000), rs2:x21(0xfffeffffffffffff)
    TEST_RR_OP(rol, x27, x5, x21, 0x0000000000008000, 0x10000, 0xfffeffffffffffff, x1, 8, x7)

rol_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0x0000000000010000), rs1:x4(0x0000000000020000), rs2:x20(0xffff7fffffffffff)
    TEST_RR_OP(rol, x28, x4, x20, 0x0000000000010000, 0x20000, 0xffff7fffffffffff, x1, 16, x7)

rol_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0x0000000000020000), rs1:x3(0x0000000000040000), rs2:x19(0xffffbfffffffffff)
    TEST_RR_OP(rol, x29, x3, x19, 0x0000000000020000, 0x40000, 0xffffbfffffffffff, x1, 24, x7)

rol_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0x0000000000040000), rs1:x2(0x0000000000080000), rs2:x18(0xffffdfffffffffff)
    TEST_RR_OP(rol, x30, x2, x18, 0x0000000000040000, 0x80000, 0xffffdfffffffffff, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x5,signature_7_0)


rol_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0x0000000000080000), rs1:x1(0x0000000000100000), rs2:x17(0xffffefffffffffff)
    TEST_RR_OP(rol, x31, x1, x17, 0x0000000000080000, 0x100000, 0xffffefffffffffff, x5, 0, x6)

rol_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0x0000000000100000), rs1:x31(0x0000000000200000), rs2:x16(0xfffff7ffffffffff)
    TEST_RR_OP(rol, x1, x31, x16, 0x0000000000100000, 0x200000, 0xfffff7ffffffffff, x5, 8, x6)

rol_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0x0000000000200000), rs1:x30(0x0000000000400000), rs2:x15(0xfffffbffffffffff)
    TEST_RR_OP(rol, x2, x30, x15, 0x0000000000200000, 0x400000, 0xfffffbffffffffff, x5, 16, x6)

rol_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0x0000000000400000), rs1:x29(0x0000000000800000), rs2:x14(0xfffffdffffffffff)
    TEST_RR_OP(rol, x3, x29, x14, 0x0000000000400000, 0x800000, 0xfffffdffffffffff, x5, 24, x6)

rol_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0x0000000000800000), rs1:x28(0x0000000001000000), rs2:x13(0xfffffeffffffffff)
    TEST_RR_OP(rol, x4, x28, x13, 0x0000000000800000, 0x1000000, 0xfffffeffffffffff, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_8_0)


rol_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0x0000000001000000), rs1:x27(0x0000000002000000), rs2:x12(0xffffff7fffffffff)
    TEST_RR_OP(rol, x5, x27, x12, 0x0000000001000000, 0x2000000, 0xffffff7fffffffff, x1, 0, x2)

rol_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0x0000000002000000), rs1:x26(0x0000000004000000), rs2:x11(0xffffffbfffffffff)
    TEST_RR_OP(rol, x6, x26, x11, 0x0000000002000000, 0x4000000, 0xffffffbfffffffff, x1, 8, x2)

rol_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0x0000000004000000), rs1:x25(0x0000000008000000), rs2:x10(0xffffffdfffffffff)
    TEST_RR_OP(rol, x7, x25, x10, 0x0000000004000000, 0x8000000, 0xffffffdfffffffff, x1, 16, x2)

rol_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0x0000000008000000), rs1:x24(0x0000000010000000), rs2:x9(0xffffffefffffffff)
    TEST_RR_OP(rol, x8, x24, x9, 0x0000000008000000, 0x10000000, 0xffffffefffffffff, x1, 24, x2)

rol_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0x0000000010000000), rs1:x23(0x0000000020000000), rs2:x8(0xfffffff7ffffffff)
    TEST_RR_OP(rol, x9, x23, x8, 0x0000000010000000, 0x20000000, 0xfffffff7ffffffff, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_9_0)


rol_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0x0000000020000000), rs1:x22(0x0000000040000000), rs2:x7(0xfffffffbffffffff)
    TEST_RR_OP(rol, x10, x22, x7, 0x0000000020000000, 0x40000000, 0xfffffffbffffffff, x1, 0, x2)

rol_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0x0000000040000000), rs1:x21(0x0000000080000000), rs2:x6(0xfffffffdffffffff)
    TEST_RR_OP(rol, x11, x21, x6, 0x0000000040000000, 0x80000000, 0xfffffffdffffffff, x1, 8, x2)

rol_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0x0000000080000000), rs1:x20(0x0000000100000000), rs2:x5(0xfffffffeffffffff)
    TEST_RR_OP(rol, x12, x20, x5, 0x0000000080000000, 0x100000000, 0xfffffffeffffffff, x1, 16, x2)

rol_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x0000000100000000), rs1:x19(0x0000000200000000), rs2:x4(0xffffffff7fffffff)
    TEST_RR_OP(rol, x13, x19, x4, 0x0000000100000000, 0x200000000, 0xffffffff7fffffff, x1, 24, x2)

rol_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0x0000000200000000), rs1:x18(0x0000000400000000), rs2:x3(0xffffffffbfffffff)
    TEST_RR_OP(rol, x14, x18, x3, 0x0000000200000000, 0x400000000, 0xffffffffbfffffff, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x3,signature_10_0)


rol_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0x0000000400000000), rs1:x17(0x0000000800000000), rs2:x2(0xffffffffdfffffff)
    TEST_RR_OP(rol, x15, x17, x2, 0x0000000400000000, 0x800000000, 0xffffffffdfffffff, x3, 0, x4)

rol_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0x0000000800000000), rs1:x16(0x0000001000000000), rs2:x1(0xffffffffefffffff)
    TEST_RR_OP(rol, x16, x16, x1, 0x0000000800000000, 0x1000000000, 0xffffffffefffffff, x3, 8, x4)

rol_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0x0000001000000000), rs1:x15(0x0000002000000000), rs2:x31(0xfffffffff7ffffff)
    TEST_RR_OP(rol, x17, x15, x31, 0x0000001000000000, 0x2000000000, 0xfffffffff7ffffff, x3, 16, x4)

rol_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0x0000002000000000), rs1:x14(0x0000004000000000), rs2:x30(0xfffffffffbffffff)
    TEST_RR_OP(rol, x18, x14, x30, 0x0000002000000000, 0x4000000000, 0xfffffffffbffffff, x3, 24, x4)

rol_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0x0000004000000000), rs1:x13(0x0000008000000000), rs2:x29(0xfffffffffdffffff)
    TEST_RR_OP(rol, x19, x13, x29, 0x0000004000000000, 0x8000000000, 0xfffffffffdffffff, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_11_0)


rol_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0x0000008000000000), rs1:x12(0x0000010000000000), rs2:x28(0xfffffffffeffffff)
    TEST_RR_OP(rol, x20, x12, x28, 0x0000008000000000, 0x10000000000, 0xfffffffffeffffff, x1, 0, x2)

rol_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0x0000010000000000), rs1:x11(0x0000020000000000), rs2:x27(0xffffffffff7fffff)
    TEST_RR_OP(rol, x21, x11, x27, 0x0000010000000000, 0x20000000000, 0xffffffffff7fffff, x1, 8, x2)

rol_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0x0000020000000000), rs1:x10(0x0000040000000000), rs2:x26(0xffffffffffbfffff)
    TEST_RR_OP(rol, x22, x10, x26, 0x0000020000000000, 0x40000000000, 0xffffffffffbfffff, x1, 16, x2)

rol_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0x0000040000000000), rs1:x9(0x0000080000000000), rs2:x25(0xffffffffffdfffff)
    TEST_RR_OP(rol, x23, x9, x25, 0x0000040000000000, 0x80000000000, 0xffffffffffdfffff, x1, 24, x2)

rol_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0x0000080000000000), rs1:x8(0x0000100000000000), rs2:x24(0xffffffffffefffff)
    TEST_RR_OP(rol, x24, x8, x24, 0x0000080000000000, 0x100000000000, 0xffffffffffefffff, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_12_0)


rol_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0x0000100000000000), rs1:x7(0x0000200000000000), rs2:x23(0xfffffffffff7ffff)
    TEST_RR_OP(rol, x25, x7, x23, 0x0000100000000000, 0x200000000000, 0xfffffffffff7ffff, x1, 0, x2)

rol_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0x0000200000000000), rs1:x6(0x0000400000000000), rs2:x22(0xfffffffffffbffff)
    TEST_RR_OP(rol, x26, x6, x22, 0x0000200000000000, 0x400000000000, 0xfffffffffffbffff, x1, 8, x2)

rol_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0x0000400000000000), rs1:x5(0x0000800000000000), rs2:x21(0xfffffffffffdffff)
    TEST_RR_OP(rol, x27, x5, x21, 0x0000400000000000, 0x800000000000, 0xfffffffffffdffff, x1, 16, x2)

rol_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0x0000800000000000), rs1:x4(0x0001000000000000), rs2:x20(0xfffffffffffeffff)
    TEST_RR_OP(rol, x28, x4, x20, 0x0000800000000000, 0x1000000000000, 0xfffffffffffeffff, x1, 24, x2)

rol_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0x0001000000000000), rs1:x3(0x0002000000000000), rs2:x19(0xffffffffffff7fff)
    TEST_RR_OP(rol, x29, x3, x19, 0x0001000000000000, 0x2000000000000, 0xffffffffffff7fff, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x4,signature_13_0)


rol_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0x0002000000000000), rs1:x2(0x0004000000000000), rs2:x18(0xffffffffffffbfff)
    TEST_RR_OP(rol, x30, x2, x18, 0x0002000000000000, 0x4000000000000, 0xffffffffffffbfff, x4, 0, x5)

rol_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0x0004000000000000), rs1:x1(0x0008000000000000), rs2:x17(0xffffffffffffdfff)
    TEST_RR_OP(rol, x31, x1, x17, 0x0004000000000000, 0x8000000000000, 0xffffffffffffdfff, x4, 8, x5)

rol_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0x0008000000000000), rs1:x31(0x0010000000000000), rs2:x16(0xffffffffffffefff)
    TEST_RR_OP(rol, x1, x31, x16, 0x0008000000000000, 0x10000000000000, 0xffffffffffffefff, x4, 16, x5)

rol_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0x0010000000000000), rs1:x30(0x0020000000000000), rs2:x15(0xfffffffffffff7ff)
    TEST_RR_OP(rol, x2, x30, x15, 0x0010000000000000, 0x20000000000000, 0xfffffffffffff7ff, x4, 24, x5)

rol_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0x0020000000000000), rs1:x29(0x0040000000000000), rs2:x14(0xfffffffffffffbff)
    TEST_RR_OP(rol, x3, x29, x14, 0x0020000000000000, 0x40000000000000, 0xfffffffffffffbff, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_14_0)


rol_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0x0040000000000000), rs1:x28(0x0080000000000000), rs2:x13(0xfffffffffffffdff)
    TEST_RR_OP(rol, x4, x28, x13, 0x0040000000000000, 0x80000000000000, 0xfffffffffffffdff, x1, 0, x2)

rol_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0x0080000000000000), rs1:x27(0x0100000000000000), rs2:x12(0xfffffffffffffeff)
    TEST_RR_OP(rol, x5, x27, x12, 0x0080000000000000, 0x100000000000000, 0xfffffffffffffeff, x1, 8, x2)

rol_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0x0100000000000000), rs1:x26(0x0200000000000000), rs2:x11(0xffffffffffffff7f)
    TEST_RR_OP(rol, x6, x26, x11, 0x0100000000000000, 0x200000000000000, 0xffffffffffffff7f, x1, 16, x2)

rol_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0x0200000000000000), rs1:x25(0x0400000000000000), rs2:x10(0xffffffffffffffbf)
    TEST_RR_OP(rol, x7, x25, x10, 0x0200000000000000, 0x400000000000000, 0xffffffffffffffbf, x1, 24, x2)

rol_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0x0000000004000000), rs1:x24(0x0800000000000000), rs2:x9(0xffffffffffffffdf)
    TEST_RR_OP(rol, x8, x24, x9, 0x0000000004000000, 0x800000000000000, 0xffffffffffffffdf, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_15_0)


rol_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0x0000080000000000), rs1:x23(0x1000000000000000), rs2:x8(0xffffffffffffffef)
    TEST_RR_OP(rol, x9, x23, x8, 0x0000080000000000, 0x1000000000000000, 0xffffffffffffffef, x1, 0, x2)

rol_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0x0010000000000000), rs1:x22(0x2000000000000000), rs2:x7(0xfffffffffffffff7)
    TEST_RR_OP(rol, x10, x22, x7, 0x0010000000000000, 0x2000000000000000, 0xfffffffffffffff7, x1, 8, x2)

rol_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0x0200000000000000), rs1:x21(0x4000000000000000), rs2:x6(0xfffffffffffffffb)
    TEST_RR_OP(rol, x11, x21, x6, 0x0200000000000000, 0x4000000000000000, 0xfffffffffffffffb, x1, 16, x2)

rol_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0x1000000000000000), rs1:x20(0x8000000000000000), rs2:x5(0xfffffffffffffffd)
    TEST_RR_OP(rol, x12, x20, x5, 0x1000000000000000, 0x8000000000000000, 0xfffffffffffffffd, x1, 24, x2)

rol_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0000000000000000), rs2:x4(0xfffffffffffffffe)
    TEST_RR_OP(rol, x13, x19, x4, 0x0000000000000000, 0x0, 0xfffffffffffffffe, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x4,signature_16_0)


rol_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0xfffffffffffffffe), rs1:x18(0xfffffffffffffffe), rs2:x3(0x0000000000000000)
    TEST_RR_OP(rol, x14, x18, x3, 0xfffffffffffffffe, 0xfffffffffffffffe, 0x0, x4, 0, x5)

rol_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0xfffffffffffffffd), rs1:x17(0xfffffffffffffffd), rs2:x2(0x8000000000000000)
    TEST_RR_OP(rol, x15, x17, x2, 0xfffffffffffffffd, 0xfffffffffffffffd, 0x8000000000000000, x4, 8, x5)

rol_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0xfffffffffffffffb), rs1:x16(0xfffffffffffffffb), rs2:x1(0x4000000000000000)
    TEST_RR_OP(rol, x16, x16, x1, 0xfffffffffffffffb, 0xfffffffffffffffb, 0x4000000000000000, x4, 16, x5)

rol_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0xfffffffffffffff7), rs1:x15(0xfffffffffffffff7), rs2:x31(0x2000000000000000)
    TEST_RR_OP(rol, x17, x15, x31, 0xfffffffffffffff7, 0xfffffffffffffff7, 0x2000000000000000, x4, 24, x5)

rol_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0xffffffffffffffef), rs1:x14(0xffffffffffffffef), rs2:x30(0x1000000000000000)
    TEST_RR_OP(rol, x18, x14, x30, 0xffffffffffffffef, 0xffffffffffffffef, 0x1000000000000000, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_17_0)


rol_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0xffffffffffffffdf), rs1:x13(0xffffffffffffffdf), rs2:x29(0x0800000000000000)
    TEST_RR_OP(rol, x19, x13, x29, 0xffffffffffffffdf, 0xffffffffffffffdf, 0x800000000000000, x1, 0, x2)

rol_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0xffffffffffffffbf), rs1:x12(0xffffffffffffffbf), rs2:x28(0x0400000000000000)
    TEST_RR_OP(rol, x20, x12, x28, 0xffffffffffffffbf, 0xffffffffffffffbf, 0x400000000000000, x1, 8, x2)

rol_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0xffffffffffffff7f), rs1:x11(0xffffffffffffff7f), rs2:x27(0x0200000000000000)
    TEST_RR_OP(rol, x21, x11, x27, 0xffffffffffffff7f, 0xffffffffffffff7f, 0x200000000000000, x1, 16, x2)

rol_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0xfffffffffffffeff), rs1:x10(0xfffffffffffffeff), rs2:x26(0x0100000000000000)
    TEST_RR_OP(rol, x22, x10, x26, 0xfffffffffffffeff, 0xfffffffffffffeff, 0x100000000000000, x1, 24, x2)

rol_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0xfffffffffffffdff), rs1:x9(0xfffffffffffffdff), rs2:x25(0x0080000000000000)
    TEST_RR_OP(rol, x23, x9, x25, 0xfffffffffffffdff, 0xfffffffffffffdff, 0x80000000000000, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_18_0)


rol_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0xfffffffffffffbff), rs1:x8(0xfffffffffffffbff), rs2:x24(0x0040000000000000)
    TEST_RR_OP(rol, x24, x8, x24, 0xfffffffffffffbff, 0xfffffffffffffbff, 0x40000000000000, x1, 0, x2)

rol_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0xfffffffffffff7ff), rs1:x7(0xfffffffffffff7ff), rs2:x23(0x0020000000000000)
    TEST_RR_OP(rol, x25, x7, x23, 0xfffffffffffff7ff, 0xfffffffffffff7ff, 0x20000000000000, x1, 8, x2)

rol_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffefff), rs1:x6(0xffffffffffffefff), rs2:x22(0x0010000000000000)
    TEST_RR_OP(rol, x26, x6, x22, 0xffffffffffffefff, 0xffffffffffffefff, 0x10000000000000, x1, 16, x2)

rol_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffdfff), rs1:x5(0xffffffffffffdfff), rs2:x21(0x0008000000000000)
    TEST_RR_OP(rol, x27, x5, x21, 0xffffffffffffdfff, 0xffffffffffffdfff, 0x8000000000000, x1, 24, x2)

rol_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0xffffffffffffbfff), rs1:x4(0xffffffffffffbfff), rs2:x20(0x0004000000000000)
    TEST_RR_OP(rol, x28, x4, x20, 0xffffffffffffbfff, 0xffffffffffffbfff, 0x4000000000000, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x4,signature_19_0)


rol_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0xffffffffffff7fff), rs1:x3(0xffffffffffff7fff), rs2:x19(0x0002000000000000)
    TEST_RR_OP(rol, x29, x3, x19, 0xffffffffffff7fff, 0xffffffffffff7fff, 0x2000000000000, x4, 0, x5)

rol_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0xfffffffffffeffff), rs1:x2(0xfffffffffffeffff), rs2:x18(0x0001000000000000)
    TEST_RR_OP(rol, x30, x2, x18, 0xfffffffffffeffff, 0xfffffffffffeffff, 0x1000000000000, x4, 8, x5)

rol_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0xfffffffffffdffff), rs1:x1(0xfffffffffffdffff), rs2:x17(0x0000800000000000)
    TEST_RR_OP(rol, x31, x1, x17, 0xfffffffffffdffff, 0xfffffffffffdffff, 0x800000000000, x4, 16, x5)

rol_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0xfffffffffffbffff), rs1:x31(0xfffffffffffbffff), rs2:x16(0x0000400000000000)
    TEST_RR_OP(rol, x1, x31, x16, 0xfffffffffffbffff, 0xfffffffffffbffff, 0x400000000000, x4, 24, x5)

rol_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0xfffffffffff7ffff), rs1:x30(0xfffffffffff7ffff), rs2:x15(0x0000200000000000)
    TEST_RR_OP(rol, x2, x30, x15, 0xfffffffffff7ffff, 0xfffffffffff7ffff, 0x200000000000, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_20_0)


rol_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffefffff), rs1:x29(0xffffffffffefffff), rs2:x14(0x0000100000000000)
    TEST_RR_OP(rol, x3, x29, x14, 0xffffffffffefffff, 0xffffffffffefffff, 0x100000000000, x1, 0, x2)

rol_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffdfffff), rs1:x28(0xffffffffffdfffff), rs2:x13(0x0000080000000000)
    TEST_RR_OP(rol, x4, x28, x13, 0xffffffffffdfffff, 0xffffffffffdfffff, 0x80000000000, x1, 8, x2)

rol_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0xffffffffffbfffff), rs1:x27(0xffffffffffbfffff), rs2:x12(0x0000040000000000)
    TEST_RR_OP(rol, x5, x27, x12, 0xffffffffffbfffff, 0xffffffffffbfffff, 0x40000000000, x1, 16, x2)

rol_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0xffffffffff7fffff), rs1:x26(0xffffffffff7fffff), rs2:x11(0x0000020000000000)
    TEST_RR_OP(rol, x6, x26, x11, 0xffffffffff7fffff, 0xffffffffff7fffff, 0x20000000000, x1, 24, x2)

rol_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0xfffffffffeffffff), rs1:x25(0xfffffffffeffffff), rs2:x10(0x0000010000000000)
    TEST_RR_OP(rol, x7, x25, x10, 0xfffffffffeffffff, 0xfffffffffeffffff, 0x10000000000, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_21_0)


rol_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0xfffffffffdffffff), rs1:x24(0xfffffffffdffffff), rs2:x9(0x0000008000000000)
    TEST_RR_OP(rol, x8, x24, x9, 0xfffffffffdffffff, 0xfffffffffdffffff, 0x8000000000, x1, 0, x2)

rol_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0xfffffffffbffffff), rs1:x23(0xfffffffffbffffff), rs2:x8(0x0000004000000000)
    TEST_RR_OP(rol, x9, x23, x8, 0xfffffffffbffffff, 0xfffffffffbffffff, 0x4000000000, x1, 8, x2)

rol_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0xfffffffff7ffffff), rs1:x22(0xfffffffff7ffffff), rs2:x7(0x0000002000000000)
    TEST_RR_OP(rol, x10, x22, x7, 0xfffffffff7ffffff, 0xfffffffff7ffffff, 0x2000000000, x1, 16, x2)

rol_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0xffffffffefffffff), rs1:x21(0xffffffffefffffff), rs2:x6(0x0000001000000000)
    TEST_RR_OP(rol, x11, x21, x6, 0xffffffffefffffff, 0xffffffffefffffff, 0x1000000000, x1, 24, x2)

rol_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0xffffffffdfffffff), rs1:x20(0xffffffffdfffffff), rs2:x5(0x0000000800000000)
    TEST_RR_OP(rol, x12, x20, x5, 0xffffffffdfffffff, 0xffffffffdfffffff, 0x800000000, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x5,signature_22_0)


rol_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0xffffffffbfffffff), rs1:x19(0xffffffffbfffffff), rs2:x4(0x0000000400000000)
    TEST_RR_OP(rol, x13, x19, x4, 0xffffffffbfffffff, 0xffffffffbfffffff, 0x400000000, x5, 0, x6)

rol_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0xffffffff7fffffff), rs1:x18(0xffffffff7fffffff), rs2:x3(0x0000000200000000)
    TEST_RR_OP(rol, x14, x18, x3, 0xffffffff7fffffff, 0xffffffff7fffffff, 0x200000000, x5, 8, x6)

rol_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0xfffffffeffffffff), rs1:x17(0xfffffffeffffffff), rs2:x2(0x0000000100000000)
    TEST_RR_OP(rol, x15, x17, x2, 0xfffffffeffffffff, 0xfffffffeffffffff, 0x100000000, x5, 16, x6)

rol_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0xfffffffdffffffff), rs1:x16(0xfffffffdffffffff), rs2:x1(0x0000000080000000)
    TEST_RR_OP(rol, x16, x16, x1, 0xfffffffdffffffff, 0xfffffffdffffffff, 0x80000000, x5, 24, x6)

rol_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0xfffffffbffffffff), rs1:x15(0xfffffffbffffffff), rs2:x31(0x0000000040000000)
    TEST_RR_OP(rol, x17, x15, x31, 0xfffffffbffffffff, 0xfffffffbffffffff, 0x40000000, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_23_0)


rol_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0xfffffff7ffffffff), rs1:x14(0xfffffff7ffffffff), rs2:x30(0x0000000020000000)
    TEST_RR_OP(rol, x18, x14, x30, 0xfffffff7ffffffff, 0xfffffff7ffffffff, 0x20000000, x1, 0, x2)

rol_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0xffffffefffffffff), rs1:x13(0xffffffefffffffff), rs2:x29(0x0000000010000000)
    TEST_RR_OP(rol, x19, x13, x29, 0xffffffefffffffff, 0xffffffefffffffff, 0x10000000, x1, 8, x2)

rol_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0xffffffdfffffffff), rs1:x12(0xffffffdfffffffff), rs2:x28(0x0000000008000000)
    TEST_RR_OP(rol, x20, x12, x28, 0xffffffdfffffffff, 0xffffffdfffffffff, 0x8000000, x1, 16, x2)

rol_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0xffffffbfffffffff), rs1:x11(0xffffffbfffffffff), rs2:x27(0x0000000004000000)
    TEST_RR_OP(rol, x21, x11, x27, 0xffffffbfffffffff, 0xffffffbfffffffff, 0x4000000, x1, 24, x2)

rol_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0xffffff7fffffffff), rs1:x10(0xffffff7fffffffff), rs2:x26(0x0000000002000000)
    TEST_RR_OP(rol, x22, x10, x26, 0xffffff7fffffffff, 0xffffff7fffffffff, 0x2000000, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_24_0)


rol_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0xfffffeffffffffff), rs1:x9(0xfffffeffffffffff), rs2:x25(0x0000000001000000)
    TEST_RR_OP(rol, x23, x9, x25, 0xfffffeffffffffff, 0xfffffeffffffffff, 0x1000000, x1, 0, x2)

rol_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0xfffffdffffffffff), rs1:x8(0xfffffdffffffffff), rs2:x24(0x0000000000800000)
    TEST_RR_OP(rol, x24, x8, x24, 0xfffffdffffffffff, 0xfffffdffffffffff, 0x800000, x1, 8, x2)

rol_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0xfffffbffffffffff), rs1:x7(0xfffffbffffffffff), rs2:x23(0x0000000000400000)
    TEST_RR_OP(rol, x25, x7, x23, 0xfffffbffffffffff, 0xfffffbffffffffff, 0x400000, x1, 16, x2)

rol_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0xfffff7ffffffffff), rs1:x6(0xfffff7ffffffffff), rs2:x22(0x0000000000200000)
    TEST_RR_OP(rol, x26, x6, x22, 0xfffff7ffffffffff, 0xfffff7ffffffffff, 0x200000, x1, 24, x2)

rol_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0xffffefffffffffff), rs1:x5(0xffffefffffffffff), rs2:x21(0x0000000000100000)
    TEST_RR_OP(rol, x27, x5, x21, 0xffffefffffffffff, 0xffffefffffffffff, 0x100000, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x5,signature_25_0)


rol_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0xffffdfffffffffff), rs1:x4(0xffffdfffffffffff), rs2:x20(0x0000000000080000)
    TEST_RR_OP(rol, x28, x4, x20, 0xffffdfffffffffff, 0xffffdfffffffffff, 0x80000, x5, 0, x6)

rol_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0xffffbfffffffffff), rs1:x3(0xffffbfffffffffff), rs2:x19(0x0000000000040000)
    TEST_RR_OP(rol, x29, x3, x19, 0xffffbfffffffffff, 0xffffbfffffffffff, 0x40000, x5, 8, x6)

rol_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0xffff7fffffffffff), rs1:x2(0xffff7fffffffffff), rs2:x18(0x0000000000020000)
    TEST_RR_OP(rol, x30, x2, x18, 0xffff7fffffffffff, 0xffff7fffffffffff, 0x20000, x5, 16, x6)

rol_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0xfffeffffffffffff), rs1:x1(0xfffeffffffffffff), rs2:x17(0x0000000000010000)
    TEST_RR_OP(rol, x31, x1, x17, 0xfffeffffffffffff, 0xfffeffffffffffff, 0x10000, x5, 24, x6)

rol_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0xfffdffffffffffff), rs1:x31(0xfffdffffffffffff), rs2:x16(0x0000000000008000)
    TEST_RR_OP(rol, x1, x31, x16, 0xfffdffffffffffff, 0xfffdffffffffffff, 0x8000, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_26_0)


rol_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0xfffbffffffffffff), rs1:x30(0xfffbffffffffffff), rs2:x15(0x0000000000004000)
    TEST_RR_OP(rol, x2, x30, x15, 0xfffbffffffffffff, 0xfffbffffffffffff, 0x4000, x1, 0, x7)

rol_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0xfff7ffffffffffff), rs1:x29(0xfff7ffffffffffff), rs2:x14(0x0000000000002000)
    TEST_RR_OP(rol, x3, x29, x14, 0xfff7ffffffffffff, 0xfff7ffffffffffff, 0x2000, x1, 8, x7)

rol_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0xffefffffffffffff), rs1:x28(0xffefffffffffffff), rs2:x13(0x0000000000001000)
    TEST_RR_OP(rol, x4, x28, x13, 0xffefffffffffffff, 0xffefffffffffffff, 0x1000, x1, 16, x7)

rol_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0xffdfffffffffffff), rs1:x27(0xffdfffffffffffff), rs2:x12(0x0000000000000800)
    TEST_RR_OP(rol, x5, x27, x12, 0xffdfffffffffffff, 0xffdfffffffffffff, 0x800, x1, 24, x7)

rol_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0xffbfffffffffffff), rs1:x26(0xffbfffffffffffff), rs2:x11(0x0000000000000400)
    TEST_RR_OP(rol, x6, x26, x11, 0xffbfffffffffffff, 0xffbfffffffffffff, 0x400, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_27_0)


rol_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0xff7fffffffffffff), rs1:x25(0xff7fffffffffffff), rs2:x10(0x0000000000000200)
    TEST_RR_OP(rol, x7, x25, x10, 0xff7fffffffffffff, 0xff7fffffffffffff, 0x200, x1, 0, x2)

rol_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0xfeffffffffffffff), rs1:x24(0xfeffffffffffffff), rs2:x9(0x0000000000000100)
    TEST_RR_OP(rol, x8, x24, x9, 0xfeffffffffffffff, 0xfeffffffffffffff, 0x100, x1, 8, x2)

rol_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0xfdffffffffffffff), rs1:x23(0xfdffffffffffffff), rs2:x8(0x0000000000000080)
    TEST_RR_OP(rol, x9, x23, x8, 0xfdffffffffffffff, 0xfdffffffffffffff, 0x80, x1, 16, x2)

rol_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0xfbffffffffffffff), rs1:x22(0xfbffffffffffffff), rs2:x7(0x0000000000000040)
    TEST_RR_OP(rol, x10, x22, x7, 0xfbffffffffffffff, 0xfbffffffffffffff, 0x40, x1, 24, x2)

rol_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0xfffffffff7ffffff), rs1:x21(0xf7ffffffffffffff), rs2:x6(0x0000000000000020)
    TEST_RR_OP(rol, x11, x21, x6, 0xfffffffff7ffffff, 0xf7ffffffffffffff, 0x20, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x6,signature_28_0)


rol_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0xffffffffffffefff), rs1:x20(0xefffffffffffffff), rs2:x5(0x0000000000000010)
    TEST_RR_OP(rol, x12, x20, x5, 0xffffffffffffefff, 0xefffffffffffffff, 0x10, x6, 0, x7)

rol_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0xffffffffffffffdf), rs1:x19(0xdfffffffffffffff), rs2:x4(0x0000000000000008)
    TEST_RR_OP(rol, x13, x19, x4, 0xffffffffffffffdf, 0xdfffffffffffffff, 0x8, x6, 8, x7)

rol_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0xfffffffffffffffb), rs1:x18(0xbfffffffffffffff), rs2:x3(0x0000000000000004)
    TEST_RR_OP(rol, x14, x18, x3, 0xfffffffffffffffb, 0xbfffffffffffffff, 0x4, x6, 16, x7)

rol_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0xfffffffffffffffd), rs1:x17(0x7fffffffffffffff), rs2:x2(0x0000000000000002)
    TEST_RR_OP(rol, x15, x17, x2, 0xfffffffffffffffd, 0x7fffffffffffffff, 0x2, x6, 24, x7)

rol_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0xffffffffffffffff), rs1:x16(0xffffffffffffffff), rs2:x1(0x0000000000000001)
    TEST_RR_OP(rol, x16, x16, x1, 0xffffffffffffffff, 0xffffffffffffffff, 0x1, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_29_0)


rol_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000001), rs1:x15(0x0000000000000001), rs2:x31(0x0000000000000000)
    TEST_RR_OP(rol, x17, x15, x31, 0x0000000000000001, 0x1, 0x0, x1, 0, x2)

rol_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000002), rs1:x14(0x0000000000000002), rs2:x30(0x0000000000000000)
    TEST_RR_OP(rol, x18, x14, x30, 0x0000000000000002, 0x2, 0x0, x1, 8, x2)

rol_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000004), rs1:x13(0x0000000000000004), rs2:x29(0x0000000000000000)
    TEST_RR_OP(rol, x19, x13, x29, 0x0000000000000004, 0x4, 0x0, x1, 16, x2)

rol_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000008), rs1:x12(0x0000000000000008), rs2:x28(0x0000000000000000)
    TEST_RR_OP(rol, x20, x12, x28, 0x0000000000000008, 0x8, 0x0, x1, 24, x2)

rol_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000010), rs1:x11(0x0000000000000010), rs2:x27(0x0000000000000000)
    TEST_RR_OP(rol, x21, x11, x27, 0x0000000000000010, 0x10, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_30_0)


rol_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000020), rs1:x10(0x0000000000000020), rs2:x26(0x0000000000000000)
    TEST_RR_OP(rol, x22, x10, x26, 0x0000000000000020, 0x20, 0x0, x1, 0, x2)

rol_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000040), rs1:x9(0x0000000000000040), rs2:x25(0x0000000000000000)
    TEST_RR_OP(rol, x23, x9, x25, 0x0000000000000040, 0x40, 0x0, x1, 8, x2)

rol_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000080), rs1:x8(0x0000000000000080), rs2:x24(0x0000000000000000)
    TEST_RR_OP(rol, x24, x8, x24, 0x0000000000000080, 0x80, 0x0, x1, 16, x2)

rol_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000100), rs1:x7(0x0000000000000100), rs2:x23(0x0000000000000000)
    TEST_RR_OP(rol, x25, x7, x23, 0x0000000000000100, 0x100, 0x0, x1, 24, x2)

rol_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000200), rs1:x6(0x0000000000000200), rs2:x22(0x0000000000000000)
    TEST_RR_OP(rol, x26, x6, x22, 0x0000000000000200, 0x200, 0x0, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x6,signature_31_0)


rol_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000400), rs1:x5(0x0000000000000400), rs2:x21(0x0000000000000000)
    TEST_RR_OP(rol, x27, x5, x21, 0x0000000000000400, 0x400, 0x0, x6, 0, x7)

rol_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000800), rs1:x4(0x0000000000000800), rs2:x20(0x0000000000000000)
    TEST_RR_OP(rol, x28, x4, x20, 0x0000000000000800, 0x800, 0x0, x6, 8, x7)

rol_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0000000000001000), rs1:x3(0x0000000000001000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(rol, x29, x3, x19, 0x0000000000001000, 0x1000, 0x0, x6, 16, x7)

rol_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000000002000), rs1:x2(0x0000000000002000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(rol, x30, x2, x18, 0x0000000000002000, 0x2000, 0x0, x6, 24, x7)

rol_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0000000000004000), rs1:x1(0x0000000000004000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(rol, x31, x1, x17, 0x0000000000004000, 0x4000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x6,signature_32_0)


rol_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000000008000), rs1:x31(0x0000000000008000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(rol, x1, x31, x16, 0x0000000000008000, 0x8000, 0x0, x6, 0, x7)

rol_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000000000010000), rs1:x30(0x0000000000010000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(rol, x2, x30, x15, 0x0000000000010000, 0x10000, 0x0, x6, 8, x7)

rol_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000000020000), rs1:x29(0x0000000000020000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(rol, x3, x29, x14, 0x0000000000020000, 0x20000, 0x0, x6, 16, x7)

rol_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000000040000), rs1:x28(0x0000000000040000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(rol, x4, x28, x13, 0x0000000000040000, 0x40000, 0x0, x6, 24, x7)

rol_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000000080000), rs1:x27(0x0000000000080000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(rol, x5, x27, x12, 0x0000000000080000, 0x80000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_33_0)


rol_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000000100000), rs1:x26(0x0000000000100000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(rol, x6, x26, x11, 0x0000000000100000, 0x100000, 0x0, x1, 0, x2)

rol_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000000200000), rs1:x25(0x0000000000200000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(rol, x7, x25, x10, 0x0000000000200000, 0x200000, 0x0, x1, 8, x2)

rol_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000000400000), rs1:x24(0x0000000000400000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(rol, x8, x24, x9, 0x0000000000400000, 0x400000, 0x0, x1, 16, x2)

rol_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000000800000), rs1:x23(0x0000000000800000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(rol, x9, x23, x8, 0x0000000000800000, 0x800000, 0x0, x1, 24, x2)

rol_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000001000000), rs1:x22(0x0000000001000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(rol, x10, x22, x7, 0x0000000001000000, 0x1000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_34_0)


rol_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000002000000), rs1:x21(0x0000000002000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(rol, x11, x21, x6, 0x0000000002000000, 0x2000000, 0x0, x1, 0, x7)

rol_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000004000000), rs1:x20(0x0000000004000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(rol, x12, x20, x5, 0x0000000004000000, 0x4000000, 0x0, x1, 8, x7)

rol_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000008000000), rs1:x19(0x0000000008000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(rol, x13, x19, x4, 0x0000000008000000, 0x8000000, 0x0, x1, 16, x7)

rol_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000010000000), rs1:x18(0x0000000010000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(rol, x14, x18, x3, 0x0000000010000000, 0x10000000, 0x0, x1, 24, x7)

rol_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000020000000), rs1:x17(0x0000000020000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(rol, x15, x17, x2, 0x0000000020000000, 0x20000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x2,signature_35_0)


rol_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000040000000), rs1:x16(0x0000000040000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(rol, x16, x16, x1, 0x0000000040000000, 0x40000000, 0x0, x2, 0, x3)

rol_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000000080000000), rs1:x15(0x0000000080000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(rol, x17, x15, x31, 0x0000000080000000, 0x80000000, 0x0, x2, 8, x3)

rol_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000100000000), rs1:x14(0x0000000100000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(rol, x18, x14, x30, 0x0000000100000000, 0x100000000, 0x0, x2, 16, x3)

rol_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000200000000), rs1:x13(0x0000000200000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(rol, x19, x13, x29, 0x0000000200000000, 0x200000000, 0x0, x2, 24, x3)

rol_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000000400000000), rs1:x12(0x0000000400000000), rs2:x28(0x0000000000000000)
    TEST_RR_OP(rol, x20, x12, x28, 0x0000000400000000, 0x400000000, 0x0, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_36_0)


rol_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000800000000), rs1:x11(0x0000000800000000), rs2:x27(0x0000000000000000)
    TEST_RR_OP(rol, x21, x11, x27, 0x0000000800000000, 0x800000000, 0x0, x1, 0, x2)

rol_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000001000000000), rs1:x10(0x0000001000000000), rs2:x26(0x0000000000000000)
    TEST_RR_OP(rol, x22, x10, x26, 0x0000001000000000, 0x1000000000, 0x0, x1, 8, x2)

rol_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000002000000000), rs1:x9(0x0000002000000000), rs2:x25(0x0000000000000000)
    TEST_RR_OP(rol, x23, x9, x25, 0x0000002000000000, 0x2000000000, 0x0, x1, 16, x2)

rol_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000004000000000), rs1:x8(0x0000004000000000), rs2:x24(0x0000000000000000)
    TEST_RR_OP(rol, x24, x8, x24, 0x0000004000000000, 0x4000000000, 0x0, x1, 24, x2)

rol_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000008000000000), rs1:x7(0x0000008000000000), rs2:x23(0x0000000000000000)
    TEST_RR_OP(rol, x25, x7, x23, 0x0000008000000000, 0x8000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_37_0)


rol_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000010000000000), rs1:x6(0x0000010000000000), rs2:x22(0x0000000000000000)
    TEST_RR_OP(rol, x26, x6, x22, 0x0000010000000000, 0x10000000000, 0x0, x1, 0, x7)

rol_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000020000000000), rs1:x5(0x0000020000000000), rs2:x21(0x0000000000000000)
    TEST_RR_OP(rol, x27, x5, x21, 0x0000020000000000, 0x20000000000, 0x0, x1, 8, x7)

rol_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000040000000000), rs1:x4(0x0000040000000000), rs2:x20(0x0000000000000000)
    TEST_RR_OP(rol, x28, x4, x20, 0x0000040000000000, 0x40000000000, 0x0, x1, 16, x7)

rol_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000080000000000), rs1:x3(0x0000080000000000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(rol, x29, x3, x19, 0x0000080000000000, 0x80000000000, 0x0, x1, 24, x7)

rol_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000100000000000), rs1:x2(0x0000100000000000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(rol, x30, x2, x18, 0x0000100000000000, 0x100000000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x5,signature_38_0)


rol_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000200000000000), rs1:x1(0x0000200000000000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(rol, x31, x1, x17, 0x0000200000000000, 0x200000000000, 0x0, x5, 0, x6)

rol_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000400000000000), rs1:x31(0x0000400000000000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(rol, x1, x31, x16, 0x0000400000000000, 0x400000000000, 0x0, x5, 8, x6)

rol_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000800000000000), rs1:x30(0x0000800000000000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(rol, x2, x30, x15, 0x0000800000000000, 0x800000000000, 0x0, x5, 16, x6)

rol_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0001000000000000), rs1:x29(0x0001000000000000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(rol, x3, x29, x14, 0x0001000000000000, 0x1000000000000, 0x0, x5, 24, x6)

rol_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0002000000000000), rs1:x28(0x0002000000000000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(rol, x4, x28, x13, 0x0002000000000000, 0x2000000000000, 0x0, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_39_0)


rol_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0004000000000000), rs1:x27(0x0004000000000000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(rol, x5, x27, x12, 0x0004000000000000, 0x4000000000000, 0x0, x1, 0, x2)

rol_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0008000000000000), rs1:x26(0x0008000000000000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(rol, x6, x26, x11, 0x0008000000000000, 0x8000000000000, 0x0, x1, 8, x2)

rol_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0010000000000000), rs1:x25(0x0010000000000000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(rol, x7, x25, x10, 0x0010000000000000, 0x10000000000000, 0x0, x1, 16, x2)

rol_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0020000000000000), rs1:x24(0x0020000000000000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(rol, x8, x24, x9, 0x0020000000000000, 0x20000000000000, 0x0, x1, 24, x2)

rol_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0040000000000000), rs1:x23(0x0040000000000000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(rol, x9, x23, x8, 0x0040000000000000, 0x40000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_40_0)


rol_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0080000000000000), rs1:x22(0x0080000000000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(rol, x10, x22, x7, 0x0080000000000000, 0x80000000000000, 0x0, x1, 0, x2)

rol_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0100000000000000), rs1:x21(0x0100000000000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(rol, x11, x21, x6, 0x0100000000000000, 0x100000000000000, 0x0, x1, 8, x2)

rol_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0200000000000000), rs1:x20(0x0200000000000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(rol, x12, x20, x5, 0x0200000000000000, 0x200000000000000, 0x0, x1, 16, x2)

rol_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0400000000000000), rs1:x19(0x0400000000000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(rol, x13, x19, x4, 0x0400000000000000, 0x400000000000000, 0x0, x1, 24, x2)

rol_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0800000000000000), rs1:x18(0x0800000000000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(rol, x14, x18, x3, 0x0800000000000000, 0x800000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x3,signature_41_0)


rol_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x1000000000000000), rs1:x17(0x1000000000000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(rol, x15, x17, x2, 0x1000000000000000, 0x1000000000000000, 0x0, x3, 0, x4)

rol_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x2000000000000000), rs1:x16(0x2000000000000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(rol, x16, x16, x1, 0x2000000000000000, 0x2000000000000000, 0x0, x3, 8, x4)

rol_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x4000000000000000), rs1:x15(0x4000000000000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(rol, x17, x15, x31, 0x4000000000000000, 0x4000000000000000, 0x0, x3, 16, x4)

rol_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x8000000000000000), rs1:x14(0x8000000000000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(rol, x18, x14, x30, 0x8000000000000000, 0x8000000000000000, 0x0, x3, 24, x4)

rol_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(rol, x19, x13, x29, 0x0000000000000000, 0x0, 0x0, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_42_0)


rol_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0xfffffffffffffffe), rs1:x12(0xfffffffffffffffe), rs2:x28(0x0000000000000000)
    TEST_RR_OP(rol, x20, x12, x28, 0xfffffffffffffffe, 0xfffffffffffffffe, 0x0, x1, 0, x2)

rol_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0xfffffffffffffffd), rs1:x11(0xfffffffffffffffd), rs2:x27(0x0000000000000000)
    TEST_RR_OP(rol, x21, x11, x27, 0xfffffffffffffffd, 0xfffffffffffffffd, 0x0, x1, 8, x2)

rol_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0xfffffffffffffffb), rs1:x10(0xfffffffffffffffb), rs2:x26(0x0000000000000000)
    TEST_RR_OP(rol, x22, x10, x26, 0xfffffffffffffffb, 0xfffffffffffffffb, 0x0, x1, 16, x2)

rol_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0xfffffffffffffff7), rs1:x9(0xfffffffffffffff7), rs2:x25(0x0000000000000000)
    TEST_RR_OP(rol, x23, x9, x25, 0xfffffffffffffff7, 0xfffffffffffffff7, 0x0, x1, 24, x2)

rol_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0xffffffffffffffef), rs1:x8(0xffffffffffffffef), rs2:x24(0x0000000000000000)
    TEST_RR_OP(rol, x24, x8, x24, 0xffffffffffffffef, 0xffffffffffffffef, 0x0, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_43_0)


rol_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0xffffffffffffffdf), rs1:x7(0xffffffffffffffdf), rs2:x23(0x0000000000000000)
    TEST_RR_OP(rol, x25, x7, x23, 0xffffffffffffffdf, 0xffffffffffffffdf, 0x0, x1, 0, x2)

rol_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0xffffffffffffffbf), rs1:x6(0xffffffffffffffbf), rs2:x22(0x0000000000000000)
    TEST_RR_OP(rol, x26, x6, x22, 0xffffffffffffffbf, 0xffffffffffffffbf, 0x0, x1, 8, x2)

rol_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0xffffffffffffff7f), rs1:x5(0xffffffffffffff7f), rs2:x21(0x0000000000000000)
    TEST_RR_OP(rol, x27, x5, x21, 0xffffffffffffff7f, 0xffffffffffffff7f, 0x0, x1, 16, x2)

rol_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0xfffffffffffffeff), rs1:x4(0xfffffffffffffeff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(rol, x28, x4, x20, 0xfffffffffffffeff, 0xfffffffffffffeff, 0x0, x1, 24, x2)

rol_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0xfffffffffffffdff), rs1:x3(0xfffffffffffffdff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(rol, x29, x3, x19, 0xfffffffffffffdff, 0xfffffffffffffdff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x4,signature_44_0)


rol_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0xfffffffffffffbff), rs1:x2(0xfffffffffffffbff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(rol, x30, x2, x18, 0xfffffffffffffbff, 0xfffffffffffffbff, 0x0, x4, 0, x5)

rol_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0xfffffffffffff7ff), rs1:x1(0xfffffffffffff7ff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(rol, x31, x1, x17, 0xfffffffffffff7ff, 0xfffffffffffff7ff, 0x0, x4, 8, x5)

rol_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0xffffffffffffefff), rs1:x31(0xffffffffffffefff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(rol, x1, x31, x16, 0xffffffffffffefff, 0xffffffffffffefff, 0x0, x4, 16, x5)

rol_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0xffffffffffffdfff), rs1:x30(0xffffffffffffdfff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(rol, x2, x30, x15, 0xffffffffffffdfff, 0xffffffffffffdfff, 0x0, x4, 24, x5)

rol_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0xffffffffffffbfff), rs1:x29(0xffffffffffffbfff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(rol, x3, x29, x14, 0xffffffffffffbfff, 0xffffffffffffbfff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_45_0)


rol_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0xffffffffffff7fff), rs1:x28(0xffffffffffff7fff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(rol, x4, x28, x13, 0xffffffffffff7fff, 0xffffffffffff7fff, 0x0, x1, 0, x2)

rol_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0xfffffffffffeffff), rs1:x27(0xfffffffffffeffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(rol, x5, x27, x12, 0xfffffffffffeffff, 0xfffffffffffeffff, 0x0, x1, 8, x2)

rol_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0xfffffffffffdffff), rs1:x26(0xfffffffffffdffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(rol, x6, x26, x11, 0xfffffffffffdffff, 0xfffffffffffdffff, 0x0, x1, 16, x2)

rol_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0xfffffffffffbffff), rs1:x25(0xfffffffffffbffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(rol, x7, x25, x10, 0xfffffffffffbffff, 0xfffffffffffbffff, 0x0, x1, 24, x2)

rol_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0xfffffffffff7ffff), rs1:x24(0xfffffffffff7ffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(rol, x8, x24, x9, 0xfffffffffff7ffff, 0xfffffffffff7ffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_46_0)


rol_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0xffffffffffefffff), rs1:x23(0xffffffffffefffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(rol, x9, x23, x8, 0xffffffffffefffff, 0xffffffffffefffff, 0x0, x1, 0, x2)

rol_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0xffffffffffdfffff), rs1:x22(0xffffffffffdfffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(rol, x10, x22, x7, 0xffffffffffdfffff, 0xffffffffffdfffff, 0x0, x1, 8, x2)

rol_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0xffffffffffbfffff), rs1:x21(0xffffffffffbfffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(rol, x11, x21, x6, 0xffffffffffbfffff, 0xffffffffffbfffff, 0x0, x1, 16, x2)

rol_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0xffffffffff7fffff), rs1:x20(0xffffffffff7fffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(rol, x12, x20, x5, 0xffffffffff7fffff, 0xffffffffff7fffff, 0x0, x1, 24, x2)

rol_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0xfffffffffeffffff), rs1:x19(0xfffffffffeffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(rol, x13, x19, x4, 0xfffffffffeffffff, 0xfffffffffeffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x4,signature_47_0)


rol_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0xfffffffffdffffff), rs1:x18(0xfffffffffdffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(rol, x14, x18, x3, 0xfffffffffdffffff, 0xfffffffffdffffff, 0x0, x4, 0, x5)

rol_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0xfffffffffbffffff), rs1:x17(0xfffffffffbffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(rol, x15, x17, x2, 0xfffffffffbffffff, 0xfffffffffbffffff, 0x0, x4, 8, x5)

rol_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0xfffffffff7ffffff), rs1:x16(0xfffffffff7ffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(rol, x16, x16, x1, 0xfffffffff7ffffff, 0xfffffffff7ffffff, 0x0, x4, 16, x5)

rol_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0xffffffffefffffff), rs1:x15(0xffffffffefffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(rol, x17, x15, x31, 0xffffffffefffffff, 0xffffffffefffffff, 0x0, x4, 24, x5)

rol_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0xffffffffdfffffff), rs1:x14(0xffffffffdfffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(rol, x18, x14, x30, 0xffffffffdfffffff, 0xffffffffdfffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_48_0)


rol_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0xffffffffbfffffff), rs1:x13(0xffffffffbfffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(rol, x19, x13, x29, 0xffffffffbfffffff, 0xffffffffbfffffff, 0x0, x1, 0, x2)

rol_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0xffffffff7fffffff), rs1:x12(0xffffffff7fffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(rol, x20, x12, x28, 0xffffffff7fffffff, 0xffffffff7fffffff, 0x0, x1, 8, x2)

rol_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0xfffffffeffffffff), rs1:x11(0xfffffffeffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(rol, x21, x11, x27, 0xfffffffeffffffff, 0xfffffffeffffffff, 0x0, x1, 16, x2)

rol_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0xfffffffdffffffff), rs1:x10(0xfffffffdffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(rol, x22, x10, x26, 0xfffffffdffffffff, 0xfffffffdffffffff, 0x0, x1, 24, x2)

rol_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0xfffffffbffffffff), rs1:x9(0xfffffffbffffffff), rs2:x25(0x0000000000000000)
    TEST_RR_OP(rol, x23, x9, x25, 0xfffffffbffffffff, 0xfffffffbffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_49_0)


rol_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0xfffffff7ffffffff), rs1:x8(0xfffffff7ffffffff), rs2:x24(0x0000000000000000)
    TEST_RR_OP(rol, x24, x8, x24, 0xfffffff7ffffffff, 0xfffffff7ffffffff, 0x0, x1, 0, x2)

rol_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0xffffffefffffffff), rs1:x7(0xffffffefffffffff), rs2:x23(0x0000000000000000)
    TEST_RR_OP(rol, x25, x7, x23, 0xffffffefffffffff, 0xffffffefffffffff, 0x0, x1, 8, x2)

rol_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0xffffffdfffffffff), rs1:x6(0xffffffdfffffffff), rs2:x22(0x0000000000000000)
    TEST_RR_OP(rol, x26, x6, x22, 0xffffffdfffffffff, 0xffffffdfffffffff, 0x0, x1, 16, x2)

rol_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0xffffffbfffffffff), rs1:x5(0xffffffbfffffffff), rs2:x21(0x0000000000000000)
    TEST_RR_OP(rol, x27, x5, x21, 0xffffffbfffffffff, 0xffffffbfffffffff, 0x0, x1, 24, x2)

rol_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0xffffff7fffffffff), rs1:x4(0xffffff7fffffffff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(rol, x28, x4, x20, 0xffffff7fffffffff, 0xffffff7fffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x4,signature_50_0)


rol_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0xfffffeffffffffff), rs1:x3(0xfffffeffffffffff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(rol, x29, x3, x19, 0xfffffeffffffffff, 0xfffffeffffffffff, 0x0, x4, 0, x5)

rol_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0xfffffdffffffffff), rs1:x2(0xfffffdffffffffff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(rol, x30, x2, x18, 0xfffffdffffffffff, 0xfffffdffffffffff, 0x0, x4, 8, x5)

rol_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0xfffffbffffffffff), rs1:x1(0xfffffbffffffffff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(rol, x31, x1, x17, 0xfffffbffffffffff, 0xfffffbffffffffff, 0x0, x4, 16, x5)

rol_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0xfffff7ffffffffff), rs1:x31(0xfffff7ffffffffff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(rol, x1, x31, x16, 0xfffff7ffffffffff, 0xfffff7ffffffffff, 0x0, x4, 24, x5)

rol_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0xffffefffffffffff), rs1:x30(0xffffefffffffffff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(rol, x2, x30, x15, 0xffffefffffffffff, 0xffffefffffffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_51_0)


rol_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0xffffdfffffffffff), rs1:x29(0xffffdfffffffffff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(rol, x3, x29, x14, 0xffffdfffffffffff, 0xffffdfffffffffff, 0x0, x1, 0, x2)

rol_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0xffffbfffffffffff), rs1:x28(0xffffbfffffffffff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(rol, x4, x28, x13, 0xffffbfffffffffff, 0xffffbfffffffffff, 0x0, x1, 8, x2)

rol_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0xffff7fffffffffff), rs1:x27(0xffff7fffffffffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(rol, x5, x27, x12, 0xffff7fffffffffff, 0xffff7fffffffffff, 0x0, x1, 16, x2)

rol_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0xfffeffffffffffff), rs1:x26(0xfffeffffffffffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(rol, x6, x26, x11, 0xfffeffffffffffff, 0xfffeffffffffffff, 0x0, x1, 24, x2)

rol_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0xfffdffffffffffff), rs1:x25(0xfffdffffffffffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(rol, x7, x25, x10, 0xfffdffffffffffff, 0xfffdffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_52_0)


rol_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0xfffbffffffffffff), rs1:x24(0xfffbffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(rol, x8, x24, x9, 0xfffbffffffffffff, 0xfffbffffffffffff, 0x0, x1, 0, x2)

rol_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0xfff7ffffffffffff), rs1:x23(0xfff7ffffffffffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(rol, x9, x23, x8, 0xfff7ffffffffffff, 0xfff7ffffffffffff, 0x0, x1, 8, x2)

rol_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0xffefffffffffffff), rs1:x22(0xffefffffffffffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(rol, x10, x22, x7, 0xffefffffffffffff, 0xffefffffffffffff, 0x0, x1, 16, x2)

rol_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0xffdfffffffffffff), rs1:x21(0xffdfffffffffffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(rol, x11, x21, x6, 0xffdfffffffffffff, 0xffdfffffffffffff, 0x0, x1, 24, x2)

rol_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0xffbfffffffffffff), rs1:x20(0xffbfffffffffffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(rol, x12, x20, x5, 0xffbfffffffffffff, 0xffbfffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x5,signature_53_0)


rol_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0xff7fffffffffffff), rs1:x19(0xff7fffffffffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(rol, x13, x19, x4, 0xff7fffffffffffff, 0xff7fffffffffffff, 0x0, x5, 0, x6)

rol_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0xfeffffffffffffff), rs1:x18(0xfeffffffffffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(rol, x14, x18, x3, 0xfeffffffffffffff, 0xfeffffffffffffff, 0x0, x5, 8, x6)

rol_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0xfdffffffffffffff), rs1:x17(0xfdffffffffffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(rol, x15, x17, x2, 0xfdffffffffffffff, 0xfdffffffffffffff, 0x0, x5, 16, x6)

rol_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0xfbffffffffffffff), rs1:x16(0xfbffffffffffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(rol, x16, x16, x1, 0xfbffffffffffffff, 0xfbffffffffffffff, 0x0, x5, 24, x6)

rol_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0xf7ffffffffffffff), rs1:x15(0xf7ffffffffffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(rol, x17, x15, x31, 0xf7ffffffffffffff, 0xf7ffffffffffffff, 0x0, x5, 32, x6)

    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_54_0)


rol_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0xefffffffffffffff), rs1:x14(0xefffffffffffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(rol, x18, x14, x30, 0xefffffffffffffff, 0xefffffffffffffff, 0x0, x1, 0, x2)

rol_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0xdfffffffffffffff), rs1:x13(0xdfffffffffffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(rol, x19, x13, x29, 0xdfffffffffffffff, 0xdfffffffffffffff, 0x0, x1, 8, x2)

rol_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0xbfffffffffffffff), rs1:x12(0xbfffffffffffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(rol, x20, x12, x28, 0xbfffffffffffffff, 0xbfffffffffffffff, 0x0, x1, 16, x2)

rol_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0x7fffffffffffffff), rs1:x11(0x7fffffffffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(rol, x21, x11, x27, 0x7fffffffffffffff, 0x7fffffffffffffff, 0x0, x1, 24, x2)

rol_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0xffffffffffffffff), rs1:x10(0xffffffffffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(rol, x22, x10, x26, 0xffffffffffffffff, 0xffffffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rol)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rol)

	RVTEST_SIGBASE(x1,signature_55_0)


rol_01_inst_270:
    // Test 270:  Test with rs1 == rs2
    // result rd:x23(0x90de611efbf9c220), rs1:x25(0x10fd3dedadea5195), rs2:x25(0xdf7f3844121bcc23)
    TEST_RR_OP(rol, x23, x25, x25, 0x90de611efbf9c220, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x1, 0, x2)

rol_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1), rs2:x24(0xf5adb41aa47d105b)
    TEST_RR_OP(rol, x0, x8, x24, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x1, 8, x2)

rol_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0xc9649f05a8e1a8bb), rs1:x7(0xc9649f05a8e1a8bb), rs2:x0(0x82f6747f707af2c0)
    TEST_RR_OP(rol, x25, x7, x0, 0xc9649f05a8e1a8bb, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x1, 16, x2)

rol_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0x0000000000000000), rs1:x0(0x3541291848c99fcb), rs2:x22(0x73a92fd4e19bfbc3)
    TEST_RR_OP(rol, x26, x0, x22, 0x0000000000000000, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x1, 24, x2)
	
#endif


RVTEST_CODE_END rol_01_code_end
RVTEST_CODE_BEGIN pack_01_init pack_01_code_begin






#ifdef TEST_CASE_1

    
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x6,signature_1_0)


pack_01_inst_0:
    // Test 0:  Test with random values
    // result rd:x1(0x121bcc23adea5195), rs1:x31(0x10fd3dedadea5195), rs2:x16(0xdf7f3844121bcc23)
    TEST_RR_OP(pack, x1, x31, x16, 0x121bcc23adea5195, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x6, 0, x7)

pack_01_inst_1:
    // Test 1:  Test with random values
    // result rd:x2(0xa47d105bd2ffbec1), rs1:x30(0xbd295ce2d2ffbec1), rs2:x15(0xf5adb41aa47d105b)
    TEST_RR_OP(pack, x2, x30, x15, 0xa47d105bd2ffbec1, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x6, 8, x7)

pack_01_inst_2:
    // Test 2:  Test with random values
    // result rd:x3(0x707af2c0a8e1a8bb), rs1:x29(0xc9649f05a8e1a8bb), rs2:x14(0x82f6747f707af2c0)
    TEST_RR_OP(pack, x3, x29, x14, 0x707af2c0a8e1a8bb, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x6, 16, x7)

pack_01_inst_3:
    // Test 3:  Test with random values
    // result rd:x4(0xe19bfbc348c99fcb), rs1:x28(0x3541291848c99fcb), rs2:x13(0x73a92fd4e19bfbc3)
    TEST_RR_OP(pack, x4, x28, x13, 0xe19bfbc348c99fcb, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x6, 24, x7)

pack_01_inst_4:
    // Test 4:  Test with random values
    // result rd:x5(0x528a10af461d524f), rs1:x27(0x10a24740461d524f), rs2:x12(0x546b0e54528a10af)
    TEST_RR_OP(pack, x5, x27, x12, 0x528a10af461d524f, 0x10a24740461d524f, 0x546b0e54528a10af, x6, 32, x7)

    
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_2_0)


pack_01_inst_5:
    // Test 5:  Test with random values
    // result rd:x6(0x461d524f528a10af), rs1:x26(0x546b0e54528a10af), rs2:x11(0x10a24740461d524f)
    TEST_RR_OP(pack, x6, x26, x11, 0x461d524f528a10af, 0x546b0e54528a10af, 0x10a24740461d524f, x1, 0, x2)

pack_01_inst_6:
    // Test 6:  Test with random values
    // result rd:x7(0x48c99fcbe19bfbc3), rs1:x25(0x73a92fd4e19bfbc3), rs2:x10(0x3541291848c99fcb)
    TEST_RR_OP(pack, x7, x25, x10, 0x48c99fcbe19bfbc3, 0x73a92fd4e19bfbc3, 0x3541291848c99fcb, x1, 8, x2)

pack_01_inst_7:
    // Test 7:  Test with random values
    // result rd:x8(0xa8e1a8bb707af2c0), rs1:x24(0x82f6747f707af2c0), rs2:x9(0xc9649f05a8e1a8bb)
    TEST_RR_OP(pack, x8, x24, x9, 0xa8e1a8bb707af2c0, 0x82f6747f707af2c0, 0xc9649f05a8e1a8bb, x1, 16, x2)

pack_01_inst_8:
    // Test 8:  Test with random values
    // result rd:x9(0xd2ffbec1a47d105b), rs1:x23(0xf5adb41aa47d105b), rs2:x8(0xbd295ce2d2ffbec1)
    TEST_RR_OP(pack, x9, x23, x8, 0xd2ffbec1a47d105b, 0xf5adb41aa47d105b, 0xbd295ce2d2ffbec1, x1, 24, x2)

pack_01_inst_9:
    // Test 9:  Test with random values
    // result rd:x10(0xadea5195121bcc23), rs1:x22(0xdf7f3844121bcc23), rs2:x7(0x10fd3dedadea5195)
    TEST_RR_OP(pack, x10, x22, x7, 0xadea5195121bcc23, 0xdf7f3844121bcc23, 0x10fd3dedadea5195, x1, 32, x2)

    
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_3_0)


pack_01_inst_10:
    // Test 10:  Test with marching zeros/ones
    // result rd:x11(0xffffffff00000001), rs1:x21(0x0000000000000001), rs2:x6(0xffffffffffffffff)
    TEST_RR_OP(pack, x11, x21, x6, 0xffffffff00000001, 0x1, 0xffffffffffffffff, x1, 0, x7)

pack_01_inst_11:
    // Test 11:  Test with marching zeros/ones
    // result rd:x12(0xffffffff00000002), rs1:x20(0x0000000000000002), rs2:x5(0x7fffffffffffffff)
    TEST_RR_OP(pack, x12, x20, x5, 0xffffffff00000002, 0x2, 0x7fffffffffffffff, x1, 8, x7)

pack_01_inst_12:
    // Test 12:  Test with marching zeros/ones
    // result rd:x13(0xffffffff00000004), rs1:x19(0x0000000000000004), rs2:x4(0xbfffffffffffffff)
    TEST_RR_OP(pack, x13, x19, x4, 0xffffffff00000004, 0x4, 0xbfffffffffffffff, x1, 16, x7)

pack_01_inst_13:
    // Test 13:  Test with marching zeros/ones
    // result rd:x14(0xffffffff00000008), rs1:x18(0x0000000000000008), rs2:x3(0xdfffffffffffffff)
    TEST_RR_OP(pack, x14, x18, x3, 0xffffffff00000008, 0x8, 0xdfffffffffffffff, x1, 24, x7)

pack_01_inst_14:
    // Test 14:  Test with marching zeros/ones
    // result rd:x15(0xffffffff00000010), rs1:x17(0x0000000000000010), rs2:x2(0xefffffffffffffff)
    TEST_RR_OP(pack, x15, x17, x2, 0xffffffff00000010, 0x10, 0xefffffffffffffff, x1, 32, x7)

    
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x2,signature_4_0)


pack_01_inst_15:
    // Test 15:  Test with marching zeros/ones
    // result rd:x16(0xffffffff00000020), rs1:x16(0x0000000000000020), rs2:x1(0xf7ffffffffffffff)
    TEST_RR_OP(pack, x16, x16, x1, 0xffffffff00000020, 0x20, 0xf7ffffffffffffff, x2, 0, x3)

pack_01_inst_16:
    // Test 16:  Test with marching zeros/ones
    // result rd:x17(0xffffffff00000040), rs1:x15(0x0000000000000040), rs2:x31(0xfbffffffffffffff)
    TEST_RR_OP(pack, x17, x15, x31, 0xffffffff00000040, 0x40, 0xfbffffffffffffff, x2, 8, x3)

pack_01_inst_17:
    // Test 17:  Test with marching zeros/ones
    // result rd:x18(0xffffffff00000080), rs1:x14(0x0000000000000080), rs2:x30(0xfdffffffffffffff)
    TEST_RR_OP(pack, x18, x14, x30, 0xffffffff00000080, 0x80, 0xfdffffffffffffff, x2, 16, x3)

pack_01_inst_18:
    // Test 18:  Test with marching zeros/ones
    // result rd:x19(0xffffffff00000100), rs1:x13(0x0000000000000100), rs2:x29(0xfeffffffffffffff)
    TEST_RR_OP(pack, x19, x13, x29, 0xffffffff00000100, 0x100, 0xfeffffffffffffff, x2, 24, x3)

pack_01_inst_19:
    // Test 19:  Test with marching zeros/ones
    // result rd:x20(0xffffffff00000200), rs1:x12(0x0000000000000200), rs2:x28(0xff7fffffffffffff)
    TEST_RR_OP(pack, x20, x12, x28, 0xffffffff00000200, 0x200, 0xff7fffffffffffff, x2, 32, x3)

    
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_5_0)


pack_01_inst_20:
    // Test 20:  Test with marching zeros/ones
    // result rd:x21(0xffffffff00000400), rs1:x11(0x0000000000000400), rs2:x27(0xffbfffffffffffff)
    TEST_RR_OP(pack, x21, x11, x27, 0xffffffff00000400, 0x400, 0xffbfffffffffffff, x1, 0, x2)

pack_01_inst_21:
    // Test 21:  Test with marching zeros/ones
    // result rd:x22(0xffffffff00000800), rs1:x10(0x0000000000000800), rs2:x26(0xffdfffffffffffff)
    TEST_RR_OP(pack, x22, x10, x26, 0xffffffff00000800, 0x800, 0xffdfffffffffffff, x1, 8, x2)

pack_01_inst_22:
    // Test 22:  Test with marching zeros/ones
    // result rd:x23(0xffffffff00001000), rs1:x9(0x0000000000001000), rs2:x25(0xffefffffffffffff)
    TEST_RR_OP(pack, x23, x9, x25, 0xffffffff00001000, 0x1000, 0xffefffffffffffff, x1, 16, x2)

pack_01_inst_23:
    // Test 23:  Test with marching zeros/ones
    // result rd:x24(0xffffffff00002000), rs1:x8(0x0000000000002000), rs2:x24(0xfff7ffffffffffff)
    TEST_RR_OP(pack, x24, x8, x24, 0xffffffff00002000, 0x2000, 0xfff7ffffffffffff, x1, 24, x2)

pack_01_inst_24:
    // Test 24:  Test with marching zeros/ones
    // result rd:x25(0xffffffff00004000), rs1:x7(0x0000000000004000), rs2:x23(0xfffbffffffffffff)
    TEST_RR_OP(pack, x25, x7, x23, 0xffffffff00004000, 0x4000, 0xfffbffffffffffff, x1, 32, x2)

    
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_6_0)


pack_01_inst_25:
    // Test 25:  Test with marching zeros/ones
    // result rd:x26(0xffffffff00008000), rs1:x6(0x0000000000008000), rs2:x22(0xfffdffffffffffff)
    TEST_RR_OP(pack, x26, x6, x22, 0xffffffff00008000, 0x8000, 0xfffdffffffffffff, x1, 0, x7)

pack_01_inst_26:
    // Test 26:  Test with marching zeros/ones
    // result rd:x27(0xffffffff00010000), rs1:x5(0x0000000000010000), rs2:x21(0xfffeffffffffffff)
    TEST_RR_OP(pack, x27, x5, x21, 0xffffffff00010000, 0x10000, 0xfffeffffffffffff, x1, 8, x7)

pack_01_inst_27:
    // Test 27:  Test with marching zeros/ones
    // result rd:x28(0xffffffff00020000), rs1:x4(0x0000000000020000), rs2:x20(0xffff7fffffffffff)
    TEST_RR_OP(pack, x28, x4, x20, 0xffffffff00020000, 0x20000, 0xffff7fffffffffff, x1, 16, x7)

pack_01_inst_28:
    // Test 28:  Test with marching zeros/ones
    // result rd:x29(0xffffffff00040000), rs1:x3(0x0000000000040000), rs2:x19(0xffffbfffffffffff)
    TEST_RR_OP(pack, x29, x3, x19, 0xffffffff00040000, 0x40000, 0xffffbfffffffffff, x1, 24, x7)

pack_01_inst_29:
    // Test 29:  Test with marching zeros/ones
    // result rd:x30(0xffffffff00080000), rs1:x2(0x0000000000080000), rs2:x18(0xffffdfffffffffff)
    TEST_RR_OP(pack, x30, x2, x18, 0xffffffff00080000, 0x80000, 0xffffdfffffffffff, x1, 32, x7)

    
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x5,signature_7_0)


pack_01_inst_30:
    // Test 30:  Test with marching zeros/ones
    // result rd:x31(0xffffffff00100000), rs1:x1(0x0000000000100000), rs2:x17(0xffffefffffffffff)
    TEST_RR_OP(pack, x31, x1, x17, 0xffffffff00100000, 0x100000, 0xffffefffffffffff, x5, 0, x6)

pack_01_inst_31:
    // Test 31:  Test with marching zeros/ones
    // result rd:x1(0xffffffff00200000), rs1:x31(0x0000000000200000), rs2:x16(0xfffff7ffffffffff)
    TEST_RR_OP(pack, x1, x31, x16, 0xffffffff00200000, 0x200000, 0xfffff7ffffffffff, x5, 8, x6)

pack_01_inst_32:
    // Test 32:  Test with marching zeros/ones
    // result rd:x2(0xffffffff00400000), rs1:x30(0x0000000000400000), rs2:x15(0xfffffbffffffffff)
    TEST_RR_OP(pack, x2, x30, x15, 0xffffffff00400000, 0x400000, 0xfffffbffffffffff, x5, 16, x6)

pack_01_inst_33:
    // Test 33:  Test with marching zeros/ones
    // result rd:x3(0xffffffff00800000), rs1:x29(0x0000000000800000), rs2:x14(0xfffffdffffffffff)
    TEST_RR_OP(pack, x3, x29, x14, 0xffffffff00800000, 0x800000, 0xfffffdffffffffff, x5, 24, x6)

pack_01_inst_34:
    // Test 34:  Test with marching zeros/ones
    // result rd:x4(0xffffffff01000000), rs1:x28(0x0000000001000000), rs2:x13(0xfffffeffffffffff)
    TEST_RR_OP(pack, x4, x28, x13, 0xffffffff01000000, 0x1000000, 0xfffffeffffffffff, x5, 32, x6)

    
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_8_0)


pack_01_inst_35:
    // Test 35:  Test with marching zeros/ones
    // result rd:x5(0xffffffff02000000), rs1:x27(0x0000000002000000), rs2:x12(0xffffff7fffffffff)
    TEST_RR_OP(pack, x5, x27, x12, 0xffffffff02000000, 0x2000000, 0xffffff7fffffffff, x1, 0, x2)

pack_01_inst_36:
    // Test 36:  Test with marching zeros/ones
    // result rd:x6(0xffffffff04000000), rs1:x26(0x0000000004000000), rs2:x11(0xffffffbfffffffff)
    TEST_RR_OP(pack, x6, x26, x11, 0xffffffff04000000, 0x4000000, 0xffffffbfffffffff, x1, 8, x2)

pack_01_inst_37:
    // Test 37:  Test with marching zeros/ones
    // result rd:x7(0xffffffff08000000), rs1:x25(0x0000000008000000), rs2:x10(0xffffffdfffffffff)
    TEST_RR_OP(pack, x7, x25, x10, 0xffffffff08000000, 0x8000000, 0xffffffdfffffffff, x1, 16, x2)

pack_01_inst_38:
    // Test 38:  Test with marching zeros/ones
    // result rd:x8(0xffffffff10000000), rs1:x24(0x0000000010000000), rs2:x9(0xffffffefffffffff)
    TEST_RR_OP(pack, x8, x24, x9, 0xffffffff10000000, 0x10000000, 0xffffffefffffffff, x1, 24, x2)

pack_01_inst_39:
    // Test 39:  Test with marching zeros/ones
    // result rd:x9(0xffffffff20000000), rs1:x23(0x0000000020000000), rs2:x8(0xfffffff7ffffffff)
    TEST_RR_OP(pack, x9, x23, x8, 0xffffffff20000000, 0x20000000, 0xfffffff7ffffffff, x1, 32, x2)

    
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_9_0)


pack_01_inst_40:
    // Test 40:  Test with marching zeros/ones
    // result rd:x10(0xffffffff40000000), rs1:x22(0x0000000040000000), rs2:x7(0xfffffffbffffffff)
    TEST_RR_OP(pack, x10, x22, x7, 0xffffffff40000000, 0x40000000, 0xfffffffbffffffff, x1, 0, x2)

pack_01_inst_41:
    // Test 41:  Test with marching zeros/ones
    // result rd:x11(0xffffffff80000000), rs1:x21(0x0000000080000000), rs2:x6(0xfffffffdffffffff)
    TEST_RR_OP(pack, x11, x21, x6, 0xffffffff80000000, 0x80000000, 0xfffffffdffffffff, x1, 8, x2)

pack_01_inst_42:
    // Test 42:  Test with marching zeros/ones
    // result rd:x12(0xffffffff00000000), rs1:x20(0x0000000100000000), rs2:x5(0xfffffffeffffffff)
    TEST_RR_OP(pack, x12, x20, x5, 0xffffffff00000000, 0x100000000, 0xfffffffeffffffff, x1, 16, x2)

pack_01_inst_43:
    // Test 43:  Test with marching zeros/ones
    // result rd:x13(0x7fffffff00000000), rs1:x19(0x0000000200000000), rs2:x4(0xffffffff7fffffff)
    TEST_RR_OP(pack, x13, x19, x4, 0x7fffffff00000000, 0x200000000, 0xffffffff7fffffff, x1, 24, x2)

pack_01_inst_44:
    // Test 44:  Test with marching zeros/ones
    // result rd:x14(0xbfffffff00000000), rs1:x18(0x0000000400000000), rs2:x3(0xffffffffbfffffff)
    TEST_RR_OP(pack, x14, x18, x3, 0xbfffffff00000000, 0x400000000, 0xffffffffbfffffff, x1, 32, x2)

    
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x3,signature_10_0)


pack_01_inst_45:
    // Test 45:  Test with marching zeros/ones
    // result rd:x15(0xdfffffff00000000), rs1:x17(0x0000000800000000), rs2:x2(0xffffffffdfffffff)
    TEST_RR_OP(pack, x15, x17, x2, 0xdfffffff00000000, 0x800000000, 0xffffffffdfffffff, x3, 0, x4)

pack_01_inst_46:
    // Test 46:  Test with marching zeros/ones
    // result rd:x16(0xefffffff00000000), rs1:x16(0x0000001000000000), rs2:x1(0xffffffffefffffff)
    TEST_RR_OP(pack, x16, x16, x1, 0xefffffff00000000, 0x1000000000, 0xffffffffefffffff, x3, 8, x4)

pack_01_inst_47:
    // Test 47:  Test with marching zeros/ones
    // result rd:x17(0xf7ffffff00000000), rs1:x15(0x0000002000000000), rs2:x31(0xfffffffff7ffffff)
    TEST_RR_OP(pack, x17, x15, x31, 0xf7ffffff00000000, 0x2000000000, 0xfffffffff7ffffff, x3, 16, x4)

pack_01_inst_48:
    // Test 48:  Test with marching zeros/ones
    // result rd:x18(0xfbffffff00000000), rs1:x14(0x0000004000000000), rs2:x30(0xfffffffffbffffff)
    TEST_RR_OP(pack, x18, x14, x30, 0xfbffffff00000000, 0x4000000000, 0xfffffffffbffffff, x3, 24, x4)

pack_01_inst_49:
    // Test 49:  Test with marching zeros/ones
    // result rd:x19(0xfdffffff00000000), rs1:x13(0x0000008000000000), rs2:x29(0xfffffffffdffffff)
    TEST_RR_OP(pack, x19, x13, x29, 0xfdffffff00000000, 0x8000000000, 0xfffffffffdffffff, x3, 32, x4)

    
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_11_0)


pack_01_inst_50:
    // Test 50:  Test with marching zeros/ones
    // result rd:x20(0xfeffffff00000000), rs1:x12(0x0000010000000000), rs2:x28(0xfffffffffeffffff)
    TEST_RR_OP(pack, x20, x12, x28, 0xfeffffff00000000, 0x10000000000, 0xfffffffffeffffff, x1, 0, x2)

pack_01_inst_51:
    // Test 51:  Test with marching zeros/ones
    // result rd:x21(0xff7fffff00000000), rs1:x11(0x0000020000000000), rs2:x27(0xffffffffff7fffff)
    TEST_RR_OP(pack, x21, x11, x27, 0xff7fffff00000000, 0x20000000000, 0xffffffffff7fffff, x1, 8, x2)

pack_01_inst_52:
    // Test 52:  Test with marching zeros/ones
    // result rd:x22(0xffbfffff00000000), rs1:x10(0x0000040000000000), rs2:x26(0xffffffffffbfffff)
    TEST_RR_OP(pack, x22, x10, x26, 0xffbfffff00000000, 0x40000000000, 0xffffffffffbfffff, x1, 16, x2)

pack_01_inst_53:
    // Test 53:  Test with marching zeros/ones
    // result rd:x23(0xffdfffff00000000), rs1:x9(0x0000080000000000), rs2:x25(0xffffffffffdfffff)
    TEST_RR_OP(pack, x23, x9, x25, 0xffdfffff00000000, 0x80000000000, 0xffffffffffdfffff, x1, 24, x2)

pack_01_inst_54:
    // Test 54:  Test with marching zeros/ones
    // result rd:x24(0xffefffff00000000), rs1:x8(0x0000100000000000), rs2:x24(0xffffffffffefffff)
    TEST_RR_OP(pack, x24, x8, x24, 0xffefffff00000000, 0x100000000000, 0xffffffffffefffff, x1, 32, x2)

    
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_12_0)


pack_01_inst_55:
    // Test 55:  Test with marching zeros/ones
    // result rd:x25(0xfff7ffff00000000), rs1:x7(0x0000200000000000), rs2:x23(0xfffffffffff7ffff)
    TEST_RR_OP(pack, x25, x7, x23, 0xfff7ffff00000000, 0x200000000000, 0xfffffffffff7ffff, x1, 0, x2)

pack_01_inst_56:
    // Test 56:  Test with marching zeros/ones
    // result rd:x26(0xfffbffff00000000), rs1:x6(0x0000400000000000), rs2:x22(0xfffffffffffbffff)
    TEST_RR_OP(pack, x26, x6, x22, 0xfffbffff00000000, 0x400000000000, 0xfffffffffffbffff, x1, 8, x2)

pack_01_inst_57:
    // Test 57:  Test with marching zeros/ones
    // result rd:x27(0xfffdffff00000000), rs1:x5(0x0000800000000000), rs2:x21(0xfffffffffffdffff)
    TEST_RR_OP(pack, x27, x5, x21, 0xfffdffff00000000, 0x800000000000, 0xfffffffffffdffff, x1, 16, x2)

pack_01_inst_58:
    // Test 58:  Test with marching zeros/ones
    // result rd:x28(0xfffeffff00000000), rs1:x4(0x0001000000000000), rs2:x20(0xfffffffffffeffff)
    TEST_RR_OP(pack, x28, x4, x20, 0xfffeffff00000000, 0x1000000000000, 0xfffffffffffeffff, x1, 24, x2)

pack_01_inst_59:
    // Test 59:  Test with marching zeros/ones
    // result rd:x29(0xffff7fff00000000), rs1:x3(0x0002000000000000), rs2:x19(0xffffffffffff7fff)
    TEST_RR_OP(pack, x29, x3, x19, 0xffff7fff00000000, 0x2000000000000, 0xffffffffffff7fff, x1, 32, x2)

    
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x4,signature_13_0)


pack_01_inst_60:
    // Test 60:  Test with marching zeros/ones
    // result rd:x30(0xffffbfff00000000), rs1:x2(0x0004000000000000), rs2:x18(0xffffffffffffbfff)
    TEST_RR_OP(pack, x30, x2, x18, 0xffffbfff00000000, 0x4000000000000, 0xffffffffffffbfff, x4, 0, x5)

pack_01_inst_61:
    // Test 61:  Test with marching zeros/ones
    // result rd:x31(0xffffdfff00000000), rs1:x1(0x0008000000000000), rs2:x17(0xffffffffffffdfff)
    TEST_RR_OP(pack, x31, x1, x17, 0xffffdfff00000000, 0x8000000000000, 0xffffffffffffdfff, x4, 8, x5)

pack_01_inst_62:
    // Test 62:  Test with marching zeros/ones
    // result rd:x1(0xffffefff00000000), rs1:x31(0x0010000000000000), rs2:x16(0xffffffffffffefff)
    TEST_RR_OP(pack, x1, x31, x16, 0xffffefff00000000, 0x10000000000000, 0xffffffffffffefff, x4, 16, x5)

pack_01_inst_63:
    // Test 63:  Test with marching zeros/ones
    // result rd:x2(0xfffff7ff00000000), rs1:x30(0x0020000000000000), rs2:x15(0xfffffffffffff7ff)
    TEST_RR_OP(pack, x2, x30, x15, 0xfffff7ff00000000, 0x20000000000000, 0xfffffffffffff7ff, x4, 24, x5)

pack_01_inst_64:
    // Test 64:  Test with marching zeros/ones
    // result rd:x3(0xfffffbff00000000), rs1:x29(0x0040000000000000), rs2:x14(0xfffffffffffffbff)
    TEST_RR_OP(pack, x3, x29, x14, 0xfffffbff00000000, 0x40000000000000, 0xfffffffffffffbff, x4, 32, x5)

    
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_14_0)


pack_01_inst_65:
    // Test 65:  Test with marching zeros/ones
    // result rd:x4(0xfffffdff00000000), rs1:x28(0x0080000000000000), rs2:x13(0xfffffffffffffdff)
    TEST_RR_OP(pack, x4, x28, x13, 0xfffffdff00000000, 0x80000000000000, 0xfffffffffffffdff, x1, 0, x2)

pack_01_inst_66:
    // Test 66:  Test with marching zeros/ones
    // result rd:x5(0xfffffeff00000000), rs1:x27(0x0100000000000000), rs2:x12(0xfffffffffffffeff)
    TEST_RR_OP(pack, x5, x27, x12, 0xfffffeff00000000, 0x100000000000000, 0xfffffffffffffeff, x1, 8, x2)

pack_01_inst_67:
    // Test 67:  Test with marching zeros/ones
    // result rd:x6(0xffffff7f00000000), rs1:x26(0x0200000000000000), rs2:x11(0xffffffffffffff7f)
    TEST_RR_OP(pack, x6, x26, x11, 0xffffff7f00000000, 0x200000000000000, 0xffffffffffffff7f, x1, 16, x2)

pack_01_inst_68:
    // Test 68:  Test with marching zeros/ones
    // result rd:x7(0xffffffbf00000000), rs1:x25(0x0400000000000000), rs2:x10(0xffffffffffffffbf)
    TEST_RR_OP(pack, x7, x25, x10, 0xffffffbf00000000, 0x400000000000000, 0xffffffffffffffbf, x1, 24, x2)

pack_01_inst_69:
    // Test 69:  Test with marching zeros/ones
    // result rd:x8(0xffffffdf00000000), rs1:x24(0x0800000000000000), rs2:x9(0xffffffffffffffdf)
    TEST_RR_OP(pack, x8, x24, x9, 0xffffffdf00000000, 0x800000000000000, 0xffffffffffffffdf, x1, 32, x2)

    
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_15_0)


pack_01_inst_70:
    // Test 70:  Test with marching zeros/ones
    // result rd:x9(0xffffffef00000000), rs1:x23(0x1000000000000000), rs2:x8(0xffffffffffffffef)
    TEST_RR_OP(pack, x9, x23, x8, 0xffffffef00000000, 0x1000000000000000, 0xffffffffffffffef, x1, 0, x2)

pack_01_inst_71:
    // Test 71:  Test with marching zeros/ones
    // result rd:x10(0xfffffff700000000), rs1:x22(0x2000000000000000), rs2:x7(0xfffffffffffffff7)
    TEST_RR_OP(pack, x10, x22, x7, 0xfffffff700000000, 0x2000000000000000, 0xfffffffffffffff7, x1, 8, x2)

pack_01_inst_72:
    // Test 72:  Test with marching zeros/ones
    // result rd:x11(0xfffffffb00000000), rs1:x21(0x4000000000000000), rs2:x6(0xfffffffffffffffb)
    TEST_RR_OP(pack, x11, x21, x6, 0xfffffffb00000000, 0x4000000000000000, 0xfffffffffffffffb, x1, 16, x2)

pack_01_inst_73:
    // Test 73:  Test with marching zeros/ones
    // result rd:x12(0xfffffffd00000000), rs1:x20(0x8000000000000000), rs2:x5(0xfffffffffffffffd)
    TEST_RR_OP(pack, x12, x20, x5, 0xfffffffd00000000, 0x8000000000000000, 0xfffffffffffffffd, x1, 24, x2)

pack_01_inst_74:
    // Test 74:  Test with marching zeros/ones
    // result rd:x13(0xfffffffe00000000), rs1:x19(0x0000000000000000), rs2:x4(0xfffffffffffffffe)
    TEST_RR_OP(pack, x13, x19, x4, 0xfffffffe00000000, 0x0, 0xfffffffffffffffe, x1, 32, x2)

    
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x4,signature_16_0)


pack_01_inst_75:
    // Test 75:  Test with marching zeros/ones
    // result rd:x14(0x00000000fffffffe), rs1:x18(0xfffffffffffffffe), rs2:x3(0x0000000000000000)
    TEST_RR_OP(pack, x14, x18, x3, 0x00000000fffffffe, 0xfffffffffffffffe, 0x0, x4, 0, x5)

pack_01_inst_76:
    // Test 76:  Test with marching zeros/ones
    // result rd:x15(0x00000000fffffffd), rs1:x17(0xfffffffffffffffd), rs2:x2(0x8000000000000000)
    TEST_RR_OP(pack, x15, x17, x2, 0x00000000fffffffd, 0xfffffffffffffffd, 0x8000000000000000, x4, 8, x5)

pack_01_inst_77:
    // Test 77:  Test with marching zeros/ones
    // result rd:x16(0x00000000fffffffb), rs1:x16(0xfffffffffffffffb), rs2:x1(0x4000000000000000)
    TEST_RR_OP(pack, x16, x16, x1, 0x00000000fffffffb, 0xfffffffffffffffb, 0x4000000000000000, x4, 16, x5)

pack_01_inst_78:
    // Test 78:  Test with marching zeros/ones
    // result rd:x17(0x00000000fffffff7), rs1:x15(0xfffffffffffffff7), rs2:x31(0x2000000000000000)
    TEST_RR_OP(pack, x17, x15, x31, 0x00000000fffffff7, 0xfffffffffffffff7, 0x2000000000000000, x4, 24, x5)

pack_01_inst_79:
    // Test 79:  Test with marching zeros/ones
    // result rd:x18(0x00000000ffffffef), rs1:x14(0xffffffffffffffef), rs2:x30(0x1000000000000000)
    TEST_RR_OP(pack, x18, x14, x30, 0x00000000ffffffef, 0xffffffffffffffef, 0x1000000000000000, x4, 32, x5)

    
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_17_0)


pack_01_inst_80:
    // Test 80:  Test with marching zeros/ones
    // result rd:x19(0x00000000ffffffdf), rs1:x13(0xffffffffffffffdf), rs2:x29(0x0800000000000000)
    TEST_RR_OP(pack, x19, x13, x29, 0x00000000ffffffdf, 0xffffffffffffffdf, 0x800000000000000, x1, 0, x2)

pack_01_inst_81:
    // Test 81:  Test with marching zeros/ones
    // result rd:x20(0x00000000ffffffbf), rs1:x12(0xffffffffffffffbf), rs2:x28(0x0400000000000000)
    TEST_RR_OP(pack, x20, x12, x28, 0x00000000ffffffbf, 0xffffffffffffffbf, 0x400000000000000, x1, 8, x2)

pack_01_inst_82:
    // Test 82:  Test with marching zeros/ones
    // result rd:x21(0x00000000ffffff7f), rs1:x11(0xffffffffffffff7f), rs2:x27(0x0200000000000000)
    TEST_RR_OP(pack, x21, x11, x27, 0x00000000ffffff7f, 0xffffffffffffff7f, 0x200000000000000, x1, 16, x2)

pack_01_inst_83:
    // Test 83:  Test with marching zeros/ones
    // result rd:x22(0x00000000fffffeff), rs1:x10(0xfffffffffffffeff), rs2:x26(0x0100000000000000)
    TEST_RR_OP(pack, x22, x10, x26, 0x00000000fffffeff, 0xfffffffffffffeff, 0x100000000000000, x1, 24, x2)

pack_01_inst_84:
    // Test 84:  Test with marching zeros/ones
    // result rd:x23(0x00000000fffffdff), rs1:x9(0xfffffffffffffdff), rs2:x25(0x0080000000000000)
    TEST_RR_OP(pack, x23, x9, x25, 0x00000000fffffdff, 0xfffffffffffffdff, 0x80000000000000, x1, 32, x2)

    
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_18_0)


pack_01_inst_85:
    // Test 85:  Test with marching zeros/ones
    // result rd:x24(0x00000000fffffbff), rs1:x8(0xfffffffffffffbff), rs2:x24(0x0040000000000000)
    TEST_RR_OP(pack, x24, x8, x24, 0x00000000fffffbff, 0xfffffffffffffbff, 0x40000000000000, x1, 0, x2)

pack_01_inst_86:
    // Test 86:  Test with marching zeros/ones
    // result rd:x25(0x00000000fffff7ff), rs1:x7(0xfffffffffffff7ff), rs2:x23(0x0020000000000000)
    TEST_RR_OP(pack, x25, x7, x23, 0x00000000fffff7ff, 0xfffffffffffff7ff, 0x20000000000000, x1, 8, x2)

pack_01_inst_87:
    // Test 87:  Test with marching zeros/ones
    // result rd:x26(0x00000000ffffefff), rs1:x6(0xffffffffffffefff), rs2:x22(0x0010000000000000)
    TEST_RR_OP(pack, x26, x6, x22, 0x00000000ffffefff, 0xffffffffffffefff, 0x10000000000000, x1, 16, x2)

pack_01_inst_88:
    // Test 88:  Test with marching zeros/ones
    // result rd:x27(0x00000000ffffdfff), rs1:x5(0xffffffffffffdfff), rs2:x21(0x0008000000000000)
    TEST_RR_OP(pack, x27, x5, x21, 0x00000000ffffdfff, 0xffffffffffffdfff, 0x8000000000000, x1, 24, x2)

pack_01_inst_89:
    // Test 89:  Test with marching zeros/ones
    // result rd:x28(0x00000000ffffbfff), rs1:x4(0xffffffffffffbfff), rs2:x20(0x0004000000000000)
    TEST_RR_OP(pack, x28, x4, x20, 0x00000000ffffbfff, 0xffffffffffffbfff, 0x4000000000000, x1, 32, x2)

    
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x4,signature_19_0)


pack_01_inst_90:
    // Test 90:  Test with marching zeros/ones
    // result rd:x29(0x00000000ffff7fff), rs1:x3(0xffffffffffff7fff), rs2:x19(0x0002000000000000)
    TEST_RR_OP(pack, x29, x3, x19, 0x00000000ffff7fff, 0xffffffffffff7fff, 0x2000000000000, x4, 0, x5)

pack_01_inst_91:
    // Test 91:  Test with marching zeros/ones
    // result rd:x30(0x00000000fffeffff), rs1:x2(0xfffffffffffeffff), rs2:x18(0x0001000000000000)
    TEST_RR_OP(pack, x30, x2, x18, 0x00000000fffeffff, 0xfffffffffffeffff, 0x1000000000000, x4, 8, x5)

pack_01_inst_92:
    // Test 92:  Test with marching zeros/ones
    // result rd:x31(0x00000000fffdffff), rs1:x1(0xfffffffffffdffff), rs2:x17(0x0000800000000000)
    TEST_RR_OP(pack, x31, x1, x17, 0x00000000fffdffff, 0xfffffffffffdffff, 0x800000000000, x4, 16, x5)

pack_01_inst_93:
    // Test 93:  Test with marching zeros/ones
    // result rd:x1(0x00000000fffbffff), rs1:x31(0xfffffffffffbffff), rs2:x16(0x0000400000000000)
    TEST_RR_OP(pack, x1, x31, x16, 0x00000000fffbffff, 0xfffffffffffbffff, 0x400000000000, x4, 24, x5)

pack_01_inst_94:
    // Test 94:  Test with marching zeros/ones
    // result rd:x2(0x00000000fff7ffff), rs1:x30(0xfffffffffff7ffff), rs2:x15(0x0000200000000000)
    TEST_RR_OP(pack, x2, x30, x15, 0x00000000fff7ffff, 0xfffffffffff7ffff, 0x200000000000, x4, 32, x5)

    
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_20_0)


pack_01_inst_95:
    // Test 95:  Test with marching zeros/ones
    // result rd:x3(0x00000000ffefffff), rs1:x29(0xffffffffffefffff), rs2:x14(0x0000100000000000)
    TEST_RR_OP(pack, x3, x29, x14, 0x00000000ffefffff, 0xffffffffffefffff, 0x100000000000, x1, 0, x2)

pack_01_inst_96:
    // Test 96:  Test with marching zeros/ones
    // result rd:x4(0x00000000ffdfffff), rs1:x28(0xffffffffffdfffff), rs2:x13(0x0000080000000000)
    TEST_RR_OP(pack, x4, x28, x13, 0x00000000ffdfffff, 0xffffffffffdfffff, 0x80000000000, x1, 8, x2)

pack_01_inst_97:
    // Test 97:  Test with marching zeros/ones
    // result rd:x5(0x00000000ffbfffff), rs1:x27(0xffffffffffbfffff), rs2:x12(0x0000040000000000)
    TEST_RR_OP(pack, x5, x27, x12, 0x00000000ffbfffff, 0xffffffffffbfffff, 0x40000000000, x1, 16, x2)

pack_01_inst_98:
    // Test 98:  Test with marching zeros/ones
    // result rd:x6(0x00000000ff7fffff), rs1:x26(0xffffffffff7fffff), rs2:x11(0x0000020000000000)
    TEST_RR_OP(pack, x6, x26, x11, 0x00000000ff7fffff, 0xffffffffff7fffff, 0x20000000000, x1, 24, x2)

pack_01_inst_99:
    // Test 99:  Test with marching zeros/ones
    // result rd:x7(0x00000000feffffff), rs1:x25(0xfffffffffeffffff), rs2:x10(0x0000010000000000)
    TEST_RR_OP(pack, x7, x25, x10, 0x00000000feffffff, 0xfffffffffeffffff, 0x10000000000, x1, 32, x2)

    
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_21_0)


pack_01_inst_100:
    // Test 100:  Test with marching zeros/ones
    // result rd:x8(0x00000000fdffffff), rs1:x24(0xfffffffffdffffff), rs2:x9(0x0000008000000000)
    TEST_RR_OP(pack, x8, x24, x9, 0x00000000fdffffff, 0xfffffffffdffffff, 0x8000000000, x1, 0, x2)

pack_01_inst_101:
    // Test 101:  Test with marching zeros/ones
    // result rd:x9(0x00000000fbffffff), rs1:x23(0xfffffffffbffffff), rs2:x8(0x0000004000000000)
    TEST_RR_OP(pack, x9, x23, x8, 0x00000000fbffffff, 0xfffffffffbffffff, 0x4000000000, x1, 8, x2)

pack_01_inst_102:
    // Test 102:  Test with marching zeros/ones
    // result rd:x10(0x00000000f7ffffff), rs1:x22(0xfffffffff7ffffff), rs2:x7(0x0000002000000000)
    TEST_RR_OP(pack, x10, x22, x7, 0x00000000f7ffffff, 0xfffffffff7ffffff, 0x2000000000, x1, 16, x2)

pack_01_inst_103:
    // Test 103:  Test with marching zeros/ones
    // result rd:x11(0x00000000efffffff), rs1:x21(0xffffffffefffffff), rs2:x6(0x0000001000000000)
    TEST_RR_OP(pack, x11, x21, x6, 0x00000000efffffff, 0xffffffffefffffff, 0x1000000000, x1, 24, x2)

pack_01_inst_104:
    // Test 104:  Test with marching zeros/ones
    // result rd:x12(0x00000000dfffffff), rs1:x20(0xffffffffdfffffff), rs2:x5(0x0000000800000000)
    TEST_RR_OP(pack, x12, x20, x5, 0x00000000dfffffff, 0xffffffffdfffffff, 0x800000000, x1, 32, x2)

    
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x5,signature_22_0)


pack_01_inst_105:
    // Test 105:  Test with marching zeros/ones
    // result rd:x13(0x00000000bfffffff), rs1:x19(0xffffffffbfffffff), rs2:x4(0x0000000400000000)
    TEST_RR_OP(pack, x13, x19, x4, 0x00000000bfffffff, 0xffffffffbfffffff, 0x400000000, x5, 0, x6)

pack_01_inst_106:
    // Test 106:  Test with marching zeros/ones
    // result rd:x14(0x000000007fffffff), rs1:x18(0xffffffff7fffffff), rs2:x3(0x0000000200000000)
    TEST_RR_OP(pack, x14, x18, x3, 0x000000007fffffff, 0xffffffff7fffffff, 0x200000000, x5, 8, x6)

pack_01_inst_107:
    // Test 107:  Test with marching zeros/ones
    // result rd:x15(0x00000000ffffffff), rs1:x17(0xfffffffeffffffff), rs2:x2(0x0000000100000000)
    TEST_RR_OP(pack, x15, x17, x2, 0x00000000ffffffff, 0xfffffffeffffffff, 0x100000000, x5, 16, x6)

pack_01_inst_108:
    // Test 108:  Test with marching zeros/ones
    // result rd:x16(0x80000000ffffffff), rs1:x16(0xfffffffdffffffff), rs2:x1(0x0000000080000000)
    TEST_RR_OP(pack, x16, x16, x1, 0x80000000ffffffff, 0xfffffffdffffffff, 0x80000000, x5, 24, x6)

pack_01_inst_109:
    // Test 109:  Test with marching zeros/ones
    // result rd:x17(0x40000000ffffffff), rs1:x15(0xfffffffbffffffff), rs2:x31(0x0000000040000000)
    TEST_RR_OP(pack, x17, x15, x31, 0x40000000ffffffff, 0xfffffffbffffffff, 0x40000000, x5, 32, x6)

    
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_23_0)


pack_01_inst_110:
    // Test 110:  Test with marching zeros/ones
    // result rd:x18(0x20000000ffffffff), rs1:x14(0xfffffff7ffffffff), rs2:x30(0x0000000020000000)
    TEST_RR_OP(pack, x18, x14, x30, 0x20000000ffffffff, 0xfffffff7ffffffff, 0x20000000, x1, 0, x2)

pack_01_inst_111:
    // Test 111:  Test with marching zeros/ones
    // result rd:x19(0x10000000ffffffff), rs1:x13(0xffffffefffffffff), rs2:x29(0x0000000010000000)
    TEST_RR_OP(pack, x19, x13, x29, 0x10000000ffffffff, 0xffffffefffffffff, 0x10000000, x1, 8, x2)

pack_01_inst_112:
    // Test 112:  Test with marching zeros/ones
    // result rd:x20(0x08000000ffffffff), rs1:x12(0xffffffdfffffffff), rs2:x28(0x0000000008000000)
    TEST_RR_OP(pack, x20, x12, x28, 0x08000000ffffffff, 0xffffffdfffffffff, 0x8000000, x1, 16, x2)

pack_01_inst_113:
    // Test 113:  Test with marching zeros/ones
    // result rd:x21(0x04000000ffffffff), rs1:x11(0xffffffbfffffffff), rs2:x27(0x0000000004000000)
    TEST_RR_OP(pack, x21, x11, x27, 0x04000000ffffffff, 0xffffffbfffffffff, 0x4000000, x1, 24, x2)

pack_01_inst_114:
    // Test 114:  Test with marching zeros/ones
    // result rd:x22(0x02000000ffffffff), rs1:x10(0xffffff7fffffffff), rs2:x26(0x0000000002000000)
    TEST_RR_OP(pack, x22, x10, x26, 0x02000000ffffffff, 0xffffff7fffffffff, 0x2000000, x1, 32, x2)

    
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_24_0)


pack_01_inst_115:
    // Test 115:  Test with marching zeros/ones
    // result rd:x23(0x01000000ffffffff), rs1:x9(0xfffffeffffffffff), rs2:x25(0x0000000001000000)
    TEST_RR_OP(pack, x23, x9, x25, 0x01000000ffffffff, 0xfffffeffffffffff, 0x1000000, x1, 0, x2)

pack_01_inst_116:
    // Test 116:  Test with marching zeros/ones
    // result rd:x24(0x00800000ffffffff), rs1:x8(0xfffffdffffffffff), rs2:x24(0x0000000000800000)
    TEST_RR_OP(pack, x24, x8, x24, 0x00800000ffffffff, 0xfffffdffffffffff, 0x800000, x1, 8, x2)

pack_01_inst_117:
    // Test 117:  Test with marching zeros/ones
    // result rd:x25(0x00400000ffffffff), rs1:x7(0xfffffbffffffffff), rs2:x23(0x0000000000400000)
    TEST_RR_OP(pack, x25, x7, x23, 0x00400000ffffffff, 0xfffffbffffffffff, 0x400000, x1, 16, x2)

pack_01_inst_118:
    // Test 118:  Test with marching zeros/ones
    // result rd:x26(0x00200000ffffffff), rs1:x6(0xfffff7ffffffffff), rs2:x22(0x0000000000200000)
    TEST_RR_OP(pack, x26, x6, x22, 0x00200000ffffffff, 0xfffff7ffffffffff, 0x200000, x1, 24, x2)

pack_01_inst_119:
    // Test 119:  Test with marching zeros/ones
    // result rd:x27(0x00100000ffffffff), rs1:x5(0xffffefffffffffff), rs2:x21(0x0000000000100000)
    TEST_RR_OP(pack, x27, x5, x21, 0x00100000ffffffff, 0xffffefffffffffff, 0x100000, x1, 32, x2)

    
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x5,signature_25_0)


pack_01_inst_120:
    // Test 120:  Test with marching zeros/ones
    // result rd:x28(0x00080000ffffffff), rs1:x4(0xffffdfffffffffff), rs2:x20(0x0000000000080000)
    TEST_RR_OP(pack, x28, x4, x20, 0x00080000ffffffff, 0xffffdfffffffffff, 0x80000, x5, 0, x6)

pack_01_inst_121:
    // Test 121:  Test with marching zeros/ones
    // result rd:x29(0x00040000ffffffff), rs1:x3(0xffffbfffffffffff), rs2:x19(0x0000000000040000)
    TEST_RR_OP(pack, x29, x3, x19, 0x00040000ffffffff, 0xffffbfffffffffff, 0x40000, x5, 8, x6)

pack_01_inst_122:
    // Test 122:  Test with marching zeros/ones
    // result rd:x30(0x00020000ffffffff), rs1:x2(0xffff7fffffffffff), rs2:x18(0x0000000000020000)
    TEST_RR_OP(pack, x30, x2, x18, 0x00020000ffffffff, 0xffff7fffffffffff, 0x20000, x5, 16, x6)

pack_01_inst_123:
    // Test 123:  Test with marching zeros/ones
    // result rd:x31(0x00010000ffffffff), rs1:x1(0xfffeffffffffffff), rs2:x17(0x0000000000010000)
    TEST_RR_OP(pack, x31, x1, x17, 0x00010000ffffffff, 0xfffeffffffffffff, 0x10000, x5, 24, x6)

pack_01_inst_124:
    // Test 124:  Test with marching zeros/ones
    // result rd:x1(0x00008000ffffffff), rs1:x31(0xfffdffffffffffff), rs2:x16(0x0000000000008000)
    TEST_RR_OP(pack, x1, x31, x16, 0x00008000ffffffff, 0xfffdffffffffffff, 0x8000, x5, 32, x6)

    
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_26_0)


pack_01_inst_125:
    // Test 125:  Test with marching zeros/ones
    // result rd:x2(0x00004000ffffffff), rs1:x30(0xfffbffffffffffff), rs2:x15(0x0000000000004000)
    TEST_RR_OP(pack, x2, x30, x15, 0x00004000ffffffff, 0xfffbffffffffffff, 0x4000, x1, 0, x7)

pack_01_inst_126:
    // Test 126:  Test with marching zeros/ones
    // result rd:x3(0x00002000ffffffff), rs1:x29(0xfff7ffffffffffff), rs2:x14(0x0000000000002000)
    TEST_RR_OP(pack, x3, x29, x14, 0x00002000ffffffff, 0xfff7ffffffffffff, 0x2000, x1, 8, x7)

pack_01_inst_127:
    // Test 127:  Test with marching zeros/ones
    // result rd:x4(0x00001000ffffffff), rs1:x28(0xffefffffffffffff), rs2:x13(0x0000000000001000)
    TEST_RR_OP(pack, x4, x28, x13, 0x00001000ffffffff, 0xffefffffffffffff, 0x1000, x1, 16, x7)

pack_01_inst_128:
    // Test 128:  Test with marching zeros/ones
    // result rd:x5(0x00000800ffffffff), rs1:x27(0xffdfffffffffffff), rs2:x12(0x0000000000000800)
    TEST_RR_OP(pack, x5, x27, x12, 0x00000800ffffffff, 0xffdfffffffffffff, 0x800, x1, 24, x7)

pack_01_inst_129:
    // Test 129:  Test with marching zeros/ones
    // result rd:x6(0x00000400ffffffff), rs1:x26(0xffbfffffffffffff), rs2:x11(0x0000000000000400)
    TEST_RR_OP(pack, x6, x26, x11, 0x00000400ffffffff, 0xffbfffffffffffff, 0x400, x1, 32, x7)

    
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_27_0)


pack_01_inst_130:
    // Test 130:  Test with marching zeros/ones
    // result rd:x7(0x00000200ffffffff), rs1:x25(0xff7fffffffffffff), rs2:x10(0x0000000000000200)
    TEST_RR_OP(pack, x7, x25, x10, 0x00000200ffffffff, 0xff7fffffffffffff, 0x200, x1, 0, x2)

pack_01_inst_131:
    // Test 131:  Test with marching zeros/ones
    // result rd:x8(0x00000100ffffffff), rs1:x24(0xfeffffffffffffff), rs2:x9(0x0000000000000100)
    TEST_RR_OP(pack, x8, x24, x9, 0x00000100ffffffff, 0xfeffffffffffffff, 0x100, x1, 8, x2)

pack_01_inst_132:
    // Test 132:  Test with marching zeros/ones
    // result rd:x9(0x00000080ffffffff), rs1:x23(0xfdffffffffffffff), rs2:x8(0x0000000000000080)
    TEST_RR_OP(pack, x9, x23, x8, 0x00000080ffffffff, 0xfdffffffffffffff, 0x80, x1, 16, x2)

pack_01_inst_133:
    // Test 133:  Test with marching zeros/ones
    // result rd:x10(0x00000040ffffffff), rs1:x22(0xfbffffffffffffff), rs2:x7(0x0000000000000040)
    TEST_RR_OP(pack, x10, x22, x7, 0x00000040ffffffff, 0xfbffffffffffffff, 0x40, x1, 24, x2)

pack_01_inst_134:
    // Test 134:  Test with marching zeros/ones
    // result rd:x11(0x00000020ffffffff), rs1:x21(0xf7ffffffffffffff), rs2:x6(0x0000000000000020)
    TEST_RR_OP(pack, x11, x21, x6, 0x00000020ffffffff, 0xf7ffffffffffffff, 0x20, x1, 32, x2)

    
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x6,signature_28_0)


pack_01_inst_135:
    // Test 135:  Test with marching zeros/ones
    // result rd:x12(0x00000010ffffffff), rs1:x20(0xefffffffffffffff), rs2:x5(0x0000000000000010)
    TEST_RR_OP(pack, x12, x20, x5, 0x00000010ffffffff, 0xefffffffffffffff, 0x10, x6, 0, x7)

pack_01_inst_136:
    // Test 136:  Test with marching zeros/ones
    // result rd:x13(0x00000008ffffffff), rs1:x19(0xdfffffffffffffff), rs2:x4(0x0000000000000008)
    TEST_RR_OP(pack, x13, x19, x4, 0x00000008ffffffff, 0xdfffffffffffffff, 0x8, x6, 8, x7)

pack_01_inst_137:
    // Test 137:  Test with marching zeros/ones
    // result rd:x14(0x00000004ffffffff), rs1:x18(0xbfffffffffffffff), rs2:x3(0x0000000000000004)
    TEST_RR_OP(pack, x14, x18, x3, 0x00000004ffffffff, 0xbfffffffffffffff, 0x4, x6, 16, x7)

pack_01_inst_138:
    // Test 138:  Test with marching zeros/ones
    // result rd:x15(0x00000002ffffffff), rs1:x17(0x7fffffffffffffff), rs2:x2(0x0000000000000002)
    TEST_RR_OP(pack, x15, x17, x2, 0x00000002ffffffff, 0x7fffffffffffffff, 0x2, x6, 24, x7)

pack_01_inst_139:
    // Test 139:  Test with marching zeros/ones
    // result rd:x16(0x00000001ffffffff), rs1:x16(0xffffffffffffffff), rs2:x1(0x0000000000000001)
    TEST_RR_OP(pack, x16, x16, x1, 0x00000001ffffffff, 0xffffffffffffffff, 0x1, x6, 32, x7)

    
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_29_0)


pack_01_inst_140:
    // Test 140:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000001), rs1:x15(0x0000000000000001), rs2:x31(0x0000000000000000)
    TEST_RR_OP(pack, x17, x15, x31, 0x0000000000000001, 0x1, 0x0, x1, 0, x2)

pack_01_inst_141:
    // Test 141:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000002), rs1:x14(0x0000000000000002), rs2:x30(0x0000000000000000)
    TEST_RR_OP(pack, x18, x14, x30, 0x0000000000000002, 0x2, 0x0, x1, 8, x2)

pack_01_inst_142:
    // Test 142:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000004), rs1:x13(0x0000000000000004), rs2:x29(0x0000000000000000)
    TEST_RR_OP(pack, x19, x13, x29, 0x0000000000000004, 0x4, 0x0, x1, 16, x2)

pack_01_inst_143:
    // Test 143:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000008), rs1:x12(0x0000000000000008), rs2:x28(0x0000000000000000)
    TEST_RR_OP(pack, x20, x12, x28, 0x0000000000000008, 0x8, 0x0, x1, 24, x2)

pack_01_inst_144:
    // Test 144:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000010), rs1:x11(0x0000000000000010), rs2:x27(0x0000000000000000)
    TEST_RR_OP(pack, x21, x11, x27, 0x0000000000000010, 0x10, 0x0, x1, 32, x2)

    
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_30_0)


pack_01_inst_145:
    // Test 145:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000020), rs1:x10(0x0000000000000020), rs2:x26(0x0000000000000000)
    TEST_RR_OP(pack, x22, x10, x26, 0x0000000000000020, 0x20, 0x0, x1, 0, x2)

pack_01_inst_146:
    // Test 146:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000040), rs1:x9(0x0000000000000040), rs2:x25(0x0000000000000000)
    TEST_RR_OP(pack, x23, x9, x25, 0x0000000000000040, 0x40, 0x0, x1, 8, x2)

pack_01_inst_147:
    // Test 147:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000080), rs1:x8(0x0000000000000080), rs2:x24(0x0000000000000000)
    TEST_RR_OP(pack, x24, x8, x24, 0x0000000000000080, 0x80, 0x0, x1, 16, x2)

pack_01_inst_148:
    // Test 148:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000100), rs1:x7(0x0000000000000100), rs2:x23(0x0000000000000000)
    TEST_RR_OP(pack, x25, x7, x23, 0x0000000000000100, 0x100, 0x0, x1, 24, x2)

pack_01_inst_149:
    // Test 149:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000200), rs1:x6(0x0000000000000200), rs2:x22(0x0000000000000000)
    TEST_RR_OP(pack, x26, x6, x22, 0x0000000000000200, 0x200, 0x0, x1, 32, x2)

    
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(30,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x6,signature_31_0)


pack_01_inst_150:
    // Test 150:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000400), rs1:x5(0x0000000000000400), rs2:x21(0x0000000000000000)
    TEST_RR_OP(pack, x27, x5, x21, 0x0000000000000400, 0x400, 0x0, x6, 0, x7)

pack_01_inst_151:
    // Test 151:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000800), rs1:x4(0x0000000000000800), rs2:x20(0x0000000000000000)
    TEST_RR_OP(pack, x28, x4, x20, 0x0000000000000800, 0x800, 0x0, x6, 8, x7)

pack_01_inst_152:
    // Test 152:  Test with marching zeros/ones
    // result rd:x29(0x0000000000001000), rs1:x3(0x0000000000001000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(pack, x29, x3, x19, 0x0000000000001000, 0x1000, 0x0, x6, 16, x7)

pack_01_inst_153:
    // Test 153:  Test with marching zeros/ones
    // result rd:x30(0x0000000000002000), rs1:x2(0x0000000000002000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(pack, x30, x2, x18, 0x0000000000002000, 0x2000, 0x0, x6, 24, x7)

pack_01_inst_154:
    // Test 154:  Test with marching zeros/ones
    // result rd:x31(0x0000000000004000), rs1:x1(0x0000000000004000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(pack, x31, x1, x17, 0x0000000000004000, 0x4000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(31,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x6,signature_32_0)


pack_01_inst_155:
    // Test 155:  Test with marching zeros/ones
    // result rd:x1(0x0000000000008000), rs1:x31(0x0000000000008000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(pack, x1, x31, x16, 0x0000000000008000, 0x8000, 0x0, x6, 0, x7)

pack_01_inst_156:
    // Test 156:  Test with marching zeros/ones
    // result rd:x2(0x0000000000010000), rs1:x30(0x0000000000010000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(pack, x2, x30, x15, 0x0000000000010000, 0x10000, 0x0, x6, 8, x7)

pack_01_inst_157:
    // Test 157:  Test with marching zeros/ones
    // result rd:x3(0x0000000000020000), rs1:x29(0x0000000000020000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(pack, x3, x29, x14, 0x0000000000020000, 0x20000, 0x0, x6, 16, x7)

pack_01_inst_158:
    // Test 158:  Test with marching zeros/ones
    // result rd:x4(0x0000000000040000), rs1:x28(0x0000000000040000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(pack, x4, x28, x13, 0x0000000000040000, 0x40000, 0x0, x6, 24, x7)

pack_01_inst_159:
    // Test 159:  Test with marching zeros/ones
    // result rd:x5(0x0000000000080000), rs1:x27(0x0000000000080000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(pack, x5, x27, x12, 0x0000000000080000, 0x80000, 0x0, x6, 32, x7)

    
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(32,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_33_0)


pack_01_inst_160:
    // Test 160:  Test with marching zeros/ones
    // result rd:x6(0x0000000000100000), rs1:x26(0x0000000000100000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(pack, x6, x26, x11, 0x0000000000100000, 0x100000, 0x0, x1, 0, x2)

pack_01_inst_161:
    // Test 161:  Test with marching zeros/ones
    // result rd:x7(0x0000000000200000), rs1:x25(0x0000000000200000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(pack, x7, x25, x10, 0x0000000000200000, 0x200000, 0x0, x1, 8, x2)

pack_01_inst_162:
    // Test 162:  Test with marching zeros/ones
    // result rd:x8(0x0000000000400000), rs1:x24(0x0000000000400000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(pack, x8, x24, x9, 0x0000000000400000, 0x400000, 0x0, x1, 16, x2)

pack_01_inst_163:
    // Test 163:  Test with marching zeros/ones
    // result rd:x9(0x0000000000800000), rs1:x23(0x0000000000800000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(pack, x9, x23, x8, 0x0000000000800000, 0x800000, 0x0, x1, 24, x2)

pack_01_inst_164:
    // Test 164:  Test with marching zeros/ones
    // result rd:x10(0x0000000001000000), rs1:x22(0x0000000001000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(pack, x10, x22, x7, 0x0000000001000000, 0x1000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(33,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_34_0)


pack_01_inst_165:
    // Test 165:  Test with marching zeros/ones
    // result rd:x11(0x0000000002000000), rs1:x21(0x0000000002000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(pack, x11, x21, x6, 0x0000000002000000, 0x2000000, 0x0, x1, 0, x7)

pack_01_inst_166:
    // Test 166:  Test with marching zeros/ones
    // result rd:x12(0x0000000004000000), rs1:x20(0x0000000004000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(pack, x12, x20, x5, 0x0000000004000000, 0x4000000, 0x0, x1, 8, x7)

pack_01_inst_167:
    // Test 167:  Test with marching zeros/ones
    // result rd:x13(0x0000000008000000), rs1:x19(0x0000000008000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(pack, x13, x19, x4, 0x0000000008000000, 0x8000000, 0x0, x1, 16, x7)

pack_01_inst_168:
    // Test 168:  Test with marching zeros/ones
    // result rd:x14(0x0000000010000000), rs1:x18(0x0000000010000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(pack, x14, x18, x3, 0x0000000010000000, 0x10000000, 0x0, x1, 24, x7)

pack_01_inst_169:
    // Test 169:  Test with marching zeros/ones
    // result rd:x15(0x0000000020000000), rs1:x17(0x0000000020000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(pack, x15, x17, x2, 0x0000000020000000, 0x20000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(34,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x2,signature_35_0)


pack_01_inst_170:
    // Test 170:  Test with marching zeros/ones
    // result rd:x16(0x0000000040000000), rs1:x16(0x0000000040000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(pack, x16, x16, x1, 0x0000000040000000, 0x40000000, 0x0, x2, 0, x3)

pack_01_inst_171:
    // Test 171:  Test with marching zeros/ones
    // result rd:x17(0x0000000080000000), rs1:x15(0x0000000080000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(pack, x17, x15, x31, 0x0000000080000000, 0x80000000, 0x0, x2, 8, x3)

pack_01_inst_172:
    // Test 172:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x0000000100000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(pack, x18, x14, x30, 0x0000000000000000, 0x100000000, 0x0, x2, 16, x3)

pack_01_inst_173:
    // Test 173:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000200000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(pack, x19, x13, x29, 0x0000000000000000, 0x200000000, 0x0, x2, 24, x3)

pack_01_inst_174:
    // Test 174:  Test with marching zeros/ones
    // result rd:x20(0x0000000000000000), rs1:x12(0x0000000400000000), rs2:x28(0x0000000000000000)
    TEST_RR_OP(pack, x20, x12, x28, 0x0000000000000000, 0x400000000, 0x0, x2, 32, x3)

    
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(35,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_36_0)


pack_01_inst_175:
    // Test 175:  Test with marching zeros/ones
    // result rd:x21(0x0000000000000000), rs1:x11(0x0000000800000000), rs2:x27(0x0000000000000000)
    TEST_RR_OP(pack, x21, x11, x27, 0x0000000000000000, 0x800000000, 0x0, x1, 0, x2)

pack_01_inst_176:
    // Test 176:  Test with marching zeros/ones
    // result rd:x22(0x0000000000000000), rs1:x10(0x0000001000000000), rs2:x26(0x0000000000000000)
    TEST_RR_OP(pack, x22, x10, x26, 0x0000000000000000, 0x1000000000, 0x0, x1, 8, x2)

pack_01_inst_177:
    // Test 177:  Test with marching zeros/ones
    // result rd:x23(0x0000000000000000), rs1:x9(0x0000002000000000), rs2:x25(0x0000000000000000)
    TEST_RR_OP(pack, x23, x9, x25, 0x0000000000000000, 0x2000000000, 0x0, x1, 16, x2)

pack_01_inst_178:
    // Test 178:  Test with marching zeros/ones
    // result rd:x24(0x0000000000000000), rs1:x8(0x0000004000000000), rs2:x24(0x0000000000000000)
    TEST_RR_OP(pack, x24, x8, x24, 0x0000000000000000, 0x4000000000, 0x0, x1, 24, x2)

pack_01_inst_179:
    // Test 179:  Test with marching zeros/ones
    // result rd:x25(0x0000000000000000), rs1:x7(0x0000008000000000), rs2:x23(0x0000000000000000)
    TEST_RR_OP(pack, x25, x7, x23, 0x0000000000000000, 0x8000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(36,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_37_0)


pack_01_inst_180:
    // Test 180:  Test with marching zeros/ones
    // result rd:x26(0x0000000000000000), rs1:x6(0x0000010000000000), rs2:x22(0x0000000000000000)
    TEST_RR_OP(pack, x26, x6, x22, 0x0000000000000000, 0x10000000000, 0x0, x1, 0, x7)

pack_01_inst_181:
    // Test 181:  Test with marching zeros/ones
    // result rd:x27(0x0000000000000000), rs1:x5(0x0000020000000000), rs2:x21(0x0000000000000000)
    TEST_RR_OP(pack, x27, x5, x21, 0x0000000000000000, 0x20000000000, 0x0, x1, 8, x7)

pack_01_inst_182:
    // Test 182:  Test with marching zeros/ones
    // result rd:x28(0x0000000000000000), rs1:x4(0x0000040000000000), rs2:x20(0x0000000000000000)
    TEST_RR_OP(pack, x28, x4, x20, 0x0000000000000000, 0x40000000000, 0x0, x1, 16, x7)

pack_01_inst_183:
    // Test 183:  Test with marching zeros/ones
    // result rd:x29(0x0000000000000000), rs1:x3(0x0000080000000000), rs2:x19(0x0000000000000000)
    TEST_RR_OP(pack, x29, x3, x19, 0x0000000000000000, 0x80000000000, 0x0, x1, 24, x7)

pack_01_inst_184:
    // Test 184:  Test with marching zeros/ones
    // result rd:x30(0x0000000000000000), rs1:x2(0x0000100000000000), rs2:x18(0x0000000000000000)
    TEST_RR_OP(pack, x30, x2, x18, 0x0000000000000000, 0x100000000000, 0x0, x1, 32, x7)

    
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(37,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x5,signature_38_0)


pack_01_inst_185:
    // Test 185:  Test with marching zeros/ones
    // result rd:x31(0x0000000000000000), rs1:x1(0x0000200000000000), rs2:x17(0x0000000000000000)
    TEST_RR_OP(pack, x31, x1, x17, 0x0000000000000000, 0x200000000000, 0x0, x5, 0, x6)

pack_01_inst_186:
    // Test 186:  Test with marching zeros/ones
    // result rd:x1(0x0000000000000000), rs1:x31(0x0000400000000000), rs2:x16(0x0000000000000000)
    TEST_RR_OP(pack, x1, x31, x16, 0x0000000000000000, 0x400000000000, 0x0, x5, 8, x6)

pack_01_inst_187:
    // Test 187:  Test with marching zeros/ones
    // result rd:x2(0x0000000000000000), rs1:x30(0x0000800000000000), rs2:x15(0x0000000000000000)
    TEST_RR_OP(pack, x2, x30, x15, 0x0000000000000000, 0x800000000000, 0x0, x5, 16, x6)

pack_01_inst_188:
    // Test 188:  Test with marching zeros/ones
    // result rd:x3(0x0000000000000000), rs1:x29(0x0001000000000000), rs2:x14(0x0000000000000000)
    TEST_RR_OP(pack, x3, x29, x14, 0x0000000000000000, 0x1000000000000, 0x0, x5, 24, x6)

pack_01_inst_189:
    // Test 189:  Test with marching zeros/ones
    // result rd:x4(0x0000000000000000), rs1:x28(0x0002000000000000), rs2:x13(0x0000000000000000)
    TEST_RR_OP(pack, x4, x28, x13, 0x0000000000000000, 0x2000000000000, 0x0, x5, 32, x6)

    
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(38,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_39_0)


pack_01_inst_190:
    // Test 190:  Test with marching zeros/ones
    // result rd:x5(0x0000000000000000), rs1:x27(0x0004000000000000), rs2:x12(0x0000000000000000)
    TEST_RR_OP(pack, x5, x27, x12, 0x0000000000000000, 0x4000000000000, 0x0, x1, 0, x2)

pack_01_inst_191:
    // Test 191:  Test with marching zeros/ones
    // result rd:x6(0x0000000000000000), rs1:x26(0x0008000000000000), rs2:x11(0x0000000000000000)
    TEST_RR_OP(pack, x6, x26, x11, 0x0000000000000000, 0x8000000000000, 0x0, x1, 8, x2)

pack_01_inst_192:
    // Test 192:  Test with marching zeros/ones
    // result rd:x7(0x0000000000000000), rs1:x25(0x0010000000000000), rs2:x10(0x0000000000000000)
    TEST_RR_OP(pack, x7, x25, x10, 0x0000000000000000, 0x10000000000000, 0x0, x1, 16, x2)

pack_01_inst_193:
    // Test 193:  Test with marching zeros/ones
    // result rd:x8(0x0000000000000000), rs1:x24(0x0020000000000000), rs2:x9(0x0000000000000000)
    TEST_RR_OP(pack, x8, x24, x9, 0x0000000000000000, 0x20000000000000, 0x0, x1, 24, x2)

pack_01_inst_194:
    // Test 194:  Test with marching zeros/ones
    // result rd:x9(0x0000000000000000), rs1:x23(0x0040000000000000), rs2:x8(0x0000000000000000)
    TEST_RR_OP(pack, x9, x23, x8, 0x0000000000000000, 0x40000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(39,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_40_0)


pack_01_inst_195:
    // Test 195:  Test with marching zeros/ones
    // result rd:x10(0x0000000000000000), rs1:x22(0x0080000000000000), rs2:x7(0x0000000000000000)
    TEST_RR_OP(pack, x10, x22, x7, 0x0000000000000000, 0x80000000000000, 0x0, x1, 0, x2)

pack_01_inst_196:
    // Test 196:  Test with marching zeros/ones
    // result rd:x11(0x0000000000000000), rs1:x21(0x0100000000000000), rs2:x6(0x0000000000000000)
    TEST_RR_OP(pack, x11, x21, x6, 0x0000000000000000, 0x100000000000000, 0x0, x1, 8, x2)

pack_01_inst_197:
    // Test 197:  Test with marching zeros/ones
    // result rd:x12(0x0000000000000000), rs1:x20(0x0200000000000000), rs2:x5(0x0000000000000000)
    TEST_RR_OP(pack, x12, x20, x5, 0x0000000000000000, 0x200000000000000, 0x0, x1, 16, x2)

pack_01_inst_198:
    // Test 198:  Test with marching zeros/ones
    // result rd:x13(0x0000000000000000), rs1:x19(0x0400000000000000), rs2:x4(0x0000000000000000)
    TEST_RR_OP(pack, x13, x19, x4, 0x0000000000000000, 0x400000000000000, 0x0, x1, 24, x2)

pack_01_inst_199:
    // Test 199:  Test with marching zeros/ones
    // result rd:x14(0x0000000000000000), rs1:x18(0x0800000000000000), rs2:x3(0x0000000000000000)
    TEST_RR_OP(pack, x14, x18, x3, 0x0000000000000000, 0x800000000000000, 0x0, x1, 32, x2)

    
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(40,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x3,signature_41_0)


pack_01_inst_200:
    // Test 200:  Test with marching zeros/ones
    // result rd:x15(0x0000000000000000), rs1:x17(0x1000000000000000), rs2:x2(0x0000000000000000)
    TEST_RR_OP(pack, x15, x17, x2, 0x0000000000000000, 0x1000000000000000, 0x0, x3, 0, x4)

pack_01_inst_201:
    // Test 201:  Test with marching zeros/ones
    // result rd:x16(0x0000000000000000), rs1:x16(0x2000000000000000), rs2:x1(0x0000000000000000)
    TEST_RR_OP(pack, x16, x16, x1, 0x0000000000000000, 0x2000000000000000, 0x0, x3, 8, x4)

pack_01_inst_202:
    // Test 202:  Test with marching zeros/ones
    // result rd:x17(0x0000000000000000), rs1:x15(0x4000000000000000), rs2:x31(0x0000000000000000)
    TEST_RR_OP(pack, x17, x15, x31, 0x0000000000000000, 0x4000000000000000, 0x0, x3, 16, x4)

pack_01_inst_203:
    // Test 203:  Test with marching zeros/ones
    // result rd:x18(0x0000000000000000), rs1:x14(0x8000000000000000), rs2:x30(0x0000000000000000)
    TEST_RR_OP(pack, x18, x14, x30, 0x0000000000000000, 0x8000000000000000, 0x0, x3, 24, x4)

pack_01_inst_204:
    // Test 204:  Test with marching zeros/ones
    // result rd:x19(0x0000000000000000), rs1:x13(0x0000000000000000), rs2:x29(0x0000000000000000)
    TEST_RR_OP(pack, x19, x13, x29, 0x0000000000000000, 0x0, 0x0, x3, 32, x4)

    
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(41,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_42_0)


pack_01_inst_205:
    // Test 205:  Test with marching zeros/ones
    // result rd:x20(0x00000000fffffffe), rs1:x12(0xfffffffffffffffe), rs2:x28(0x0000000000000000)
    TEST_RR_OP(pack, x20, x12, x28, 0x00000000fffffffe, 0xfffffffffffffffe, 0x0, x1, 0, x2)

pack_01_inst_206:
    // Test 206:  Test with marching zeros/ones
    // result rd:x21(0x00000000fffffffd), rs1:x11(0xfffffffffffffffd), rs2:x27(0x0000000000000000)
    TEST_RR_OP(pack, x21, x11, x27, 0x00000000fffffffd, 0xfffffffffffffffd, 0x0, x1, 8, x2)

pack_01_inst_207:
    // Test 207:  Test with marching zeros/ones
    // result rd:x22(0x00000000fffffffb), rs1:x10(0xfffffffffffffffb), rs2:x26(0x0000000000000000)
    TEST_RR_OP(pack, x22, x10, x26, 0x00000000fffffffb, 0xfffffffffffffffb, 0x0, x1, 16, x2)

pack_01_inst_208:
    // Test 208:  Test with marching zeros/ones
    // result rd:x23(0x00000000fffffff7), rs1:x9(0xfffffffffffffff7), rs2:x25(0x0000000000000000)
    TEST_RR_OP(pack, x23, x9, x25, 0x00000000fffffff7, 0xfffffffffffffff7, 0x0, x1, 24, x2)

pack_01_inst_209:
    // Test 209:  Test with marching zeros/ones
    // result rd:x24(0x00000000ffffffef), rs1:x8(0xffffffffffffffef), rs2:x24(0x0000000000000000)
    TEST_RR_OP(pack, x24, x8, x24, 0x00000000ffffffef, 0xffffffffffffffef, 0x0, x1, 32, x2)

    
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(42,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_43_0)


pack_01_inst_210:
    // Test 210:  Test with marching zeros/ones
    // result rd:x25(0x00000000ffffffdf), rs1:x7(0xffffffffffffffdf), rs2:x23(0x0000000000000000)
    TEST_RR_OP(pack, x25, x7, x23, 0x00000000ffffffdf, 0xffffffffffffffdf, 0x0, x1, 0, x2)

pack_01_inst_211:
    // Test 211:  Test with marching zeros/ones
    // result rd:x26(0x00000000ffffffbf), rs1:x6(0xffffffffffffffbf), rs2:x22(0x0000000000000000)
    TEST_RR_OP(pack, x26, x6, x22, 0x00000000ffffffbf, 0xffffffffffffffbf, 0x0, x1, 8, x2)

pack_01_inst_212:
    // Test 212:  Test with marching zeros/ones
    // result rd:x27(0x00000000ffffff7f), rs1:x5(0xffffffffffffff7f), rs2:x21(0x0000000000000000)
    TEST_RR_OP(pack, x27, x5, x21, 0x00000000ffffff7f, 0xffffffffffffff7f, 0x0, x1, 16, x2)

pack_01_inst_213:
    // Test 213:  Test with marching zeros/ones
    // result rd:x28(0x00000000fffffeff), rs1:x4(0xfffffffffffffeff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(pack, x28, x4, x20, 0x00000000fffffeff, 0xfffffffffffffeff, 0x0, x1, 24, x2)

pack_01_inst_214:
    // Test 214:  Test with marching zeros/ones
    // result rd:x29(0x00000000fffffdff), rs1:x3(0xfffffffffffffdff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(pack, x29, x3, x19, 0x00000000fffffdff, 0xfffffffffffffdff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(43,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x4,signature_44_0)


pack_01_inst_215:
    // Test 215:  Test with marching zeros/ones
    // result rd:x30(0x00000000fffffbff), rs1:x2(0xfffffffffffffbff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(pack, x30, x2, x18, 0x00000000fffffbff, 0xfffffffffffffbff, 0x0, x4, 0, x5)

pack_01_inst_216:
    // Test 216:  Test with marching zeros/ones
    // result rd:x31(0x00000000fffff7ff), rs1:x1(0xfffffffffffff7ff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(pack, x31, x1, x17, 0x00000000fffff7ff, 0xfffffffffffff7ff, 0x0, x4, 8, x5)

pack_01_inst_217:
    // Test 217:  Test with marching zeros/ones
    // result rd:x1(0x00000000ffffefff), rs1:x31(0xffffffffffffefff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(pack, x1, x31, x16, 0x00000000ffffefff, 0xffffffffffffefff, 0x0, x4, 16, x5)

pack_01_inst_218:
    // Test 218:  Test with marching zeros/ones
    // result rd:x2(0x00000000ffffdfff), rs1:x30(0xffffffffffffdfff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(pack, x2, x30, x15, 0x00000000ffffdfff, 0xffffffffffffdfff, 0x0, x4, 24, x5)

pack_01_inst_219:
    // Test 219:  Test with marching zeros/ones
    // result rd:x3(0x00000000ffffbfff), rs1:x29(0xffffffffffffbfff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(pack, x3, x29, x14, 0x00000000ffffbfff, 0xffffffffffffbfff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(44,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_45_0)


pack_01_inst_220:
    // Test 220:  Test with marching zeros/ones
    // result rd:x4(0x00000000ffff7fff), rs1:x28(0xffffffffffff7fff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(pack, x4, x28, x13, 0x00000000ffff7fff, 0xffffffffffff7fff, 0x0, x1, 0, x2)

pack_01_inst_221:
    // Test 221:  Test with marching zeros/ones
    // result rd:x5(0x00000000fffeffff), rs1:x27(0xfffffffffffeffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(pack, x5, x27, x12, 0x00000000fffeffff, 0xfffffffffffeffff, 0x0, x1, 8, x2)

pack_01_inst_222:
    // Test 222:  Test with marching zeros/ones
    // result rd:x6(0x00000000fffdffff), rs1:x26(0xfffffffffffdffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(pack, x6, x26, x11, 0x00000000fffdffff, 0xfffffffffffdffff, 0x0, x1, 16, x2)

pack_01_inst_223:
    // Test 223:  Test with marching zeros/ones
    // result rd:x7(0x00000000fffbffff), rs1:x25(0xfffffffffffbffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(pack, x7, x25, x10, 0x00000000fffbffff, 0xfffffffffffbffff, 0x0, x1, 24, x2)

pack_01_inst_224:
    // Test 224:  Test with marching zeros/ones
    // result rd:x8(0x00000000fff7ffff), rs1:x24(0xfffffffffff7ffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(pack, x8, x24, x9, 0x00000000fff7ffff, 0xfffffffffff7ffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(45,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_46_0)


pack_01_inst_225:
    // Test 225:  Test with marching zeros/ones
    // result rd:x9(0x00000000ffefffff), rs1:x23(0xffffffffffefffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(pack, x9, x23, x8, 0x00000000ffefffff, 0xffffffffffefffff, 0x0, x1, 0, x2)

pack_01_inst_226:
    // Test 226:  Test with marching zeros/ones
    // result rd:x10(0x00000000ffdfffff), rs1:x22(0xffffffffffdfffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(pack, x10, x22, x7, 0x00000000ffdfffff, 0xffffffffffdfffff, 0x0, x1, 8, x2)

pack_01_inst_227:
    // Test 227:  Test with marching zeros/ones
    // result rd:x11(0x00000000ffbfffff), rs1:x21(0xffffffffffbfffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(pack, x11, x21, x6, 0x00000000ffbfffff, 0xffffffffffbfffff, 0x0, x1, 16, x2)

pack_01_inst_228:
    // Test 228:  Test with marching zeros/ones
    // result rd:x12(0x00000000ff7fffff), rs1:x20(0xffffffffff7fffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(pack, x12, x20, x5, 0x00000000ff7fffff, 0xffffffffff7fffff, 0x0, x1, 24, x2)

pack_01_inst_229:
    // Test 229:  Test with marching zeros/ones
    // result rd:x13(0x00000000feffffff), rs1:x19(0xfffffffffeffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(pack, x13, x19, x4, 0x00000000feffffff, 0xfffffffffeffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(46,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x4,signature_47_0)


pack_01_inst_230:
    // Test 230:  Test with marching zeros/ones
    // result rd:x14(0x00000000fdffffff), rs1:x18(0xfffffffffdffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(pack, x14, x18, x3, 0x00000000fdffffff, 0xfffffffffdffffff, 0x0, x4, 0, x5)

pack_01_inst_231:
    // Test 231:  Test with marching zeros/ones
    // result rd:x15(0x00000000fbffffff), rs1:x17(0xfffffffffbffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(pack, x15, x17, x2, 0x00000000fbffffff, 0xfffffffffbffffff, 0x0, x4, 8, x5)

pack_01_inst_232:
    // Test 232:  Test with marching zeros/ones
    // result rd:x16(0x00000000f7ffffff), rs1:x16(0xfffffffff7ffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(pack, x16, x16, x1, 0x00000000f7ffffff, 0xfffffffff7ffffff, 0x0, x4, 16, x5)

pack_01_inst_233:
    // Test 233:  Test with marching zeros/ones
    // result rd:x17(0x00000000efffffff), rs1:x15(0xffffffffefffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(pack, x17, x15, x31, 0x00000000efffffff, 0xffffffffefffffff, 0x0, x4, 24, x5)

pack_01_inst_234:
    // Test 234:  Test with marching zeros/ones
    // result rd:x18(0x00000000dfffffff), rs1:x14(0xffffffffdfffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(pack, x18, x14, x30, 0x00000000dfffffff, 0xffffffffdfffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(47,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_48_0)


pack_01_inst_235:
    // Test 235:  Test with marching zeros/ones
    // result rd:x19(0x00000000bfffffff), rs1:x13(0xffffffffbfffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(pack, x19, x13, x29, 0x00000000bfffffff, 0xffffffffbfffffff, 0x0, x1, 0, x2)

pack_01_inst_236:
    // Test 236:  Test with marching zeros/ones
    // result rd:x20(0x000000007fffffff), rs1:x12(0xffffffff7fffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(pack, x20, x12, x28, 0x000000007fffffff, 0xffffffff7fffffff, 0x0, x1, 8, x2)

pack_01_inst_237:
    // Test 237:  Test with marching zeros/ones
    // result rd:x21(0x00000000ffffffff), rs1:x11(0xfffffffeffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(pack, x21, x11, x27, 0x00000000ffffffff, 0xfffffffeffffffff, 0x0, x1, 16, x2)

pack_01_inst_238:
    // Test 238:  Test with marching zeros/ones
    // result rd:x22(0x00000000ffffffff), rs1:x10(0xfffffffdffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(pack, x22, x10, x26, 0x00000000ffffffff, 0xfffffffdffffffff, 0x0, x1, 24, x2)

pack_01_inst_239:
    // Test 239:  Test with marching zeros/ones
    // result rd:x23(0x00000000ffffffff), rs1:x9(0xfffffffbffffffff), rs2:x25(0x0000000000000000)
    TEST_RR_OP(pack, x23, x9, x25, 0x00000000ffffffff, 0xfffffffbffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(48,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_49_0)


pack_01_inst_240:
    // Test 240:  Test with marching zeros/ones
    // result rd:x24(0x00000000ffffffff), rs1:x8(0xfffffff7ffffffff), rs2:x24(0x0000000000000000)
    TEST_RR_OP(pack, x24, x8, x24, 0x00000000ffffffff, 0xfffffff7ffffffff, 0x0, x1, 0, x2)

pack_01_inst_241:
    // Test 241:  Test with marching zeros/ones
    // result rd:x25(0x00000000ffffffff), rs1:x7(0xffffffefffffffff), rs2:x23(0x0000000000000000)
    TEST_RR_OP(pack, x25, x7, x23, 0x00000000ffffffff, 0xffffffefffffffff, 0x0, x1, 8, x2)

pack_01_inst_242:
    // Test 242:  Test with marching zeros/ones
    // result rd:x26(0x00000000ffffffff), rs1:x6(0xffffffdfffffffff), rs2:x22(0x0000000000000000)
    TEST_RR_OP(pack, x26, x6, x22, 0x00000000ffffffff, 0xffffffdfffffffff, 0x0, x1, 16, x2)

pack_01_inst_243:
    // Test 243:  Test with marching zeros/ones
    // result rd:x27(0x00000000ffffffff), rs1:x5(0xffffffbfffffffff), rs2:x21(0x0000000000000000)
    TEST_RR_OP(pack, x27, x5, x21, 0x00000000ffffffff, 0xffffffbfffffffff, 0x0, x1, 24, x2)

pack_01_inst_244:
    // Test 244:  Test with marching zeros/ones
    // result rd:x28(0x00000000ffffffff), rs1:x4(0xffffff7fffffffff), rs2:x20(0x0000000000000000)
    TEST_RR_OP(pack, x28, x4, x20, 0x00000000ffffffff, 0xffffff7fffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(49,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x4,signature_50_0)


pack_01_inst_245:
    // Test 245:  Test with marching zeros/ones
    // result rd:x29(0x00000000ffffffff), rs1:x3(0xfffffeffffffffff), rs2:x19(0x0000000000000000)
    TEST_RR_OP(pack, x29, x3, x19, 0x00000000ffffffff, 0xfffffeffffffffff, 0x0, x4, 0, x5)

pack_01_inst_246:
    // Test 246:  Test with marching zeros/ones
    // result rd:x30(0x00000000ffffffff), rs1:x2(0xfffffdffffffffff), rs2:x18(0x0000000000000000)
    TEST_RR_OP(pack, x30, x2, x18, 0x00000000ffffffff, 0xfffffdffffffffff, 0x0, x4, 8, x5)

pack_01_inst_247:
    // Test 247:  Test with marching zeros/ones
    // result rd:x31(0x00000000ffffffff), rs1:x1(0xfffffbffffffffff), rs2:x17(0x0000000000000000)
    TEST_RR_OP(pack, x31, x1, x17, 0x00000000ffffffff, 0xfffffbffffffffff, 0x0, x4, 16, x5)

pack_01_inst_248:
    // Test 248:  Test with marching zeros/ones
    // result rd:x1(0x00000000ffffffff), rs1:x31(0xfffff7ffffffffff), rs2:x16(0x0000000000000000)
    TEST_RR_OP(pack, x1, x31, x16, 0x00000000ffffffff, 0xfffff7ffffffffff, 0x0, x4, 24, x5)

pack_01_inst_249:
    // Test 249:  Test with marching zeros/ones
    // result rd:x2(0x00000000ffffffff), rs1:x30(0xffffefffffffffff), rs2:x15(0x0000000000000000)
    TEST_RR_OP(pack, x2, x30, x15, 0x00000000ffffffff, 0xffffefffffffffff, 0x0, x4, 32, x5)

    
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(50,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_51_0)


pack_01_inst_250:
    // Test 250:  Test with marching zeros/ones
    // result rd:x3(0x00000000ffffffff), rs1:x29(0xffffdfffffffffff), rs2:x14(0x0000000000000000)
    TEST_RR_OP(pack, x3, x29, x14, 0x00000000ffffffff, 0xffffdfffffffffff, 0x0, x1, 0, x2)

pack_01_inst_251:
    // Test 251:  Test with marching zeros/ones
    // result rd:x4(0x00000000ffffffff), rs1:x28(0xffffbfffffffffff), rs2:x13(0x0000000000000000)
    TEST_RR_OP(pack, x4, x28, x13, 0x00000000ffffffff, 0xffffbfffffffffff, 0x0, x1, 8, x2)

pack_01_inst_252:
    // Test 252:  Test with marching zeros/ones
    // result rd:x5(0x00000000ffffffff), rs1:x27(0xffff7fffffffffff), rs2:x12(0x0000000000000000)
    TEST_RR_OP(pack, x5, x27, x12, 0x00000000ffffffff, 0xffff7fffffffffff, 0x0, x1, 16, x2)

pack_01_inst_253:
    // Test 253:  Test with marching zeros/ones
    // result rd:x6(0x00000000ffffffff), rs1:x26(0xfffeffffffffffff), rs2:x11(0x0000000000000000)
    TEST_RR_OP(pack, x6, x26, x11, 0x00000000ffffffff, 0xfffeffffffffffff, 0x0, x1, 24, x2)

pack_01_inst_254:
    // Test 254:  Test with marching zeros/ones
    // result rd:x7(0x00000000ffffffff), rs1:x25(0xfffdffffffffffff), rs2:x10(0x0000000000000000)
    TEST_RR_OP(pack, x7, x25, x10, 0x00000000ffffffff, 0xfffdffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(51,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_52_0)


pack_01_inst_255:
    // Test 255:  Test with marching zeros/ones
    // result rd:x8(0x00000000ffffffff), rs1:x24(0xfffbffffffffffff), rs2:x9(0x0000000000000000)
    TEST_RR_OP(pack, x8, x24, x9, 0x00000000ffffffff, 0xfffbffffffffffff, 0x0, x1, 0, x2)

pack_01_inst_256:
    // Test 256:  Test with marching zeros/ones
    // result rd:x9(0x00000000ffffffff), rs1:x23(0xfff7ffffffffffff), rs2:x8(0x0000000000000000)
    TEST_RR_OP(pack, x9, x23, x8, 0x00000000ffffffff, 0xfff7ffffffffffff, 0x0, x1, 8, x2)

pack_01_inst_257:
    // Test 257:  Test with marching zeros/ones
    // result rd:x10(0x00000000ffffffff), rs1:x22(0xffefffffffffffff), rs2:x7(0x0000000000000000)
    TEST_RR_OP(pack, x10, x22, x7, 0x00000000ffffffff, 0xffefffffffffffff, 0x0, x1, 16, x2)

pack_01_inst_258:
    // Test 258:  Test with marching zeros/ones
    // result rd:x11(0x00000000ffffffff), rs1:x21(0xffdfffffffffffff), rs2:x6(0x0000000000000000)
    TEST_RR_OP(pack, x11, x21, x6, 0x00000000ffffffff, 0xffdfffffffffffff, 0x0, x1, 24, x2)

pack_01_inst_259:
    // Test 259:  Test with marching zeros/ones
    // result rd:x12(0x00000000ffffffff), rs1:x20(0xffbfffffffffffff), rs2:x5(0x0000000000000000)
    TEST_RR_OP(pack, x12, x20, x5, 0x00000000ffffffff, 0xffbfffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(52,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x5,signature_53_0)


pack_01_inst_260:
    // Test 260:  Test with marching zeros/ones
    // result rd:x13(0x00000000ffffffff), rs1:x19(0xff7fffffffffffff), rs2:x4(0x0000000000000000)
    TEST_RR_OP(pack, x13, x19, x4, 0x00000000ffffffff, 0xff7fffffffffffff, 0x0, x5, 0, x6)

pack_01_inst_261:
    // Test 261:  Test with marching zeros/ones
    // result rd:x14(0x00000000ffffffff), rs1:x18(0xfeffffffffffffff), rs2:x3(0x0000000000000000)
    TEST_RR_OP(pack, x14, x18, x3, 0x00000000ffffffff, 0xfeffffffffffffff, 0x0, x5, 8, x6)

pack_01_inst_262:
    // Test 262:  Test with marching zeros/ones
    // result rd:x15(0x00000000ffffffff), rs1:x17(0xfdffffffffffffff), rs2:x2(0x0000000000000000)
    TEST_RR_OP(pack, x15, x17, x2, 0x00000000ffffffff, 0xfdffffffffffffff, 0x0, x5, 16, x6)

pack_01_inst_263:
    // Test 263:  Test with marching zeros/ones
    // result rd:x16(0x00000000ffffffff), rs1:x16(0xfbffffffffffffff), rs2:x1(0x0000000000000000)
    TEST_RR_OP(pack, x16, x16, x1, 0x00000000ffffffff, 0xfbffffffffffffff, 0x0, x5, 24, x6)

pack_01_inst_264:
    // Test 264:  Test with marching zeros/ones
    // result rd:x17(0x00000000ffffffff), rs1:x15(0xf7ffffffffffffff), rs2:x31(0x0000000000000000)
    TEST_RR_OP(pack, x17, x15, x31, 0x00000000ffffffff, 0xf7ffffffffffffff, 0x0, x5, 32, x6)

    
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(53,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_54_0)


pack_01_inst_265:
    // Test 265:  Test with marching zeros/ones
    // result rd:x18(0x00000000ffffffff), rs1:x14(0xefffffffffffffff), rs2:x30(0x0000000000000000)
    TEST_RR_OP(pack, x18, x14, x30, 0x00000000ffffffff, 0xefffffffffffffff, 0x0, x1, 0, x2)

pack_01_inst_266:
    // Test 266:  Test with marching zeros/ones
    // result rd:x19(0x00000000ffffffff), rs1:x13(0xdfffffffffffffff), rs2:x29(0x0000000000000000)
    TEST_RR_OP(pack, x19, x13, x29, 0x00000000ffffffff, 0xdfffffffffffffff, 0x0, x1, 8, x2)

pack_01_inst_267:
    // Test 267:  Test with marching zeros/ones
    // result rd:x20(0x00000000ffffffff), rs1:x12(0xbfffffffffffffff), rs2:x28(0x0000000000000000)
    TEST_RR_OP(pack, x20, x12, x28, 0x00000000ffffffff, 0xbfffffffffffffff, 0x0, x1, 16, x2)

pack_01_inst_268:
    // Test 268:  Test with marching zeros/ones
    // result rd:x21(0x00000000ffffffff), rs1:x11(0x7fffffffffffffff), rs2:x27(0x0000000000000000)
    TEST_RR_OP(pack, x21, x11, x27, 0x00000000ffffffff, 0x7fffffffffffffff, 0x0, x1, 24, x2)

pack_01_inst_269:
    // Test 269:  Test with marching zeros/ones
    // result rd:x22(0x00000000ffffffff), rs1:x10(0xffffffffffffffff), rs2:x26(0x0000000000000000)
    TEST_RR_OP(pack, x22, x10, x26, 0x00000000ffffffff, 0xffffffffffffffff, 0x0, x1, 32, x2)

    
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)
    RVTEST_CASE(54,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

	RVTEST_SIGBASE(x1,signature_55_0)


pack_01_inst_270:
    // Test 270:  Test with rs1 == rs2
    // result rd:x23(0x121bcc23121bcc23), rs1:x25(0x10fd3dedadea5195), rs2:x25(0xdf7f3844121bcc23)
    TEST_RR_OP(pack, x23, x25, x25, 0x121bcc23121bcc23, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x1, 0, x2)

pack_01_inst_271:
    // Test 271:  Test with rd == x0
    // result rd:x0(0x0000000000000000), rs1:x8(0xbd295ce2d2ffbec1), rs2:x24(0xf5adb41aa47d105b)
    TEST_RR_OP(pack, x0, x8, x24, 0x0000000000000000, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x1, 8, x2)

pack_01_inst_272:
    // Test 272:  Test with rs2 == x0
    // result rd:x25(0x00000000a8e1a8bb), rs1:x7(0xc9649f05a8e1a8bb), rs2:x0(0x82f6747f707af2c0)
    TEST_RR_OP(pack, x25, x7, x0, 0x00000000a8e1a8bb, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x1, 16, x2)

pack_01_inst_273:
    // Test 273:  Test with rs1 == x0
    // result rd:x26(0xe19bfbc300000000), rs1:x0(0x3541291848c99fcb), rs2:x22(0x73a92fd4e19bfbc3)
    TEST_RR_OP(pack, x26, x0, x22, 0xe19bfbc300000000, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x1, 24, x2)
	
#endif


RVTEST_CODE_END pack_01_code_end

// SM4KS SM4ED ramdom test
li x1,0x279bf9ecb155e5f5
li x2,0x722d8ed6156152e3
li x3,0x60b318a06e22471e
li x4,0x6a8c6e28ff301718
li x5,0x9ab4d3c9291b5fc4
li x6,0x96f296c3a2f55796
li x7,0x5515d1fd162eb73c
li x8,0x4c4815f4799618cb
li x9,0x25ae9dac41722127
li x10,0x9cf5a257b8ed72d1
li x11,0x571ea8cab5f89956
li x12,0xa3e6f52b8af2f6dc
li x13,0xa6208ae101ec9e03
li x14,0xb8552badf966192b
li x15,0x7f9f76a0eaef5d0a
li x16,0x9db174260a51cb4b
li x17,0x2d69cfe1af81b77f
li x18,0x53d67b029e1f47c2
li x19,0x6e7bb49ad829881b
li x20,0x17085b437778c7b
li x21,0x97dfcc7232c67502
li x22,0x1a1c3d9807d427e7
li x23,0xf50da5cf805816dd
li x24,0x141adb84f458e458
li x25,0x621fde87cc57a04f
li x26,0x841086f8b642c759
li x27,0x42becb56d6bed7aa
li x28,0x1d8f2fe1567ba749
li x29,0xe115ef33685d4a60
li x30,0x6f1b5fd121c71f60
li x31,0x2b5e831b78e489a
.int 0x34f48bb3
.int 0x743a00b3
.int 0xb4b505b3
.int 0xb4540833
.int 0x31dc82b3
.int 0x708585b3
.int 0xb5aa82b3
.int 0x71fa07b3
.int 0x35528033
.int 0x312383b3
.int 0xb42f0b33
.int 0xb1848db3
.int 0xf1308833
.int 0xf0078c33
.int 0xf4428f33
.int 0xb0c083b3
.int 0xb17f88b3
.int 0x35ce8ab3
.int 0x342308b3
.int 0xb0b100b3
.int 0xf5990633
.int 0x30398833
.int 0x34818cb3
.int 0xf01407b3
.int 0x300d8ab3
.int 0xb13f0eb3
.int 0xf4d808b3
.int 0x704a88b3
.int 0x34e480b3
.int 0xb12e05b3
.int 0xf42f89b3
.int 0x357d05b3
.int 0x74ca0eb3
.int 0xf5380833
.int 0xb4088333
.int 0x357d0833
.int 0xf1058533
.int 0x34328333
.int 0xb0e28b33
.int 0xb44105b3
.int 0x75250d33
.int 0x75060ab3
.int 0xf53d8333
.int 0x701a0533
.int 0xb4258bb3
.int 0xf5c90f33
.int 0x70a301b3
.int 0x30950e33
.int 0x70388db3
.int 0x300a8d33
.int 0x71e600b3
.int 0xf11806b3
.int 0x353405b3
.int 0xb5188c33
.int 0xf56f0eb3
.int 0xf19f82b3
.int 0x758606b3
.int 0x71978133
.int 0x74ff02b3
.int 0xf44e81b3
.int 0xb59d0833
.int 0xf0248ab3
.int 0xb07e82b3
.int 0x31af8bb3
.int 0xf0988033
.int 0xb0090bb3
.int 0x71990b33
.int 0x350a0f33
.int 0xf5a10c33
.int 0xf59a8033
.int 0xf5ff0333
.int 0x357988b3
.int 0xb4ea8cb3
.int 0x74cc08b3
.int 0x35c181b3
.int 0xb54d09b3
.int 0x355b0733
.int 0x311a81b3
.int 0x352c84b3
.int 0x313304b3
.int 0xb4d70b33
.int 0x316305b3
.int 0x30f90233
.int 0xb0b80e33
.int 0x702d0033
.int 0xb0e80333
.int 0x34928833
.int 0x75088233
.int 0xf57881b3
.int 0x74e50333
.int 0xb5e30233
.int 0x30e38b33
.int 0xb17e8db3
.int 0xf5fe8533
.int 0x708a8a33
.int 0x310c0b33
.int 0xb0a702b3
.int 0xb04f8a33
.int 0xb4420cb3
.int 0x710b09b3
.int 0xb57982b3
.int 0x30ea8cb3
.int 0xf10c08b3
.int 0x347d8733
.int 0xf0aa8f33
.int 0x71d40fb3
.int 0xb5e30a33
.int 0xb19c0bb3
.int 0x752080b3
.int 0x71b70f33
.int 0x30860bb3
.int 0x74570033
.int 0xb0890bb3
.int 0x300804b3
.int 0xb41201b3
.int 0xb1a80333
.int 0xb5030133
.int 0x713c8633
.int 0xb5b90633
.int 0x30eb0a33
.int 0x71da0fb3
.int 0x308d0333
.int 0x711887b3
.int 0xb19d8fb3
.int 0xf1a98233
.int 0x70f408b3
.int 0xb1af04b3
.int 0xb0ed0433
.int 0x35ec0ab3
.int 0xb59c0cb3
.int 0xf17b8a33
.int 0x34f881b3
.int 0x75348e33
.int 0xb1368a33
.int 0x30bb0c33
.int 0xf5598333
.int 0xf0af8333
.int 0x75690833
.int 0xf48c06b3
.int 0x70878eb3
.int 0xb15080b3
.int 0xf1150433
.int 0xf5b20733
.int 0x341809b3
.int 0x74a50db3
.int 0x350e8a33
.int 0x316a8d33
.int 0x757d0a33
.int 0xf1448433
.int 0x356a8433
.int 0x75b100b3
.int 0xb5d20233
.int 0x34c305b3
.int 0x35010433
.int 0x355a07b3
.int 0xb0e20e33
.int 0xf4a28fb3
.int 0xb5a88733
.int 0x31950633
.int 0xf40c86b3
.int 0x35a08133
.int 0x30ad04b3
.int 0x348c8bb3
.int 0x341581b3
.int 0x30320e33
.int 0x340405b3
.int 0xf0f10833
.int 0xb5e40033
.int 0x340e0e33
.int 0xb5eb06b3
.int 0x34650233
.int 0xf1c08c33
.int 0x712a85b3
.int 0x75ab8db3
.int 0x30700533
.int 0x70a80fb3
.int 0x345307b3
.int 0xb0be0733
.int 0xb0788cb3
.int 0x718f0eb3
.int 0xb5ae0933
.int 0x31f60433
.int 0xb4ee04b3
.int 0x342f0833
.int 0x30d50233
.int 0xb5ec08b3
.int 0xf4fb8fb3
.int 0x358a07b3
.int 0x34ec0a33
.int 0x71da0a33
.int 0xf1148db3
.int 0x35340933
.int 0xf0bb87b3
.int 0xf05e8133
.int 0xf12600b3
.int 0xf00c8bb3
.int 0xb1448333
.int 0xf0ed01b3
.int 0x315d09b3
.int 0xb4b10fb3
.int 0xb1ac8b33
.int 0xf0930b33
.int 0x74e18b33
.int 0xf10c8533
.int 0xb1ab8233
.int 0xb4090633
.int 0xf1be0333
.int 0xf0f70bb3
.int 0x70650ab3
.int 0xb1570f33
.int 0xb0fc0cb3
.int 0xf1e701b3
.int 0x752305b3
.int 0xb0e88f33
.int 0xb43e80b3
.int 0xf4d80733
.int 0xf5b38cb3
.int 0x34dd02b3
.int 0xb5b70733
.int 0xb5850433
.int 0xf4840ab3
.int 0x70f18d33
.int 0x31fb85b3
.int 0xf0f101b3
.int 0xb1ec8e33
.int 0x75c703b3
.int 0xb0cc8b33
.int 0x704f8533
.int 0xf4938733
.int 0x743f8f33
.int 0xf00c0a33
.int 0x71b40eb3
.int 0x318f09b3
.int 0x34710233
.int 0xf0118cb3
.int 0x34828cb3
.int 0xb1ef8133
.int 0xf41f8cb3
.int 0xb4cf85b3
.int 0xb4c78133
.int 0x74c90a33
.int 0xf4b90ab3
.int 0xb51f88b3
.int 0x34540db3
.int 0xb10e0133
.int 0xb14704b3
.int 0xb5850db3
.int 0x30028a33
.int 0xf4e183b3
.int 0x34ad82b3
.int 0xb45b8d33
.int 0x746309b3
.int 0x717f82b3
.int 0x756d0a33
.int 0xb50d8733
.int 0x312589b3
.int 0x34290933
.int 0x35fb03b3
.int 0xf1378f33
.int 0x70388633
.int 0x747f0b33
.int 0x34b88933
.int 0x704b8eb3
.int 0xb1510833
.int 0xf0878b33
.int 0x71078a33
.int 0x713085b3
.int 0x70f30d33
.int 0x313d04b3
.int 0xb50587b3
.int 0x756385b3
.int 0xb40f8c33
.int 0xf5588cb3
.int 0xb5068cb3
.int 0x34ab8a33
.int 0xb0418a33
.int 0x74230b33
.int 0x31590233
.int 0x34db02b3
.int 0xf0b68433
.int 0x705e8233
.int 0x31b78233
.int 0xf1d08f33
.int 0xf4a48433
.int 0x755c0933
.int 0xb09106b3
.int 0xb1628a33
.int 0x745d0533
.int 0x35a78d33
.int 0xb14d8133
.int 0x70d60333
.int 0x354e0cb3
.int 0x74810c33
.int 0xf48f0fb3
.int 0x30e40a33
.int 0x70f80eb3
.int 0x341388b3
.int 0x75400933
.int 0xf0fc0fb3
.int 0xb11c81b3
.int 0xf5898933
.int 0xb57300b3
.int 0xb57885b3
.int 0xf1bd0f33
.int 0x34ab8833
.int 0xf0cc8b33
.int 0x31c38833
.int 0xf4500fb3
.int 0xb0320c33
.int 0x352802b3
.int 0x31b203b3
.int 0x31ed0b33
.int 0xb48780b3
.int 0xb1ad81b3
.int 0x74f08933
.int 0xb01787b3
.int 0x707a0833
.int 0xf4308cb3
.int 0xf1218233
.int 0xb49f8733
.int 0xf55507b3
.int 0xb5190233
.int 0x74970eb3
.int 0xf57c0b33
.int 0xb1f38833
.int 0x743e8db3
.int 0xb0c782b3
.int 0xf0cf09b3
.int 0x35f20433
.int 0xf02e0ab3
.int 0xf4678db3
.int 0xb0788933
.int 0x34738133
.int 0x708c0ab3
.int 0x758e8433
.int 0x71f48db3
.int 0x70b28733
.int 0xf0238533
.int 0x314605b3
.int 0x74ad81b3
.int 0x30780833
.int 0xb14d0433
.int 0x30c78c33
.int 0x71b38833
.int 0x35c20033
.int 0xb1068133
.int 0x35cd00b3
.int 0x355e03b3
.int 0xb52f8cb3
.int 0x75790cb3
.int 0x745188b3
.int 0x71630eb3
.int 0xb12d8833
.int 0x30af08b3
.int 0xf4ca89b3
.int 0x355e0fb3
.int 0x71438333
.int 0x35730a33
.int 0xb5b285b3
.int 0xf54c8eb3
.int 0x71988733
.int 0xf4570e33
.int 0xb5e609b3
.int 0x71a30a33
.int 0xb5380433
.int 0xf1b80733
.int 0xb0c98733
.int 0xb5e80db3
.int 0xf1f58033
.int 0xb55b8333
.int 0x357b8e33
.int 0x706806b3
.int 0x307a8333
.int 0xf5fb0333
.int 0xb1940cb3
.int 0x740006b3
.int 0x70d78f33
.int 0xf0780433
.int 0x714d8833
.int 0xb11b0533
.int 0x71e40833
.int 0x34c80fb3
.int 0xf0490233
.int 0x70b48333
.int 0x34238a33
.int 0x75840e33
.int 0x70cd0533
.int 0xf58e89b3
.int 0xf1e688b3
.int 0xf1b18233
.int 0x31ac0733
.int 0x711e0db3
.int 0xf0a007b3
.int 0xb5ae0233
.int 0xb49d0eb3
.int 0xb0680eb3
.int 0x740504b3
.int 0xf0c10233
.int 0x30838033
.int 0x71150833
.int 0x71fc83b3
.int 0xf0fa8233
.int 0xf58b88b3
.int 0x75ca03b3
.int 0x717408b3
.int 0x71e58533
.int 0x708d0533
.int 0x34a700b3
.int 0x35280b33
.int 0xb18301b3
.int 0x74c188b3
.int 0xf06a0133
.int 0xb41c8033
.int 0xb0fd8833
.int 0xf4f20333
.int 0x70b40fb3
.int 0xf0a10833
.int 0x75760fb3
.int 0x70878433
.int 0xb4a307b3
.int 0xf06d0f33
.int 0xf12a80b3
.int 0xb0a709b3
.int 0xb00e00b3
.int 0xf0360133
.int 0xb5b58db3
.int 0x302888b3
.int 0xf02c0a33
.int 0xb0030ab3
.int 0xf1630533
.int 0x31b18333
.int 0xb5600233
.int 0x758481b3
.int 0x717000b3
.int 0xf5538ab3
.int 0x31c006b3
.int 0x75e70db3
.int 0x31990733
.int 0xb46e0933
.int 0xb4bc88b3
.int 0x709488b3
.int 0x742007b3
.int 0xb1700533
.int 0x74ed0533
.int 0x348a0c33
.int 0xf11000b3
.int 0xb4ba0933
.int 0x30dc87b3
.int 0xb0b381b3
.int 0xf5500b33
.int 0x705f08b3
.int 0x71538fb3
.int 0xb0ae0cb3
.int 0xf15b0cb3
.int 0xf48c8a33
.int 0x343d03b3
.int 0xf1f50633
.int 0xf1550933
.int 0x74e70033
.int 0xb12c8a33
.int 0x75698db3
.int 0x75b40333
.int 0xf0820433
.int 0xb5a08a33
.int 0x758701b3
.int 0xb1ab0033
.int 0x744e8733
.int 0x31588b33
.int 0xf50f06b3
.int 0xb0a98cb3
.int 0xb03c00b3
.int 0xf07408b3
.int 0x359b0433
.int 0x70528033
.int 0x30230eb3
.int 0x715a0533
.int 0xf17a8a33
.int 0x340a8333
.int 0x70da8db3
.int 0xf5570a33
.int 0x70330a33
.int 0x35418ab3
.int 0x34e001b3
.int 0xf0180833
.int 0xb12e8733
.int 0xb47f0ab3
.int 0xf1cc87b3
.int 0x75680233
.int 0xb59280b3
.int 0xb5b502b3
.int 0xf1a803b3
.int 0x30b60eb3
.int 0xb0e58233
.int 0xf01b0233
.int 0xb0430e33
.int 0xf0f202b3
.int 0xb4800a33
.int 0x30a482b3
.int 0x31b00bb3
.int 0xb0888a33
.int 0xb5670833
.int 0xb0b809b3
.int 0xf1c58933
.int 0x70330a33
.int 0xb1ad8e33
.int 0x754a8db3
.int 0xf1558ab3
.int 0x744e0033
.int 0x749c8ab3
.int 0x31d60833
.int 0x351e00b3
.int 0x74cc8eb3
.int 0xb0dc84b3
.int 0x34b08c33
.int 0x319c0ab3
.int 0xb49008b3
.int 0x30158233
.int 0xf4810033
.int 0x311e8fb3
.int 0xf5300fb3
.int 0x343806b3
.int 0xb59987b3
.int 0x74ff0eb3
.int 0xf4ea0033
.int 0x30fd09b3
.int 0x745a8133
.int 0x75e807b3
.int 0xf1140833
.int 0x75c70033
.int 0xb0310233
.int 0xb4090533
.int 0x35030fb3
.int 0xf1c00ab3
.int 0xb0338e33
.int 0xb4d90033
.int 0x30508033
.int 0x31c28333
.int 0xb4ff8d33
.int 0x30d38033
.int 0xb1780cb3
.int 0xf4308233
.int 0xf0020a33
.int 0xf4f68db3
.int 0x709a05b3
.int 0xf4dd85b3
.int 0x71198ab3
.int 0x301e0d33
.int 0xf4978c33
.int 0x31c60a33
.int 0xb45581b3
.int 0x315d8fb3
.int 0x341e8d33
.int 0xf0cf02b3
.int 0xb1608633
.int 0xf42908b3
.int 0x31ac8533
.int 0x34390bb3
.int 0xb1c90333
.int 0xf5b80d33
.int 0x350009b3
.int 0x354d8b33
.int 0xf4a48133
.int 0xb5008b33
.int 0x754e0333
.int 0x310b0233
.int 0xf4600d33
.int 0x35ae8fb3
.int 0xf46b8833
.int 0xb0bc03b3
.int 0x74be0e33
.int 0x343889b3
.int 0x71af0333
.int 0xb1f804b3
.int 0xf1290533
.int 0xf0160733
.int 0x34c68bb3
.int 0x75258eb3
.int 0x345c8433
.int 0x310e8f33
.int 0x744082b3
.int 0x30c209b3
.int 0x34740c33
.int 0x300c83b3
.int 0x71f48db3
.int 0x744705b3
.int 0x749c8a33
.int 0xb0120cb3
.int 0x70500233
.int 0xf4db0133
.int 0xb5a58db3
.int 0x71fe8833
.int 0xf53682b3
.int 0x70018db3
.int 0x75418533
.int 0xb0960f33
.int 0x74c28333
.int 0xf5498cb3
.int 0xf1670833
.int 0x714d8bb3
.int 0xf1c98133
.int 0xb0608433
.int 0x71cd8333
.int 0xb1bd0bb3
.int 0xf0d380b3
.int 0xf5e606b3
.int 0xb0638cb3
.int 0xb4ca07b3
.int 0xb4fc8ab3
.int 0xf4938fb3
.int 0xf04d8533
.int 0x74710bb3
.int 0xb10a89b3
.int 0xf5ac87b3
.int 0x31130cb3
.int 0xb18e0c33
.int 0xf01a0cb3
.int 0x34088d33
.int 0x342100b3
.int 0xb4530b33
.int 0x75f78a33
.int 0xf4f58cb3
.int 0xb0128c33
.int 0xb4418f33
.int 0xf42b8033
.int 0x35680033
.int 0x31cd04b3
.int 0xb07209b3
.int 0xf1ee85b3
.int 0x70390633
.int 0xf11e0233
.int 0xf0ef8333
.int 0x347084b3
.int 0x706689b3
.int 0x31fb0ab3
.int 0x30530633
.int 0x74548533
.int 0x31b28533
.int 0xf1b68233
.int 0x71a400b3
.int 0x751088b3
.int 0x305c0cb3
.int 0x31610833
.int 0xf0788133
.int 0x70150f33
.int 0x71a884b3
.int 0x757388b3
.int 0x71f481b3
.int 0x71260433
.int 0x71fd8fb3
.int 0xf5bf02b3
.int 0xb4aa8433
.int 0x712f8833
.int 0xf1240f33
.int 0x750201b3
.int 0x74ba0fb3
.int 0xb45e80b3
.int 0x34d908b3
.int 0xf02e0533
.int 0xf19680b3
.int 0xf05905b3
.int 0x31960933
.int 0xb4520633
.int 0xf5e302b3
.int 0xf0570933
.int 0x717889b3
.int 0xf1440733
.int 0x31c18f33
.int 0x75f70b33
.int 0xf07404b3
.int 0xf5ba07b3
.int 0x30fc0733
.int 0xb4210e33
.int 0xb4eb8633
.int 0xf0c702b3
.int 0x719e0cb3
.int 0xb04182b3
.int 0xf5928d33
.int 0x70350bb3
.int 0xb1f386b3
.int 0xf41c0833
.int 0x302b02b3
.int 0xb03901b3
.int 0x70180fb3
.int 0xf5240433
.int 0x344602b3
.int 0x351c8e33
.int 0xb42f84b3
.int 0x74b087b3
.int 0xb4ab8233
.int 0x305580b3
.int 0xf1af8db3
.int 0x74ec0db3
.int 0x35f783b3
.int 0x34540a33
.int 0x71bb0233
.int 0xf53308b3
.int 0x75a486b3
.int 0xf1f587b3
.int 0x75060e33
.int 0xf5950833
.int 0xf47f8933
.int 0xb4530c33
.int 0x35e98db3
.int 0xf5ab0733
.int 0xf4ed0433
.int 0xb02e02b3
.int 0x75dc88b3
.int 0x71298c33
.int 0xf19785b3
.int 0x35b98933
.int 0xb53e0cb3
.int 0xb4210e33
.int 0x34cf8bb3
.int 0xf1a68433
.int 0xb4250533
.int 0x304b0eb3
.int 0xf0430bb3
.int 0xb0448533
.int 0x71a20433
.int 0x31190833
.int 0xb4258db3
.int 0xb17b0a33
.int 0x71b508b3
.int 0x75de04b3
.int 0xf4428133
.int 0x30ca0e33
.int 0x75148b33
.int 0x712606b3
.int 0xf4138f33
.int 0xb1668933
.int 0x746d8fb3
.int 0x31e20733
.int 0x718c0db3
.int 0xf5120db3
.int 0x70c90e33
.int 0x71b50d33
.int 0x342706b3
.int 0xb5ed0cb3
.int 0xf1620533
.int 0x34f28033
.int 0xb12c0233
.int 0xf57f0d33
.int 0xb0f30db3
.int 0x701e8933
.int 0x31070eb3
.int 0x74888f33
.int 0xb54606b3
.int 0x71510a33
.int 0x758f0533
.int 0xf07885b3
.int 0x35aa0033
.int 0x343509b3
.int 0x31ac8d33
.int 0x75968933
.int 0x341884b3
.int 0x758b0833
.int 0xf1708333
.int 0x357f01b3
.int 0x357f0233
.int 0xb58d8433
.int 0xb4c587b3
.int 0x74a30933
.int 0xb08c0633
.int 0xf50086b3
.int 0xf1d50633
.int 0x75ad0fb3
.int 0x35880933
.int 0xb1ae0033
.int 0x350d8033
.int 0x31ed8f33
.int 0x711680b3
.int 0xb0e40533
.int 0xb15083b3
.int 0x34360433
.int 0xb0cf0b33
.int 0x716100b3
.int 0xf4278a33
.int 0x34bf8ab3
.int 0xb44400b3
.int 0xf00182b3
.int 0x30bd8833
.int 0xf52588b3
.int 0xb5100fb3
.int 0xf1278fb3
.int 0xf1408233
.int 0x34810733
.int 0x74350733
.int 0xf53300b3
.int 0x307f8d33
.int 0x74e98b33
.int 0x30408e33
.int 0xb4340db3
.int 0x75130833
.int 0x352e8133
.int 0xf4730233
.int 0xf49683b3
.int 0x30190633
.int 0xf0a686b3
.int 0x357284b3
.int 0x74e48eb3
.int 0x301906b3
.int 0xb02d8db3
.int 0xb45b04b3
.int 0x304089b3
.int 0xb5eb05b3
.int 0x70bf03b3
.int 0x35b20c33
.int 0x35130133
.int 0x34e48833
.int 0x35b40eb3
.int 0xb1340333
.int 0x757d0533
.int 0xf0010c33
.int 0xb46d0533
.int 0xb1198033
.int 0xb52789b3
.int 0xb0c787b3
.int 0x719a02b3
.int 0x750d0933
.int 0xb4f380b3
.int 0xf1fe86b3
.int 0x350d0e33
.int 0x702a8933
.int 0xf1fb8f33
.int 0xf4f28db3
.int 0x75878e33
.int 0xf1890d33
.int 0x31b50733
.int 0x71578133
.int 0xf1ae8f33
.int 0xf08b8833
.int 0x346307b3
.int 0x712d0633
.int 0x30a60cb3
.int 0x74830eb3
.int 0x302605b3
.int 0x71fa8a33
.int 0x34f005b3
.int 0x34d30eb3
.int 0x31270c33
.int 0xb0200633
.int 0xb4958c33
.int 0xf4818633
.int 0x71b88bb3
.int 0x312c8633
.int 0xf58d8633
.int 0xf0418333
.int 0xb1eb82b3
.int 0x30ad0bb3
.int 0xf5b98db3
.int 0xb0708cb3
.int 0x75c80d33
.int 0x70c802b3
.int 0x710b86b3
.int 0x71e106b3
.int 0x74ff8bb3
.int 0xb1470db3
.int 0xf57e0533
.int 0x318d0d33
.int 0xf1988b33
.int 0x713788b3
.int 0x703780b3
.int 0xf4968b33
.int 0xf0bb0233
.int 0x35f08d33
.int 0x75f90eb3
.int 0x71570033
.int 0x71708133
.int 0x75538a33
.int 0xb1668ab3
.int 0x344a01b3
.int 0xb1f400b3
.int 0xf0948833
.int 0xf4688533
.int 0x348d02b3
.int 0x34540533
.int 0x316a8333
.int 0xf01588b3
.int 0x75120fb3
.int 0xb1450a33
.int 0x75df0833
.int 0x749b02b3
.int 0x71748bb3
.int 0xf02c04b3
.int 0xb0768bb3
.int 0x709a85b3
.int 0x70508233
.int 0x71d107b3
.int 0xb0050cb3
.int 0xb06903b3
.int 0xb1370033
.int 0xf0160ab3
.int 0xf17b8b33
.int 0x30520bb3
.int 0xb5468233
.int 0x70ce09b3
.int 0x747305b3
.int 0x70060e33
.int 0x75d90533
.int 0x74978a33
.int 0xf4f28433
.int 0x30e603b3
.int 0xf4770ab3
.int 0x701f0133
.int 0x74338ab3
.int 0x35de84b3
.int 0x34cb86b3
.int 0xb14d8e33
.int 0xb19e06b3
.int 0xf4cd0fb3
.int 0x31458d33
.int 0xf0bf0f33
.int 0xb0b40ab3
.int 0x30948d33
.int 0xf4038ab3
.int 0xf0eb0cb3
.int 0x70468933
.int 0x35af01b3
.int 0xf1940bb3
.int 0xb4fb0d33
.int 0xf13f0f33
.int 0x704686b3
.int 0xb4200e33
.int 0xf1ae89b3
.int 0xb00c0f33
.int 0x716b83b3
.int 0x759f0533
.int 0xf0db89b3
.int 0x344a05b3
.int 0x71858833
.int 0xb4690133
.int 0xf51f0133
.int 0xb53209b3
.int 0x34728133
.int 0x751d06b3
.int 0x74a80d33
.int 0xf1868733
.int 0x70890233
.int 0xb4350433
.int 0xb58680b3
.int 0x71610733
.int 0xf4c08633
.int 0xf5f80a33
.int 0x748d8833
.int 0x35cc8833
.int 0x313f0733
.int 0xf4b18d33
.int 0x710f8133
.int 0xf57f0333
.int 0xf0768c33
.int 0xf0be8e33
.int 0xb48482b3
.int 0xb1100333
.int 0x31a58cb3
.int 0xf0db0bb3
.int 0x31c188b3
.int 0x300609b3
.int 0xb5d48c33
.int 0x71bb0533
.int 0x70a683b3
.int 0xf4ce03b3
.int 0xb5a40133
.int 0xb5e108b3
.int 0xb52200b3
.int 0x714c8cb3
.int 0x746788b3
.int 0xf5938333
.int 0x30f10fb3
.int 0xb4598ab3
.int 0xb00f0fb3
.int 0xf1928733
.int 0x30c58bb3
.int 0x74f780b3
.int 0x714500b3
.int 0xf0710eb3
.int 0x742785b3
.int 0x752c0933
.int 0x704c8333
.int 0xb4e10db3
.int 0xf5e60433
.int 0x701c8d33
.int 0x311a0cb3
.int 0xf14d02b3
.int 0x752c02b3
.int 0x31098bb3
.int 0xf0cb8433
.int 0x710c09b3
.int 0x756a0d33
.int 0x351a09b3
.int 0xf55f01b3
.int 0x34860bb3
.int 0x75318cb3
.int 0xb5c788b3
.int 0x71ce8233
.int 0xf0d608b3
.int 0xb0250933
.int 0xf51d0933
.int 0xb4c60d33
.int 0xf4030333
.int 0xf4368933
.int 0x71770ab3
.int 0xf19302b3
.int 0x74bf05b3
.int 0xf5128433
.int 0x35b20033
.int 0x318c8c33
.int 0xb4ba87b3
.int 0xb5c089b3
.int 0x34d18f33
.int 0xf17580b3
.int 0xf1eb87b3
.int 0xf12d09b3
.int 0x304e0933
.int 0xb08d85b3
.int 0xb4a28233
.int 0xb0030e33
.int 0x75ec01b3
.int 0x740c88b3
.int 0x31960a33
.int 0x35100b33
.int 0xb4b88833
.int 0x31b80f33
.int 0xb15684b3
.int 0x31b608b3
.int 0xb1b40fb3
.int 0x746c0933
.int 0xb5ff87b3
.int 0xb5d70ab3
.int 0xb12587b3
.int 0x71008533
.int 0x717e82b3
.int 0x31440eb3
.int 0xb42e0733
.int 0xb1bd8cb3
.int 0xf50c8db3
.int 0xb53a8e33
.int 0xf0a803b3
.int 0x30050fb3
.int 0xf51b8c33
.int 0x31380db3
.int 0x75a806b3
.int 0x703081b3
.int 0xf4e08fb3
.int 0x74f600b3
.int 0xf5d088b3
.int 0xf44e8433
.int 0xf19a09b3
.int 0x70e18633
.int 0xb4c18c33
.int 0xf4ba0e33
.int 0x71e78db3
.int 0x31b40333
.int 0xb0fa8433
.int 0xf0e98a33
.int 0x34e707b3
.int 0x31850633
.int 0x309600b3
.int 0x35d98c33
.int 0x75fd8233
.int 0xb5b489b3
.int 0xb1ef8a33
.int 0x35f507b3
.int 0x31440433
.int 0x75c48533
.int 0x31630833
.int 0xf01d85b3
.int 0x30fd0cb3
.int 0x701804b3
.int 0x75c58bb3
.int 0x30da02b3
.int 0x75da0733
.int 0x74c88533
.int 0x34688433
.int 0x304684b3
.int 0x700685b3
.int 0x30b700b3
.int 0x70450db3
.int 0xb5b804b3
.int 0x30bd8d33
.int 0xb5460fb3
.int 0x75378ab3
.int 0x303082b3
.int 0xf18d05b3
.int 0x355588b3
.int 0x70b78eb3
.int 0xb19904b3
.int 0xb53a0233
.int 0xf5308cb3
.int 0xf0858c33
.int 0xb41889b3
.int 0xf5b08533
.int 0xb4468f33
.int 0x31b283b3
.int 0x35dd87b3
.int 0x357f80b3
.int 0x308885b3
.int 0xf1fe0ab3
.int 0xb1b30f33
.int 0x35af8ab3
.int 0xf4ca81b3
.int 0x74e680b3
.int 0x314e8ab3
.int 0x308604b3
.int 0xb5530d33
.int 0x74c18bb3
.int 0xf5fa0db3
.int 0x346f0ab3
.int 0xb4d08733
.int 0xb1e60db3
.int 0x71eb0933
.int 0xf04084b3
.int 0x71300bb3
.int 0x701583b3
.int 0x70380fb3
.int 0x75790133
.int 0x30f18233
.int 0xf5b28c33
.int 0x71460c33
.int 0x35af8433
.int 0xf1270ab3
.int 0x30600133
.int 0xf0a284b3
.int 0x70600233
.int 0x74e087b3
.int 0x75d90333
.int 0xb4320233
.int 0x31168333
.int 0xf07105b3
.int 0x71fb06b3
.int 0xb1010433
.int 0x313a8633
.int 0xb4298e33
.int 0x35df88b3
.int 0x34b50733
.int 0xb15e84b3
.int 0x75648433
.int 0xb5f587b3
.int 0x355800b3
.int 0x71c40033
.int 0xb17680b3
.int 0x74950ab3
.int 0x744d8c33
.int 0x30eb8f33
.int 0xb07e0833
.int 0x749284b3
.int 0x717e0db3
.int 0xf01c07b3
.int 0x30aa8db3
.int 0xb13a0ab3
.int 0x34920f33
.int 0x70a006b3
.int 0x758c8b33
.int 0xf4c18fb3
.int 0x74090033
.int 0xb5f20533
.int 0x34db87b3
.int 0x70f48633
.int 0xf04c8533
.int 0xf4008eb3
.int 0xb4c786b3
.int 0xf0ba0e33
.int 0x70f00633
.int 0x34588bb3
.int 0x35cc85b3
.int 0x348507b3
.int 0xf1f00733
.int 0x714388b3
.int 0x30200f33
.int 0x303f0c33
.int 0xf58389b3
.int 0xf53f8333
.int 0xb4ad85b3
.int 0xb16a07b3
.int 0x35830233
.int 0xf4af04b3
.int 0xb44f8333
.int 0x71480833
.int 0xb5ca05b3
.int 0xf49d8733
.int 0xf4930933
.int 0x353980b3
.int 0x74df0333
.int 0x35e08ab3
.int 0xb5b88ab3
.int 0xb43b0c33
.int 0xf5a009b3
.int 0x754d0b33
.int 0x718b88b3
.int 0x30018eb3
.int 0x717b01b3
.int 0xf5590533
.int 0xb1c58733
.int 0xb54880b3
.int 0x30380533
.int 0xb0db03b3
.int 0xb4068633
.int 0x70790c33
.int 0x74150733
.int 0x70060033
.int 0x755e8c33
.int 0xf4c98533
.int 0xb5cb0233
.int 0xf06c0933
.int 0x71ae8733
.int 0x75b90e33
.int 0xb1930333
.int 0x31a288b3
.int 0x705e04b3
.int 0xf4a80733
.int 0x308c0c33
.int 0xb09a0c33
.int 0xb0af0233
.int 0xb4f783b3
.int 0x701500b3
.int 0x349a03b3
.int 0x719d0733
.int 0x30af03b3
.int 0xf08f8f33
.int 0xf52383b3
.int 0x74f180b3
.int 0x31fa00b3
.int 0x70170033
.int 0x719d83b3
.int 0x30888e33
.int 0x74e30633
.int 0xb5800cb3
.int 0xf53104b3
.int 0x742c0233
.int 0x35e00db3
.int 0x74e10c33
.int 0x75b08433
.int 0xf4a806b3
.int 0xf40789b3
.int 0xb46000b3
.int 0xb05d8e33
.int 0xf1160fb3
.int 0xb58e8db3
.int 0xb5c00233
.int 0x34240fb3
.int 0x74c301b3
.int 0xf5d28eb3
.int 0xf53b05b3
.int 0xf1bc01b3
.int 0xb4278e33
.int 0x710980b3
.int 0x30168333
.int 0xf5bf0033
.int 0x75838633
.int 0x318a81b3
.int 0x35f988b3
.int 0x70e106b3
.int 0x75018e33
.int 0xb1a28fb3
.int 0x347b0233
.int 0xb1f20933
.int 0x30608e33
.int 0x31bb8fb3
.int 0x758a82b3
.int 0x70d90cb3
.int 0x75c00fb3
.int 0x754683b3
.int 0xb5680033
.int 0xf5718733
.int 0xf0bc0333
.int 0x30d38533
.int 0x34840db3
.int 0xf4cd0e33
.int 0xb0760033
.int 0x707580b3
.int 0xf08f8233
.int 0xb53a85b3
.int 0x359a8733
.int 0xb59300b3
.int 0x358702b3
.int 0xf11481b3
.int 0x347005b3
.int 0xf46e0bb3
.int 0x74058433
.int 0x74248bb3
.int 0x310c0733
.int 0x70328233
.int 0xb1778c33
.int 0xb5238533
.int 0xf5108d33
.int 0x71eb06b3
.int 0xf42c01b3
.int 0xf0e005b3
.int 0x74368733
.int 0x70cd0933
.int 0xb5140b33
.int 0x755609b3
.int 0xb4ac8b33
.int 0xf5520633
.int 0xb4000f33
.int 0x74420733
.int 0xb0970833
.int 0xb4f184b3
.int 0xf1df83b3
.int 0xf1e407b3
.int 0x70ea0533
.int 0x715001b3
.int 0xf41607b3
.int 0x347989b3
.int 0x750a0db3
.int 0x702b8e33
.int 0x757d09b3
.int 0x30ac8433
.int 0xf0060c33
.int 0xf5768db3
.int 0xf10980b3
.int 0x74cc04b3
.int 0x70588ab3
.int 0xb4a80e33
.int 0xb5a88fb3
.int 0xb0ac8c33
.int 0x342089b3
.int 0x31df0333
.int 0xf0f501b3
.int 0x74f88fb3
.int 0x34768933
.int 0xf0ea8d33
.int 0xf15b8433
.int 0xb48b07b3
.int 0x70db02b3
.int 0x34168433
.int 0x71508333
.int 0xf0eb8eb3
.int 0x74b580b3
.int 0x700a0933
.int 0xb18d00b3
.int 0xf0e18933
.int 0x31250f33
.int 0x35230633
.int 0xf1a98eb3
.int 0xb50f8a33
.int 0x35650433
.int 0x35370fb3
.int 0x71db8733
.int 0xb0720cb3
.int 0x75fe8633
.int 0x75b402b3
.int 0xb4228fb3
.int 0x35298433
.int 0x34630bb3
.int 0x74ac0033
.int 0xf4a00bb3
.int 0x70008db3
.int 0x746d0fb3
.int 0xf41d8f33
.int 0x31a88233
.int 0xb14e0833
.int 0x75708033
.int 0x703486b3
.int 0xb09387b3
.int 0x349b88b3
.int 0x31700433
.int 0xf0628433
.int 0xb4a485b3
.int 0x318002b3
.int 0xb4ec8bb3
.int 0x34ec0233
.int 0x75578033
.int 0xf18601b3
.int 0xb5520d33
.int 0x31068fb3
.int 0xf59f0533
.int 0xb1110633
.int 0x313a0733
.int 0x708a8833
.int 0x30af08b3
.int 0x31e28233
.int 0x70728d33
.int 0x35680fb3
.int 0xb0298db3
.int 0xf0da0833
.int 0x30fd05b3
.int 0xb59f8f33
.int 0x30a60833
.int 0xf0a20cb3
.int 0x35cd8833
.int 0x75da8bb3
.int 0xf1a98bb3
.int 0xf41b02b3
.int 0xb52a0eb3
.int 0xb5df86b3
.int 0xb1740c33
.int 0xb0df81b3
.int 0xb1150733
.int 0xf59689b3
.int 0xb1de8533
.int 0x70de8e33
.int 0x70458633
.int 0xf15a0033
.int 0xb12d08b3
.int 0x30400ab3
.int 0x70928033
.int 0x75e58633
.int 0x31df0f33
.int 0x34680f33
.int 0xf0ed8eb3
.int 0x35fb0fb3
.int 0x754a01b3
.int 0xf1a10d33
.int 0x755085b3
.int 0x35bc8db3
.int 0xf19d0f33
.int 0x35680fb3
.int 0xf44a0333
.int 0xb1930db3
.int 0x355b06b3
.int 0xf16c8033
.int 0xf4370cb3
.int 0x750705b3
.int 0x308803b3
.int 0xb1f38833
.int 0x34e10533
.int 0xf5088633
.int 0x70da8a33
.int 0xb5c50633
.int 0x74620d33
.int 0x719308b3
.int 0x34cc8433
.int 0x34368633
.int 0xb1638133
.int 0x71ea0c33
.int 0x340184b3
.int 0x71288db3
.int 0x308107b3
.int 0x35248bb3
.int 0xf4ad80b3
.int 0x74a709b3
.int 0x75718fb3
.int 0xb5a08933
.int 0xb4638733
.int 0xb1690b33
.int 0x30418833
.int 0x744a0033
.int 0x75460333
.int 0x359f8633
.int 0x30e08433
.int 0x35a90833
.int 0xb13b8533
.int 0xf0da8933
.int 0x751b0ab3
.int 0x314f0833
.int 0xb1278133
.int 0xf12b0b33
.int 0x75de0ab3
.int 0xf44b0633
.int 0xb57d8db3
.int 0x31a80533
.int 0xb52789b3
.int 0xf18d8a33
.int 0x75d90f33
.int 0xb52e8db3
.int 0xf4fb8b33
.int 0xb49b0fb3
.int 0x74c40a33
.int 0x31d70eb3
.int 0x74c20433
.int 0xf5a80933
.int 0xf43c0a33
.int 0xb0708fb3
.int 0x75a98f33
.int 0xb0710233
.int 0xb5cf0f33
.int 0xb5358e33
.int 0xf4ca8bb3
.int 0xf4388b33
.int 0xb5bf0533
.int 0xf4da88b3
.int 0xf4e60b33
.int 0xf0688433
.int 0x747f0e33
.int 0x71da85b3
.int 0x302b0733
.int 0xb4b404b3
.int 0x707b06b3
.int 0xb1fd8233
.int 0xb15d08b3
.int 0xb0248433
.int 0x74a908b3
.int 0xb46d0733
.int 0x30458fb3
.int 0xb47388b3
.int 0xb56701b3
.int 0x35728b33
.int 0x711986b3
.int 0x35440233
.int 0x746381b3
.int 0x34d907b3
.int 0x34e50233
.int 0xb1b38fb3
.int 0xb0bb85b3
.int 0x74c987b3
.int 0xb1c90733
.int 0x304e8233
.int 0x703681b3
.int 0x349c8e33
.int 0xb12c06b3
.int 0xf57e8833
.int 0xf4e004b3
.int 0xf00d8433
.int 0x30288db3
.int 0x31dd86b3
.int 0x74d903b3
.int 0x71ec0c33
.int 0x30d98cb3
.int 0x71fa81b3
.int 0x305c0933
.int 0xf5a50333
.int 0x74550db3
.int 0xb45c0a33
.int 0xb4770733
.int 0xb0158c33
.int 0x318a0eb3
.int 0xb4450133
.int 0xb0c60eb3
.int 0x74a80633
.int 0x705f8a33
.int 0x70590eb3
.int 0x30368fb3
.int 0x35630433
.int 0xb1cd0db3
.int 0x71520a33
.int 0xf56d8933
.int 0x30db0b33
.int 0x746f02b3
.int 0x706e8333
.int 0x74868033
.int 0x35a60133
.int 0xf0710633
.int 0xb5c28a33
.int 0x71698033
.int 0xf09f8c33
.int 0x34bd89b3
.int 0x70140733
.int 0xb0820db3
.int 0xf0ec8433
.int 0xb1bf03b3
.int 0xf0690533
.int 0xb04602b3
.int 0xb0f409b3
.int 0x742709b3
.int 0xf1880d33
.int 0x30fd02b3
.int 0x709e0fb3
.int 0xf1fc0e33
.int 0xf0540f33
.int 0x30018a33
.int 0x30b501b3
.int 0x75aa0bb3
.int 0xb54106b3
.int 0x34620433
.int 0xb4180733
.int 0xf44a0ab3
.int 0xf44c87b3
.int 0x74e10ab3
.int 0xf1628933
.int 0xf5d283b3
.int 0xf1008db3
.int 0xf1a58c33
.int 0x745f8533
.int 0x34b784b3
.int 0xb1950833
.int 0x758d0cb3
.int 0xf5af84b3
.int 0x74b90ab3
.int 0x31db0e33
.int 0x75fc8eb3
.int 0xb07b08b3
.int 0xf4f586b3
.int 0x70468eb3
.int 0x356b86b3
.int 0xf5a007b3
.int 0x30a30833
.int 0xf4578633
.int 0xf5ce0b33
.int 0xf50386b3
.int 0xf07085b3
.int 0xf1ae0b33
.int 0xf1bc01b3
.int 0xf53a8933
.int 0x344f8733
.int 0x704a82b3
.int 0xb4cc06b3
.int 0xf0ef01b3
.int 0x35fa09b3
.int 0x717d8db3
.int 0x302004b3
.int 0xb05089b3
.int 0x30d38833
.int 0x757f8933
.int 0xb51f82b3
.int 0x31b10f33
.int 0x30508db3
.int 0x348e8133
.int 0xf1ee8ab3
.int 0xf51f06b3
.int 0x35cf8db3
.int 0x714000b3
.int 0xf1878e33
.int 0x75f58db3
.int 0x31d40db3
.int 0xb1d58e33
.int 0xb5f406b3
.int 0xb4238533
.int 0x303d0633
.int 0x70700333
.int 0xb05a03b3
.int 0xb5918933
.int 0x342f0833
.int 0xb48a8833
.int 0xb1c408b3
.int 0xb15a01b3
.int 0xf45c0db3
.int 0x34f60e33
.int 0xf0180bb3
.int 0x305a83b3
.int 0xf0340033
.int 0x700701b3
.int 0x753e8fb3
.int 0xf1130eb3
.int 0x74c785b3
.int 0x743c8533
.int 0x31870c33
.int 0x741e8db3
.int 0x346583b3
.int 0x70488cb3
.int 0xf16903b3
.int 0xb57f8c33
.int 0xb4d10333
.int 0xb0b685b3
.int 0x31c20533
.int 0xb1360c33
.int 0x34e702b3
.int 0xf41e86b3
.int 0x74720733
.int 0xf56b0eb3
.int 0xb55887b3
.int 0xb5d40833
.int 0x74d70133
.int 0xb0a608b3
.int 0xf0948db3
.int 0xf4290bb3
.int 0x756701b3
.int 0xb4a50033
.int 0xb45985b3
.int 0xf1a10833
.int 0x348a8a33
.int 0x70058cb3
.int 0x751c0cb3
.int 0x352307b3
.int 0x309b0fb3
.int 0x70a30cb3
.int 0xb4138b33
.int 0x74080c33
.int 0xf0720bb3
.int 0x34ea8b33
.int 0x745d87b3
.int 0x35e606b3
.int 0xb48008b3
.int 0xb4cb8233
.int 0xf0568f33
.int 0xf46903b3
.int 0xb18e0b33
.int 0x31c809b3
.int 0x75380b33
.int 0xf1c301b3
.int 0xb5d18433
.int 0xf14304b3
.int 0x34210033
.int 0x74f588b3
.int 0xb1d30933
.int 0xb1780233
.int 0x316f8533
.int 0x35b407b3
.int 0x347384b3
.int 0x354209b3
.int 0x70668033
.int 0x74a103b3
.int 0xb59b0433
.int 0xf58a0633
.int 0x318185b3
.int 0xf06f04b3
.int 0xf5040d33
.int 0xf4b50533
.int 0xb5b88633
.int 0x75930233
.int 0x35668f33
.int 0x70338db3
.int 0x312a8833
.int 0x343e06b3
.int 0x356f0bb3
.int 0xb56f87b3
.int 0x75800ab3
.int 0x30d18233
.int 0x30058733
.int 0xb02402b3
.int 0x319f8333
.int 0xf4dc01b3
.int 0xf0948ab3
.int 0x745e8933
.int 0xf1b28333
.int 0xf44e0633
.int 0x701d0233
.int 0xb09806b3
.int 0xb1b38f33
.int 0xb15a01b3
.int 0xf0ea8733
.int 0xb5520eb3
.int 0xb1b482b3
.int 0x71af06b3
.int 0xb40680b3
.int 0xb08b8cb3
.int 0xb4448cb3
.int 0x702b8533
.int 0x34910bb3
.int 0xb4208bb3
.int 0xb5da0333
.int 0x718600b3
.int 0xb5890bb3
.int 0xf18f05b3
.int 0x70cc8eb3
.int 0xb0310fb3
.int 0xb4ac0a33
.int 0xb5c88c33
.int 0xb44b0933
.int 0xb46303b3
.int 0x71c80cb3
.int 0xb53b00b3
.int 0x34b98a33
.int 0x75570c33
.int 0xf19f0233
.int 0x355984b3
.int 0xf5928a33
.int 0x74ad80b3
.int 0x35b087b3
.int 0xf40381b3
.int 0xb5440c33
.int 0x34028e33
.int 0xf4528f33
.int 0x357782b3
.int 0xb0240a33
.int 0x352205b3
.int 0xb0d981b3
.int 0x302f8833
.int 0x756b8633
.int 0x31e50eb3
.int 0xf47f8c33
.int 0x741f06b3
.int 0x30d48033
.int 0xf59d0833
.int 0x751501b3
.int 0xf43381b3
.int 0x71cb0833
.int 0xb0540ab3
.int 0xf09e0eb3
.int 0x356d8633
.int 0xf4438db3
.int 0xb02d8033
.int 0xb4a10733
.int 0x35ce07b3
.int 0xf5a109b3
.int 0x740389b3
.int 0x34a88b33
.int 0xf43a86b3
.int 0xf1d889b3
.int 0xf4590733
.int 0xf40a05b3
.int 0x71f90fb3
.int 0xb14689b3
.int 0x71e78bb3
.int 0xf53585b3
.int 0x75050eb3
.int 0x31de8cb3
.int 0xf1a10833
.int 0x75968c33
.int 0x75430db3
.int 0xf06805b3
.int 0xb1b28733
.int 0xf0ae0433
.int 0x71070f33
.int 0xf03a81b3
.int 0x305d8fb3
.int 0xb42907b3
.int 0x34720db3
.int 0xb0208db3
.int 0x30e90133
.int 0x31280fb3
.int 0x302180b3
.int 0x75698533
.int 0xb5d20a33
.int 0xb4718f33
.int 0xb4cb80b3
.int 0x30a70cb3
.int 0xb5f38b33
.int 0xb5c48833
.int 0x30d903b3
.int 0xf56e07b3
.int 0x75808fb3
.int 0x308a8eb3
.int 0xb46587b3
.int 0xb1b80e33
.int 0x30fd8db3
.int 0xf08a0eb3
.int 0xf5c78fb3
.int 0x753502b3
.int 0x30e103b3
.int 0x35290b33
.int 0x70018633
.int 0xf15f8733
.int 0xb5680bb3
.int 0xb03b0fb3
.int 0x34ec0533
.int 0xf10603b3
.int 0xb1540533
.int 0x35be0433
.int 0x342a87b3
.int 0x71418133
.int 0x35548133
.int 0xb42a0333
.int 0x317186b3
.int 0xb08b0bb3
.int 0xb5ca8733
.int 0x35eb0133
.int 0xb1b309b3
.int 0xb56d0133
.int 0xf1b98c33
.int 0x751b83b3
.int 0xf59a0033
.int 0x74e60533
.int 0xf52e01b3
.int 0xb5e50533
.int 0xf5bf0ab3
.int 0x35dc8e33
.int 0x340c8633
.int 0x71110ab3
.int 0x74fd8933
.int 0x34d10cb3
.int 0x715009b3
.int 0xb5290bb3
.int 0x74a18a33
.int 0xf1358433
.int 0x313d8133
.int 0x754283b3
.int 0x35360e33
.int 0x712584b3
.int 0x71c501b3
.int 0xf4c707b3
.int 0x300b8533
.int 0xb0278db3
.int 0xf5e002b3
.int 0xb5aa8333
.int 0x75820e33
.int 0x74ef0bb3
.int 0x30a706b3
.int 0xb11385b3
.int 0xf5470333
.int 0xf4398233
.int 0x70b205b3
.int 0xb5c50d33
.int 0xb42684b3
.int 0x342006b3
.int 0x34738b33
.int 0x71c88db3
.int 0xb5168233
.int 0x75938433
.int 0x71c88c33
.int 0x352602b3
.int 0xf50c0533
.int 0x70e58c33
.int 0x74e002b3
.int 0xf0c802b3
.int 0xf4bf8db3
.int 0xb1e183b3
.int 0xb49102b3
.int 0x74100833
.int 0x34500133
.int 0x71ed8133
.int 0xb17f8833
.int 0xb0828f33
.int 0xb4d100b3
.int 0xf54405b3
.int 0xb0010133
.int 0xb0e30833
.int 0x747e0833
.int 0xf4ae83b3
.int 0xf4e507b3
.int 0xb4b38733
.int 0x70cc0933
.int 0xb5ce8bb3
.int 0x70040033
.int 0x31810733
.int 0x315783b3
.int 0xf4bb0a33
.int 0x31688db3
.int 0xf4aa81b3
.int 0xf1c10c33
.int 0xb1ea05b3
.int 0xb1638db3
.int 0xb1f18b33
.int 0xf52902b3
.int 0xf4858633
.int 0xb4a38fb3
.int 0x355d0333
.int 0x70db84b3
.int 0xf1308fb3
.int 0x347406b3
.int 0x35a784b3
.int 0xb4248d33
.int 0xf5b60a33
.int 0x356c0f33
.int 0x35260033
.int 0x715100b3
.int 0xb4428b33
.int 0xf5460fb3
.int 0xb5b985b3
.int 0xf14e06b3
.int 0xf0428733
.int 0xf44901b3
.int 0x305f8d33
.int 0xf4fe0ab3
.int 0x71c508b3
.int 0x34848033
.int 0x34000233
.int 0xb1600d33
.int 0xf02c0733
.int 0x35a18b33
.int 0xb0a68233
.int 0xb4f18533
.int 0x74ee85b3
.int 0xf1d98233
.int 0x35628e33
.int 0x304e8eb3
.int 0x347b8ab3
.int 0xb0c402b3
.int 0xb1660db3
.int 0xf5798833
.int 0xf5188e33
.int 0x71b28bb3
.int 0x747f0c33
.int 0xf4590eb3
.int 0x35638e33
.int 0x34de05b3
.int 0x74488833
.int 0xf4bb01b3
.int 0x34148d33
.int 0xf54e8933
.int 0xb1918eb3
.int 0xb0c58133
.int 0x35090e33
.int 0xb1838d33
.int 0xf40b08b3
.int 0x70398cb3
.int 0xb43187b3
.int 0x706b03b3
.int 0x30c80233
.int 0x752b0333
.int 0x349109b3
.int 0xb19606b3
.int 0xf0968cb3
.int 0x31d98333
.int 0xb15802b3
.int 0x744b86b3
.int 0xf55b8333
.int 0xf5f407b3
.int 0xb1a981b3
.int 0xb5c58433
.int 0xb43382b3
.int 0xf5950b33
.int 0x310282b3
.int 0x31250ab3
.int 0xb55c0a33
.int 0xb42f02b3
.int 0x303480b3
.int 0x704e8233
.int 0xb4760db3
.int 0xf1af0733
.int 0xb0c183b3
.int 0xf1f88bb3
.int 0xb0358cb3
.int 0xb0b980b3
.int 0x71fd0733
.int 0x71158db3
.int 0xb1bc0f33
.int 0xf4cc0933
.int 0x34fa87b3
.int 0x302981b3
.int 0x308a8733
.int 0x717a0333
.int 0x75508db3
.int 0x34ae82b3
.int 0xf0290233
.int 0xb14881b3
.int 0x75d38233
.int 0x71308433
.int 0x349c0ab3
.int 0x71ea04b3
.int 0xb06285b3
.int 0xb05c0d33
.int 0xb0598533
.int 0x35c18db3
.int 0x75ac0533
.int 0xf00d0ab3
.int 0x750f05b3
.int 0xf45a8bb3
.int 0x712388b3
.int 0x30c48bb3
.int 0xb04c0633
.int 0x34ed0eb3
.int 0xf02d8533
.int 0xf4c38fb3
.int 0xb5268fb3
.int 0x30998e33
.int 0x74fb02b3
.int 0x342488b3
.int 0xf4330433
.int 0x35138e33
.int 0x75458133
.int 0x30c286b3
.int 0xb4d40b33
.int 0x31ca83b3
.int 0xf4ae8ab3
.int 0x702f8733
.int 0x31c68bb3
.int 0x71498e33
.int 0xf4180b33
.int 0x34168833
.int 0x75db0d33
.int 0xb50082b3
.int 0x35c080b3
.int 0xb0918933
.int 0xb5ac87b3
.int 0xf1eb85b3
.int 0x756980b3
.int 0xb4fe83b3
.int 0xb4bd8a33
.int 0xb1d20533
.int 0x31f50033
.int 0xb1f285b3
.int 0x75c00833
.int 0xb17e04b3
.int 0x35c80033
.int 0x74fa89b3
.int 0xf4bd8733
.int 0xb5248a33
.int 0xf5060db3
.int 0x741b86b3
.int 0x70ae8cb3
.int 0x30f302b3
.int 0xb10185b3
.int 0xf58c01b3
.int 0xb1cd8233
.int 0x355b8b33
.int 0x74470ab3
.int 0x34fe8233
.int 0xb43506b3
.int 0xb4330fb3
.int 0xb0ef07b3
.int 0xb4bc0e33
.int 0x71da0a33
.int 0xf4ac83b3
.int 0xb1a48a33
.int 0xf0cc83b3
.int 0xf0a90bb3
.int 0x356c83b3
.int 0xf1fa82b3
.int 0x706403b3
.int 0xb05180b3
.int 0xf46d86b3
.int 0xf4830ab3
.int 0x34358f33
.int 0xb5d90833
.int 0x74490ab3
.int 0x317706b3
.int 0x75378933
.int 0x70ce0db3
.int 0x70b20533
.int 0xf1e80e33
.int 0x30c50e33
.int 0x744608b3
.int 0x31b480b3
.int 0x75f781b3
.int 0x31dd8233
.int 0x70bf0a33
.int 0x348c0cb3
.int 0x70068cb3
.int 0x74688533
.int 0x74790bb3
.int 0x34b30833
.int 0x318b8833
.int 0x357f8eb3
.int 0xf1c20db3
.int 0xb5740db3
.int 0x31698033
.int 0xb0ca8533
.int 0xb5e30833
.int 0xf0d006b3
.int 0xb08880b3
.int 0x74480a33
.int 0x340b0733
.int 0x34b10433
.int 0x306d08b3
.int 0x350106b3
.int 0x701682b3
.int 0xb15d0fb3
.int 0x31d90a33
.int 0x705283b3
.int 0xb19f06b3
.int 0xf0830a33
.int 0x71d88733
.int 0xf11e80b3
.int 0xf4a98db3
.int 0xf5a20e33
.int 0xb4f28cb3
.int 0x30ad0fb3
.int 0xf4778e33
.int 0x71f00d33
.int 0x34d10533
.int 0xf1f203b3
.int 0xf5be87b3
.int 0xf1b88ab3
.int 0xf4410433
.int 0x708c8d33
.int 0x700883b3
.int 0x345c0633
.int 0x70e60133
.int 0x70ff8933
.int 0x309e0a33
.int 0x75c98bb3
.int 0xb5ab0233
.int 0x35240733
.int 0xf1bb8db3
.int 0xb5bc0e33
.int 0xb1a40ab3
.int 0xf1c101b3
.int 0x747e8533
.int 0xf56f8b33
.int 0xb1fd8cb3
.int 0x705e8533
.int 0xb5600133
.int 0x75320733
.int 0xb14f82b3
.int 0x35b08ab3
.int 0x31000433
.int 0xb0d68bb3
.int 0xb5d18d33
.int 0xb1ea8db3
.int 0x34b404b3
.int 0xb5670533
.int 0x70850cb3
.int 0x30c18133
.int 0xf1fe08b3
.int 0xf4cf81b3
.int 0x70450e33
.int 0x342202b3
.int 0x71850d33
.int 0x712588b3
.int 0xb11d0db3
.int 0xf5d30d33
.int 0x707f0533
.int 0x35878033
.int 0x31148833
.int 0xf0058a33
.int 0x740d0f33
.int 0xf1e78ab3
.int 0x31be01b3
.int 0xf53f0733
.int 0xf5180933
.int 0xb1de8bb3
.int 0x748387b3
.int 0x35e90c33
.int 0xf51d0bb3
.int 0x35d88033
.int 0x345d8e33
.int 0x71fc0fb3
.int 0x357809b3
.int 0x34308133
.int 0xb4c80733
.int 0xb58d0e33
.int 0xf4d78e33
.int 0xf1ae00b3
.int 0x71ea0633
.int 0x71bb0db3
.int 0xf0c10233
.int 0xf02a8ab3
.int 0x70670cb3
.int 0xf5900db3
.int 0x70c80f33
.int 0x70cf08b3
.int 0xb14588b3
.int 0xf1db87b3
.int 0xb1aa8bb3
.int 0xf5850433
.int 0xf4fb0433
.int 0x316f0ab3
.int 0xf0160fb3
.int 0xb0c782b3
.int 0xf48e8833
.int 0xb4c38ab3
.int 0x70250b33
.int 0xf1d88633
.int 0x350d00b3
.int 0xf4ec8c33
.int 0x709304b3
.int 0x71990eb3
.int 0xb57a0933
.int 0x35ae0433
.int 0xf4c308b3
.int 0x71358f33
.int 0xb5e20e33
.int 0x75888c33
.int 0x759785b3
.int 0x70670c33
.int 0xf00f86b3
.int 0x316c8db3
.int 0xf4b20bb3
.int 0x755b0b33
.int 0x71fd0fb3
.int 0xf4bd83b3
.int 0xb5bb0733
.int 0xf1058333
.int 0x303f08b3
.int 0x74048e33
.int 0x755403b3
.int 0x30ad0733
.int 0x305687b3
.int 0xb09c87b3
.int 0xb1798733
.int 0x358c8433
.int 0x70098bb3
.int 0xf1028e33
.int 0x70a78833
.int 0x35ec0e33
.int 0x751b0eb3
.int 0xb4ae8a33
.int 0x74dc8fb3
.int 0x741000b3
.int 0xf0fc82b3
.int 0x75520b33
.int 0x31e88733
.int 0x713380b3
.int 0x710d06b3
.int 0xb1768f33
.int 0xb15d8633
.int 0xf0ea8db3
.int 0x71498a33
.int 0x75c18d33
.int 0x34b48fb3
.int 0x74328db3
.int 0x31dd89b3
.int 0xf54d84b3
.int 0xb5a10a33
.int 0xb0718533
.int 0x74528f33
.int 0x308f8db3
.int 0xb5228e33
.int 0x304f8533
.int 0xf18c0c33
.int 0x709c0533
.int 0xb0860333
.int 0x74c68233
.int 0xb1d70b33
.int 0x35a186b3
.int 0x743586b3
.int 0x746d0433
.int 0x35820e33
.int 0xb5ee0433
.int 0xb1a380b3
.int 0xb4ec0fb3
.int 0xf4948533
.int 0xf1f90933
.int 0x35790233
.int 0x75d80233
.int 0x30118db3
.int 0x34d48533
.int 0x747483b3
.int 0x306b84b3
.int 0xb0490433
.int 0xf5668f33
.int 0x34610933
.int 0xb49c8033
.int 0x30cf8933
.int 0xb4fe0633
.int 0xb0468eb3
.int 0x71008533
.int 0xb0980733
.int 0xb09387b3
.int 0xf0bf0033
.int 0xf5448533
.int 0x75fe81b3
.int 0x34ec80b3
.int 0x74210cb3
.int 0xb45a0a33
.int 0xb0778433
.int 0x30a48033
.int 0xf19588b3
.int 0x342d8bb3
.int 0xb1ac00b3
.int 0xb56587b3
.int 0xb4668eb3
.int 0x742507b3
.int 0xb49c08b3
.int 0x358e8933
.int 0x309c86b3
.int 0x74190833
.int 0x353703b3
.int 0xf5670933
.int 0xf45a8333
.int 0x74de0f33
.int 0xf0108db3
.int 0x34a80f33
.int 0xf4f80c33
.int 0x35f30c33
.int 0xf0e78433
.int 0xf0528e33
.int 0x75cc8733
.int 0xf5278733
.int 0x716d0433
.int 0x744e8e33
.int 0xb1fb07b3
.int 0x31e08233
.int 0x710d0633
.int 0xb0a28433
.int 0xf0f181b3
.int 0x75fd08b3
.int 0xb5418433
.int 0x30f78a33
.int 0x34e08533
.int 0xf5798db3
.int 0x75ec8333
.int 0x71bd8f33
.int 0xf4d38cb3
.int 0x75f80fb3
.int 0xf1880d33
.int 0x74cb0b33
.int 0x700a83b3
.int 0x35fd86b3
.int 0xf5388533
.int 0xf5138833
.int 0x306e06b3
.int 0xf4348f33
.int 0x70c88033
.int 0x34838333
.int 0xb43f0eb3
.int 0xb19c81b3
.int 0xb15788b3
.int 0x740e8cb3
.int 0xb4c10433
.int 0x31e20ab3
.int 0x75988db3
.int 0xb06200b3
.int 0x75c00eb3
.int 0xf1c386b3
.int 0xb4220eb3
.int 0x740d88b3
.int 0x755b08b3
.int 0x71710433
.int 0x758587b3
.int 0x711c0f33
.int 0xf4b88f33
.int 0x71018833
.int 0x351c03b3
.int 0x300f0533
.int 0xf55604b3
.int 0xb59680b3
.int 0xf51904b3
.int 0xb1248eb3
.int 0xb59f0633
.int 0x30d10833
.int 0xf5038633
.int 0x319984b3
.int 0x34408ab3
.int 0xf0838e33
.int 0xf59d0533
.int 0xf10c0333
.int 0x748b8033
.int 0xf5e08ab3
.int 0x31488db3
.int 0x748d8533
.int 0x70660fb3
.int 0xf5b38b33
.int 0xf5268733
.int 0xb4da07b3
.int 0x318789b3
.int 0x753889b3
.int 0xf4e30e33
.int 0x74a50cb3
.int 0x700f0b33
.int 0x74998f33
.int 0xb5b10433
.int 0xb02b8f33
.int 0xf5838d33
.int 0xf0e789b3
.int 0x740e05b3
.int 0x34b88bb3
.int 0x350b0133
.int 0xf09e0a33
.int 0xb40f0b33
.int 0x71228ab3
.int 0x712e84b3
.int 0x74320133
.int 0xf17f0b33
.int 0x748a0db3
.int 0x341f84b3
.int 0x349a0e33
.int 0xb0c504b3
.int 0xf08586b3
.int 0x31a886b3
.int 0x357c04b3
.int 0xf1750b33
.int 0x305f0433
.int 0xb02c06b3
.int 0x30728a33
.int 0x70018733
.int 0xb1300db3
.int 0xb5128ab3
.int 0xb0b98ab3
.int 0xf1ae00b3
.int 0xf1aa81b3
.int 0x70458ab3
.int 0xf48102b3
.int 0xb0ed8033
.int 0x75f08333
.int 0xb51f0db3
.int 0x35ec0bb3
.int 0x30640e33
.int 0xf5158ab3
.int 0xf4480433
.int 0xb0ad00b3
.int 0x71780fb3
.int 0x70138533
.int 0x712b0ab3
.int 0xf10e8333
.int 0x30b083b3
.int 0x743c8633
.int 0xb0340333
.int 0xf0578a33
.int 0xf1130db3
.int 0xf1f20633
.int 0xf1de8e33
.int 0x71f70ab3
.int 0x713506b3
.int 0xf1f18633
.int 0xb10b8c33
.int 0xf10383b3
.int 0xf0358633
.int 0x34108d33
.int 0x71250a33
.int 0xf4a00133
.int 0x75790db3
.int 0x317505b3
.int 0xb1e58733
.int 0x750e8033
.int 0x30008633
.int 0x34058e33
.int 0x31c309b3
.int 0x306d80b3
.int 0x745c0133
.int 0x710d0a33
.int 0x754502b3
.int 0x743c8ab3
.int 0x30c68033
.int 0x300d0633
.int 0x703f8733
.int 0x74410ab3
.int 0xb55f0733
.int 0xf43800b3
.int 0xf5248db3
.int 0x31558f33
.int 0x70b809b3
.int 0xf0298733
.int 0xf1a882b3
.int 0xf45781b3
.int 0xb1f78033
.int 0x311b0933
.int 0xf08107b3
.int 0xb48302b3
.int 0x70fb81b3
.int 0xf4ed8b33
.int 0xf4328633
.int 0x74768db3
.int 0xf4698333
.int 0x756f8033
.int 0xb4f58e33
.int 0xb0a185b3
.int 0x31e20033
.int 0xb1118c33
.int 0x346c8233
.int 0x75fc00b3
.int 0x343403b3
.int 0x70430eb3
.int 0x31500db3
.int 0xb51d8633
.int 0x75be0fb3
.int 0x30050c33
.int 0x75518533
.int 0xb57287b3
.int 0xf4b98c33
.int 0x71ea0333
.int 0x30058fb3
.int 0x31f68533
.int 0xf56c8933
.int 0x31578db3
.int 0x35c204b3
.int 0x359e0433
.int 0x755c02b3
.int 0x71eb0533
.int 0xf0590c33
.int 0xb4140a33
.int 0xb15b8fb3
.int 0x71ca8c33
.int 0xf13b0733
.int 0xb40907b3
.int 0x35ca0933
.int 0x349a87b3
.int 0xf0d38533
.int 0x31270eb3
.int 0x343d8033
.int 0x70a00fb3
.int 0xb1b30633
.int 0x31c78333
.int 0xb4f28e33
.int 0xb1d38a33
.int 0xb0b28633
.int 0x743a0033
.int 0x351e88b3
.int 0xf0a08a33
.int 0xf5c881b3
.int 0xb48d8d33
.int 0xf5940d33
.int 0x750689b3
.int 0x308f8fb3
.int 0xf5f783b3
.int 0xb51081b3
.int 0x30db0633
.int 0x75570133
.int 0xb0c60f33
.int 0x30a58133
.int 0x30cb01b3
.int 0x712807b3
.int 0x30d80b33
.int 0x71ac0ab3
.int 0xb1550633
.int 0x357c0a33
.int 0x74e286b3
.int 0x75780ab3
.int 0xb4e60ab3
.int 0xf03e00b3
.int 0x753d07b3
.int 0xf5e78fb3
.int 0x75210333
.int 0xb1c98e33
.int 0xf4828bb3
.int 0x70898eb3
.int 0xb16686b3
.int 0xb0188533
.int 0xf54901b3
.int 0x71de07b3
.int 0xf53c8833
.int 0xf07a8c33
.int 0xb4f988b3
.int 0xb4ce01b3
.int 0xb4e00d33
.int 0x31478233
.int 0x34650bb3
.int 0x35e407b3
.int 0x75100733
.int 0x75258bb3
.int 0xb05f8133
.int 0x310c0433
.int 0x70c30333
.int 0xf5e48533
.int 0x71090fb3
.int 0xf5e60bb3
.int 0xb0b380b3
.int 0x31428eb3
.int 0x74bb8cb3
.int 0xb1678733
.int 0x75528ab3
.int 0x743f8933
.int 0x34de0633
.int 0x753883b3
.int 0x759a0833
.int 0xf0c008b3
.int 0xb5030533
.int 0xb1ed0133
.int 0xb46d0033
.int 0xf50109b3
.int 0xf4880cb3
.int 0x719f0633
.int 0x75220c33
.int 0xb40780b3
.int 0xf16e03b3
.int 0xf40a83b3
.int 0x31fc00b3
.int 0xb1de0e33
.int 0xf4158a33
.int 0x301a89b3
.int 0xf47908b3
.int 0xf1b60733
.int 0x70678233
.int 0xb5fa0db3
.int 0xf58c8eb3
.int 0x31918433
.int 0xf57e0933
.int 0x31778db3
.int 0x350104b3
.int 0x707b01b3
.int 0x70260233
.int 0xb0e780b3
.int 0x71cb8b33
.int 0x70968533
.int 0xb46d8e33
.int 0x354e04b3
.int 0x74ab8e33
.int 0x75138833
.int 0xf0858bb3
.int 0x35428233
.int 0xb5158cb3
.int 0x31688d33
.int 0xf4ae0f33
.int 0x712f0ab3
.int 0xf1188333
.int 0x313a8e33
.int 0x758700b3
.int 0xf1e386b3
.int 0xf1898bb3
.int 0xf1760f33
.int 0xf04f0633
.int 0xb4058833
.int 0x35228533
.int 0x30b70c33
.int 0x34fe86b3
.int 0xb0828733
.int 0x318b84b3
.int 0x310b0533
.int 0x30070bb3
.int 0x34ec82b3
.int 0x70078633
.int 0x340582b3
.int 0xf16508b3
.int 0x306f0cb3
.int 0x75888733
.int 0x75d785b3
.int 0x34ca0b33
.int 0xb0e98133
.int 0xb58880b3
.int 0x719603b3
.int 0x70c00933
.int 0x74b68733
.int 0x70cf81b3
.int 0xf5448eb3
.int 0x741400b3
.int 0x71dc0f33
.int 0xf4788a33
.int 0xf0a70433
.int 0xf40084b3
.int 0xf1cc8533
.int 0x700f00b3
.int 0x34568233
.int 0xb5cb8033
.int 0x34a90eb3
.int 0xb5e90e33
.int 0xb1d10033
.int 0xf5850d33
.int 0xf5d78833
.int 0xf05188b3
.int 0x318602b3
.int 0x74ae8433
.int 0xf13b00b3
.int 0x34998ab3
.int 0xf4b58d33
.int 0x74608933
.int 0xf05382b3
.int 0xb1b10fb3
.int 0x30c401b3
.int 0x756a00b3
.int 0x718d8cb3
.int 0x30818633
.int 0xb5868833
.int 0x70e783b3
.int 0x30b403b3
.int 0xb0ce8b33
.int 0x30850e33
.int 0xf4230f33
.int 0xf5e80b33
.int 0x35e90b33
.int 0xf5498db3
.int 0xf4540833
.int 0x31fc07b3
.int 0x70a80e33
.int 0x31460733
.int 0xf1598fb3
.int 0x74980933
.int 0x345285b3
.int 0xf4b283b3
.int 0xf1008e33
.int 0xf54b0133
.int 0x74f38433
.int 0x305b81b3
.int 0x308b87b3
.int 0x31b00fb3
.int 0xf00b0ab3
.int 0xb4aa0933
.int 0xb4018fb3
.int 0x75bd0c33
.int 0x71be08b3
.int 0xb13a0eb3
.int 0x31550933
.int 0x35f78fb3
.int 0xb04e09b3
.int 0x705d84b3
.int 0x74db0033
.int 0xb4c28933
.int 0x31668633
.int 0x31780633
.int 0xb0080333
.int 0x710409b3
.int 0xb5fc0133
.int 0x30850ab3
.int 0xf1540b33
.int 0xf4b102b3
.int 0x359882b3
.int 0xb5f30cb3
.int 0xb56384b3
.int 0xf16e0eb3
.int 0xf4cc01b3
.int 0x34898ab3
.int 0xf45309b3
.int 0xb47d0933
.int 0xf02501b3
.int 0xb03a0333
.int 0x70580ab3
.int 0x755e0133
.int 0x357083b3
.int 0xb0568bb3
.int 0xf55b83b3
.int 0xf5ed84b3
.int 0xf45d0633
.int 0xf1b486b3
.int 0x31f284b3
.int 0xb4de0733
.int 0xf10b88b3
.int 0x31e30633
.int 0x30ed0533
.int 0xf0b201b3
.int 0xb0750133
.int 0x314682b3
.int 0xb59f0833
.int 0x71b40c33
.int 0xb1c400b3
.int 0x31420633
.int 0x719b0433
.int 0xb4348333
.int 0xb1b28a33
.int 0xf1c48833
.int 0x702102b3
.int 0xf4d60e33
.int 0x34d00333
.int 0xf4520433
.int 0xf4c88ab3
.int 0x74930e33
.int 0x341e0a33
.int 0x754a00b3
.int 0x75090c33
.int 0xf4e703b3
.int 0x319d8233
.int 0x355e0bb3
.int 0xb55c09b3
.int 0x31380c33
.int 0xf4198633
.int 0x30cc8333
.int 0x74ff04b3
.int 0xb0f08ab3
.int 0x34448333
.int 0x757f0933
.int 0xf0f184b3
.int 0xb0150733
.int 0x358704b3
.int 0xf1c38a33
.int 0xf1400433
.int 0xb0490133
.int 0xb13d0133
.int 0xf58e02b3
.int 0xf5c406b3
.int 0xf5d308b3
.int 0xf4fe02b3
.int 0x74ab0d33
.int 0x359b8833
.int 0x35ca87b3
.int 0x71638c33
.int 0xf55d0d33
.int 0xb5530133
.int 0xb1218633
.int 0xf12d8933
.int 0xb1148833
.int 0x71b981b3
.int 0xf1c68c33
.int 0x34c380b3
.int 0x75d00eb3
.int 0xb1940e33
.int 0xf03e0333
.int 0x70e307b3
.int 0x74f78933
.int 0xb1260133
.int 0x30f283b3
.int 0x75a980b3
.int 0x74d00cb3
.int 0x35cc8db3
.int 0xf18404b3
.int 0xf4c787b3
.int 0xf1c30133
.int 0x71c20a33
.int 0x31ea08b3
.int 0x34018ab3
.int 0xf5908633
.int 0xb1f48f33
.int 0x356201b3
.int 0x302a02b3
.int 0x31238433
.int 0xf4a482b3
.int 0x304386b3
.int 0x744f06b3
.int 0xf0ec8d33
.int 0x35b50133
.int 0xf13709b3
.int 0xb0870533
.int 0xf5730933
.int 0xf52b05b3
.int 0xb0740ab3
.int 0x70fa0133
.int 0xf5460d33
.int 0xf1018233
.int 0x742486b3
.int 0x71348ab3
.int 0xf0978033
.int 0x34eb8b33
.int 0xf0388ab3
.int 0xf00506b3
.int 0xf1638933
.int 0xf13d8133
.int 0xf05a0e33
.int 0xf01005b3
.int 0xb0e482b3
.int 0x705a0f33
.int 0xb40b0cb3
.int 0x75ea8633
.int 0xf4650433
.int 0x74328933
.int 0xb5630533
.int 0xb59e0db3
.int 0xb0848233
.int 0x353a8233
.int 0xb5230b33
.int 0xf1ec81b3
.int 0xf15d03b3
.int 0xb5e30a33
.int 0x355e07b3
.int 0xb10285b3
.int 0x74f383b3
.int 0xb5010fb3
.int 0xb4fc89b3
.int 0x75710d33
.int 0xb1140c33
.int 0x341f0033
.int 0x74a780b3
.int 0x35f48a33
.int 0xb55e03b3
.int 0x30b70bb3
.int 0xb0a58033
.int 0x70ec8933
.int 0xb03605b3
.int 0xf4050133
.int 0xf5858bb3
.int 0x70b60d33
.int 0x35e080b3
.int 0x30f706b3
.int 0xf1a30e33
.int 0xf1138c33
.int 0xf13807b3
.int 0xf18508b3
.int 0xb1c38633
.int 0x34218033
.int 0x71328333
.int 0xb0028e33
.int 0xb44783b3
.int 0xb5a78fb3
.int 0x304300b3
.int 0x71638333
.int 0x75ce8a33
.int 0xb54c8db3
.int 0xf1758e33
.int 0xb4bb0fb3
.int 0x710c8d33
.int 0x70200f33
.int 0xf5d186b3
.int 0xb00f0fb3
.int 0x31eb0333
.int 0x340e8833
.int 0xb4f58733
.int 0x745401b3
.int 0xb0b88f33
.int 0xf5080fb3
.int 0x70b10033
.int 0xf4be07b3
.int 0x359c02b3
.int 0x35ee8733
.int 0xb48801b3
.int 0x34730f33
.int 0x703c8933
.int 0xb1060533
.int 0xf4ae81b3
.int 0xb4cf8633
.int 0xb4c786b3
.int 0x35ce0833
.int 0x75970b33
.int 0x759287b3
.int 0x34398ab3
.int 0x70800db3
.int 0xb0d10833
.int 0xb05b88b3
.int 0xb0440833
.int 0xf0530333
.int 0x31cb85b3
.int 0xb1508a33
.int 0x75908a33
.int 0x70d58533
.int 0x300903b3
.int 0x30e10bb3
.int 0xf15b86b3
.int 0xb0078bb3
.int 0xb5f200b3
.int 0x740c8e33
.int 0xb4580633
.int 0xf50589b3
.int 0x34858eb3
.int 0xb0248d33
.int 0x71280933
.int 0xb5680cb3
.int 0xb1df8a33
.int 0x312c0fb3
.int 0x306b0533
.int 0x749607b3
.int 0xb12f0533
.int 0xb01f02b3
.int 0x340605b3
.int 0x71410ab3
.int 0x705d8e33
.int 0x31808cb3
.int 0xb4608a33
.int 0x70278433
.int 0xf57c0733
.int 0x74a402b3
.int 0x31aa0f33
.int 0x300403b3
.int 0xf4a40133
.int 0x34208c33
.int 0x34c903b3
.int 0x70a90fb3
.int 0xf05509b3
.int 0xf55987b3
.int 0x71188db3
.int 0x34cd8a33
.int 0xb0cd88b3
.int 0xb06482b3
.int 0xb5720a33
.int 0xf5da8533
.int 0xf1018bb3
.int 0xb50907b3
.int 0x310188b3
.int 0x312c07b3
.int 0xb51f06b3
.int 0xf1320fb3
.int 0x30bf01b3
.int 0x707182b3
.int 0xf0688bb3
.int 0xb1698eb3
.int 0x35530b33
.int 0x35bf8733
.int 0xf11b00b3
.int 0x340286b3
.int 0xf0ef8db3
.int 0x35e58c33
.int 0x75758e33
.int 0x701185b3
.int 0xf1b08a33
.int 0xb0dc8bb3
.int 0x308c09b3
.int 0xb01c8f33
.int 0xf4f40bb3
.int 0x35f78633
.int 0xb0270a33
.int 0xb0178c33
.int 0xf0150cb3
.int 0x707d80b3
.int 0x35588f33
.int 0xb0a68233
.int 0xb4ac8033
.int 0xf0368ab3
.int 0x319e8433
.int 0xf19501b3
.int 0x714b0933
.int 0xf08581b3
.int 0x35aa0db3
.int 0x30628233
.int 0x34978b33
.int 0x35ba8733
.int 0xb4860ab3
.int 0x30e70eb3
.int 0xf0290e33
.int 0x31828db3
.int 0x30858d33
.int 0xb1ff0533
.int 0x75c98d33
.int 0x74ea8bb3
.int 0xf49906b3
.int 0xf5b98ab3
.int 0x313903b3
.int 0xb5a98cb3
.int 0x74a68f33
.int 0x709d0833
.int 0x348c0233
.int 0xf01a88b3
.int 0xf5b78833
.int 0xf04e8033
.int 0xb1a58f33
.int 0xb5678233
.int 0x313202b3
.int 0x345c88b3
.int 0xb52b8133
.int 0x75668f33
.int 0x71998ab3
.int 0x311c00b3
.int 0xb5930833
.int 0xf4830733
.int 0x70ef09b3
.int 0x74010333
.int 0x74a987b3
.int 0x70048ab3
.int 0x34a90eb3
.int 0x70dc8633
.int 0xf5a28c33
.int 0xb5ca8033
.int 0x315b0ab3
.int 0xf1ef8fb3
.int 0xb5b90833
.int 0xf50702b3
.int 0xf5d60533
.int 0xb54e8133
.int 0x74880ab3
.int 0xb4bb8433
.int 0x75f78fb3
.int 0xb5100433
.int 0xf4cb0f33
.int 0xb0158e33
.int 0xf04f08b3
.int 0xf57482b3
.int 0x75e08333
.int 0x75aa0eb3
.int 0xb5890bb3
.int 0xb55a0233
.int 0xf05c8333
.int 0xb5c300b3
.int 0x702c00b3
.int 0xb0cb8b33
.int 0x35be8cb3
.int 0x34440533
.int 0xf04d0ab3
.int 0x75488b33
.int 0x342607b3
.int 0xb07502b3
.int 0xf5e10d33
.int 0x750b8433
.int 0xf45c8333
.int 0xf4c68e33
.int 0xf08c8cb3
.int 0xb4e887b3
.int 0xb01a8333
.int 0xb08f0533
.int 0x70e28bb3
.int 0xf59407b3
.int 0xf5660ab3
.int 0xf13a8833
.int 0xb48e8133
.int 0xf0620fb3
.int 0x30dc8bb3
.int 0xb5be00b3
.int 0xf4738233
.int 0xb50a8a33
.int 0x74a60f33
.int 0xf1b887b3
.int 0xb1d388b3
.int 0x34ed89b3
.int 0x74b505b3
.int 0xb1578733
.int 0x31b00cb3
.int 0xb51b8ab3
.int 0x34e30833
.int 0x70508c33
.int 0x75210cb3
.int 0x355b0eb3
.int 0xb5440ab3
.int 0xf5e48733
.int 0x34600933
.int 0x75e20e33
.int 0xf45f04b3
.int 0x74b10033
.int 0xf5790db3
.int 0x703a0733
.int 0xb1f28fb3
.int 0xf0510e33
.int 0xf17983b3
.int 0xf5b600b3
.int 0x70500ab3
.int 0xb55b00b3
.int 0x354909b3
.int 0x75cf8933
.int 0x71850433
.int 0x71de06b3
.int 0x75420cb3
.int 0x740807b3
.int 0x71f60133
.int 0x704c8933
.int 0xb5258933
.int 0x750e89b3
.int 0x747b8ab3
.int 0x30a98433
.int 0xb47c85b3
.int 0x70e20333
.int 0xf46100b3
.int 0x319b83b3
.int 0x70860ab3
.int 0x719f8033
.int 0xf1dc84b3
.int 0xf1018433
.int 0x75270033
.int 0xf43786b3
.int 0x755f0333
.int 0xb52307b3
.int 0x307d84b3
.int 0xb0d10633
.int 0x74818333
.int 0xb5990533
.int 0x31cd0533
.int 0x718303b3
.int 0x74ab8833
.int 0x353c06b3
.int 0x700c8733
.int 0xb0c281b3
.int 0xb18b0633
.int 0xf44d0fb3
.int 0xf5fd8f33
.int 0x300a8eb3
.int 0xf54687b3
.int 0x31828133
.int 0x70f78db3
.int 0xf19e88b3
.int 0x71058a33
.int 0x70b98ab3
.int 0x347281b3
.int 0x311a0c33
.int 0x70a087b3
.int 0xb4a18933
.int 0xb5e88bb3
.int 0xf05a8433
.int 0xb1518233
.int 0x34608633
.int 0x742b04b3
.int 0xf40f85b3
.int 0x71920133
.int 0xb1368fb3
.int 0xf00a02b3
.int 0x35b885b3
.int 0xb4540c33
.int 0x747804b3
.int 0x34d30d33
.int 0x70d188b3
.int 0xb45304b3
.int 0x75078b33
.int 0xf46c0533
.int 0xf54a0fb3
.int 0x70ca0433
.int 0x34da8533
.int 0xf49b0133
.int 0xb5f60533
.int 0x34ed06b3
.int 0x74e083b3
.int 0xf0c88a33
.int 0xb00b0c33
.int 0xb5248fb3
.int 0xf5808fb3
.int 0x31b208b3
.int 0x75118433
.int 0x305780b3
.int 0x31f785b3
.int 0xb1310733
.int 0xf4898eb3
.int 0x75468fb3
.int 0x316d8ab3
.int 0xf1308333
.int 0xf56c80b3
.int 0xf4a98533
.int 0x34ce89b3
.int 0x70c383b3
.int 0x34980f33
.int 0xb1c183b3
.int 0x30b48833
.int 0xb0e78333
.int 0x717504b3
.int 0x71618cb3
.int 0xf4200433
.int 0xb14783b3
.int 0xb48f87b3
.int 0xb1b40b33
.int 0x34e106b3
.int 0x71f709b3
.int 0xb4fd8433
.int 0x74318a33
.int 0x75b18eb3
.int 0xb53684b3
.int 0xf5950d33
.int 0xf4af81b3
.int 0x34748b33
.int 0x34ca0fb3
.int 0xf09a8933
.int 0xf1b98eb3
.int 0xb0a183b3
.int 0x70ab09b3
.int 0xb1b483b3
.int 0x355202b3
.int 0xf07b8bb3
.int 0x35d50b33
.int 0xf0d80433
.int 0x70448133
.int 0x71658e33
.int 0x718a8d33
.int 0xb1488eb3
.int 0x71bf8033
.int 0xf4eb8bb3
.int 0x31c501b3
.int 0x34bf82b3
.int 0x71d08db3
.int 0x357905b3
.int 0xf1b80833
.int 0xb0f686b3
.int 0x70a404b3
.int 0xb0b60633
.int 0xf56e8eb3
.int 0xb0320733
.int 0x30c48b33
.int 0x31b10833
.int 0xb5608133
.int 0x35528bb3
.int 0x746f88b3
.int 0x30b309b3
.int 0x741c82b3
.int 0x70b58433
.int 0x358d09b3
.int 0x31600133
.int 0xf4340033
.int 0xb1658b33
.int 0x305906b3
.int 0x317084b3
.int 0xb5208633
.int 0x31f30533
.int 0xb0450633
.int 0xf19a8233
.int 0xb43a0933
.int 0x706701b3
.int 0x74520ab3
.int 0x30ca0433
.int 0x70240a33
.int 0xf5c38f33
.int 0x70088733
.int 0xf1ed86b3
.int 0x71618a33
.int 0xb5a40e33
.int 0xf58287b3
.int 0x703e8933
.int 0xf04a89b3
.int 0x312f84b3
.int 0x31e801b3
.int 0xb01903b3
.int 0x305f06b3
.int 0xb04281b3
.int 0xf03b0cb3
.int 0xf1730133
.int 0xf5a405b3
.int 0x75e903b3
.int 0xf4d10633
.int 0x74800fb3
.int 0xb42f89b3
.int 0x31300933
.int 0xf5840033
.int 0x74d40ab3
.int 0x354208b3
.int 0xf00508b3
.int 0x74230933
.int 0xf4bb8433
.int 0xb51d8eb3
.int 0x740a0bb3
.int 0x35d80033
.int 0x34180fb3
.int 0x75930bb3
.int 0x754c83b3
.int 0x75b38c33
.int 0x31cc0233
.int 0xf4b40333
.int 0x35a58cb3
.int 0xf49a8ab3
.int 0x70460f33
.int 0xb0760933
.int 0x755700b3
.int 0xf4e78f33
.int 0x713587b3
.int 0xb5ca8033
.int 0xf5000a33
.int 0xb1398eb3
.int 0xb5f40533
.int 0x35538633
.int 0xb00b06b3
.int 0xf1ee81b3
.int 0xb4a58f33
.int 0xf5b28733
.int 0xb1a50eb3
.int 0xf1f38e33
.int 0xf4420ab3
.int 0x70a30933
.int 0xb14703b3
.int 0x30b607b3
.int 0x355e8b33
.int 0x31750db3
.int 0x74758cb3
.int 0xb50d0533
.int 0xf1168eb3
.int 0xf1ee8d33
.int 0x70a30db3
.int 0xb5340f33
.int 0x31d90333
.int 0xf15503b3
.int 0x719e0933
.int 0xf5248833
.int 0xb4040cb3
.int 0x74b88ab3
.int 0xb5018333
.int 0xb0de07b3
.int 0xf1db87b3
.int 0xb5f98733
.int 0x70120ab3
.int 0x34e40933
.int 0x35ac0ab3
.int 0x719a0333
.int 0x70230ab3
.int 0x35ab0033
.int 0x34eb8ab3
.int 0xb16789b3
.int 0x711b03b3
.int 0xb55d8933
.int 0x75840b33
.int 0xb17682b3
.int 0x707b0833
.int 0x74708cb3
.int 0xb1ee8133
.int 0x345a8733
.int 0x71f78e33
.int 0xf19a80b3
.int 0x70680ab3
.int 0x308605b3
.int 0x74ee8833
.int 0xb4f20533
.int 0x74ac8bb3
.int 0xb0430db3
.int 0xb18c0c33
.int 0x75b80933
.int 0x34168133
.int 0xf49d82b3
.int 0xf0dc8d33
.int 0xb0db8233
.int 0xf4bb8833
.int 0x30d18bb3
.int 0x74b08fb3
.int 0xf00687b3
.int 0xf1f988b3
.int 0xf5b886b3
.int 0xf5ee84b3
.int 0xf12d8d33
.int 0x352b00b3
.int 0xf4f08a33
.int 0xb1b586b3
.int 0x319b05b3
.int 0xf5af8cb3
.int 0xf5aa0933
.int 0x75618d33
.int 0x30ea09b3
.int 0xf4160a33
.int 0x703f84b3
.int 0x718f8333
.int 0xb1588233
.int 0xf1b38fb3
.int 0x31cc0533
.int 0xf1710733
.int 0x352a82b3
.int 0x713482b3
.int 0x301a8633
.int 0xf4b00cb3
.int 0xb5268b33
.int 0x707407b3
.int 0xb1ac8ab3
.int 0x75e207b3
.int 0x70820033
.int 0x71788ab3
.int 0x74538733
.int 0x70228c33
.int 0xb0488133
.int 0x31e20733
.int 0xb00b8533
.int 0x70160ab3
.int 0xf0fa80b3
.int 0xb02701b3
.int 0xf48d85b3
.int 0x35d607b3
.int 0x75cd8d33
.int 0xf0150e33
.int 0xf03a85b3
.int 0xf00d0f33
.int 0x31cf03b3
.int 0xf1a40333
.int 0xb44c80b3
.int 0xb1cb85b3
.int 0xf1858433
.int 0x35a784b3
.int 0x353a0c33
.int 0x717a05b3
.int 0x748800b3
.int 0xf19205b3
.int 0xb4778633
.int 0x703c00b3
.int 0xf51102b3
.int 0x753b0c33
.int 0x753e0bb3
.int 0x71da80b3
.int 0x31a50a33
.int 0xf44107b3
.int 0xb09a8833
.int 0x305680b3
.int 0xf12d05b3
.int 0xf59881b3
.int 0x30600233
.int 0xf1d20fb3
.int 0xb5fd8733
.int 0x30580cb3
.int 0x718e02b3
.int 0xf4b60033
.int 0x31868fb3
.int 0xf43d8633
.int 0x313b00b3
.int 0x303509b3
.int 0xf5ea8c33
.int 0x35758ab3
.int 0x713489b3
.int 0xf5cf0fb3
.int 0x745b8333
.int 0x704f09b3
.int 0x717f8d33
.int 0x30a20cb3
.int 0xb5070db3
.int 0xf10c0bb3
.int 0x357d0433
.int 0x759b0b33
.int 0xb46f8733
.int 0xf0d681b3
.int 0xb57f0bb3
.int 0x34108133
.int 0xf1318a33
.int 0xb5f784b3
.int 0xf1c185b3
.int 0xf0608833
.int 0x30b70c33
.int 0xf0af0eb3
.int 0x71140133
.int 0xf02f8233
.int 0xf4468c33
.int 0xf15c8c33
.int 0x35cb0d33
.int 0xb4ca04b3
.int 0xf49d80b3
.int 0xf44889b3
.int 0xb4f40233
.int 0x34ec8333
.int 0x75e08fb3
.int 0x318d0233
.int 0x752881b3
.int 0x70a48d33
.int 0xf5d80033
.int 0xb1380f33
.int 0x30148f33
.int 0x31930bb3
.int 0x34130e33
.int 0x74e18733
.int 0x34058233
.int 0xb0190e33
.int 0xf12e84b3
.int 0x70860db3
.int 0x71f50033
.int 0x31538cb3
.int 0xf59d8533
.int 0xb4c883b3
.int 0xb1a908b3
.int 0xf5bd04b3
.int 0xb5e684b3
.int 0x358585b3
.int 0xf5340db3
.int 0x75ed02b3
.int 0x74498333
.int 0x719381b3
.int 0x74290133
.int 0x352f00b3
.int 0xb17c03b3
.int 0xf17d8733
.int 0xb50804b3
.int 0x31888ab3
.int 0x34380eb3
.int 0x349208b3
.int 0x31ed85b3
.int 0xb54c0db3
.int 0xf4a20cb3
.int 0x745809b3
.int 0x30f389b3
.int 0x74c98ab3
.int 0xb04209b3
.int 0x35e78433
.int 0xf52f8833
.int 0xb16105b3
.int 0x35ab8433
.int 0x358f0633
.int 0x70328a33
.int 0x312f0ab3
.int 0x75dc8ab3
.int 0xf4610233
.int 0xf57a83b3
.int 0xf1cd0c33
.int 0xb1bd0bb3
.int 0x712903b3
.int 0xf00b00b3
.int 0x71e304b3
.int 0x75988f33
.int 0x34240833
.int 0xb03a0333
.int 0xf4e20a33
.int 0xb4288db3
.int 0xf0638233
.int 0x758d81b3
.int 0xb55d01b3
.int 0x70c50f33
.int 0xf1298833
.int 0xb4928233
.int 0x75780033
.int 0x31a88433
.int 0x701c8033
.int 0xb02583b3
.int 0x70d78233
.int 0xf0090533
.int 0xb52b0b33
.int 0x74ed07b3
.int 0x344b08b3
.int 0xf0ea8d33
.int 0x75eb05b3
.int 0xb5f28833
.int 0x312c0ab3
.int 0xb49c0733
.int 0x742000b3
.int 0xb4600a33
.int 0x718d8e33
.int 0xf4c083b3
.int 0xf50901b3
.int 0x30e385b3
.int 0x345b8733
.int 0x34b18db3
.int 0xb4430d33
.int 0x358d83b3
.int 0x75d08e33
.int 0xb0400433
.int 0xb5e88233
.int 0x35490833
.int 0x75220033
.int 0xf5eb00b3
.int 0xb0ae8733
.int 0x316f08b3
.int 0xb16c0db3
.int 0xb1640333
.int 0x74b184b3
.int 0x304e08b3
.int 0x74398033
.int 0xb1fb0db3
.int 0xf50c8cb3
.int 0xb1658bb3
.int 0xb5c08f33
.int 0x74448733
.int 0x71178b33
.int 0xb1cc0a33
.int 0x70358eb3
.int 0x755b02b3
.int 0xf02f85b3
.int 0x702b8533
.int 0x313f8e33
.int 0xb1930b33
.int 0x34f18f33
.int 0xb5ed00b3
.int 0x35900833
.int 0x71160733
.int 0x351c8833
.int 0x35e20e33
.int 0xf02904b3
.int 0xf0330e33
.int 0xb1d80b33
.int 0x71290d33
.int 0x750a8733
.int 0x70b88fb3
.int 0x75810c33
.int 0xb0ae0633
.int 0xf09a0633
.int 0xf4d20e33
.int 0xb09f05b3
.int 0x31d008b3
.int 0xf1a68f33
.int 0xf5e20c33
.int 0xb54d0cb3
.int 0xf17c8e33
.int 0xb46c0eb3
.int 0xb5c709b3
.int 0x75e88c33
.int 0xf5a482b3
.int 0xb1dd0bb3
.int 0xb4878933
.int 0x30a682b3
.int 0x711f0533
.int 0x30788eb3
.int 0x356488b3
.int 0xf07b0a33
.int 0xf1410bb3
.int 0x719e0cb3
.int 0x70c78733
.int 0x34e507b3
.int 0x71a80333
.int 0xb4c20d33
.int 0xb5058cb3
.int 0xf1c18ab3
.int 0xf0018a33
.int 0xb49f02b3
.int 0xb53181b3
.int 0x752909b3
.int 0xb1348eb3
.int 0xf50c01b3
.int 0x348a0db3
.int 0xb1dc0bb3
.int 0xf5ce09b3
.int 0xf11a04b3
.int 0xf1e20333
.int 0x712f03b3
.int 0xb54c00b3
.int 0x70308133
.int 0x74890bb3
.int 0xf0d60c33
.int 0x318209b3
.int 0xb1e88fb3
.int 0x753c0b33
.int 0x713b8b33
.int 0xf53b8a33
.int 0xf1850333
.int 0xf08c8133
.int 0x312f8433
.int 0x749681b3
.int 0xb5860c33
.int 0x71898db3
.int 0xb4b909b3
.int 0x74ff8433
.int 0x35fe8d33
.int 0xb0198bb3
.int 0x75a60033
.int 0xf02a0e33
.int 0xf5850033
.int 0x31b60fb3
.int 0x311788b3
.int 0xb4b686b3
.int 0xf18b8db3
.int 0x70ad8a33
.int 0x717d83b3
.int 0xb0e98c33
.int 0xf5238533
.int 0xf5ed0233
.int 0xf4ee0033
.int 0xb0010733
.int 0x31e60b33
.int 0xb4548833
.int 0xf12801b3
.int 0xb0e50f33
.int 0x740c0b33
.int 0xb4ea0e33
.int 0x74670eb3
.int 0x342a0c33
.int 0xb5568333
.int 0xf4158f33
.int 0xb5388cb3
.int 0xb0f98eb3
.int 0xb0e60db3
.int 0x755288b3
.int 0xf4c805b3
.int 0x35ed0eb3
.int 0xf5b106b3
.int 0x743607b3
.int 0x74ad0cb3
.int 0xf1358833
.int 0xb0190633
.int 0x309f86b3
.int 0x34f58233
.int 0x315985b3
.int 0xb0b685b3
.int 0xb19b03b3
.int 0xf16606b3
.int 0x75190933
.int 0xf4a20533
.int 0xf1d18ab3
.int 0x30b98ab3
.int 0xf1cb89b3
.int 0x74490c33
.int 0xf5d10eb3
.int 0xb5b48133
.int 0x35d98c33
.int 0xb12b8533
.int 0xf48183b3
.int 0xb0b20033
.int 0xb13c83b3
.int 0x300b8c33
.int 0xf44608b3
.int 0x74c78c33
.int 0x35760a33
.int 0x35de0333
.int 0xb48c8db3
.int 0x346109b3
.int 0xb1bc81b3
.int 0x75ac0733
.int 0xf4c90db3
.int 0xb0b30333
.int 0x30eb88b3
.int 0xf4268733
.int 0xf49c0eb3
.int 0xf17509b3
.int 0x307e81b3
.int 0xf5a10533
.int 0x717b02b3
.int 0x35928833
.int 0xf5bf8833
.int 0x30280733
.int 0x74710433
.int 0xb13f89b3
.int 0x75a50833
.int 0x750883b3
.int 0x31e38133
.int 0xf1b40533
.int 0xb59d0c33
.int 0x31ad8433
.int 0x70e881b3
.int 0xf10187b3
.int 0x34bd08b3
.int 0x34b903b3
.int 0xf18b0333
.int 0x34910633
.int 0xb1cb8e33
.int 0xb0c68ab3
.int 0xf19f8833
.int 0x34128933
.int 0xf46e80b3
.int 0x702a0433
.int 0xf47e0333
.int 0xb5960c33
.int 0x348c8d33
.int 0x31590e33
.int 0x75400a33
.int 0x34698733
.int 0xf4268433
.int 0xb5e48633
.int 0x754084b3
.int 0x74e08733
.int 0xf03b06b3
.int 0x75460333
.int 0xf4218bb3
.int 0xb4bd0633
.int 0xb4f880b3
.int 0x34e78f33
.int 0xb4fe02b3
.int 0xf05a8d33
.int 0x756580b3
.int 0xb17d0cb3
.int 0xb42c8133
.int 0x35f406b3
.int 0xf5430f33
.int 0x359b8cb3
.int 0x359a8d33
.int 0xb03b0fb3
.int 0x715080b3
.int 0xf47c0fb3
.int 0xb17385b3
.int 0x74f10933
.int 0x70fb8bb3
.int 0x71bc0833
.int 0xf1228db3
.int 0xf55c01b3
.int 0x74c50d33
.int 0x75b382b3
.int 0xf09a09b3
.int 0xf1448233
.int 0xf06c09b3
.int 0xb11a0bb3
.int 0xb53a85b3
.int 0xb0650433
.int 0xf54680b3
.int 0xf1f18bb3
.int 0x70180033
.int 0xf5a58433
.int 0xb5cb8ab3
.int 0x30300533
.int 0xf1390fb3
.int 0x759986b3
.int 0xf4330733
.int 0xb4f40db3
.int 0xb5bd83b3
.int 0xb4328c33
.int 0xb42b07b3
.int 0x352f01b3
.int 0xf53682b3
.int 0xf5e88b33
.int 0x75248f33
.int 0x35ea0fb3
.int 0xf19e0533
.int 0x74f985b3
.int 0xb02988b3
.int 0xb0780d33
.int 0x70ab0033
.int 0xb0b80033
.int 0x746b8bb3
.int 0xf57a0f33
.int 0x712d80b3
.int 0xf0518233
.int 0xf1148533
.int 0xf49b0db3
.int 0xb0e18633
.int 0x35138333
.int 0x359a8e33
.int 0x70df8db3
.int 0xf12c0533
.int 0x71400033
.int 0x31598c33
.int 0x308a06b3
.int 0x70408333
.int 0xb0a30233
.int 0xf5f78f33
.int 0xf5b789b3
.int 0x742582b3
.int 0x30a207b3
.int 0x75d507b3
.int 0x747a0d33
.int 0x34b003b3
.int 0x31778b33
.int 0x70f90d33
.int 0x70b68c33
.int 0xf0970133
.int 0x31220733
.int 0xf46a09b3
.int 0x34270533
.int 0xb13181b3
.int 0x30e283b3
.int 0xb57f8033
.int 0xb18d8cb3
.int 0xb0a98433
.int 0xf59a88b3
.int 0x31f98533
.int 0x345c08b3
.int 0x304b0133
.int 0x30470fb3
.int 0xb1fd0d33
.int 0x345d05b3
.int 0xf5350db3
.int 0x755d03b3
.int 0xb05d83b3
.int 0x75480c33
.int 0x343e02b3
.int 0x34188d33
.int 0x71e78533
.int 0x30228e33
.int 0xf19e8533
.int 0x30dd04b3
.int 0x70f10233
.int 0x35588933
.int 0x71948db3
.int 0x712a8733
.int 0x30c789b3
.int 0x75e583b3
.int 0xf4320233
.int 0xb5a101b3
.int 0xf17f0db3
.int 0xb01487b3
.int 0x352883b3
.int 0x70648033
.int 0xb4ad0f33
.int 0x75878e33
.int 0x704d0233
.int 0xb4bd8533
.int 0x71bf82b3
.int 0x754a01b3
.int 0x351203b3
.int 0xb1b488b3
.int 0xb1eb05b3
.int 0xf4e382b3
.int 0x740d0bb3
.int 0xf0b907b3
.int 0x34f802b3
.int 0x706805b3
.int 0x307e0fb3
.int 0x305b8133
.int 0xf4e40bb3
.int 0x30a70c33
.int 0x756b8bb3
.int 0xb5230733
.int 0x31968c33
.int 0x70290f33
.int 0x74b506b3
.int 0xb5a68933
.int 0x757884b3
.int 0xf4630033
.int 0xb10d0033
.int 0x706007b3
.int 0xf43e8233
.int 0xb15281b3
.int 0xb4400533
.int 0x71f50cb3
.int 0x715b8db3
.int 0xf41d8fb3
.int 0xf4950633
.int 0x71fd0233
.int 0xf0b402b3
.int 0x303582b3
.int 0xf1e70b33
.int 0xf03684b3
.int 0xb0e30133
.int 0xf45e06b3
.int 0xf00a88b3
.int 0x313208b3
.int 0xb51f00b3
.int 0x70eb0b33
.int 0xb4bb82b3
.int 0x75d38e33
.int 0x752d82b3
.int 0x30690533
.int 0xf0608fb3
.int 0xf59c0133
.int 0x70a309b3
.int 0x31a60233
.int 0xf4fe0db3
.int 0xb18c8cb3
.int 0x30cb84b3
.int 0xf1600c33
.int 0xf5900133
.int 0x75b000b3
.int 0x30778e33
.int 0xf54d87b3
.int 0xf5ab09b3
.int 0x71cb8cb3
.int 0xf41c8833
.int 0xb4880933
.int 0xb47a0bb3
.int 0x71b90533
.int 0x35e60b33
.int 0xf43d89b3
.int 0xb13d84b3
.int 0xb4f00733
.int 0x709908b3
.int 0x303887b3
.int 0xb06300b3
.int 0xb5b88a33
.int 0xf16606b3
.int 0x71c580b3
.int 0x74400b33
.int 0xb0180033
.int 0xb53784b3
.int 0x35808eb3
.int 0x70508db3
.int 0xb5090f33
.int 0xf0d984b3
.int 0x30510933
.int 0xb0718cb3
.int 0xb55d8533
.int 0x31b703b3
.int 0x314a0bb3
.int 0xf53986b3
.int 0x717f85b3
.int 0x317709b3
.int 0x31c38b33
.int 0xf18c0e33
.int 0xb5290a33
.int 0xb5070633
.int 0x30c98a33
.int 0x700e0433
.int 0x302008b3
.int 0x714f8fb3
.int 0x70f60eb3
.int 0x35da8533
.int 0xf5b68f33
.int 0x71ba8533
.int 0xb50f8733
.int 0xb1650633
.int 0x30078433
.int 0xf40684b3
.int 0x745c01b3
.int 0x308c0233
.int 0xf1168333
.int 0xb4e70a33
.int 0x706b84b3
.int 0x759c06b3
.int 0xf1868a33
.int 0xb0838533
.int 0x71c209b3
.int 0x70e60133
.int 0x750406b3
.int 0xf0498c33
.int 0x34a80033
.int 0xf58a8333
.int 0xb18d09b3
.int 0x758880b3
.int 0x717b0433
.int 0x750f0633
.int 0xf17904b3
.int 0x74080033
.int 0x34ca8533
.int 0xf0f589b3
.int 0x354e83b3
.int 0x308b8333
.int 0xf1fa0cb3
.int 0x341e8433
.int 0xb0f70133
.int 0x31de86b3
.int 0xb59a0933
.int 0x344101b3
.int 0xb4cf8033
.int 0xb5a306b3
.int 0x752d0333
.int 0xb5f78133
.int 0xb51c0533
.int 0x75a08433
.int 0x70468033
.int 0x71e684b3
.int 0xf5058b33
.int 0x305d8b33
.int 0x31f28833
.int 0x75238eb3
.int 0xf5b788b3
.int 0xf40707b3
.int 0x30218933
.int 0x30030bb3
.int 0xb4520c33
.int 0xb4338f33
.int 0xf4eb0bb3
.int 0xf4ca8b33
.int 0xb5ab87b3
.int 0x342589b3
.int 0x70a281b3
.int 0xb5260d33
.int 0xf42303b3
.int 0xb4408f33
.int 0xf5d60833
.int 0x30270f33
.int 0x71028bb3
.int 0xf57586b3
.int 0x34e80033
.int 0xf0578033
.int 0x751b0f33
.int 0x341e0733
.int 0x31748ab3
.int 0xb1550633
.int 0x71c18f33
.int 0xf0190eb3
.int 0xb0f886b3
.int 0xb5340333
.int 0xf4290933
.int 0xb1990233
.int 0xb4e70db3
.int 0x30a887b3
.int 0xf54c00b3
.int 0xf03504b3
.int 0xf07b07b3
.int 0xf41188b3
.int 0x75a400b3
.int 0xf10a05b3
.int 0xf0710f33
.int 0xb0568bb3
.int 0xf48b0ab3
.int 0x30ea8eb3
.int 0xb19608b3
.int 0xb46f0333
.int 0xb50d0133
.int 0xf0520333
.int 0x35598e33
.int 0x705a03b3
.int 0xf48785b3
.int 0xb06d05b3
.int 0x309c8233
.int 0x308486b3
.int 0x74c30ab3
.int 0x30c085b3
.int 0x31af0833
.int 0x75d38ab3
.int 0xb5838ab3
.int 0xb4c40f33
.int 0xb1178ab3
.int 0xf5278b33
.int 0xf5bb84b3
.int 0x715788b3
.int 0x74b40933
.int 0x744400b3
.int 0x74fe0433
.int 0x74c70f33
.int 0x74bf0933
.int 0xf4210db3
.int 0x31a40ab3
.int 0xb4f583b3
.int 0x74b78433
.int 0xf5110433
.int 0xf0060633
.int 0x35ec8833
.int 0xb5b085b3
.int 0x35508233
.int 0xf11389b3
.int 0x758281b3
.int 0x310c8733
.int 0x707205b3
.int 0xf4f184b3
.int 0xb07d0133
.int 0xb0d38fb3
.int 0x35240333
.int 0xf03e04b3
.int 0xb42786b3
.int 0xb1b48fb3
.int 0xf50a0933
.int 0xf1d502b3
.int 0xf5d60d33
.int 0xf5270033
.int 0x745d0ab3
.int 0xb0d802b3
.int 0x758c0733
.int 0x75560733
.int 0xf4e300b3
.int 0x319e0fb3
.int 0x702e0033
.int 0xf1a98eb3
.int 0x702983b3
.int 0xf50202b3
.int 0x313a0633
.int 0x34b98d33
.int 0x34ee0db3
.int 0x31ec8d33
.int 0x34a706b3
.int 0x301c8533
.int 0xb0150933
.int 0xb48a85b3
.int 0xf15f0fb3
.int 0x31440d33
.int 0x74058d33
.int 0xf12c84b3
.int 0x749605b3
.int 0x742e89b3
.int 0x71808e33
.int 0xf1ac0f33
.int 0x75020633
.int 0xb5d48ab3
.int 0xf12689b3
.int 0x70820fb3
.int 0xf1fa09b3
.int 0xf1e30233
.int 0x35ea04b3
.int 0xf14e86b3
.int 0xb06b8c33
.int 0x752b88b3
.int 0x304a8633
.int 0x30948133
.int 0x74d70333
.int 0x71f705b3
.int 0xf00903b3
.int 0x71680d33
.int 0xb1d605b3
.int 0xf4e28b33
.int 0xf14804b3
.int 0xb18183b3
.int 0x70290ab3
.int 0x314c0fb3
.int 0xf4608033
.int 0xb41008b3
.int 0x712489b3
.int 0x31ff06b3
.int 0xb55002b3
.int 0xb1a70ab3
.int 0x34a98ab3
.int 0xb1c00233
.int 0xb48d88b3
.int 0x703a8f33
.int 0x31d60b33
.int 0x700c02b3
.int 0xb59d04b3
.int 0x75f60733
.int 0xf0d602b3
.int 0xf42008b3
.int 0x34f38d33
.int 0x701d8a33
.int 0x344486b3
.int 0x356909b3
.int 0x34e40633
.int 0xf50001b3
.int 0x30310133
.int 0x30970933
.int 0x70e18eb3
.int 0xf5530533
.int 0xf1048d33
.int 0xf03986b3
.int 0xb1100f33
.int 0xf47d0fb3
.int 0xb19c89b3
.int 0xb0c188b3
.int 0xb08d8a33
.int 0xb4e30a33
.int 0xf41083b3
.int 0xb1d18033
.int 0x342003b3
.int 0xf4cf8133
.int 0x752d03b3
.int 0x75b20fb3
.int 0xb1ff8e33
.int 0xb5fa0cb3
.int 0x70fd0833
.int 0x719100b3
.int 0x74ec8933
.int 0xf47e0033
.int 0x757784b3
.int 0x756902b3
.int 0x718086b3
.int 0xb1b181b3
.int 0xb0b185b3
.int 0x74f38ab3
.int 0xf4d00a33
.int 0xb5070fb3
.int 0xb5240733
.int 0x749f08b3
.int 0x755b06b3
.int 0xf1078a33
.int 0x751780b3
.int 0xb04684b3
.int 0xb4080533
.int 0xf1a38fb3
.int 0xb48a0fb3
.int 0x312d8133
.int 0x74c20a33
.int 0xf12680b3
.int 0xf55a0bb3
.int 0x71328133
.int 0x74550ab3
.int 0xf0bc8fb3
.int 0x714e8c33
.int 0x744b0d33
.int 0xf54c8fb3
.int 0xf13c08b3
.int 0x34c18bb3
.int 0x74ad0233
.int 0xb1fd0733
.int 0xf1a282b3
.int 0xf45b0233
.int 0xb59c0fb3
.int 0xb0268fb3
.int 0x708d81b3
.int 0x748c0ab3
.int 0x31c280b3
.int 0x357e8233
.int 0x74e00233
.int 0xf5ab85b3
.int 0xb42d8bb3
.int 0x759187b3
.int 0x75250f33
.int 0xb0180bb3
.int 0x35558bb3
.int 0xf1e10db3
.int 0xf0da0db3
.int 0x31c30033
.int 0x71db02b3
.int 0x75c40eb3
.int 0x74a782b3
.int 0x30bf0333
.int 0xb4af89b3
.int 0xb44c88b3
.int 0x35bc8c33
.int 0xb0e385b3
.int 0x74608533
.int 0xf4d78d33
.int 0xb1bb8ab3
.int 0x31190c33
.int 0xf17801b3
.int 0x304707b3
.int 0xb5018833
.int 0xb1bb06b3
.int 0xf19d0d33
.int 0xf44800b3
.int 0xb10300b3
.int 0x35ac8db3
.int 0x30ac8433
.int 0x34048a33
.int 0x30a98e33
.int 0x307e8433
.int 0x348d0433
.int 0xf14506b3
.int 0x349a05b3
.int 0xf41f89b3
.int 0xf5cc00b3
.int 0x30f602b3
.int 0x70fe0b33
.int 0x35f40533
.int 0x70848633
.int 0xb5620f33
.int 0xb1bf0ab3
.int 0xf05c0bb3
.int 0xf41283b3
.int 0xb5810333
.int 0xb4f58b33
.int 0xb1fd8d33
.int 0xf1d40cb3
.int 0x30468833
.int 0xf13485b3
.int 0x304e0c33
.int 0xb4668a33
.int 0xb5a50b33
.int 0x31730233
.int 0xb03b8b33
.int 0x745d89b3
.int 0xb5208eb3
.int 0xf48305b3
.int 0xf4d98f33
.int 0xb1d708b3
.int 0xf52f01b3
.int 0xf5978d33
.int 0xb4a88533
.int 0x31030bb3
.int 0xb11602b3
.int 0x71ed8533
.int 0x346485b3
.int 0xb1178b33
.int 0xf0510db3
.int 0x75f203b3
.int 0xb1a88c33
.int 0xb13386b3
.int 0xb53b8133
.int 0x747f8633
.int 0xf4350933
.int 0x74368333
.int 0x308582b3
.int 0x34808ab3
.int 0xf42802b3
.int 0x75a68bb3
.int 0xb0b90733
.int 0x74b10633
.int 0xb0a50133
.int 0xf11d87b3
.int 0x34ec8c33
.int 0x70e60333
.int 0xb1b80433
.int 0x70458333
.int 0x304502b3
.int 0xb1030533
.int 0x310b0cb3
.int 0x700c0e33
.int 0x75fc0eb3
.int 0xf58e0eb3
.int 0xb03300b3
.int 0x34fb8a33
.int 0x30250733
.int 0xf07580b3
.int 0xb11b0d33
.int 0xf5178bb3
.int 0x30400233
.int 0x754b84b3
.int 0x70db08b3
.int 0x356f8333
.int 0xb13e8733
.int 0x30848433
.int 0xf45b09b3
.int 0xb1518bb3
.int 0x74ea08b3
.int 0xf53e87b3
.int 0x307d88b3
.int 0xf13b8b33
.int 0xb4938433
.int 0xb5a885b3
.int 0xf0bc81b3
.int 0xb56a8733
.int 0x347c8933
.int 0x70560533
.int 0xf4408fb3
.int 0xb06b88b3
.int 0x35620fb3
.int 0x34d80fb3
.int 0x307f8233
.int 0xb08b08b3
.int 0xf03606b3
.int 0x712e0bb3
.int 0xb05b05b3
.int 0x75170433
.int 0xf4c089b3
.int 0xf19b0833
.int 0x353389b3
.int 0x715d0eb3
.int 0xf4b60eb3
.int 0x714204b3
.int 0xb1960c33
.int 0xf0338db3
.int 0x701989b3
.int 0x34d48bb3
.int 0xf4088a33
.int 0x34468033
.int 0x757a8633
.int 0xf4f789b3
.int 0xb1d68fb3
.int 0x75058d33
.int 0x74a98bb3
.int 0xf1158733
.int 0xf4248533
.int 0x316489b3
.int 0xb1678533
.int 0x700406b3
.int 0x750c8433
.int 0xf4fb87b3
.int 0xf19c8533
.int 0x71260f33
.int 0x748b0db3
.int 0xf53e0633
.int 0x35a688b3
.int 0xf02384b3
.int 0x35be8e33
.int 0xb5d484b3
.int 0xb02185b3
.int 0x74ba8533
.int 0x31d80333
.int 0xb57b0fb3
.int 0x35ec0eb3
.int 0xf51f0b33
.int 0xf05c02b3
.int 0x70068eb3
.int 0xf0b60e33
.int 0x31fc80b3
.int 0xf5c80533
.int 0xf0e000b3
.int 0xb4e602b3
.int 0x318103b3
.int 0xb40f88b3
.int 0xb1c606b3
.int 0xb12b0733
.int 0x759f8ab3
.int 0x34318433
.int 0xf1cb8c33
.int 0xf5a708b3
.int 0xb1608233
.int 0x310003b3
.int 0xb5980033
.int 0xf1fa0a33
.int 0xb4b90db3
.int 0xf4930933
.int 0x75ab0b33
.int 0x70590fb3
.int 0x743f0833
.int 0xb01188b3
.int 0x35f80a33
.int 0xb4258433
.int 0xf1b48933
.int 0x71c28233
.int 0x35550ab3
.int 0x31ab0533
.int 0xb55f0433
.int 0x31e28733
.int 0xb56c8f33
.int 0xb59a8333
.int 0x74f203b3
.int 0x740282b3
.int 0xb0858733
.int 0xf0d98e33
.int 0x319489b3
.int 0x708b8eb3
.int 0xf0c20c33
.int 0xb0380533
.int 0xb1d402b3
.int 0xb58d8a33
.int 0x34db0cb3
.int 0x74200ab3
.int 0x358e8eb3
.int 0xf1b28cb3
.int 0xb4808333
.int 0xf4008a33
.int 0xf58d0133
.int 0xb12f8a33
.int 0xb5ac8eb3
.int 0xf0d00ab3
.int 0x75ef0633
.int 0xb14f80b3
.int 0x34788d33
.int 0xb1b90c33
.int 0xf5c20f33
.int 0xf1100bb3
.int 0xb1840b33
.int 0xf41c0ab3
.int 0xb5c48633
.int 0x70fa09b3
.int 0x305f85b3
.int 0xb17700b3
.int 0x31a28eb3
.int 0x700d8ab3
.int 0x70c281b3
.int 0xb1468b33
.int 0xb1da85b3
.int 0x353b0933
.int 0x741483b3
.int 0x718b8b33
.int 0xf19b8fb3
.int 0xb5e58233
.int 0xb4738633
.int 0xf4f209b3
.int 0xb1c30233
.int 0x75cd0eb3
.int 0x30d782b3
.int 0xb13e07b3
.int 0xb5e98eb3
.int 0xb5c18533
.int 0xf0a28a33
.int 0x31008733
.int 0x309e85b3
.int 0x74838fb3
.int 0x719c8fb3
.int 0xb40e0bb3
.int 0x744f0eb3
.int 0x310c03b3
.int 0xf42e8333
.int 0x75cc8933
.int 0xf4950833
.int 0xf0d08eb3
.int 0xf0c38133
.int 0x70800cb3
.int 0xb5068b33
.int 0x35da8fb3
.int 0x31538933
.int 0x756b0bb3
.int 0x75980eb3
.int 0x30ec0bb3
.int 0xb02202b3
.int 0xf4368db3
.int 0x75ea04b3
.int 0xf08e8d33
.int 0x35cb8033
.int 0xf0e48f33
.int 0x755608b3
.int 0xf5be03b3
.int 0x34aa0ab3
.int 0x30350133
.int 0xf00389b3
.int 0xb1b385b3
.int 0x359600b3
.int 0x31718f33
.int 0x352c81b3
.int 0x315f0fb3
.int 0x75160933
.int 0xf5ed0233
.int 0x75f209b3
.int 0x71338833
.int 0xf4570e33
.int 0x30d400b3
.int 0xf48184b3
.int 0xf53c8933
.int 0x70d18233
.int 0xb1bc05b3
.int 0xf5f809b3
.int 0x75570fb3
.int 0x714987b3
.int 0x31e008b3
.int 0xb15d8233
.int 0xf5d000b3
.int 0xb0ae0db3
.int 0x758f8d33
.int 0xf55b0533
.int 0xb13a85b3
.int 0x353006b3
.int 0xf19a0033
.int 0xb1cc08b3
.int 0x30800fb3
.int 0x74d48633
.int 0xf1f402b3
.int 0x719d0db3
.int 0x30720333
.int 0xb07e8fb3
.int 0xb42084b3
.int 0x708e0eb3
.int 0xf0b001b3
.int 0xf5f88ab3
.int 0x313b81b3
.int 0xb1800933
.int 0x708a03b3
.int 0xb0a98733
.int 0xf5e10933
.int 0x31440933
.int 0x358404b3
.int 0x71bc00b3
.int 0x74cc04b3
.int 0xb5c788b3
.int 0xb0c507b3
.int 0xb09a8cb3
.int 0xb08385b3
.int 0x75b30b33
.int 0xf0c686b3
.int 0x704f88b3
.int 0xf52d8db3
.int 0xb5548bb3
.int 0xb4bc8a33
.int 0xb4808c33
.int 0xb1660633
.int 0x74948eb3
.int 0x75358933
.int 0x70e301b3
.int 0xb5100f33
.int 0x35d484b3
.int 0x34f28d33
.int 0x30af0733
.int 0x716580b3
.int 0xf06102b3
.int 0x71a08533
.int 0x75b403b3
.int 0xb0b68033
.int 0x712386b3
.int 0xf1940933
.int 0xb5f008b3
.int 0x71760bb3
.int 0x34a70fb3
.int 0xf1d68cb3
.int 0x34190cb3
.int 0x71bc8ab3
.int 0xb07001b3
.int 0xb5dc84b3
.int 0xb06201b3
.int 0x746e84b3
.int 0xb4f88db3
.int 0x340b0fb3
.int 0xb4d402b3
.int 0xf49002b3
.int 0xb4d80533
.int 0xf5e80fb3
.int 0xb10581b3
.int 0xb4e108b3
.int 0x71ef0e33
.int 0xf5c18033
.int 0xf41c8d33
.int 0xb1bf88b3
.int 0x75f18533
.int 0xf18e8f33
.int 0xf5158e33
.int 0xf1b40db3
.int 0xb09b85b3
.int 0xb5df0bb3
.int 0xb01d0933
.int 0xf4d80733
.int 0x74ad0133
.int 0x34000933
.int 0xf1040333
.int 0x70a00fb3
.int 0x35708e33
.int 0xb5018d33
.int 0xb1708d33
.int 0x349b87b3
.int 0x34160b33
.int 0xb5ef0433
.int 0xb44c0f33
.int 0xf1118a33
.int 0x34688533
.int 0x31da8ab3
.int 0x34e408b3
.int 0xb4ee0233
.int 0xb0390fb3
.int 0x31430033
.int 0x75838233
.int 0x71998db3
.int 0xb1c88db3
.int 0x701a8633
.int 0x70d104b3
.int 0xf0498e33
.int 0xf06f05b3
.int 0x315e0533
.int 0x34a206b3
.int 0x716681b3
.int 0xf00e83b3
.int 0xf0d38333
.int 0xf1018bb3
.int 0xb1e18cb3
.int 0xb01c08b3
.int 0xf0f98a33
.int 0x74328833
.int 0x703d8cb3
.int 0xb0db03b3
.int 0x75dd88b3
.int 0xb4d60c33
.int 0x71bf80b3
.int 0xb1f10633
.int 0xf4a282b3
.int 0xf0058133
.int 0x75e289b3
.int 0xf1a600b3
.int 0xb4f88f33
.int 0xb4488333
.int 0x31348633
.int 0x75fb8c33
.int 0xb03f8633
.int 0x74fd0333
.int 0xf50004b3
.int 0xf41509b3
.int 0x30ee8133
.int 0xb1010c33
.int 0x75030f33
.int 0xf52882b3
.int 0x35c582b3
.int 0xf13b8033
.int 0xf47a89b3
.int 0x759e0033
.int 0x70ab8fb3
.int 0x75b906b3
.int 0x74948f33
.int 0xb05e81b3
.int 0xf5e881b3
.int 0xb12e8333
.int 0xb5118933
.int 0xb0330bb3
.int 0xf59203b3
.int 0x352e8e33
.int 0xf0b58433
.int 0xf1b384b3
.int 0x713603b3
.int 0xb52b81b3
.int 0x74ec8433
.int 0xb55f8833
.int 0xf05e8c33
.int 0x702081b3
.int 0xf5330b33
.int 0x75a30533
.int 0xf0690c33
.int 0xb40f0933
.int 0xb5ae88b3
.int 0x35ce0ab3
.int 0x70628b33
.int 0xf0c08133
.int 0xb48c8a33
.int 0x31ce0db3
.int 0xf10f0933
.int 0x703e81b3
.int 0x71a884b3
.int 0xb0800633
.int 0x74550733
.int 0x70a18cb3
.int 0xf13303b3
.int 0xf4b78bb3
.int 0x74298033
.int 0xb5f78033
.int 0x748d86b3
.int 0xb51d85b3
.int 0xb0bd83b3
.int 0x754483b3
.int 0x311e8db3
.int 0x70b486b3
.int 0x34178733
.int 0xf05e0033
.int 0xb0c809b3
.int 0x700085b3
.int 0xf1140533
.int 0xb4ce8833
.int 0x75fa0733
.int 0xf0e68433
.int 0xb01f8533
.int 0xb0518533
.int 0x34c38433
.int 0xf5130633
.int 0xf4460333
.int 0x74ab89b3
.int 0x31e805b3
.int 0x31d70033
.int 0x71568f33
.int 0xb5170233
.int 0x75e48fb3
.int 0xb4578633
.int 0x75960433
.int 0x30508733
.int 0x74820633
.int 0x35c203b3
.int 0x71f90133
.int 0x35b30e33
.int 0x718887b3
.int 0x70198033
.int 0xf0cc04b3
.int 0xb17b04b3
.int 0x71ca07b3
.int 0x358287b3
.int 0x34e283b3
.int 0xb00687b3
.int 0x30ae8b33
.int 0xf57487b3
.int 0xb5e287b3
.int 0x71168633
.int 0x71530133
.int 0xb5988cb3
.int 0xb55c08b3
.int 0x301884b3
.int 0xf1ce00b3
.int 0x35a98833
.int 0x70880bb3
.int 0xf4630433
.int 0x75ef8e33
.int 0x71878c33
.int 0xf4d00b33
.int 0x71650333
.int 0x34f28733
.int 0xb1058e33
.int 0x34ef8fb3
.int 0xf5ba0233
.int 0xf1b10133
.int 0xf13d0e33
.int 0xb4b30d33
.int 0xf59986b3
.int 0xf0718733
.int 0xb5bd00b3
.int 0x716082b3
.int 0x31b88633
.int 0xf0aa8333
.int 0xf1fe8bb3
.int 0xb4278db3
.int 0x74398733
.int 0xb1350cb3
.int 0x317a02b3
.int 0xf4278133
.int 0x31b786b3
.int 0x304a0833
.int 0x75b303b3
.int 0xb5a40633
.int 0xb1868533
.int 0x70468e33
.int 0x71ca8eb3
.int 0x75de0eb3
.int 0xb1a80eb3
.int 0xb4e38833
.int 0x749489b3
.int 0x70f10cb3
.int 0x34da8833
.int 0x308e8eb3
.int 0x30b88a33
.int 0xf53a0a33
.int 0x347b8a33
.int 0x31e58433
.int 0xb0ab06b3
.int 0x30fa0133
.int 0x34dd8a33
.int 0x75728db3
.int 0xf05501b3
.int 0x35ce83b3
.int 0xf5a00633
.int 0x31e30c33
.int 0x71190e33
.int 0xf1c88533
.int 0xb45807b3
.int 0xb15d85b3
.int 0x34ba8233
.int 0xb0a48333
.int 0x31670a33
.int 0x740e04b3
.int 0x70e28ab3
.int 0xf5da8b33
.int 0xf1ba0133
.int 0xf0468ab3
.int 0x70180db3
.int 0xf0188f33
.int 0x356985b3
.int 0xb55e01b3
.int 0xf0050133
.int 0xf5640e33
.int 0x302907b3
.int 0x30e20533
.int 0xb5d90fb3
.int 0xf4178e33
.int 0x700b80b3
.int 0xb1478733
.int 0x343309b3
.int 0x35e40533
.int 0x75d60ab3
.int 0xb0af83b3
.int 0xf13103b3
.int 0x702c0e33
.int 0xf45f0933
.int 0xf07600b3
.int 0xf0e50633
.int 0x34050533
.int 0xb4e50a33
.int 0xf53b0db3
.int 0xb0388b33
.int 0xf4e68eb3
.int 0x306481b3
.int 0x34a18db3
.int 0x34ed8d33
.int 0xf1e308b3
.int 0x70b906b3
.int 0x759b8633
.int 0xb5240333
.int 0x31bd82b3
.int 0x75888733
.int 0x707982b3
.int 0x703c86b3
.int 0x75e78db3
.int 0xf56f08b3
.int 0xb56085b3
.int 0x710185b3
.int 0x71bf0f33
.int 0xf5508d33
.int 0xf19903b3
.int 0x75300bb3
.int 0x74e38bb3
.int 0x31de8433
.int 0x70e289b3
.int 0xf06f8233
.int 0x74050ab3
.int 0xb52605b3
.int 0xb12c8db3
.int 0x74e90bb3
.int 0x316b81b3
.int 0xf55f0fb3
.int 0xf05106b3
.int 0xb07e04b3
.int 0xf1878eb3
.int 0x74ea0cb3
.int 0x71c68633
.int 0xb4478cb3
.int 0xb12302b3
.int 0xf47e0933
.int 0x30788e33
.int 0x716805b3
.int 0x354b88b3
.int 0x34fd0633
.int 0x706a0033
.int 0xb5960433
.int 0xb5a605b3
.int 0x75320eb3
.int 0x31730133
.int 0x35f687b3
.int 0xb5a407b3
.int 0xf58b0433
.int 0xb0a30cb3
.int 0xb5cf8e33
.int 0xb0ea8c33
.int 0xf1d402b3
.int 0xb43100b3
.int 0x70870f33
.int 0x751a0a33
.int 0xf4310c33
.int 0x35e50233
.int 0xf1aa0133
.int 0x701d0b33
.int 0xb1c785b3
.int 0xb00b06b3
.int 0x748106b3
.int 0xb45208b3
.int 0xb5850033
.int 0xb4ef86b3
.int 0x30788f33
.int 0xf5790eb3
.int 0xb1130a33
.int 0x705e8bb3
.int 0xf57e8f33
.int 0xf1ca86b3
.int 0x342e0533
.int 0x71750bb3
.int 0x71f18933
.int 0xb5ed0d33
.int 0x744607b3
.int 0x34338133
.int 0x71eb0b33
.int 0xb05780b3
.int 0xb1ed05b3
.int 0x749e8633
.int 0x709789b3
.int 0xf04f0d33
.int 0x743204b3
.int 0x70b703b3
.int 0x70a90633
.int 0x74fe8cb3
.int 0xf1de81b3
.int 0xf1f40e33
.int 0x358589b3
.int 0x30138a33
.int 0xb12e8fb3
.int 0x756c0db3
.int 0xb1c88433
.int 0x71c68b33
.int 0x34a408b3
.int 0xf47607b3
.int 0xb5c580b3
.int 0x747405b3
.int 0x356a8033
.int 0x74b789b3
.int 0xb59b8a33
.int 0x715c0eb3
.int 0xf47a8833
.int 0x742d0e33
.int 0x30320133
.int 0x35e70eb3
.int 0xb5370333
.int 0x31f082b3
.int 0x30358eb3
.int 0x718c8ab3
.int 0x70c381b3
.int 0x302f8733
.int 0x74330333
.int 0xb0298833
.int 0xb1a406b3
.int 0x311b8f33
.int 0x70bb8cb3
.int 0x71598633
.int 0xf4330133
.int 0xf0000ab3
.int 0xf5200c33
.int 0x34380eb3
.int 0x31df8e33
.int 0xf56504b3
.int 0x751d0933
.int 0xf0c48b33
.int 0x71ab84b3
.int 0x31298533
.int 0xb0d00db3
.int 0x75ee8a33
.int 0xb0a10733
.int 0x30c58bb3
.int 0xb05406b3
.int 0x74c708b3
.int 0xf5230033
.int 0x34d80eb3
.int 0x306e8633
.int 0xb4f40f33
.int 0xf5b48fb3
.int 0xf4228533
.int 0x71d30e33
.int 0x701d0033
.int 0xb4d905b3
.int 0xb56a8233
.int 0xb4eb00b3
.int 0xf1f38e33
.int 0xf47f00b3
.int 0xb1988033
.int 0xf02f8733
.int 0x71ce83b3
.int 0xb5b68ab3
.int 0xb01e0ab3
.int 0x700f0bb3
.int 0x75e88d33
.int 0xb5340c33
.int 0xb5da8c33
.int 0x70138033
.int 0xb4650e33
.int 0xf47e09b3
.int 0x356182b3
.int 0x350b0633
.int 0xf5860eb3
.int 0xb0e48233
.int 0x30940a33
.int 0x35f20633
.int 0xf1ff8e33
.int 0x74c28f33
.int 0xf4920533
.int 0x340f8733
.int 0xb4c60c33
.int 0x702e8833
.int 0x756506b3
.int 0x71360f33
.int 0xb5fa8133
.int 0xb4a80e33
.int 0xb5d180b3
.int 0xf52e0c33
.int 0x748c8833
.int 0x31bd01b3
.int 0x35218e33
.int 0x314909b3
.int 0x75cc0333
.int 0x70a104b3
.int 0x35ce89b3
.int 0xf1f78033
.int 0xb59c0b33
.int 0x75420d33
.int 0x759309b3
.int 0xf08c8b33
.int 0x31ce0433
.int 0x31cf0133
.int 0xf1418d33
.int 0xb12c01b3
.int 0xf5a48233
.int 0xf4c58eb3
.int 0xf5f80c33
.int 0xb5a28e33
.int 0xf52c8833
.int 0xb45207b3
.int 0xb0290433
.int 0x70ae0cb3
.int 0xf54580b3
.int 0xf1958eb3
.int 0x70160433
.int 0x75ef01b3
.int 0xf07f03b3
.int 0xf15b0fb3
.int 0x74368f33
.int 0xb41d80b3
.int 0xf1078f33
.int 0xb4408fb3
.int 0x35838533
.int 0x30140c33
.int 0xf5d38933
.int 0x31bd0e33
.int 0xf1540f33
.int 0x717c8133
.int 0x303585b3
.int 0x70db02b3
.int 0x75a98933
.int 0x710d03b3
.int 0x750a8333
.int 0xf05284b3
.int 0x317a80b3
.int 0xf4d80333
.int 0x700f85b3
.int 0xf52b01b3
.int 0x71d10733
.int 0xb4c00fb3
.int 0xb4b50733
.int 0xf0988c33
.int 0xb0e986b3
.int 0x34258ab3
.int 0x34bc0833
.int 0x34198833
.int 0x719b07b3
.int 0x75070fb3
.int 0xf57189b3
.int 0xb12703b3
.int 0x35468033
.int 0xf5848e33
.int 0x34650233
.int 0x318303b3
.int 0x70158a33
.int 0xf10f8733
.int 0x71848e33
.int 0x35c58633
.int 0xb0eb8fb3
.int 0x318a0933
.int 0x315f8233
.int 0xf05e05b3
.int 0xf4830033
.int 0x70100db3
.int 0xb0578033
.int 0x350b03b3
.int 0xf42b08b3
.int 0xb47907b3
.int 0xf1ac8033
.int 0x35b00933
.int 0xf0df02b3
.int 0xb5c78433
.int 0x317081b3
.int 0x70520533
.int 0x317680b3
.int 0x34760333
.int 0x70ab0033
.int 0x74e88833
.int 0xf1e40933
.int 0x316a89b3
.int 0xb0ea0333
.int 0xf11e8eb3
.int 0xb5be0933
.int 0x34af0cb3
.int 0x70f70733
.int 0xb0948133
.int 0xb46380b3
.int 0x713a0f33
.int 0xb1130eb3
.int 0xb0cc89b3
.int 0x74788a33
.int 0x741d0033
.int 0x31b40c33
.int 0xf5658bb3
.int 0xb46f87b3
.int 0xb05b0933
.int 0x344d0933
.int 0x34458ab3
.int 0x715f8bb3
.int 0xf5aa0633
.int 0xb1710533
.int 0xf00d01b3
.int 0x705289b3
.int 0x304403b3
.int 0xb43182b3
.int 0x359e0db3
.int 0x741407b3
.int 0xf1ae0b33
.int 0xb0b987b3
.int 0xb0f20533
.int 0x71230cb3
.int 0x318f8b33
.int 0x35680c33
.int 0x35078db3
.int 0x31008133
.int 0xb17b07b3
.int 0xf19887b3
.int 0x302d0933
.int 0xb4a085b3
.int 0xb1070b33
.int 0xb1970d33
.int 0xf5ba8433
.int 0x34a40433
.int 0x304d0d33
.int 0xf54889b3
.int 0x714a0f33
.int 0xb0d905b3
.int 0x35858ab3
.int 0xb5528033
.int 0xb0a70233
.int 0xb4ab0133
.int 0x346586b3
.int 0x35a48533
.int 0xb0498db3
.int 0x30ad09b3
.int 0x702506b3
.int 0x71620ab3
.int 0x75838cb3
.int 0x30230b33
.int 0x741a08b3
.int 0x30da03b3
.int 0xb56f05b3
.int 0x35c60333
.int 0xb5138433
.int 0x74f78933
.int 0xb0f184b3
.int 0xb5720633
.int 0xf47d0cb3
.int 0xb4ce0cb3
.int 0x35f601b3
.int 0xb0cf01b3
.int 0x302c8ab3
.int 0x35098533
.int 0xb5000eb3
.int 0x30080f33
.int 0x35950db3
.int 0x70948d33
.int 0x30a984b3
.int 0x70618fb3
.int 0xb5ce8d33
.int 0xb0418933
.int 0x707387b3
.int 0x75260fb3
.int 0x316900b3
.int 0xf07a0eb3
.int 0x71218eb3
.int 0xf5078233
.int 0x35f600b3
.int 0x34400333
.int 0x741909b3
.int 0x354f88b3
.int 0x347205b3
.int 0x70d20e33
.int 0xb5dd84b3
.int 0xf46604b3
.int 0xf5120bb3
.int 0xb1a70033
.int 0x74c78933
.int 0x70020133
.int 0x351883b3
.int 0xf0040533
.int 0xf1258333
.int 0xf58387b3
.int 0xb52e8fb3
.int 0x31de0633
.int 0x34da0833
.int 0x34e380b3
.int 0xf4638833
.int 0xb52706b3
.int 0xf5880fb3
.int 0x70b80f33
.int 0xf1210533
.int 0x70620133
.int 0xf41d0933
.int 0xf19701b3
.int 0x752a8db3
.int 0x714d8db3
.int 0xf1968433
.int 0xb5bc0ab3
.int 0x357a0933
.int 0x354c0433
.int 0x74ec0fb3
.int 0xf1d40f33
.int 0x34ba8833
.int 0xb5a00a33
.int 0xb4990c33
.int 0xb4e30b33
.int 0x35358633
.int 0x343e0833
.int 0xf1528633
.int 0xb0a68eb3
.int 0xf45f08b3
.int 0xb01408b3
.int 0x75d70033
.int 0xf1678f33
.int 0x70ba8f33
.int 0xb1f90db3
.int 0x71190db3
.int 0x30868ab3
.int 0xb4e403b3
.int 0xb52f0133
.int 0xf0f98eb3
.int 0x71a783b3
.int 0x31fe8cb3
.int 0x719b8b33
.int 0x35cb09b3
.int 0x30a98933
.int 0xb4f48fb3
.int 0x71a10e33
.int 0xf4868233
.int 0x75cd0a33
.int 0x75b68733
.int 0xb5008b33
.int 0xf1e58233
.int 0xf1c605b3
.int 0xf4e70b33
.int 0xb5310eb3
.int 0xf46b8cb3
.int 0x346e8433
.int 0xb03b00b3
.int 0xb5dd8833
.int 0x359087b3
.int 0x75ba8e33
.int 0xf4390f33
.int 0x30590eb3
.int 0x30968a33
.int 0x358984b3
.int 0x75460eb3
.int 0x75ce8db3
.int 0x755200b3
.int 0x751c80b3
.int 0xf4e50433
.int 0x75770433
.int 0x343200b3
.int 0xf4c08b33
.int 0x703609b3
.int 0xb5a38bb3
.int 0xb1d60533
.int 0xf5308eb3
.int 0x35710033
.int 0xb5350c33
.int 0x75d201b3
.int 0xf58484b3
.int 0x30f802b3
.int 0x717b8db3
.int 0xb13a0333
.int 0xb4a70533
.int 0xf5ae8cb3
.int 0xf19f0fb3
.int 0x34e98533
.int 0x71cb8433
.int 0xb5898eb3
.int 0x74cd8eb3
.int 0x74068933
.int 0x713104b3
.int 0xb4310e33
.int 0x31da8fb3
.int 0x75988bb3
.int 0xb1a60433
.int 0x301f8f33
.int 0x34940933
.int 0x70f90733
.int 0xb0fe8bb3
.int 0xb5668133
.int 0xb0ed88b3
.int 0x35e602b3
.int 0xb56c0933
.int 0xb19c04b3
.int 0xb4ba0d33
.int 0x35e30e33
.int 0xb0ce86b3
.int 0x35880ab3
.int 0xb0e285b3
.int 0xb18602b3
.int 0x31898a33
.int 0xb5b38433
.int 0xf15a01b3
.int 0x74278533
.int 0x704200b3
.int 0xb14304b3
.int 0xf18900b3
.int 0xf1fd8a33
.int 0xf5668333
.int 0xb1b60db3
.int 0xf13809b3
.int 0x315d8133
.int 0x34e601b3
.int 0x70ee8933
.int 0xb5d60433
.int 0xb44385b3
.int 0xf1df84b3
.int 0xf14d0433
.int 0x70e88fb3
.int 0x70c187b3
.int 0x31ea8a33
.int 0x307281b3
.int 0xb1220f33
.int 0xb4c88633
.int 0x71e78bb3
.int 0x31fc8f33
.int 0xf58d8db3
.int 0xb4e488b3
.int 0xf4168fb3
.int 0x706a8eb3
.int 0xf4330533
.int 0xb59486b3
.int 0xf1710133
.int 0xb40384b3
.int 0x346b89b3
.int 0x31dd06b3
.int 0x751489b3
.int 0xb18a0cb3
.int 0xb5248433
.int 0xf0be0633
.int 0x34618f33
.int 0x758807b3
.int 0x707d82b3
.int 0x74c20833
.int 0x30040333
.int 0x35b08133
.int 0x71420f33
.int 0x31b105b3
.int 0xb5a28833
.int 0xb0e687b3
.int 0xf5368533
.int 0xf1610833
.int 0x74838bb3
.int 0x34e505b3
.int 0x31c204b3
.int 0x741f8e33
.int 0xb4c80433
.int 0x31b585b3
.int 0x35b40eb3
.int 0x70348fb3
.int 0xb52184b3
.int 0x708100b3
.int 0xb02b84b3
.int 0xf4328b33
.int 0x30038833
.int 0xf44881b3
.int 0x75810ab3
.int 0xb0eb0cb3
.int 0xf58a8d33
.int 0x30138b33
.int 0x34ee8033
.int 0x34b78b33
.int 0x348e0bb3
.int 0xb1a30533
.int 0x30b00cb3
.int 0xb17e8a33
.int 0xf54b05b3
.int 0x35ab0733
.int 0x34230f33
.int 0x301a86b3
.int 0x306382b3
.int 0x742b82b3
.int 0xb4ba82b3
.int 0xf1160fb3
.int 0xf1a70833
.int 0xf1020533
.int 0xb12f8cb3
.int 0xf4be0b33
.int 0xf5bd8eb3
.int 0x715f8533
.int 0x74d78233
.int 0xb04f8db3
.int 0x71468eb3
.int 0xf18382b3
.int 0xf4470fb3
.int 0xb07f0b33
.int 0x30150333
.int 0x74b50fb3
.int 0x30ce0d33
.int 0xf5ce84b3
.int 0xb51c0133
.int 0xb0488233
.int 0x70fa80b3
.int 0xf4b20ab3
.int 0x306a04b3
.int 0xb1b982b3
.int 0x71558a33
.int 0x30428033
.int 0x70438db3
.int 0xb1768db3
.int 0x313108b3
.int 0x711487b3
.int 0xf5aa07b3
.int 0xf42e0433
.int 0xb41d0833
.int 0xb0520533
.int 0xb4f50b33
.int 0x31b50fb3
.int 0x348c06b3
.int 0x31328bb3
.int 0xf40581b3
.int 0xf5098333
.int 0x703f0733
.int 0xb40688b3
.int 0x30d40eb3
.int 0x70168633
.int 0x351a8f33
.int 0x35638bb3
.int 0xb55c0133
.int 0x70ca8e33
.int 0x30a40133
.int 0x34ab0d33
.int 0x30ba03b3
.int 0xb5560ab3
.int 0x70180733
.int 0x31418f33
.int 0xf5fc0eb3
.int 0xf0888b33
.int 0xf1180f33
.int 0x75ac8633
.int 0x75930633
.int 0x70cd0433
.int 0xf1760fb3
.int 0xf03881b3
.int 0x31038033
.int 0x74a18533
.int 0xf0600c33
.int 0xb1348eb3
.int 0x75d80fb3
.int 0x740386b3
.int 0x356584b3
.int 0xb5450d33
.int 0x75d98e33
.int 0x75db0833
.int 0xf10a8333
.int 0xb43d8e33
.int 0x707d08b3
.int 0x71ef8233
.int 0x31998333
.int 0x313d0033
.int 0x75cd8c33
.int 0x711c89b3
.int 0xb10b0133
.int 0x711f8933
.int 0xf5e40833
.int 0xb5f50fb3
.int 0xb4900133
.int 0xf1ce03b3
.int 0xb5d00d33
.int 0x303f0eb3
.int 0xf02c82b3
.int 0x716b0b33
.int 0xf5cf0933
.int 0x30180f33
.int 0xb16401b3
.int 0x317486b3
.int 0xb43902b3
.int 0x314e0c33
.int 0x34ce0eb3
.int 0xf0708ab3
.int 0x34ae0db3
.int 0x35100fb3
.int 0x75488133
.int 0xf1d60f33
.int 0xf08081b3
.int 0xf0eb0933
.int 0xf1d68033
.int 0xb4a38f33
.int 0xb04c8433
.int 0xb1d50ab3
.int 0x75d28633
.int 0xf46087b3
.int 0xf49a86b3
.int 0x308b81b3
.int 0xb4630733
.int 0x74e703b3
.int 0xb0df03b3
.int 0xb0398233
.int 0x35348bb3
.int 0x31700db3
.int 0xf4e90133
.int 0xf4880fb3
.int 0x741301b3
.int 0x30b18533
.int 0xf15e85b3
.int 0xb1b88633
.int 0x304008b3
.int 0xf50f8633
.int 0x35e50633
.int 0x34a78433
.int 0x75920d33
.int 0x755206b3
.int 0x70980633
.int 0xf0ce0633
.int 0xf4bc0333
.int 0xb41f0233
.int 0xf0ff85b3
.int 0xf0c602b3
.int 0xf4db87b3
.int 0xb40d0933
.int 0xf5800933
.int 0x358e09b3
.int 0x30e28433
.int 0xb1000133
.int 0xf5a909b3
.int 0x74228133
.int 0x31e208b3
.int 0xb5cb0333
.int 0x71468fb3
.int 0xf1000eb3
.int 0x75f00033
.int 0xb42e07b3
.int 0xb49a0133
.int 0xf51281b3
.int 0xf51e8533
.int 0xb09f84b3
.int 0x30600833
.int 0xb15187b3
.int 0xb15003b3
.int 0x34948033
.int 0x75a80d33
.int 0xf04f0033
.int 0xb0e48833
.int 0xb0df8fb3
.int 0xb48a8733
.int 0xf43b05b3
.int 0x311f0833
.int 0x706f01b3
.int 0x70a48133
.int 0xf50f0733
.int 0x70d10333
.int 0xf4fd02b3
.int 0xb0150433
.int 0xb4c809b3
.int 0x74d98833
.int 0xf4838e33
.int 0x34bf0533
.int 0xf5ff05b3
.int 0x30508fb3
.int 0xf42a06b3
.int 0x35678b33
.int 0x349b85b3
.int 0xb5178f33
.int 0x70638b33
.int 0xf1540fb3
.int 0xb47d89b3
.int 0x719981b3
.int 0x70958d33
.int 0x34588d33
.int 0x70bb8eb3
.int 0xf0578f33
.int 0xf4bd89b3
.int 0x34340633
.int 0xf09800b3
.int 0xf14585b3
.int 0xb5ac88b3
.int 0x31f28d33
.int 0x34218cb3
.int 0xb12a8b33
.int 0x35298bb3
.int 0xf0e888b3
.int 0x70b203b3
.int 0x75e70bb3
.int 0xb54a8233
.int 0xb4b808b3
.int 0x745403b3
.int 0x308a8433
.int 0x718b80b3
.int 0x74d80e33
.int 0x740e8833
.int 0xf58f0d33
.int 0xb00c02b3
.int 0x706c87b3
.int 0x715c0b33
.int 0xf51b8433
.int 0xb00d8533
.int 0x314f84b3
.int 0xf15d0033
.int 0x75550033
.int 0xf15e07b3
.int 0x707f0cb3
.int 0x348d0b33
.int 0xb01e00b3
.int 0xb13c0833
.int 0x71c40f33
.int 0xf1ca80b3
.int 0x341384b3
.int 0x31e08633
.int 0xf0240ab3
.int 0xb51904b3
.int 0xf57788b3
.int 0xb57005b3
.int 0xf5fe06b3
.int 0xb5ea82b3
.int 0x744a0833
.int 0x71f106b3
.int 0x752e00b3
.int 0x30f38fb3
.int 0xb4858d33
.int 0xb10d8433
.int 0xb1de8333
.int 0xf5510233
.int 0xb4e90633
.int 0x75f286b3
.int 0x70988fb3
.int 0xf02f0c33
.int 0x31768833
.int 0xb1d488b3
.int 0xf4610e33
.int 0xb49700b3
.int 0x35e38833
.int 0xb59784b3
.int 0xf1468033
.int 0xb1260333
.int 0xf0df8bb3
.int 0x35450b33
.int 0xb04584b3
.int 0xf42e0fb3
.int 0x354f8933
.int 0x31e506b3
.int 0x74048933
.int 0xb1e48833
.int 0x71780eb3
.int 0xb59d8b33
.int 0xb18a8433
.int 0x75db8c33
.int 0xf13502b3
.int 0xb0818c33
.int 0xf1538933
.int 0x71400433
.int 0x309f8133
.int 0x35de83b3
.int 0x70b604b3
.int 0x345f8c33
.int 0xb46484b3
.int 0xb0e40a33
.int 0xf59d0c33
.int 0x35af83b3
.int 0x71f205b3
.int 0x307f0333
.int 0x70970c33
.int 0xf4ab83b3
.int 0x70700c33
.int 0xf57488b3
.int 0xf5590533
.int 0x34ed8733
.int 0xb1b58433
.int 0x745106b3
.int 0x74630db3
.int 0xb4b68333
.int 0xb08606b3
.int 0x74540833
.int 0x306a8233
.int 0xb5188833
.int 0xf4670db3
.int 0x350407b3
.int 0x74230f33
.int 0xb5888233
.int 0xf19508b3
.int 0xb4d80533
.int 0x34b48c33
.int 0x702c0f33
.int 0x75b301b3
.int 0x31ac80b3
.int 0xb0330d33
.int 0xb4f385b3
.int 0xb45088b3
.int 0xf0d28ab3
.int 0xb43f8a33
.int 0x34eb0a33
.int 0xf5da05b3
.int 0xf0718933
.int 0x34e28cb3
.int 0x74b90d33
.int 0x752400b3
.int 0x343e8733
.int 0x74490c33
.int 0xb0eb8933
.int 0xb4a08533
.int 0xf1e482b3
.int 0x357a0c33
.int 0x308083b3
.int 0x34a88533
.int 0x30858e33
.int 0x30908fb3
.int 0xb57e8533
.int 0xf1918933
.int 0xb45d0533
.int 0xf5b98333
.int 0xf1e78cb3
.int 0x354e00b3
.int 0x30da0633
.int 0xb43203b3
.int 0x75de8933
.int 0xf04788b3
.int 0xf4ee8c33
.int 0xf59c82b3
.int 0x30e90433
.int 0xb09c8333
.int 0xf0bf0633
.int 0xf0bb8db3
.int 0xb0f98833
.int 0xf5a105b3
.int 0xf5d10a33
.int 0x354b8db3
.int 0x34f18533
.int 0xb0de80b3
.int 0x35400a33
.int 0x70d60cb3
.int 0x354687b3
.int 0xf4b68c33
.int 0x308386b3
.int 0x70740db3
.int 0xb1ed07b3
.int 0xb12f0533
.int 0xf07b82b3
.int 0xb5728933
.int 0xb09a8033
.int 0xf5cb87b3
.int 0x71da0633
.int 0x70aa8633
.int 0xb4e586b3
.int 0xf4180633
.int 0x74218033
.int 0xb1d38d33
.int 0xf50501b3
.int 0xf46c0533
.int 0xb4748e33
.int 0x31e806b3
.int 0x30e482b3
.int 0x742f01b3
.int 0x741b8733
.int 0x30510433
.int 0x716f0133
.int 0xf03206b3
.int 0x35940eb3
.int 0x71c885b3
.int 0x740587b3
.int 0x319d8d33
.int 0x34a486b3
.int 0xf1d00333
.int 0xf03d0b33
.int 0xb13b84b3
.int 0x716588b3
.int 0x748d02b3
.int 0xf5280833
.int 0x746b0f33
.int 0x30d30533
.int 0x30028433
.int 0x31808133
.int 0x31f50c33
.int 0xb02e0b33
.int 0xb4618233
.int 0x711284b3
.int 0xf45b8bb3
.int 0xb0280033
.int 0xb57a88b3
.int 0xf1a58d33
.int 0x301a0633
.int 0xf4880433
.int 0xb1b18b33
.int 0xf5fb8333
.int 0x31e905b3
.int 0xf4928533
.int 0xb51c0db3
.int 0x319b03b3
.int 0x34a08c33
.int 0x34418733
.int 0xf5058b33
.int 0xf1958733
.int 0x74088eb3
.int 0x35c78b33
.int 0x75be81b3
.int 0x74cd8133
.int 0xb11c8db3
.int 0xf4a10633
.int 0xb1a380b3
.int 0xb07808b3
.int 0x35580cb3
.int 0x70788133
.int 0x702201b3
.int 0xb0358533
.int 0x309d02b3
.int 0x34c88c33
.int 0xf4df8cb3
.int 0xb55f89b3
.int 0x35e08c33
.int 0xb15589b3
.int 0xb4808eb3
.int 0x35438833
.int 0x70e88333
.int 0x34858c33
.int 0xb58a0eb3
.int 0xb5260533
.int 0xf5098ab3
.int 0x316009b3
.int 0x35890633
.int 0xb0488b33
.int 0xb1490133
.int 0x70098b33
.int 0x35308233
.int 0x354e0ab3
.int 0xb4c101b3
.int 0xf1588d33
.int 0x751b89b3
.int 0x74e600b3
.int 0xf4d28fb3
.int 0x70920f33
.int 0x30700e33
.int 0xb1300f33
.int 0x30f00fb3
.int 0x30758d33
.int 0x75770733
.int 0x342e8433
.int 0x313988b3
.int 0x34640733
.int 0xb58105b3
.int 0xb0058133
.int 0x70b50833
.int 0x34980533
.int 0xf4bd0f33
.int 0x758c06b3
.int 0xf4c90533
.int 0x75ea0233
.int 0x34ce88b3
.int 0xf0638d33
.int 0xf5040733
.int 0x31d18633
.int 0x74de0d33
.int 0xf1f98233
.int 0x71b48433
.int 0x70f00f33
.int 0x719d0933
.int 0x34e60133
.int 0x30a206b3
.int 0xb1270133
.int 0xf4058833
.int 0x35b80ab3
.int 0x34c10233
.int 0x30738a33
.int 0x358882b3
.int 0xb1340833
.int 0xb5418bb3
.int 0xb50a84b3
.int 0xf03e8133
.int 0x31230533
.int 0x30168db3
.int 0x344408b3
.int 0x704e0eb3
.int 0x70008933
.int 0x34238bb3
.int 0x70cc88b3
.int 0xb4150733
.int 0xf5a78633
.int 0x34f002b3
.int 0xf1620ab3
.int 0x35e28fb3
.int 0xb0be0333
.int 0x34828333
.int 0x708e06b3
.int 0x30a08233
.int 0xf1b60133
.int 0xf4778133
.int 0xb0930fb3
.int 0x74f387b3
.int 0x30b90c33
.int 0x75c60433
.int 0xb11b0a33
.int 0xf0c906b3
.int 0x34358333
.int 0xb57f07b3
.int 0x30628f33
.int 0xf1c28533
.int 0x34d404b3
.int 0xb1fd82b3
.int 0xf0e80233
.int 0x343e0933
.int 0x71d10033
.int 0x34748cb3
.int 0x71890033
.int 0xf09b86b3
.int 0xf09d8cb3
.int 0x70c684b3
.int 0xf1dc84b3
.int 0xb53d0533
.int 0x31ef07b3
.int 0xb5a088b3
.int 0x70550f33
.int 0x34840ab3
.int 0x34de8a33
.int 0xf14701b3
.int 0x319784b3
.int 0xf01d00b3
.int 0xb1238333
.int 0x343105b3
.int 0x351a0633
.int 0x30b088b3
.int 0xb4f28533
.int 0xf5240a33
.int 0x34340933
.int 0xb5558fb3
.int 0x71f70b33
.int 0x70058fb3
.int 0xf1330db3
.int 0xb4f689b3
.int 0xb0290133
.int 0xb46f8eb3
.int 0xb11b0133
.int 0xb5558033
.int 0xb0e68e33
.int 0x34d406b3
.int 0xf4e30133
.int 0x300f0733
.int 0xb5c48db3
.int 0x71dc8833
.int 0x359d0a33
.int 0x30330ab3
.int 0x71710a33
.int 0xf5310833
.int 0x755b0933
.int 0x715e0fb3
.int 0x311903b3
.int 0xf5b007b3
.int 0x742981b3
.int 0x754a86b3
.int 0x747381b3
.int 0xb04c8033
.int 0x71968f33
.int 0xb4268933
.int 0xb5950d33
.int 0xf4b20033
.int 0x35820233
.int 0xf0ce03b3
.int 0xf09603b3
.int 0x71c38e33
.int 0x351b86b3
.int 0x74bb80b3
.int 0xb08a0d33
.int 0x71268f33
.int 0x748d0fb3
.int 0x318388b3
.int 0x74b40db3
.int 0x30a80533
.int 0xb5978833
.int 0xf5ee8633
.int 0x306a88b3
.int 0xb1a882b3
.int 0xb52f03b3
.int 0x70dc8fb3
.int 0xb1348533
.int 0xb08c0bb3
.int 0x71ed0b33
.int 0x305f0633
.int 0x319a8c33
.int 0x75870233
.int 0xb5ed81b3
.int 0x71238e33
.int 0x34308bb3
.int 0x74e48633
.int 0x75910333
.int 0xb0200ab3
.int 0x718d8cb3
.int 0x35db8333
.int 0xb4680033
.int 0x70f502b3
.int 0xb0100e33
.int 0x701e8cb3
.int 0xb1588f33
.int 0xf06f0433
.int 0xb05103b3
.int 0x70230333
.int 0x31798533
.int 0xb1878db3
.int 0x714886b3
.int 0xb50786b3
.int 0x35e30bb3
.int 0x74b80e33
.int 0x70858233
.int 0xf1f80933
.int 0xb50d09b3
.int 0xb1340b33
.int 0xf1b70733
.int 0xf0f00db3
.int 0x34490233
.int 0x30d30fb3
.int 0xb02f06b3
.int 0xb4e60533
.int 0x313403b3
.int 0xf1988e33
.int 0xf50f0cb3
.int 0xb5420b33
.int 0x70a785b3
.int 0xf4a98ab3
.int 0x70340233
.int 0xb43404b3
.int 0xf5370e33
.int 0x70fb8eb3
.int 0xf49382b3
.int 0xb5d38833
.int 0xb46585b3
.int 0xb1018fb3
.int 0x710e8433
.int 0xf1d78db3
.int 0xb1ed8933
.int 0xb5568633
.int 0xb02489b3
.int 0x319c05b3
.int 0xf4570633
.int 0xb1288e33
.int 0x71028233
.int 0xb5da08b3
.int 0xb1ab8b33
.int 0xf4a30bb3
.int 0xb1020733
.int 0x31ea0bb3
.int 0x70d78233
.int 0xb5198833
.int 0xb4920833
.int 0x35cc01b3
.int 0x30158833
.int 0xf5e58b33
.int 0xf5b10a33
.int 0xf5d18e33
.int 0x356f89b3
.int 0x75bb8933
.int 0x706487b3
.int 0xb4178933
.int 0x35308a33
.int 0x34730a33
.int 0xf19a06b3
.int 0xb1fa8933
.int 0xf5920bb3
.int 0x31c80833
.int 0x70b783b3
.int 0xf5a40fb3
.int 0x752d08b3
.int 0xf42d82b3
.int 0xb04685b3
.int 0xf4750e33
.int 0xb52082b3
.int 0xf0bf84b3
.int 0xf4970133
.int 0x301206b3
.int 0xb5fa0233
.int 0xb0100c33
.int 0xf0b685b3
.int 0x71c18eb3
.int 0xb5238b33
.int 0x755881b3
.int 0x31b487b3
.int 0x75440a33
.int 0xf10900b3
.int 0x312e8ab3
.int 0x750c0f33
.int 0xf1e00e33
.int 0x718f0633
.int 0xf1148bb3
.int 0x71608cb3
.int 0x747f0833
.int 0x71e90133
.int 0x714e8a33
.int 0xb4420033
.int 0xf4cf8ab3
.int 0x31c08eb3
.int 0x349806b3
.int 0x75b688b3
.int 0x71f90eb3
.int 0xf5ff0833
.int 0x31ba0333
.int 0x74b102b3
.int 0xf0788bb3
.int 0x71268a33
.int 0xb4d90633
.int 0xf1b388b3
.int 0xf57309b3
.int 0xf50287b3
.int 0x341d81b3
.int 0xb4528633
.int 0x74d90033
.int 0xf0e10333
.int 0xb4bd0cb3
.int 0x34d50733
.int 0x718d0e33
.int 0xf4bf06b3
.int 0xb0f006b3
.int 0xf43882b3
.int 0x30e08933
.int 0xb1958ab3
.int 0xf1ee0e33
.int 0xb0c580b3
.int 0xb0c004b3
.int 0xb4358d33
.int 0xb55185b3
.int 0xb0a089b3
.int 0x35bb8d33
.int 0xf13c8633
.int 0xb0a008b3
.int 0xb41b0733
.int 0x70c683b3
.int 0xf1260fb3
.int 0x705285b3
.int 0x305f0533
.int 0xf4b504b3
.int 0x75bf0cb3
.int 0x357e8133
.int 0xf10902b3
.int 0x301e8bb3
.int 0x70f202b3
.int 0xf5880bb3
.int 0x70010a33
.int 0x340d0333
.int 0x706183b3
.int 0xf4970b33
.int 0xf5ca84b3
.int 0x31f809b3
.int 0x705f06b3
.int 0xf53188b3
.int 0xb1d90fb3
.int 0x319505b3
.int 0x701e8933
.int 0x70d403b3
.int 0x75ac0933
.int 0x705b8d33
.int 0xb1dd0733
.int 0xb5580d33
.int 0xb1a18eb3
.int 0xb1a68733
.int 0x357401b3
.int 0x756681b3
.int 0xf5ac0cb3
.int 0x717886b3
.int 0x75a38a33
.int 0x71c38233
.int 0x304e0f33
.int 0xf0d20ab3
.int 0xf45986b3
.int 0x31ae0633
.int 0xf5348833
.int 0xf4738533
.int 0xb5dc0cb3
.int 0x71f88eb3
.int 0xb0d80eb3
.int 0x70f706b3
.int 0xb00d0533
.int 0xf57d88b3
.int 0x340285b3
.int 0x35b080b3
.int 0xb5088bb3
.int 0x34a48db3
.int 0xb49d86b3
.int 0x74fb8d33
.int 0xf55587b3
.int 0xf0cd0fb3
.int 0x35860c33
.int 0xb53d8633
.int 0x30ec8833
.int 0xf4a789b3
.int 0xb5db8c33
.int 0x718e0fb3
.int 0x354486b3
.int 0xf0e30433
.int 0x706f09b3
.int 0xb02b0233
.int 0x751f0633
.int 0xf14f0d33
.int 0x700a8a33
.int 0xf4040c33
.int 0xf0250db3
.int 0xb5770833
.int 0x313b04b3
.int 0xf0168bb3
.int 0xf0320633
.int 0xb4440433
.int 0x35ed0333
.int 0xb5570e33
.int 0xf1ef84b3
.int 0xf53b82b3
.int 0xb00c0fb3
.int 0xf51d03b3
.int 0xb1fa0033
.int 0x35378633
.int 0x35190433
.int 0x757984b3
.int 0xb5558733
.int 0x70f20633
.int 0xb0ff0133
.int 0xb4a20db3
.int 0xf41301b3
.int 0xb1730f33
.int 0xf46d8fb3
.int 0x757581b3
.int 0xb4208233
.int 0xf52e01b3
.int 0x75fb8333
.int 0xb5858133
.int 0xf02b0433
.int 0x74268c33
.int 0xf0ba8e33
.int 0xf4a605b3
.int 0x35f702b3
.int 0xb5d187b3
.int 0x31418cb3
.int 0x717b8d33
.int 0xf5a68db3
.int 0xf4cc8d33
.int 0xf17588b3
.int 0xf4148433
.int 0x75e58db3
.int 0xf0008633
.int 0xb0f90bb3
.int 0x34da8ab3
.int 0xb0710233
.int 0xb1458fb3
.int 0xb4eb0f33
.int 0x708e8233
.int 0xb0138d33
.int 0x34668133
.int 0xb0f30ab3
.int 0x705c8cb3
.int 0xf5418cb3
.int 0xb0f50133
.int 0xb0058b33
.int 0x309500b3
.int 0xf07d04b3
.int 0x30238433
.int 0xb0a783b3
.int 0xb1cd05b3
.int 0xb04d00b3
.int 0x71968833
.int 0xf0cf0633
.int 0x31a28433
.int 0x74278233
.int 0x70b50ab3
.int 0x74e787b3
.int 0xf02e8ab3
.int 0xf4ab00b3
.int 0xb1870cb3
.int 0xf42784b3
.int 0xf1fe01b3
.int 0x70618cb3
.int 0x74b90e33
.int 0x70690433
.int 0x70ba82b3
.int 0xf05606b3
.int 0x30d58733
.int 0x31500f33
.int 0xf5660a33
.int 0x75b40db3
.int 0xb5b689b3
.int 0x35838a33
.int 0x34278533
.int 0x74060033
.int 0xb0218833
.int 0x308e8933
.int 0x705d8fb3
.int 0xb01a0eb3
.int 0x752f8f33
.int 0x347703b3
.int 0x35730433
.int 0xf4370bb3
.int 0xb1bf0833
.int 0x718e8b33
.int 0x35c103b3
.int 0xf4098933
.int 0x75468b33
.int 0xf0c38fb3
.int 0xf4518533
.int 0xb56f0e33
.int 0xb4288933
.int 0xf0fa07b3
.int 0x34950433
.int 0x30260633
.int 0xf4030a33
.int 0x34d30733
.int 0xb0660733
.int 0xf5bb0f33
.int 0xb4f20db3
.int 0x706d83b3
.int 0xf1b60633
.int 0x31268633
.int 0x70268733
.int 0x75ce0ab3
.int 0x31fb88b3
.int 0xb12809b3
.int 0xf08a8e33
.int 0xb42d05b3
.int 0x359f0233
.int 0xb0e289b3
.int 0xf02b05b3
.int 0xf56084b3
.int 0xf5840833
.int 0xf0e88533
.int 0xf06a04b3
.int 0xf0148bb3
.int 0xb5918933
.int 0xf49d86b3
.int 0x31f80133
.int 0xf4d90733
.int 0xf0800d33
.int 0x70e30f33
.int 0x34028633
.int 0x312e0c33
.int 0x317d8db3
.int 0x71290633
.int 0x318e01b3
.int 0xf1880d33
.int 0x75e50d33
.int 0xf0b70fb3
.int 0x70bf02b3
.int 0x74d08533
.int 0x74850433
.int 0xf0758fb3
.int 0x34ec89b3
.int 0xf53b0933
.int 0xf0dc0a33
.int 0xb42f85b3
.int 0xf5548933
.int 0x748b0cb3
.int 0xf5fd8533
.int 0x74278333
.int 0xb1ca0733
.int 0x34570a33
.int 0x314e07b3
.int 0xf5020633
.int 0xf05e82b3
.int 0x75558c33
.int 0x31a98333
.int 0xb47284b3
.int 0xf4f98ab3
.int 0xf0bc89b3
.int 0x34a308b3
.int 0x35000833
.int 0xb1260e33
.int 0xf1778e33
.int 0xb4598fb3
.int 0xb54d02b3
.int 0x341a0633
.int 0xf0478bb3
.int 0xb47f8133
.int 0xf18b0133
.int 0xb5ee8fb3
.int 0xb49f8fb3
.int 0x70648ab3
.int 0xf5410fb3
.int 0x71be8cb3
.int 0x71c70fb3
.int 0xb4990833
.int 0xb13289b3
.int 0x353480b3
.int 0x74fd80b3
.int 0xf5950eb3
.int 0x74e78eb3
.int 0xb09709b3
.int 0xf52602b3
.int 0xb0988ab3
.int 0xf5670433
.int 0xf0270933
.int 0xf17b8bb3
.int 0x35d18133
.int 0x30ba8c33
.int 0xf5908f33
.int 0xf0680033
.int 0xf0980ab3
.int 0x716d89b3
.int 0xf4cc0b33
.int 0xf1f80f33
.int 0xb56b8bb3
.int 0x34178033
.int 0xb13d0eb3
.int 0xb10984b3
.int 0x316e0c33
.int 0x74d18033
.int 0x344c0ab3
.int 0x74100bb3
.int 0x30280ab3
.int 0x30ff09b3
.int 0x71210333
.int 0xf00b09b3
.int 0xf09988b3
.int 0x351404b3
.int 0xf4dc01b3
.int 0x75a186b3
.int 0xb53b82b3
.int 0xb1b58b33
.int 0x35ed02b3
.int 0xf1890733
.int 0x30b788b3
.int 0x312a0833
.int 0x309a8233
.int 0x308389b3
.int 0xf0100a33
.int 0xf1df0533
.int 0x30ff0c33
.int 0x30ee0333
.int 0xb0ca84b3
.int 0xb1d80533
.int 0xf14587b3
.int 0x74280a33
.int 0x743680b3
.int 0x34078933
.int 0x315481b3
.int 0xb18589b3
.int 0x75a88eb3
.int 0x74eb0b33
.int 0xb54f0033
.int 0x353d8933
.int 0x34b903b3
.int 0xf12c8eb3
.int 0xf1968833
.int 0x35fe07b3
.int 0xb4fd09b3
.int 0xf0de0333
.int 0x35c58133
.int 0xb06609b3
.int 0x71f80ab3
.int 0x31880333
.int 0xf45d83b3
.int 0x34fd8733
.int 0xf5ea0833
.int 0x70808e33
.int 0x745f8a33
.int 0x75c286b3
.int 0xb10c8ab3
.int 0xf07d86b3
.int 0xf5038633
.int 0xb1060cb3
.int 0x70160633
.int 0xf52c8333
.int 0x707500b3
.int 0x714d02b3
.int 0x315a0c33
.int 0xb0520eb3
.int 0xb4e88633
.int 0xf4b10533
.int 0xf07c0433
.int 0xb5c70d33
.int 0x71d88733
.int 0x71c48933
.int 0x70480ab3
.int 0x358502b3
.int 0x75ef0b33
.int 0x31ed0633
.int 0xf5ed0933
.int 0x75b18fb3
.int 0x35c409b3
.int 0x31e88633
.int 0xf5778133
.int 0xb11980b3
.int 0xb4b98c33
.int 0x709b89b3
.int 0xf0420fb3
.int 0xb14a8633
.int 0xf4f284b3
.int 0x30fd09b3
.int 0xf45c0f33
.int 0xb5b783b3
.int 0xb1aa8d33
.int 0x71be06b3
.int 0xf4d18833
.int 0x75f78433
.int 0xb4b205b3
.int 0xb48301b3
.int 0xf00b8b33
.int 0x319f0933
.int 0xf50e0a33
.int 0x75918733
.int 0x35ed8fb3
.int 0x348209b3
.int 0xf12b88b3
.int 0x752f88b3
.int 0xb0d48f33
.int 0xf4e40c33
.int 0xf5dd8d33
.int 0x701d80b3
.int 0x74e704b3
.int 0xf56805b3
.int 0xb42d0fb3
.int 0xf53a0fb3
.int 0x745086b3
.int 0xb52d05b3
.int 0x316e0733
.int 0x35eb0d33
.int 0xf4230bb3
.int 0x74e189b3
.int 0xb1778db3
.int 0xb4ef0333
.int 0xb07484b3
.int 0xb5358733
.int 0x30e88833
.int 0xb03b00b3
.int 0xf0620333
.int 0xf1330833
.int 0xf0b38ab3
.int 0xb4ef05b3
.int 0x70488b33
.int 0xb1ac8c33
.int 0x71670833
.int 0xf56f8eb3
.int 0x715805b3
.int 0xf56d0bb3
.int 0xf45b04b3
.int 0xb5860133
.int 0xf43c03b3
.int 0xb5a20e33
.int 0x30a78a33
.int 0xf5a90533
.int 0xf42b0833
.int 0x349d8b33
.int 0xb5288db3
.int 0xb4c38cb3
.int 0xb5a181b3
.int 0x712503b3
.int 0xf4058fb3
.int 0x713781b3
.int 0x357b0bb3
.int 0x715c8033
.int 0xf4688033
.int 0x757985b3
.int 0x75618833
.int 0xf1e70f33
.int 0x343e88b3
.int 0xb0b700b3
.int 0x71150d33
.int 0xb10889b3
.int 0x35dd00b3
.int 0xb1e60d33
.int 0x317f0bb3
.int 0x317606b3
.int 0x71e30633
.int 0x70648a33
.int 0xf0ed89b3
.int 0xb1a085b3
.int 0xf1e58733
.int 0x351f8c33
.int 0x74ce0033
.int 0x30968cb3
.int 0xb1dc0f33
.int 0x75ba0333
.int 0xb09206b3
.int 0xf44a8cb3
.int 0xb5af82b3
.int 0x30af8db3
.int 0x341f0633
.int 0xf5478a33
.int 0xf0910f33
.int 0x70f38033
.int 0x307b0133
.int 0xb0e98fb3
.int 0x701601b3
.int 0x70cf05b3
.int 0xb1cb0a33
.int 0xb5790433
.int 0xb1f782b3
.int 0xb57f0bb3
.int 0x70300733
.int 0x34ec8533
.int 0xb04b06b3
.int 0xf4650fb3
.int 0xf1030733
.int 0x71bb07b3
.int 0x31568333
.int 0x318c0b33
.int 0xb0b382b3
.int 0xb0dd0cb3
.int 0x75ff8eb3
.int 0xb0be8cb3
.int 0xb44d8bb3
.int 0xb4368333
.int 0x341301b3
.int 0xf0a98db3
.int 0x34de86b3
.int 0x351f8a33
.int 0x70cc0633
.int 0x303602b3
.int 0x343805b3
.int 0xf1610bb3
.int 0xf1eb0eb3
.int 0x31e40033
.int 0x355184b3
.int 0xf5f58633
.int 0x34c30033
.int 0x75030cb3
.int 0xf4a70cb3
.int 0x742809b3
.int 0x71078f33
.int 0xf1ca03b3
.int 0xf4dc84b3
.int 0x353784b3
.int 0x70308bb3
.int 0x74b001b3
.int 0xf13a8a33
.int 0xb5f78433
.int 0x30090e33
.int 0xf10786b3
.int 0xf43f0d33
.int 0xb4f48633
.int 0xf1cd0a33
.int 0xb0a68833
.int 0xf4cf0933
.int 0x34ba0333
.int 0x35fe8bb3
.int 0x70110b33
.int 0x340a05b3
.int 0x34820fb3
.int 0xf5040a33
.int 0xb14383b3
.int 0xb1ee0ab3
.int 0xf4a186b3
.int 0xb1fb0833
.int 0xf1cd8d33
.int 0x749308b3
.int 0xb1800233
.int 0xb59a0833
.int 0x70200233
.int 0xb4940533
.int 0xf5510ab3
.int 0x346c8bb3
.int 0xf1f90e33
.int 0xb42d08b3
.int 0xf11b0533
.int 0xb0e90e33
.int 0x30a38133
.int 0x75500633
.int 0x318e0c33
.int 0x75c50fb3
.int 0x70ae0c33
.int 0x30058d33
.int 0x71b805b3
.int 0x35f404b3
.int 0x71ac8eb3
.int 0xf5690ab3
.int 0x756a85b3
.int 0x70398633
.int 0x75c48133
.int 0xb1698133
.int 0xf5d18ab3
.int 0xf18e8bb3
.int 0x309089b3
.int 0xb58988b3
.int 0xb0ca05b3
.int 0xf4118033
.int 0x34130b33
.int 0x747f8733
.int 0x75348a33
.int 0xf5e18cb3
.int 0xf01380b3
.int 0x35cc8733
.int 0xf5fb8c33
.int 0x34060d33
.int 0xf4df8a33
.int 0x31fd0133
.int 0x312d8f33
.int 0x35c288b3
.int 0x70f100b3
.int 0xf06080b3
.int 0x31a70d33
.int 0xf1928933
.int 0x354489b3
.int 0xb4f38c33
.int 0xf1008c33
.int 0xb4d18033
.int 0x31198eb3
.int 0xb4a08d33
.int 0x358605b3
.int 0x70e80633
.int 0xf5ad8133
.int 0xb46889b3
.int 0xf5328633
.int 0x74c30733
.int 0xb10c8fb3
.int 0xb0c78a33
.int 0x744a86b3
.int 0x700801b3
.int 0x71080533
.int 0xf13882b3
.int 0x75ad84b3
.int 0x70aa8fb3
.int 0xb5f68c33
.int 0xf4840b33
.int 0xf07a0e33
.int 0xb5c90433
.int 0x74e88cb3
.int 0xf4728533
.int 0x741a0b33
.int 0xb02204b3
.int 0x312b8db3
.int 0x715c07b3
.int 0xb4e786b3
.int 0x35ca8433
.int 0xb16a08b3
.int 0x710f8933
.int 0x34148f33
.int 0x744c8433
.int 0x30d40fb3
.int 0x309a81b3
.int 0x30cf85b3
.int 0xb4178333
.int 0x35ad87b3
.int 0x341a8ab3
.int 0xf5910db3
.int 0xb1830a33
.int 0xf4fb8033
.int 0x715b0c33
.int 0xb07a8eb3
.int 0x71c58e33
.int 0x700481b3
.int 0xb07a8f33
.int 0x71670033
.int 0x31ba87b3
.int 0xb1508eb3
.int 0xf0f00cb3
.int 0x70348db3
.int 0xf0898033
.int 0xb0128533
.int 0x31dd85b3
.int 0xf54309b3
.int 0x344a8833
.int 0xf5f40c33
.int 0xb5f20c33
.int 0xf1b50033
.int 0xb1608133
.int 0xb41e0a33
.int 0xf5770233
.int 0xf4ea07b3
.int 0x307d0933
.int 0x31a50033
.int 0xf16583b3
.int 0xb1500c33
.int 0xb1d10eb3
.int 0xb51d0e33
.int 0xb55c0433
.int 0x70538533
.int 0x30d382b3
.int 0xf16c8eb3
.int 0xf4920e33
.int 0x316884b3
.int 0xf0bd80b3
.int 0x756304b3
.int 0xf11a08b3
.int 0x75280b33
.int 0xb4000f33
.int 0xb0c10d33
.int 0xf16309b3
.int 0x75fd8d33
.int 0x70a20b33
.int 0xb5b38a33
.int 0x748f06b3
.int 0x340082b3
.int 0x35d10133
.int 0xb52f8833
.int 0x341d8ab3
.int 0x35540333
.int 0xf16302b3
.int 0xb04f80b3
.int 0x744000b3
.int 0xf4c60e33
.int 0x31568cb3
.int 0x318e8733
.int 0xb03e07b3
.int 0x355a0bb3
.int 0xf5c70e33
.int 0xf0e903b3
.int 0x744187b3
.int 0x74b581b3
.int 0xf1d607b3
.int 0x31ec80b3
.int 0x340d8533
.int 0xf5068f33
.int 0xf5bf0f33
.int 0xf0650fb3
.int 0x316b8db3
.int 0x31b90e33
.int 0x35268c33
.int 0xf4b305b3
.int 0xb5e609b3
.int 0xf50984b3
.int 0x31858333
.int 0x70988333
.int 0x74530ab3
.int 0xb1350033
.int 0x352505b3
.int 0xf0ce8133
.int 0x74ac8b33
.int 0xf4ee82b3
.int 0x30ad85b3
.int 0xb4638bb3
.int 0xb13580b3
.int 0xb40a8f33
.int 0xf00c0033
.int 0xb01d86b3
.int 0xf5338533
.int 0x70f20233
.int 0xb55d8433
.int 0x74550a33
.int 0x30470633
.int 0xb45c8bb3
.int 0x74d58633
.int 0x75280433
.int 0x31c50833
.int 0x70978733
.int 0xf51d85b3
.int 0x35eb06b3
.int 0x301d0db3
.int 0x706d0bb3
.int 0xf45d8b33
.int 0x34b68b33
.int 0x70e182b3
.int 0x35490633
.int 0x748b8d33
.int 0x71870e33
.int 0x30d80f33
.int 0xb02e0933
.int 0x34348ab3
.int 0xf15903b3
.int 0xb12e00b3
.int 0x701382b3
.int 0x318f00b3
.int 0x74090eb3
.int 0x714d0e33
.int 0xf1320633
.int 0x307c0333
.int 0xf48d0f33
.int 0x318f06b3
.int 0x713b0f33
.int 0xb1598e33
.int 0x74fe0833
.int 0x35780c33
.int 0x74a68f33
.int 0xb55705b3
.int 0x35380fb3
.int 0xb4620fb3
.int 0xb44a0733
.int 0x357a87b3
.int 0xb1ad88b3
.int 0xb0ef8633
.int 0x31b304b3
.int 0xb53e86b3
.int 0x75d80733
.int 0xb1f88cb3
.int 0xb5780ab3
.int 0xf5ad8a33
.int 0x357a0933
.int 0x30558033
.int 0xf0db0933
.int 0xf07e09b3
.int 0xf4b08233
.int 0xb5860db3
.int 0x75370333
.int 0x751b8c33
.int 0xb4c902b3
.int 0xb0a30033
.int 0x71288d33
.int 0xb5238bb3
.int 0xf54489b3
.int 0x71350733
.int 0x34610633
.int 0xf5968eb3
.int 0x712e0033
.int 0xb5e20fb3
.int 0xf1a18d33
.int 0x70628833
.int 0x34a100b3
.int 0xf57d0833
.int 0x34618733
.int 0x74f686b3
.int 0xb5590d33
.int 0x71ea8733
.int 0xb58f00b3
.int 0x71bb81b3
.int 0x341c8833
.int 0x30168d33
.int 0xf46d87b3
.int 0xb5448fb3
.int 0x30ee8933
.int 0xb1680133
.int 0x705a8c33
.int 0x75bf0b33
.int 0x355f8b33
.int 0x34840733
.int 0x31b184b3
.int 0xb44309b3
.int 0x75738ab3
.int 0x34f68c33
.int 0xf15d8133
.int 0x711105b3
.int 0xf17c0533
.int 0xb47789b3
.int 0xb5c088b3
.int 0xb12f8933
.int 0xb11889b3
.int 0x716082b3
.int 0xf4d48b33
.int 0xf0da81b3
.int 0x71510fb3
.int 0xf5600fb3
.int 0x35c084b3
.int 0xf5f183b3
.int 0xf18c0433
.int 0xf4a28333
.int 0x30a48333
.int 0x350889b3
.int 0x35d887b3
.int 0xb15a8733
.int 0x31ec00b3
.int 0xf1488cb3
.int 0xf5ec0d33
.int 0x35948ab3
.int 0xb5af8833
.int 0x70c90d33
.int 0x74698ab3
.int 0xf5a28db3
.int 0xb11684b3
.int 0xb1a28bb3
.int 0xf5ee8933
.int 0x302088b3
.int 0xb5b00db3
.int 0x75d18eb3
.int 0xf0048bb3
.int 0xf5e00b33
.int 0x74c68633
.int 0xf03102b3
.int 0xf1dc88b3
.int 0xf46f8bb3
.int 0xb56b0033
.int 0xf4a301b3
.int 0xb4b90133
.int 0xb4ff88b3
.int 0x35108ab3
.int 0xb0fc0f33
.int 0xf5310233
.int 0x70f40bb3
.int 0xb5a08c33
.int 0xb4a70833
.int 0xf0f00cb3
.int 0x70e10e33
.int 0x30e70cb3
.int 0x30cc05b3
.int 0xb1c20fb3
.int 0x71d88db3
.int 0xf5700533
.int 0x74de0933
.int 0xf45c03b3
.int 0xb52f8633
.int 0x715b0733
.int 0x75690d33
.int 0x700e80b3
.int 0x30860633
.int 0xf14b8c33
.int 0xf40e0533
.int 0xf18108b3
.int 0xf12708b3
.int 0x34b48c33
.int 0xb1c106b3
.int 0xb4098fb3
.int 0x34e68e33
.int 0x70b387b3
.int 0x311983b3
.int 0x71660c33
.int 0x31010eb3
.int 0xb0728eb3
.int 0x70618f33
.int 0x74cf0633
.int 0x30e60d33
.int 0x30fa0fb3
.int 0x74bd0cb3
.int 0x71c00533
.int 0xf0688633
.int 0xf5510933
.int 0x30aa8b33
.int 0x71788e33
.int 0x348d8333
.int 0xf0908e33
.int 0xf5858c33
.int 0x703003b3
.int 0x300c0d33
.int 0x75a381b3
.int 0x74758a33
.int 0xb5ea81b3
.int 0xf17981b3
.int 0xf4400e33
.int 0xb5eb0cb3
.int 0xb1908733
.int 0xb1478433
.int 0xb06f84b3
.int 0x31b88133
.int 0xf55a0fb3
.int 0xf4d186b3
.int 0xf00f80b3
.int 0x351308b3
.int 0x307e8933
.int 0x31d284b3
.int 0xf1880333
.int 0x75790733
.int 0x35ac85b3
.int 0xf0258033
.int 0x74bf8cb3
.int 0xf02c8033
.int 0x35c88933
.int 0xb4ed82b3
.int 0xf5f20ab3
.int 0x70710e33
.int 0xf1e902b3
.int 0xb02805b3
.int 0x70a38033
.int 0x705d81b3
.int 0x302e06b3
.int 0x30da8733
.int 0xb4b482b3
.int 0xf4bb0ab3
.int 0x70a58a33
.int 0x34a40633
.int 0xb41f8ab3
.int 0xb02b85b3
.int 0x31120633
.int 0x74d40033
.int 0xf4dd8e33
.int 0x702d87b3
.int 0x351c8eb3
.int 0xf0d50fb3
.int 0xb19008b3
.int 0x31c50833
.int 0xf5d90433
.int 0x71448433
.int 0xf06089b3
.int 0x74cf0833
.int 0xb0f48eb3
.int 0xf19589b3
.int 0xf5568ab3
.int 0xb4a90a33
.int 0xb4d18e33
.int 0x30c48233
.int 0x349d0633
.int 0x35c10233
.int 0xb0e50c33
.int 0xb5ba0a33
.int 0xf0e28bb3
.int 0x706a0733
.int 0x701b8533
.int 0xf1cf0bb3
.int 0x70ec04b3
.int 0x34d10e33
.int 0x714305b3
.int 0x747d84b3
.int 0x351a0433
.int 0xb04106b3
.int 0xb40481b3
.int 0x75678933
.int 0xf1680933
.int 0x342088b3
.int 0x30cc09b3
.int 0x71038bb3
.int 0x71278d33
.int 0xf0d48b33
.int 0x31148333
.int 0xb0f80fb3
.int 0x301285b3
.int 0x35718133
.int 0xf50c0bb3
.int 0xb03602b3
.int 0x357506b3
.int 0xf4890fb3
.int 0xf4d98a33
.int 0xf55a8eb3
.int 0x759284b3
.int 0xf1850033
.int 0x30188233
.int 0x307e8cb3
.int 0x71900ab3
.int 0xb08a81b3
.int 0x352c0833
.int 0xb16c8ab3
.int 0x347e81b3
.int 0xf1700a33
.int 0x31758233
.int 0xf45105b3
.int 0x304880b3
.int 0xb42c8133
.int 0x716f8033
.int 0xf07386b3
.int 0x305504b3
.int 0x31ad0733
.int 0xf0f907b3
.int 0xb08787b3
.int 0x355c0733
.int 0xf5898eb3
.int 0xb1600033
.int 0x31958c33
.int 0x71f406b3
.int 0x34b306b3
.int 0x70dd8633
.int 0xf1e40db3
.int 0xf4928e33
.int 0xb17409b3
.int 0x708d06b3
.int 0xb4128e33
.int 0xf1c701b3
.int 0x35b005b3
.int 0xf48f0eb3
.int 0x753488b3
.int 0x34300ab3
.int 0xb40703b3
.int 0x31368c33
.int 0x31d98a33
.int 0xf5428233
.int 0xb4990b33
.int 0x70118cb3
.int 0x75418633
.int 0xf0878733
.int 0x30920d33
.int 0x709d04b3
.int 0xb50f0433
.int 0x70710733
.int 0x350f85b3
.int 0xf48b8133
.int 0x74510bb3
.int 0xf0b082b3
.int 0x75e704b3
.int 0x35a202b3
.int 0xb47b8f33
.int 0xb5458ab3
.int 0x348406b3
.int 0xb0dc03b3
.int 0xb5d90033
.int 0x70ec0933
.int 0xb55708b3
.int 0xb1940bb3
.int 0x711101b3
.int 0x353f0db3
.int 0x354c0c33
.int 0xb1df8e33
.int 0x30b50bb3
.int 0xf1eb8733
.int 0x30d70ab3
.int 0xb08483b3
.int 0xf4fd0c33
.int 0xb0250d33
.int 0x75838633
.int 0x30e30c33
.int 0x71f20f33
.int 0xf51309b3
.int 0xb1ac89b3
.int 0x700f84b3
.int 0x717800b3
.int 0x34ee0e33
.int 0x70718533
.int 0xf41a83b3
.int 0x74e78fb3
.int 0xb1970b33
.int 0xb0d78b33
.int 0x755400b3
.int 0xf4918133
.int 0x306f8b33
.int 0xb0d58233
.int 0x71588e33
.int 0xf1a80fb3
.int 0xb54a8bb3
.int 0x305f08b3
.int 0x74318ab3
.int 0x319a8bb3
.int 0xb06607b3
.int 0xb56f8b33
.int 0x30ea8eb3
.int 0x71840533
.int 0x30558db3
.int 0x749a0733
.int 0x35cf8e33
.int 0x304a8533
.int 0xf1830633
.int 0xb5048833
.int 0x31790e33
.int 0xb5978633
.int 0xb53e09b3
.int 0xf4ce8033
.int 0x700a8233
.int 0xf11789b3
.int 0xf0a68cb3
.int 0x313d0933
.int 0x752e08b3
.int 0x71a98eb3
.int 0x740b03b3
.int 0x716d02b3
.int 0x71d781b3
.int 0xb0ef8233
.int 0xb1fb8e33
.int 0xf0a10633
.int 0xf5a38bb3
.int 0xf4f98bb3
.int 0xb14606b3
.int 0x751706b3
.int 0xf5238ab3
.int 0xf44f8433
.int 0xb5d607b3
.int 0xf0828933
.int 0xb4840b33
.int 0x71d006b3
.int 0xf4680cb3
.int 0xb51302b3
.int 0xf0840e33
.int 0x75950d33
.int 0xb5800333
.int 0x344b0c33
.int 0xf1f78d33
.int 0x71ca09b3
.int 0x34fa0633
.int 0x31588833
.int 0xb5130833
.int 0xf0a587b3
.int 0x35690f33
.int 0xb5370333
.int 0x34ec8333
.int 0xb0e98bb3
.int 0xf54d05b3
.int 0xb5688833
.int 0x30b68f33
.int 0xb0178733
.int 0x757586b3
.int 0xf10608b3
.int 0xf0980933
.int 0xf1be8fb3
.int 0xf4060733
.int 0x351a8b33
.int 0x356d0fb3
.int 0x75dc0cb3
.int 0x30e68c33
.int 0x353d06b3
.int 0xf4f78733
.int 0xb15a0133
.int 0x34e08933
.int 0x75508933
.int 0x74e20f33
.int 0x313a8e33
.int 0x74238533
.int 0x740e8c33
.int 0x34d58f33
.int 0x31fd81b3
.int 0xf4a18133
.int 0xb08302b3
.int 0xb09d06b3
.int 0x34080633
.int 0x741b84b3
.int 0xf0048533
.int 0xf1140db3
.int 0xf4a10bb3
.int 0xb5ee0cb3
.int 0xb5a30eb3
.int 0xb4580fb3
.int 0x34568733
.int 0x30718ab3
.int 0x751184b3
.int 0xf5638433
.int 0x75070fb3
.int 0xf5ab0e33
.int 0x309e0f33
.int 0xf06c8c33
.int 0xf1ac06b3
.int 0x70e48d33
.int 0xf5ee0c33
.int 0x30a48bb3
.int 0x353e0433
.int 0x74578433
.int 0xf0bc0eb3
.int 0xb5970db3
.int 0xb15301b3
.int 0xb0b20ab3
.int 0xb4c30d33
.int 0xf13902b3
.int 0x71f88ab3
.int 0x35088c33
.int 0xb0e30133
.int 0xf52e0cb3
.int 0x75f58a33
.int 0x74d00533
.int 0xb19a8b33
.int 0x34520cb3
.int 0xb08987b3
.int 0xb40c0bb3
.int 0xb53f8533
.int 0x351183b3
.int 0x31460d33
.int 0xf1618b33
.int 0xb51500b3
.int 0xb17e05b3
.int 0xf1698b33
.int 0xb5520133
.int 0x30cf8b33
.int 0xf15287b3
.int 0x313c0d33
.int 0x30b98633
.int 0x304086b3
.int 0x714c83b3
.int 0xf1e40eb3
.int 0x35b20db3
.int 0x34828733
.int 0x31e808b3
.int 0x310c00b3
.int 0xf0040133
.int 0xb4e187b3
.int 0x358c09b3
.int 0x34b88433
.int 0x34ab02b3
.int 0xf09204b3
.int 0x70260eb3
.int 0x31ba87b3
.int 0xf5b90c33
.int 0xb4b804b3
.int 0xf0008333
.int 0xf1998833
.int 0x71cf8e33
.int 0x750b0733
.int 0x34758c33
.int 0xf51508b3
.int 0xb5f70bb3
.int 0xf56503b3
.int 0xf5a903b3
.int 0x34c585b3
.int 0xf0e50fb3
.int 0x70dc0733
.int 0xf52b89b3
.int 0x316a0433
.int 0x306f06b3
.int 0xf1878cb3
.int 0x70e90633
.int 0x71dd0f33
.int 0xb1ec8433
.int 0x70e18733
.int 0xf4b48fb3
.int 0x753a8fb3
.int 0xb1938533
.int 0x347e0a33
.int 0xb0f28ab3
.int 0x70e501b3
.int 0xf4ea0cb3
.int 0x35688e33
.int 0x345804b3
.int 0x759a8433
.int 0x30980db3
.int 0xb45b85b3
.int 0xb0d08133
.int 0x70e28833
.int 0xb0c689b3
.int 0xf1598133
.int 0x31a40ab3
.int 0xb58c0b33
.int 0x316b0cb3
.int 0xb1e20133
.int 0xf5500033
.int 0x308700b3
.int 0x70b68fb3
.int 0xf4580f33
.int 0xf48583b3
.int 0x35360833
.int 0xb05a8e33
.int 0x71c389b3
.int 0x31c500b3
.int 0xb0840c33
.int 0xb4058333
.int 0xf4c90b33
.int 0xf0bc0e33
.int 0x71630eb3
.int 0xb5de0b33
.int 0xf5000db3
.int 0xf0ca0333
.int 0x70ef0ab3
.int 0x30c48033
.int 0x31d48733
.int 0x30eb80b3
.int 0xf5868f33
.int 0xf1a60233
.int 0x70d58433
.int 0x71ba06b3
.int 0xb5d98cb3
.int 0xf4980f33
.int 0x31210633
.int 0xf09602b3
.int 0xf1b780b3
.int 0xf5700a33
.int 0x356b02b3
.int 0xb04182b3
.int 0x308486b3
.int 0x31990d33
.int 0x352e0633
.int 0xb43302b3
.int 0x70780fb3
.int 0xb4110833
.int 0x35a888b3
.int 0xf5f98733
.int 0x748a0b33
.int 0xb5c507b3
.int 0x31de83b3
.int 0xb1710d33
.int 0x707a0f33
.int 0x746989b3
.int 0xf00c08b3
.int 0xb15901b3
.int 0x716b0033
.int 0xb4d30733
.int 0x749c86b3
.int 0xb04a82b3
.int 0x315a0933
.int 0x34420033
.int 0xf06507b3
.int 0xb58483b3
.int 0x75b08033
.int 0x31808733
.int 0x317504b3
.int 0x34d48bb3
.int 0x301d0e33
.int 0xf5968c33
.int 0x705107b3
.int 0xf5f38133
.int 0x71f180b3
.int 0x35638db3
.int 0x340984b3
.int 0xf55802b3
.int 0xb1158f33
.int 0xb43e0133
.int 0x75160e33
.int 0x302502b3
.int 0x30458ab3
.int 0xb50e0f33
.int 0x305a8933
.int 0x714d0733
.int 0xf02b82b3
.int 0xb50f87b3
.int 0xf08101b3
.int 0xf41100b3
.int 0x300780b3
.int 0x352205b3
.int 0xb1028c33
.int 0xb0688ab3
.int 0x35c103b3
.int 0xb0ca05b3
.int 0x30080533
.int 0xb0c286b3
.int 0xb4ba0c33
.int 0xb1500933
.int 0x718201b3
.int 0x704101b3
.int 0x341f8c33
.int 0xb0820f33
.int 0x35110933
.int 0xb1c608b3
.int 0x715d8933
.int 0xf4270533
.int 0xf4cf0eb3
.int 0x357b8533
.int 0xb44b0533
.int 0x751184b3
.int 0xf05584b3
.int 0xf57c8433
.int 0xb56c8bb3
.int 0x701f07b3
.int 0xf02e0db3
.int 0xf4dc8833
.int 0x302b05b3
.int 0xb1420233
.int 0xb5480db3
.int 0x30f48133
.int 0x717d06b3
.int 0xb1f589b3
.int 0x315e0ab3
.int 0xb4590233
.int 0x350c8433
.int 0xb1e48033
.int 0x30578d33
.int 0xf0d10e33
.int 0xf1410733
.int 0xf4920c33
.int 0xb11f8eb3
.int 0x30c184b3
.int 0x34c08233
.int 0x31d30db3
.int 0x31118033
.int 0xb5950133
.int 0xb4c18e33
.int 0x35040833
.int 0xb58d0033
.int 0x315d04b3
.int 0x30cd89b3
.int 0x74c70cb3
.int 0x742e8fb3
.int 0x70180f33
.int 0x702b85b3
.int 0x705381b3
.int 0x74740433
.int 0x714a8533
.int 0xb43600b3
.int 0xb19306b3
.int 0xf1c20cb3
.int 0x70860733
.int 0xf01c8433
.int 0x75fa8cb3
.int 0x31550833
.int 0xf0fa8db3
.int 0xf0d509b3
.int 0xf55f81b3
.int 0x34a005b3
.int 0xf4078a33
.int 0x30878233
.int 0xf1de8333
.int 0x74468933
.int 0x71440ab3
.int 0x718103b3
.int 0xf44f89b3
.int 0x70dc0bb3
.int 0xb06c8333
.int 0x34148533
.int 0xb59b0b33
.int 0xf5608533
.int 0x306d8c33
.int 0x35518433
.int 0x343f82b3
.int 0xb56e0c33
.int 0x75d184b3
.int 0x70178fb3
.int 0xb18c8c33
.int 0xb47987b3
.int 0x313b8933
.int 0x30440533
.int 0x316e04b3
.int 0x747c0eb3
.int 0x31128733
.int 0xf4e48a33
.int 0xf05c0eb3
.int 0x35ef0933
.int 0xf0768b33
.int 0x713506b3
.int 0xf1ec8633
.int 0xf5e10bb3
.int 0x353200b3
.int 0xb1870d33
.int 0xb1138133
.int 0xf1fb8333
.int 0xb4458e33
.int 0x71a78733
.int 0xf1330e33
.int 0x74950c33
.int 0xb5840333
.int 0x70148e33
.int 0x302786b3
.int 0xf51c88b3
.int 0x34bf04b3
.int 0xf0598933
.int 0xb4420433
.int 0xb06203b3
.int 0xb59c85b3
.int 0x74a08bb3
.int 0x74b98cb3
.int 0xb0a28233
.int 0x70480fb3
.int 0xb1a58c33
.int 0xf4930db3
.int 0xf0c187b3
.int 0x30ca0ab3
.int 0x74cb06b3
.int 0x711d0133
.int 0x30708ab3
.int 0x35350eb3
.int 0xb0278b33
.int 0xb01601b3
.int 0xf5cc0033
.int 0x34f803b3
.int 0x315c8ab3
.int 0x35cc8633
.int 0xf09b8eb3
.int 0x71eb8ab3
.int 0xf1210333
.int 0x709007b3
.int 0xf44c0733
.int 0xf4050b33
.int 0xb49a0833
.int 0xb0920933
.int 0xb0f203b3
.int 0xb0cb0333
.int 0x707d8f33
.int 0x31658033
.int 0xf52c88b3
.int 0x34618533
.int 0x34718433
.int 0x34ca06b3
.int 0x74cc0b33
.int 0x75fd81b3
.int 0xf46d05b3
.int 0xb12b8333
.int 0xf59f80b3
.int 0xb07e8933
.int 0xb4a60933
.int 0xf4708333
.int 0xf52684b3
.int 0xf10c0d33
.int 0xf58f89b3
.int 0xf0a60633
.int 0xf42a01b3
.int 0x34d606b3
.int 0xb1b983b3
.int 0x316e89b3
.int 0x31ce8a33
.int 0xf1c407b3
.int 0x301786b3
.int 0xb5d90f33
.int 0xb1a204b3
.int 0xf4638cb3
.int 0x30488633
.int 0xf1188eb3
.int 0x71950d33
.int 0x35ba8bb3
.int 0xf0b58433
.int 0xf5b48cb3
.int 0x301b8633
.int 0x748e8eb3
.int 0x70ef8e33
.int 0xb0478333
.int 0xf07488b3
.int 0x757a8eb3
.int 0x30800db3
.int 0x70e80c33
.int 0xf1280cb3
.int 0xb1490cb3
.int 0x745c0ab3
.int 0x35d68933
.int 0x70c90133
.int 0x70f50fb3
.int 0x71bc8533
.int 0x34490c33
.int 0xf11800b3
.int 0xf4138333
.int 0xf4e205b3
.int 0xf5d787b3
.int 0xb4b30b33
.int 0xf5598933
.int 0xb0480a33
.int 0x75398eb3
.int 0x75be89b3
.int 0xb16f0b33
.int 0x30278ab3
.int 0x74888933
.int 0x34cb04b3
.int 0x30890833
.int 0x71fd8c33
.int 0x704e0db3
.int 0x30c00bb3
.int 0xf52b0f33
.int 0xb06b0ab3
.int 0x75f48333
.int 0x74b004b3
.int 0xb5e785b3
.int 0x30068933
.int 0x30fa0833
.int 0xf4700833
.int 0x757a88b3
.int 0x748207b3
.int 0xf0328d33
.int 0xf1d785b3
.int 0x75f70c33
.int 0x355b08b3
.int 0x359e8133
.int 0x311c0bb3
.int 0xf1eb0bb3
.int 0x75ed8e33
.int 0x34cb0b33
.int 0xf5e40f33
.int 0x35e70533
.int 0x358a8533
.int 0x317b0633
.int 0xb1ab02b3
.int 0x351e0b33
.int 0x70018e33
.int 0xf1a80fb3
.int 0x71c388b3
.int 0xb14e8633
.int 0x751e8ab3
.int 0x355c82b3
.int 0x74ba80b3
.int 0x700a84b3
.int 0xf5c38fb3
.int 0x70a501b3
.int 0xf5128133
.int 0x310f0c33
.int 0xf0578cb3
.int 0x30a48433
.int 0x30780733
.int 0x75f08833
.int 0xb0770db3
.int 0xf0760c33
.int 0xf1bd0b33
.int 0xb0e081b3
.int 0x74060e33
.int 0xb0fe0833
.int 0xf59400b3
.int 0x75480433
.int 0xb4950ab3
.int 0x340583b3
.int 0xb4b78233
.int 0x31e802b3
.int 0x35540333
.int 0x31a08733
.int 0x747b8fb3
.int 0xb5890933
.int 0x35c50233
.int 0x75fc89b3
.int 0xb1e80533
.int 0xf4da08b3
.int 0xb0180033
.int 0x74aa0d33
.int 0xb19e0833
.int 0xf4fc8eb3
.int 0x303484b3
.int 0xf0c986b3
.int 0xf5228533
.int 0x30020633
.int 0xf5448033
.int 0x35180333
.int 0x75768e33
.int 0xb0ff0cb3
.int 0x31110233
.int 0x30da85b3
.int 0xb1d205b3
.int 0x71268533
.int 0xf5d88733
.int 0xf0aa89b3
.int 0xf0650a33
.int 0xf47885b3
.int 0xf49e84b3
.int 0x704809b3
.int 0xb56e0633
.int 0xf0e200b3
.int 0x35cf8633
.int 0x30760b33
.int 0x31860cb3
.int 0xb5c58033
.int 0x70e806b3
.int 0xf05f0d33
.int 0x348909b3
.int 0x346409b3
.int 0x75fe0d33
.int 0xb1708333
.int 0x71590533
.int 0x355a04b3
.int 0xf5320bb3
.int 0xb5f00cb3
.int 0xf58504b3
.int 0x74dd87b3
.int 0xf02f01b3
.int 0xf1ea0fb3
.int 0x75ab8633
.int 0xb4950233
.int 0x35ea8b33
.int 0xb1c88bb3
.int 0xb0d287b3
.int 0xf1a406b3
.int 0xf5730e33
.int 0xb1ad04b3
.int 0x30410233
.int 0x35108033
.int 0xf18b0e33
.int 0x313f8eb3
.int 0x70c107b3
.int 0x71b60fb3
.int 0x702707b3
.int 0xf1af8533
.int 0x34658fb3
.int 0x31588fb3
.int 0x747405b3
.int 0x31ad0133
.int 0xf12209b3
.int 0xf0480233
.int 0x75c30833
.int 0xb01f8933
.int 0x747f8db3
.int 0x31a304b3
.int 0x31a509b3
.int 0xf16504b3
.int 0xf57c0033
.int 0x70f70633
.int 0xf58583b3
.int 0xb1a78933
.int 0xf40f89b3
.int 0xb5bd09b3
.int 0xb46081b3
.int 0x75b98533
.int 0xf56d8933
.int 0x70dc0eb3
.int 0xb5a589b3
.int 0xf12d0fb3
.int 0x709c8f33
.int 0xf5a58233
.int 0xb4f00a33
.int 0xf47c00b3
.int 0x309787b3
.int 0x30190eb3
.int 0x701d0d33
.int 0xf4020633
.int 0xb10d0a33
.int 0xb1288833
.int 0xb52b8e33
.int 0xb4d28433
.int 0x74388833
.int 0xf1d882b3
.int 0xf00a0733
.int 0x34b200b3
.int 0xf4ef0a33
.int 0xb0c309b3
.int 0xf0b80e33
.int 0x712381b3
.int 0xf0710cb3
.int 0xb18a0833
.int 0x70568bb3
.int 0x346e8e33
.int 0xf41608b3
.int 0xb0c40c33
.int 0x753d0d33
.int 0x71598cb3
.int 0xb08106b3
.int 0x75b58eb3
.int 0x30f302b3
.int 0x358e0a33
.int 0xb06f8933
.int 0xf1f78333
.int 0xb5400c33
.int 0xf1eb8b33
.int 0x740080b3
.int 0x304482b3
.int 0xb5e306b3
.int 0x71cc8e33
.int 0xb10a8933
.int 0x75520533
.int 0x31c10533
.int 0xb5568e33
.int 0xb4868533
.int 0x70778f33
.int 0x301f80b3
.int 0xf0a904b3
.int 0xb0f68833
.int 0x71cd0333
.int 0xb59705b3
.int 0x31bc8733
.int 0x74ee0733
.int 0x74538233
.int 0x35a20d33
.int 0x75558e33
.int 0xf0dc81b3
.int 0x713a88b3
.int 0x31948bb3
.int 0xf43685b3
.int 0x303a85b3
.int 0xf46e8533
.int 0x31a18233
.int 0xf00781b3
.int 0xf5a20ab3
.int 0xb4128333
.int 0xb5d90b33
.int 0x741308b3
.int 0xb19304b3
.int 0x312b8033
.int 0xf5248bb3
.int 0xf42083b3
.int 0xb4f609b3
.int 0xf1698a33
.int 0x31148233
.int 0xf4438e33
.int 0xb1448233
.int 0xf04c8733
.int 0x34ad8e33
.int 0x75298ab3
.int 0xb4bb0c33
.int 0x34b78db3
.int 0xf0e40233
.int 0xb1930b33
.int 0x744b0bb3
.int 0xf09b02b3
.int 0xf44e8033
.int 0x719306b3
.int 0x70448ab3
.int 0xf4440733
.int 0x35de01b3
.int 0xb5630ab3
.int 0x358c8433
.int 0x30f00cb3
.int 0xb1a40cb3
.int 0x34d38eb3
.int 0x31650433
.int 0x74bf03b3
.int 0x305700b3
.int 0x70590eb3
.int 0x70a80f33
.int 0xb4e102b3
.int 0xf10f8bb3
.int 0xf0650433
.int 0x710083b3
.int 0xb0fd04b3
.int 0xb5350233
.int 0xb0478eb3
.int 0x753b0a33
.int 0xb5540133
.int 0xf41805b3
.int 0xb55c08b3
.int 0xb1238cb3
.int 0xf0ab87b3
.int 0xb5cb07b3
.int 0xf5730433
.int 0xf5df8233
.int 0x34b28633
.int 0x745707b3
.int 0xb1228fb3
.int 0xb4ff04b3
.int 0x75b28333
.int 0xb49d0533
.int 0x31098e33
.int 0xb03306b3
.int 0xb4d18e33
.int 0x74038f33
.int 0x75800fb3
.int 0x347c8533
.int 0x35de03b3
.int 0x35210d33
.int 0xb19a8f33
.int 0xb1d000b3
.int 0xf0b28cb3
.int 0xf56c0833
.int 0xb5308eb3
.int 0x301b88b3
.int 0x315a8cb3
.int 0x340d8933
.int 0x31168cb3
.int 0x342b8cb3
.int 0xf4e580b3
.int 0x750f8b33
.int 0x308b0533
.int 0xf08f8833
.int 0xb1a009b3
.int 0x34860333
.int 0xb4448f33
.int 0x31ee0bb3
.int 0xf56a0c33
.int 0x34478033
.int 0xf0fc8f33
.int 0x748e03b3
.int 0x357f85b3
.int 0x74b30633
.int 0x70358eb3
.int 0x70558cb3
.int 0xb5ca8333
.int 0x717a0bb3
.int 0xb4d28d33
.int 0x752d0cb3
.int 0x754b8d33
.int 0x35850533
.int 0x301f83b3
.int 0x35fc01b3
.int 0x707905b3
.int 0xb0368033
.int 0x70a886b3
.int 0xf4b003b3
.int 0xf50582b3
.int 0x313604b3
.int 0x71858133
.int 0x70298ab3
.int 0x353587b3
.int 0xf5ee81b3
.int 0xb0f40d33
.int 0xb59a04b3
.int 0xb5348f33
.int 0xb46e8033
.int 0x34428833
.int 0xb4ea0433
.int 0xb07b08b3
.int 0xb10289b3
.int 0xb1128db3
.int 0xf42500b3
.int 0xb4058f33
.int 0xb1828fb3
.int 0xf1dd8d33
.int 0x710a0a33
.int 0xf0028633
.int 0xb4018333
.int 0xf5c302b3
.int 0x71c90fb3
.int 0xf16c0cb3
.int 0x31fe0f33
.int 0x34790b33
.int 0xb1560433
.int 0xf47b8fb3
.int 0x75ec8bb3
.int 0x31ed8033
.int 0xb48a0133
.int 0x31360e33
.int 0xb1728733
.int 0x75310633
.int 0xb1ce05b3
.int 0x70b90133
.int 0xb4e88a33
.int 0xf09180b3
.int 0x34088733
.int 0xb54e0cb3
.int 0xf5a38733
.int 0x30fc89b3
.int 0xf1fb04b3
.int 0xb41f8d33
.int 0x71908eb3
.int 0x358e85b3
.int 0xb1ff09b3
.int 0x31dd04b3
.int 0xb5098033
.int 0x719e0333
.int 0x701c07b3
.int 0xb4b68d33
.int 0xb4dc01b3
.int 0xf41d8bb3
.int 0x71e40eb3
.int 0xb13782b3
.int 0xf49d0533
.int 0x70ca0bb3
.int 0xb4a104b3
.int 0xb0270833
.int 0x750985b3
.int 0xf52482b3
.int 0x74110333
.int 0xb44d8b33
.int 0x34ec88b3
.int 0x749c8233
.int 0x71680eb3
.int 0xb1020f33
.int 0x75ef8b33
.int 0xb4ed07b3
.int 0xf1320c33
.int 0x31700533
.int 0x717f8bb3
.int 0xb10b88b3
.int 0xf48789b3
.int 0xb4ff06b3
.int 0x70d90f33
.int 0x34e100b3
.int 0xb4fb86b3
.int 0xb51f08b3
.int 0xb5888fb3
.int 0xf0f88db3
.int 0xf5280e33
.int 0xb56107b3
.int 0xb1258d33
.int 0xb4980db3
.int 0x754907b3
.int 0x319405b3
.int 0x34fd06b3
.int 0x75820533
.int 0xf45b03b3
.int 0x303701b3
.int 0x35170333
.int 0xb47f0bb3
.int 0xb5930233
.int 0x743f0133
.int 0x71540a33
.int 0x71980b33
.int 0xf1aa03b3
.int 0x74010e33
.int 0x352489b3
.int 0x309206b3
.int 0x71b18e33
.int 0x74f104b3
.int 0x30008e33
.int 0xf0960833
.int 0x75b68733
.int 0x31ca0db3
.int 0xb41487b3
.int 0x71f781b3
.int 0xf49a0933
.int 0x758f8f33
.int 0x74900633
.int 0x345b0033
.int 0x35ae86b3
.int 0x71e18933
.int 0x31ac0e33
.int 0xb4b00233
.int 0xf1698fb3
.int 0xb59003b3
.int 0xb0af0c33
.int 0xf4ae0b33
.int 0xf42f8e33
.int 0xb52a05b3
.int 0x71af88b3
.int 0x75108233
.int 0x34f88433
.int 0x70ae04b3
.int 0x305c86b3
.int 0xf1960eb3
.int 0xf1f18eb3
.int 0xf11b8a33
.int 0x31f30633
.int 0xf03b87b3
.int 0xb4f906b3
.int 0x70e686b3
.int 0xb15c00b3
.int 0xf5e48d33
.int 0x30b085b3
.int 0xb1c186b3
.int 0x34d90db3
.int 0x70da0cb3
.int 0x353887b3
.int 0xb0560a33
.int 0x342a0cb3
.int 0x345d85b3
.int 0xf4390ab3
.int 0xf4700db3
.int 0xb1490433
.int 0xf1830133
.int 0xb5978d33
.int 0x311d0333
.int 0xf04d8a33
.int 0xb5b50ab3
.int 0xf46605b3
.int 0xf0f08bb3
.int 0xf5ce8233
.int 0xf0280333
.int 0x354f8db3
.int 0x319480b3
.int 0x71568833
.int 0xf1a104b3
.int 0xb46788b3
.int 0x71748233
.int 0x71998333
.int 0x741c0cb3
.int 0xf48f0233
.int 0x71558a33
.int 0xb5280a33
.int 0xf14005b3
.int 0xf1a501b3
.int 0xb10a0f33
.int 0xb57c8fb3
.int 0xb12581b3
.int 0xb42f8533
.int 0xb1878433
.int 0x75af0cb3
.int 0xf5390c33
.int 0xb00d88b3
.int 0xb05489b3
.int 0xb19804b3
.int 0x34800933
.int 0xf03e0933
.int 0x31458733
.int 0xb5ce8c33
.int 0xf5368bb3
.int 0x310c8033
.int 0x35bf08b3
.int 0x74470d33
.int 0x31430633
.int 0x71850233
.int 0x340d8533
.int 0x341d0cb3
.int 0x35588633
.int 0x30cc8533
.int 0x752305b3
.int 0x30e208b3
.int 0x35dc8533
.int 0x31470a33
.int 0xf5ec8133
.int 0xb0ad8ab3
.int 0xf1a20433
.int 0x35320fb3
.int 0xf1e183b3
.int 0xf44103b3
.int 0x30530db3
.int 0xb0d28fb3
.int 0xf0668fb3
.int 0xf01a8d33
.int 0x302a0c33
.int 0xb18b02b3
.int 0xf0688533
.int 0xf5998933
.int 0xf0ba0e33
.int 0xb4c38933
.int 0x756d8f33
.int 0x30208cb3
.int 0x317b01b3
.int 0x313d0ab3
.int 0x34990433
.int 0x34310e33
.int 0xf4800533
.int 0x741182b3
.int 0x758f8fb3
.int 0x30f08f33
.int 0xb4860f33
.int 0x741381b3
.int 0xf02907b3
.int 0xf02f85b3
.int 0xb14c0733
.int 0xb59d0db3
.int 0xb18303b3
.int 0xb4528f33
.int 0x35d204b3
.int 0x30650e33
.int 0xf4fd0533
.int 0xb59700b3
.int 0xf5508eb3
.int 0xb04d8233
.int 0x30fa84b3
.int 0x312f0db3
.int 0xf0078833
.int 0xf53c0eb3
.int 0x70c80733
.int 0x34040233
.int 0x711386b3
.int 0xb0308133
.int 0xb0ad81b3
.int 0x70500f33
.int 0xf1cf0ab3
.int 0x30b002b3
.int 0x35f58b33
.int 0xf4488cb3
.int 0xb0bf09b3
.int 0xf1680c33
.int 0xf55987b3
.int 0xb1140333
.int 0xb4d90433
.int 0x711e0733
.int 0x347e8733
.int 0x712480b3
.int 0xb4ef8c33
.int 0xb5c90d33
.int 0xf12c0233
.int 0x30b682b3
.int 0x30c582b3
.int 0x75188db3
.int 0x34d70133
.int 0x35bc80b3
.int 0x70748f33
.int 0x309a8533
.int 0xf4588ab3
.int 0x34f20c33
.int 0x30f48833
.int 0xb41f0633
.int 0xf0670333
.int 0xb4b70c33
.int 0x71d30c33
.int 0x35388bb3
.int 0x30790733
.int 0xb5c90eb3
.int 0xf5ac8533
.int 0xf0fa8bb3
.int 0x35218033
.int 0x71088133
.int 0x70710133
.int 0x74380c33
.int 0xb02e0f33
.int 0x71278db3
.int 0xf1b20e33
.int 0x35d101b3
.int 0xf1010f33
.int 0xb5170d33
.int 0xf4df89b3
.int 0x753489b3
.int 0xf1080233
.int 0xb5b603b3
.int 0x71230ab3
.int 0x34b385b3
.int 0x313c0333
.int 0xf1ed0a33
.int 0xf1a88fb3
.int 0x71f281b3
.int 0x35da08b3
.int 0x34500e33
.int 0x70848233
.int 0x70100eb3
.int 0x34d782b3
.int 0x75dd0233
.int 0xb1e78cb3
.int 0xb50201b3
.int 0xf5f487b3
.int 0x34038b33
.int 0xf5b989b3
.int 0xb45588b3
.int 0xf5d684b3
.int 0xf5ea8eb3
.int 0xf5360c33
.int 0xf01e8833
.int 0x356a0db3
.int 0xf5e18ab3
.int 0x353d0133
.int 0xb47f8c33
.int 0xb0f00bb3
.int 0x71d480b3
.int 0x31bb0d33
.int 0x75ae81b3
.int 0xf5060833
.int 0x341e8133
.int 0x70840b33
.int 0x30a70d33
.int 0x356e01b3
.int 0x30fd81b3
.int 0xb18e8bb3
.int 0xb0888233
.int 0x304f07b3
.int 0xb03c83b3
.int 0xb5ee0333
.int 0x35c68433
.int 0xb0e002b3
.int 0x752a0a33
.int 0x740900b3
.int 0x316581b3
.int 0xf00b84b3
.int 0x75900133
.int 0x302205b3
.int 0xb4d38a33
.int 0xb0f309b3
.int 0x71520bb3
.int 0x352d0e33
.int 0x306403b3
.int 0xf58a8cb3
.int 0x715407b3
.int 0xb4fc0bb3
.int 0x70b50d33
.int 0x713f8db3
.int 0x75420033
.int 0xf50e83b3
.int 0x31c90fb3
.int 0x70bb0eb3
.int 0xb48582b3
.int 0x75a384b3
.int 0xb5d60733
.int 0xb5868c33
.int 0xb5688833
.int 0xb4350d33
.int 0x34538ab3
.int 0x74ac8eb3
.int 0xb1c60cb3
.int 0xb5708333
.int 0xb5cc0933
.int 0xf4038433
.int 0xb00609b3
.int 0xb43588b3
.int 0xf1cd0bb3
.int 0x356a0633
.int 0x30c787b3
.int 0xb57f8d33
.int 0x31980eb3
.int 0xf56d87b3
.int 0xb08907b3
.int 0xf5ed0233
.int 0xb5230233
.int 0xb51e84b3
.int 0xf19c0e33
.int 0xb4f90a33
.int 0x30470ab3
.int 0xf59587b3
.int 0xf1858a33
.int 0xb0ce09b3
.int 0x30c285b3
.int 0xf5088833
.int 0x716b0933
.int 0xb5150933
.int 0x70d68db3
.int 0x316e0233
.int 0x351d02b3
.int 0xf0040933
.int 0x70590933
.int 0xf5968133
.int 0x702488b3
.int 0x355400b3
.int 0xb56f0f33
.int 0xb58a07b3
.int 0xf5b88e33
.int 0xb5eb0033
.int 0xb4188533
.int 0x34618433
.int 0x35d78f33
.int 0xb1ae0bb3
.int 0xf17003b3
.int 0xf1b68133
.int 0xb45f0eb3
.int 0x70830db3
.int 0xf15081b3
.int 0xb5680c33
.int 0x718a8d33
.int 0xf5a78933
.int 0x301703b3
.int 0x35728e33
.int 0xf4e88033
.int 0x75e28eb3
.int 0x710e8933
.int 0xb01b8db3
.int 0xb4120833
.int 0x751f8db3
.int 0x756d8733
.int 0xb0dd80b3
.int 0xf4860633
.int 0x30dc87b3
.int 0x30860c33
.int 0xb5f68333
.int 0x753d0eb3
.int 0xb5df88b3
.int 0xf1850833
.int 0x70710a33
.int 0x300789b3
.int 0xb5dd8533
.int 0x319b8d33
.int 0x31360333
.int 0x304f0e33
.int 0xb5c78d33
.int 0xb5478633
.int 0x757c0033
.int 0xb59b81b3
.int 0xf44e05b3
.int 0x359904b3
.int 0xb5708633
.int 0xb1680933
.int 0x70c189b3
.int 0xf12a0233
.int 0xb0bd8633
.int 0x347509b3
.int 0xf4f60f33
.int 0xb1018c33
.int 0xf1f20933
.int 0xf0e58733
.int 0x753a8433
.int 0x71998f33
.int 0xf0860cb3
.int 0x712a83b3
.int 0xf5c40ab3
.int 0xf52883b3
.int 0x75608633
.int 0x74148b33
.int 0xb10a8733
.int 0xb56508b3
.int 0x70ef0633
.int 0xb1c50233
.int 0xb5fa0db3
.int 0xf12e8133
.int 0xf4820c33
.int 0x718a0fb3
.int 0x35488e33
.int 0xb1de8ab3
.int 0xf4c080b3
.int 0x74da06b3
.int 0x34ff87b3
.int 0xf0be0b33
.int 0x710e05b3
.int 0xb01802b3
.int 0x350583b3
.int 0xb40400b3
.int 0xb5490b33
.int 0x310901b3
.int 0x71150433
.int 0xf15a8e33
.int 0xb0750a33
.int 0x314104b3
.int 0xf0b58633
.int 0xf1da0333
.int 0x307b0833
.int 0x35150533
.int 0x34b08733
.int 0xb4d30db3
.int 0xf54b83b3
.int 0x718b8eb3
.int 0xb1668d33
.int 0x30b88233
.int 0x74b08f33
.int 0x31ba8b33
.int 0xf5b782b3
.int 0xf5058fb3
.int 0xb4b38633
.int 0x34650ab3
.int 0x31400833
.int 0x749d8b33
.int 0x75e90fb3
.int 0x75190733
.int 0x74f40b33
.int 0xf10303b3
.int 0xb5028eb3
.int 0xb0ce8933
.int 0x75b402b3
.int 0x716a88b3
.int 0xf07f0733
.int 0x30ba0db3
.int 0x75678db3
.int 0xb5820033
.int 0xf18c0ab3
.int 0xb5d50c33
.int 0xf12a8433
.int 0x710b8933
.int 0xb4270d33
.int 0x71640133
.int 0xb5dd8733
.int 0xf07e88b3
.int 0x74d607b3
.int 0xf0e68533
.int 0x30390eb3
.int 0xb0460533
.int 0xb51e04b3
.int 0xf09e8033
.int 0xf40706b3
.int 0xf1190fb3
.int 0xf5eb06b3
.int 0x34c286b3
.int 0x701a82b3
.int 0xb0f60ab3
.int 0x34b90433
.int 0xf4ee0533
.int 0xb0688d33
.int 0xb1cc8eb3
.int 0xb5740333
.int 0x75e502b3
.int 0xf4130433
.int 0xf0190b33
.int 0x34b18033
.int 0x35568a33
.int 0x35aa82b3
.int 0xb5a904b3
.int 0xb10e0bb3
.int 0xf54e0f33
.int 0x317d8833
.int 0x743780b3
.int 0xf0e48bb3
.int 0xb14d8a33
.int 0xb02b0cb3
.int 0xb06f84b3
.int 0x743e0bb3
.int 0xb04c84b3
.int 0x350881b3
.int 0x75cb0e33
.int 0x70388d33
.int 0xb4b084b3
.int 0x34e70533
.int 0x31950bb3
.int 0xb1ae80b3
.int 0xf0e10533
.int 0xb4e308b3
.int 0xb1fc0433
.int 0xf53d0db3
.int 0xb4dd0033
.int 0xb4fa83b3
.int 0xf5070a33
.int 0x314a0fb3
.int 0xb4cc8e33
.int 0x31e986b3
.int 0x35fd0133
.int 0xb5b10db3
.int 0xf43281b3
.int 0x34110b33
.int 0xb1c88333
.int 0x74288db3
.int 0x34aa8a33
.int 0x31418a33
.int 0x31db0c33
.int 0x34e68133
.int 0xf10c85b3
.int 0xb0898db3
.int 0xb51b07b3
.int 0xb53304b3
.int 0x35ce00b3
.int 0xf1500133
.int 0x71cc8b33
.int 0x70008133
.int 0xb54b0e33
.int 0x353b8fb3
.int 0x342f0533
.int 0x70e80433
.int 0xf4a486b3
.int 0x75300d33
.int 0x74730a33
.int 0x74888633
.int 0xf1950a33
.int 0x30f006b3
.int 0x75378933
.int 0x31fa04b3
.int 0x742f06b3
.int 0xf4ac89b3
.int 0x704b88b3
.int 0x75db0333
.int 0xf51206b3
.int 0x70f08533
.int 0x75868533
.int 0xf52e8433
.int 0x35f68cb3
.int 0x710d00b3
.int 0x315c0333
.int 0xf18887b3
.int 0x741b07b3
.int 0xb5fe05b3
.int 0x35748133
.int 0x712401b3
.int 0xb1228db3
.int 0x30068f33
.int 0x706a0a33
.int 0x71f986b3
.int 0xb4298033
.int 0x756d0c33
.int 0xb5528eb3
.int 0xf1e284b3
.int 0x34158733
.int 0x35bb8833
.int 0xb0c305b3
.int 0xf1d18633
.int 0x715a0fb3
.int 0xf5888fb3
.int 0x759201b3
.int 0x35518133
.int 0xb0ed86b3
.int 0xb08d0fb3
.int 0x742a88b3
.int 0xf5d78a33
.int 0xf4cf0cb3
.int 0x754402b3
.int 0xb0f20333
.int 0x75e40933
.int 0x715b81b3
.int 0x716d8033
.int 0x31a78bb3
.int 0x70e30233
.int 0xb4500bb3
.int 0x31d50fb3
.int 0xb5ee0b33
.int 0xb5e10cb3
.int 0x71c60bb3
.int 0xb45904b3
.int 0x34a68a33
.int 0xf0288f33
.int 0x75248833
.int 0x71d28933
.int 0x35238133
.int 0x312c08b3
.int 0xb0a20533
.int 0x75f904b3
.int 0x352a0433
.int 0xf4f28333
.int 0xb0f98fb3
.int 0x305a0a33
.int 0xf4770d33
.int 0xf10f00b3
.int 0x319b02b3
.int 0x755a0633
.int 0x306089b3
.int 0x342c0033
.int 0xf18907b3
.int 0xf5ff0f33
.int 0x30408c33
.int 0xb1828333
.int 0xb56304b3
.int 0xf4c88233
.int 0xf1658a33
.int 0x719e8db3
.int 0x704381b3
.int 0xf4d38e33
.int 0x30f60833
.int 0xb0278cb3
.int 0x70320533
.int 0x751b84b3
.int 0x30c006b3
.int 0xf5b60db3
.int 0x34c18933
.int 0x30270633
.int 0x311c8a33
.int 0x31e405b3
.int 0xb5428633
.int 0x309b0333
.int 0xb59a08b3
.int 0xb4bf8733
.int 0xf1c80bb3
.int 0xb5390db3
.int 0x74248633
.int 0x351607b3
.int 0xf1310fb3
.int 0xb4a480b3
.int 0x70938333
.int 0x303b85b3
.int 0xf4c283b3
.int 0x75440033
.int 0xb1258333
.int 0x31b88433
.int 0xf02105b3
.int 0x35b58533
.int 0x306e0033
.int 0xb49f0233
.int 0x348301b3
.int 0xf55882b3
.int 0x713e0733
.int 0x35f58cb3
.int 0x30d78433
.int 0xf1088eb3
.int 0xb52a0333
.int 0x71c788b3
.int 0xf0cf8fb3
.int 0xb48d09b3
.int 0xf4d40a33
.int 0xf0d60733
.int 0xb4a18733
.int 0x35c50cb3
.int 0xf5a28b33
.int 0xb51b89b3
.int 0xf4380433
.int 0xf41f0833
.int 0xf08f8833
.int 0xb56c08b3
.int 0x74678733
.int 0xb5668833
.int 0xb0f50333
.int 0x70028cb3
.int 0x356f8ab3
.int 0xf0008e33
.int 0x719a0933
.int 0xf1e908b3
.int 0xb4c10a33
.int 0x71dc8933
.int 0xb48c0e33
.int 0x31080833
.int 0x74190eb3
.int 0xb4bf0533
.int 0xb50d84b3
.int 0xb1310f33
.int 0x355b8c33
.int 0xf17e0d33
.int 0xf14c04b3
.int 0x30420433
.int 0x30450cb3
.int 0x34cf8133
.int 0xf1e107b3
.int 0x74e88bb3
.int 0x310c8f33
.int 0x75ad88b3
.int 0x74d28833
.int 0x71950bb3
.int 0x349e8eb3
.int 0xf4bb81b3
.int 0x71538333
.int 0xf1a00ab3
.int 0xf4f68c33
.int 0xf4070933
.int 0xb1ad8e33
.int 0xb1b30cb3
.int 0x701801b3
.int 0xf57505b3
.int 0xb5848733
.int 0xf48e8e33
.int 0x703f8d33
.int 0xf0010d33
.int 0x70630fb3
.int 0xf07609b3
.int 0x35ad8a33
.int 0xb4ab0733
.int 0x75e305b3
.int 0x34ec0a33
.int 0xf40b8633
.int 0xf4f98db3
.int 0x71b10eb3
.int 0x702d01b3
.int 0x74508f33
.int 0xb05d8533
.int 0xf51009b3
.int 0xb4270433
.int 0x70a30333
.int 0xb0ff8233
.int 0x35f30f33
.int 0xf5dd0f33
.int 0x745e0ab3
.int 0xb04d8d33
.int 0x31fd84b3
.int 0x70060b33
.int 0x71818e33
.int 0x34710533
.int 0x301d8bb3
.int 0x71590bb3
.int 0x35748433
.int 0xb5f28bb3
.int 0x34bd0433
.int 0xf1030f33
.int 0x356982b3
.int 0x758501b3
.int 0xb58e8e33
.int 0xb57808b3
.int 0x31e889b3
.int 0xf5b389b3
.int 0xf1d70f33
.int 0xf43b8b33
.int 0x35170533
.int 0xb0900fb3
.int 0xb5598b33
.int 0xf4430333
.int 0xb03d87b3
.int 0x341788b3
.int 0xb44488b3
.int 0x70e685b3
.int 0x75090b33
.int 0xb40f8933
.int 0xb1848fb3
.int 0x75820db3
.int 0xf0ee8ab3
.int 0x30f70c33
.int 0xf4960633
.int 0xb5b38733
.int 0x34d80eb3
.int 0xb01087b3
.int 0xb5718533
.int 0x71c70633
.int 0x359083b3
.int 0xf1170c33
.int 0xf4c60f33
.int 0x70430b33
.int 0x709a8733
.int 0x31928133
.int 0x70228233
.int 0xf11c0133
.int 0x71ed8133
.int 0xf07680b3
.int 0x70140eb3
.int 0x34c184b3
.int 0xb46286b3
.int 0x318b0933
.int 0x35e387b3
.int 0x75af81b3
.int 0x34920733
.int 0x353c8533
.int 0xb1670a33
.int 0x70718f33
.int 0xf11e81b3
.int 0x35018c33
.int 0x30228a33
.int 0x301182b3
.int 0x75a80833
.int 0xf5e986b3
.int 0x31988cb3
.int 0xb4988fb3
.int 0xf19587b3
.int 0x75e10433
.int 0xf5630333
.int 0xf00308b3
.int 0x71da03b3
.int 0xb1e18b33
.int 0xf11681b3
.int 0x31d985b3
.int 0xf0c48eb3
.int 0xf1de86b3
.int 0x30d70533
.int 0xf1f703b3
.int 0x70620333
.int 0x716d8cb3
.int 0x35028033
.int 0x71e706b3
.int 0xf5d58133
.int 0xf1b183b3
.int 0xb4d40a33
.int 0x74058c33
.int 0xf01b02b3
.int 0xb4af0333
.int 0x31a800b3
.int 0x30a104b3
.int 0x75e28533
.int 0xb0c408b3
.int 0xf11c0533
.int 0xb1980733
.int 0x347c83b3
.int 0x30fc8fb3
.int 0xb56903b3
.int 0xf4238e33
.int 0xb4b88f33
.int 0xb0020eb3
.int 0xf46d0133
.int 0x358208b3
.int 0x355f0c33
.int 0xb49103b3
.int 0xb03c8033
.int 0x30860e33
.int 0x31a40eb3
.int 0xf5448db3
.int 0x700b0433
.int 0x71938933
.int 0x34170433
.int 0xb1630b33
.int 0xf1e50e33
.int 0x711c0a33
.int 0x71c70fb3
.int 0x30580633
.int 0x70f48333
.int 0x351b8bb3
.int 0xb4ed0033
.int 0xf0eb04b3
.int 0x747487b3
.int 0x75440d33
.int 0x301d82b3
.int 0x346984b3
.int 0xf4f000b3
.int 0x31bf0db3
.int 0xf4738933
.int 0x347286b3
.int 0x753902b3
.int 0xf0c800b3
.int 0x31cf09b3
.int 0xf4050633
.int 0xb46c01b3
.int 0x753d0d33
.int 0x35ba8033
.int 0xf4088c33
.int 0x705a0cb3
.int 0x741808b3
.int 0xb1638133
.int 0xb05f8bb3
.int 0xf5e600b3
.int 0xb00e86b3
.int 0x75008c33
.int 0xf1828ab3
.int 0xf1360633
.int 0x70ff8a33
.int 0xb57f8333
.int 0x755c8533
.int 0x70cf8b33
.int 0xb00a0bb3
.int 0xf0da0633
.int 0xf4040133
.int 0xf4ed0633
.int 0x74940733
.int 0xf51380b3
.int 0x341887b3
.int 0xb4bb0a33
.int 0x74190bb3
.int 0xb4918733
.int 0x31c50733
.int 0x31598933
.int 0xb5ea8fb3
.int 0x708d80b3
.int 0xf0520433
.int 0x71168bb3
.int 0xf0870033
.int 0xf0fb8033
.int 0xb43c8f33
.int 0x71c00c33
.int 0x74278233
.int 0x71aa8533
.int 0x70ef8a33
.int 0xf4308033
.int 0xf5580fb3
.int 0x31e685b3
.int 0xf0ee84b3
.int 0x34d90b33
.int 0xb0488ab3
.int 0x75350fb3
.int 0x30cb0e33
.int 0x70b68633
.int 0x706489b3
.int 0x31218b33
.int 0xf4fb0cb3
.int 0xb5060333
.int 0x755706b3
.int 0xb09907b3
.int 0x71cd8bb3
.int 0xf54e8833
.int 0xf4918133
.int 0xf47b87b3
.int 0x31a183b3
.int 0xf5d282b3
.int 0xb08d09b3
.int 0xb02502b3
.int 0xb11e8bb3
.int 0x30e10e33
.int 0xf15d80b3
.int 0xb54c0bb3
.int 0xb0970933
.int 0xb5008f33
.int 0x75350fb3
.int 0x30580ab3
.int 0x74f10033
.int 0xb0b48833
.int 0x75f98c33
.int 0x70fc0033
.int 0xf5660db3
.int 0x755c0b33
.int 0xb4970433
.int 0x300b8433
.int 0xb1cd01b3
.int 0xf42a0eb3
.int 0xf5658133
.int 0x35628fb3
.int 0xb5fe8833
.int 0xf1230333
.int 0x705c0cb3
.int 0x75f28233
.int 0x30370133
.int 0xb16d8c33
.int 0x35150b33
.int 0x711184b3
.int 0x74d10533
.int 0xf16c02b3
.int 0x34b68e33
.int 0xb4f606b3
.int 0x74610e33
.int 0x34760c33
.int 0x318688b3
.int 0xf55c8933
.int 0x349b0b33
.int 0xb1828fb3
.int 0x70e20933
.int 0xf58b0a33
.int 0x310882b3
.int 0x314a0233
.int 0xb4c38bb3
.int 0x75200133
.int 0x709a07b3
.int 0xf1d18ab3
.int 0xf15886b3
.int 0x31100d33
.int 0x71280133
.int 0x715b0933
.int 0xf5998db3
.int 0x346e02b3
.int 0x34e80d33
.int 0x31b00e33
.int 0xb5e68033
.int 0xf5f082b3
.int 0xb00f06b3
.int 0xf5ac07b3
.int 0x344d03b3
.int 0xb0298e33
.int 0xf1398933
.int 0xf05a8033
.int 0xf0530bb3
.int 0x70550fb3
.int 0xb48386b3
.int 0xb47c81b3
.int 0xf1e38e33
.int 0x74fe09b3
.int 0xf4550733
.int 0xf4f008b3
.int 0xb0728b33
.int 0xb0ec0e33
.int 0xb1f80933
.int 0xf1358cb3
.int 0x70228833
.int 0x71f48a33
.int 0x35d18f33
.int 0x742d09b3
.int 0xb1588b33
.int 0x71658db3
.int 0x300a0333
.int 0xb0930ab3
.int 0x31d003b3
.int 0xf5df8ab3
.int 0x304308b3
.int 0x74f88ab3
.int 0x74048b33
.int 0x70fc0d33
.int 0x35da02b3
.int 0xf0750633
.int 0x31818833
.int 0xf4d90333
.int 0x71cf0333
.int 0x703d0f33
.int 0x35c48ab3
.int 0xf1b907b3
.int 0xf49b80b3
.int 0xf05c07b3
.int 0x712f8633
.int 0x34308fb3
.int 0xf17781b3
.int 0x71a40533
.int 0x31cf08b3
.int 0x35628d33
.int 0x34db8733
.int 0x70e60fb3
.int 0x303c84b3
.int 0xb4440733
.int 0xf1738ab3
.int 0xb0bc0033
.int 0xf4ff8733
.int 0xb4958333
.int 0xb4760eb3
.int 0xb04304b3
.int 0xf1e68733
.int 0xf0808833
.int 0xf03f8c33
.int 0xb5f98f33
.int 0xb57185b3
.int 0xb42d06b3
.int 0x312586b3
.int 0x34920933
.int 0xb5480833
.int 0x305304b3
.int 0x70508433
.int 0x35230d33
.int 0x34e08c33
.int 0xb5eb0d33
.int 0xf0bb0b33
.int 0x71e18333
.int 0x34428bb3
.int 0xb1fc88b3
.int 0xb5960333
.int 0x74df0cb3
.int 0x319c8333
.int 0x70f40cb3
.int 0xb08b85b3
.int 0xb57e8b33
.int 0xf17b0933
.int 0xf1d28e33
.int 0x71e80d33
.int 0x745f0a33
.int 0xb5070eb3
.int 0xf01205b3
.int 0x308306b3
.int 0x31c90633
.int 0x71e18b33
.int 0xf5650a33
.int 0x74fc8e33
.int 0xb5b909b3
.int 0x74e707b3
.int 0x71238fb3
.int 0x74d784b3
.int 0x311a8033
.int 0x346c0133
.int 0xf5100033
.int 0x35680033
.int 0x31680db3
.int 0x35e08833
.int 0xf1738f33
.int 0x35570eb3
.int 0xf59d8533
.int 0xb4e38233
.int 0xf18109b3
.int 0x34dc84b3
.int 0xf16002b3
.int 0x756682b3
.int 0xb5a689b3
.int 0x752f8233
.int 0xf51682b3
.int 0x34bf0633
.int 0x350a8433
.int 0x311880b3
.int 0xf5140fb3
.int 0x30c307b3
.int 0xf5a503b3
.int 0x31c58033
.int 0xf1508bb3
.int 0x358d8e33
.int 0x75838533
.int 0xb5488933
.int 0x343b02b3
.int 0xf1e58b33
.int 0xb1f10833
.int 0xf5938633
.int 0x74b585b3
.int 0xb0200bb3
.int 0x704987b3
.int 0x304006b3
.int 0x74b28bb3
.int 0x34f80d33
.int 0x34278933
.int 0x34b68733
.int 0xb16b06b3
.int 0xb4990ab3
.int 0x749c0633
.int 0xb0f789b3
.int 0x70c90733
.int 0xb0f28e33
.int 0xb4a602b3
.int 0x712085b3
.int 0xb4ad0cb3
.int 0xb44309b3
.int 0xb1c40233
.int 0xf52f8333
.int 0x70660033
.int 0x711f04b3
.int 0x708a8a33
.int 0x35a100b3
.int 0xb58903b3
.int 0xb0048ab3
.int 0x74ac04b3
.int 0xf4878c33
.int 0x74f387b3
.int 0xf0308ab3
.int 0x319d0ab3
.int 0x74030f33
.int 0x75ff06b3
.int 0xb1be06b3
.int 0xf0248933
.int 0x74380733
.int 0x71ac0bb3
.int 0x71790733
.int 0x34168533
.int 0xb0f58cb3
.int 0x70368a33
.int 0x745e0033
.int 0xb06f87b3
.int 0xf1d20d33
.int 0xb59303b3
.int 0x754708b3
.int 0xf17709b3
.int 0x31528033
.int 0xb5e68eb3
.int 0x756d04b3
.int 0x71648133
.int 0xf0700833
.int 0x703401b3
.int 0x757b87b3
.int 0x71bb0f33
.int 0x307d0b33
.int 0x75688633
.int 0xb1d68db3
.int 0x75fe8833
.int 0x748e8933
.int 0xf4c901b3
.int 0x752c0233
.int 0xf05f00b3
.int 0x34fa0bb3
.int 0x745480b3
.int 0x70ca8d33
.int 0xb4f485b3
.int 0xf1cb8833
.int 0x74b98eb3
.int 0x71588033
.int 0x30668b33
.int 0x74db8733
.int 0x74640c33
.int 0x34348233
.int 0xb0a186b3
.int 0xb1c00f33
.int 0xf43280b3
.int 0x743408b3
.int 0x70100d33
.int 0xb00a8233
.int 0x341f8c33
.int 0xf50884b3
.int 0xb4528b33
.int 0xb1098cb3
.int 0xb0fe0c33
.int 0x31e30933
.int 0xf14a81b3
.int 0x30e48833
.int 0xf0c70c33
.int 0xb17f0233
.int 0x70120933
.int 0x748385b3
.int 0x312d89b3
.int 0xf1b70033
.int 0xf4e28833
.int 0x34a10eb3
.int 0x35aa01b3
.int 0x75d18833
.int 0x345b8033
.int 0xb4e90233
.int 0xf4570d33
.int 0x31128e33
.int 0xf5120f33
.int 0x31130c33
.int 0xf4fb8db3
.int 0x35d582b3
.int 0x753a82b3
.int 0xf40a8f33
.int 0xb48c0cb3
.int 0x704f0933
.int 0x357e8633
.int 0x75298c33
.int 0x34e58cb3
.int 0x31ab0b33
.int 0x75c003b3
.int 0xf16009b3
.int 0xb4dd0333
.int 0x30f70ab3
.int 0xb0db0133
.int 0xb5b388b3
.int 0xb59682b3
.int 0xf0c583b3
.int 0xf1ba0b33
.int 0x75aa80b3
.int 0x305c88b3
.int 0xb1230eb3
.int 0x30240bb3
.int 0x31e389b3
.int 0x348587b3
.int 0x74368d33
.int 0x31910db3
.int 0x35d00e33
.int 0x31ab0433
.int 0xf5568f33
.int 0x351a8033
.int 0x31fd8db3
.int 0x71a70733
.int 0xb1798933
.int 0xb5a08133
.int 0xf44400b3
.int 0x34928b33
.int 0xb47d82b3
.int 0x313606b3
.int 0x707f8e33
.int 0xf1ac8733
.int 0x70a506b3
.int 0xf5020bb3
.int 0xb47a8e33
.int 0xf57b82b3
.int 0x35f20b33
.int 0x30c38a33
.int 0xb04b0133
.int 0xf1c98b33
.int 0xb4c28833
.int 0xf18b0f33
.int 0x349a8bb3
.int 0x352087b3
.int 0xf45100b3
.int 0x313c0533
.int 0x75c109b3
.int 0xb1798133
.int 0x718f02b3
.int 0x35450d33
.int 0xf12d8ab3
.int 0x345786b3
.int 0x30770133
.int 0xb5680ab3
.int 0xf4100833
.int 0x305a08b3
.int 0xb10f0fb3
.int 0xb4548b33
.int 0x35780b33
.int 0xb1b781b3
.int 0xb5a30d33
.int 0x70a48933
.int 0x341903b3
.int 0x309f0db3
.int 0xb4b30633
.int 0x352780b3
.int 0x31be8333
.int 0xb1960b33
.int 0x35630f33
.int 0xf5a30833
.int 0xf52904b3
.int 0xb58c8433
.int 0x71b107b3
.int 0x358b8ab3
.int 0xb4ab8cb3
.int 0x71290b33
.int 0xb01b8b33
.int 0x35ac03b3
.int 0x74508233
.int 0xb51e0fb3
.int 0x314483b3
.int 0x71a601b3
.int 0xf1550ab3
.int 0xb4c90033
.int 0x345304b3
.int 0xf0db8c33
.int 0x70d58eb3
.int 0xb5b48133
.int 0xf49083b3
.int 0xb17c8433
.int 0xb5250833
.int 0xb13e0f33
.int 0xb03d89b3
.int 0xf0dc08b3
.int 0xf55f84b3
.int 0xb09b8db3
.int 0xb12e8033
.int 0xf00b8bb3
.int 0xf4418f33
.int 0xb57c08b3
.int 0xb5ef0b33
.int 0x71fc8bb3
.int 0x30cc02b3
.int 0x71eb0bb3
.int 0x35ee8c33
.int 0xf5ad08b3
.int 0xf59a8733
.int 0x74eb88b3
.int 0x310281b3
.int 0x70cc0db3
.int 0x35788cb3
.int 0x75118833
.int 0x30ec8133
.int 0x34f00ab3
.int 0x71b80833
.int 0x748387b3
.int 0x75820cb3
.int 0x34518333
.int 0xf5660eb3
.int 0x35b08e33
.int 0x359a06b3
.int 0xb0a08133
.int 0x30020f33
.int 0x34388233
.int 0x31738c33
.int 0x74f105b3
.int 0x300f0a33
.int 0x308c0133
.int 0x74ef0033
.int 0x71878f33
.int 0xb0c708b3
.int 0x35c889b3
.int 0xb0ca89b3
.int 0x740383b3
.int 0x314c0133
.int 0xb0560433
.int 0xf1218433
.int 0xf1cd82b3
.int 0x318e8fb3
.int 0x304c0e33
.int 0x74458033
.int 0xf1648b33
.int 0xb15881b3
.int 0x751d83b3
.int 0xf18f8233
.int 0xf47b0b33
.int 0x711c0833
.int 0xb1cb8f33
.int 0xb4ac02b3
.int 0x711c8e33
.int 0x352404b3
.int 0xf4b704b3
.int 0x71d38033
.int 0xb18e84b3
.int 0xf0df0e33
.int 0xb43882b3
.int 0xf5dc8033
.int 0xb09700b3
.int 0x35240bb3
.int 0x342b08b3
.int 0xb0e908b3
.int 0xf13a8233
.int 0x75310833
.int 0x358b0833
.int 0x312b00b3
.int 0xb5660fb3
.int 0x34da83b3
.int 0xf1848133
.int 0xf52d8333
.int 0x31170833
.int 0xb57a87b3
.int 0xf5400533
.int 0xb1a80433
.int 0xf1b20033
.int 0x34ec8a33
.int 0xf1d009b3
.int 0x34c382b3
.int 0x71498c33
.int 0xf56b83b3
.int 0x70d301b3
.int 0x351181b3
.int 0x31dd86b3
.int 0x34fd86b3
.int 0xf5e30ab3
.int 0x31eb8633
.int 0x71ba8eb3
.int 0xb49b80b3
.int 0x35770733
.int 0xf1cb08b3
.int 0x716b88b3
.int 0x74c489b3
.int 0xf42d0d33
.int 0x759b81b3
.int 0x31298f33
.int 0x74bb87b3
.int 0xf4c90fb3
.int 0x342a8db3
.int 0xf46a0a33
.int 0xf43a0833
.int 0xb04c8333
.int 0xb1dc0433
.int 0xb0670033
.int 0x35570ab3
.int 0xb16883b3
.int 0xb4210433
.int 0x71f00b33
.int 0xb03207b3
.int 0x31f00133
.int 0x75928db3
.int 0xb15e0433
.int 0x75fe01b3
.int 0x718c09b3
.int 0xb5c785b3
.int 0x70e50433
.int 0xf00082b3
.int 0xb0038833
.int 0x34be8c33
.int 0xb1bb8633
.int 0x71ed03b3
.int 0x31b505b3
.int 0xb50b0633
.int 0x314101b3
.int 0x70448e33
.int 0xb0e303b3
.int 0x75488d33
.int 0xb06902b3
.int 0x30ac8ab3
.int 0x75358eb3
.int 0xf40f8f33
.int 0xb5528b33
.int 0xb4f78a33
.int 0xb55c0433
.int 0x71390fb3
.int 0x71810333
.int 0xb18f8733
.int 0xb4f88133
.int 0xf4b287b3
.int 0x71478bb3
.int 0xf4610eb3
.int 0xb4180e33
.int 0xf50f8e33
.int 0xf49283b3
.int 0xb0d900b3
.int 0xb14e0433
.int 0x701d0933
.int 0xb1f607b3
.int 0xb4eb0f33
.int 0x75ce0cb3
.int 0x303202b3
.int 0xb5910633
.int 0x351806b3
.int 0xf1c80bb3
.int 0x318d0433
.int 0x75ec86b3
.int 0x70ee8233
.int 0xb4c40233
.int 0xf4a803b3
.int 0xf54b86b3
.int 0x30390cb3
.int 0xb47883b3
.int 0xf5e68933
.int 0xf0900533
.int 0x71280fb3
.int 0xb5c50633
.int 0xf49d89b3
.int 0x303e8d33
.int 0x352087b3
.int 0x31e604b3
.int 0xf4620d33
.int 0xf5ab87b3
.int 0x307c8733
.int 0xf4a78933
.int 0x70cf05b3
.int 0x313f8833
.int 0x70de01b3
.int 0x71f58333
.int 0xb46083b3
.int 0x318782b3
.int 0xb19d88b3
.int 0x35618cb3
.int 0x35720b33
.int 0xb53c0eb3
.int 0xb1690233
.int 0xf1cc0fb3
.int 0x345806b3
.int 0x34ac8333
.int 0xb51905b3
.int 0xb0450db3
.int 0x70ce8ab3
.int 0x706408b3
.int 0xf07185b3
.int 0xb51586b3
.int 0x758b87b3
.int 0xf1d902b3
.int 0x312e07b3
.int 0xb4bb0a33
.int 0xf0b60633
.int 0xf0dc8533
.int 0x306304b3
.int 0x75568933
.int 0xb1a28db3
.int 0xf5f88033
.int 0xb5478ab3
.int 0x31cb8ab3
.int 0x71370833
.int 0x34680033
.int 0x34210633
.int 0x302709b3
.int 0xf1b786b3
.int 0xf1b10833
.int 0x751e83b3
.int 0xf4518c33
.int 0xf5838933
.int 0x75b20e33
.int 0xb5c40233
.int 0xf57d8533
.int 0x74ca8f33
.int 0xf5ad0733
.int 0x74f502b3
.int 0x34540eb3
.int 0xf58102b3
.int 0x709c8933
.int 0xb13f8233
.int 0x75e680b3
.int 0x742f8c33
.int 0x754b8db3
.int 0xb52e0a33
.int 0xb0f38eb3
.int 0xf1c00fb3
.int 0x35b806b3
.int 0xb0df0a33
.int 0xf0fb8833
.int 0x343c83b3
.int 0xb57c0cb3
.int 0x74fb0a33
.int 0x342f8533
.int 0xb52501b3
.int 0xf4118d33
.int 0xb47c0533
.int 0x71600b33
.int 0x31008333
.int 0xb06f0433
.int 0xf05487b3
.int 0xb0d10eb3
.int 0x702585b3
.int 0x70458eb3
.int 0xf1f18833
.int 0xf0020133
.int 0x70070133
.int 0xb12983b3
.int 0xf5260633
.int 0x30aa88b3
.int 0x70018633
.int 0x741c85b3
.int 0xb59a00b3
.int 0x34260cb3
.int 0xf5970cb3
.int 0x35bf0fb3
.int 0x74ed02b3
.int 0x30f78e33
.int 0xb4c98ab3
.int 0xf41200b3
.int 0xf0bf86b3
.int 0xf0108eb3
.int 0xf5928ab3
.int 0x307c0bb3
.int 0x70a68733
.int 0x71110d33
.int 0x31ec08b3
.int 0x31128db3
.int 0x31be0233
.int 0xf13088b3
.int 0xf1e48db3
.int 0xf1968ab3
.int 0x70bd83b3
.int 0x708900b3
.int 0x745e82b3
.int 0x31c582b3
.int 0xb49f8e33
.int 0xb1488c33
.int 0x353f8b33
.int 0xb16409b3
.int 0x35f78c33
.int 0x34ba0333
.int 0xb4d583b3
.int 0xf4bc0633
.int 0xb57e8e33
.int 0xb5e08a33
.int 0x345b09b3
.int 0x757a8333
.int 0x716004b3
.int 0xb12581b3
.int 0x75808d33
.int 0x71880cb3
.int 0x34490d33
.int 0x34230bb3
.int 0x750085b3
.int 0x74180833
.int 0xf5a80233
.int 0x351c0b33
.int 0x75028cb3
.int 0xb4e58d33
.int 0x318686b3
.int 0x702a0433
.int 0x30090fb3
.int 0x30710fb3
.int 0xf1d80bb3
.int 0x306a84b3
.int 0x701c86b3
.int 0x347a0ab3
.int 0xb51f85b3
.int 0xf5920cb3
.int 0xb5650a33
.int 0x75dc8bb3
.int 0xb00203b3
.int 0xf1f68b33
.int 0x70610eb3
.int 0xb5bb8233
.int 0x345d0fb3
.int 0xf5238433
.int 0xf5cb0533
.int 0x35c58233
.int 0x71608bb3
.int 0x745a81b3
.int 0x34e60233
.int 0xf4da8633
.int 0xb4d087b3
.int 0xb0c90633
.int 0x31c606b3
.int 0xb4390eb3
.int 0xb1bb0d33
.int 0x31fb8bb3
.int 0xb5d28ab3
.int 0x71710ab3
.int 0x71788733
.int 0x314a8133
.int 0x34ea8433
.int 0xf46c8933
.int 0xf45d84b3
.int 0xf06a08b3
.int 0x70a48b33
.int 0xb0630733
.int 0xf5380e33
.int 0x305b05b3
.int 0x342504b3
.int 0x34388233
.int 0x75620f33
.int 0xb5610bb3
.int 0x70978733
.int 0xf5090933
.int 0x34d488b3
.int 0xf53d87b3
.int 0xf4d987b3
.int 0xb43c0733
.int 0xf19b0b33
.int 0x74760833
.int 0xb08106b3
.int 0xf1790833
.int 0xb5600a33
.int 0x31288533
.int 0xf5f48d33
.int 0x703e0cb3
.int 0x304005b3
.int 0x71958b33
.int 0x741106b3
.int 0x309c89b3
.int 0x31f98833
.int 0x34090bb3
.int 0xb1220db3
.int 0x754488b3
.int 0x70770933
.int 0x71720033
.int 0xf4248a33
.int 0x75b80c33
.int 0xf4ee8c33
.int 0x74790333
.int 0x34f38833
.int 0xb5ed09b3
.int 0xf0e80d33
.int 0xb4e404b3
.int 0xf49e01b3
.int 0x712b0fb3
.int 0x717a0db3
.int 0x71d980b3
.int 0x752f8e33
.int 0xf4a78b33
.int 0x744e8c33
.int 0xb1e486b3
.int 0xf4e607b3
.int 0xf55b83b3
.int 0xf4510433
.int 0x31cf04b3
.int 0x311a0c33
.int 0xb0f909b3
.int 0xf5ab84b3
.int 0xf0fe03b3
.int 0xb5910b33
.int 0x31cc05b3
.int 0xb0888ab3
.int 0x719586b3
.int 0x744688b3
.int 0x31058433
.int 0x306a0933
.int 0x356c8bb3
.int 0xb0c18133
.int 0x30e685b3
.int 0xf0900db3
.int 0x71a602b3
.int 0x707f8333
.int 0x31ec06b3
.int 0xb19781b3
.int 0xb5c600b3
.int 0xb55b8e33
.int 0xb0ed0a33
.int 0x75968cb3
.int 0x71000cb3
.int 0xb5b303b3
.int 0x752581b3
.int 0xf4b102b3
.int 0x306102b3
.int 0xb00c8f33
.int 0xf0ff8ab3
.int 0x746d0233
.int 0xb5ce0233
.int 0xb0b60f33
.int 0xf1058833
.int 0xb59201b3
.int 0xb40c04b3
.int 0xf14288b3
.int 0xb5a008b3
.int 0x71858233
.int 0x34848cb3
.int 0x744488b3
.int 0x71d78a33
.int 0x315186b3
.int 0xf4a20eb3
.int 0xf00b05b3
.int 0xb07c0833
.int 0x74890c33
.int 0x30c70433
.int 0x358507b3
.int 0x31f18733
.int 0xb5d98233
.int 0x34168eb3
.int 0x75058fb3
.int 0xb5748fb3
.int 0xf47a8cb3
.int 0xf48484b3
.int 0x31f000b3
.int 0xb48203b3
.int 0x31048833
.int 0x34180db3
.int 0x74818933
.int 0x75e70633
.int 0x70698333
.int 0x70b00733
.int 0xf0b58f33
.int 0x70808cb3
.int 0xf55980b3
.int 0xf43806b3
.int 0x748a87b3
.int 0xf1db0733
.int 0xb47504b3
.int 0x316d0ab3
.int 0x31dc0233
.int 0xb0fa00b3
.int 0xb5cb0c33
.int 0x35c305b3
.int 0xb4b70133
.int 0xf1db8133
.int 0x70278233
.int 0x35f58db3
.int 0xb4cf0f33
.int 0xf46f0033
.int 0xf4bd07b3
.int 0x70320a33
.int 0xb50a0d33
.int 0x318708b3
.int 0x347086b3
.int 0x35c989b3
.int 0x34350233
.int 0xf07c8533
.int 0xb44005b3
.int 0xb1bd03b3
.int 0x759e87b3
.int 0x716f8833
.int 0xb06281b3
.int 0x31240033
.int 0xb57a83b3
.int 0xf1848db3
.int 0xf5940033
.int 0x75b109b3
.int 0xb0cb0f33
.int 0x311782b3
.int 0xb12a8533
.int 0x316a0cb3
.int 0xf5e20833
.int 0xb5068f33
.int 0xf50f84b3
.int 0xf4fe03b3
.int 0x74808533
.int 0x75cc82b3
.int 0x30ab0db3
.int 0x70a58033
.int 0xb1f70f33
.int 0x753c8fb3
.int 0xf0600733
.int 0xf4148633
.int 0xb1dd08b3
.int 0x353208b3
.int 0x749d0333
.int 0xb4800db3
.int 0x74aa0933
.int 0x30638633
.int 0xb5978533
.int 0xb01b01b3
.int 0xf05008b3
.int 0xb0b889b3
.int 0xb50287b3
.int 0x31528433
.int 0x704d0133
.int 0x30fd0d33
.int 0x347e03b3
.int 0xf5038ab3
.int 0xf1da0ab3
.int 0x70310fb3
.int 0x35c689b3
.int 0x318b8bb3
.int 0xb5d98033
.int 0xf47f0b33
.int 0xb03a8633
.int 0xb08601b3
.int 0x31960c33
.int 0x702f8b33
.int 0xf0ed8933
.int 0xb50788b3
.int 0xb16c0db3
.int 0x34180833
.int 0x74868f33
.int 0x71f202b3
.int 0xf0e50d33
.int 0xf40d0933
.int 0x750880b3
.int 0x756d8b33

RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe

# Input data section.
	.data

RVTEST_DATA_END

RVMODEL_DATA_BEGIN




signature_1_0:
	.fill 5, 8, 0xdeadbeef
signature_2_0:
	.fill 5, 8, 0xdeadbeef
signature_3_0:
	.fill 5, 8, 0xdeadbeef
signature_4_0:
	.fill 5, 8, 0xdeadbeef
signature_5_0:
	.fill 5, 8, 0xdeadbeef
signature_6_0:
	.fill 5, 8, 0xdeadbeef
signature_7_0:
	.fill 5, 8, 0xdeadbeef
signature_8_0:
	.fill 5, 8, 0xdeadbeef
signature_9_0:
	.fill 5, 8, 0xdeadbeef
signature_10_0:
	.fill 5, 8, 0xdeadbeef
signature_11_0:
	.fill 5, 8, 0xdeadbeef
signature_12_0:
	.fill 5, 8, 0xdeadbeef
signature_13_0:
	.fill 5, 8, 0xdeadbeef
signature_14_0:
	.fill 5, 8, 0xdeadbeef
signature_15_0:
	.fill 5, 8, 0xdeadbeef
signature_16_0:
	.fill 5, 8, 0xdeadbeef
signature_17_0:
	.fill 5, 8, 0xdeadbeef
signature_18_0:
	.fill 5, 8, 0xdeadbeef
signature_19_0:
	.fill 5, 8, 0xdeadbeef
signature_20_0:
	.fill 5, 8, 0xdeadbeef
signature_21_0:
	.fill 5, 8, 0xdeadbeef
signature_22_0:
	.fill 5, 8, 0xdeadbeef
signature_23_0:
	.fill 5, 8, 0xdeadbeef
signature_24_0:
	.fill 5, 8, 0xdeadbeef
signature_25_0:
	.fill 5, 8, 0xdeadbeef
signature_26_0:
	.fill 5, 8, 0xdeadbeef
signature_27_0:
	.fill 5, 8, 0xdeadbeef
signature_28_0:
	.fill 5, 8, 0xdeadbeef
signature_29_0:
	.fill 5, 8, 0xdeadbeef
signature_30_0:
	.fill 5, 8, 0xdeadbeef
signature_31_0:
	.fill 5, 8, 0xdeadbeef
signature_32_0:
	.fill 5, 8, 0xdeadbeef
signature_33_0:
	.fill 5, 8, 0xdeadbeef
signature_34_0:
	.fill 5, 8, 0xdeadbeef
signature_35_0:
	.fill 5, 8, 0xdeadbeef
signature_36_0:
	.fill 5, 8, 0xdeadbeef
signature_37_0:
	.fill 5, 8, 0xdeadbeef
signature_38_0:
	.fill 5, 8, 0xdeadbeef
signature_39_0:
	.fill 5, 8, 0xdeadbeef
signature_40_0:
	.fill 5, 8, 0xdeadbeef
signature_41_0:
	.fill 5, 8, 0xdeadbeef
signature_42_0:
	.fill 5, 8, 0xdeadbeef
signature_43_0:
	.fill 5, 8, 0xdeadbeef
signature_44_0:
	.fill 5, 8, 0xdeadbeef
signature_45_0:
	.fill 5, 8, 0xdeadbeef
signature_46_0:
	.fill 5, 8, 0xdeadbeef
signature_47_0:
	.fill 5, 8, 0xdeadbeef
signature_48_0:
	.fill 5, 8, 0xdeadbeef
signature_49_0:
	.fill 5, 8, 0xdeadbeef
signature_50_0:
	.fill 5, 8, 0xdeadbeef
signature_51_0:
	.fill 5, 8, 0xdeadbeef
signature_52_0:
	.fill 5, 8, 0xdeadbeef
signature_53_0:
	.fill 5, 8, 0xdeadbeef
signature_54_0:
	.fill 5, 8, 0xdeadbeef
signature_55_0:
	.fill 5, 8, 0xdeadbeef


#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END

